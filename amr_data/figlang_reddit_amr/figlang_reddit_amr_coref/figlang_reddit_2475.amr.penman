# ::snt Syrian Refugees in Canada wanting to return to Middle East
# ::tokens ["Syrian", "Refugees", "in", "Canada", "wanting", "to", "return", "to", "Middle", "East"]
# ::lemmas ["Syrian", "Refugees", "in", "Canada", "want", "to", "return", "to", "Middle", "East"]
(c1-1 / want-01
      :ARG0 (c1-4 / refugee
                  :mod (c1-0 / country
                             :name (c1-6 / name
                                         :op1 "Syria")
                             :location-of c1-4)
                  :name (c1-5 / name
                              :op1 "Canada"))
      :ARG1 (c1-2 / return-01
                  :ARG1 c1-4
                  :ARG4 (c1-7 / world-region
                              :name (c1-3 / name
                                          :op1 "Middle"
                                          :op2 "East"))))

# ::snt I wonder how fast opinion would turn if every person who advocated letting the refugees in got one of their very own to house, feed and explain that no, there isn't a big house waiting for you.
# ::tokens ["I", "wonder", "how", "fast", "opinion", "would", "turn", "if", "every", "person", "who", "advocated", "letting", "the", "refugees", "in", "got", "one", "of", "their", "very", "own", "to", "house", ",", "feed", "and", "explain", "that", "no", ",", "there", "is", "n't", "a", "big", "house", "waiting", "for", "you", "."]
# ::lemmas ["i", "wonder", "how", "fast", "opinion", "would", "turn", "if", "every", "person", "who", "advocate", "let", "the", "refugee", "in", "get", "one", "of", "their", "very", "own", "to", "house", ",", "feed", "and", "explain", "that", "no", ",", "there", "be", "not", "a", "big", "house", "wait", "for", "you", "."]
(c2-2 / wonder-01
      :ARG0 (c2-1 / i)
      :ARG1 (c2-6 / thing
                  :ARG2-of (c2-17 / fast-02
                                  :ARG1 (c2-3 / turn-01
                                              :ARG1 c2-6
                                              :ARG1-of (c2-5 / opine-01))))
      :condition (c2-16 / and
                        :op1 (c2-8 / get-01
                                   :ARG0 (c2-22 / person
                                                :mod (c2-11 / every)
                                                :ARG0-of (c2-10 / advocate-01
                                                                :ARG1 (c2-20 / let-01
                                                                             :ARG1 (c2-18 / house-01
                                                                                          :ARG1 (c2-7 / refugee)))))
                                   :ARG1 (c2-4 / refugee
                                               :ARG1-of (c2-13 / include-91
                                                               :ARG2 (c2-9 / refugee
                                                                           :poss c2-22))
                                               :quant 1))
                        :op2 (c2-14 / feed-01
                                    :ARG0 c2-22)
                        :op3 (c2-19 / explain-01
                                    :ARG0 c2-22
                                    :ARG1 (c2-12 / wait-01
                                                 :ARG1 (c2-15 / you)
                                                 :ARG2 (c2-0 / house
                                                             :mod (c2-21 / big))
                                                 :polarity -))))

# ::snt I know refugee and if one day they need a house i will be happy to give them shelter in my appartement .
# ::tokens ["I", "know", "refugee", "and", "if", "one", "day", "they", "need", "a", "house", "i", "will", "be", "happy", "to", "give", "them", "shelter", "in", "my", "appartement", "."]
# ::lemmas ["i", "know", "refugee", "and", "if", "one", "day", "they", "need", "a", "house", "i", "will", "be", "happy", "to", "give", "they", "shelter", "in", "my", "appartement", "."]
(c3-2 / and
      :op1 (c3-10 / know-02
                  :ARG0 (c3-9 / i)
                  :ARG1 (c3-5 / refugee))
      :op2 (c3-3 / happy-01
                 :ARG0 (c3-7 / give-01
                             :ARG0 c3-9
                             :ARG1 (c3-0 / shelter)
                             :ARG2 c3-5
                             :ARG1-of (c3-11 / appart-01
                                             :ARG0 c3-9)
                             :condition (c3-6 / need-01
                                              :ARG0 c3-5
                                              :ARG1 (c3-8 / house)
                                              :time (c3-1 / day
                                                          :mod (c3-4 / one))))
                 :ARG1 c3-9))
