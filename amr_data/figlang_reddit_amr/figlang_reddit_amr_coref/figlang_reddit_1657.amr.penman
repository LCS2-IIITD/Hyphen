# ::snt Subaru driver decides to push through pedestrians
# ::tokens ["Subaru", "driver", "decides", "to", "push", "through", "pedestrians"]
# ::lemmas ["Subaru", "driver", "decide", "to", "push", "through", "pedestrian"]
(c1-0 / decide-01
      :ARG0 (c1-6 / person
                  :ARG0-of (c1-7 / drive-01
                                 :ARG1 (c1-2 / car-make
                                             :name (c1-8 / name
                                                         :op1 "Subaru"))))
      :ARG1 (c1-4 / push-01
                  :ARG0 c1-6
                  :ARG2 (c1-3 / person
                              :ARG0-of (c1-1 / cross-02
                                             :ARG1 (c1-5 / road)))))

# ::snt This driver has shown his willingness to drive right through people, let's stand in front of him again!
# ::tokens ["This", "driver", "has", "shown", "his", "willingness", "to", "drive", "right", "through", "people", ",", "let", "'s", "stand", "in", "front", "of", "him", "again", "!"]
# ::lemmas ["this", "driver", "have", "show", "his", "willingness", "to", "drive", "right", "through", "people", ",", "let", "us", "stand", "in", "front", "of", "he", "again", "!"]
(c2-0 / show-01
      :ARG0 (c2-12 / person
                   :ARG0-of (c2-1 / drive-01)
                   :mod (c2-9 / this))
      :ARG1 (c2-4 / will-02
                  :ARG0 c2-12
                  :ARG1 (c2-5 / drive-01
                              :ARG0 c2-12
                              :path (c2-6 / through
                                          :op1 (c2-8 / person))
                              :mod (c2-10 / right)))
      :ARG0-of (c2-3 / cause-01
                     :ARG1 (c2-11 / stand-01
                                  :ARG0 (c2-13 / we)
                                  :ARG2 (c2-7 / in-front-of
                                              :op1 c2-12)
                                  :mod (c2-2 / again)
                                  :mode imperative)))

# ::snt It really shows you exactly how smart these people are.
# ::tokens ["It", "really", "shows", "you", "exactly", "how", "smart", "these", "people", "are", "."]
# ::lemmas ["it", "really", "show", "you", "exactly", "how", "smart", "these", "people", "be", "."]
(c3-0 / show-01
      :ARG0 (c3-6 / it)
      :ARG1 (c3-2 / thing
                  :degree-of (c3-5 / smart-06
                                   :ARG1 (c3-4 / person
                                               :mod (c3-1 / this))))
      :ARG2 (c3-7 / you)
      :ARG1-of (c3-3 / real-04)
      :manner (c3-8 / exact))
