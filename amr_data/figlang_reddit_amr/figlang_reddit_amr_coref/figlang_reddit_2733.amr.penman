# ::snt IT'S GAME DAY
# ::tokens ["IT", "'S", "GAME", "DAY"]
# ::lemmas ["IT", "'S", "GAME", "DAY"]
(c1-0 / day
      :mod (c1-2 / game)
      :domain (c1-1 / it))

# ::snt pls edelman don't be rusty pls edelman don't be rusty pls edelman don't be rusty pls edelman don't be rusty
# ::tokens ["pls", "edelman", "do", "n't", "be", "rusty", "pls", "edelman", "do", "n't", "be", "rusty", "pls", "edelman", "do", "n't", "be", "rusty", "pls", "edelman", "do", "n't", "be", "rusty"]
# ::lemmas ["pls", "edelman", "do", "not", "be", "rusty", "pls", "edelman", "do", "not", "be", "rusty", "pls", "edelman", "do", "not", "be", "rusty", "pls", "edelman", "do", "not", "be", "rusty"]
(c2-0 / and
      :op1 (c2-3 / rust-01
                 :ARG1 (c2-5 / person
                             :name (c2-6 / name
                                         :op1 "Edelman"))
                 :polarity -
                 :mode imperative)
      :op2 (c2-1 / rust-01
                 :ARG0 (c2-7 / you)
                 :polarity -
                 :mode imperative)
      :op3 (c2-4 / rust-01
                 :ARG0 c2-7
                 :mode imperative
                 :polarity -)
      :op4 (c2-2 / rust-01
                 :ARG0 c2-7
                 :mode imperative))

# ::snt Edelman's gold, and gold doesn't rust
# ::tokens ["Edelman", "'s", "gold", ",", "and", "gold", "does", "n't", "rust"]
# ::lemmas ["Edelman", "'s", "gold", ",", "and", "gold", "do", "not", "rust"]
(c3-1 / rust-01
      :ARG1 (c3-0 / and
                  :op1 (c3-2 / gold
                             :poss (c3-3 / person
                                         :name (c3-4 / name
                                                     :op1 "Edelman")))
                  :op2 (c3-5 / gold
                             :poss c3-3))
      :polarity -)
