# ::snt (TW: not tumblr) This just happened on my very liberal university's required profile creation.
# ::tokens ["(", "TW", ":", "not", "tumblr", ")", "This", "just", "happened", "on", "my", "very", "liberal", "university", "'s", "required", "profile", "creation", "."]
# ::lemmas ["(", "TW", ":", "not", "tumblr", ")", "this", "just", "happen", "on", "my", "very", "liberal", "university", "'s", "required", "profile", "creation", "."]
(c1-14 / multi-sentence
       :snt1 (c1-13 / publication
                    :name (c1-15 / name
                                 :op1 "TW")
                    :ARG1-of (c1-0 / mean-01
                                   :ARG2 (c1-6 / publication
                                               :name (c1-8 / name
                                                           :op1 "YouTube")
                                               :polarity -)))
       :snt2 (c1-11 / be-located-at-91
                    :ARG1 (c1-7 / this)
                    :ARG2 (c1-1 / create-01
                                :ARG0 (c1-4 / university
                                            :ARG1-of (c1-9 / liberal-02
                                                           :degree (c1-5 / very))
                                            :poss (c1-2 / i))
                                :ARG1 (c1-3 / profile)
                                :ARG1-of (c1-10 / require-01))
                    :mod (c1-12 / just)))

# ::snt What's the problem here, if someone wants to be unique and use random pronouns it's hardly hurting anyone, also this is an optional thing so it isn't being forced upon you
# ::tokens ["What", "'s", "the", "problem", "here", ",", "if", "someone", "wants", "to", "be", "unique", "and", "use", "random", "pronouns", "it", "'s", "hardly", "hurting", "anyone", ",", "also", "this", "is", "an", "optional", "thing", "so", "it", "is", "n't", "being", "forced", "upon", "you"]
# ::lemmas ["what", "be", "the", "problem", "here", ",", "if", "someone", "want", "to", "be", "unique", "and", "use", "random", "pronoun", "it", "be", "hardly", "hurt", "anyone", ",", "also", "this", "be", "an", "optional", "thing", "so", "it", "be", "not", "be", "force", "upon", "you"]
(c2-2 / and
      :op1 (c2-7 / hurt-01
                 :ARG0 (c2-5 / want-01
                             :ARG0 (c2-0 / someone)
                             :ARG1 (c2-16 / and
                                          :op1 (c2-8 / unique-01
                                                     :ARG1 c2-0)
                                          :op2 (c2-6 / use-01
                                                     :ARG0 c2-0
                                                     :ARG1 (c2-14 / pronoun
                                                                  :mod (c2-12 / random)))))
                 :ARG1 (c2-1 / anyone)
                 :degree (c2-13 / hardly))
      :op2 (c2-11 / thing
                  :ARG1-of (c2-9 / optional-02)
                  :domain c2-5
                  :mod (c2-10 / also)
                  :ARG0-of (c2-4 / cause-01
                                 :ARG1 (c2-3 / force-02
                                             :ARG1 c2-5
                                             :ARG2 (c2-15 / you)
                                             :polarity -)))
      :domain c2-5)

# ::snt It said it was optional, but it automatically selected the first option and there was no way to not answer it.
# ::tokens ["It", "said", "it", "was", "optional", ",", "but", "it", "automatically", "selected", "the", "first", "option", "and", "there", "was", "no", "way", "to", "not", "answer", "it", "."]
# ::lemmas ["it", "say", "it", "be", "optional", ",", "but", "it", "automatically", "select", "the", "first", "option", "and", "there", "be", "no", "way", "to", "not", "answer", "it", "."]
(c3-4 / contrast-01
      :ARG1 (c3-0 / say-01
                  :ARG0 (c3-10 / it)
                  :ARG1 (c3-8 / optional
                              :domain (c3-6 / it)))
      :ARG2 (c3-3 / and
                  :op1 (c3-9 / select-01
                             :ARG0 c3-6
                             :ARG1 (c3-7 / option
                                         :ord (c3-2 / ordinal-entity
                                                    :value 1))
                             :manner (c3-11 / automatic))
                  :op2 (c3-5 / way
                             :manner-of (c3-1 / answer-01
                                              :ARG1 c3-6)
                             :polarity -)))
