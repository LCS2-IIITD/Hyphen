# ::snt Rhode Islanders today is the last day to register as a democrat or undeclared if you want to vote in the primary.
# ::tokens ["Rhode", "Islanders", "today", "is", "the", "last", "day", "to", "register", "as", "a", "democrat", "or", "undeclared", "if", "you", "want", "to", "vote", "in", "the", "primary", "."]
# ::lemmas ["Rhode", "Islanders", "today", "be", "the", "last", "day", "to", "register", "as", "a", "democrat", "or", "undeclare", "if", "you", "want", "to", "vote", "in", "the", "primary", "."]
(c1-0 / day
      :mod (c1-10 / last)
      :purpose (c1-9 / register-02
                     :ARG0 (c1-12 / person
                                  :mod (c1-1 / state
                                             :name (c1-13 / name
                                                          :op1 "Rhode"
                                                          :op2 "Island")))
                     :ARG3 (c1-6 / or
                                 :op1 (c1-4 / have-org-role-91
                                            :ARG0 c1-12
                                            :ARG1 (c1-7 / political-party
                                                        :name c1-13
                                                        :op1 "Democrat")))
                     :op2 (c1-11 / have-org-role-91
                                 :ARG0 c1-12
                                 :ARG1 c1-7
                                 :polarity -))
      :domain (c1-8 / today)
      :condition (c1-2 / want-01
                       :ARG0 (c1-14 / you)
                       :ARG1 (c1-5 / vote-01
                                   :ARG0 c1-14
                                   :ARG1 (c1-3 / primary))))

# ::snt Hmmmm thought there was at least one other option ....
# ::tokens ["Hmmmm", "thought", "there", "was", "at", "least", "one", "other", "option", "...."]
# ::lemmas ["hmmmm", "think", "there", "be", "at", "least", "one", "other", "option", "...."]
(c2-4 / think-01
      :ARG1 (c2-3 / option
                  :mod (c2-2 / other)
                  :quant (c2-0 / at-least
                               :op1 1))
      :mod (c2-1 / hmm
                 :mode expressive))
