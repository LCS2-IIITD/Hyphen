# ::snt Rand Paul Wants to Allow Every Airline Pilot to Carry a Gun
# ::tokens ["Rand", "Paul", "Wants", "to", "Allow", "Every", "Airline", "Pilot", "to", "Carry", "a", "Gun"]
# ::lemmas ["Rand", "Paul", "Wants", "to", "allow", "every", "Airline", "Pilot", "to", "carry", "a", "Gun"]
(c1-2 / want-01
      :ARG0 (c1-6 / person
                  :name (c1-7 / name
                              :op1 "Rand"
                              :op2 "Paul"))
      :ARG1 (c1-0 / allow-01
                  :ARG0 c1-6
                  :ARG1 (c1-1 / carry-01
                              :ARG0 (c1-4 / person
                                          :ARG0-of (c1-3 / pilot-01
                                                         :location (c1-8 / airline))
                                          :mod (c1-9 / every))
                              :ARG1 (c1-5 / gun))))

# ::snt There wouldn't be a need for pilots to pack heat if every passenger also had a gun like the Founders envisioned.
# ::tokens ["There", "would", "n't", "be", "a", "need", "for", "pilots", "to", "pack", "heat", "if", "every", "passenger", "also", "had", "a", "gun", "like", "the", "Founders", "envisioned", "."]
# ::lemmas ["there", "would", "not", "be", "a", "need", "for", "pilot", "to", "pack", "heat", "if", "every", "passenger", "also", "have", "a", "gun", "like", "the", "Founders", "envision", "."]
(c2-12 / need-01
       :ARG1 (c2-11 / pack-01
                    :ARG0 (c2-7 / person
                                :ARG0-of (c2-4 / pilot-01))
                    :ARG1 (c2-5 / heat))
       :condition (c2-10 / have-03
                         :ARG0 (c2-3 / passenger
                                     :mod (c2-13 / every))
                         :ARG1 (c2-9 / gun
                                     :ARG1-of (c2-8 / resemble-01
                                                    :ARG2 (c2-6 / envision-01
                                                                :ARG0 (c2-0 / person
                                                                            :ARG0-of (c2-2 / found-01)))))
                         :mod (c2-1 / also))
       :polarity -)
