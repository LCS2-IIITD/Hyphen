# ::snt USB plugs that require "personal space" - blocking neighboring ports from use.
# ::tokens ["USB", "plugs", "that", "require", "\"", "personal", "space", "\"", "-", "blocking", "neighboring", "ports", "from", "use", "."]
# ::lemmas ["USB", "plug", "that", "require", "\"", "personal", "space", "\"", "-", "block", "neighboring", "port", "from", "use", "."]
(c1-7 / block-01
      :ARG0 (c1-8 / plug
                  :mod (c1-4 / product
                             :name (c1-9 / name
                                         :op1 "USB"))
                  :ARG0-of (c1-5 / require-01
                                 :ARG1 (c1-0 / space
                                             :ARG1-of (c1-2 / personal-02))))
      :ARG1 (c1-3 / use-01
                  :ARG1 (c1-1 / port
                              :ARG1-of (c1-6 / neighbor-01))))

# ::snt FINALLY, a CrappyDesign posting that is *not* simply carping about two lines of text that can be read ambiguously (eg, up/down or across).
# ::tokens ["FINALLY", ",", "a", "CrappyDesign", "posting", "that", "is", "*", "not", "*", "simply", "carping", "about", "two", "lines", "of", "text", "that", "can", "be", "read", "ambiguously", "(", "eg", ",", "up", "/", "down", "or", "across", ")", "."]
# ::lemmas ["finally", ",", "a", "CrappyDesign", "posting", "that", "be", "*", "not", "*", "simply", "carp", "about", "two", "line", "of", "text", "that", "can", "be", "read", "ambiguously", "(", "eg", ",", "up", "/", "down", "or", "across", ")", "."]
(c2-10 / thing
       :ARG1-of (c2-13 / post-01
                       :ARG0 (c2-9 / person
                                   :name (c2-14 / name
                                                :op1 "CrappyDesign")))
       :ARG0-of (c2-4 / carped-02
                      :ARG1 (c2-12 / line
                                   :mod (c2-5 / text)
                                   :ARG1-of (c2-11 / read-01
                                                   :ARG1-of (c2-6 / possible-01)
                                                   :manner (c2-2 / ambiguity)
                                                   :example (c2-8 / or
                                                                  :op1 (c2-7 / up-03)
                                                                  :op2 (c2-0 / down-03)
                                                                  :op3 (c2-15 / across-02)))
                                   :quant 2)
                      :ARG1-of (c2-1 / simple-02
                                     :polarity -)
                      :mod (c2-3 / final)))
