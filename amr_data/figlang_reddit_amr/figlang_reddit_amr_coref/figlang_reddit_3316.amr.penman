# ::snt I want to decide to be better by having lots of new experiences - how do I do this cheaply?
# ::tokens ["I", "want", "to", "decide", "to", "be", "better", "by", "having", "lots", "of", "new", "experiences", "-", "how", "do", "I", "do", "this", "cheaply", "?"]
# ::lemmas ["i", "want", "to", "decide", "to", "be", "well", "by", "have", "lot", "of", "new", "experience", "-", "how", "do", "i", "do", "this", "cheaply", "?"]
(c1-12 / multi-sentence
       :snt1 (c1-3 / want-01
                   :ARG0 (c1-11 / i)
                   :ARG1 (c1-0 / decide-01
                               :ARG0 c1-11
                               :ARG1 (c1-6 / have-degree-91
                                           :ARG1 c1-11
                                           :ARG2 (c1-10 / good-02
                                                        :ARG1 c1-11)
                                           :ARG3 (c1-2 / more))
                               :manner (c1-14 / experience-01
                                              :ARG0 c1-11
                                              :quant (c1-9 / lot)
                                              :ARG1-of (c1-13 / new-01))))
       :snt2 (c1-4 / do-02
                   :ARG0 (c1-7 / i)
                   :ARG1 (c1-8 / this)
                   :manner (c1-1 / amr-unknown)
                   :ARG1-of (c1-5 / cheap-02)))

# ::snt Say yes to every new opportunity that comes your way as long as it's not against whatever moral code you may have
# ::tokens ["Say", "yes", "to", "every", "new", "opportunity", "that", "comes", "your", "way", "as", "long", "as", "it", "'s", "not", "against", "whatever", "moral", "code", "you", "may", "have"]
# ::lemmas ["say", "yes", "to", "every", "new", "opportunity", "that", "come", "your", "way", "as", "long", "as", "it", "be", "not", "against", "whatever", "moral", "code", "you", "may", "have"]
(c2-0 / say-01
      :ARG0 (c2-12 / you)
      :ARG1 (c2-13 / yes)
      :ARG2 (c2-8 / opportunity
                  :ARG1-of (c2-11 / new-01)
                  :mod (c2-14 / every)
                  :ARG1-of (c2-3 / come-01
                                 :path (c2-4 / way
                                             :poss c2-12)))
      :condition (c2-2 / as-long-as
                       :op1 (c2-7 / oppose-01
                                  :ARG0 c2-8
                                  :ARG1 (c2-1 / code
                                              :ARG1-of (c2-10 / moral-02)
                                              :ARG1-of (c2-6 / have-03
                                                             :ARG0 c2-12
                                                             :ARG1-of (c2-9 / possible-01))
                                              :mod (c2-5 / whatever))
                                  :polarity -))
      :mode imperative)
