# ::snt Iso Enigma/Ber O Jah Jah Lo for Enigma Jah Lo for Ber
# ::tokens ["Iso", "Enigma", "/", "Ber", "O", "Jah", "Jah", "Lo", "for", "Enigma", "Jah", "Lo", "for", "Ber"]
# ::lemmas ["Iso", "Enigma", "/", "Ber", "o", "jah", "Jah", "Lo", "for", "Enigma", "Jah", "Lo", "for", "Ber"]
(c1-0 / slash
      :op1 (c1-4 / organization
                 :name (c1-8 / name
                             :op1 "Iso"
                             :op2 "Enigma"))
      :op2 (c1-3 / organization
                 :name (c1-6 / name
                             :op1 "Ber"
                             :op2 "O"
                             :op3 "Jah"
                             :op4 "Lo"))
      :op3 (c1-1 / organization
                 :name (c1-5 / name
                             :op1 "Enigma"
                             :op2 "Jah"
                             :op3 "Lo"))
      :beneficiary (c1-7 / person
                         :name (c1-2 / name
                                     :op1 "Ber")))

# ::snt Cube them two Jahs, and then baby you got a stew going.
# ::tokens ["Cube", "them", "two", "Jahs", ",", "and", "then", "baby", "you", "got", "a", "stew", "going", "."]
# ::lemmas ["cube", "they", "two", "Jahs", ",", "and", "then", "baby", "you", "get", "a", "stew", "going", "."]
(c2-1 / and
      :op1 (c2-3 / Cube-01
                 :ARG0 (c2-10 / you)
                 :ARG1 (c2-8 / person
                             :mod (c2-6 / religious-group
                                        :name (c2-9 / name
                                                    :op1 "Jah"))
                             :quant 2)
                 :mode imperative)
      :op2 (c2-7 / get-02
                 :ARG0 c2-10
                 :ARG1 (c2-0 / stew
                             :ARG1-of (c2-2 / go-01))
                 :time (c2-5 / then)
                 :mod (c2-4 / baby)))
