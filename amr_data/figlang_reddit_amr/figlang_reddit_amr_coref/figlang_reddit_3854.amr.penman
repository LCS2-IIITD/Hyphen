# ::snt Hamilton retiree uses electric fence to jump-start heart
# ::tokens ["Hamilton", "retiree", "uses", "electric", "fence", "to", "jump", "-", "start", "heart"]
# ::lemmas ["Hamilton", "retiree", "use", "electric", "fence", "to", "jump", "-", "start", "heart"]
(c1-4 / use-01
      :ARG0 (c1-7 / person
                  :ARG0-of (c1-5 / retire-01
                                 :ARG1 (c1-2 / city
                                             :name (c1-8 / name
                                                         :op1 "Hamilton"))))
      :ARG1 (c1-1 / fence
                  :mod (c1-9 / electric))
      :ARG2 (c1-3 / heart
                  :ARG0-of (c1-0 / start-01
                                 :manner (c1-6 / jumpstart-01))))

# ::snt I didn't realize Hamilton had been running that long.
# ::tokens ["I", "did", "n't", "realize", "Hamilton", "had", "been", "running", "that", "long", "."]
# ::lemmas ["i", "do", "not", "realize", "Hamilton", "have", "be", "run", "that", "long", "."]
(c2-2 / realize-01
      :ARG0 (c2-5 / i)
      :ARG1 (c2-0 / run-02
                  :ARG0 (c2-3 / person
                              :name (c2-6 / name
                                          :op1 "Hamilton"))
                  :ARG1-of (c2-4 / long-03
                                 :degree (c2-1 / that)))
      :polarity -)

# ::snt I'm from New Zealand (where Hamilton is) and even I thought that reading the title.
# ::tokens ["I", "'m", "from", "New", "Zealand", "(", "where", "Hamilton", "is", ")", "and", "even", "I", "thought", "that", "reading", "the", "title", "."]
# ::lemmas ["i", "be", "from", "New", "Zealand", "(", "where", "Hamilton", "be", ")", "and", "even", "i", "think", "that", "read", "the", "title", "."]
(c3-1 / and
      :op1 (c3-7 / i
                 :source (c3-2 / country
                               :name (c3-8 / name
                                           :op1 "New"
                                           :op2 "Zealand")
                               :location-of (c3-0 / city
                                                  :name (c3-5 / name
                                                              :op1 "Hamilton"))))
      :op2 (c3-4 / think-01
                 :ARG0 c3-7
                 :ARG1 (c3-3 / that)
                 :mod (c3-10 / even)
                 :manner (c3-6 / read-01
                               :ARG0 c3-7
                               :ARG1 (c3-9 / title))))
