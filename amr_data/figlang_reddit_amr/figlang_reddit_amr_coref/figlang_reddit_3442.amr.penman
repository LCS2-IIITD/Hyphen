# ::snt Trams should be fitted with cameras that flash cars that drive past when unloading and loading passengers.
# ::tokens ["Trams", "should", "be", "fitted", "with", "cameras", "that", "flash", "cars", "that", "drive", "past", "when", "unloading", "and", "loading", "passengers", "."]
# ::lemmas ["tram", "should", "be", "fit", "with", "camera", "that", "flash", "car", "that", "drive", "past", "when", "unloading", "and", "loading", "passenger", "."]
(c1-9 / recommend-01
      :ARG1 (c1-3 / fit-01
                  :ARG1 (c1-8 / trailer)
                  :ARG2 (c1-4 / camera
                              :ARG0-of (c1-6 / flash-02)
                              :ARG0-of (c1-0 / drive-02
                                             :ARG1 (c1-1 / car)
                                             :direction (c1-11 / past)
                                             :time (c1-2 / and
                                                         :op1 (c1-5 / unload-01
                                                                    :ARG1 (c1-7 / passenger))
                                                         :op2 (c1-10 / load-01
                                                                     :ARG1 c1-7))))))

# ::snt Yes and the idiots that block the tram lane to turn!
# ::tokens ["Yes", "and", "the", "idiots", "that", "block", "the", "tram", "lane", "to", "turn", "!"]
# ::lemmas ["yes", "and", "the", "idiot", "that", "block", "the", "tram", "lane", "to", "turn", "!"]
(c2-0 / and
      :op2 (c2-5 / idiot
                 :ARG0-of (c2-4 / block-01
                                :ARG1 (c2-3 / lane
                                            :purpose (c2-2 / tram))
                                :purpose (c2-1 / turn-01
                                               :ARG1 c2-3))))

# ::snt TIL if you want to turn right you're an idiot.
# ::tokens ["TIL", "if", "you", "want", "to", "turn", "right", "you", "'re", "an", "idiot", "."]
# ::lemmas ["TIL", "if", "you", "want", "to", "turn", "right", "you", "be", "an", "idiot", "."]
(c3-4 / idiot
      :domain (c3-5 / you)
      :condition (c3-0 / want-01
                       :ARG0 c3-5
                       :ARG1 (c3-2 / turn-01
                                   :ARG0 c3-5
                                   :ARG2 (c3-3 / right-06
                                               :ARG1 c3-5)))
      :degree (c3-1 / total))
