# ::snt This Isn't the Petition Response You're Looking For -- White House Death Star
# ::tokens ["This", "Is", "n't", "the", "Petition", "Response", "You", "'re", "Looking", "For", "--", "White", "House", "Death", "Star"]
# ::lemmas ["this", "be", "not", "the", "petition", "Response", "you", "be", "Looking", "For", "--", "White", "House", "Death", "Star"]
(c1-0 / say-01
      :ARG0 (c1-6 / i)
      :ARG1 (c1-3 / respond-01
                  :ARG1 (c1-5 / petition-01)
                  :ARG1-of (c1-4 / look-01
                                 :ARG0 (c1-8 / you))
                  :domain (c1-2 / this)
                  :polarity -)
      :ARG2 (c1-1 / person
                  :name (c1-7 / name
                              :op1 "White"
                              :op2 "House"
                              :op3 "Death"
                              :op4 "Star")))

# ::snt He's totally got a point with bullet #3.
# ::tokens ["He", "'s", "totally", "got", "a", "point", "with", "bullet", "#", "3", "."]
# ::lemmas ["he", "be", "totally", "get", "a", "point", "with", "bullet", "#", "3", "."]
(c2-3 / get-a-point-09
      :ARG0 (c2-0 / he)
      :ARG1 (c2-4 / bullet
                  :ord (c2-1 / ordinal-entity
                             :value 3))
      :degree (c2-2 / total))

# ::snt And that it would cost more money than the total amount of money in the world.
# ::tokens ["And", "that", "it", "would", "cost", "more", "money", "than", "the", "total", "amount", "of", "money", "in", "the", "world", "."]
# ::lemmas ["and", "that", "it", "would", "cost", "more", "money", "than", "the", "total", "amount", "of", "money", "in", "the", "world", "."]
(c3-0 / and
      :op2 (c3-1 / cost-01
                 :ARG1 (c3-7 / it)
                 :ARG2 (c3-8 / money
                             :ARG1-of (c3-4 / have-quant-91
                                            :ARG3 (c3-2 / more)
                                            :ARG4 (c3-9 / amount
                                                        :mod (c3-5 / money)
                                                        :ARG2-of (c3-6 / total-01)
                                                        :location (c3-3 / world))))))

# ::snt Yes, I think we'd have to creep a bit closer to a Level 1 civilization before it'd be feasible.
# ::tokens ["Yes", ",", "I", "think", "we", "'d", "have", "to", "creep", "a", "bit", "closer", "to", "a", "Level", "1", "civilization", "before", "it", "'d", "be", "feasible", "."]
# ::lemmas ["yes", ",", "i", "think", "we", "would", "have", "to", "creep", "a", "bit", "close", "to", "a", "Level", "1", "civilization", "before", "it", "would", "be", "feasible", "."]
(c4-8 / think-01
      :ARG0 (c4-11 / i)
      :ARG1 (c4-7 / obligate-01
                  :ARG2 (c4-3 / creep-01
                              :ARG0 (c4-4 / we)
                              :time (c4-10 / before
                                           :op1 (c4-2 / feasible
                                                      :domain c4-3))
                              :ARG1-of (c4-0 / close-10
                                             :ARG2 (c4-6 / civilization
                                                         :mod (c4-9 / level
                                                                    :mod 1))
                                             :ARG2-of (c4-5 / have-degree-91
                                                            :ARG1 c4-3
                                                            :ARG3 (c4-12 / more
                                                                         :quant (c4-1 / bit)))))))

# ::snt but we could just make a coin worth $850,000,000,000,000,000
# ::tokens ["but", "we", "could", "just", "make", "a", "coin", "worth", "$", "850,000,000,000,000,000"]
# ::lemmas ["but", "we", "could", "just", "make", "a", "coin", "worth", "$", "850,000,000,000,000,000"]
(c5-2 / contrast-01
      :ARG2 (c5-6 / possible-01
                  :ARG1 (c5-7 / make-05
                              :ARG0 (c5-3 / we)
                              :ARG1 (c5-0 / coin
                                          :ARG1-of (c5-8 / worth-01
                                                         :ARG2 (c5-4 / monetary-quantity
                                                                     :unit (c5-1 / dollar)
                                                                     :quant 850000)))
                              :mod (c5-5 / just))))
