# ::snt Should Heroes add a function similar to dota 2 where if a player doesn't connect everyone can leave the game without penalty?
# ::tokens ["Should", "Heroes", "add", "a", "function", "similar", "to", "dota", "2", "where", "if", "a", "player", "does", "n't", "connect", "everyone", "can", "leave", "the", "game", "without", "penalty", "?"]
# ::lemmas ["should", "hero", "add", "a", "function", "similar", "to", "dota", "2", "where", "if", "a", "player", "do", "not", "connect", "everyone", "can", "leave", "the", "game", "without", "penalty", "?"]
(c1-8 / recommend-01
      :ARG1 (c1-0 / add-02
                  :ARG0 (c1-5 / hero)
                  :ARG1 (c1-1 / function-01
                              :ARG1-of (c1-6 / resemble-01
                                             :ARG1 (c1-10 / game
                                                          :name (c1-12 / name
                                                                       :op1 "Dota"
                                                                       :op2 2)
                                                          :location-of (c1-11 / possible-01
                                                                              :ARG1 (c1-9 / leave-15
                                                                                          :ARG0 (c1-15 / everyone)
                                                                                          :ARG1 (c1-13 / game)
                                                                                          :ARG2 (c1-7 / penalty
                                                                                                      :polarity -)
                                                                                          :condition (c1-2 / connect-01
                                                                                                           :ARG1 (c1-4 / person
                                                                                                                       :ARG0-of (c1-3 / play-01))
                                                                                                           :polarity -))))
                                             :ARG2 c1-1)))
      :polarity (c1-14 / amr-unknown))

# ::snt I want to see a feature where if at 0:00 a player is still in the starting nexus thing that they are replaced by AI or the game is ended, and they are punished as a leaver.
# ::tokens ["I", "want", "to", "see", "a", "feature", "where", "if", "at", "0:00", "a", "player", "is", "still", "in", "the", "starting", "nexus", "thing", "that", "they", "are", "replaced", "by", "AI", "or", "the", "game", "is", "ended", ",", "and", "they", "are", "punished", "as", "a", "leaver", "."]
# ::lemmas ["i", "want", "to", "see", "a", "feature", "where", "if", "at", "0:00", "a", "player", "be", "still", "in", "the", "start", "nexus", "thing", "that", "they", "be", "replace", "by", "AI", "or", "the", "game", "be", "end", ",", "and", "they", "be", "punish", "as", "a", "leaver", "."]
(c2-2 / want-01
      :ARG0 (c2-1 / i)
      :ARG1 (c2-9 / see-01
                  :ARG0 c2-1
                  :ARG1 (c2-14 / feature-01
                               :ARG1 (c2-13 / and
                                            :op1 (c2-4 / replace-01
                                                       :ARG1 (c2-19 / person
                                                                    :ARG0-of (c2-15 / play-01))
                                                       :ARG2 (c2-11 / intelligent-01
                                                                    :mod (c2-7 / artificial)))
                                            :op2 (c2-8 / end-01
                                                       :ARG1 (c2-5 / game))
                                            :op3 (c2-10 / punish-01
                                                        :ARG1 c2-19
                                                        :manner (c2-16 / leaver))
                                            :condition (c2-17 / be-located-at-91
                                                              :ARG1 c2-19
                                                              :ARG2 (c2-3 / thing
                                                                          :ARG0-of (c2-18 / start-01)
                                                                          :mod (c2-6 / nexus))
                                                              :mod (c2-12 / still)
                                                              :time (c2-0 / date-entity
                                                                          :time "0:00"))))))
