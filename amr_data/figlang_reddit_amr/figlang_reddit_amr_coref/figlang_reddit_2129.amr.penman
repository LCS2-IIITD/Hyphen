# ::snt Now that Hillary has announced, the "moving to New Zealand" idiots are out in force again.
# ::tokens ["Now", "that", "Hillary", "has", "announced", ",", "the", "\"", "moving", "to", "New", "Zealand", "\"", "idiots", "are", "out", "in", "force", "again", "."]
# ::lemmas ["now", "that", "Hillary", "have", "announce", ",", "the", "\"", "move", "to", "New", "Zealand", "\"", "idiot", "be", "out", "in", "force", "again", "."]
(c1-3 / out-06
      :ARG1 (c1-7 / idiot
                  :ARG0-of (c1-8 / move-01
                                 :ARG2 (c1-2 / country
                                             :name (c1-9 / name
                                                         :op1 "New"
                                                         :op2 "Zealand"))))
      :mod (c1-0 / again)
      :time (c1-5 / now
                  :time-of (c1-10 / announce-01
                                  :ARG0 (c1-6 / person
                                              :name (c1-4 / name
                                                          :op1 "Hillary"))))
      :manner (c1-1 / force))

# ::snt Sweet, as long as they stay in Auckland.
# ::tokens ["Sweet", ",", "as", "long", "as", "they", "stay", "in", "Auckland", "."]
# ::lemmas ["sweet", ",", "as", "long", "as", "they", "stay", "in", "Auckland", "."]
(c2-0 / sweet-03
      :condition (c2-1 / as-long-as
                       :op1 (c2-4 / stay-01
                                  :ARG1 (c2-3 / they)
                                  :location (c2-2 / city
                                                  :name (c2-5 / name
                                                              :op1 "Auckland")))))

# ::snt Auckland needs a huge 'no vacancies' sign
# ::tokens ["Auckland", "needs", "a", "huge", "'", "no", "vacancies", "'", "sign"]
# ::lemmas ["auckland", "need", "a", "huge", "'", "no", "vacancy", "'", "sign"]
(c3-5 / need-01
      :ARG0 (c3-1 / city
                  :name (c3-4 / name
                              :op1 "Auckland"))
      :ARG1 (c3-0 / sign
                  :mod (c3-3 / vacancy
                             :polarity -)
                  :mod (c3-2 / huge)))
