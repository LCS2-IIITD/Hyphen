# ::snt Scott: "I'm working behind the scenes on several things; and I hope to be able to tell you about them soon!"
# ::tokens ["Scott", ":", "\"", "I", "'m", "working", "behind", "the", "scenes", "on", "several", "things", ";", "and", "I", "hope", "to", "be", "able", "to", "tell", "you", "about", "them", "soon", "!", "\""]
# ::lemmas ["Scott", ":", "\"", "i", "be", "work", "behind", "the", "scene", "on", "several", "thing", ";", "and", "i", "hope", "to", "be", "able", "to", "tell", "you", "about", "they", "soon", "!", "\""]
(c1-0 / say-01
      :ARG0 (c1-10 / person
                   :name (c1-12 / name
                                :op1 "Scott"))
      :ARG1 (c1-1 / and
                  :op1 (c1-2 / work-01
                             :ARG0 c1-10
                             :ARG1 (c1-7 / thing
                                         :quant (c1-9 / several))
                             :location (c1-8 / behind
                                             :op1 (c1-5 / scene)))
                  :op2 (c1-4 / hope-01
                             :ARG0 c1-10
                             :ARG1 (c1-6 / possible-01
                                         :ARG1 (c1-3 / tell-01
                                                     :ARG0 c1-10
                                                     :ARG1 c1-7
                                                     :ARG2 (c1-13 / you)
                                                     :time (c1-11 / soon))))))

# ::snt This implies that he is working on *multiple* things we don't even know about.
# ::tokens ["This", "implies", "that", "he", "is", "working", "on", "*", "multiple", "*", "things", "we", "do", "n't", "even", "know", "about", "."]
# ::lemmas ["this", "imply", "that", "he", "be", "work", "on", "*", "multiple", "*", "thing", "we", "do", "not", "even", "know", "about", "."]
(c2-4 / imply-01
      :ARG0 (c2-3 / this)
      :ARG1 (c2-0 / work-01
                  :ARG0 (c2-2 / he)
                  :ARG1 (c2-1 / thing
                              :quant (c2-5 / multiple)
                              :ARG1-of (c2-6 / know-01
                                             :ARG0 (c2-7 / we)
                                             :mod (c2-8 / even)
                                             :polarity -))))
