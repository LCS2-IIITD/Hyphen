# ::snt Cat (vs) Pigeon
# ::tokens ["Cat", "(", "vs", ")", "Pigeon"]
# ::lemmas ["Cat", "(", "vs", ")", "Pigeon"]
(c1-0 / versus
      :op1 (c1-3 / cat)
      :op2 (c1-1 / person
                 :name (c1-2 / name
                             :op1 "Pigeon")))

# ::snt It looks like that cat didn't have a backup plan.
# ::tokens ["It", "looks", "like", "that", "cat", "did", "n't", "have", "a", "backup", "plan", "."]
# ::lemmas ["it", "look", "like", "that", "cat", "do", "not", "have", "a", "backup", "plan", "."]
(c2-3 / look-02
      :ARG1 (c2-1 / have-03
                  :ARG0 (c2-0 / cat
                              :mod (c2-2 / that))
                  :ARG1 (c2-5 / plan-01
                              :ARG1 (c2-4 / backup))
                  :polarity -))

# ::snt It was a "just backup" plan
# ::tokens ["It", "was", "a", "\"", "just", "backup", "\"", "plan"]
# ::lemmas ["it", "be", "a", "\"", "just", "backup", "\"", "plan"]
(c3-2 / plan-01
      :ARG1 (c3-3 / it)
      :mod (c3-0 / backup
                 :mod (c3-1 / just)))

# ::snt I don't know what you thought you were adding to that comment, but let the record show you subtracted from it, if anything.
# ::tokens ["I", "do", "n't", "know", "what", "you", "thought", "you", "were", "adding", "to", "that", "comment", ",", "but", "let", "the", "record", "show", "you", "subtracted", "from", "it", ",", "if", "anything", "."]
# ::lemmas ["i", "do", "not", "know", "what", "you", "think", "you", "be", "add", "to", "that", "comment", ",", "but", "let", "the", "record", "show", "you", "subtract", "from", "it", ",", "if", "anything", "."]
(c4-4 / contrast-01
      :ARG1 (c4-12 / know-01
                   :ARG0 (c4-11 / i)
                   :ARG1 (c4-8 / thing
                               :ARG1-of (c4-2 / add-02
                                              :ARG0 (c4-13 / you)
                                              :ARG2 (c4-6 / thing
                                                          :ARG1-of (c4-0 / comment-01)
                                                          :mod (c4-5 / that))
                                              :ARG1-of (c4-7 / think-01
                                                             :ARG0 c4-13)))
                   :polarity -)
      :ARG2 (c4-10 / let-01
                   :ARG0 c4-13
                   :ARG1 (c4-1 / show-01
                               :ARG0 (c4-9 / record)
                               :ARG1 (c4-3 / thing
                                           :ARG1-of c4-2
                                           :ARG0 c4-13
                                           :ARG2 c4-6))
                   :mode imperative)
      :condition (c4-14 / anything))
