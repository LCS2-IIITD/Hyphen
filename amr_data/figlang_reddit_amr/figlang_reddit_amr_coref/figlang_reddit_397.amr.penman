# ::snt Google's new OS is really coming along
# ::tokens ["Google", "'s", "new", "OS", "is", "really", "coming", "along"]
# ::lemmas ["Google", "'s", "new", "os", "be", "really", "come", "along"]
(c1-1 / come-along-19
      :ARG1 (c1-5 / product
                  :name (c1-6 / name
                              :op1 "OS")
                  :poss (c1-0 / company
                              :name (c1-3 / name
                                          :op1 "Google"))
                  :ARG1-of (c1-2 / new-01))
      :ARG1-of (c1-4 / real-04))

# ::snt -1 for not using Rust or Go
# ::tokens ["-1", "for", "not", "using", "Rust", "or", "Go"]
# ::lemmas ["-1", "for", "not", "use", "Rust", "or", "go"]
(c2-0 / cause-01
      :ARG0 (c2-2 / use-01
                  :ARG1 (c2-3 / or
                              :op1 (c2-4 / thing
                                         :name (c2-6 / name
                                                     :op1 "Rust"))
                              :op2 (c2-1 / thing
                                         :name (c2-5 / name
                                                     :op1 "Go")))
                  :polarity -)
      :li 1)

# ::snt -1 for using "Rust" and "Go" in the same sentence without the phrase "shits on" in between.
# ::tokens ["-1", "for", "using", "\"", "Rust", "\"", "and", "\"", "Go", "\"", "in", "the", "same", "sentence", "without", "the", "phrase", "\"", "shits", "on", "\"", "in", "between", "."]
# ::lemmas ["-1", "for", "use", "\"", "Rust", "\"", "and", "\"", "go", "\"", "in", "the", "same", "sentence", "without", "the", "phrase", "\"", "shit", "on", "\"", "in", "between", "."]
(c3-3 / have-li-91
      :ARG1-of (c3-2 / cause-01
                     :ARG0 (c3-5 / use-01
                                 :ARG1 (c3-1 / and
                                             :op1 (c3-0 / string-entity
                                                        :value "Rust")
                                             :op2 (c3-7 / string-entity
                                                        :value "Go"))
                                 :ARG2 (c3-4 / sentence
                                             :ARG1-of (c3-9 / same-01))
                                 :manner (c3-8 / phrase-01
                                               :ARG1 (c3-10 / shit-on)
                                               :location (c3-6 / between
                                                               :op1 c3-0
                                                               :op2 c3-7)
                                               :polarity -)))
      :ARG2 1)
