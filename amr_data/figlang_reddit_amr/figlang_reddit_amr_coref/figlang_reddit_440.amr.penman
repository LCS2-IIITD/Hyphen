# ::snt Louis CK's daughter
# ::tokens ["Louis", "CK", "'s", "daughter"]
# ::lemmas ["Louis", "CK", "'s", "daughter"]
(c1-3 / person
      :ARG0-of (c1-1 / have-rel-role-91
                     :ARG1 (c1-2 / person
                                 :name (c1-4 / name
                                             :op1 "Louis"
                                             :op2 "CK"))
                     :ARG2 (c1-0 / daughter)))

# ::snt If i'm not mistaken, I think that joke was told on his show at one point.
# ::tokens ["If", "i", "'m", "not", "mistaken", ",", "I", "think", "that", "joke", "was", "told", "on", "his", "show", "at", "one", "point", "."]
# ::lemmas ["if", "i", "be", "not", "mistaken", ",", "i", "think", "that", "joke", "be", "tell", "on", "his", "show", "at", "one", "point", "."]
(c2-3 / think-01
      :ARG0 (c2-6 / i)
      :ARG1 (c2-1 / tell-01
                  :ARG1 (c2-5 / joke-01
                              :mod (c2-8 / that))
                  :time (c2-4 / point
                              :quant 1)
                  :location (c2-0 / show-04
                                  :ARG0 (c2-2 / he)))
      :condition (c2-7 / mistake-01
                       :ARG0 c2-6
                       :polarity -))

# ::snt Well, he said she didn't steal it, not that he didn't then steal it.
# ::tokens ["Well", ",", "he", "said", "she", "did", "n't", "steal", "it", ",", "not", "that", "he", "did", "n't", "then", "steal", "it", "."]
# ::lemmas ["well", ",", "he", "say", "she", "do", "not", "steal", "it", ",", "not", "that", "he", "do", "not", "then", "steal", "it", "."]
(c3-1 / contrast-01
      :ARG1 (c3-0 / say-01
                  :ARG0 (c3-3 / he)
                  :ARG1 (c3-6 / steal-01
                              :ARG0 (c3-4 / she)
                              :ARG1 (c3-7 / it)
                              :polarity -))
      :ARG2 (c3-8 / say-01
                  :ARG0 c3-3
                  :ARG1 (c3-9 / steal-01
                              :ARG0 c3-3
                              :ARG1 c3-7
                              :time (c3-5 / then))
                  :polarity -)
      :mod (c3-2 / well))
