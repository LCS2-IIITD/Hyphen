# ::snt while (Headphones == On) do { Find_a_New_Dope_Song(); Listen_To_It_All_Day_Long(); Get_Bored_Of_It_Eventually(); } while (Headphones == On)
# ::tokens ["while", "(", "Headphones", "=", "=", "On", ")", "do", "{", "Find_a_New_Dope_Song", "(", ")", ";", "Listen_To_It_All_Day_Long", "(", ")", ";", "Get_Bored_Of_It_Eventually", "(", ")", ";", "}", "while", "(", "Headphones", "=", "=", "On", ")"]
# ::lemmas ["while", "(", "headphone", "=", "=", "on", ")", "do", "{", "Find_a_New_Dope_Song", "(", ")", ";", "Listen_To_It_All_Day_Long", "(", ")", ";", "get_bored_of_it_eventually", "(", ")", ";", "}", "while", "(", "headphone", "=", "=", "on", ")"]
(c1-3 / contrast-01
      :ARG2 (c1-1 / and
                  :op1 (c1-2 / find-01
                             :ARG0 (c1-5 / you)
                             :ARG1 (c1-0 / song
                                         :name (c1-4 / name
                                                     :op1 "Find_a_New_Dope_Song"))
                             :mode imperative)))

# ::snt That would run code once even if *headphones* aren't equal to *on*
# ::tokens ["That", "would", "run", "code", "once", "even", "if", "*", "headphones", "*", "are", "n't", "equal", "to", "*", "on", "*"]
# ::lemmas ["that", "would", "run", "code", "once", "even", "if", "*", "headphone", "*", "be", "not", "equal", "to", "*", "on", "*"]
(c2-5 / run-01
      :ARG1 (c2-4 / that)
      :manner (c2-0 / code)
      :concession (c2-6 / even-if
                        :op1 (c2-2 / equal-01
                                   :ARG1 (c2-1 / headphones)
                                   :ARG2 (c2-3 / on)
                                   :polarity -))
      :frequency 1)

# ::snt Should be do { if (headphones == on) { Find_a_New_Dope_Song(); Listen_To_It_All_Day_Long(); Get_Bored_Of_It_Eventually(); } else { Try_In_Vain_To_Find_Who_Stole_Your_Headphones(); Listen_To_Random_Overheard_Snippets_Of_Conversations(); } Go_Home(); Use_Computer_All_Evening_In_Slightly_Smaller_Environment(); Sleep(); } while (breathing == true); }
# ::tokens ["Should", "be", "do", "{", "if", "(", "headphones", "=", "=", "on", ")", "{", "Find_a_New_Dope_Song", "(", ")", ";", "Listen_To_It_All_Day_Long", "(", ")", ";", "Get_Bored_Of_It_Eventually", "(", ")", ";", "}", "else", "{", "Try_In_Vain_To_Find_Who_Stole_Your_Headphones", "(", ")", ";", "Listen_To_Random_Overheard_Snippets_Of_Conversations", "(", ")", ";", "}", "Go_Home", "(", ")", ";", "Use_Computer_All_Evening_In_Slightly_Smaller_Environment", "(", ")", ";", "Sleep", "(", ")", ";", "}", "while", "(", "breathing", "=", "=", "true", ")", ";", "}"]
# ::lemmas ["should", "be", "do", "{", "if", "(", "headphone", "=", "=", "on", ")", "{", "Find_a_New_Dope_Song", "(", ")", ";", "Listen_To_It_All_Day_Long", "(", ")", ";", "get_bored_of_it_eventually", "(", ")", ";", "}", "else", "{", "try_in_vain_to_find_who_stole_your_headphones", "(", ")", ";", "listen_to_random_overheard_snippets_of_conversation", "(", ")", ";", "}", "Go_Home", "(", ")", ";", "Use_Computer_All_Evening_In_Slightly_Smaller_Environment", "(", ")", ";", "Sleep", "(", ")", ";", "}", "while", "(", "breathe", "=", "=", "true", ")", ";", "}"]
(c3-11 / recommend-01
       :ARG1 (c3-0 / do-02
                   :ARG1 (c3-10 / thing
                                :name (c3-15 / name
                                             :op1 "Find_a_New_Dope_Song"))
                   :condition (c3-2 / and
                                    :op1 (c3-14 / be-located-at-91
                                                :ARG1 (c3-6 / headphones)
                                                :ARG2 (c3-8 / on))
                                    :op2 (c3-1 / sleep-01
                                               :ARG1 c3-6)
                                    :op3 (c3-12 / get-01
                                                :ARG1 (c3-5 / thing
                                                            :name (c3-13 / name
                                                                         :op1 "Get_Bored_Of_It_Eventually")))
                                    :op4 (c3-16 / try-01
                                                :ARG1 (c3-7 / thing
                                                            :name (c3-9 / name
                                                                        :op1 "Try_In_Vain_To_Find_Who_Stole_Your_Headphones"))
                                                :mod (c3-17 / else))
                                    :condition-of c3-11))
       :op1 c3-14
       :ARG1 (c3-3 / thing
                   :name (c3-4 / name
                               :op1 "Use_Computer_All_Evening_In_Slightly_Smaller_Environment"))
       :op2 c3-14
       :ARG1 c3-3
       :ARG2 c3-8)
