# ::snt Japan accepts 27 refugees last year, rejects 99%
# ::tokens ["Japan", "accepts", "27", "refugees", "last", "year", ",", "rejects", "99", "%"]
# ::lemmas ["Japan", "accept", "27", "refugee", "last", "year", ",", "reject", "99", "%"]
(c1-0 / and
      :op1 (c1-8 / accept-01
                 :ARG0 (c1-1 / country
                             :name (c1-6 / name
                                         :op1 "Japan"))
                 :ARG1 (c1-3 / refugee
                             :quant 27)
                 :time (c1-7 / year
                             :mod (c1-4 / last)))
      :op2 (c1-2 / reject-01
                 :ARG0 c1-1
                 :ARG1 (c1-5 / percentage-entity
                             :value 99)))

# ::snt I'm also pretty sure that Japan checks their home countries every four years and if it's safe to live there again they deport the refugees back to their home countries.
# ::tokens ["I", "'m", "also", "pretty", "sure", "that", "Japan", "checks", "their", "home", "countries", "every", "four", "years", "and", "if", "it", "'s", "safe", "to", "live", "there", "again", "they", "deport", "the", "refugees", "back", "to", "their", "home", "countries", "."]
# ::lemmas ["i", "be", "also", "pretty", "sure", "that", "Japan", "check", "their", "home", "country", "every", "four", "years", "and", "if", "it", "be", "safe", "to", "live", "there", "again", "they", "deport", "the", "refugee", "back", "to", "their", "home", "country", "."]
(c2-12 / sure-02
       :ARG0 (c2-3 / i)
       :ARG1 (c2-14 / and
                    :op1 (c2-4 / check-01
                               :ARG0 (c2-0 / country
                                           :name (c2-10 / name
                                                        :op1 "Japan"))
                               :ARG1 (c2-6 / country
                                           :mod (c2-15 / home)
                                           :poss (c2-8 / they))
                               :frequency (c2-9 / rate-entity-91
                                                :ARG3 (c2-5 / temporal-quantity
                                                            :unit (c2-13 / year)
                                                            :quant 4)))
                    :op2 (c2-1 / deport-01
                               :ARG0 c2-0
                               :ARG1 (c2-7 / refugee)
                               :direction (c2-17 / back
                                                 :op1 c2-0)
                               :condition (c2-18 / safe-01
                                                 :ARG1 (c2-16 / live-01
                                                              :location c2-6
                                                              :mod (c2-11 / again)))))
       :mod (c2-2 / also)
       :degree (c2-19 / pretty))

# ::snt Which should be how every refugee is treated everywhere ... its insane to ever allow them to become citizens.
# ::tokens ["Which", "should", "be", "how", "every", "refugee", "is", "treated", "everywhere", "...", "its", "insane", "to", "ever", "allow", "them", "to", "become", "citizens", "."]
# ::lemmas ["which", "should", "be", "how", "every", "refugee", "be", "treat", "everywhere", "...", "its", "insane", "to", "ever", "allow", "they", "to", "become", "citizen", "."]
(c3-9 / multi-sentence
      :snt1 (c3-6 / recommend-01
                  :ARG1 (c3-5 / treat-01
                              :ARG1 (c3-4 / refugee
                                          :mod (c3-10 / every))
                              :location (c3-2 / everywhere)))
      :snt2 (c3-8 / insane
                  :domain (c3-0 / allow-01
                                :ARG1 (c3-7 / become-01
                                            :ARG1 c3-4
                                            :ARG2 (c3-1 / citizen))
                                :time (c3-3 / ever))))
