# ::snt This authentic weather app gets it
# ::tokens ["This", "authentic", "weather", "app", "gets", "it"]
# ::lemmas ["this", "authentic", "weather", "app", "get", "it"]
(c1-3 / get-30
      :ARG0 (c1-0 / app
                  :mod (c1-1 / weather)
                  :ARG1-of (c1-5 / authentic-02)
                  :mod (c1-2 / this))
      :ARG1 (c1-4 / it))

# ::snt That's how you know the USA rocks hard - if we want our own measurement system, we get it.
# ::tokens ["That", "'s", "how", "you", "know", "the", "USA", "rocks", "hard", "-", "if", "we", "want", "our", "own", "measurement", "system", ",", "we", "get", "it", "."]
# ::lemmas ["that", "be", "how", "you", "know", "the", "USA", "rock", "hard", "-", "if", "we", "want", "our", "own", "measurement", "system", ",", "we", "get", "it", "."]
(c2-9 / multi-sentence
      :snt1 (c2-10 / know-01
                   :ARG0 (c2-11 / you)
                   :ARG1 (c2-6 / rock-04
                               :ARG1 (c2-1 / country
                                           :name (c2-8 / name
                                                       :op1 "USA"))
                               :ARG1-of (c2-5 / hard-04)))
      :snt2 (c2-7 / get-01
                  :ARG0 (c2-2 / we)
                  :ARG1 (c2-3 / it)
                  :condition (c2-12 / want-01
                                    :ARG0 c2-2
                                    :ARG1 (c2-0 / system
                                                :instrument-of (c2-4 / measure-01)
                                                :poss c2-2))))

# ::snt It's called ignorance
# ::tokens ["It", "'s", "called", "ignorance"]
# ::lemmas ["it", "be", "call", "ignorance"]
(c3-2 / call-01
      :ARG1 (c3-0 / it)
      :ARG2 (c3-1 / ignorance))
