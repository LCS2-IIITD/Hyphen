# ::snt Scott Walker directly appeals to Trump to let him drug test people who need food stamps
# ::tokens ["Scott", "Walker", "directly", "appeals", "to", "Trump", "to", "let", "him", "drug", "test", "people", "who", "need", "food", "stamps"]
# ::lemmas ["Scott", "Walker", "directly", "appeal", "to", "Trump", "to", "let", "he", "drug", "test", "people", "who", "need", "food", "stamp"]
(c1-2 / appeal-02
      :ARG0 (c1-11 / person
                   :name (c1-12 / name
                                :op1 "Scott"
                                :op2 "Walker"))
      :ARG1 (c1-7 / person
                  :name (c1-9 / name
                              :op1 "Trump"))
      :ARG2 (c1-10 / let-01
                   :ARG0 c1-7
                   :ARG1 (c1-8 / test-01
                               :ARG0 c1-7
                               :ARG1 (c1-5 / person
                                           :ARG0-of (c1-6 / need-01
                                                          :ARG1 (c1-0 / stamp
                                                                      :mod (c1-3 / food))))
                               :ARG2 (c1-1 / drug)))
      :ARG1-of (c1-4 / direct-02))

# ::snt Yeah, that was tried in Florida, at great expense, and not one person on food stamps was found to have tainted urine.
# ::tokens ["Yeah", ",", "that", "was", "tried", "in", "Florida", ",", "at", "great", "expense", ",", "and", "not", "one", "person", "on", "food", "stamps", "was", "found", "to", "have", "tainted", "urine", "."]
# ::lemmas ["yeah", ",", "that", "be", "try", "in", "Florida", ",", "at", "great", "expense", ",", "and", "not", "one", "person", "on", "food", "stamp", "be", "find", "to", "have", "taint", "urine", "."]
(c2-1 / and
      :op1 (c2-6 / try-02
                 :ARG1 (c2-3 / that)
                 :location (c2-0 / state
                                 :name (c2-11 / name
                                              :op1 "Florida"))
                 :ARG1-of (c2-13 / expend-01
                                 :degree (c2-8 / great)))
      :op2 (c2-2 / find-01
                 :ARG1 (c2-4 / urine
                             :ARG1-of (c2-12 / taint-01)
                             :poss (c2-10 / person
                                          :prep-on (c2-9 / stamp
                                                         :mod (c2-5 / food))
                                          :polarity -)))
      :mod (c2-7 / yeah
                 :mode expressive))
