# ::snt Snowboarder jumps over a flight of stairs without a spotter, WCGW?
# ::tokens ["Snowboarder", "jumps", "over", "a", "flight", "of", "stairs", "without", "a", "spotter", ",", "WCGW", "?"]
# ::lemmas ["Snowboarder", "jump", "over", "a", "flight", "of", "stair", "without", "a", "spotter", ",", "WCGW", "?"]
(c1-0 / say-01
      :ARG0 (c1-11 / i)
      :ARG1 (c1-10 / jump-03
                   :ARG0 (c1-9 / person
                               :ARG0-of (c1-1 / ski-01))
                   :path (c1-7 / over
                               :op1 (c1-3 / fly-01
                                          :path (c1-6 / stair)))
                   :manner (c1-5 / have-03
                                 :ARG0 c1-9
                                 :ARG1 (c1-8 / person
                                             :ARG0-of (c1-12 / spot-01))
                                 :polarity -)
                   :polarity (c1-2 / amr-unknown))
      :ARG2 (c1-4 / person
                  :name (c1-13 / name
                               :op1 "WCGW")))

# ::snt If it were me driving that car the worst would have been yet to come for that snowboarder.
# ::tokens ["If", "it", "were", "me", "driving", "that", "car", "the", "worst", "would", "have", "been", "yet", "to", "come", "for", "that", "snowboarder", "."]
# ::lemmas ["if", "it", "be", "i", "drive", "that", "car", "the", "bad", "would", "have", "be", "yet", "to", "come", "for", "that", "snowboarder", "."]
(c2-7 / have-condition-91
      :ARG1 (c2-3 / come-04
                  :ARG1 (c2-8 / thing
                              :ARG1-of (c2-9 / bad-07
                                             :ARG2-of (c2-10 / have-degree-91
                                                             :ARG1 c2-8
                                                             :ARG3 (c2-12 / most))))
                  :ARG2 (c2-11 / person
                               :ARG0-of (c2-0 / ski-01)
                               :mod (c2-5 / that))
                  :time (c2-13 / yet))
      :ARG2 (c2-1 / drive-01
                  :ARG0 (c2-4 / i)
                  :ARG1 (c2-2 / car
                              :mod (c2-6 / that))))
