comment,amr
"If Jesus had died today, he probably would have been the subject of many memes just like Harambe","# ::snt If Jesus had died today, he probably would have been the subject of many memes just like Harambe
(h / have-condition-91
      :ARG1 (p / probable
            :domain (s / subject-01
                  :ARG1 (p2 / person
                        :name (n / name
                              :op1 ""Jesus""))
                  :ARG2 (m / meme
                        :quant (m2 / many)
                        :ARG1-of (r / resemble-01
                              :ARG2 (m3 / meme
                                    :mod (p3 / person
                                          :name (n2 / name
                                                :op1 ""Harambe"")))
                              :mod (j / just)))))
      :ARG2 (d / die-01
            :ARG1 p2
            :time (t / today)))"
Is.... the Bible..... a giant collection of ancient memes and fan created lore?,"# ::snt Is.... the Bible..... a giant collection of ancient memes and fan created lore?
(c / collect-01
      :ARG1 (a / and
            :op1 (m / meme
                  :mod (a2 / ancient))
            :op2 (l / lore
                  :ARG1-of (c2 / create-01
                        :ARG0 (f / fan))))
      :ARG2 (b / book
            :name (n / name
                  :op1 ""Bible""))
      :polarity (a3 / amr-unknown)
      :mod (g / giant))"
Well it's not the real deal if that's what you mean,"# ::snt Well it's not the real deal if that's what you mean
(d / deal
      :polarity -
      :ARG1-of (r / real-04)
      :domain (ii / it)
      :condition (m / mean-01
            :ARG0 (y / you)
            :ARG2 d)
      :mod (w / well))"
Next you're going to tell me Mercy isn't actually married to road hog.,"# ::snt Next you're going to tell me Mercy isn't actually married to road hog.
(t / tell-01
      :ARG0 (y / you)
      :ARG1 (m / marry-01
            :polarity -
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Mercedes""))
            :ARG2 (h / hog
                  :mod (r / road))
            :ARG1-of (a / actual-02))
      :ARG2 (ii / i)
      :time (n2 / next))"
