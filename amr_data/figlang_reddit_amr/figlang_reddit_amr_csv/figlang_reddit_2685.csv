comment,amr
"NYC Fashion Photog suing cyclist for damage to her car after she rear ends him, sending him to ICU.","# ::snt NYC Fashion Photog suing cyclist for damage to her car after she rear ends him, sending him to ICU.
(s / sue-02
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (p2 / publication
                        :name (n / name
                              :op1 ""NYC""
                              :op2 ""Fashion""
                              :op3 ""Photog""))
                  :ARG2 (p3 / person
                        :ARG0-of (p4 / photograph-01
                              :ARG1 (f / fashion)))))
      :ARG1 (p5 / person
            :ARG0-of (c / cycle-01))
      :ARG2 (d / damage-01
            :ARG0 p5
            :ARG1 (c2 / car
                  :poss p5))
      :time (a / after
            :op1 (e / end-01
                  :ARG0 p5
                  :ARG1 p3
                  :manner (r / rear-01)))
      :ARG0-of (s2 / send-03
            :ARG1 p5
            :ARG2 (ii / ICU)))"
"The lesson here, you entitled little bike riding nerds, is: if something is bigger and moving faster than you, just get out of the way.","# ::snt The lesson here, you entitled little bike riding nerds, is: if something is bigger and moving faster than you, just get out of the way.
(l / lesson
      :ARG1-of (e / entitle-01
            :ARG2 (y / you
                  :mod (n / nerd
                        :mod (l2 / little)
                        :ARG0-of (r / ride-01
                              :ARG1 (b / bike)))))
      :domain (g / get-05
            :mode imperative
            :ARG0 y
            :ARG1 y
            :ARG2 (o / out-06
                  :ARG1 y
                  :ARG2 (w / way))
            :condition (a / and
                  :op1 (h / have-degree-91
                        :ARG1 (s / something)
                        :ARG2 (b2 / big)
                        :ARG3 (m / more)
                        :ARG4 y)
                  :op2 (m2 / move-01
                        :ARG1 s
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (f / fast-02
                                    :ARG1 m2)
                              :ARG3 (m3 / more)
                              :ARG4 y)))
            :mod (j / just))
      :location (h3 / here))"
And if you don't see it coming because it's **behind** you...?,"# ::snt And if you don't see it coming because it's **behind** you...?
(a / and
      :op2 (h / have-condition-91
            :ARG2 (s / see-01
                  :polarity -
                  :ARG0 (y / you)
                  :ARG1 (c / come-01
                        :ARG1 (ii / it))
                  :ARG1-of (c2 / cause-01
                        :ARG0 (b / be-located-at-91
                              :ARG1 ii
                              :ARG2 (b2 / behind
                                    :op1 y))))
            :polarity (a2 / amr-unknown)))"
Then you deserve to be hit because you shouldn't be riding a bike if you aren't aware of a few tons of metal speeding in your vicinity.,"# ::snt Then you deserve to be hit because you shouldn't be riding a bike if you aren't aware of a few tons of metal speeding in your vicinity.
(d / deserve-01
      :ARG0 (y / you)
      :ARG1 (h / hit-01
            :ARG1 y)
      :ARG1-of (c / cause-01
            :ARG0 (r / recommend-01
                  :ARG1 (r2 / ride-01
                        :polarity -
                        :ARG0 y
                        :ARG1 (b / bike))
                  :condition (r3 / realize-01
                        :polarity -
                        :ARG0 y
                        :ARG1 (s / speed-01
                              :ARG0 (m / metal
                                    :quant (f / few
                                          :op1 (m2 / mass-quantity
                                                :quant 1
                                                :unit (t / ton))))
                              :location (v / vicinity
                                    :poss y)))))
      :mod (t2 / then))"
