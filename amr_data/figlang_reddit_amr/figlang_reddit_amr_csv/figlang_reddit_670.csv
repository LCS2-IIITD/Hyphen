comment,amr
Why code review beats testing: evidence from decades of programming research | Kevin Burke,"# ::snt Why code review beats testing: evidence from decades of programming research | Kevin Burke
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 ""Kevin""
                  :op2 ""Burke""))
      :ARG1 (b / beat-03
            :ARG0 (r / review-01
                  :ARG1 (c / code))
            :ARG1 (t / test-01)
            :ARG0-of (e / evidence-01
                  :source (r2 / research-01
                        :ARG1 (p2 / program-01)
                        :duration (m / multiple
                              :op1 (t2 / temporal-quantity
                                    :quant 1
                                    :unit (d / decade)))))))"
"All programmers should read Code Complete, it is a timeless text that addresses fundamentals of programming that span languages, methodologies and decades ( - I do concede that there is a bias toward OO in some of the chapters)","# ::snt All programmers should read Code Complete, it is a timeless text that addresses fundamentals of programming that span languages, methodologies and decades ( - I do concede that there is a bias toward OO in some of the chapters)
(m / multi-sentence
      :snt1 (r / recommend-01
            :ARG1 (r2 / read-01
                  :ARG0 (p / person
                        :ARG0-of (p2 / program-01)
                        :mod (a / all))
                  :ARG1 (t / text
                        :name (n / name
                              :op1 ""Code""
                              :op2 ""Complete"")
                        :ARG0-of (a2 / address-02
                              :ARG1 (f / fundamental
                                    :domain (p3 / program-01
                                          :ARG0-of (s / span-01
                                                :ARG1 (a3 / and
                                                      :op1 (l / language)
                                                      :op2 (m2 / methodology)
                                                      :op3 (m3 / multiple
                                                            :op1 (t2 / temporal-quantity
                                                                  :quant 1
                                                                  :unit (d / decade)))))))))))
      :snt2 (c / concede-01
            :ARG0 (ii / i)
            :ARG1 (b / bias-01
                  :ARG1 (t3 / thing
                        :name n
                        :op1 ""OO""))
            :location (c2 / chapter
                  :quant (s2 / some)
                  :ARG1-of (ii2 / include-91
                        :ARG2 (c3 / chapter)))))"
