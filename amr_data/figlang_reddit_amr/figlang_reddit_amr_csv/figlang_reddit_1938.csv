comment,amr
"Parsing 10TB of Metadata, 26M Domain Names and 1.4M SSL Certs for $10 on AWS","# ::snt Parsing 10TB of Metadata, 26M Domain Names and 1.4M SSL Certs for $10 on AWS
(p / power-01
      :ARG1 (a / and
            :op1 (p2 / product
                  :name (n / name
                        :op1 ""Metadata"")
                  :quant (ii / information-quantity
                        :quant 10
                        :unit (t / terabyte)))
            :op2 (p3 / product
                  :name (n2 / name
                        :op1 ""Domain""
                        :op2 ""Names"")
                  :quant 26000000)
            :op3 (p4 / product
                  :name (n3 / name
                        :op1 ""SSL""
                        :op2 ""Certs"")
                  :quant (m / monetary-quantity
                        :quant 1.4
                        :unit (d / dollar))))
      :prep-on (c / company
            :name (n4 / name
                  :op1 ""AWS""))
      :prep-for (m2 / monetary-quantity
            :quant 10
            :unit (d2 / dollar)))"
"Well proggit, I am waiting for someone here to show that you can do this using only three lines of bash on a cheap laptop.","# ::snt Well proggit, I am waiting for someone here to show that you can do this using only three lines of bash on a cheap laptop.
(w / wait-01
      :ARG1 (ii / i)
      :ARG2 (s / show-01
            :ARG0 (s2 / someone
                  :location (h / here))
            :ARG1 (p / possible-01
                  :ARG1 (d / do-02
                        :ARG0 (y / you)
                        :ARG1 (t / this)
                        :manner (u / use-01
                              :ARG0 y
                              :ARG1 (l / line
                                    :quant 3
                                    :ARG2-of (b / bash-01)
                                    :mod (o / only))
                              :location (l2 / laptop
                                    :ARG1-of (c / cheap-02))))))
      :mod (w2 / well
            :mode expressive))"
Hard mode: pipes count as a new line.,"# ::snt Hard mode: pipes count as a new line.
(c / count-04
      :ARG1 (p / pipe)
      :prep-as (l / line
            :ARG1-of (n / new-01))
      :mod (m / mode
            :ARG1-of (h / hard-04)))"
