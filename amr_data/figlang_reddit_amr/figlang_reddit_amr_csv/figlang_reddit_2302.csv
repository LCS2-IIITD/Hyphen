comment,amr
"Some car company needs to invent a ""polite honk"" where you're not trying to be a dick but you got a green light there buddy.","# ::snt Some car company needs to invent a ""polite honk"" where you're not trying to be a dick but you got a green light there buddy.
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (n / need-01
            :ARG0 (c / company
                  :mod (c2 / car)
                  :mod (s2 / some))
            :ARG1 (ii2 / invent-01
                  :ARG0 c
                  :ARG1 (h / honk
                        :ARG1-of (p / polite-01)
                        :location-of (c3 / contrast-01
                              :ARG1 (t / try-01
                                    :polarity -
                                    :ARG0 (y / you)
                                    :ARG1 (d / dick
                                          :domain y))
                              :ARG2 (g / get-01
                                    :ARG0 y
                                    :ARG1 (l / light
                                          :ARG1-of (g2 / green-02))
                                    :location (t2 / there))))))
      :ARG2 (b / buddy))"
soon the polite honk will devolve into people using the polite honk ironically and it will just be another honk people read into far beyond the honks capability at conveying intent,"# ::snt soon the polite honk will devolve into people using the polite honk ironically and it will just be another honk people read into far beyond the honks capability at conveying intent
(a / and
      :op1 (d / devolve-02
            :ARG1 (h / honk
                  :ARG1-of (p / polite-01))
            :ARG4 (p2 / person
                  :ARG0-of (u / use-01
                        :ARG1 (h2 / honk
                              :ARG1-of (p3 / polite-01))
                        :manner (ii / ironic)))
            :time (s / soon))
      :op2 (r / read-01
            :ARG0 (p4 / person
                  :mod (a2 / another))
            :ARG1 (b / beyond
                  :op1 (c / capable-01
                        :ARG1 (h3 / honk)
                        :ARG2 (c2 / convey-01
                              :ARG0 h3
                              :ARG1 (ii2 / intent-02)))
                  :quant (f / far))
            :mod (j / just)))"
