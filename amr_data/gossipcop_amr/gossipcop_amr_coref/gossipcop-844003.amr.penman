# ::snt ...uncle punchy...is what chris brown is
# ::tokens ["...", "uncle", "punchy", "...", "is", "what", "chris", "brown", "is"]
# ::lemmas ["...", "uncle", "punchy", "...", "be", "what", "chris", "brown", "be"]
(c1-1 / say-01
      :ARG0 (c1-4 / i)
      :ARG1 (c1-5 / thing
                  :domain (c1-3 / person
                                :name (c1-0 / name
                                            :op1 "Chris"
                                            :op2 "Brown")
                                :ARG0-of (c1-2 / have-rel-role-91
                                               :ARG2 (c1-6 / uncle))
                                :ARG2-of c1-1)))

# ::snt lol
# ::tokens ["lol"]
# ::lemmas ["lol"]
(c2-1 / laugh-01
      :manner (c2-0 / loud)
      :mode expressive)

# ::snt When is he going to grow up? He needs to set an example for his daughter
# ::tokens ["When", "is", "he", "going", "to", "grow", "up", "?", "He", "needs", "to", "set", "an", "example", "for", "his", "daughter"]
# ::lemmas ["when", "be", "he", "go", "to", "grow", "up", "?", "he", "need", "to", "set", "an", "example", "for", "his", "daughter"]
(c3-1 / multi-sentence
      :snt1 (c3-9 / grow-up-04
                  :ARG1 (c3-4 / he)
                  :time (c3-8 / amr-unknown))
      :snt2 (c3-0 / need-01
                  :ARG0 (c3-7 / he)
                  :ARG1 (c3-2 / set-02
                              :ARG0 c3-7
                              :ARG1 (c3-3 / example)
                              :beneficiary (c3-5 / person
                                                 :ARG0-of (c3-6 / have-rel-role-91
                                                                :ARG1 c3-7
                                                                :ARG2 (c3-10 / daughter))))))

# ::snt This poor fool is going to come to no good end eventually. He is very very very talented
# ::tokens ["This", "poor", "fool", "is", "going", "to", "come", "to", "no", "good", "end", "eventually", ".", "He", "is", "very", "very", "very", "talented"]
# ::lemmas ["this", "poor", "fool", "be", "go", "to", "come", "to", "no", "good", "end", "eventually", ".", "he", "be", "very", "very", "very", "talented"]
(c4-1 / multi-sentence
      :snt1 (c4-6 / come-04
                  :ARG1 (c4-0 / fool
                              :mod (c4-5 / poor)
                              :mod (c4-8 / this))
                  :ARG2 (c4-3 / end
                              :ARG1-of (c4-9 / good-02)
                              :polarity -)
                  :time (c4-10 / eventual))
      :snt2 (c4-11 / talent
                   :domain (c4-4 / he)
                   :degree (c4-2 / very
                                 :degree (c4-7 / very))))

# ::snt Well you should know better. I hoped you would change, but it seems is right to have written you off.
# ::tokens ["Well", "you", "should", "know", "better", ".", "I", "hoped", "you", "would", "change", ",", "but", "it", "seems", "is", "right", "to", "have", "written", "you", "off", "."]
# ::lemmas ["well", "you", "should", "know", "well", ".", "i", "hope", "you", "would", "change", ",", "but", "it", "seem", "be", "right", "to", "have", "write", "you", "off", "."]
(c5-1 / multi-sentence
      :snt1 (c5-4 / recommend-01
                  :ARG1 (c5-6 / know-01
                              :ARG0 (c5-0 / you)
                              :ARG1-of (c5-5 / have-degree-91
                                             :ARG2 (c5-13 / good-02
                                                          :ARG1 c5-6)
                                             :ARG3 (c5-7 / more)))
                  :mod (c5-9 / well))
      :snt2 (c5-10 / contrast-01
                   :ARG1 (c5-11 / hope-01
                                :ARG0 (c5-12 / i)
                                :ARG1 (c5-15 / change-01
                                             :ARG0 (c5-14 / you)))
                   :ARG2 (c5-2 / seem-01
                               :ARG1 (c5-3 / right-02
                                           :ARG1 (c5-8 / write-off-08
                                                       :ARG1 c5-14)))))

# ::snt not true
# ::tokens ["not", "true"]
# ::lemmas ["not", "true"]
(c6-0 / true-01
      :polarity -)

# ::snt Awwwww got damnit Chris! You aint learned yet? you gotta act like you tripped and your fist just happend to land in a mf eye
# ::tokens ["Awwwww", "got", "damnit", "Chris", "!", "You", "ai", "nt", "learned", "yet", "?", "you", "got", "ta", "act", "like", "you", "tripped", "and", "your", "fist", "just", "happend", "to", "land", "in", "a", "mf", "eye"]
# ::lemmas ["Awwwww", "get", "damnit", "Chris", "!", "you", "be", "not", "learn", "yet", "?", "you", "got", "to", "act", "like", "you", "trip", "and", "your", "fist", "just", "happend", "to", "land", "in", "a", "mf", "eye"]
(c7-4 / say-01
      :ARG0 (c7-11 / i)
      :ARG1 (c7-7 / learn-01
                  :ARG0 (c7-6 / person
                              :name (c7-3 / name
                                          :op1 "Chris"))
                  :time (c7-2 / yet)
                  :ARG1-of (c7-9 / cause-01
                                 :ARG0 (c7-0 / obligate-01
                                             :ARG1 c7-6
                                             :ARG2 (c7-12 / act-01
                                                          :ARG0 c7-6
                                                          :ARG1 (c7-13 / and
                                                                       :op1 (c7-10 / tripe-01
                                                                                   :ARG0 c7-6)
                                                                       :op2 (c7-15 / land-01
                                                                                   :ARG1 (c7-1 / fist
                                                                                               :part-of c7-6)
                                                                                   :ARG2 (c7-5 / eye
                                                                                               :part-of c7-6
                                                                                               :mod (c7-8 / fucking
                                                                                                          :mode expressive)))
                                                                       :mod (c7-14 / just)))))
                  :polarity -)
      :ARG2 c7-6)

# ::snt HE NEEDS PROFESSIONAL HELP.!
# ::tokens ["HE", "NEEDS", "PROFESSIONAL", "HELP", ".", "!"]
# ::lemmas ["he", "need", "PROFESSIONAL", "HELP", ".", "!"]
(c8-0 / need-01
      :ARG0 (c8-1 / he)
      :ARG1 (c8-3 / help-01
                  :ARG0 (c8-5 / government-organization
                              :ARG0-of (c8-4 / govern-01))
                  :ARG2 c8-1
                  :mod (c8-2 / practical)))

# ::snt Oh sweet Jesus I'm not buying my concert ticket until I know he will be available for my date...I WILL NOT be rescheduled again for legal bs
# ::tokens ["Oh", "sweet", "Jesus", "I", "'m", "not", "buying", "my", "concert", "ticket", "until", "I", "know", "he", "will", "be", "available", "for", "my", "date", "...", "I", "WILL", "NOT", "be", "rescheduled", "again", "for", "legal", "bs"]
# ::lemmas ["oh", "sweet", "Jesus", "i", "be", "not", "buy", "my", "concert", "ticket", "until", "i", "know", "he", "will", "be", "available", "for", "my", "date", "...", "i", "will", "not", "be", "reschedule", "again", "for", "legal", "bs"]
(c9-11 / multi-sentence
       :snt1 (c9-0 / say-01
                   :ARG0 (c9-17 / i)
                   :ARG1 (c9-10 / buy-01
                                :ARG0 c9-17
                                :ARG1 (c9-9 / ticket
                                            :mod (c9-12 / concert)
                                            :poss c9-17)
                                :time (c9-13 / until
                                             :op1 (c9-6 / know-01
                                                        :ARG0 c9-17
                                                        :ARG1 (c9-8 / available-02
                                                                    :ARG2 (c9-5 / he)
                                                                    :time (c9-18 / date
                                                                                 :poss c9-17))))
                                :polarity -)
                   :ARG2 (c9-16 / person
                                :name (c9-14 / name
                                             :op1 "Jesus")
                                :mod (c9-3 / sweet)))
       :snt2 (c9-15 / rescheduled-01
                    :ARG1 (c9-4 / i)
                    :mod (c9-7 / again)
                    :purpose (c9-1 / bullshit
                                   :ARG1-of (c9-2 / legal-02))
                    :polarity -))

# ::snt Must be a full moon, this kind of stuff used to be mainly in California..odd, that.
# ::tokens ["Must", "be", "a", "full", "moon", ",", "this", "kind", "of", "stuff", "used", "to", "be", "mainly", "in", "California", "..", "odd", ",", "that", "."]
# ::lemmas ["must", "be", "a", "full", "moon", ",", "this", "kind", "of", "stuff", "use", "to", "be", "mainly", "in", "California", "..", "odd", ",", "that", "."]
(c10-10 / infer-01
        :ARG1 (c10-4 / moon
                     :ARG1-of (c10-0 / full-09))
        :ARG1-of (c10-9 / cause-01
                        :ARG0 (c10-2 / be-located-at-91
                                     :ARG1 (c10-6 / stuff
                                                  :mod (c10-8 / kind
                                                              :mod (c10-11 / this)))
                                     :ARG2 (c10-1 / state
                                                  :name (c10-5 / name
                                                               :op1 "California"))
                                     :mod (c10-7 / main)
                                     :time (c10-12 / use-03)))
        :mod (c10-3 / odd
                    :mode expressive))

# ::snt He can stay home if he can't cool the temper
# ::tokens ["He", "can", "stay", "home", "if", "he", "ca", "n't", "cool", "the", "temper"]
# ::lemmas ["he", "can", "stay", "home", "if", "he", "can", "not", "cool", "the", "temper"]
(c11-3 / possible-01
       :ARG1 (c11-1 / stay-01
                    :ARG1 (c11-2 / he)
                    :ARG3 (c11-5 / home))
       :condition (c11-0 / possible-01
                         :ARG1 (c11-4 / cool-01
                                      :ARG0 c11-2
                                      :ARG1 (c11-6 / temper))
                         :polarity -))

# ::snt Why is he still famous stop giving him propaganda.
# ::tokens ["Why", "is", "he", "still", "famous", "stop", "giving", "him", "propaganda", "."]
# ::lemmas ["why", "be", "he", "still", "famous", "stop", "give", "he", "propaganda", "."]
(c12-6 / cause-01
       :ARG0 (c12-7 / amr-unknown)
       :ARG1 (c12-0 / fame-01
                    :ARG1 (c12-4 / he)
                    :mod (c12-3 / still))
       :condition (c12-1 / stop-01
                         :ARG0 (c12-2 / you)
                         :ARG1 (c12-8 / give-01
                                      :ARG0 c12-2
                                      :ARG1 (c12-5 / propaganda)
                                      :ARG2 c12-4)
                         :mode imperative))

# ::snt Stupid &amp; Messy is what is
# ::tokens ["Stupid", "&", "amp", ";", "Messy", "is", "what", "is"]
# ::lemmas ["Stupid", "&", "amp", ";", "Messy", "be", "what", "be"]
(c13-0 / multi-sentence
       :snt1 (c13-3 / and
                    :op1 (c13-2 / stupid)
                    :op2 (c13-4 / messy))
       :snt2 (c13-6 / thing
                    :domain (c13-5 / person
                                   :name (c13-1 / name
                                                :op1 "Messy"))))

# ::snt This is not news. Sick of Chris Brown
# ::tokens ["This", "is", "not", "news", ".", "Sick", "of", "Chris", "Brown"]
# ::lemmas ["this", "be", "not", "news", ".", "Sick", "of", "Chris", "Brown"]
(c14-1 / multi-sentence
       :snt1 (c14-0 / news
                    :domain (c14-5 / this)
                    :polarity -)
       :snt2 (c14-2 / sick-04
                    :ARG1 (c14-4 / person
                                 :name (c14-3 / name
                                              :op1 "Chris"
                                              :op2 "Brown"))))

# ::snt Just a matter of time before he's either incarcerated - or dead.
# ::tokens ["Just", "a", "matter", "of", "time", "before", "he", "'s", "either", "incarcerated", "-", "or", "dead", "."]
# ::lemmas ["just", "a", "matter", "of", "time", "before", "he", "be", "either", "incarcerate", "-", "or", "dead", "."]
(c15-2 / matter
       :mod (c15-6 / time)
       :time (c15-1 / before
                    :op1 (c15-0 / or
                                :op1 (c15-5 / incarcerate-01
                                            :ARG1 (c15-3 / he))
                                :op2 (c15-7 / die-01
                                            :ARG1 c15-3)))
       :mod (c15-4 / just))

# ::snt people is common thing for him.
# ::tokens ["people", "is", "common", "thing", "for", "him", "."]
# ::lemmas ["people", "be", "common", "thing", "for", "he", "."]
(c16-3 / thing
       :mod (c16-0 / common)
       :beneficiary (c16-1 / he)
       :domain (c16-2 / person))

# ::snt Oh man.
# ::tokens ["Oh", "man", "."]
# ::lemmas ["oh", "man", "."]
(c17-2 / multi-sentence
       :snt1 (c17-0 / oh)
       :snt2 (c17-1 / man)
       :mode expressive)

# ::snt Ha ha I sense sarcasm
# ::tokens ["Ha", "ha", "I", "sense", "sarcasm"]
# ::lemmas ["ha", "ha", "i", "sense", "sarcasm"]
(c18-3 / sense-01
       :ARG0 (c18-2 / i)
       :ARG1 (c18-0 / sarcasm)
       :mod (c18-1 / ha
                   :mode expressive))

# ::snt Why can't they just walk away, gosh these boys today are just too much!!
# ::tokens ["Why", "ca", "n't", "they", "just", "walk", "away", ",", "gosh", "these", "boys", "today", "are", "just", "too", "much", "!", "!"]
# ::lemmas ["why", "can", "not", "they", "just", "walk", "away", ",", "gosh", "these", "boy", "today", "be", "just", "too", "much", "!", "!"]
(c19-1 / multi-sentence
       :snt1 (c19-8 / cause-01
                    :ARG0 (c19-11 / amr-unknown)
                    :ARG1 (c19-5 / possible-01
                                 :ARG1 (c19-7 / walk-01
                                              :ARG0 (c19-9 / they)
                                              :ARG2 (c19-10 / away)
                                              :mod (c19-12 / just))
                                 :polarity -))
       :snt2 (c19-4 / have-quant-91
                    :ARG1 (c19-0 / boy
                                 :mod (c19-15 / this)
                                 :time (c19-13 / today))
                    :ARG2 (c19-6 / much)
                    :ARG3 (c19-3 / too)
                    :mod (c19-14 / just)
                    :mod (c19-2 / gosh
                                :mode expressive)
                    :mode expressive))

# ::snt not true
# ::tokens ["not", "true"]
# ::lemmas ["not", "true"]
(c20-0 / true-01
       :polarity -)

# ::snt Bet it photographer is former employee of rihanna
# ::tokens ["Bet", "it", "photographer", "is", "former", "employee", "of", "rihanna"]
# ::lemmas ["bet", "it", "photographer", "be", "former", "employee", "of", "rihanna"]
(c22-1 / bet-01
       :ARG0 (c22-7 / i)
       :ARG2 (c22-4 / employ-01
                    :ARG0 (c22-6 / company
                                 :name (c22-2 / name
                                              :op1 "Rihanna"))
                    :ARG1 (c22-5 / person
                                 :ARG0-of (c22-3 / photograph-01))
                    :time (c22-0 / former)))

# ::snt Ese cb
# ::tokens ["Ese", "cb"]
# ::lemmas ["Ese", "cb"]
(c24-1 / byline-91
       :ARG1 (c24-2 / publication
                    :name (c24-0 / name
                                 :op1 "CCB")))

# ::snt Que rareza.
# ::tokens ["Que", "rareza", "."]
# ::lemmas ["Que", "rareza", "."]
(c25-0 / rareza
       :mod (c25-1 / Que))

# ::snt he's so misunderstood...
# ::tokens ["he", "'s", "so", "misunderstood", "..."]
# ::lemmas ["he", "be", "so", "misunderstood", "..."]
(c27-1 / misunderstand-01
       :ARG1 (c27-0 / he)
       :degree (c27-2 / so))

# ::snt are you trying to tell me that chris brown is violent? who knew!
# ::tokens ["are", "you", "trying", "to", "tell", "me", "that", "chris", "brown", "is", "violent", "?", "who", "knew", "!"]
# ::lemmas ["be", "you", "try", "to", "tell", "i", "that", "chris", "brown", "be", "violent", "?", "who", "know", "!"]
(c28-1 / multi-sentence
       :snt1 (c28-6 / try-01
                    :polarity (c28-8 / amr-unknown)
                    :ARG0 (c28-0 / you)
                    :ARG1 (c28-10 / tell-01
                                  :ARG0 c28-0
                                  :ARG1 (c28-3 / violent
                                               :domain (c28-4 / person
                                                              :name (c28-2 / name
                                                                           :op1 "Chris"
                                                                           :op2 "Brown")))
                                  :ARG2 (c28-7 / i)))
       :snt2 (c28-5 / know-01
                    :ARG0 (c28-9 / amr-unknown)))

# ::snt Ahhhh... the aristocrats...
# ::tokens ["Ahhhh", "...", "the", "aristocrats", "..."]
# ::lemmas ["ahhhh", "...", "the", "aristocrat", "..."]
(c29-1 / aristocrat
       :mod (c29-0 / ah
                   :mode expressive))

# ::snt He Just Doesn't Learn, Does He.
# ::tokens ["He", "Just", "Does", "n't", "Learn", ",", "Does", "He", "."]
# ::lemmas ["he", "just", "do", "not", "learn", ",", "do", "he", "."]
(c30-3 / learn-01
       :ARG0 (c30-2 / he)
       :mod (c30-1 / just)
       :ARG1-of (c30-0 / request-confirmation-91)
       :polarity -)

# ::snt Classy...NOT!
# ::tokens ["Classy", "...", "NOT", "!"]
# ::lemmas ["classy", "...", "not", "!"]
(c31-2 / and
       :op1 (c31-0 / classy-02)
       :op2 (c31-1 / have-polarity-91
                   :ARG2 -))
