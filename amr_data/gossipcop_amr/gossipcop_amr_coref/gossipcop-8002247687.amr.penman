# ::snt Hello, when I make entry errors help me ? I want to listen to justin
# ::tokens ["Hello", ",", "when", "I", "make", "entry", "errors", "help", "me", "?", "I", "want", "to", "listen", "to", "justin"]
# ::lemmas ["hello", ",", "when", "i", "make", "entry", "error", "help", "i", "?", "i", "want", "to", "listen", "to", "justin"]
(c1-0 / multi-sentence
      :snt1 (c1-3 / hello)
      :snt2 (c1-6 / want-01
                  :ARG0 (c1-7 / i)
                  :ARG1 (c1-4 / listen-01
                              :ARG0 c1-7
                              :ARG1 (c1-5 / person
                                          :name (c1-1 / name
                                                      :op1 "Justin")))
                  :polarity (c1-8 / amr-unknown)
                  :time (c1-2 / err-01
                              :ARG0 c1-7
                              :ARG1 (c1-9 / enter-01))))

# ::snt I feel like i just want to...
# ::tokens ["I", "feel", "like", "i", "just", "want", "to", "..."]
# ::lemmas ["i", "feel", "like", "i", "just", "want", "to", "..."]
(c3-0 / feel-06
      :ARG0 (c3-2 / i)
      :ARG1 (c3-3 / want-01
                  :ARG0 c3-2
                  :mod (c3-1 / just)))

# ::snt Lovely
# ::tokens ["Lovely"]
# ::lemmas ["lovely"]
(c4-0 / love-01)

# ::snt Im officially done
# ::tokens ["I", "m", "officially", "done"]
# ::lemmas ["i", "m", "officially", "do"]
(c5-1 / be-done-08
      :ARG0 (c5-2 / i)
      :mod (c5-0 / official))

# ::snt LITERALLY BDE
# ::tokens ["LITERALLY", "BDE"]
# ::lemmas ["LITERALLY", "BDE"]
(c6-0 / bad-07
      :degree (c6-1 / literal))

# ::snt major mood god
# ::tokens ["major", "mood", "god"]
# ::lemmas ["major", "mood", "god"]
(c7-0 / god
      :mod (c7-2 / mood
                 :mod (c7-1 / major)))

# ::snt OH MY GOD
# ::tokens ["OH", "MY", "GOD"]
# ::lemmas ["OH", "MY", "GOD"]
(c8-1 / person
      :name (c8-0 / name
                  :op1 "God")
      :mod (c8-3 / oh
                 :mode expressive)
      :poss (c8-2 / i))

# ::snt yes, but could he run, and manage a successful paper merchants?
# ::tokens ["yes", ",", "but", "could", "he", "run", ",", "and", "manage", "a", "successful", "paper", "merchants", "?"]
# ::lemmas ["yes", ",", "but", "could", "he", "run", ",", "and", "manage", "a", "successful", "paper", "merchant", "?"]
(c9-7 / contrast-01
      :ARG2 (c9-5 / possible-01
                  :polarity (c9-9 / amr-unknown)
                  :ARG1 (c9-8 / and
                              :op1 (c9-3 / run-01
                                         :ARG0 (c9-4 / he)
                                         :ARG1 (c9-10 / company
                                                      :ARG0-of (c9-2 / succeed-01
                                                                     :ARG1 (c9-0 / merchandise-01
                                                                                 :ARG1 (c9-1 / paper)))))
                              :op2 (c9-6 / manage-01
                                         :ARG0 c9-4
                                         :ARG1 c9-10))))

# ::snt We spoke it to the universe so now we just wait for our moment
# ::tokens ["We", "spoke", "it", "to", "the", "universe", "so", "now", "we", "just", "wait", "for", "our", "moment"]
# ::lemmas ["we", "speak", "it", "to", "the", "universe", "so", "now", "we", "just", "wait", "for", "our", "moment"]
(c10-2 / speak-01
       :ARG0 (c10-5 / we)
       :ARG1 (c10-7 / it)
       :ARG2 (c10-8 / universe)
       :ARG0-of (c10-4 / cause-01
                       :ARG1 (c10-3 / wait-01
                                    :ARG1 c10-5
                                    :ARG2 (c10-0 / moment
                                                 :poss c10-5)
                                    :mod (c10-6 / just)
                                    :time (c10-1 / now))))

# ::snt Thought I was the only one
# ::tokens ["Thought", "I", "was", "the", "only", "one"]
# ::lemmas ["Thought", "i", "be", "the", "only", "one"]
(c11-3 / think-01
       :ARG1 (c11-1 / one
                    :mod (c11-0 / only)
                    :domain (c11-2 / i)))

# ::snt right
# ::tokens ["right"]
# ::lemmas ["right"]
(c12-0 / right-06)

# ::snt I remeber when you had that Justin Bieber themed party in th grade. Everyone got you jb posters
# ::tokens ["I", "remeber", "when", "you", "had", "that", "Justin", "Bieber", "themed", "party", "in", "th", "grade", ".", "Everyone", "got", "you", "jb", "posters"]
# ::lemmas ["i", "remeber", "when", "you", "have", "that", "Justin", "Bieber", "theme", "party", "in", "th", "grade", ".", "everyone", "get", "you", "jb", "poster"]
(c13-2 / multi-sentence
       :snt1 (c13-6 / remember-01
                    :ARG0 (c13-11 / i)
                    :ARG1 (c13-9 / party-01
                                 :ARG0 (c13-1 / you)
                                 :ARG1-of (c13-12 / theme-01
                                                  :ARG2 (c13-3 / person
                                                               :name (c13-4 / name
                                                                            :op1 "Justin"
                                                                            :op2 "Bieber")))
                                 :time (c13-13 / grade
                                               :ord (c13-0 / ordinal-entity
                                                           :value 1))))
       :snt2 (c13-14 / get-01
                     :ARG0 (c13-7 / everyone)
                     :ARG1 (c13-16 / person
                                   :ARG0-of (c13-10 / post-01
                                                    :ARG2 (c13-15 / publication
                                                                  :name (c13-8 / name
                                                                               :op1 "JBF")))
                                   :domain (c13-5 / you))))

# ::snt stop
# ::tokens ["stop"]
# ::lemmas ["stop"]
(c15-0 / stop-01)

# ::snt Dying
# ::tokens ["Dying"]
# ::lemmas ["die"]
(c16-0 / die-01)

# ::snt No but mbfn I wish
# ::tokens ["No", "but", "mbfn", "I", "wish"]
# ::lemmas ["no", "but", "mbfn", "i", "wish"]
(c17-0 / wish-01
       :ARG0 (c17-2 / i)
       :ARG1 (c17-3 / thing
                    :mod (c17-1 / only)))

# ::snt he doesn't even do that anymore he didn't when I seen him in July and I was pissed
# ::tokens ["he", "does", "n't", "even", "do", "that", "anymore", "he", "did", "n't", "when", "I", "seen", "him", "in", "July", "and", "I", "was", "pissed"]
# ::lemmas ["he", "do", "not", "even", "do", "that", "anymore", "he", "do", "not", "when", "i", "see", "he", "in", "July", "and", "i", "be", "piss"]
(c18-1 / and
       :op1 (c18-10 / do-02
                    :ARG0 (c18-3 / he)
                    :ARG1 (c18-8 / that)
                    :mod (c18-2 / even)
                    :time (c18-7 / anymore)
                    :polarity -)
       :op2 (c18-6 / do-02
                   :ARG0 c18-3
                   :ARG1 c18-8
                   :time (c18-0 / see-01
                                :ARG0 (c18-9 / i)
                                :ARG1 c18-3
                                :time (c18-5 / date-entity
                                             :month 7))
                   :polarity -)
       :op3 (c18-4 / piss-03
                   :ARG1 c18-9))

# ::snt ERIKA LAI Hi Fan! Go to our link and grab tickets on us
# ::tokens ["ERIKA", "LAI", "Hi", "Fan", "!", "Go", "to", "our", "link", "and", "grab", "tickets", "on", "us"]
# ::lemmas ["ERIKA", "LAI", "Hi", "Fan", "!", "go", "to", "our", "link", "and", "grab", "ticket", "on", "we"]
(c19-3 / multi-sentence
       :snt1 (c19-4 / say-01
                    :ARG1 (c19-5 / hi)
                    :ARG2 (c19-6 / person
                                 :name (c19-2 / name
                                              :op1 "ERIKA"
                                              :op2 "LAI")
                                 :mod (c19-0 / fan)))
       :snt2 (c19-11 / and
                     :op1 (c19-12 / go-02
                                  :ARG0 (c19-1 / you)
                                  :ARG4 (c19-7 / link
                                               :poss (c19-8 / we))
                                  :mode imperative)
                     :op2 (c19-10 / grab-01
                                  :ARG0 c19-1
                                  :ARG1 (c19-9 / ticket)
                                  :location c19-8
                                  :mode imperative)))

# ::snt U R
# ::tokens ["U", "R"]
# ::lemmas ["U", "R"]
(c20-0 / string-entity
       :value "U R")

# ::snt am I right ladies
# ::tokens ["am", "I", "right", "ladies"]
# ::lemmas ["be", "i", "right", "lady"]
(c21-3 / say-01
       :ARG1 (c21-0 / right-06
                    :ARG1 (c21-2 / i))
       :ARG2 (c21-1 / lady))

# ::snt only you shawty ha ha
# ::tokens ["only", "you", "shawty", "ha", "ha"]
# ::lemmas ["only", "you", "shawty", "ha", "ha"]
(c22-1 / you
       :mod (c22-0 / only)
       :mod (c22-2 / shitty
                   :mode expressive))

# ::snt Komposer i know you know pd101 season juga di concept
# ::tokens ["Komposer", "i", "know", "you", "know", "pd101", "season", "juga", "di", "concept"]
# ::lemmas ["Komposer", "i", "know", "you", "know", "pd101", "season", "juga", "di", "concept"]
(c23-4 / say-01
       :ARG0 (c23-8 / i)
       :ARG1 (c23-6 / know-01
                    :ARG0 c23-8
                    :ARG1 (c23-9 / know-01
                                 :ARG0 (c23-2 / you)
                                 :ARG1 (c23-0 / season
                                              :mod (c23-1 / broadcast-program
                                                          :name (c23-3 / name
                                                                       :op1 "Pd101"))
                                              :mod 101)))
       :ARG2 (c23-7 / person
                    :name (c23-5 / name
                                 :op1 "Juga"
                                 :op2 "di"
                                 :op3 " concept")))

# ::snt Oh dia juga yang bikin lagu I Know You Know buat TOP35 Produce Season
# ::tokens ["Oh", "dia", "juga", "yang", "bikin", "lagu", "I", "Know", "You", "Know", "buat", "TOP35", "Produce", "Season"]
# ::lemmas ["oh", "dia", "juga", "yang", "bikin", "lagu", "i", "know", "you", "know", "buat", "TOP35", "Produce", "Season"]
(c24-6 / know-01
       :ARG0 (c24-10 / i)
       :ARG1 (c24-12 / know-01
                     :ARG0 (c24-2 / you)
                     :ARG1 (c24-5 / season
                                  :mod (c24-7 / produce-01
                                              :ARG0 (c24-8 / company
                                                           :name (c24-3 / name
                                                                        :op1 "Top35")))))
       :mod (c24-0 / oh
                   :mode expressive)
       :mod (c24-9 / juga
                   :mod (c24-11 / yang
                                :mode expressive))
       :ARG1-of (c24-1 / say-01
                       :ARG0 c24-10
                       :ARG2 (c24-4 / person
                                    :name c24-3
                                    :op1 "Lagu")))

# ::snt -c- Hyuk Shin juga adl Co-producer lagu 'Click' di Album LOL
# ::tokens ["-c-", "Hyuk", "Shin", "juga", "adl", "Co", "-", "producer", "lagu", "'", "Click", "'", "di", "Album", "LOL"]
# ::lemmas ["-c-", "Hyuk", "Shin", "juga", "adl", "Co", "-", "producer", "lagu", "'", "Click", "'", "di", "Album", "lol"]
(c25-8 / and
       :op1 (c25-3 / person
                   :name (c25-0 / name
                                :op1 "Hyuk"
                                :op2 "Shin"
                                :op3 "Juga"))
       :op2 (c25-1 / person
                   :name (c25-2 / name
                                :op1 "Lagu"
                                :op2 "Click"
                                :op3 "di"
                                :op4 " Album")
                   :ARG0-of (c25-10 / produce-01)
                   :ARG0-of (c25-4 / have-org-role-91
                                   :ARG2 (c25-6 / company)))
       :op3 (c25-5 / laugh-01
                   :ARG0 (c25-7 / i)
                   :manner (c25-9 / loud)
                   :mode expressive))

# ::snt alright you ruined it. Good job Megan
# ::tokens ["alright", "you", "ruined", "it", ".", "Good", "job", "Megan"]
# ::lemmas ["alright", "you", "ruin", "it", ".", "good", "job", "Megan"]
(c26-1 / multi-sentence
       :snt1 (c26-4 / ruin-01
                    :ARG0 (c26-0 / you)
                    :ARG1 (c26-7 / it)
                    :ARG2-of (c26-9 / right-06))
       :snt2 (c26-3 / say-01
                    :ARG1 (c26-6 / job
                                 :ARG1-of (c26-8 / good-02))
                    :ARG2 (c26-5 / person
                                 :name (c26-2 / name
                                              :op1 "Megan"))))

# ::snt but I love
# ::tokens ["but", "I", "love"]
# ::lemmas ["but", "i", "love"]
(c27-0 / contrast-01
       :ARG2 (c27-1 / love-01
                    :ARG0 (c27-2 / i)))

# ::snt I'm*
# ::tokens ["I", "'m", "*"]
# ::lemmas ["i", "be", "*"]
(c28-0 / i)

# ::snt that was too far in sorry
# ::tokens ["that", "was", "too", "far", "in", "sorry"]
# ::lemmas ["that", "be", "too", "far", "in", "sorry"]
(c29-1 / sorry-01
       :ARG1 (c29-3 / i)
       :ARG2 (c29-2 / have-degree-91
                    :ARG1 (c29-4 / that)
                    :ARG2 (c29-0 / far)
                    :ARG3 (c29-5 / too)))

# ::snt with Logan?
# ::tokens ["with", "Logan", "?"]
# ::lemmas ["with", "Logan", "?"]
(c30-0 / concern-02
       :ARG1 (c30-2 / person
                    :name (c30-1 / name
                                 :op1 "Logan"))
       :polarity (c30-3 / amr-unknown))

# ::snt yeah Megan just scram. You're being annoying
# ::tokens ["yeah", "Megan", "just", "scram", ".", "You", "'re", "being", "annoying"]
# ::lemmas ["yeah", "Megan", "just", "scram", ".", "you", "be", "be", "annoy"]
(c31-2 / multi-sentence
       :snt1 (c31-3 / scramble-01
                    :ARG0 (c31-4 / person
                                 :name (c31-1 / name
                                              :op1 "Megan"))
                    :mod (c31-5 / just)
                    :mod (c31-0 / yeah
                                :mode expressive))
       :snt2 (c31-6 / annoy-01
                    :ARG0 (c31-7 / you)))

# ::snt you're about to get blocked. So chill
# ::tokens ["you", "'re", "about", "to", "get", "blocked", ".", "So", "chill"]
# ::lemmas ["you", "be", "about", "to", "get", "block", ".", "so", "chill"]
(c32-2 / multi-sentence
       :snt1 (c32-0 / block-01
                    :ARG1 (c32-1 / you)
                    :time (c32-5 / about-to))
       :snt2 (c32-4 / chill-01
                    :mod (c32-3 / so)))

# ::snt why is Megan still here
# ::tokens ["why", "is", "Megan", "still", "here"]
# ::lemmas ["why", "be", "Megan", "still", "here"]
(c33-5 / cause-01
       :ARG0 (c33-6 / amr-unknown)
       :ARG1 (c33-0 / be-located-at-91
                    :ARG1 (c33-4 / person
                                 :name (c33-1 / name
                                              :op1 "Megan"))
                    :ARG2 (c33-3 / here)
                    :mod (c33-2 / still)))

# ::snt nah. They will walk all over you guys and you know that
# ::tokens ["nah", ".", "They", "will", "walk", "all", "over", "you", "guys", "and", "you", "know", "that"]
# ::lemmas ["nah", ".", "they", "will", "walk", "all", "over", "you", "guy", "and", "you", "know", "that"]
(c34-2 / multi-sentence
       :snt1 (c34-1 / nah)
       :snt2 (c34-3 / and
                    :op1 (c34-5 / walk-01
                                :ARG0 (c34-7 / they)
                                :ARG2 (c34-6 / all-over
                                             :op1 (c34-8 / guy
                                                         :mod (c34-0 / you))))
                    :op2 (c34-4 / know-01
                                :ARG0 c34-8
                                :ARG1 c34-5)))

# ::snt let's start fam
# ::tokens ["let", "'s", "start", "fam"]
# ::lemmas ["let", "us", "start", "fam"]
(c35-2 / start-01
       :ARG0 (c35-0 / we)
       :ARG1 (c35-1 / family)
       :mode imperative)

# ::snt mad bro?
# ::tokens ["mad", "bro", "?"]
# ::lemmas ["mad", "bro", "?"]
(c36-1 / mad-04
       :polarity (c36-4 / amr-unknown)
       :ARG1 (c36-3 / person
                    :ARG0-of (c36-2 / have-rel-role-91
                                    :ARG2 (c36-0 / bro))))

# ::snt Tom Brady won't be the the first games this season
# ::tokens ["Tom", "Brady", "wo", "n't", "be", "the", "the", "first", "games", "this", "season"]
# ::lemmas ["Tom", "Brady", "will", "not", "be", "the", "the", "first", "game", "this", "season"]
(c37-6 / game
       :ord (c37-0 / ordinal-entity
                   :value 1)
       :time (c37-2 / season
                    :mod (c37-5 / this))
       :domain (c37-4 / game
                      :poss (c37-3 / person
                                   :name (c37-1 / name
                                                :op1 "Tom"
                                                :op2 "Brady")))
       :polarity -)

# ::snt you can make one yeah
# ::tokens ["you", "can", "make", "one", "yeah"]
# ::lemmas ["you", "can", "make", "one", "yeah"]
(c38-3 / possible-01
       :ARG1 (c38-0 / make-01
                    :ARG0 (c38-2 / you)
                    :ARG1 (c38-1 / one)))

# ::snt you already know bro! I'm the
# ::tokens ["you", "already", "know", "bro", "!", "I", "'m", "the"]
# ::lemmas ["you", "already", "know", "bro", "!", "i", "be", "the"]
(c39-2 / multi-sentence
       :snt1 (c39-3 / know-01
                    :ARG0 (c39-1 / you)
                    :ARG1 (c39-0 / bro)
                    :time (c39-5 / already))
       :snt2 (c39-4 / i))

# ::snt yeah bro
# ::tokens ["yeah", "bro"]
# ::lemmas ["yeah", "bro"]
(c40-3 / say-01
       :ARG0 (c40-2 / i)
       :ARG1 (c40-1 / yeah)
       :ARG2 (c40-0 / bro))

# ::snt no you're coming to a
# ::tokens ["no", "you", "'re", "coming", "to", "a"]
# ::lemmas ["no", "you", "be", "come", "to", "a"]
(c41-0 / come-01
       :ARG1 (c41-1 / you)
       :mod (c41-2 / no))

# ::snt chill. You'll see me eventually
# ::tokens ["chill", ".", "You", "'ll", "see", "me", "eventually"]
# ::lemmas ["chill", ".", "you", "'ll", "see", "i", "eventually"]
(c42-1 / multi-sentence
       :snt1 (c42-4 / chill-01)
       :snt2 (c42-2 / see-01
                    :ARG0 (c42-0 / you)
                    :ARG1 (c42-5 / i)
                    :time (c42-3 / eventual)))

# ::snt Megan. Stfu
# ::tokens ["Megan", ".", "Stfu"]
# ::lemmas ["Megan", ".", "Stfu"]
(c43-2 / multi-sentence
       :snt2 (c43-0 / person
                    :name (c43-1 / name
                                 :op1 "Stfu")
                    :snt1-of c43-2)
       :name c43-1
       :op1 "Megan")

# ::snt love doesn't exist
# ::tokens ["love", "does", "n't", "exist"]
# ::lemmas ["love", "do", "not", "exist"]
(c44-0 / exist-01
       :ARG1 (c44-1 / love)
       :polarity -)

# ::snt just saying what I see
# ::tokens ["just", "saying", "what", "I", "see"]
# ::lemmas ["just", "say", "what", "i", "see"]
(c45-1 / say-01
       :ARG0 (c45-3 / i)
       :ARG1 (c45-4 / thing
                    :ARG1-of (c45-0 / see-01
                                    :ARG0 c45-3))
       :mod (c45-2 / just))

# ::snt yeah Megan you need to chill. First off it's never going to happen. Second. No one likes you
# ::tokens ["yeah", "Megan", "you", "need", "to", "chill", ".", "First", "off", "it", "'s", "never", "going", "to", "happen", ".", "Second", ".", "No", "one", "likes", "you"]
# ::lemmas ["yeah", "megan", "you", "need", "to", "chill", ".", "First", "off", "it", "be", "never", "go", "to", "happen", ".", "Second", ".", "no", "one", "like", "you"]
(c46-2 / multi-sentence
       :snt1 (c46-3 / say-01
                    :ARG0 (c46-12 / i)
                    :ARG1 (c46-1 / need-01
                                 :ARG0 (c46-7 / person
                                              :name (c46-6 / name
                                                           :op1 "Megan"))
                                 :ARG1 (c46-11 / chill-01
                                               :ARG0 c46-7))
                    :ARG2 c46-7
                    :mod (c46-0 / yeah
                                :mode expressive))
       :snt2 (c46-8 / have-polarity-91
                    :ARG1 (c46-4 / it)
                    :time (c46-5 / ever)
                    :li 1
                    :ARG2 -)
       :snt3 (c46-9 / like-01
                    :ARG0 (c46-10 / no-one)
                    :ARG1 (c46-13 / you)
                    :li 2))

# ::snt vais tar "calam"?!
# ::tokens ["vais", "tar", "\"", "calam", "\"", "?", "!"]
# ::lemmas ["vais", "tar", "\"", "calam", "\"", "?", "!"]
(c47-0 / call-01
       :ARG1 (c47-3 / tar)
       :ARG2 (c47-2 / calam)
       :polarity (c47-1 / amr-unknown))

# ::snt ah k assim ja n morres...
# ::tokens ["ah", "k", "assim", "ja", "n", "morres", "..."]
# ::lemmas ["ah", "k", "assim", "ja", "n", "morre", "..."]
(c48-4 / and
       :op1 (c48-3 / ah
                   :mode expressive)
       :op2 (c48-2 / ah
                   :mode expressive)
       :op3 (c48-1 / ha
                   :mode expressive)
       :op4 (c48-0 / morres))

# ::snt OKAY VOU TAR CALAM
# ::tokens ["OKAY", "VOU", "TAR", "CALAM"]
# ::lemmas ["okay", "VOU", "TAR", "CALAM"]
(c49-1 / province
       :name (c49-0 / name
                    :op1 "Vou"
                    :op2 "Tar"
                    :op3 "Calaam")
       :ARG1-of (c49-2 / okay-04))

# ::snt idk a minha mae ligou a mae dela, se a mae dela deixar ela vai HahhahsheFajnagqiabhlqnahakbwhajaksjbsja
# ::tokens ["idk", "a", "minha", "mae", "ligou", "a", "mae", "dela", ",", "se", "a", "mae", "dela", "deixar", "ela", "vai", "HahhahsheFajnagqiabhlqnahakbwhajaksjbsja"]
# ::lemmas ["idk", "a", "minha", "mae", "ligou", "a", "mae", "dela", ",", "se", "a", "mae", "dela", "deixar", "ela", "vai", "HahhahsheFajnagqiabhlqnahakbwhajaksjbsja"]
(c50-11 / and
        :op1 (c50-4 / have-mod-91
                    :ARG2 (c50-0 / minha))
        :op2 (c50-10 / have-mod-91
                     :ARG2 (c50-5 / ligou))
        :op3 (c50-3 / have-mod-91
                    :ARG2 (c50-6 / person
                                 :name (c50-1 / name
                                              :op1 "Mae"
                                              :op2 "dela")))
        :op4 (c50-12 / have-mod-91
                     :ARG2 (c50-2 / person
                                  :name (c50-7 / name
                                               :op1 "Ela")))
        :op5 (c50-8 / have-mod-91
                    :ARG2 (c50-13 / person
                                  :name (c50-9 / name
                                               :op1 "HahhahsheFajnagqiabhlqnahakbwhajaksjbsja"))))
