# ::snt It seems Remy Ma has too much time on her hands. I think she should move on
# ::tokens ["It", "seems", "Remy", "Ma", "has", "too", "much", "time", "on", "her", "hands", ".", "I", "think", "she", "should", "move", "on"]
# ::lemmas ["it", "seem", "Remy", "Ma", "have", "too", "much", "time", "on", "her", "hand", ".", "i", "think", "she", "should", "move", "on"]
(c1-3 / multi-sentence
      :snt1 (c1-4 / seem-01
                  :ARG1 (c1-0 / on-ones-hands-07
                              :ARG0 (c1-7 / person
                                          :name (c1-2 / name
                                                      :op1 "Remy"
                                                      :op2 "Ma"))
                              :ARG1 (c1-10 / time
                                           :ARG1-of (c1-6 / have-quant-91
                                                          :ARG2 (c1-8 / much)
                                                          :ARG3 (c1-13 / too)))))
      :snt2 (c1-9 / think-01
                  :ARG0 (c1-11 / i)
                  :ARG1 (c1-5 / recommend-01
                              :ARG1 (c1-12 / move-01
                                           :ARG1 (c1-1 / she)))))

# ::snt I really think lives, breathes, &amp; inhales ..She has just demonstrated, she can't function without Nikki..
# ::tokens ["I", "really", "think", "lives", ",", "breathes", ",", "&", "amp", ";", "inhales", "..", "She", "has", "just", "demonstrated", ",", "she", "ca", "n't", "function", "without", "Nikki", ".."]
# ::lemmas ["i", "really", "think", "life", ",", "breathe", ",", "&", "amp", ";", "inhale", "..", "she", "have", "just", "demonstrate", ",", "she", "can", "not", "function", "without", "Nikki", ".."]
(c2-2 / multi-sentence
      :snt1 (c2-11 / think-01
                   :ARG0 (c2-12 / i)
                   :ARG1 (c2-13 / and
                                :op1 (c2-8 / live-01)
                                :op2 (c2-1 / breathe-01)
                                :op3 (c2-14 / amphetamine)
                                :op4 (c2-5 / inhale-01))
                   :ARG1-of (c2-6 / real-04))
      :snt2 (c2-15 / demonstrate-01
                   :ARG0 (c2-4 / she)
                   :ARG1 (c2-9 / possible-01
                               :ARG1 (c2-0 / function-01
                                           :ARG0 c2-4
                                           :manner (c2-10 / accompany-01
                                                          :ARG0 (c2-3 / person
                                                                      :name (c2-7 / name
                                                                                  :op1 "Nikki"))
                                                          :ARG1 c2-4
                                                          :polarity -))
                               :polarity -)
                   :mod (c2-16 / just)))

# ::snt Its so pathetic trying stay relevant on 's success..Nikki shud ignore this rat so that it doubts its existence..
# ::tokens ["Its", "so", "pathetic", "trying", "stay", "relevant", "on", "'s", "success", "..", "Nikki", "shud", "ignore", "this", "rat", "so", "that", "it", "doubts", "its", "existence", ".."]
# ::lemmas ["its", "so", "pathetic", "try", "stay", "relevant", "on", "'s", "success", "..", "Nikki", "shud", "ignore", "this", "rat", "so", "that", "it", "doubt", "its", "existence", ".."]
(c3-1 / multi-sentence
      :snt1 (c3-7 / pathetic
                  :degree (c3-3 / so)
                  :domain (c3-11 / try-01
                                 :ARG1 (c3-0 / stay-01
                                             :ARG1 (c3-5 / relevant-01
                                                         :ARG1 (c3-15 / success
                                                                      :poss (c3-13 / rat
                                                                                   :mod (c3-14 / this)))))))
      :snt2 (c3-10 / ignore-01
                   :ARG0 (c3-2 / person
                               :name (c3-4 / name
                                           :op1 "Nikki"
                                           :op2 "Shud"))
                   :ARG1 (c3-8 / rat
                               :mod c3-14))
      :ARG0-of (c3-9 / cause-01
                     :ARG1 (c3-12 / doubt-01
                                  :ARG0 c3-2
                                  :ARG1 (c3-6 / exist-01
                                              :ARG1 c3-8))))

# ::snt Just stop Remy... your secs of fame are ovaaa!
# ::tokens ["Just", "stop", "Remy", "...", "your", "secs", "of", "fame", "are", "ovaaa", "!"]
# ::lemmas ["just", "stop", "Remy", "...", "your", "sec", "of", "fame", "be", "ovaaa", "!"]
(c4-4 / stop-01
      :ARG0 (c4-2 / you)
      :ARG1 (c4-5 / person
                  :name (c4-3 / name
                              :op1 "Remy"))
      :mod (c4-7 / just)
      :ARG1-of (c4-6 / cause-01
                     :ARG0 (c4-0 / fame-01
                                 :ARG1 c4-5
                                 :mod (c4-1 / ova
                                            :mode expressive)))
      :mode imperative)

# ::snt Lets all welcome to the world and pray she finds her place, which is certainly not where was, is, or ever will be
# ::tokens ["Lets", "all", "welcome", "to", "the", "world", "and", "pray", "she", "finds", "her", "place", ",", "which", "is", "certainly", "not", "where", "was", ",", "is", ",", "or", "ever", "will", "be"]
# ::lemmas ["let", "all", "welcome", "to", "the", "world", "and", "pray", "she", "find", "her", "place", ",", "which", "be", "certainly", "not", "where", "be", ",", "be", ",", "or", "ever", "will", "be"]
(c5-12 / and
       :op1 (c5-9 / welcome-01
                  :ARG0 (c5-8 / we
                              :mod (c5-11 / all)
                              :ARG1-of c5-9)
                  :ARG2 (c5-13 / world)
                  :mode imperative)
       :op2 (c5-7 / pray-01
                  :ARG0 c5-8
                  :ARG1 (c5-0 / find-01
                              :ARG0 (c5-4 / she)
                              :ARG1 (c5-3 / place
                                          :poss c5-4
                                          :location (c5-1 / or
                                                          :op1 (c5-2 / be-located-at-91
                                                                     :ARG1 c5-3
                                                                     :polarity -)
                                                          :op2 (c5-6 / be-located-at-91
                                                                     :ARG1 c5-3
                                                                     :time (c5-5 / ever)
                                                                     :polarity -)
                                                          :mod (c5-10 / certain))))
                  :mode imperative))

# ::snt Okay Remy ma is just being petty and stupid,its like she is only relevant when she mentions Nicki and she is capitalizing on that
# ::tokens ["Okay", "Remy", "ma", "is", "just", "being", "petty", "and", "stupid", ",", "its", "like", "she", "is", "only", "relevant", "when", "she", "mentions", "Nicki", "and", "she", "is", "capitalizing", "on", "that"]
# ::lemmas ["okay", "Remy", "ma", "be", "just", "be", "petty", "and", "stupid", ",", "its", "like", "she", "be", "only", "relevant", "when", "she", "mention", "Nicki", "and", "she", "be", "capitalize", "on", "that"]
(c6-13 / and
       :op1 (c6-12 / and
                   :op1 (c6-8 / petty)
                   :op2 (c6-4 / stupid)
                   :domain (c6-3 / person
                                 :name (c6-2 / name
                                             :op1 "Remy"
                                             :op2 "Ma"))
                   :mod (c6-11 / just))
       :op2 (c6-10 / and
                   :op1 (c6-6 / relevant-01
                              :ARG1 c6-3
                              :mod (c6-0 / only)
                              :time (c6-5 / mention-01
                                          :ARG0 c6-3
                                          :ARG1 (c6-14 / person
                                                       :name (c6-7 / name
                                                                   :op1 "Nicki"))))
                   :op2 (c6-9 / capitalize-01
                              :ARG0 c6-3
                              :ARG1 c6-6))
       :ARG1-of (c6-1 / okay-04))
