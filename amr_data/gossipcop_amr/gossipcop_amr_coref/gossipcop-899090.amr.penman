# ::snt Omg thank you for this!!!! check it out!
# ::tokens ["Omg", "thank", "you", "for", "this", "!", "!", "!", "!", "check", "it", "out", "!"]
# ::lemmas ["Omg", "thank", "you", "for", "this", "!", "!", "!", "!", "check", "it", "out", "!"]
(c1-2 / multi-sentence
      :snt1 (c1-5 / thank-01
                  :ARG0 (c1-6 / i)
                  :ARG1 (c1-1 / you)
                  :ARG2 (c1-7 / this)
                  :mod (c1-0 / oh-my-god
                             :mode expressive))
      :snt2 (c1-4 / check-out-05
                  :ARG0 c1-1
                  :ARG1 (c1-3 / it)
                  :mode imperative))

# ::snt bahhhhhh
# ::tokens ["bahhhhhh"]
# ::lemmas ["bahhhhhh"]
(c2-0 / bah
      :mode expressive)

# ::snt What season ?!
# ::tokens ["What", "season", "?", "!"]
# ::lemmas ["what", "season", "?", "!"]
(c3-1 / season
      :mod (c3-0 / amr-unknown))

# ::snt When I see this posted I click and its always ... Unknown ErrorLooks like we've got a problem. We're working on it. If this problem continues please contact help.comIs it a location thing because I am in Canada and I want to be teased!!
# ::tokens ["When", "I", "see", "this", "posted", "I", "click", "and", "its", "always", "...", "Unknown", "ErrorLooks", "like", "we", "'ve", "got", "a", "problem", ".", "We", "'re", "working", "on", "it", ".", "If", "this", "problem", "continues", "please", "contact", "help.comIs", "it", "a", "location", "thing", "because", "I", "am", "in", "Canada", "and", "I", "want", "to", "be", "teased", "!", "!"]
# ::lemmas ["when", "i", "see", "this", "post", "i", "click", "and", "its", "always", "...", "unknown", "ErrorLooks", "like", "we", "'ve", "get", "a", "problem", ".", "we", "be", "work", "on", "it", ".", "if", "this", "problem", "continue", "please", "contact", "help.comi", "it", "a", "location", "thing", "because", "i", "be", "in", "Canada", "and", "i", "want", "to", "be", "tease", "!", "!"]
(c5-19 / multi-sentence
       :snt1 (c5-14 / and
                    :op1 (c5-21 / click-01
                                :ARG0 (c5-29 / i)
                                :time (c5-1 / see-01
                                            :ARG0 c5-29
                                            :ARG1 (c5-13 / thing
                                                         :ARG1-of (c5-27 / post-01)
                                                         :mod (c5-22 / this))))
                    :op2 (c5-18 / be-temporally-at-91
                                :ARG1 (c5-9 / it)
                                :ARG2 (c5-12 / always)))
       :snt2 (c5-3 / look-02
                   :ARG0 (c5-28 / we)
                   :ARG1 (c5-10 / have-03
                                :ARG0 c5-28
                                :ARG1 (c5-20 / problem)))
       :snt3 (c5-4 / work-01
                   :ARG0 (c5-24 / we)
                   :ARG1 (c5-16 / it))
       :snt4 (c5-17 / contact-01
                    :ARG0 (c5-8 / you)
                    :ARG1 (c5-23 / url-entity
                                 :value "help.com")
                    :condition (c5-5 / continue-01
                                     :ARG1 (c5-6 / problem
                                                 :mod (c5-15 / location)))
                    :ARG1-of (c5-25 / cause-01
                                    :ARG0 (c5-11 / and
                                                 :op1 (c5-2 / be-located-at-91
                                                            :ARG1 c5-29
                                                            :ARG2 (c5-7 / country
                                                                        :name (c5-26 / name
                                                                                     :op1 "Canada")))
                                                 :op2 (c5-0 / want-01
                                                            :ARG0 c5-29
                                                            :ARG1 (c5-30 / tease-01
                                                                         :ARG1 c5-29))))
                    :mode imperative
                    :polite +))

# ::snt Let this year fly by! Until then...dreams will have to do
# ::tokens ["Let", "this", "year", "fly", "by", "!", "Until", "then", "...", "dreams", "will", "have", "to", "do"]
# ::lemmas ["let", "this", "year", "fly", "by", "!", "until", "then", "...", "dream", "will", "have", "to", "do"]
(c6-3 / multi-sentence
      :snt1 (c6-4 / let-01
                  :ARG0 (c6-2 / you)
                  :ARG1 (c6-0 / fly-01
                              :ARG1 (c6-7 / year
                                          :mod (c6-6 / this)))
                  :mode imperative)
      :snt2 (c6-1 / obligate-01
                  :ARG2 (c6-8 / do-02
                              :ARG0 (c6-5 / dream-01))
                  :time (c6-9 / until
                              :op1 (c6-10 / then))))

# ::snt Any SSN4 teasers are like a sip of water in the desert.
# ::tokens ["Any", "SSN4", "teasers", "are", "like", "a", "sip", "of", "water", "in", "the", "desert", "."]
# ::lemmas ["any", "SSN4", "teaser", "be", "like", "a", "sip", "of", "water", "in", "the", "desert", "."]
(c7-2 / resemble-01
      :ARG1 (c7-5 / teaser
                  :mod (c7-3 / product
                             :name (c7-0 / name
                                         :op1 "SSN4"))
                  :mod (c7-6 / any))
      :ARG2 (c7-1 / sip-01
                  :ARG1 (c7-4 / water)
                  :location (c7-7 / desert)))

# ::snt I know right?
# ::tokens ["I", "know", "right", "?"]
# ::lemmas ["i", "know", "right", "?"]
(c8-1 / know-01
      :polarity (c8-3 / amr-unknown)
      :ARG0 (c8-2 / i)
      :ARG1-of (c8-0 / right-02))

# ::snt seconds barely a teaser more like a snippet.
# ::tokens ["seconds", "barely", "a", "teaser", "more", "like", "a", "snippet", "."]
# ::lemmas ["seconds", "barely", "a", "teaser", "more", "like", "a", "snippet", "."]
(c9-4 / resemble-01
      :ARG1 (c9-3 / short-07
                  :ARG2 (c9-2 / multiple
                              :op1 (c9-6 / temporal-quantity
                                         :unit (c9-0 / second)
                                         :quant 1)))
      :ARG2 (c9-7 / snippet)
      :degree (c9-1 / barely)
      :mod (c9-5 / more))
