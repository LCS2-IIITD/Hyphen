# ::snt Channel shauna lake was arrested too. But, she wears LDS Garments! Shame on her!
# ::tokens ["Channel", "shauna", "lake", "was", "arrested", "too", ".", "But", ",", "she", "wears", "LDS", "Garments", "!", "Shame", "on", "her", "!"]
# ::lemmas ["Channel", "shauna", "lake", "be", "arrest", "too", ".", "but", ",", "she", "wear", "LDS", "Garments", "!", "shame", "on", "she", "!"]
(c1-2 / multi-sentence
      :snt1 (c1-4 / arrest-01
                  :ARG1 (c1-7 / lake
                              :name (c1-1 / name
                                          :op1 "Shauna"
                                          :op2 "Lake")
                              :mod (c1-11 / too)))
      :snt2 (c1-9 / contrast-01
                  :ARG2 (c1-10 / wear-01
                               :ARG0 (c1-3 / she)
                               :ARG1 (c1-8 / product
                                           :mod (c1-5 / religious-group
                                                      :name (c1-6 / name
                                                                  :op1 "LDS"))
                                           :ARG2-of (c1-0 / shame-01
                                                          :ARG1 c1-3)))))

# ::snt Multiple back surgeries failed. His career on the skids. Sympathy for him in his dark days.
# ::tokens ["Multiple", "back", "surgeries", "failed", ".", "His", "career", "on", "the", "skids", ".", "Sympathy", "for", "him", "in", "his", "dark", "days", "."]
# ::lemmas ["multiple", "back", "surgery", "fail", ".", "his", "career", "on", "the", "skid", ".", "sympathy", "for", "he", "in", "his", "dark", "days", "."]
(c2-3 / multi-sentence
      :snt1 (c2-0 / fail-01
                  :ARG1 (c2-4 / surgery-01
                              :ARG1 (c2-2 / back)
                              :quant (c2-5 / multiple)))
      :snt2 (c2-7 / career
                  :poss (c2-6 / he)
                  :prep-on (c2-1 / skids))
      :snt3 (c2-11 / Sympathy
                   :beneficiary (c2-9 / he)
                   :time (c2-10 / day
                                :ARG1-of (c2-8 / dark-02)
                                :poss c2-9)))

# ::snt Exactly what a dumb ass
# ::tokens ["Exactly", "what", "a", "dumb", "ass"]
# ::lemmas ["exactly", "what", "a", "dumb", "ass"]
(c4-3 / ass
      :mod (c4-1 / dumb)
      :degree (c4-0 / so)
      :manner (c4-2 / exact))

# ::snt Millionaire can't afford Uber?
# ::tokens ["Millionaire", "ca", "n't", "afford", "Uber", "?"]
# ::lemmas ["millionaire", "can", "not", "afford", "Uber", "?"]
(c5-2 / possible-01
      :ARG1 (c5-5 / afford-01
                  :ARG0 (c5-0 / millionaire)
                  :ARG1 (c5-3 / company
                              :name (c5-1 / name
                                          :op1 "Uber")))
      :polarity (c5-4 / amr-unknown)
      :polarity -)

# ::snt ... that mugshot tho
# ::tokens ["...", "that", "mugshot", "tho"]
# ::lemmas ["...", "that", "mugshot", "tho"]
(c6-0 / have-concession-91
      :ARG1 (c6-1 / mugshot
                  :mod (c6-2 / that)))

# ::snt Idiot
# ::tokens ["Idiot"]
# ::lemmas ["idiot"]
(c7-0 / idiot)

# ::snt Maybe he was .08 over?
# ::tokens ["Maybe", "he", "was", ".08", "over", "?"]
# ::lemmas ["maybe", "he", "be", ".08", "over", "?"]
(c8-3 / possible-01
      :ARG1 (c8-0 / over-02
                  :ARG1 (c8-2 / he)
                  :ARG2 (c8-1 / percentage-entity
                              :value 0.08))
      :polarity (c8-4 / amr-unknown))

# ::snt just like on the course, Tiger couldn't drive it straight. ?
# ::tokens ["just", "like", "on", "the", "course", ",", "Tiger", "could", "n't", "drive", "it", "straight", ".", "?"]
# ::lemmas ["just", "like", "on", "the", "course", ",", "Tiger", "could", "not", "drive", "it", "straight", ".", "?"]
(c9-4 / possible-01
      :ARG1 (c9-9 / drive-01
                  :ARG0 (c9-1 / person
                              :name (c9-0 / name
                                          :op1 " Tiger"))
                  :ARG1 (c9-7 / it)
                  :ARG1-of (c9-2 / straight-04))
      :ARG1-of (c9-3 / resemble-01
                     :ARG2 (c9-5 / course)
                     :mod (c9-6 / just))
      :polarity (c9-8 / amr-unknown)
      :polarity -)

# ::snt Thanks goodness they clarified this is "pro golfer" Tiger Woods as opposed to one of the other Tiger Woods out there.
# ::tokens ["Thanks", "goodness", "they", "clarified", "this", "is", "\"", "pro", "golfer", "\"", "Tiger", "Woods", "as", "opposed", "to", "one", "of", "the", "other", "Tiger", "Woods", "out", "there", "."]
# ::lemmas ["thank", "goodness", "they", "clarify", "this", "be", "\"", "pro", "golfer", "\"", "Tiger", "Woods", "as", "oppose", "to", "one", "of", "the", "other", "Tiger", "Woods", "out", "there", "."]
(c10-9 / thank-01
       :ARG0 (c10-10 / i)
       :ARG1 (c10-2 / you)
       :ARG2 (c10-7 / clarify-10
                    :ARG0 (c10-11 / they)
                    :ARG1 (c10-6 / person
                                 :name (c10-3 / name
                                              :op1 "Tiger"
                                              :op2 "Woods")
                                 :mod (c10-4 / pro)
                                 :domain (c10-12 / this)
                                 :ARG1-of (c10-5 / instead-of-91
                                                 :ARG2 (c10-14 / person
                                                               :ARG1-of (c10-13 / include-91
                                                                                :ARG2 (c10-8 / person
                                                                                             :mod (c10-0 / other)
                                                                                             :mod c10-6
                                                                                             :location (c10-1 / out-there)))
                                                               :quant 1)))))

# ::snt He used to be my favorite Asian American golfer.
# ::tokens ["He", "used", "to", "be", "my", "favorite", "Asian", "American", "golfer", "."]
# ::lemmas ["he", "use", "to", "be", "my", "favorite", "Asian", "American", "golfer", "."]
(c11-0 / favor-01
       :ARG0 (c11-6 / i)
       :ARG1 (c11-2 / he)
       :topic (c11-3 / person
                     :ARG0-of (c11-7 / golf-01)
                     :mod (c11-5 / continent
                                 :name (c11-1 / name
                                              :op1 "Asia"))
                     :mod (c11-9 / country
                                 :name (c11-4 / name
                                              :op1 "America")))
       :time (c11-8 / use-03))

# ::snt There are a lot of New Jerseyans who have followed Tiger Woods' career; A lot of New Jersey golfers
# ::tokens ["There", "are", "a", "lot", "of", "New", "Jerseyans", "who", "have", "followed", "Tiger", "Woods", "'", "career", ";", "A", "lot", "of", "New", "Jersey", "golfers"]
# ::lemmas ["there", "be", "a", "lot", "of", "New", "Jerseyans", "who", "have", "follow", "Tiger", "Woods", "'", "career", ";", "a", "lot", "of", "New", "Jersey", "golfer"]
(c12-8 / and
       :op1 (c12-5 / person
                   :ARG0-of (c12-0 / follow-02
                                   :ARG1 (c12-7 / career
                                                :poss (c12-2 / person
                                                             :name (c12-1 / name
                                                                          :op1 "Tiger"
                                                                          :op2 "Woods"))))
                   :quant (c12-6 / lot)
                   :mod (c12-3 / state
                               :name (c12-4 / name
                                            :op1 "New"
                                            :op2 "Jersey")))
       :op2 (c12-11 / person
                    :ARG0-of (c12-9 / golf-01)
                    :quant (c12-10 / lot)
                    :mod c12-3))

# ::snt Uber! Call an you have millions of $$$
# ::tokens ["Uber", "!", "Call", "an", "you", "have", "millions", "of", "$", "$", "$"]
# ::lemmas ["Uber", "!", "call", "an", "you", "have", "millions", "of", "$", "$", "$"]
(c13-2 / multi-sentence
       :snt1 (c13-5 / company
                    :name (c13-1 / name
                                 :op1 "Uber"))
       :snt2 (c13-3 / have-03
                    :ARG0 (c13-0 / you)
                    :ARG1 (c13-4 / multiple
                                 :op1 (c13-7 / monetary-quantity
                                             :unit (c13-6 / dollar)
                                             :quant 1000000))))

# ::snt Thanks. I understand what is. I'm wondering why a local NJ news source promotes a DUI in FLA. Does Woods have a NJ connection?
# ::tokens ["Thanks", ".", "I", "understand", "what", "is", ".", "I", "'m", "wondering", "why", "a", "local", "NJ", "news", "source", "promotes", "a", "DUI", "in", "FLA", ".", "Does", "Woods", "have", "a", "NJ", "connection", "?"]
# ::lemmas ["thank", ".", "i", "understand", "what", "be", ".", "i", "be", "wonder", "why", "a", "local", "NJ", "news", "source", "promote", "a", "DUI", "in", "FLA", ".", "do", "wood", "have", "a", "NJ", "connection", "?"]
(c14-11 / multi-sentence
        :snt1 (c14-7 / thank-01
                     :ARG0 (c14-23 / i)
                     :ARG1 (c14-5 / you))
        :snt2 (c14-17 / understand-01
                      :ARG0 (c14-6 / i)
                      :ARG1 (c14-16 / thing))
        :snt3 (c14-21 / wonder-01
                      :ARG0 (c14-9 / i)
                      :ARG1 c14-16
                      :ARG0-of (c14-14 / cause-01
                                       :ARG1 (c14-19 / promote-02
                                                     :ARG0 (c14-1 / source
                                                                  :mod (c14-18 / news)
                                                                  :ARG1-of (c14-2 / local-02)
                                                                  :mod (c14-4 / state
                                                                              :name (c14-13 / name
                                                                                            :op1 "New"
                                                                                            :op2 "Jersey")))
                                                     :ARG1 (c14-24 / drive-01
                                                                   :ARG0 (c14-12 / person
                                                                                 :name (c14-20 / name
                                                                                               :op1 "Woods"))
                                                                   :manner (c14-0 / influence-01
                                                                                  :ARG1 c14-12)
                                                                   :location (c14-3 / state
                                                                                    :name (c14-15 / name
                                                                                                  :op1 "Florida"))))))
        :snt4 (c14-10 / connect-01
                      :ARG1 c14-12
                      :name (c14-22 / name
                                    :op1 "Woods"))
        :polarity (c14-8 / amr-unknown)
        :location c14-4)

# ::snt (2) when news is just getting out to the public for the first time, it may be considered "breaking"
# ::tokens ["(", "2", ")", "when", "news", "is", "just", "getting", "out", "to", "the", "public", "for", "the", "first", "time", ",", "it", "may", "be", "considered", "\"", "breaking", "\""]
# ::lemmas ["(", "2", ")", "when", "news", "be", "just", "get", "out", "to", "the", "public", "for", "the", "first", "time", ",", "it", "may", "be", "consider", "\"", "break", "\""]
(c15-5 / possible-01
       :ARG1 (c15-6 / consider-01
                    :ARG1 (c15-2 / break-01
                                 :ARG1 (c15-3 / news)))
       :time (c15-8 / get-05
                    :ARG1 c15-3
                    :ARG2 (c15-0 / out-06
                                 :ARG1 c15-3
                                 :ARG2 (c15-4 / public))
                    :mod (c15-7 / just)
                    :ord (c15-1 / ordinal-entity
                                :value 1))
       :li 2)

# ::snt (1) Great question. Breaking falls under several umbrellas.. In some cases it's many kinds of disasters, bit in others, like this...
# ::tokens ["(", "1", ")", "Great", "question", ".", "Breaking", "falls", "under", "several", "umbrellas", "..", "In", "some", "cases", "it", "'s", "many", "kinds", "of", "disasters", ",", "bit", "in", "others", ",", "like", "this", "..."]
# ::lemmas ["(", "1", ")", "great", "question", ".", "breaking", "fall", "under", "several", "umbrella", "..", "in", "some", "case", "it", "be", "many", "kind", "of", "disaster", ",", "bit", "in", "other", ",", "like", "this", "..."]
(c16-4 / multi-sentence
       :snt1 (c16-11 / question-01
                     :mod (c16-13 / great)
                     :li 1)
       :snt2 (c16-0 / fall-01
                    :ARG1 (c16-2 / break-01)
                    :ARG4 (c16-15 / under
                                  :op1 (c16-9 / umbrella
                                              :quant (c16-5 / several))))
       :snt3 (c16-14 / disaster
                     :mod (c16-7 / kind
                                 :quant (c16-6 / many))
                     :mod (c16-10 / case-04
                                  :mod (c16-1 / some))
                     :mod (c16-16 / case-04
                                  :mod (c16-3 / other)
                                  :mod (c16-8 / bit))
                     :example (c16-12 / this)))

# ::snt Why is this breaking news for a NJ station?
# ::tokens ["Why", "is", "this", "breaking", "news", "for", "a", "NJ", "station", "?"]
# ::lemmas ["why", "be", "this", "break", "news", "for", "a", "NJ", "station", "?"]
(c17-6 / cause-01
       :ARG0 (c17-4 / amr-unknown)
       :ARG1 (c17-2 / news
                    :ARG1-of (c17-1 / break-13)
                    :mod (c17-7 / this)
                    :beneficiary (c17-3 / station
                                        :location (c17-0 / state
                                                         :name (c17-5 / name
                                                                      :op1 "NJ")))))

# ::snt Wow
# ::tokens ["Wow"]
# ::lemmas ["wow"]
(c18-0 / wow
       :mode expressive)

# ::snt Not his finest moment!
# ::tokens ["Not", "his", "finest", "moment", "!"]
# ::lemmas ["not", "his", "fine", "moment", "!"]
(c19-3 / have-degree-91
       :ARG1 (c19-1 / moment
                    :poss (c19-4 / he))
       :ARG2 (c19-0 / fine-03
                    :ARG1 c19-1)
       :ARG3 (c19-2 / most)
       :polarity -)

# ::snt What a mess
# ::tokens ["What", "a", "mess"]
# ::lemmas ["what", "a", "mess"]
(c20-0 / mess
       :degree (c20-1 / so))

# ::snt It actually should have been "lives" and I was typing while doing other things, not involving alcohol. You got the point, despite typos.
# ::tokens ["It", "actually", "should", "have", "been", "\"", "lives", "\"", "and", "I", "was", "typing", "while", "doing", "other", "things", ",", "not", "involving", "alcohol", ".", "You", "got", "the", "point", ",", "despite", "typos", "."]
# ::lemmas ["it", "actually", "should", "have", "be", "\"", "life", "\"", "and", "i", "be", "type", "while", "do", "other", "thing", ",", "not", "involve", "alcohol", ".", "you", "get", "the", "point", ",", "despite", "typo", "."]
(c21-2 / multi-sentence
       :snt1 (c21-11 / and
                     :op1 (c21-5 / recommend-01
                                 :ARG1 (c21-6 / life
                                              :domain (c21-10 / it))
                                 :ARG1-of (c21-12 / actual-02))
                     :op2 (c21-9 / type-01
                                 :ARG0 (c21-4 / i)
                                 :time (c21-13 / do-02
                                               :ARG0 c21-4
                                               :ARG1 (c21-16 / thing
                                                             :mod (c21-0 / other)
                                                             :ARG2-of (c21-15 / involve-01
                                                                              :ARG1 (c21-8 / alcohol)
                                                                              :polarity -)))))
       :snt2 (c21-3 / get-30
                    :ARG0 (c21-1 / you)
                    :ARG1 (c21-7 / point-04)
                    :concession (c21-14 / typos)))

# ::snt It doesn't matter what someone been through. No one gets a mulligan for endangering live by drinking &amp; driving. But they should get help.
# ::tokens ["It", "does", "n't", "matter", "what", "someone", "been", "through", ".", "No", "one", "gets", "a", "mulligan", "for", "endangering", "live", "by", "drinking", "&", "amp", ";", "driving", ".", "But", "they", "should", "get", "help", "."]
# ::lemmas ["it", "do", "not", "matter", "what", "someone", "be", "through", ".", "no", "one", "get", "a", "mulligan", "for", "endanger", "live", "by", "drink", "&", "amp", ";", "drive", ".", "but", "they", "should", "get", "help", "."]
(c22-0 / multi-sentence
       :snt1 (c22-5 / matter-01
                    :ARG1 (c22-13 / go-through-20
                                  :ARG0 (c22-2 / someone))
                    :polarity -)
       :snt2 (c22-11 / get-01
                     :ARG0 (c22-1 / no-one)
                     :ARG1 (c22-16 / mulligan)
                     :ARG1-of (c22-8 / cause-01
                                     :ARG0 (c22-4 / endanger-01
                                                  :ARG0 c22-1
                                                  :ARG1 (c22-6 / live-01)
                                                  :manner (c22-12 / and
                                                                  :op1 (c22-14 / drink-01
                                                                               :ARG0 c22-1)
                                                                  :op2 (c22-15 / amphetamine)
                                                                  :op3 (c22-9 / drive-01
                                                                              :ARG0 c22-1)))))
       :snt3 (c22-17 / contrast-01
                     :ARG2 (c22-3 / recommend-01
                                  :ARG1 (c22-7 / help-01
                                               :ARG2 (c22-10 / they)))))

# ::snt Who gives a crap,
# ::tokens ["Who", "gives", "a", "crap", ","]
# ::lemmas ["who", "give", "a", "crap", ","]
(c23-0 / give-16
       :ARG0 (c23-2 / amr-unknown)
       :ARG1 (c23-1 / crap-01))

# ::snt Pray for him..
# ::tokens ["Pray", "for", "him", ".."]
# ::lemmas ["pray", "for", "he", ".."]
(c24-1 / pray-01
       :ARG0 (c24-0 / you)
       :beneficiary (c24-2 / he)
       :mode imperative)

# ::snt Seriously dude get it together
# ::tokens ["Seriously", "dude", "get", "it", "together"]
# ::lemmas ["seriously", "dude", "get", "it", "together"]
(c25-0 / get-together-14
       :ARG0 (c25-1 / dude)
       :ARG1 (c25-2 / it)
       :ARG2-of (c25-3 / serious-01)
       :mode imperative)

# ::snt They found him hiding in the woods
# ::tokens ["They", "found", "him", "hiding", "in", "the", "woods"]
# ::lemmas ["they", "find", "he", "hide", "in", "the", "wood"]
(c26-0 / find-01
       :ARG0 (c26-4 / they)
       :ARG1 (c26-1 / hide-01
                    :ARG0 (c26-3 / he)
                    :location (c26-2 / woods)))

# ::snt I think its a loads of balls
# ::tokens ["I", "think", "its", "a", "loads", "of", "balls"]
# ::lemmas ["i", "think", "its", "a", "load", "of", "ball"]
(c27-3 / think-01
       :ARG0 (c27-2 / i)
       :ARG1 (c27-0 / ball
                    :quant (c27-1 / load)))

# ::snt Did they put him in the hole !
# ::tokens ["Did", "they", "put", "him", "in", "the", "hole", "!"]
# ::lemmas ["do", "they", "put", "he", "in", "the", "hole", "!"]
(c28-2 / put-01
       :ARG0 (c28-3 / they)
       :ARG1 (c28-1 / he)
       :ARG2 (c28-0 / hole)
       :mode expressive)

# ::snt Was he out clubbing!
# ::tokens ["Was", "he", "out", "clubbing", "!"]
# ::lemmas ["be", "he", "out", "club", "!"]
(c29-0 / club-02
       :ARG0 (c29-1 / he)
       :polarity (c29-2 / amr-unknown)
       :mode expressive)

# ::snt sad decline. he should have kept it in his pants and stayed in his marriage.
# ::tokens ["sad", "decline", ".", "he", "should", "have", "kept", "it", "in", "his", "pants", "and", "stayed", "in", "his", "marriage", "."]
# ::lemmas ["sad", "decline", ".", "he", "should", "have", "keep", "it", "in", "his", "pant", "and", "stay", "in", "his", "marriage", "."]
(c32-1 / multi-sentence
       :snt1 (c32-10 / decline-01
                     :ARG1-of (c32-2 / sad-02))
       :snt2 (c32-3 / recommend-01
                    :ARG1 (c32-9 / and
                                 :op1 (c32-5 / keep-01
                                             :ARG0 (c32-4 / he)
                                             :ARG1 (c32-8 / it)
                                             :location (c32-6 / pants
                                                              :poss c32-4))
                                 :op2 (c32-0 / stay-01
                                             :ARG1 c32-4
                                             :ARG2 (c32-7 / marry-01
                                                          :ARG1 c32-4)))))

# ::snt Been shit at driving for ages tho
# ::tokens ["Been", "shit", "at", "driving", "for", "ages", "tho"]
# ::lemmas ["be", "shit", "at", "drive", "for", "age", "tho"]
(c33-1 / have-concession-91
       :ARG1 (c33-4 / drive-01
                    :ARG0 (c33-2 / i)
                    :ARG1-of (c33-0 / shit-01)
                    :duration (c33-3 / age)))

# ::snt He needs to get his crap together.
# ::tokens ["He", "needs", "to", "get", "his", "crap", "together", "."]
# ::lemmas ["he", "need", "to", "get", "his", "crap", "together", "."]
(c34-0 / need-01
       :ARG0 (c34-1 / he)
       :ARG1 (c34-4 / get-04
                    :ARG0 c34-1
                    :ARG1 (c34-3 / together
                                 :domain (c34-2 / crap
                                                :poss c34-1))))

# ::snt The Tiger drunk nah
# ::tokens ["The", "Tiger", "drunk", "nah"]
# ::lemmas ["the", "Tiger", "drink", "nah"]
(c35-0 / drunk
       :domain (c35-2 / person
                      :name (c35-1 / name
                                   :op1 "The"
                                   :op2 " Tiger")))

# ::snt ?
# ::tokens ["?"]
# ::lemmas ["?"]
(c36-0 / request-confirmation-91)

# ::snt POCSO Misuse
# ::tokens ["POCSO", "Misuse"]
# ::lemmas ["pocso", "misuse"]
(c37-0 / excuse-02
       :ARG2 (c37-1 / misuse-01))

# ::snt +
# ::tokens ["+"]
# ::lemmas ["+"]
(c39-0 / add-02)

# ::snt Asaram Bapu Ji
# ::tokens ["Asaram", "Bapu", "Ji"]
# ::lemmas ["Asaram", "Bapu", "Ji"]
(c41-1 / person
       :name (c41-0 / name
                    :op1 "Asaram"
                    :op2 "Bapu"
                    :op3 "Ji"))

# ::snt Innocent Asaram Bapuji since nearly yrs due to misuse of POCSO
# ::tokens ["Innocent", "Asaram", "Bapuji", "since", "nearly", "yrs", "due", "to", "misuse", "of", "POCSO"]
# ::lemmas ["Innocent", "Asaram", "Bapuji", "since", "nearly", "yr", "due", "to", "misuse", "of", "POCSO"]
(c42-8 / innocent-01
       :ARG1 (c42-5 / person
                    :name (c42-2 / name
                                 :op1 "Asaram"
                                 :op2 "Bapuji"))
       :time (c42-3 / since
                    :op1 (c42-1 / misuse-01
                                :ARG1 (c42-6 / law
                                             :name (c42-4 / name
                                                          :op1 "POCSO")))
                    :duration (c42-7 / nearly
                                     :op1 (c42-9 / temporal-quantity
                                                 :unit (c42-0 / year)
                                                 :quant 1))))

# ::snt Medical report,Call details,Age of the girl-all prove case on Bapuji is fake Why ?
# ::tokens ["Medical", "report", ",", "Call", "details", ",", "Age", "of", "the", "girl", "-", "all", "prove", "case", "on", "Bapuji", "is", "fake", "Why", "?"]
# ::lemmas ["medical", "report", ",", "call", "detail", ",", "Age", "of", "the", "girl", "-", "all", "prove", "case", "on", "Bapuji", "be", "fake", "why", "?"]
(c43-1 / multi-sentence
       :snt1 (c43-4 / report-01
                    :mod (c43-5 / medicine))
       :snt2 (c43-11 / detail-01
                     :ARG1 (c43-10 / girl))
       :snt3 (c43-6 / prove-01
                    :ARG0 (c43-9 / age-01
                                 :ARG1 (c43-8 / girl))
                    :ARG1 (c43-0 / fake-02
                                 :ARG1 (c43-7 / case-03
                                              :ARG1 (c43-2 / person
                                                           :name (c43-3 / name
                                                                        :op1 "Bapuji")))))
       :snt4 (c43-13 / cause-01
                     :ARG0 (c43-12 / amr-unknown)))

# ::snt Asaram Bapu Ji as he works for strengthening hinduism!!
# ::tokens ["Asaram", "Bapu", "Ji", "as", "he", "works", "for", "strengthening", "hinduism", "!", "!"]
# ::lemmas ["Asaram", "Bapu", "Ji", "as", "he", "work", "for", "strengthen", "hinduism", "!", "!"]
(c44-4 / person
       :name (c44-0 / name
                    :op1 "Asaram"
                    :op2 "Bapu"
                    :op3 "Ji")
       :time (c44-5 / work-01
                    :ARG1 (c44-1 / strengthen-01
                                 :ARG0 c44-4
                                 :ARG1 (c44-2 / religious-group
                                              :name (c44-3 / name
                                                           :op1 "Hinduism")))
                    :ARG0 c44-4))

# ::snt Asaram Bapu Ji ,
# ::tokens ["Asaram", "Bapu", "Ji", ","]
# ::lemmas ["Asaram", "Bapu", "Ji", ","]
(c45-1 / person
       :name (c45-0 / name
                    :op1 "Asaram"
                    :op2 "Bapu"
                    :op3 "Ji"))

# ::snt Saint Asaram Bapu Ji has been lodged without proof !!
# ::tokens ["Saint", "Asaram", "Bapu", "Ji", "has", "been", "lodged", "without", "proof", "!", "!"]
# ::lemmas ["Saint", "Asaram", "Bapu", "Ji", "have", "be", "lodge", "without", "proof", "!", "!"]
(c46-2 / lodge-03
       :ARG1 (c46-0 / person
                    :name (c46-1 / name
                                 :op1 "Saint"
                                 :op2 "Asaram"
                                 :op3 "Bapu"
                                 :op4 "Ji"))
       :manner (c46-3 / prove-01
                      :polarity -))

# ::snt Asaram Bapu Ji
# ::tokens ["Asaram", "Bapu", "Ji"]
# ::lemmas ["Asaram", "Bapu", "Ji"]
(c47-1 / person
       :name (c47-0 / name
                    :op1 "Asaram"
                    :op2 "Bapu"
                    :op3 "Ji"))

# ::snt Atrocities on innocent Hindu Saints due to fake cases is BLACK ERA of Indian Legal History!
# ::tokens ["Atrocities", "on", "innocent", "Hindu", "Saints", "due", "to", "fake", "cases", "is", "BLACK", "ERA", "of", "Indian", "Legal", "History", "!"]
# ::lemmas ["atrocity", "on", "innocent", "Hindu", "Saints", "due", "to", "fake", "case", "be", "BLACK", "ERA", "of", "Indian", "Legal", "history", "!"]
(c48-5 / have-03
       :ARG0 (c48-9 / history
                    :mod (c48-6 / law)
                    :mod (c48-8 / country
                                :name (c48-2 / name
                                             :op1 "India")))
       :ARG1 (c48-12 / apartheid
                     :beneficiary (c48-3 / saint
                                         :mod (c48-4 / religious-group
                                                     :name (c48-7 / name
                                                                  :op1 "Hindu"))
                                         :ARG1-of (c48-11 / innocent-01))
                     :ARG1-of (c48-13 / cause-01
                                      :ARG0 (c48-10 / case-03
                                                    :ARG1-of (c48-0 / fake-02)))
                     :ARG1-of (c48-1 / black-04)))

# ::snt No proof found against Asaram Bapu Ji in medical report, still !!
# ::tokens ["No", "proof", "found", "against", "Asaram", "Bapu", "Ji", "in", "medical", "report", ",", "still", "!", "!"]
# ::lemmas ["no", "proof", "find", "against", "Asaram", "Bapu", "Ji", "in", "medical", "report", ",", "still", "!", "!"]
(c49-4 / prove-01
       :ARG1-of (c49-0 / find-01
                       :location (c49-3 / report-01
                                        :ARG1 (c49-1 / medicine)))
       :mod (c49-2 / still)
       :polarity -)

# ::snt All facts point towards INNOCENCE of Asaram Bapu Ji, still !!
# ::tokens ["All", "facts", "point", "towards", "INNOCENCE", "of", "Asaram", "Bapu", "Ji", ",", "still", "!", "!"]
# ::lemmas ["all", "fact", "point", "towards", "INNOCENCE", "of", "Asaram", "Bapu", "Ji", ",", "still", "!", "!"]
(c50-4 / point-01
       :ARG0 (c50-0 / fact
                    :mod (c50-6 / all))
       :ARG2 (c50-5 / innocent-01
                    :ARG1 (c50-2 / person
                                 :name (c50-1 / name
                                              :op1 "Asaram"
                                              :op2 "Bapu"
                                              :op3 "Ji")))
       :mod (c50-3 / still)
       :mode expressive)
