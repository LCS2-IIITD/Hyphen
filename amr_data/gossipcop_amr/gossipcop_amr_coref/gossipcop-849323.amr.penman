# ::snt oh no please!
# ::tokens ["oh", "no", "please", "!"]
# ::lemmas ["oh", "no", "please", "!"]
(c1-0 / oh-no
      :mode expressive
      :polite +)

# ::snt Bella Thornes gonna come after her nowMark my words
# ::tokens ["Bella", "Thornes", "gon", "na", "come", "after", "her", "nowMark", "my", "words"]
# ::lemmas ["Bella", "Thornes", "going", "to", "come", "after", "her", "nowmark", "my", "word"]
(c2-4 / come-03
      :ARG0 (c2-3 / person
                  :name (c2-0 / name
                              :op1 "Bella"
                              :op2 "Thornes"))
      :ARG1 (c2-1 / she)
      :time (c2-2 / now)
      :ARG1-of (c2-5 / word-01
                     :ARG0 (c2-6 / i)))

# ::snt can she date lauren? lol
# ::tokens ["can", "she", "date", "lauren", "?", "lol"]
# ::lemmas ["can", "she", "date", "lauren", "?", "lol"]
(c3-3 / possible-01
      :ARG1 (c3-7 / date-02
                  :ARG0 (c3-2 / she)
                  :ARG1 (c3-1 / person
                              :name (c3-0 / name
                                          :op1 "Lauren")))
      :polarity (c3-6 / amr-unknown)
      :ARG2-of (c3-4 / laugh-01
                     :ARG0 (c3-5 / i)
                     :manner (c3-8 / loud)
                     :mode expressive))

# ::snt aw!!
# ::tokens ["aw", "!", "!"]
# ::lemmas ["aw", "!", "!"]
(c4-0 / aw
      :mode expressive)

# ::snt Lauren impact
# ::tokens ["Lauren", "impact"]
# ::lemmas ["Lauren", "impact"]
(c5-2 / impact-01
      :ARG0 (c5-1 / person
                  :name (c5-0 / name
                              :op1 "Lauren")))

# ::snt We been knew
# ::tokens ["We", "been", "knew"]
# ::lemmas ["we", "been", "know"]
(c6-1 / know-01
      :ARG1 (c6-0 / we))

# ::snt Stop retweeting this enough already..back to music please .
# ::tokens ["Stop", "retweeting", "this", "enough", "already", "..", "back", "to", "music", "please", "."]
# ::lemmas ["stop", "retweete", "this", "enough", "already", "..", "back", "to", "music", "please", "."]
(c8-2 / multi-sentence
      :snt1 (c8-3 / stop-01
                  :ARG0 (c8-1 / you)
                  :ARG1 (c8-4 / retweet-01
                              :ARG0 c8-1
                              :ARG1 (c8-9 / this)
                              :ARG1-of (c8-7 / have-quant-91
                                             :ARG3 (c8-6 / enough)))
                  :time (c8-5 / already)
                  :mode imperative)
      :snt2 (c8-0 / back-02
                  :ARG0 (c8-10 / you)
                  :ARG1 (c8-8 / music)
                  :mode imperative
                  :polite +))

# ::snt I was wondering if they were or not!:/
# ::tokens ["I", "was", "wondering", "if", "they", "were", "or", "not!:/"]
# ::lemmas ["i", "be", "wonder", "if", "they", "be", "or", "not!:/"]
(c9-1 / wonder-01
      :ARG0 (c9-2 / i)
      :ARG1 (c9-3 / truth-value
                  :polarity-of (c9-0 / they))
      :mode expressive)

# ::snt Smart move Demi he will be working at Walmart in a couple of years anyway look at all the $$$$$ you saved
# ::tokens ["Smart", "move", "Demi", "he", "will", "be", "working", "at", "Walmart", "in", "a", "couple", "of", "years", "anyway", "look", "at", "all", "the", "$", "$", "$", "$", "$", "you", "saved"]
# ::lemmas ["smart", "move", "Demi", "he", "will", "be", "work", "at", "Walmart", "in", "a", "couple", "of", "years", "anyway", "look", "at", "all", "the", "$", "$", "$", "$", "$", "you", "save"]
(c10-13 / multi-sentence
        :snt1 (c10-0 / say-01
                     :ARG1 (c10-5 / move-02
                                  :ARG1-of (c10-3 / smart-06))
                     :ARG2 (c10-17 / person
                                   :name (c10-16 / name
                                                 :op1 "Demi")))
        :snt2 (c10-19 / work-01
                      :ARG0 (c10-6 / he)
                      :ARG2 (c10-15 / company
                                    :name (c10-14 / name
                                                  :op1 "Walmart"))
                      :time (c10-10 / after
                                    :op1 (c10-18 / now)
                                    :quant (c10-12 / couple
                                                   :op1 (c10-9 / temporal-quantity
                                                               :unit (c10-4 / year)
                                                               :quant 1)))
                      :mod (c10-8 / anyway))
        :snt3 (c10-1 / look-01
                     :ARG0 (c10-11 / you)
                     :ARG1 (c10-20 / dollar
                                   :mod (c10-7 / all)
                                   :ARG1-of (c10-2 / save-01
                                                   :ARG0 c10-11))
                     :mode imperative))

# ::snt YES
# ::tokens ["YES"]
# ::lemmas ["yes"]
(c11-0 / yes)

# ::snt one down...one to go.
# ::tokens ["one", "down", "...", "one", "to", "go", "."]
# ::lemmas ["one", "down", "...", "one", "to", "go", "."]
(c12-2 / and
       :op1 (c12-4 / down-03
                   :ARG1 (c12-0 / one))
       :op2 (c12-3 / go-01
                   :ARG1 (c12-1 / one)))

# ::snt Split decision
# ::tokens ["Split", "decision"]
# ::lemmas ["split", "decision"]
(c13-2 / thing
       :ARG1-of (c13-1 / decide-01)
       :ARG1-of (c13-0 / split-01))
