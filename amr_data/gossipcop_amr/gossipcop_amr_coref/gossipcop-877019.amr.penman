# ::snt I think you'd find that doing an iota of research would benefit you immensely.
# ::tokens ["I", "think", "you", "'d", "find", "that", "doing", "an", "iota", "of", "research", "would", "benefit", "you", "immensely", "."]
# ::lemmas ["i", "think", "you", "would", "find", "that", "do", "an", "iota", "of", "research", "would", "benefit", "you", "immensely", "."]
(c1-6 / think-01
      :ARG0 (c1-5 / i)
      :ARG1 (c1-0 / find-02
                  :ARG0 (c1-2 / you)
                  :ARG1 (c1-1 / benefit-01
                              :ARG0 (c1-4 / research-01
                                          :ARG0 c1-2
                                          :quant (c1-3 / iota))
                              :ARG1 c1-2
                              :degree (c1-7 / immense))))

# ::snt I think you would find I'd be kicked out of the park.
# ::tokens ["I", "think", "you", "would", "find", "I", "'d", "be", "kicked", "out", "of", "the", "park", "."]
# ::lemmas ["i", "think", "you", "would", "find", "i", "would", "be", "kick", "out", "of", "the", "park", "."]
(c2-5 / think-01
      :ARG0 (c2-4 / i)
      :ARG1 (c2-0 / find-02
                  :ARG0 (c2-1 / you)
                  :ARG1 (c2-2 / kick-out-05
                              :ARG1 c2-4
                              :ARG2 (c2-3 / park))))

# ::snt Then that'd your prerogative, and so long as it doesn't infringe on other's happiness/safety, all the power to you.
# ::tokens ["Then", "that", "'d", "your", "prerogative", ",", "and", "so", "long", "as", "it", "does", "n't", "infringe", "on", "other", "'s", "happiness", "/", "safety", ",", "all", "the", "power", "to", "you", "."]
# ::lemmas ["then", "that", "would", "your", "prerogative", ",", "and", "so", "long", "as", "it", "do", "not", "infringe", "on", "other", "'s", "happiness", "/", "safety", ",", "all", "the", "power", "to", "you", "."]
(c3-5 / and
      :op1 (c3-7 / prerogative
                 :poss (c3-2 / you)
                 :domain (c3-10 / that)
                 :time (c3-12 / then))
      :op2 (c3-3 / power-01
                 :ARG1 c3-2
                 :mod (c3-9 / all)
                 :condition (c3-8 / as-long-as
                                  :op1 (c3-11 / infringe-01
                                              :ARG0 c3-10
                                              :ARG1 (c3-4 / slash
                                                          :op1 (c3-6 / happy-01
                                                                     :ARG1 (c3-0 / other))
                                                          :op2 (c3-1 / safe-01
                                                                     :ARG1 c3-0))
                                              :polarity -))))

# ::snt oh idk????? for hurting a LITTLE boy?? hmm seemed ovbious to be.
# ::tokens ["oh", "idk", "?", "?", "?", "?", "?", "for", "hurting", "a", "LITTLE", "boy", "?", "?", "hmm", "seemed", "ovbious", "to", "be", "."]
# ::lemmas ["oh", "idk", "?", "?", "?", "?", "?", "for", "hurt", "a", "little", "boy", "?", "?", "hmm", "seem", "ovbious", "to", "be", "."]
(c4-3 / seem-01
      :ARG1 (c4-0 / ovbious
                  :domain (c4-4 / hurt-01
                                :ARG1 (c4-2 / boy
                                            :mod (c4-5 / little))))
      :polarity (c4-6 / amr-unknown)
      :mod (c4-1 / oh
                 :mode expressive))

# ::snt Shame on Disneyland Paris!
# ::tokens ["Shame", "on", "Disneyland", "Paris", "!"]
# ::lemmas ["shame", "on", "Disneyland", "Paris", "!"]
(c5-2 / shame-01
      :location (c5-0 / amusement-park
                      :name (c5-1 / name
                                  :op1 "Disneyland"
                                  :op2 "Paris")))

# ::snt Hopefully they then got the experience for free or at least a lot cheaper too?
# ::tokens ["Hopefully", "they", "then", "got", "the", "experience", "for", "free", "or", "at", "least", "a", "lot", "cheaper", "too", "?"]
# ::lemmas ["hopefully", "they", "then", "get", "the", "experience", "for", "free", "or", "at", "least", "a", "lot", "cheap", "too", "?"]
(c6-4 / hope-01
      :ARG1 (c6-10 / get-01
                   :ARG0 (c6-9 / they)
                   :ARG1 (c6-3 / experience-01
                               :ARG0 c6-9
                               :ARG1-of (c6-0 / free-03)
                               :ARG1-of (c6-7 / have-degree-91
                                              :ARG2 (c6-6 / cheap-02
                                                          :ARG1 c6-3)
                                              :ARG3 (c6-1 / more
                                                          :quant (c6-2 / at-least
                                                                       :op1 (c6-5 / lot)))
                                              :mod (c6-12 / too)))
                   :time (c6-8 / then))
      :polarity (c6-11 / amr-unknown))

# ::snt Lmao. Boy is princess too
# ::tokens ["Lmao", ".", "Boy", "is", "princess", "too"]
# ::lemmas ["Lmao", ".", "Boy", "be", "princess", "too"]
(c7-1 / multi-sentence
      :snt1 (c7-3 / laugh-01
                  :ARG0 (c7-4 / i)
                  :manner (c7-6 / loud)
                  :mode expressive)
      :snt2 (c7-2 / princess
                  :domain (c7-0 / boy)
                  :mod (c7-5 / too)))

# ::snt No the parents. How about if I demand equal rights and use men's toilets ?
# ::tokens ["No", "the", "parents", ".", "How", "about", "if", "I", "demand", "equal", "rights", "and", "use", "men", "'s", "toilets", "?"]
# ::lemmas ["no", "the", "parent", ".", "how", "about", "if", "i", "demand", "equal", "right", "and", "use", "man", "'s", "toilet", "?"]
(c8-2 / multi-sentence
      :snt1 (c8-0 / no
                  :domain (c8-6 / person
                                :ARG0-of (c8-5 / have-rel-role-91
                                               :ARG2 (c8-1 / parent))))
      :snt2 (c8-8 / have-condition-91
                  :ARG1 (c8-11 / amr-unknown)
                  :ARG2 (c8-10 / and
                               :op1 (c8-13 / demand-01
                                           :ARG0 (c8-12 / i)
                                           :ARG1 (c8-3 / right-05
                                                       :ARG1 c8-12
                                                       :ARG1-of (c8-4 / equal-01)))
                               :op2 (c8-14 / use-01
                                           :ARG0 c8-12
                                           :ARG1 (c8-9 / toilet
                                                       :poss (c8-7 / man))))))

# ::snt If any child wants to be a princess, let them. Nobody is being harmed by it.
# ::tokens ["If", "any", "child", "wants", "to", "be", "a", "princess", ",", "let", "them", ".", "Nobody", "is", "being", "harmed", "by", "it", "."]
# ::lemmas ["if", "any", "child", "want", "to", "be", "a", "princess", ",", "let", "they", ".", "nobody", "be", "be", "harm", "by", "it", "."]
(c9-1 / multi-sentence
      :snt1 (c9-4 / let-01
                  :ARG0 (c9-0 / you)
                  :ARG1 (c9-6 / child
                              :mod (c9-9 / any))
                  :condition (c9-7 / want-01
                                   :ARG0 c9-6
                                   :ARG1 (c9-5 / princess
                                               :domain c9-6))
                  :mode imperative)
      :snt2 (c9-3 / harm-01
                  :ARG0 (c9-8 / it)
                  :ARG1 (c9-2 / nobody)))

# ::snt I'm glad they apologized. It was needed. Kids are kids, Disneyland is meant to be fun. We need to quit gendering every damn thing.
# ::tokens ["I", "'m", "glad", "they", "apologized", ".", "It", "was", "needed", ".", "Kids", "are", "kids", ",", "Disneyland", "is", "meant", "to", "be", "fun", ".", "We", "need", "to", "quit", "gendering", "every", "damn", "thing", "."]
# ::lemmas ["i", "be", "glad", "they", "apologize", ".", "it", "be", "need", ".", "kid", "be", "kid", ",", "Disneyland", "be", "mean", "to", "be", "fun", ".", "we", "need", "to", "quit", "gendere", "every", "damn", "thing", "."]
(c10-9 / multi-sentence
       :snt1 (c10-7 / glad-02
                    :ARG0 (c10-5 / apologize-01
                                 :ARG0 (c10-6 / they))
                    :ARG1 (c10-17 / i))
       :snt2 (c10-13 / need-01
                     :ARG1 (c10-1 / it))
       :snt3 (c10-3 / kid
                    :domain c10-3)
       :snt4 (c10-2 / mean-02
                    :ARG1 (c10-12 / fun-01
                                  :ARG1 (c10-4 / amusement-park
                                               :name (c10-10 / name
                                                             :op1 "Disneyland"))))
       :snt5 (c10-15 / need-01
                     :ARG0 (c10-16 / we)
                     :ARG1 (c10-8 / quit-01
                                  :ARG0 c10-16
                                  :ARG1 (c10-0 / gendle-00
                                               :ARG0 c10-16
                                               :ARG1 (c10-11 / thing
                                                             :mod (c10-14 / every)
                                                             :mod (c10-18 / damn
                                                                          :mode expressive))))))

# ::snt ces sales fils de pute
# ::tokens ["ces", "sales", "fils", "de", "pute"]
# ::lemmas ["ce", "sale", "fil", "de", "pute"]
(c11-0 / fil
       :mod (c11-2 / sell-01)
       :mod (c11-1 / de-pute))

# ::snt I bet you think the little boy also put together this maniacal plan to get free tickets, right?
# ::tokens ["I", "bet", "you", "think", "the", "little", "boy", "also", "put", "together", "this", "maniacal", "plan", "to", "get", "free", "tickets", ",", "right", "?"]
# ::lemmas ["i", "bet", "you", "think", "the", "little", "boy", "also", "put", "together", "this", "maniacal", "plan", "to", "get", "free", "ticket", ",", "right", "?"]
(c12-1 / bet-01
       :ARG0 (c12-11 / i)
       :ARG2 (c12-12 / think-01
                     :ARG0 (c12-2 / you)
                     :ARG1 (c12-9 / put-01
                                  :ARG0 (c12-8 / boy
                                               :mod (c12-10 / little))
                                  :ARG1 (c12-4 / plan-01
                                               :ARG1 (c12-13 / get-01
                                                             :ARG0 c12-8
                                                             :ARG1 (c12-15 / ticket
                                                                           :ARG1-of (c12-0 / free-03)))
                                               :mod (c12-3 / maniacal)
                                               :mod (c12-14 / this))
                                  :ARG2 (c12-7 / together)
                                  :mod (c12-5 / also))
                     :ARG1-of (c12-6 / request-confirmation-91
                                     :ARG0 c12-11
                                     :ARG2 c12-2)))

# ::snt How much of this is about what the child wanted and how much chasing for a freebie ? A free /2 CC or I go to the press ?
# ::tokens ["How", "much", "of", "this", "is", "about", "what", "the", "child", "wanted", "and", "how", "much", "chasing", "for", "a", "freebie", "?", "A", "free", "/2", "CC", "or", "I", "go", "to", "the", "press", "?"]
# ::lemmas ["how", "much", "of", "this", "be", "about", "what", "the", "child", "want", "and", "how", "much", "chase", "for", "a", "freebie", "?", "a", "free", "/2", "cc", "or", "i", "go", "to", "the", "press", "?"]
(c13-2 / multi-sentence
       :snt1 (c13-6 / concern-02
                    :ARG0 (c13-10 / this
                                  :quant (c13-12 / amr-unknown))
                    :ARG1 (c13-11 / and
                                  :op1 (c13-16 / thing
                                               :ARG1-of (c13-7 / want-01
                                                               :ARG0 (c13-15 / child)))
                                  :op2 (c13-9 / chase-01
                                              :ARG0 c13-15
                                              :ARG1 (c13-0 / freebie)
                                              :quant (c13-8 / amr-unknown))))
       :snt2 (c13-13 / go-02
                     :ARG0 (c13-1 / or
                                  :op1 (c13-5 / freebie
                                              :quant 2)
                                  :op2 (c13-14 / i))
                     :ARG4 (c13-4 / press)
                     :polarity (c13-3 / amr-unknown)))

# ::snt How can you ban such a sweet looking three yo? I'd be like, "You want to be Elsa? Here's the keys."!
# ::tokens ["How", "can", "you", "ban", "such", "a", "sweet", "looking", "three", "yo", "?", "I", "'d", "be", "like", ",", "\"", "You", "want", "to", "be", "Elsa", "?", "Here", "'s", "the", "keys", ".", "\"", "!"]
# ::lemmas ["how", "can", "you", "ban", "such", "a", "sweet", "look", "three", "yo", "?", "i", "would", "be", "like", ",", "\"", "you", "want", "to", "be", "Elsa", "?", "here", "be", "the", "key", ".", "\"", "!"]
(c14-13 / multi-sentence
        :snt1 (c14-16 / possible-01
                      :ARG1 (c14-12 / ban-01
                                    :ARG0 (c14-6 / you)
                                    :ARG1 (c14-11 / yo
                                                  :ARG1-of (c14-0 / sweet-05
                                                                  :mod (c14-5 / such))
                                                  :ARG0-of (c14-2 / look-02)
                                                  :quant 3)
                                    :manner (c14-10 / amr-unknown)))
        :snt2 (c14-3 / say-01
                     :ARG0 (c14-18 / i)
                     :ARG1 (c14-9 / and
                                  :op1 (c14-17 / want-01
                                               :ARG0 (c14-4 / you)
                                               :ARG1 (c14-14 / person
                                                             :name (c14-15 / name
                                                                           :op1 "Elsa")
                                                             :domain c14-4))
                                  :op2 (c14-1 / be-located-at-91
                                              :ARG1 (c14-8 / key)
                                              :ARG2 (c14-7 / here)))))

# ::snt picture made me so happy and headline made me so sad. wtf
# ::tokens ["picture", "made", "me", "so", "happy", "and", "headline", "made", "me", "so", "sad", ".", "wtf"]
# ::lemmas ["picture", "make", "i", "so", "happy", "and", "headline", "make", "i", "so", "sad", ".", "wtf"]
(c15-2 / multi-sentence
       :snt1 (c15-10 / and
                     :op1 (c15-5 / make-02
                                 :ARG0 (c15-6 / picture)
                                 :ARG1 (c15-7 / happy-01
                                              :ARG1 (c15-9 / i)
                                              :degree (c15-3 / so)))
                     :op2 (c15-12 / make-02
                                  :ARG0 (c15-8 / headline)
                                  :ARG1 (c15-0 / sad-02
                                               :ARG1 (c15-4 / i)
                                               :degree (c15-13 / so))))
       :snt2 (c15-11 / amr-unknown
                     :mod (c15-1 / fuck
                                 :mode expressive)))

# ::snt Fuck Disney. Someone tell that lil' boy that Elsa can keep 'princess for a day', he can be a unique queen forever like
# ::tokens ["Fuck", "Disney", ".", "Someone", "tell", "that", "lil", "'", "boy", "that", "Elsa", "can", "keep", "'", "princess", "for", "a", "day", "'", ",", "he", "can", "be", "a", "unique", "queen", "forever", "like"]
# ::lemmas ["Fuck", "Disney", ".", "someone", "tell", "that", "lil", "'", "boy", "that", "Elsa", "can", "keep", "'", "princess", "for", "a", "day", "'", ",", "he", "can", "be", "a", "unique", "queen", "forever", "like"]
(c16-11 / multi-sentence
        :snt1 (c16-17 / fuck-01
                      :ARG1 (c16-14 / company
                                    :name (c16-18 / name
                                                  :op1 "Disney"))
                      :mode expressive)
        :snt2 (c16-8 / tell-01
                     :ARG0 (c16-0 / someone)
                     :ARG1 (c16-7 / and
                                  :op1 (c16-20 / possible-01
                                               :ARG1 (c16-5 / keep-01
                                                            :ARG0 (c16-12 / person
                                                                          :name (c16-13 / name
                                                                                        :op1 "Elsa"))
                                                            :ARG1 (c16-3 / person
                                                                         :ARG0-of (c16-4 / have-rel-role-91
                                                                                         :ARG2 (c16-2 / princess)))
                                                            :duration (c16-15 / temporal-quantity
                                                                              :unit (c16-23 / day)
                                                                              :quant 1)))
                                  :op2 (c16-6 / possible-01
                                              :ARG1 (c16-9 / queen
                                                           :ARG1-of (c16-16 / unique-01)
                                                           :ARG1-of (c16-19 / resemble-01
                                                                            :ARG2 c16-12)
                                                           :duration (c16-21 / forever))))
                     :ARG2 (c16-10 / boy
                                   :mod (c16-22 / that)
                                   :mod (c16-1 / little))))

# ::snt needs to catch up to Disneyland here
# ::tokens ["needs", "to", "catch", "up", "to", "Disneyland", "here"]
# ::lemmas ["need", "to", "catch", "up", "to", "Disneyland", "here"]
(c17-1 / need-01
       :ARG1 (c17-4 / catch-up-04
                    :ARG1 (c17-0 / you)
                    :ARG2 (c17-5 / amusement-park
                                 :name (c17-2 / name
                                              :op1 "Disneyland"))
                    :location (c17-3 / here)))
