# ::snt Well deserved
# ::tokens ["Well", "deserved"]
# ::lemmas ["well", "deserve"]
(c1-0 / deserve-01
      :ARG1-of (c1-1 / well-09))

# ::snt Although I completely agree is deserves to spend life in prison this is getting ridiculous. Not even series killers get a sentencing like that!
# ::tokens ["Although", "I", "completely", "agree", "is", "deserves", "to", "spend", "life", "in", "prison", "this", "is", "getting", "ridiculous", ".", "Not", "even", "series", "killers", "get", "a", "sentencing", "like", "that", "!"]
# ::lemmas ["although", "i", "completely", "agree", "be", "deserve", "to", "spend", "life", "in", "prison", "this", "be", "get", "ridiculous", ".", "not", "even", "series", "killer", "get", "a", "sentencing", "like", "that", "!"]
(c2-1 / multi-sentence
      :snt1 (c2-4 / ridiculous-02
                  :ARG1 (c2-10 / this)
                  :concession (c2-12 / agree-01
                                     :ARG0 (c2-11 / i)
                                     :ARG1 (c2-13 / deserve-01
                                                  :ARG0 c2-10
                                                  :ARG1 (c2-3 / spend-02
                                                              :ARG0 c2-10
                                                              :ARG1 (c2-6 / life)
                                                              :location (c2-7 / prison)))
                                     :ARG1-of (c2-9 / complete-02)))
      :snt2 (c2-0 / sentence-01
                  :ARG1 (c2-2 / person
                              :ARG0-of (c2-8 / kill-01)
                              :mod (c2-16 / series)
                              :mod (c2-5 / even))
                  :ARG1-of (c2-14 / resemble-01
                                  :ARG2 (c2-15 / that))
                  :polarity -))

# ::snt I don't even understand how this sentencing works. Why would you bother sentence someone to + years in prison? Just tell the guy he has life in prison and he's never coming out. End of story.
# ::tokens ["I", "do", "n't", "even", "understand", "how", "this", "sentencing", "works", ".", "Why", "would", "you", "bother", "sentence", "someone", "to", "+", "years", "in", "prison", "?", "Just", "tell", "the", "guy", "he", "has", "life", "in", "prison", "and", "he", "'s", "never", "coming", "out", ".", "End", "of", "story", "."]
# ::lemmas ["i", "do", "not", "even", "understand", "how", "this", "sentencing", "work", ".", "why", "would", "you", "bother", "sentence", "someone", "to", "+", "year", "in", "prison", "?", "just", "tell", "the", "guy", "he", "have", "life", "in", "prison", "and", "he", "be", "never", "come", "out", ".", "end", "of", "story", "."]
(c3-17 / multi-sentence
       :snt1 (c3-22 / understand-01
                    :ARG0 (c3-27 / i)
                    :ARG1 (c3-11 / thing
                                 :manner-of (c3-26 / work-09
                                                   :ARG1 (c3-0 / sentence-01
                                                               :mod (c3-21 / this))))
                    :mod (c3-24 / even)
                    :polarity -)
       :snt2 (c3-16 / bother-02
                    :ARG0 (c3-5 / you)
                    :ARG1 (c3-4 / sentence-01
                                :ARG0 c3-5
                                :ARG1 (c3-3 / someone)
                                :ARG2 (c3-10 / at-least
                                             :op1 (c3-28 / temporal-quantity
                                                         :unit (c3-12 / year)
                                                         :quant 1)
                                             :location (c3-25 / prison)))
                    :ARG1-of (c3-20 / cause-01
                                    :ARG0 (c3-9 / amr-unknown)))
       :snt3 (c3-1 / tell-01
                   :ARG0 c3-5
                   :mode imperative)
       :ARG1 (c3-7 / and
                   :op1 (c3-6 / have-03
                              :ARG0 (c3-13 / guy)
                              :ARG1 (c3-2 / life
                                          :location (c3-18 / prison)))
                   :op2 (c3-15 / come-out-09
                               :ARG1 c3-13
                               :time (c3-14 / ever)
                               :polarity -))
       :ARG2 c3-13
       :mod (c3-8 / just)
       :snt4 (c3-19 / end-01
                    :ARG1 (c3-23 / story)))

# ::snt Wrong as it may be..Jesus still loves and died for Nassar sins as well..somebody tell him that
# ::tokens ["Wrong", "as", "it", "may", "be", "..", "Jesus", "still", "loves", "and", "died", "for", "Nassar", "sins", "as", "well", "..", "somebody", "tell", "him", "that"]
# ::lemmas ["wrong", "as", "it", "may", "be", "..", "Jesus", "still", "love", "and", "die", "for", "Nassar", "sin", "as", "well", "..", "somebody", "tell", "he", "that"]
(c5-10 / multi-sentence
       :snt1 (c5-17 / wrong-04
                    :ARG1 (c5-18 / it)
                    :ARG1-of (c5-16 / possible-01))
       :snt2 (c5-8 / and
                   :op1 (c5-1 / love-01
                              :ARG0 (c5-11 / person
                                           :name (c5-15 / name
                                                        :op1 "Jesus"))
                              :ARG1 (c5-2 / person
                                          :name (c5-12 / name
                                                       :op1 "Nassar"))
                              :mod (c5-0 / still)
                              :ARG1-of (c5-13 / cause-01
                                              :ARG0 (c5-4 / sin-01
                                                          :ARG0 c5-2))
                              :mod (c5-6 / as-well))
                   :op2 (c5-19 / die-01
                               :ARG1 c5-11
                               :ARG1-of (c5-9 / cause-01
                                              :ARG0 c5-4)))
       :snt3 (c5-7 / tell-01
                   :ARG0 (c5-3 / somebody)
                   :ARG1 (c5-14 / that)
                   :ARG2 (c5-5 / he)))

# ::snt It would save the taxpayers A LOT of money!!!
# ::tokens ["It", "would", "save", "the", "taxpayers", "A", "LOT", "of", "money", "!", "!", "!"]
# ::lemmas ["it", "would", "save", "the", "taxpayer", "a", "LOT", "of", "money", "!", "!", "!"]
(c6-2 / save-01
      :ARG0 (c6-5 / it)
      :ARG1 (c6-0 / money
                  :quant (c6-4 / lot))
      :ARG2 (c6-3 / person
                  :ARG0-of (c6-1 / pay-01
                                 :ARG1 (c6-6 / tax))))

# ::snt Ffs. Just hang the guy
# ::tokens ["Ffs", ".", "Just", "hang", "the", "guy"]
# ::lemmas ["Ffs", ".", "just", "hang", "the", "guy"]
(c7-2 / multi-sentence
      :snt1 (c7-0 / fuck
                  :mode expressive)
      :snt2 (c7-3 / hang-01
                  :ARG0 (c7-1 / you)
                  :ARG1 (c7-5 / guy)
                  :mod (c7-4 / just)
                  :mode imperative))
