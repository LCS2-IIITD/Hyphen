# ::snt Nope. Not automated. Thanks for not judging my spelling error amidst my laughter
# ::tokens ["Nope", ".", "Not", "automated", ".", "Thanks", "for", "not", "judging", "my", "spelling", "error", "amidst", "my", "laughter"]
# ::lemmas ["nope", ".", "not", "automate", ".", "thank", "for", "not", "judge", "my", "spelling", "error", "amidst", "my", "laughter"]
(c1-2 / multi-sentence
      :snt1 (c1-1 / nope)
      :snt2 (c1-5 / automate-01
                  :polarity -)
      :snt3 (c1-10 / thank-01
                   :ARG0 (c1-9 / i)
                   :ARG1 (c1-0 / you)
                   :ARG2 (c1-8 / judge-01
                               :ARG0 c1-0
                               :ARG1 (c1-6 / err-01
                                           :ARG0 (c1-4 / i)
                                           :ARG1 (c1-3 / spell-01))
                               :time (c1-7 / laugh-01
                                           :ARG0 c1-4)
                               :polarity -)))

# ::snt Oh lol I highly doubt it. If they do I'm ready
# ::tokens ["Oh", "lol", "I", "highly", "doubt", "it", ".", "If", "they", "do", "I", "'m", "ready"]
# ::lemmas ["oh", "lol", "i", "highly", "doubt", "it", ".", "if", "they", "do", "i", "be", "ready"]
(c2-1 / multi-sentence
      :snt1 (c2-9 / doubt-01
                  :ARG0 (c2-7 / i)
                  :ARG1 (c2-2 / it)
                  :degree (c2-4 / high-02)
                  :mod (c2-0 / oh
                             :mode expressive)
                  :ARG2-of (c2-5 / laugh-01
                                 :ARG0 c2-7
                                 :manner (c2-10 / loud)))
      :snt2 (c2-3 / ready-02
                  :ARG1 (c2-11 / i)
                  :condition (c2-6 / do-02
                                   :ARG0 (c2-8 / they))))

# ::snt I just meant if his fans find the tweet, they'll be in your mentions.
# ::tokens ["I", "just", "meant", "if", "his", "fans", "find", "the", "tweet", ",", "they", "'ll", "be", "in", "your", "mentions", "."]
# ::lemmas ["i", "just", "mean", "if", "his", "fan", "find", "the", "tweet", ",", "they", "'ll", "be", "in", "your", "mention", "."]
(c3-2 / mean-01
      :ARG0 (c3-7 / i)
      :ARG2 (c3-3 / mention-01
                  :ARG0 (c3-1 / you)
                  :ARG1 (c3-0 / fan
                              :poss (c3-4 / he))
                  :condition (c3-5 / find-01
                                   :ARG0 c3-0
                                   :ARG1 (c3-8 / thing
                                               :ARG1-of (c3-9 / tweet-01))))
      :mod (c3-6 / just))

# ::snt Attacked*
# ::tokens ["Attacked", "*"]
# ::lemmas ["attack", "*"]
(c4-0 / attack-01)

# ::snt Attached from who??
# ::tokens ["Attached", "from", "who", "?", "?"]
# ::lemmas ["attach", "from", "who", "?", "?"]
(c5-1 / attend-02
      :ARG1 (c5-0 / amr-unknown))

# ::snt Delete!! You used their full name, you'll get attacked
# ::tokens ["Delete", "!", "!", "You", "used", "their", "full", "name", ",", "you", "'ll", "get", "attacked"]
# ::lemmas ["Delete", "!", "!", "you", "use", "their", "full", "name", ",", "you", "'ll", "get", "attack"]
(c6-2 / multi-sentence
      :snt1 (c6-8 / delete-01
                  :ARG0 (c6-1 / you)
                  :mode imperative)
      :snt2 (c6-4 / have-condition-91
                  :ARG1 (c6-6 / attack-01
                              :ARG1 (c6-7 / you))
                  :ARG2 (c6-9 / use-01
                              :ARG0 c6-7
                              :ARG1 (c6-3 / name
                                          :poss (c6-5 / they)
                                          :mod (c6-0 / full)))))

# ::snt But hey, I don't hear any of the others dissing their ex band in their songs
# ::tokens ["But", "hey", ",", "I", "do", "n't", "hear", "any", "of", "the", "others", "dissing", "their", "ex", "band", "in", "their", "songs"]
# ::lemmas ["but", "hey", ",", "i", "do", "not", "hear", "any", "of", "the", "other", "diss", "their", "ex", "band", "in", "their", "song"]
(c7-5 / contrast-01
      :ARG2 (c7-4 / hear-01
                  :ARG0 (c7-7 / i)
                  :ARG1 (c7-9 / diss-01
                              :ARG0 (c7-0 / other
                                          :mod (c7-8 / any))
                              :ARG1 (c7-1 / band
                                          :poss c7-0
                                          :time (c7-3 / ex))
                              :location (c7-2 / song
                                              :poss c7-0))
                  :polarity -)
      :mod (c7-6 / hey
                 :mode expressive))

# ::snt Should've been the first to leave then? Pretttttty sure Zayn got the memo
# ::tokens ["Should", "'ve", "been", "the", "first", "to", "leave", "then", "?", "Pretttttty", "sure", "Zayn", "got", "the", "memo"]
# ::lemmas ["should", "'ve", "be", "the", "first", "to", "leave", "then", "?", "Pretttttty", "sure", "Zayn", "get", "the", "memo"]
(c8-1 / multi-sentence
      :snt1 (c8-5 / recommend-01
                  :ARG1 (c8-7 / leave-11
                              :ord (c8-0 / ordinal-entity
                                         :value 1)
                              :time (c8-10 / then)))
      :snt2 (c8-3 / sure-02
                  :ARG0 (c8-8 / person
                              :name (c8-2 / name
                                          :op1 "Prettty"))
                  :ARG1 (c8-11 / get-01
                               :ARG0 (c8-4 / person
                                           :name (c8-6 / name
                                                       :op1 "Zayn"))
                               :ARG1 (c8-9 / memo))))

# ::snt Now this guy be like : "use to be in D, now I'm free"
# ::tokens ["Now", "this", "guy", "be", "like", ":", "\"", "use", "to", "be", "in", "D", ",", "now", "I", "'m", "free", "\""]
# ::lemmas ["now", "this", "guy", "be", "like", ":", "\"", "use", "to", "be", "in", "D", ",", "now", "i", "be", "free", "\""]
(c9-3 / resemble-01
      :ARG1 (c9-8 / guy
                  :mod (c9-6 / this))
      :ARG2 (c9-7 / and
                  :op1 (c9-1 / be-located-at-91
                             :ARG1 c9-8
                             :ARG2 (c9-5 / city
                                         :name (c9-2 / name
                                                     :op1 "D"))
                             :time (c9-9 / use-03))
                  :op2 (c9-0 / free-04
                             :ARG1 c9-8
                             :time (c9-4 / now
                                         :time-of c9-3))))

# ::snt Nigga ain't nobody recognise your ass if it wasn't for the band
# ::tokens ["Nigga", "ai", "n't", "nobody", "recognise", "your", "ass", "if", "it", "was", "n't", "for", "the", "band"]
# ::lemmas ["Nigga", "be", "not", "nobody", "recognise", "your", "ass", "if", "it", "be", "not", "for", "the", "band"]
(c10-3 / recognize-02
       :ARG0 (c10-2 / nobody)
       :ARG1 (c10-4 / ass
                    :part-of (c10-1 / you))
       :condition (c10-0 / band
                         :polarity -)
       :polarity -)

# ::snt Kiss challenger percent
# ::tokens ["Kiss", "challenger", "percent"]
# ::lemmas ["kiss", "challenger", "percent"]
(c12-3 / kiss-01
       :ARG0 (c12-0 / you)
       :ARG1 (c12-2 / person
                    :ARG0-of (c12-4 / challenge-01))
       :quant (c12-1 / percentage-entity
                     :value 25)
       :mode imperative)

# ::snt your wish is my command!!!
# ::tokens ["your", "wish", "is", "my", "command", "!", "!", "!"]
# ::lemmas ["your", "wish", "be", "my", "command", "!", "!", "!"]
(c13-0 / wish-01
       :ARG0 (c13-2 / you)
       :ARG1 (c13-3 / command-02
                    :ARG0 (c13-1 / i)
                    :ARG2 c13-2))

# ::snt Hahahahaha /50 looks like ya gotta play both
# ::tokens ["Hahahahaha", "/50", "looks", "like", "ya", "got", "ta", "play", "both"]
# ::lemmas ["Hahahahaha", "/50", "look", "like", "ya", "got", "to", "play", "both"]
(c14-5 / look-02
       :ARG0 (c14-3 / slash
                    :op1 (c14-4 / hahaha
                                :mode expressive)
                    :op2 50)
       :ARG1 (c14-0 / obligate-01
                    :ARG1 (c14-2 / you)
                    :ARG2 (c14-6 / play-01
                                 :ARG0 c14-2
                                 :ARG1 (c14-1 / both))))

# ::snt Why is this old guy relevant? Clearly this is an old man's cry for attention. No one cares. BYE.
# ::tokens ["Why", "is", "this", "old", "guy", "relevant", "?", "Clearly", "this", "is", "an", "old", "man", "'s", "cry", "for", "attention", ".", "No", "one", "cares", ".", "BYE", "."]
# ::lemmas ["why", "be", "this", "old", "guy", "relevant", "?", "clearly", "this", "be", "an", "old", "man", "'s", "cry", "for", "attention", ".", "no", "one", "care", ".", "BYE", "."]
(c19-4 / multi-sentence
       :snt1 (c19-6 / relevant-01
                    :ARG1 (c19-13 / guy
                                  :mod (c19-1 / old)
                                  :mod (c19-12 / this))
                    :ARG1-of (c19-9 / cause-01
                                    :ARG0 (c19-7 / amr-unknown)))
       :snt2 (c19-14 / cry-02
                     :ARG0 (c19-8 / man
                                  :mod (c19-2 / old))
                     :ARG1 (c19-11 / attend-02
                                   :ARG1 c19-8)
                     :ARG1-of (c19-10 / clear-06))
       :snt3 (c19-0 / care-01
                    :ARG0 (c19-5 / no-one))
       :snt4 (c19-3 / by-the-way))

# ::snt THIS IS SO CUTE!!!!
# ::tokens ["THIS", "IS", "SO", "CUTE", "!", "!", "!", "!"]
# ::lemmas ["this", "be", "so", "cute", "!", "!", "!", "!"]
(c20-1 / cute
       :domain (c20-2 / this)
       :degree (c20-0 / so))

# ::snt That's my king!
# ::tokens ["That", "'s", "my", "king", "!"]
# ::lemmas ["that", "be", "my", "king", "!"]
(c21-1 / person
       :ARG0-of (c21-0 / have-rel-role-91
                       :ARG1 (c21-3 / i)
                       :ARG2 (c21-2 / king))
       :domain (c21-4 / that)
       :mode expressive)

# ::snt Famili, Famili, Famili - Familiar
# ::tokens ["Famili", ",", "Famili", ",", "Famili", "-", "Familiar"]
# ::lemmas ["Famili", ",", "Famili", ",", "Famili", "-", "familiar"]
(c22-5 / and
       :op1 (c22-0 / famili)
       :op2 (c22-2 / famili)
       :op3 (c22-3 / famili)
       :op4 (c22-4 / famili)
       :op5 (c22-1 / familiar))

# ::snt Liam killed this poll
# ::tokens ["Liam", "killed", "this", "poll"]
# ::lemmas ["Liam", "kill", "this", "poll"]
(c23-3 / kill-01
       :ARG0 (c23-2 / person
                    :name (c23-0 / name
                                 :op1 "Liam"))
       :ARG1 (c23-1 / poll-01
                    :mod (c23-4 / this)))

# ::snt by
# ::tokens ["by"]
# ::lemmas ["by"]
(c24-0 / by)

# ::snt I got shafted
# ::tokens ["I", "got", "shafted"]
# ::lemmas ["i", "got", "shaft"]
(c25-1 / shaft-01
       :ARG1 (c25-0 / i))

# ::snt ...again?
# ::tokens ["...", "again", "?"]
# ::lemmas ["...", "again", "?"]
(c26-0 / event
       :polarity (c26-2 / amr-unknown)
       :mod (c26-1 / again))

# ::snt Ofcourse Liam Payne &amp; J Balvin...
# ::tokens ["Ofcourse", "Liam", "Payne", "&", "amp", ";", "J", "Balvin", "..."]
# ::lemmas ["Ofcourse", "Liam", "Payne", "&", "amp", ";", "J", "Balvin", "..."]
(c28-5 / and
       :op1 (c28-4 / person
                   :name (c28-1 / name
                                :op1 "Liam"
                                :op2 "Payne"))
       :op2 (c28-2 / person
                   :name (c28-3 / name
                                :op1 "amp"))
       :mod (c28-0 / of-course))

# ::snt Familiar by the king Liam Payne!
# ::tokens ["Familiar", "by", "the", "king", "Liam", "Payne", "!"]
# ::lemmas ["familiar", "by", "the", "king", "Liam", "Payne", "!"]
(c29-0 / familiarize-01
       :ARG1 (c29-3 / person
                    :name (c29-1 / name
                                 :op1 "Liam"
                                 :op2 "Payne")
                    :ARG0-of (c29-2 / have-org-role-91
                                    :ARG2 (c29-4 / king))))

# ::snt US PAYNGELS ARE THE STRONGEST ARMY CAUSE WE LOVE AND SUPPORT
# ::tokens ["US", "PAYNGELS", "ARE", "THE", "STRONGEST", "ARMY", "CAUSE", "WE", "LOVE", "AND", "SUPPORT"]
# ::lemmas ["US", "payngels", "be", "the", "strongest", "ARMY", "cause", "we", "LOVE", "and", "support"]
(c30-6 / cause-01
       :ARG0 (c30-3 / soldier
                    :mod (c30-9 / country
                                :name (c30-1 / name
                                             :op1 "United"
                                             :op2 "States"))
                    :ARG1-of (c30-4 / have-degree-91
                                    :ARG2 (c30-0 / strong-02
                                                 :ARG1 c30-3)
                                    :ARG3 (c30-2 / most)))
       :ARG1 (c30-8 / and
                    :op1 (c30-5 / love-01
                                :ARG0 (c30-7 / we))
                    :op2 (c30-10 / support-01
                                 :ARG0 c30-7)))

# ::snt Perhaps we should wait and see before having a go at her, because the media said one of Liams songs on his latest ep was about their break up when it was actually written years ago by someone else.
# ::tokens ["Perhaps", "we", "should", "wait", "and", "see", "before", "having", "a", "go", "at", "her", ",", "because", "the", "media", "said", "one", "of", "Liams", "songs", "on", "his", "latest", "ep", "was", "about", "their", "break", "up", "when", "it", "was", "actually", "written", "years", "ago", "by", "someone", "else", "."]
# ::lemmas ["perhaps", "we", "should", "wait", "and", "see", "before", "have", "a", "go", "at", "she", ",", "because", "the", "medium", "say", "one", "of", "Liams", "song", "on", "his", "late", "ep", "be", "about", "their", "break", "up", "when", "it", "be", "actually", "write", "years", "ago", "by", "someone", "else", "."]
(c32-25 / possible-01
        :ARG1 (c32-23 / recommend-01
                      :ARG1 (c32-10 / and
                                    :op1 (c32-26 / wait-01
                                                 :ARG1 (c32-4 / we))
                                    :op2 (c32-0 / see-01
                                                :ARG0 c32-4)
                                    :time (c32-14 / before
                                                  :op1 (c32-11 / go-32
                                                               :ARG0 c32-4
                                                               :ARG1 (c32-6 / she))))
                      :ARG1-of (c32-19 / cause-01
                                       :ARG0 (c32-5 / say-01
                                                    :ARG0 (c32-16 / media)
                                                    :ARG1 (c32-2 / break-up-08
                                                                 :ARG1 (c32-17 / person
                                                                               :name (c32-21 / name
                                                                                             :op1 "Liam"))
                                                                 :ARG3 (c32-22 / song
                                                                               :ARG1-of (c32-27 / include-91
                                                                                                :ARG2 (c32-1 / song
                                                                                                             :poss c32-17))
                                                                               :quant 1)
                                                                 :time (c32-20 / write-01
                                                                               :ARG0 (c32-15 / someone
                                                                                             :mod (c32-24 / else))
                                                                               :ARG1 c32-22
                                                                               :ARG1-of (c32-9 / actual-02)
                                                                               :time c32-14
                                                                               :op1 (c32-18 / now)
                                                                               :quant (c32-8 / multiple
                                                                                             :op1 (c32-12 / temporal-quantity
                                                                                                          :unit (c32-7 / year)
                                                                                                          :quant 1))))
                                                    :location (c32-13 / ep
                                                                      :poss c32-17
                                                                      :mod (c32-3 / last))))))

# ::snt lmaoo he laughed at the joke though
# ::tokens ["lmaoo", "he", "laughed", "at", "the", "joke", "though"]
# ::lemmas ["lmaoo", "he", "laugh", "at", "the", "joke", "though"]
(c33-1 / laugh-01
       :ARG0 (c33-0 / he)
       :ARG2 (c33-3 / joke-01)
       :ARG2-of (c33-2 / have-concession-91)
       :mod c33-1
       :ARG0 c33-0
       :manner (c33-4 / loud)
       :mode expressive)

# ::snt Here here well said.
# ::tokens ["Here", "here", "well", "said", "."]
# ::lemmas ["here", "here", "well", "say", "."]
(c34-2 / say-01
       :location (c34-1 / here)
       :manner (c34-0 / well-09))

# ::snt how does someone wearing a liam shirt affect niall in any way lmao?
# ::tokens ["how", "does", "someone", "wearing", "a", "liam", "shirt", "affect", "niall", "in", "any", "way", "lmao", "?"]
# ::lemmas ["how", "do", "someone", "wear", "a", "liam", "shirt", "affect", "niall", "in", "any", "way", "lmao", "?"]
(c35-9 / affect-01
       :ARG0 (c35-2 / someone
                    :ARG0-of (c35-5 / wear-01
                                    :ARG1 (c35-0 / shirt
                                                 :mod (c35-6 / company
                                                             :name (c35-1 / name
                                                                          :op1 "Liam")))))
       :ARG1 (c35-3 / person
                    :mod (c35-8 / all))
       :manner (c35-7 / amr-unknown)
       :mod (c35-11 / any)
       :ARG2-of (c35-4 / laugh-01
                       :ARG0 (c35-10 / i)
                       :manner (c35-12 / loud)
                       :mode expressive))

# ::snt amen!!!
# ::tokens ["amen", "!", "!", "!"]
# ::lemmas ["amen", "!", "!", "!"]
(c36-0 / amen
       :mode expressive)
