# ::snt Must not have been any proof of such action taking place.
# ::tokens ["Must", "not", "have", "been", "any", "proof", "of", "such", "action", "taking", "place", "."]
# ::lemmas ["must", "not", "have", "be", "any", "proof", "of", "such", "action", "take", "place", "."]
(c1-3 / infer-01
      :ARG1 (c1-2 / thing
                  :ARG0-of (c1-1 / prove-01
                                 :ARG1 (c1-4 / act-02
                                             :mod (c1-0 / such)))
                  :mod (c1-5 / any)
                  :polarity -))

# ::snt of course not
# ::tokens ["of", "course", "not"]
# ::lemmas ["of", "course", "not"]
(c2-1 / have-polarity-91
      :mod (c2-0 / of-course)
      :ARG2 -)

# ::snt he was trouble from the first time I saw him, not sure why she entertained him for years when Ryan Cabrera wanted her. She took a L smh
# ::tokens ["he", "was", "trouble", "from", "the", "first", "time", "I", "saw", "him", ",", "not", "sure", "why", "she", "entertained", "him", "for", "years", "when", "Ryan", "Cabrera", "wanted", "her", ".", "She", "took", "a", "L", "smh"]
# ::lemmas ["he", "be", "trouble", "from", "the", "first", "time", "i", "see", "he", ",", "not", "sure", "why", "she", "entertain", "he", "for", "years", "when", "Ryan", "Cabrera", "want", "she", ".", "she", "take", "a", "l", "smh"]
(c3-11 / multi-sentence
       :snt1 (c3-19 / in-trouble-02
                    :ARG1 (c3-7 / he)
                    :time (c3-0 / see-01
                                :ARG0 (c3-6 / i)
                                :ARG1 c3-7
                                :ord (c3-3 / ordinal-entity
                                           :value 1))
                    :ARG0-of (c3-12 / cause-01
                                    :ARG1 (c3-4 / sure-02
                                                :ARG0 c3-6
                                                :ARG1 (c3-9 / thing
                                                            :ARG0-of (c3-10 / cause-01
                                                                            :ARG1 (c3-16 / entertain-01
                                                                                         :ARG0 (c3-2 / she)
                                                                                         :ARG1 c3-7
                                                                                         :duration (c3-8 / multiple
                                                                                                         :op1 (c3-13 / temporal-quantity
                                                                                                                     :unit (c3-5 / year)
                                                                                                                     :quant 1))
                                                                                         :time (c3-18 / want-01
                                                                                                      :ARG0 (c3-17 / person
                                                                                                                   :name (c3-14 / name
                                                                                                                                :op1 "Ryan"
                                                                                                                                :op2 "Cabrera"))
                                                                                                      :ARG1 c3-2))))
                                                :polarity -)))
       :snt2 (c3-20 / take-01
                    :ARG0 (c3-15 / she)
                    :ARG1 (c3-1 / smh)))

# ::snt I dont even know who these two people are..
# ::tokens ["I", "do", "nt", "even", "know", "who", "these", "two", "people", "are", ".."]
# ::lemmas ["i", "do", "not", "even", "know", "who", "these", "two", "people", "be", ".."]
(c4-2 / know-01
      :ARG0 (c4-3 / i)
      :ARG1 (c4-1 / person
                  :mod (c4-4 / this)
                  :quant 2)
      :mod (c4-0 / even)
      :polarity -)
