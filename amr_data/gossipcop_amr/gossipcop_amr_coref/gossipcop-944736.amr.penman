# ::snt i am so happy happy to see your return
# ::tokens ["i", "am", "so", "happy", "happy", "to", "see", "your", "return"]
# ::lemmas ["i", "be", "so", "happy", "happy", "to", "see", "your", "return"]
(c1-4 / happy-01
      :ARG0 (c1-2 / see-01
                  :ARG0 (c1-5 / i)
                  :ARG1 (c1-3 / return-01
                              :ARG1 (c1-1 / you)))
      :ARG1 c1-5
      :degree (c1-0 / so))

# ::snt Yay!
# ::tokens ["Yay", "!"]
# ::lemmas ["Yay", "!"]
(c2-0 / yay
      :mode expressive)

# ::snt Steps were taken. He's now able to return.Welcome back, .
# ::tokens ["Steps", "were", "taken", ".", "He", "'s", "now", "able", "to", "return", ".", "Welcome", "back", ",", "."]
# ::lemmas ["step", "be", "take", ".", "he", "be", "now", "able", "to", "return", ".", "welcome", "back", ",", "."]
(c3-0 / multi-sentence
      :snt1 (c3-6 / take-01
                  :ARG1 (c3-2 / step-01))
      :snt2 (c3-5 / possible-01
                  :ARG1 (c3-3 / return-01
                              :ARG1 (c3-4 / he))
                  :time (c3-1 / now)))

# ::snt As he should be You can't destroy a person's career solely on insinuation.
# ::tokens ["As", "he", "should", "be", "You", "ca", "n't", "destroy", "a", "person", "'s", "career", "solely", "on", "insinuation", "."]
# ::lemmas ["as", "he", "should", "be", "you", "can", "not", "destroy", "a", "person", "'s", "career", "solely", "on", "insinuation", "."]
(c4-4 / possible-01
      :ARG1 (c4-7 / destroy-01
                  :ARG0 (c4-0 / you)
                  :ARG1 (c4-5 / career
                              :poss (c4-1 / person))
                  :ARG1-of (c4-8 / cause-01
                                 :ARG0 (c4-6 / insinuate-01)
                                 :mod (c4-2 / sole)))
      :ARG1-of (c4-3 / recommend-01
                     :ARG2 c4-0)
      :polarity -)

# ::snt Yeah Chris!
# ::tokens ["Yeah", "Chris", "!"]
# ::lemmas ["yeah", "Chris", "!"]
(c5-2 / person
      :name (c5-0 / name
                  :op1 "Chris")
      :mod (c5-1 / yeah
                 :mode expressive))

# ::snt I always liked Chris Hardwick and their would be no show without him.
# ::tokens ["I", "always", "liked", "Chris", "Hardwick", "and", "their", "would", "be", "no", "show", "without", "him", "."]
# ::lemmas ["i", "always", "like", "Chris", "Hardwick", "and", "their", "would", "be", "no", "show", "without", "he", "."]
(c6-6 / and
      :op1 (c6-3 / like-01
                 :ARG0 (c6-5 / i)
                 :ARG1 (c6-2 / person
                             :name (c6-0 / name
                                         :op1 "Chris"
                                         :op2 "Hardwick"))
                 :time (c6-7 / always))
      :op2 (c6-1 / show-04
                 :ARG1 (c6-4 / they)
                 :prep-without c6-2
                 :polarity -))
