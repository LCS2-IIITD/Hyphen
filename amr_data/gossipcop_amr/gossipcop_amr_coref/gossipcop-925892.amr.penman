# ::snt Get well soon commando
# ::tokens ["Get", "well", "soon", "commando"]
# ::lemmas ["get", "well", "soon", "commando"]
(c1-2 / say-01
      :ARG0 (c1-5 / i)
      :ARG1 (c1-6 / get-03
                  :ARG1 (c1-3 / person
                              :name (c1-1 / name
                                          :op1 "Commando"))
                  :ARG2 (c1-4 / well-05
                              :ARG1 c1-3)
                  :time (c1-0 / soon)
                  :mode imperative)
      :ARG2 c1-3)

# ::snt : Arnold Schwarzenegger returns home after emergency open-heart surgery
# ::tokens [":", "Arnold", "Schwarzenegger", "returns", "home", "after", "emergency", "open", "-", "heart", "surgery"]
# ::lemmas [":", "Arnold", "Schwarzenegger", "return", "home", "after", "emergency", "open", "-", "heart", "surgery"]
(c2-3 / return-01
      :ARG1 (c2-6 / person
                  :name (c2-1 / name
                              :op1 "Arnold"
                              :op2 "Schwarzenegger"))
      :ARG4 (c2-5 / home)
      :time (c2-8 / after
                  :op1 (c2-2 / surgery-01
                             :ARG2 (c2-7 / heart
                                         :ARG1-of (c2-0 / open-01))
                             :mod (c2-4 / emergency))))

# ::snt He told the heart surgeon before the surgery,,, I'LL BE BACK...
# ::tokens ["He", "told", "the", "heart", "surgeon", "before", "the", "surgery", ",", ",", ",", "I'LL", "BE", "BACK", "..."]
# ::lemmas ["he", "tell", "the", "heart", "surgeon", "before", "the", "surgery", ",", ",", ",", "I'LL", "be", "back", "..."]
(c3-6 / tell-01
      :ARG0 (c3-2 / he)
      :ARG1 (c3-0 / back
                  :domain c3-2)
      :ARG2 (c3-3 / person
                  :ARG0-of (c3-1 / surgery-01)
                  :part (c3-5 / heart))
      :time (c3-4 / before
                  :op1 c3-1))

# ::snt The Terminator is back!
# ::tokens ["The", "Terminator", "is", "back", "!"]
# ::lemmas ["the", "Terminator", "be", "back", "!"]
(c4-0 / be-located-at-91
      :ARG1 (c4-1 / book
                  :name (c4-2 / name
                              :op1 "The"
                              :op2 "Terrator"))
      :ARG2 (c4-3 / back)
      :mode expressive)

# ::snt He's gonna be back at all times at least that's what he promised is 'llbeback
# ::tokens ["He", "'s", "gon", "na", "be", "back", "at", "all", "times", "at", "least", "that", "'s", "what", "he", "promised", "is", "'", "llbeback"]
# ::lemmas ["he", "be", "going", "to", "be", "back", "at", "all", "time", "at", "least", "that", "be", "what", "he", "promise", "be", "'", "llbeback"]
(c5-1 / return-01
      :ARG1 (c5-2 / he)
      :direction (c5-0 / back)
      :time (c5-5 / all)
      :mod (c5-4 / at-least)
      :ARG2-of (c5-3 / promise-01
                     :ARG0 c5-2
                     :ARG1 (c5-6 / return-01
                                 :ARG1 c5-2)))

# ::snt He did say "I'll be back."
# ::tokens ["He", "did", "say", "\"", "I", "'ll", "be", "back", ".", "\""]
# ::lemmas ["he", "do", "say", "\"", "i", "'ll", "be", "back", ".", "\""]
(c6-3 / say-01
      :ARG0 (c6-2 / he)
      :ARG1 (c6-0 / come-01
                  :ARG1 c6-2
                  :direction (c6-1 / back)))

# ::snt What did yo expect from Ill be back.
# ::tokens ["What", "did", "yo", "expect", "from", "Ill", "be", "back", "."]
# ::lemmas ["what", "do", "yo", "expect", "from", "Ill", "be", "back", "."]
(c8-2 / expect-01
      :ARG0 (c8-0 / you)
      :ARG1 (c8-4 / amr-unknown)
      :source (c8-1 / return-01
                    :ARG1 (c8-3 / i)))

# ::snt wishing him all the best and speedy recovery
# ::tokens ["wishing", "him", "all", "the", "best", "and", "speedy", "recovery"]
# ::lemmas ["wish", "he", "all", "the", "good", "and", "speedy", "recovery"]
(c9-5 / wish-01
      :ARG0 (c9-7 / i)
      :ARG1 (c9-2 / and
                  :op1 (c9-8 / thing
                             :ARG1-of (c9-4 / have-degree-91
                                            :ARG2 (c9-9 / good-02
                                                        :ARG1 c9-8)
                                            :ARG3 (c9-0 / most)))
                  :op2 (c9-3 / recover-01
                             :ARG1 (c9-6 / he)
                             :ARG1-of (c9-1 / speedy-03)))
      :ARG2 c9-6
      :mod (c9-10 / all))

# ::snt Good to hear that
# ::tokens ["Good", "to", "hear", "that"]
# ::lemmas ["good", "to", "hear", "that"]
(c10-0 / good-02
       :ARG1 (c10-1 / hear-01
                    :ARG1 (c10-2 / that)))

# ::snt Congrats
# ::tokens ["Congrats"]
# ::lemmas ["Congrats"]
(c11-0 / congratulate-01)
