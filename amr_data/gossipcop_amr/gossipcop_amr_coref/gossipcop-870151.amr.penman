# ::snt nope he's not gonna ruin my childhood
# ::tokens ["nope", "he", "'s", "not", "gon", "na", "ruin", "my", "childhood"]
# ::lemmas ["nope", "he", "be", "not", "going", "to", "ruin", "my", "childhood"]
(c1-0 / ruin-01
      :ARG0 (c1-2 / he)
      :ARG1 (c1-3 / childhood
                  :poss (c1-1 / i))
      :polarity -)

# ::snt He's just doing what his character in "you're the worst" would do...whatever he wants
# ::tokens ["He", "'s", "just", "doing", "what", "his", "character", "in", "\"", "you", "'re", "the", "worst", "\"", "would", "do", "...", "whatever", "he", "wants"]
# ::lemmas ["he", "be", "just", "do", "what", "his", "character", "in", "\"", "you", "be", "the", "bad", "\"", "would", "do", "...", "whatever", "he", "want"]
(c2-11 / do-02
       :ARG0 (c2-3 / he)
       :ARG1 (c2-10 / thing
                    :ARG1-of (c2-6 / do-02
                                   :ARG0 (c2-5 / character
                                               :poss c2-3
                                               :topic (c2-1 / you
                                                            :ARG1-of (c2-8 / have-degree-91
                                                                           :ARG2 (c2-0 / bad-07
                                                                                       :ARG1 c2-1)
                                                                           :ARG3 (c2-2 / most))))
                                   :mod (c2-7 / whatever
                                              :ARG1-of (c2-4 / want-01
                                                             :ARG0 c2-3))))
       :mod (c2-9 / just))

# ::snt What with these kid stars growing up &amp; getting DUI lately!? Especially when they can afford drivers
# ::tokens ["What", "with", "these", "kid", "stars", "growing", "up", "&", "amp", ";", "getting", "DUI", "lately", "!", "?", "Especially", "when", "they", "can", "afford", "drivers"]
# ::lemmas ["what", "with", "these", "kid", "star", "grow", "up", "&", "amp", ";", "get", "DUI", "lately", "!", "?", "especially", "when", "they", "can", "afford", "driver"]
(c3-0 / multi-sentence
      :snt1 (c3-4 / amr-unknown
                  :topic (c3-2 / star
                               :mod (c3-7 / kid)
                               :mod (c3-13 / this)
                               :time (c3-12 / and
                                            :op1 (c3-14 / grow-up-04)
                                            :op2 (c3-10 / amp))))
      :snt2 (c3-15 / get-01
                   :ARG1 (c3-5 / DUI)
                   :time (c3-8 / lately)
                   :time (c3-9 / possible-01
                               :ARG1 (c3-1 / afford-01
                                           :ARG0 (c3-16 / they)
                                           :ARG1 (c3-3 / person
                                                       :ARG0-of (c3-11 / drive-01)))
                               :mod (c3-6 / especially))))

# ::snt ENews quick to report bad stuff about certain people never the good stuff
# ::tokens ["ENews", "quick", "to", "report", "bad", "stuff", "about", "certain", "people", "never", "the", "good", "stuff"]
# ::lemmas ["ENews", "quick", "to", "report", "bad", "stuff", "about", "certain", "people", "never", "the", "good", "stuff"]
(c4-8 / and
      :op1 (c4-3 / report-01
                 :ARG1 (c4-2 / stuff
                             :ARG1-of (c4-1 / bad-07)
                             :topic (c4-5 / person
                                          :mod (c4-6 / certain)))
                 :ARG1-of (c4-7 / quick-02))
      :op2 (c4-10 / report-01
                  :ARG1 (c4-0 / stuff
                              :ARG1-of (c4-9 / good-07)
                              :topic c4-5)
                  :time (c4-4 / ever)
                  :polarity -))

# ::snt so far so great
# ::tokens ["so", "far", "so", "great"]
# ::lemmas ["so", "far", "so", "great"]
(c7-0 / great
      :mod (c7-1 / so-far))

# ::snt i'm so
# ::tokens ["i", "'m", "so"]
# ::lemmas ["i", "be", "so"]
(c8-1 / so
      :domain (c8-0 / i))

# ::snt Excuse me but who? I don't know him
# ::tokens ["Excuse", "me", "but", "who", "?", "I", "do", "n't", "know", "him"]
# ::lemmas ["excuse", "i", "but", "who", "?", "i", "do", "not", "know", "he"]
(c9-1 / multi-sentence
      :snt1 (c9-6 / contrast-01
                  :ARG1 (c9-3 / excuse-01
                              :ARG0 (c9-0 / you)
                              :ARG1 (c9-7 / i)
                              :mode imperative)
                  :ARG2 (c9-8 / amr-unknown))
      :snt2 (c9-5 / know-02
                  :ARG0 (c9-2 / i)
                  :ARG1 (c9-4 / he)
                  :polarity -))

# ::snt Whattt? Why?
# ::tokens ["Whattt", "?", "Why", "?"]
# ::lemmas ["Whattt", "?", "why", "?"]
(c10-2 / multi-sentence
       :snt1 (c10-3 / tt
                    :mode expressive)
       :snt2 (c10-1 / cause-01
                    :ARG0 (c10-0 / amr-unknown)))

# ::snt Debby Ryan did it better
# ::tokens ["Debby", "Ryan", "did", "it", "better"]
# ::lemmas ["Debby", "Ryan", "do", "it", "well"]
(c11-6 / do-02
       :ARG0 (c11-3 / person
                    :name (c11-0 / name
                                 :op1 "Debby"
                                 :op2 "Ryan"))
       :ARG1 (c11-4 / it)
       :manner (c11-5 / good-02
                      :ARG2-of (c11-2 / have-degree-91
                                      :ARG1 c11-6
                                      :ARG3 (c11-1 / more))))

# ::snt Sonny with a chance was THE best show ever
# ::tokens ["Sonny", "with", "a", "chance", "was", "THE", "best", "show", "ever"]
# ::lemmas ["sonny", "with", "a", "chance", "be", "the", "good", "show", "ever"]
(c12-2 / show-04
       :ARG1 (c12-5 / person
                    :name (c12-0 / name
                                 :op1 "Sonny"
                                 :op2 "with"
                                 :op3 "a"
                                 :op4 "Chance"))
       :ARG1-of (c12-4 / have-degree-91
                       :ARG2 (c12-6 / good-02
                                    :ARG1 c12-2)
                       :ARG3 (c12-1 / most)
                       :ARG5 (c12-3 / ever)))

# ::snt Demi outdrugged
# ::tokens ["Demi", "outdrugged"]
# ::lemmas ["Demi", "outdrugge"]
(c13-0 / outdrugged-01
       :ARG1 (c13-2 / person
                    :name (c13-1 / name
                                 :op1 "Demi")))

# ::snt Whata flop sonny was smuggling cocaine on airplanes yet never got arrested for it . TAKE NOTES
# ::tokens ["Whata", "flop", "sonny", "was", "smuggling", "cocaine", "on", "airplanes", "yet", "never", "got", "arrested", "for", "it", ".", "TAKE", "NOTES"]
# ::lemmas ["Whata", "flop", "sonny", "be", "smuggle", "cocaine", "on", "airplane", "yet", "never", "got", "arrest", "for", "it", ".", "take", "note"]
(c14-1 / multi-sentence
       :snt1 (c14-2 / smuggle-01
                    :ARG0 (c14-5 / person
                                 :name (c14-0 / name
                                              :op1 "Whata"
                                              :op2 "Flop"
                                              :op3 "Sonny"))
                    :ARG1 (c14-6 / cocaine)
                    :ARG3 (c14-8 / airplane)
                    :concession-of (c14-7 / arrest-01
                                          :ARG1 c14-5
                                          :ARG2 c14-2
                                          :time (c14-3 / ever)
                                          :polarity -))
       :snt2 (c14-4 / note-01))

# ::snt It's not like Dylan did anything wrong.. People just leaked naked pictures of him
# ::tokens ["It", "'s", "not", "like", "Dylan", "did", "anything", "wrong", "..", "People", "just", "leaked", "naked", "pictures", "of", "him"]
# ::lemmas ["it", "be", "not", "like", "Dylan", "do", "anything", "wrong", "..", "people", "just", "leak", "naked", "picture", "of", "he"]
(c15-0 / multi-sentence
       :snt1 (c15-3 / resemble-01
                    :ARG1 (c15-9 / it)
                    :ARG2 (c15-11 / do-02
                                  :ARG0 (c15-5 / person
                                               :name (c15-1 / name
                                                            :op1 "Dylan"))
                                  :ARG1 (c15-10 / anything
                                                :ARG1-of (c15-7 / wrong-02)))
                    :polarity -)
       :snt2 (c15-6 / leak-01
                    :ARG0 (c15-2 / person)
                    :ARG1 (c15-12 / picture
                                  :topic c15-5
                                  :mod (c15-4 / naked))
                    :mod (c15-8 / just)))

# ::snt Lauren can't relate
# ::tokens ["Lauren", "ca", "n't", "relate"]
# ::lemmas ["Lauren", "can", "not", "relate"]
(c16-2 / possible-01
       :ARG1 (c16-0 / relate-01
                    :ARG0 (c16-3 / person
                                 :name (c16-1 / name
                                              :op1 "Lauren")))
       :polarity -)

# ::snt Omg this thread this legit made my night
# ::tokens ["Omg", "this", "thread", "this", "legit", "made", "my", "night"]
# ::lemmas ["Omg", "this", "thread", "this", "legit", "make", "my", "night"]
(c18-2 / make-02
       :ARG0 (c18-4 / thread
                    :mod (c18-6 / this)
                    :ARG1-of (c18-3 / legitimate-02))
       :ARG1 (c18-1 / night
                    :poss (c18-5 / i))
       :mod (c18-0 / oh-my-god
                   :mode expressive))

# ::snt Bella Hadid did it better back in &amp; at legends only
# ::tokens ["Bella", "Hadid", "did", "it", "better", "back", "in", "&", "amp", ";", "at", "legends", "only"]
# ::lemmas ["Bella", "Hadid", "do", "it", "well", "back", "in", "&", "amp", ";", "at", "legend", "only"]
(c19-3 / multi-sentence
       :snt1 (c19-12 / do-02
                     :ARG0 (c19-6 / person
                                  :name (c19-2 / name
                                               :op1 "Bella"
                                               :op2 "Hadid"))
                     :ARG1 (c19-9 / it)
                     :time (c19-10 / and
                                   :op1 (c19-1 / back)
                                   :op2 (c19-11 / amp))
                     :manner (c19-4 / good-02
                                    :ARG2-of (c19-5 / have-degree-91
                                                    :ARG1 c19-12
                                                    :ARG3 (c19-7 / more))))
       :snt2 (c19-8 / legend
                    :mod (c19-0 / only)))

# ::snt You'd think we'd all learn by now to not drink &amp; drive
# ::tokens ["You", "'d", "think", "we", "'d", "all", "learn", "by", "now", "to", "not", "drink", "&", "amp", ";", "drive"]
# ::lemmas ["you", "would", "think", "we", "would", "all", "learn", "by", "now", "to", "not", "drink", "&", "amp", ";", "drive"]
(c20-7 / think-01
       :ARG0 (c20-1 / you)
       :ARG1 (c20-3 / learn-01
                    :ARG0 (c20-4 / we
                                 :mod (c20-9 / all))
                    :ARG1 (c20-8 / and
                                 :op1 (c20-10 / drink-01
                                              :ARG0 c20-4
                                              :polarity -)
                                 :op2 (c20-5 / amphetamine)
                                 :op3 (c20-6 / drive-01
                                             :ARG0 c20-4
                                             :polarity -))
                    :time (c20-0 / by
                                 :op1 (c20-2 / now))))

# ::snt OH SHIT I REMEMBER ALSO FROM STARSTRUCK
# ::tokens ["OH", "SHIT", "I", "REMEMBER", "ALSO", "FROM", "STARSTRUCK"]
# ::lemmas ["OH", "SHIT", "i", "remember", "also", "from", "STARSTRUCK"]
(c21-3 / remember-01
       :ARG0 (c21-5 / i)
       :ARG1 (c21-2 / shit
                    :mod (c21-0 / oh
                                :mode expressive))
       :source (c21-4 / work-of-art
                      :name (c21-1 / name
                                   :op1 "Starstuck"))
       :mod (c21-6 / also))

# ::snt Hilary Duff,Zendaya,Bella Thorne (ok no just kiddinc)
# ::tokens ["Hilary", "Duff", ",", "Zendaya", ",", "Bella", "Thorne", "(", "ok", "no", "just", "kiddinc", ")"]
# ::lemmas ["Hilary", "Duff", ",", "Zendaya", ",", "Bella", "Thorne", "(", "ok", "no", "just", "kiddinc", ")"]
(c22-8 / and
       :op1 (c22-4 / person
                   :name (c22-1 / name
                                :op1 "Hilary"
                                :op2 "Duff"))
       :op2 (c22-2 / person
                   :name (c22-3 / name
                                :op1 "Zendaya"))
       :op3 (c22-9 / person
                   :name (c22-5 / name
                                :op1 "Bella"
                                :op2 "Thorne"))
       :mod (c22-6 / kiddinc
                   :ARG1-of (c22-0 / okay-01
                                   :polarity -)
                   :mod (c22-7 / just)))

# ::snt it was cute, kind of like rock. demi played a comedian joining a snl type show
# ::tokens ["it", "was", "cute", ",", "kind", "of", "like", "rock", ".", "demi", "played", "a", "comedian", "joining", "a", "snl", "type", "show"]
# ::lemmas ["it", "be", "cute", ",", "kind", "of", "like", "rock", ".", "demi", "play", "a", "comedian", "join", "a", "snl", "type", "show"]
(c23-1 / multi-sentence
       :snt1 (c23-8 / cute
                    :domain (c23-10 / it)
                    :ARG1-of (c23-5 / resemble-01
                                    :ARG2 (c23-12 / rock)
                                    :degree (c23-6 / kind-of)))
       :snt2 (c23-7 / play-02
                    :ARG0 (c23-2 / person
                                 :name (c23-3 / name
                                              :op1 "Demi"))
                    :ARG1 (c23-13 / comedian
                                  :ARG0-of (c23-9 / join-01
                                                  :ARG1 (c23-4 / show-04
                                                               :ARG1-of (c23-11 / type-03
                                                                                :ARG2 (c23-0 / snl)))))))

# ::snt It's an accomplishment that your fave wishes
# ::tokens ["It", "'s", "an", "accomplishment", "that", "your", "fave", "wishes"]
# ::lemmas ["it", "be", "an", "accomplishment", "that", "your", "fave", "wish"]
(c24-5 / accomplish-01
       :ARG1 (c24-4 / it)
       :ARG1-of (c24-3 / wish-01
                       :ARG0 (c24-2 / person
                                    :ARG1-of (c24-0 / favor-01
                                                    :ARG0 (c24-1 / you)))))

# ::snt Lordt
# ::tokens ["Lordt"]
# ::lemmas ["Lordt"]
(c25-1 / person
       :name (c25-0 / name
                    :op1 "Lordt"))

# ::snt Another Disney flop
# ::tokens ["Another", "Disney", "flop"]
# ::lemmas ["another", "Disney", "flop"]
(c26-0 / flop
       :mod (c26-1 / company
                   :name (c26-2 / name
                                :op1 "Disney"))
       :mod (c26-3 / another))

# ::snt Demi queen of drugs
# ::tokens ["Demi", "queen", "of", "drugs"]
# ::lemmas ["Demi", "queen", "of", "drug"]
(c27-3 / queen
       :mod (c27-0 / drug)
       :domain (c27-2 / person
                      :name (c27-1 / name
                                   :op1 "Democrat")))

# ::snt "Sonny With A Chance" star
# ::tokens ["\"", "Sonny", "With", "A", "Chance", "\"", "star"]
# ::lemmas ["\"", "Sonny", "With", "A", "Chance", "\"", "star"]
(c28-2 / star-01
       :ARG1 (c28-1 / person
                    :name (c28-0 / name
                                 :op1 "Sonny"
                                 :op2 "with"
                                 :op3 "A"
                                 :op4 "Chance")))

# ::snt the comments
# ::tokens ["the", "comments"]
# ::lemmas ["the", "comment"]
(c29-1 / thing
       :ARG1-of (c29-0 / comment-01))

# ::snt Nico wyd
# ::tokens ["Nico", "wyd"]
# ::lemmas ["nico", "wyd"]
(c30-1 / person
       :name (c30-0 / name
                    :op1 "Nico"
                    :op2 "Wyd"))

# ::snt pablo escobar who
# ::tokens ["pablo", "escobar", "who"]
# ::lemmas ["pablo", "escobar", "who"]
(c31-1 / person
       :name (c31-0 / name
                    :op1 "Pablo"
                    :op2 "Escobar"))

# ::snt So Far, Ain't So Great... lol
# ::tokens ["So", "Far", ",", "Ai", "n't", "So", "Great", "...", "lol"]
# ::lemmas ["so", "far", ",", "be", "not", "so", "great", "...", "lol"]
(c32-4 / great
       :degree (c32-0 / so-far)
       :domain (c32-1 / event)
       :ARG2-of (c32-2 / laugh-01
                       :ARG0 (c32-3 / i)
                       :manner (c32-5 / loud)
                       :mode expressive)
       :polarity -)

# ::snt buy crying in the club and i have questions on itunes
# ::tokens ["buy", "crying", "in", "the", "club", "and", "i", "have", "questions", "on", "itunes"]
# ::lemmas ["buy", "cry", "in", "the", "club", "and", "i", "have", "question", "on", "itune"]
(c33-6 / and
       :op1 (c33-0 / buy-01
                   :ARG0 (c33-1 / you)
                   :ARG1 (c33-4 / cry-02
                                :location (c33-8 / club))
                   :mode imperative)
       :op2 (c33-5 / question-01
                   :ARG0 (c33-7 / i)
                   :medium (c33-3 / product
                                  :name (c33-2 / name
                                               :op1 "iTunes"))))

# ::snt Wtff he was my favorite
# ::tokens ["Wtff", "he", "was", "my", "favorite"]
# ::lemmas ["Wtff", "he", "be", "my", "favorite"]
(c34-0 / favor-01
       :ARG0 (c34-2 / i)
       :ARG1 (c34-1 / he)
       :degree (c34-3 / really))

# ::snt sonny remains unbothered
# ::tokens ["sonny", "remains", "unbothered"]
# ::lemmas ["sonny", "remain", "unbothered"]
(c35-0 / remain-01
       :ARG1 (c35-2 / sonny)
       :ARG2 (c35-1 / bothered
                    :polarity -))

# ::snt but he must've had on his protective socks and sandals right?
# ::tokens ["but", "he", "must", "'ve", "had", "on", "his", "protective", "socks", "and", "sandals", "right", "?"]
# ::lemmas ["but", "he", "must", "'ve", "have", "on", "his", "protective", "sock", "and", "sandal", "right", "?"]
(c36-6 / contrast-01
       :ARG2 (c36-0 / obligate-01
                    :ARG1 (c36-4 / he)
                    :ARG2 (c36-7 / wear-01
                                 :ARG0 c36-4
                                 :ARG1 (c36-8 / and
                                              :op1 (c36-2 / sock
                                                          :ARG2-of (c36-5 / protect-01
                                                                          :ARG1 c36-4))
                                              :op2 (c36-1 / sandal)))
                    :ARG1-of (c36-3 / request-confirmation-91
                                    :ARG2 c36-4)))

# ::snt Wizard Of Waverly Place's casts can't relate
# ::tokens ["Wizard", "Of", "Waverly", "Place", "'s", "casts", "ca", "n't", "relate"]
# ::lemmas ["Wizard", "of", "Waverly", "Place", "'s", "cast", "can", "not", "relate"]
(c37-2 / possible-01
       :ARG1 (c37-1 / relate-01
                    :ARG1 (c37-5 / thing
                                 :ARG1-of (c37-3 / cast-03
                                                 :ARG0 (c37-4 / work-of-art
                                                              :name (c37-0 / name
                                                                           :op1 "Wizard"
                                                                           :op2 "Of"
                                                                           :op3 "Waverly"
                                                                           :op4 "Place")))))
       :polarity -)

# ::snt Tea
# ::tokens ["Tea"]
# ::lemmas ["tea"]
(c39-0 / tea)

# ::snt goddammit nico
# ::tokens ["goddammit", "nico"]
# ::lemmas ["goddammit", "nico"]
(c40-3 / say-01
       :ARG0 (c40-2 / i)
       :ARG1 (c40-1 / nico)
       :ARG2 (c40-0 / goddammit
                    :mode expressive))

# ::snt Demi deserved better
# ::tokens ["Demi", "deserved", "better"]
# ::lemmas ["Demi", "deserve", "well"]
(c41-6 / deserve-01
       :ARG0 (c41-3 / person
                    :name (c41-0 / name
                                 :op1 "Demi"))
       :ARG1 (c41-4 / thing
                    :ARG1-of (c41-2 / have-degree-91
                                    :ARG2 (c41-5 / good-02)
                                    :ARG3 (c41-1 / more))))

# ::snt demi is a real life queen
# ::tokens ["demi", "is", "a", "real", "life", "queen"]
# ::lemmas ["demi", "be", "a", "real", "life", "queen"]
(c42-4 / queen
       :domain (c42-3 / person
                      :name (c42-0 / name
                                   :op1 "Demi"))
       :mod (c42-2 / life
                   :ARG1-of (c42-1 / real-04)))

# ::snt why cant most disney stars keep a good reputation
# ::tokens ["why", "ca", "nt", "most", "disney", "stars", "keep", "a", "good", "reputation"]
# ::lemmas ["why", "can", "not", "most", "disney", "star", "keep", "a", "good", "reputation"]
(c43-6 / cause-01
       :ARG0 (c43-7 / amr-unknown)
       :ARG1 (c43-5 / possible-01
                    :ARG1 (c43-4 / keep-02
                                 :ARG0 (c43-2 / star
                                              :mod (c43-9 / company
                                                          :name (c43-0 / name
                                                                       :op1 "Disney"))
                                              :quant (c43-1 / most))
                                 :ARG1 (c43-3 / reputation
                                              :ARG1-of (c43-8 / good-02)))
                    :polarity -))

# ::snt Omg
# ::tokens ["Omg"]
# ::lemmas ["Omg"]
(c44-0 / oh-my-god
       :mode expressive)

# ::snt LMFAO
# ::tokens ["LMFAO"]
# ::lemmas ["lmfao"]
(c45-2 / laugh-01
       :ARG0 (c45-3 / i
                    :part (c45-4 / ass
                                 :ARG0-of (c45-0 / fuck-01)
                                 :ARG1-of c45-2))
       :ARG3 (c45-1 / off))

# ::snt Demi outsold
# ::tokens ["Demi", "outsold"]
# ::lemmas ["Demi", "outsold"]
(c46-0 / outsold-01
       :ARG1 (c46-2 / person
                    :name (c46-1 / name
                                 :op1 "Demi")))
