# ::snt Fairly certain every man has said that at some juncture. I'll give you one guess as to why...
# ::tokens ["Fairly", "certain", "every", "man", "has", "said", "that", "at", "some", "juncture", ".", "I", "'ll", "give", "you", "one", "guess", "as", "to", "why", "..."]
# ::lemmas ["fairly", "certain", "every", "man", "have", "say", "that", "at", "some", "juncture", ".", "i", "'ll", "give", "you", "one", "guess", "as", "to", "why", "..."]
(c1-3 / multi-sentence
      :snt1 (c1-7 / certain
                  :domain (c1-4 / say-01
                                :ARG0 (c1-6 / man
                                            :mod (c1-5 / every))
                                :ARG1 (c1-10 / that)
                                :time (c1-8 / juncture
                                            :mod (c1-0 / some)))
                  :ARG1-of (c1-1 / fair-04))
      :snt2 (c1-11 / give-01
                   :ARG0 (c1-9 / i)
                   :ARG1 (c1-12 / guess-01
                                :ARG0 (c1-2 / you)
                                :ARG1 (c1-14 / thing
                                             :ARG0-of (c1-13 / cause-01))
                                :quant 1)
                   :ARG2 c1-2))

# ::snt We need more in the world!
# ::tokens ["We", "need", "more", "in", "the", "world", "!"]
# ::lemmas ["we", "need", "more", "in", "the", "world", "!"]
(c2-2 / need-01
      :ARG0 (c2-1 / we)
      :ARG1 (c2-0 / more)
      :location (c2-3 / world))

# ::snt Nobody cares what Wells' thinks or what Sarah Hyland thinks about what Wells' thinks.
# ::tokens ["Nobody", "cares", "what", "Wells", "'", "thinks", "or", "what", "Sarah", "Hyland", "thinks", "about", "what", "Wells", "'", "thinks", "."]
# ::lemmas ["nobody", "care", "what", "Wells", "'", "think", "or", "what", "Sarah", "Hyland", "think", "about", "what", "Wells", "'", "think", "."]
(c3-7 / care-01
      :ARG0 (c3-1 / nobody)
      :ARG1 (c3-0 / or
                  :op1 (c3-9 / think-01
                             :ARG0 (c3-5 / person
                                         :name (c3-4 / name
                                                     :op1 "Wells"))
                             :ARG1 (c3-11 / thing))
                  :op2 (c3-8 / think-01
                             :ARG0 (c3-2 / person
                                         :name (c3-6 / name
                                                     :op1 "Sarah"
                                                     :op2 "Hyland"))
                             :ARG1 (c3-3 / thing
                                         :ARG1-of (c3-10 / think-01
                                                         :ARG0 c3-5)))))
