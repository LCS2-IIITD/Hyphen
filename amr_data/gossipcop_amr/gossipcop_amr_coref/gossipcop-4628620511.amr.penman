# ::snt Tyga needs to dump Kylie Tyga is not good For Kylie
# ::tokens ["Tyga", "needs", "to", "dump", "Kylie", "Tyga", "is", "not", "good", "For", "Kylie"]
# ::lemmas ["tyga", "need", "to", "dump", "Kylie", "Tyga", "be", "not", "good", "for", "Kylie"]
(c1-6 / good-04
      :ARG1 (c1-3 / person
                  :name (c1-0 / name
                              :op1 "Tyga"))
      :ARG2 (c1-1 / person
                  :name (c1-2 / name
                              :op1 "Kylie"
                              :op2 "Tyga"))
      :ARG1-of (c1-5 / cause-01
                     :ARG0 (c1-4 / need-01
                                 :ARG0 c1-3
                                 :ARG1 (c1-7 / dump-01
                                             :ARG0 c1-3
                                             :ARG1 c1-1)))
      :polarity -)

# ::snt no just... no
# ::tokens ["no", "just", "...", "no"]
# ::lemmas ["no", "just", "...", "no"]
(c2-2 / and
      :op1 (c2-1 / just
                 :polarity -)
      :op2 (c2-0 / no))

# ::snt Yeah Right
# ::tokens ["Yeah", "Right"]
# ::lemmas ["yeah", "right"]
(c3-0 / right-06
      :mod (c3-1 / yeah))

# ::snt where did u hear that
# ::tokens ["where", "did", "u", "hear", "that"]
# ::lemmas ["where", "do", "u", "hear", "that"]
(c4-1 / hear-01
      :ARG0 (c4-2 / you)
      :ARG1 (c4-3 / that)
      :location (c4-0 / amr-unknown))

# ::snt Let this dumb girl go ahead. She might get the Aids virus.
# ::tokens ["Let", "this", "dumb", "girl", "go", "ahead", ".", "She", "might", "get", "the", "Aids", "virus", "."]
# ::lemmas ["let", "this", "dumb", "girl", "go", "ahead", ".", "she", "might", "get", "the", "Aids", "virus", "."]
(c5-1 / multi-sentence
      :snt1 (c5-6 / let-01
                  :ARG0 (c5-0 / you)
                  :ARG1 (c5-10 / go-06
                               :ARG0 (c5-8 / girl
                                           :mod (c5-11 / dumb)
                                           :mod (c5-9 / this))
                               :ARG2 (c5-4 / ahead))
                  :mode imperative)
      :snt2 (c5-7 / possible-01
                  :ARG1 (c5-12 / get-01
                               :ARG0 (c5-3 / she)
                               :ARG1 (c5-5 / virus
                                           :name (c5-2 / name
                                                       :op1 "Aids")))))

# ::snt you're pathetic Hollywood life..you're starting a drama again..
# ::tokens ["you", "'re", "pathetic", "Hollywood", "life", "..", "you're", "starting", "a", "drama", "again", ".."]
# ::lemmas ["you", "be", "pathetic", "Hollywood", "life", "..", "you're", "start", "a", "drama", "again", ".."]
(c6-2 / multi-sentence
      :snt1 (c6-6 / life
                  :mod (c6-4 / market-sector
                             :name (c6-1 / name
                                         :op1 "Hollywood"))
                  :mod (c6-5 / pathetic)
                  :domain (c6-0 / you))
      :snt2 (c6-3 / start-01
                  :ARG0 (c6-8 / you)
                  :ARG1 (c6-9 / drama)
                  :mod (c6-7 / again)))

# ::snt i dnt think Tyga wl eva hurt Kylie coz he az seen enough buh Zayn havent yet seen!
# ::tokens ["i", "dnt", "think", "Tyga", "wl", "eva", "hurt", "Kylie", "coz", "he", "az", "seen", "enough", "buh", "Zayn", "have", "nt", "yet", "seen", "!"]
# ::lemmas ["i", "dnt", "think", "Tyga", "wl", "eva", "hurt", "Kylie", "coz", "he", "az", "see", "enough", "buh", "Zayn", "have", "not", "yet", "see", "!"]
(c7-13 / think-01
       :ARG0 (c7-12 / i)
       :ARG1 (c7-6 / hurt-01
                   :ARG0 (c7-7 / person
                               :name (c7-2 / name
                                           :op1 "Tyga"))
                   :ARG1 (c7-3 / person
                               :name (c7-8 / name
                                           :op1 "Kylie")))
       :ARG1-of (c7-10 / cause-01
                       :ARG0 (c7-4 / see-01
                                   :ARG0 c7-7
                                   :ARG1-of (c7-11 / have-quant-91
                                                   :ARG3 (c7-5 / enough)
                                                   :ARG6 (c7-0 / see-01
                                                               :ARG0 (c7-14 / person
                                                                            :name (c7-9 / name
                                                                                        :op1 "Zayn"))
                                                               :time (c7-1 / yet)
                                                               :polarity -))))
       :polarity -)
