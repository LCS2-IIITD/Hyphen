# ::snt Nikki you should just work for E News at this point
# ::tokens ["Nikki", "you", "should", "just", "work", "for", "E", "News", "at", "this", "point"]
# ::lemmas ["Nikki", "you", "should", "just", "work", "for", "E", "News", "at", "this", "point"]
(c1-2 / say-01
      :ARG0 (c1-8 / i)
      :ARG1 (c1-3 / recommend-01
                  :ARG1 (c1-6 / work-01
                              :ARG0 (c1-5 / person
                                          :name (c1-0 / name
                                                      :op1 "Nikki"))
                              :ARG2 (c1-1 / publication
                                          :name (c1-4 / name
                                                      :op1 "E"
                                                      :op2 "News"))
                              :mod (c1-7 / just)
                              :time (c1-9 / point
                                          :mod (c1-10 / this)))
                  :ARG2 c1-5)
      :ARG2 c1-5)

# ::snt If they don't name a son throw the whole family away
# ::tokens ["If", "they", "do", "n't", "name", "a", "son", "throw", "the", "whole", "family", "away"]
# ::lemmas ["if", "they", "do", "not", "name", "a", "son", "throw", "the", "whole", "family", "away"]
(c2-7 / throw-away-07
      :ARG0 (c2-1 / you)
      :ARG1 (c2-0 / family
                  :mod (c2-6 / whole))
      :condition (c2-2 / name-01
                       :ARG0 c2-1
                       :ARG1 (c2-5 / person
                                   :ARG0-of (c2-4 / have-rel-role-91
                                                  :ARG2 (c2-3 / son)))
                       :polarity -)
      :mode imperative)

# ::snt Who?
# ::tokens ["Who", "?"]
# ::lemmas ["who", "?"]
(c3-0 / amr-unknown)

# ::snt Lets not care about this.
# ::tokens ["Lets", "not", "care", "about", "this", "."]
# ::lemmas ["let", "not", "care", "about", "this", "."]
(c4-0 / care-01
      :ARG0 (c4-2 / we)
      :ARG1 (c4-1 / this)
      :polarity -
      :mode imperative)

# ::snt another duggar?? yes! there's just not enough of them on this planet!
# ::tokens ["another", "duggar", "?", "?", "yes", "!", "there", "'s", "just", "not", "enough", "of", "them", "on", "this", "planet", "!"]
# ::lemmas ["another", "duggar", "?", "?", "yes", "!", "there", "be", "just", "not", "enough", "of", "they", "on", "this", "planet", "!"]
(c5-1 / multi-sentence
      :snt1 (c5-10 / diggar
                   :polarity (c5-8 / amr-unknown)
                   :mod (c5-7 / another))
      :snt2 (c5-0 / be-located-at-91
                  :ARG1 (c5-5 / diggar
                              :ARG1-of (c5-3 / have-quant-91
                                             :ARG3 (c5-2 / enough)
                                             :polarity -))
                  :ARG2 (c5-4 / planet
                              :mod (c5-6 / this))
                  :mod (c5-9 / just)))

# ::snt I love her name
# ::tokens ["I", "love", "her", "name"]
# ::lemmas ["i", "love", "her", "name"]
(c6-1 / love-01
      :ARG0 (c6-2 / i)
      :ARG1 (c6-0 / name
                  :poss (c6-3 / she)))

# ::snt Yes Felicity!
# ::tokens ["Yes", "Felicity", "!"]
# ::lemmas ["yes", "felicity", "!"]
(c7-3 / say-01
      :ARG1 (c7-1 / yes)
      :ARG2 (c7-2 / person
                  :name (c7-0 / name
                              :op1 "Felicity")))

# ::snt His name is Jeremy, not mike
# ::tokens ["His", "name", "is", "Jeremy", ",", "not", "mike"]
# ::lemmas ["his", "name", "be", "Jeremy", ",", "not", "mike"]
(c8-0 / name-01
      :ARG1 (c8-1 / he)
      :ARG2 (c8-2 / person
                  :name (c8-3 / name
                              :op1 "Jeremy")
                  :ARG1-of (c8-4 / instead-of-91
                                 :name c8-3
                                 :ARG2 c8-2
                                 :op1 "Mike")))
