# ::snt The Grind don't Stop!!! ...
# ::tokens ["The", "Grind", "do", "n't", "Stop", "!", "!", "!", "..."]
# ::lemmas ["the", "Grind", "do", "not", "stop", "!", "!", "!", "..."]
(c1-3 / stop-01
      :ARG0 (c1-1 / you)
      :ARG1 (c1-2 / music
                  :name (c1-0 / name
                              :op1 "The"
                              :op2 "Gr Grind"))
      :polarity -
      :mode imperative)

# ::snt I guess I was ahead of myself. At first I thought it said, "James Franco Comes Out!"
# ::tokens ["I", "guess", "I", "was", "ahead", "of", "myself", ".", "At", "first", "I", "thought", "it", "said", ",", "\"", "James", "Franco", "Comes", "Out", "!", "\""]
# ::lemmas ["i", "guess", "i", "be", "ahead", "of", "myself", ".", "at", "first", "i", "think", "it", "say", ",", "\"", "James", "Franco", "Comes", "Out", "!", "\""]
(c3-1 / multi-sentence
      :snt1 (c3-10 / guess-01
                   :ARG0 (c3-8 / i)
                   :ARG1 (c3-0 / be-located-at-91
                               :ARG1 c3-8
                               :ARG2 (c3-9 / ahead
                                           :op1 c3-8)))
      :snt2 (c3-7 / think-01
                  :ARG0 (c3-4 / i)
                  :ARG1 (c3-3 / say-01
                              :ARG0 (c3-12 / it)
                              :ARG1 (c3-6 / come-out-09
                                          :ARG1 (c3-5 / person
                                                      :name (c3-2 / name
                                                                  :op1 "James"
                                                                  :op2 "Franco"))))
                  :time (c3-11 / at-first)))

# ::snt That's good, at least he knows what really needs him
# ::tokens ["That", "'s", "good", ",", "at", "least", "he", "knows", "what", "really", "needs", "him"]
# ::lemmas ["that", "be", "good", ",", "at", "least", "he", "know", "what", "really", "need", "he"]
(c4-7 / good-02
      :ARG1 (c4-5 / that)
      :mod (c4-6 / at-least)
      :ARG1-of (c4-4 / cause-01
                     :ARG0 (c4-3 / know-01
                                 :ARG0 (c4-2 / he)
                                 :ARG1 (c4-8 / thing
                                             :ARG0-of (c4-0 / need-01
                                                            :ARG1 c4-2
                                                            :degree (c4-1 / really))))))

# ::snt Now or Never
# ::tokens ["Now", "or", "Never"]
# ::lemmas ["now", "or", "never"]
(c5-0 / or
      :op1 (c5-3 / now)
      :op2 (c5-2 / have-polarity-91
                 :time (c5-1 / ever)
                 :ARG2 -))
