# ::snt she is best one who been on super bowl. She put on masterpiece performance.
# ::tokens ["she", "is", "best", "one", "who", "been", "on", "super", "bowl", ".", "She", "put", "on", "masterpiece", "performance", "."]
# ::lemmas ["she", "be", "good", "one", "who", "be", "on", "super", "bowl", ".", "she", "put", "on", "masterpiece", "performance", "."]
(c1-3 / multi-sentence
      :snt1 (c1-8 / good-02
                  :ARG1 (c1-4 / she)
                  :ARG2-of (c1-6 / have-degree-91
                                 :ARG1 c1-4
                                 :ARG3 (c1-5 / most)
                                 :ARG5 (c1-0 / one
                                             :subevent-of (c1-2 / bowl
                                                                :mod (c1-1 / super)))))
      :snt2 (c1-7 / perform-01
                  :ARG0 (c1-10 / she)
                  :ARG1 (c1-9 / masterpiece)))

# ::snt No surprise! RT : Of course the list top halftime shows include the
# ::tokens ["No", "surprise", "!", "RT", ":", "Of", "course", "the", "list", "top", "halftime", "shows", "include", "the"]
# ::lemmas ["no", "surprise", "!", "rt", ":", "of", "course", "the", "list", "top", "halftime", "show", "include", "the"]
(c2-3 / multi-sentence
      :snt1 (c2-4 / surprise-01
                  :polarity -
                  :mode expressive)
      :snt2 (c2-0 / say-01
                  :ARG0 (c2-6 / publication
                              :name (c2-2 / name
                                          :op1 "RT"))
                  :ARG1 (c2-8 / include-01
                              :ARG1 (c2-9 / thing
                                          :ARG2-of (c2-7 / list-01)
                                          :ARG0-of (c2-10 / top-01
                                                          :ARG1 (c2-11 / show-04
                                                                       :time (c2-5 / halftime))))
                              :mod (c2-1 / of-course))))

# ::snt you enjoy seeing Beyonc every years? Cuz I don't
# ::tokens ["you", "enjoy", "seeing", "Beyonc", "every", "years", "?", "Cuz", "I", "do", "n't"]
# ::lemmas ["you", "enjoy", "see", "Beyonc", "every", "years", "?", "cuz", "i", "do", "not"]
(c3-5 / enjoy-01
      :ARG0 (c3-0 / you)
      :ARG1 (c3-2 / see-01
                  :ARG0 c3-0
                  :ARG1 (c3-6 / person
                              :name (c3-1 / name
                                          :op1 "Beyonce"))
                  :frequency (c3-3 / rate-entity-91
                                   :ARG3 (c3-9 / temporal-quantity
                                               :unit (c3-10 / year)
                                               :quant 1)))
      :polarity (c3-4 / amr-unknown)
      :ARG1-of (c3-7 / cause-01
                     :ARG0 (c3-11 / do-02
                                  :ARG0 (c3-8 / i)
                                  :polarity -)))

# ::snt Is this a problem? Seems like they are doing us all a favor.
# ::tokens ["Is", "this", "a", "problem", "?", "Seems", "like", "they", "are", "doing", "us", "all", "a", "favor", "."]
# ::lemmas ["be", "this", "a", "problem", "?", "seem", "like", "they", "be", "do", "we", "all", "a", "favor", "."]
(c4-1 / multi-sentence
      :snt1 (c4-4 / problem
                  :polarity (c4-3 / amr-unknown)
                  :domain (c4-7 / this))
      :snt2 (c4-2 / seem-01
                  :ARG1 (c4-0 / favor-01
                              :ARG0 (c4-8 / they)
                              :ARG1 (c4-5 / we
                                          :mod (c4-6 / all)))))

# ::snt Stand by assertion that Sound City Players should play Halftime. Let Springfield close it out with Grohl drumming Jesse's Girl
# ::tokens ["Stand", "by", "assertion", "that", "Sound", "City", "Players", "should", "play", "Halftime", ".", "Let", "Springfield", "close", "it", "out", "with", "Grohl", "drumming", "Jesse", "'s", "Girl"]
# ::lemmas ["stand", "by", "assertion", "that", "Sound", "City", "Players", "should", "play", "Halftime", ".", "let", "Springfield", "close", "it", "out", "with", "Grohl", "drum", "Jesse", "'s", "girl"]
(c5-9 / multi-sentence
      :snt1 (c5-0 / stand-11
                  :ARG0 (c5-4 / you)
                  :ARG1 (c5-6 / assert-03
                              :ARG1 (c5-16 / recommend-01
                                           :ARG1 (c5-17 / play-11
                                                        :ARG0 (c5-10 / person
                                                                     :name (c5-15 / name
                                                                                  :op1 "Sound"
                                                                                  :op2 "City"
                                                                                  :op3 "Players"))
                                                        :ARG1 (c5-14 / ftime))))
                  :mode imperative)
      :snt2 (c5-1 / let-01
                  :ARG0 (c5-8 / you)
                  :ARG1 (c5-12 / close-out-09
                               :ARG0 (c5-3 / person
                                           :name (c5-11 / name
                                                        :op1 "Springfield"))
                               :ARG1 (c5-19 / it)
                               :manner (c5-20 / drum-02
                                              :ARG0 (c5-2 / person
                                                          :name (c5-18 / name
                                                                       :op1 "Grohl"))
                                              :ARG1 (c5-7 / girl
                                                          :poss (c5-5 / person
                                                                      :name (c5-13 / name
                                                                                   :op1 "Jesse")))))
                  :mode imperative))

# ::snt Where do you stand on the Kanye debate?
# ::tokens ["Where", "do", "you", "stand", "on", "the", "Kanye", "debate", "?"]
# ::lemmas ["where", "do", "you", "stand", "on", "the", "Kanye", "debate", "?"]
(c6-2 / stand-11
      :ARG1 (c6-0 / you)
      :ARG2 (c6-5 / debate-01
                  :ARG0 (c6-3 / person
                              :name (c6-1 / name
                                          :op1 "Kanye")))
      :location (c6-4 / amr-unknown))

# ::snt Bey is QUEEN of super bowl
# ::tokens ["Bey", "is", "QUEEN", "of", "super", "bowl"]
# ::lemmas ["Bey", "be", "queen", "of", "super", "bowl"]
(c7-4 / queen
      :domain (c7-3 / person
                    :name (c7-1 / name
                                :op1 "Bey"))
      :mod (c7-0 / bowl
                 :mod (c7-2 / super)))

# ::snt my favorite Halftime show so far
# ::tokens ["my", "favorite", "Halftime", "show", "so", "far"]
# ::lemmas ["my", "favorite", "Halftime", "show", "so", "far"]
(c9-0 / favor-01
      :ARG0 (c9-4 / i)
      :ARG1 (c9-3 / show
                  :name (c9-2 / name
                              :op1 "Halftime"))
      :time (c9-1 / so-far))

# ::snt On the top where? I don't see it
# ::tokens ["On", "the", "top", "where", "?", "I", "do", "n't", "see", "it"]
# ::lemmas ["on", "the", "top", "where", "?", "i", "do", "not", "see", "it"]
(c10-1 / multi-sentence
       :snt1 (c10-0 / be-located-at-91
                    :ARG1 (c10-4 / amr-unknown)
                    :ARG2 (c10-6 / top))
       :snt2 (c10-2 / see-01
                    :ARG0 (c10-5 / i)
                    :ARG1 (c10-3 / it)
                    :polarity -))

# ::snt Don't play Michael like that, his performance is definitely at the top &amp; one of the best
# ::tokens ["Do", "n't", "play", "Michael", "like", "that", ",", "his", "performance", "is", "definitely", "at", "the", "top", "&", "amp", ";", "one", "of", "the", "best"]
# ::lemmas ["do", "not", "play", "Michael", "like", "that", ",", "his", "performance", "be", "definitely", "at", "the", "top", "&", "amp", ";", "one", "of", "the", "good"]
(c11-2 / multi-sentence
       :snt1 (c11-7 / play-01
                    :ARG0 (c11-0 / you)
                    :ARG1 (c11-3 / person
                                 :name (c11-1 / name
                                              :op1 "Michael"))
                    :ARG1-of (c11-4 / resemble-01
                                    :ARG2 (c11-11 / that))
                    :polarity -
                    :mode imperative)
       :snt2 (c11-5 / and
                    :op1 (c11-15 / top-02
                                 :ARG1 (c11-14 / perform-01
                                               :ARG0 (c11-6 / he))
                                 :mod (c11-13 / definite))
                    :op2 (c11-10 / include-91
                                 :ARG1 c11-14
                                 :ARG2 (c11-12 / good-03
                                               :ARG1 c11-14
                                               :ARG2-of (c11-9 / have-degree-91
                                                               :ARG1 c11-14
                                                               :ARG3 (c11-8 / most))))))

# ::snt So Why Was Prince Performance Was Recreated On Cartoons, Commercials And Movies Then?
# ::tokens ["So", "Why", "Was", "Prince", "Performance", "Was", "Recreated", "On", "Cartoons", ",", "Commercials", "And", "Movies", "Then", "?"]
# ::lemmas ["so", "why", "be", "Prince", "Performance", "be", "recreate", "on", "Cartoons", ",", "Commercials", "and", "Movies", "then", "?"]
(c12-5 / cause-01
       :ARG0 (c12-3 / amr-unknown)
       :ARG1 (c12-7 / treat-01
                    :ARG1 (c12-4 / perform-01
                                 :ARG0 (c12-1 / person
                                              :name (c12-0 / name
                                                           :op1 "Prince")))
                    :ARG2 (c12-6 / and
                                 :op1 (c12-10 / tabloid)
                                 :op2 (c12-9 / commercial)
                                 :op3 (c12-2 / movie))
                    :time (c12-8 / then)))

# ::snt don't get me wrong, I love Prince he's a fucking Legend but MJ's halftime show made more impact
# ::tokens ["do", "n't", "get", "me", "wrong", ",", "I", "love", "Prince", "he", "'s", "a", "fucking", "Legend", "but", "MJ", "'s", "halftime", "show", "made", "more", "impact"]
# ::lemmas ["do", "not", "get", "i", "wrong", ",", "i", "love", "Prince", "he", "be", "a", "fucking", "Legend", "but", "MJ", "'s", "halftime", "show", "make", "more", "impact"]
(c13-15 / and
        :op1 (c13-13 / wrong-04
                     :ARG1 (c13-1 / you)
                     :ARG2 (c13-14 / i)
                     :polarity -
                     :mode imperative)
        :op2 (c13-12 / contrast-01
                     :ARG1 (c13-8 / love-01
                                  :ARG0 c13-14
                                  :ARG1 (c13-9 / person
                                               :name (c13-2 / name
                                                            :op1 "Prince")))
                     :ARG2 (c13-16 / Legend
                                   :mod (c13-0 / fucking)
                                   :domain c13-9))
        :op3 (c13-3 / make-02
                    :ARG0 (c13-4 / show-04
                                 :ARG0 (c13-5 / person
                                              :name (c13-7 / name
                                                           :op1 "MJ"))
                                 :mod (c13-10 / halftime))
                    :ARG1 (c13-6 / impact-01
                                 :ARG0 c13-4
                                 :mod (c13-11 / more))))

# ::snt I meant that if weren't for him a wouldn't have all this outstanding performances.
# ::tokens ["I", "meant", "that", "if", "were", "n't", "for", "him", "a", "would", "n't", "have", "all", "this", "outstanding", "performances", "."]
# ::lemmas ["i", "mean", "that", "if", "be", "not", "for", "he", "a", "would", "not", "have", "all", "this", "outstanding", "performance", "."]
(c14-1 / mean-01
       :ARG0 (c14-7 / i)
       :ARG2 (c14-4 / have-condition-91
                    :ARG1 (c14-6 / have-03
                                 :ARG0 (c14-3 / he)
                                 :ARG1 (c14-5 / perform-02
                                              :ARG0 c14-3
                                              :mod (c14-0 / outstanding)
                                              :mod (c14-8 / this)
                                              :mod (c14-2 / all))
                                 :ARG2-of c14-4
                                 :polarity -)
                    :ARG0 c14-3
                    :ARG1 c14-5
                    :polarity -))

# ::snt So why don't nobody remember it
# ::tokens ["So", "why", "do", "n't", "nobody", "remember", "it"]
# ::lemmas ["so", "why", "do", "not", "nobody", "remember", "it"]
(c15-1 / remember-01
       :ARG0 (c15-0 / nobody)
       :ARG1 (c15-3 / it)
       :ARG1-of (c15-2 / cause-01
                       :ARG0 (c15-4 / amr-unknown))
       :polarity -)

# ::snt MJ created the Super Bowl halftime show...
# ::tokens ["MJ", "created", "the", "Super", "Bowl", "halftime", "show", "..."]
# ::lemmas ["MJ", "create", "the", "Super", "Bowl", "halftime", "show", "..."]
(c16-5 / create-01
       :ARG0 (c16-3 / person
                    :name (c16-0 / name
                                 :op1 "MJ"))
       :ARG1 (c16-1 / show-04
                    :ARG1 (c16-2 / halftime)
                    :mod (c16-6 / game
                                :name (c16-4 / name
                                             :op1 "Super"
                                             :op2 "Bowl"))))

# ::snt but Yet Prince Performance Is Better
# ::tokens ["but", "Yet", "Prince", "Performance", "Is", "Better"]
# ::lemmas ["but", "yet", "Prince", "Performance", "be", "well"]
(c17-6 / contrast-01
       :ARG2 (c17-4 / have-degree-91
                    :ARG1 (c17-5 / perform-02
                                 :ARG0 (c17-2 / person
                                              :name (c17-1 / name
                                                           :op1 "Prince")))
                    :ARG2 (c17-7 / good-02
                                 :ARG1 c17-5)
                    :ARG3 (c17-3 / more))
       :mod (c17-0 / yet))

# ::snt yet it's MJ who we talking about...
# ::tokens ["yet", "it", "'s", "MJ", "who", "we", "talking", "about", "..."]
# ::lemmas ["yet", "it", "be", "mj", "who", "we", "talk", "about", "..."]
(c18-4 / talk-01
       :ARG0 (c18-3 / we)
       :ARG1 (c18-2 / person
                    :name (c18-1 / name
                                 :op1 "MJ"))
       :mod (c18-0 / yet))

# ::snt That was legendary!
# ::tokens ["That", "was", "legendary", "!"]
# ::lemmas ["that", "be", "legendary", "!"]
(c19-0 / legendary
       :domain (c19-1 / that))

# ::snt i'll make this one exception for nd place in honor of prince
# ::tokens ["i", "'ll", "make", "this", "one", "exception", "for", "nd", "place", "in", "honor", "of", "prince"]
# ::lemmas ["i", "'ll", "make", "this", "one", "exception", "for", "nd", "place", "in", "honor", "of", "prince"]
(c20-1 / except-01
       :ARG0 (c20-4 / i)
       :ARG1 (c20-3 / place
                    :mod (c20-5 / this))
       :ARG2 (c20-2 / honor-01
                    :ARG1 (c20-0 / prince)))

# ::snt it literally rained during Purple Rain. God Was On Prince Side That Day
# ::tokens ["it", "literally", "rained", "during", "Purple", "Rain", ".", "God", "Was", "On", "Prince", "Side", "That", "Day"]
# ::lemmas ["it", "literally", "rain", "during", "Purple", "Rain", ".", "God", "be", "on", "Prince", "Side", "that", "day"]
(c21-1 / multi-sentence
       :snt1 (c21-5 / rain-01
                    :mod (c21-8 / literal)
                    :time (c21-6 / event
                                 :name (c21-2 / name
                                              :op1 "Purple"
                                              :op2 "Rain")))
       :snt2 (c21-0 / be-located-at-91
                    :ARG1 (c21-9 / person
                                 :name (c21-7 / name
                                              :op1 "God"))
                    :ARG2 (c21-3 / side
                                 :mod (c21-4 / prince))
                    :time (c21-11 / day
                                  :mod (c21-10 / that))))

# ::snt sorry but Prince doesn't deserve it. MJ should be in the top
# ::tokens ["sorry", "but", "Prince", "does", "n't", "deserve", "it", ".", "MJ", "should", "be", "in", "the", "top"]
# ::lemmas ["sorry", "but", "Prince", "do", "not", "deserve", "it", ".", "MJ", "should", "be", "in", "the", "top"]
(c22-0 / multi-sentence
       :snt1 (c22-7 / contrast-01
                    :ARG1 (c22-2 / sorry-01)
                    :ARG2 (c22-10 / deserve-01
                                  :ARG0 (c22-6 / person
                                               :name (c22-1 / name
                                                            :op1 "Prince"))
                                  :ARG1 (c22-8 / it)
                                  :polarity -))
       :snt2 (c22-4 / recommend-01
                    :ARG1 (c22-9 / top-02
                                 :ARG1 (c22-3 / person
                                              :name (c22-5 / name
                                                           :op1 "MJ")))))

# ::snt it will last until feb th
# ::tokens ["it", "will", "last", "until", "feb", "th"]
# ::lemmas ["it", "will", "last", "until", "feb", "th"]
(c23-2 / last-01
       :ARG1 (c23-3 / it)
       :ARG2 (c23-4 / until
                    :op1 (c23-0 / festival
                                :name (c23-1 / name
                                             :op1 "FEb"))))

# ::snt wig
# ::tokens ["wig"]
# ::lemmas ["wig"]
(c24-1 / person
       :name (c24-0 / name
                    :op1 "wig"))

# ::snt Bring Rihanna next year
# ::tokens ["Bring", "Rihanna", "next", "year"]
# ::lemmas ["bring", "Rihanna", "next", "year"]
(c25-0 / bring-01
       :ARG1 (c25-4 / person
                    :name (c25-2 / name
                                 :op1 "Rihanna"))
       :time (c25-1 / year
                    :mod (c25-3 / next)))

# ::snt missy saved it
# ::tokens ["missy", "saved", "it"]
# ::lemmas ["missy", "save", "it"]
(c26-2 / save-02
       :ARG0 (c26-0 / missy)
       :ARG1 (c26-1 / it))

# ::snt missy saved it
# ::tokens ["missy", "saved", "it"]
# ::lemmas ["missy", "save", "it"]
(c27-2 / save-02
       :ARG0 (c27-0 / missy)
       :ARG1 (c27-1 / it))

# ::snt KATY WAS THE BOMB
# ::tokens ["KATY", "WAS", "THE", "BOMB"]
# ::lemmas ["KATY", "be", "the", "BOMB"]
(c28-1 / bomb
       :domain (c28-2 / person
                      :name (c28-0 / name
                                   :op1 "Katy")))

# ::snt should be , powerful /11 ": ., list of BEST
# ::tokens ["should", "be", ",", "powerful", "/11", "\"", ":", ".", ",", "list", "of", "BEST"]
# ::lemmas ["should", "be", ",", "powerful", "/11", "\"", ":", ".", ",", "list", "of", "BEST"]
(c29-1 / recommend-01
       :ARG1 (c29-2 / and
                    :op1 (c29-4 / powerful-02)
                    :op3 (c29-5 / list-01
                                :ARG1 (c29-6 / thing
                                             :ARG1-of (c29-3 / have-degree-91
                                                             :ARG2 (c29-7 / good-02
                                                                          :ARG1 c29-6)
                                                             :ARG3 (c29-0 / most))))
                    :op2 11))

# ::snt :Sis you just spilledT hot tea
# ::tokens [":", "Sis", "you", "just", "spilledT", "hot", "tea"]
# ::lemmas [":", "Sis", "you", "just", "spilledt", "hot", "tea"]
(c30-2 / ask-01
       :ARG0 (c30-5 / i)
       :ARG1 (c30-1 / spill-01
                    :ARG0 (c30-0 / you)
                    :ARG1 (c30-6 / tea
                                 :ARG1-of (c30-3 / hot-05))
                    :time (c30-4 / just)))

# ::snt Awesome..
# ::tokens ["Awesome", ".."]
# ::lemmas ["Awesome", ".."]
(c31-0 / awe-01)

# ::snt It doesnt really matter anymore. The bar was set far too high when The Main Man performed...
# ::tokens ["It", "does", "nt", "really", "matter", "anymore", ".", "The", "bar", "was", "set", "far", "too", "high", "when", "The", "Main", "Man", "performed", "..."]
# ::lemmas ["it", "do", "not", "really", "matter", "anymore", ".", "the", "bar", "be", "set", "far", "too", "high", "when", "the", "Main", "Man", "perform", "..."]
(c32-2 / multi-sentence
       :snt1 (c32-7 / matter-01
                    :ARG1 (c32-12 / it)
                    :ARG1-of (c32-6 / real-04)
                    :time (c32-13 / anymore)
                    :polarity -)
       :snt2 (c32-4 / set-01
                    :ARG1 (c32-1 / bar)
                    :ARG2 (c32-8 / high-02
                                 :ARG2-of (c32-10 / have-degree-91
                                                  :ARG1 c32-1
                                                  :ARG3 (c32-11 / too
                                                                :mod (c32-0 / far))))
                    :time (c32-9 / perform-01
                                 :ARG0 (c32-3 / person
                                              :name (c32-5 / name
                                                           :op1 "The"
                                                           :op2 "Main"
                                                           :op3 "Man")))))

# ::snt Prince should've been the designated performer in perpetuity.
# ::tokens ["Prince", "should", "'ve", "been", "the", "designated", "performer", "in", "perpetuity", "."]
# ::lemmas ["Prince", "should", "'ve", "be", "the", "designate", "performer", "in", "perpetuity", "."]
(c33-2 / recommend-01
       :ARG1 (c33-3 / person
                    :ARG0-of (c33-1 / perform-01)
                    :ARG1-of (c33-6 / designate-01)
                    :duration (c33-5 / perpetuity)
                    :domain (c33-4 / person
                                   :name (c33-0 / name
                                                :op1 "Prince"))))

# ::snt ... by a Minneapolis mile.
# ::tokens ["...", "by", "a", "Minneapolis", "mile", "."]
# ::lemmas ["...", "by", "a", "Minneapolis", "mile", "."]
(c34-0 / by
       :op1 (c34-4 / distance-quantity
                   :unit (c34-1 / mile)
                   :location (c34-3 / city
                                    :name (c34-2 / name
                                                 :op1 "Minneapolis"))
                   :quant 1))

# ::snt haven't seen it yet.
# ::tokens ["have", "n't", "seen", "it", "yet", "."]
# ::lemmas ["have", "not", "see", "it", "yet", "."]
(c35-3 / see-01
       :ARG0 (c35-2 / i)
       :ARG1 (c35-0 / it)
       :time (c35-1 / yet)
       :polarity -)

# ::snt Is the one with Patti LaBelle on the list?
# ::tokens ["Is", "the", "one", "with", "Patti", "LaBelle", "on", "the", "list", "?"]
# ::lemmas ["be", "the", "one", "with", "Patti", "LaBelle", "on", "the", "list", "?"]
(c36-0 / one
       :polarity (c36-4 / amr-unknown)
       :ARG1-of (c36-2 / list-01)
       :domain (c36-3 / person
                      :name (c36-1 / name
                                   :op1 "Patti"
                                   :op2 "LaBelle")))

# ::snt a flop who sold more than madonna last lbuns...
# ::tokens ["a", "flop", "who", "sold", "more", "than", "madonna", "last", "lbuns", "..."]
# ::lemmas ["a", "flop", "who", "sell", "more", "than", "madonna", "last", "lbun", "..."]
(c37-0 / flop
       :ARG0-of (c37-2 / sell-01
                       :ARG1 (c37-6 / thing
                                    :ARG1-of (c37-3 / have-quant-91
                                                    :ARG3 (c37-1 / more)
                                                    :ARG4 (c37-7 / gun
                                                                 :poss (c37-4 / madonna)
                                                                 :mod (c37-5 / last))))))

# ::snt Gaga not a flop*
# ::tokens ["Gaga", "not", "a", "flop", "*"]
# ::lemmas ["Gaga", "not", "a", "flop", "*"]
(c38-1 / flop
       :domain (c38-0 / gaga)
       :polarity -
       :mode expressive)

# ::snt Gaga a legend*
# ::tokens ["Gaga", "a", "legend", "*"]
# ::lemmas ["gaga", "a", "legend", "*"]
(c39-1 / legend
       :domain (c39-0 / gaga))

# ::snt and spreads her legs
# ::tokens ["and", "spreads", "her", "legs"]
# ::lemmas ["and", "spread", "her", "leg"]
(c40-3 / and
       :op2 (c40-0 / spread-01
                   :ARG1 (c40-2 / leg
                                :part-of (c40-1 / she))))

# ::snt legend
# ::tokens ["legend"]
# ::lemmas ["legend"]
(c41-0 / legacy)

# ::snt Ya girl Riri flopped with ANti boo don't forget that
# ::tokens ["Ya", "girl", "Riri", "flopped", "with", "ANti", "boo", "do", "n't", "forget", "that"]
# ::lemmas ["ya", "girl", "Riri", "flop", "with", "ANti", "boo", "do", "not", "forget", "that"]
(c42-0 / forget-01
       :ARG0 (c42-1 / you)
       :ARG1 (c42-7 / that)
       :condition (c42-6 / flip-flop-01
                         :ARG0 (c42-5 / person
                                      :name (c42-2 / name
                                                   :op1 "Riri")
                                      :mod (c42-8 / girl
                                                  :mode expressive))
                         :ARG1 (c42-3 / person
                                      :name (c42-4 / name
                                                   :op1 "Anti"
                                                   :op2 " boo")))
       :polarity -
       :mode imperative)

# ::snt britney doesn't really dance.. she only moves around and touches her hair
# ::tokens ["britney", "does", "n't", "really", "dance", "..", "she", "only", "moves", "around", "and", "touches", "her", "hair"]
# ::lemmas ["britney", "do", "not", "really", "dance", "..", "she", "only", "move", "around", "and", "touch", "her", "hair"]
(c43-6 / contrast-01
       :ARG1 (c43-10 / dance-01
                     :ARG0 (c43-5 / person
                                  :name (c43-1 / name
                                               :op1 "Britney")
                                  :part (c43-4 / hair))
                     :ARG1-of (c43-3 / real-04)
                     :polarity -)
       :ARG2 (c43-9 / and
                    :op1 (c43-2 / move-01
                                :ARG0 c43-5
                                :ARG2 (c43-8 / around)
                                :mod (c43-0 / only))
                    :op2 (c43-7 / touch-01
                                :ARG0 c43-5
                                :ARG1 c43-4)))

# ::snt if she can't do both things at the same time then she should only sing, because that's what a singer is supposed to do
# ::tokens ["if", "she", "ca", "n't", "do", "both", "things", "at", "the", "same", "time", "then", "she", "should", "only", "sing", ",", "because", "that", "'s", "what", "a", "singer", "is", "supposed", "to", "do"]
# ::lemmas ["if", "she", "can", "not", "do", "both", "thing", "at", "the", "same", "time", "then", "she", "should", "only", "sing", ",", "because", "that", "be", "what", "a", "singer", "be", "suppose", "to", "do"]
(c44-6 / recommend-01
       :ARG1 (c44-4 / sing-01
                    :ARG0 (c44-1 / she)
                    :mod (c44-0 / only))
       :condition (c44-8 / possible-01
                         :ARG1 (c44-12 / do-02
                                       :ARG0 c44-1
                                       :ARG1 (c44-11 / thing
                                                     :mod (c44-2 / both))
                                       :time (c44-13 / same-01))
                         :polarity -)
       :ARG1-of (c44-9 / cause-01
                       :ARG0 (c44-5 / suppose-02
                                    :ARG1 (c44-3 / person
                                                 :ARG0-of (c44-7 / sing-01))
                                    :ARG2 (c44-10 / do-02
                                                  :ARG0 c44-3
                                                  :ARG1 c44-11))))

# ::snt Gaga always dances (better than britney) and also sings her heart out, so...
# ::tokens ["Gaga", "always", "dances", "(", "better", "than", "britney", ")", "and", "also", "sings", "her", "heart", "out", ",", "so", "..."]
# ::lemmas ["Gaga", "always", "dance", "(", "well", "than", "britney", ")", "and", "also", "sing", "her", "heart", "out", ",", "so", "..."]
(c45-8 / cause-01
       :ARG0 (c45-12 / and
                     :op1 (c45-14 / dance-01
                                  :ARG0 (c45-6 / person
                                               :name (c45-1 / name
                                                            :op1 "Gaga")
                                               :part (c45-5 / heart))
                                  :time (c45-11 / always)
                                  :ARG1-of (c45-13 / good-02
                                                   :ARG2-of (c45-10 / have-degree-91
                                                                    :ARG1 c45-14
                                                                    :ARG3 (c45-2 / more)
                                                                    :ARG4 (c45-3 / person
                                                                                 :name (c45-7 / name
                                                                                              :op1 "Britney")))))
                     :op2 (c45-4 / sing-01
                                 :ARG0 c45-6
                                 :ARG1 (c45-0 / out-06
                                              :ARG1 c45-5)
                                 :mod (c45-9 / also))))

# ::snt ok but she doesn't sing.. we all know that
# ::tokens ["ok", "but", "she", "does", "n't", "sing", "..", "we", "all", "know", "that"]
# ::lemmas ["ok", "but", "she", "do", "not", "sing", "..", "we", "all", "know", "that"]
(c46-4 / contrast-01
       :ARG1 (c46-1 / okay-04)
       :ARG2 (c46-2 / sing-01
                    :ARG0 (c46-0 / she)
                    :polarity -)
       :ARG1-of (c46-3 / know-01
                       :ARG0 (c46-5 / we
                                    :mod (c46-6 / all))
                       :ARG1 c46-2))

# ::snt no, she would only lip sync.. as always
# ::tokens ["no", ",", "she", "would", "only", "lip", "sync", "..", "as", "always"]
# ::lemmas ["no", ",", "she", "would", "only", "lip", "sync", "..", "as", "always"]
(c47-2 / sync-01
       :ARG0 (c47-0 / she)
       :ARG1 (c47-3 / lip)
       :mod (c47-1 / only)
       :time (c47-4 / always))

# ::snt britney can't do live performances.. she can only lip sync
# ::tokens ["britney", "ca", "n't", "do", "live", "performances", "..", "she", "can", "only", "lip", "sync"]
# ::lemmas ["britney", "can", "not", "do", "live", "performance", "..", "she", "can", "only", "lip", "sync"]
(c48-3 / multi-sentence
       :snt1 (c48-6 / possible-01
                    :ARG1 (c48-4 / perform-01
                                 :ARG0 (c48-9 / person
                                              :name (c48-2 / name
                                                           :op1 "Britney"))
                                 :manner (c48-7 / live))
                    :polarity -)
       :snt2 (c48-8 / possible-01
                    :ARG1 (c48-5 / sync-01
                                 :ARG0 (c48-0 / she)
                                 :ARG1 (c48-10 / lip)
                                 :mod (c48-1 / only))))

# ::snt as she should be !
# ::tokens ["as", "she", "should", "be", "!"]
# ::lemmas ["as", "she", "should", "be", "!"]
(c49-0 / resemble-01
       :ARG2 (c49-2 / she
                    :ARG1-of (c49-1 / recommend-01))
       :mode expressive)

# ::snt they dropped coz she couldn't dance ha.
# ::tokens ["they", "dropped", "coz", "she", "could", "n't", "dance", "ha", "."]
# ::lemmas ["they", "drop", "coz", "she", "could", "not", "dance", "ha", "."]
(c50-5 / drop-05
       :ARG0 (c50-4 / they)
       :ARG1-of (c50-2 / cause-01
                       :ARG0 (c50-1 / possible-01
                                    :ARG1 (c50-3 / dance-01
                                                 :ARG0 (c50-0 / she))
                                    :polarity -)))
