# ::snt PATERNITY TEST NEEDED!
# ::tokens ["PATERNITY", "TEST", "NEEDED", "!"]
# ::lemmas ["PATERNITY", "test", "NEEDED", "!"]
(c2-1 / need-01
      :ARG1 (c2-2 / test-01
                  :ARG2 (c2-0 / credibility)))

# ::snt noooo you're not!! you're suppperr hot
# ::tokens ["noooo", "you", "'re", "not", "!", "!", "you", "'re", "suppperr", "hot"]
# ::lemmas ["noooo", "you", "be", "not", "!", "!", "you", "be", "suppperr", "hot"]
(c4-2 / multi-sentence
      :snt1 (c4-1 / no
                  :domain (c4-0 / you))
      :snt2 (c4-4 / hot-03
                  :ARG1 (c4-5 / you)
                  :degree (c4-3 / somewhat)))

# ::snt why the frowny faces
# ::tokens ["why", "the", "frowny", "faces"]
# ::lemmas ["why", "the", "frowny", "face"]
(c5-0 / cause-01
      :ARG0 (c5-3 / amr-unknown)
      :ARG1 (c5-1 / face
                  :ARG1-of (c5-2 / frown-02)))

# ::snt I'm funny
# ::tokens ["I", "'m", "funny"]
# ::lemmas ["i", "be", "funny"]
(c6-0 / funny-02
      :ARG1 (c6-1 / i))

# ::snt this was prob her mom
# ::tokens ["this", "was", "prob", "her", "mom"]
# ::lemmas ["this", "be", "prob", "her", "mom"]
(c7-4 / prob-00
      :ARG1 (c7-5 / this)
      :ARG2 (c7-1 / person
                  :ARG0-of (c7-3 / have-rel-role-91
                                 :ARG1 (c7-2 / she)
                                 :ARG2 (c7-0 / mom))))

# ::snt what??
# ::tokens ["what", "?", "?"]
# ::lemmas ["what", "?", "?"]
(c8-0 / amr-unknown)

# ::snt thanks but it was still rude just because she gets the d whenever she pleases doesn't mean she's a hoe
# ::tokens ["thanks", "but", "it", "was", "still", "rude", "just", "because", "she", "gets", "the", "d", "whenever", "she", "pleases", "does", "n't", "mean", "she", "'s", "a", "hoe"]
# ::lemmas ["thank", "but", "it", "be", "still", "rude", "just", "because", "she", "get", "the", "d", "whenever", "she", "please", "do", "not", "mean", "she", "be", "a", "hoe"]
(c9-9 / contrast-01
      :ARG1 (c9-12 / thank-01
                   :ARG0 (c9-11 / i)
                   :ARG1 (c9-1 / you))
      :ARG2 (c9-5 / rude-01
                  :ARG1 (c9-4 / it)
                  :mod (c9-3 / still)
                  :ARG1-of (c9-14 / cause-01
                                  :ARG0 (c9-13 / get-01
                                               :ARG0 (c9-0 / she)
                                               :ARG1 (c9-15 / string-entity
                                                            :value "D")
                                               :time (c9-8 / please-01
                                                           :ARG1 c9-0
                                                           :mod (c9-6 / any))
                                               :mod (c9-10 / just))
                                  :ARG1-of (c9-2 / mean-01
                                                 :ARG2 (c9-7 / hoe
                                                             :domain c9-0)
                                                 :polarity -))))

# ::snt that was rudeeeee
# ::tokens ["that", "was", "rudeeeee"]
# ::lemmas ["that", "be", "rudeeeee"]
(c10-3 / say-01
       :ARG0 (c10-2 / i)
       :ARG1 (c10-1 / that)
       :ARG2 (c10-0 / dear))

# ::snt yeah yeah yeah yeah
# ::tokens ["yeah", "yeah", "yeah", "yeah"]
# ::lemmas ["yeah", "yeah", "yeah", "yeah"]
(c11-0 / yeah
       :mode expressive)

# ::snt Kanye does blackface?
# ::tokens ["Kanye", "does", "blackface", "?"]
# ::lemmas ["Kanye", "do", "blackface", "?"]
(c12-4 / do-02
       :ARG0 (c12-2 / person
                    :name (c12-1 / name
                                 :op1 "Kanye"))
       :ARG1 (c12-0 / blackface)
       :polarity (c12-3 / amr-unknown))

# ::snt Yesss
# ::tokens ["Yesss"]
# ::lemmas ["yesss"]
(c13-0 / yesss)

# ::snt Kanye is a producer first. Drake is a rapper first. I hope this clear difference helps guide you.
# ::tokens ["Kanye", "is", "a", "producer", "first", ".", "Drake", "is", "a", "rapper", "first", ".", "I", "hope", "this", "clear", "difference", "helps", "guide", "you", "."]
# ::lemmas ["Kanye", "be", "a", "producer", "first", ".", "Drake", "be", "a", "rapper", "first", ".", "i", "hope", "this", "clear", "difference", "help", "guide", "you", "."]
(c14-9 / multi-sentence
       :snt1 (c14-15 / person
                     :ARG0-of (c14-10 / produce-01)
                     :domain (c14-1 / person
                                    :name (c14-13 / name
                                                  :op1 "Kanye"))
                     :ord (c14-2 / ordinal-entity
                                 :value 1))
       :snt2 (c14-0 / person
                    :name (c14-11 / name
                                  :op1 "Drake")
                    :domain (c14-5 / person
                                   :ARG0-of (c14-14 / rap-01))
                    :ord (c14-8 / ordinal-entity
                                :value 1))
       :snt3 (c14-4 / hope-01
                    :ARG0 (c14-17 / i)
                    :ARG1 (c14-16 / help-01
                                  :ARG0 (c14-18 / differ-02
                                                :ARG1-of (c14-12 / clear-06)
                                                :mod (c14-6 / this))
                                  :ARG1 (c14-7 / guide-01
                                               :ARG0 c14-18
                                               :ARG1 (c14-3 / you
                                                            :ARG2-of c14-16)))))

# ::snt It's bars, you fail arithmetic in preschool? Let me help you biracial panda.8 bars = Pop format16 bars = Mainstream Rap20-32 bars = Most Rap songs without commercial appealare you getting this? "Cry Tonight" is , excluding the refrain also repeated for the end of it.
# ::tokens ["It", "'s", "bars", ",", "you", "fail", "arithmetic", "in", "preschool", "?", "Let", "me", "help", "you", "biracial", "panda.8", "bars", "=", "Pop", "format16", "bars", "=", "Mainstream", "Rap20", "-", "32", "bars", "=", "Most", "Rap", "songs", "without", "commercial", "appealare", "you", "getting", "this", "?", "\"", "Cry", "Tonight", "\"", "is", ",", "excluding", "the", "refrain", "also", "repeated", "for", "the", "end", "of", "it", "."]
# ::lemmas ["it", "be", "bar", ",", "you", "fail", "arithmetic", "in", "preschool", "?", "let", "i", "help", "you", "biracial", "panda.8", "bar", "=", "pop", "format16", "bar", "=", "Mainstream", "Rap20", "-", "32", "bar", "=", "most", "rap", "song", "without", "commercial", "appealare", "you", "get", "this", "?", "\"", "cry", "Tonight", "\"", "be", ",", "exclude", "the", "refrain", "also", "repeat", "for", "the", "end", "of", "it", "."]
(c15-18 / multi-sentence
        :snt1 c15-18
        :snt2 (c15-2 / let-01
                     :ARG0 (c15-6 / you)
                     :ARG1 (c15-8 / help-01
                                  :ARG0 (c15-28 / i)
                                  :ARG1 (c15-27 / panda
                                                :mod (c15-17 / biracial))
                                  :ARG2 c15-6))
        :snt3 (c15-26 / equal-01
                      :ARG1 (c15-1 / bar
                                   :quant 8)
                      :ARG2 (c15-23 / format
                                    :mod (c15-19 / pop)))
        :snt4 (c15-13 / equal-01
                      :ARG1 (c15-4 / bar
                                   :quant 16)
                      :ARG2 (c15-0 / song
                                   :mod (c15-9 / mainstream)
                                   :mod (c15-25 / rap)
                                   :quant (c15-22 / most)))
        :snt5 (c15-12 / get-01
                      :ARG0 (c15-14 / you)
                      :ARG1 (c15-11 / this)
                      :polarity (c15-15 / amr-unknown))
        :snt6 (c15-7 / include-01
                     :ARG1 (c15-3 / refrain-01
                                  :ARG1-of (c15-21 / repeat-01
                                                   :mod (c15-10 / also)
                                                   :time (c15-20 / end-01
                                                                 :ARG1 (c15-16 / it))))
                     :ARG2 (c15-5 / song
                                  :name (c15-24 / name
                                                :op1 "Cry"
                                                :op2 "Tonight"))))

# ::snt They don't like the truth Nicki pen game got them shook it was the same with the thug track
# ::tokens ["They", "do", "n't", "like", "the", "truth", "Nicki", "pen", "game", "got", "them", "shook", "it", "was", "the", "same", "with", "the", "thug", "track"]
# ::lemmas ["they", "do", "not", "like", "the", "truth", "Nicki", "pen", "game", "get", "they", "shake", "it", "be", "the", "same", "with", "the", "thug", "track"]
(c16-10 / dislike-01
        :ARG0 (c16-6 / they)
        :ARG1 (c16-8 / truth
                     :topic (c16-2 / shake-01
                                   :ARG0 (c16-9 / game
                                                :name (c16-1 / name
                                                             :op1 "Pen")
                                                :poss (c16-4 / person
                                                             :name c16-1
                                                             :op1 "Nicki"
                                                             :op2 "Paterno")))
                     :ARG1 c16-6)
        :ARG1-of (c16-5 / cause-01
                        :ARG0 (c16-0 / same-01
                                     :ARG1 c16-2
                                     :ARG2 (c16-7 / track
                                                  :mod (c16-3 / thug)))))

# ::snt Damn, I guess you don't even know what a verse is because that contains bars and she wrote bars. She didn't write the whole verse dumbass
# ::tokens ["Damn", ",", "I", "guess", "you", "do", "n't", "even", "know", "what", "a", "verse", "is", "because", "that", "contains", "bars", "and", "she", "wrote", "bars", ".", "She", "did", "n't", "write", "the", "whole", "verse", "dumbass"]
# ::lemmas ["damn", ",", "i", "guess", "you", "do", "not", "even", "know", "what", "a", "verse", "be", "because", "that", "contain", "bar", "and", "she", "write", "bar", ".", "she", "do", "not", "write", "the", "whole", "verse", "dumbass"]
(c17-12 / multi-sentence
        :snt1 (c17-9 / guess-01
                     :ARG0 (c17-18 / i)
                     :ARG1 (c17-7 / know-01
                                  :ARG0 (c17-5 / you)
                                  :ARG1 (c17-6 / verse)
                                  :mod (c17-16 / even)
                                  :ARG1-of (c17-13 / cause-01
                                                   :ARG0 (c17-8 / and
                                                                :op1 (c17-10 / contain-01
                                                                             :ARG0 c17-6
                                                                             :ARG1 (c17-11 / bar))
                                                                :op2 (c17-17 / write-01
                                                                             :ARG0 (c17-0 / she)
                                                                             :ARG1 c17-11)))
                                  :polarity -)
                     :mod (c17-19 / damn
                                  :mode expressive))
        :snt2 (c17-4 / say-01
                     :ARG1 (c17-1 / write-01
                                  :ARG0 (c17-3 / she)
                                  :ARG1 (c17-2 / verse
                                               :mod (c17-15 / whole))
                                  :polarity -)
                     :ARG2 (c17-14 / dumbass)))

# ::snt At least not until everything came out
# ::tokens ["At", "least", "not", "until", "everything", "came", "out"]
# ::lemmas ["at", "least", "not", "until", "everything", "come", "out"]
(c18-0 / be-temporally-at-91
       :ARG2 (c18-4 / until
                    :op1 (c18-2 / come-out-09
                                :ARG1 (c18-1 / everything)))
       :mod (c18-3 / at-least)
       :polarity -)

# ::snt Not on Rico he didn't
# ::tokens ["Not", "on", "Rico", "he", "did", "n't"]
# ::lemmas ["not", "on", "Rico", "he", "do", "not"]
(c19-4 / do-02
       :ARG0 (c19-1 / he)
       :ARG1 (c19-3 / thing
                    :topic (c19-2 / country
                                  :name (c19-0 / name
                                               :op1 "Rico")))
       :polarity -)

# ::snt Shut your dumbass up. Ye never hid his writers
# ::tokens ["Shut", "your", "dumbass", "up", ".", "Ye", "never", "hid", "his", "writers"]
# ::lemmas ["shut", "your", "dumbass", "up", ".", "Ye", "never", "hide", "his", "writer"]
(c20-1 / multi-sentence
       :snt1 (c20-2 / shut-up-06
                    :ARG0 (c20-0 / you)
                    :ARG1 (c20-9 / dumbass
                                 :poss c20-0)
                    :mode imperative)
       :snt2 (c20-4 / hide-01
                    :ARG0 (c20-8 / you)
                    :ARG1 (c20-5 / person
                                 :ARG0-of (c20-6 / write-01
                                                 :ARG2 (c20-7 / he)))
                    :time (c20-3 / ever)
                    :polarity -))

# ::snt Difference between giving credit and a ghostwriter
# ::tokens ["Difference", "between", "giving", "credit", "and", "a", "ghostwriter"]
# ::lemmas ["difference", "between", "give", "credit", "and", "a", "ghostwriter"]
(c21-5 / differ-02
       :ARG1 (c21-4 / give-01
                    :ARG1 (c21-1 / credit-01))
       :ARG2 (c21-0 / person
                    :ARG0-of (c21-2 / write-01
                                    :mod (c21-3 / ghost))))

# ::snt Nah, she wrote the line, not the verse. I bet you don't even know what verse is.
# ::tokens ["Nah", ",", "she", "wrote", "the", "line", ",", "not", "the", "verse", ".", "I", "bet", "you", "do", "n't", "even", "know", "what", "verse", "is", "."]
# ::lemmas ["Nah", ",", "she", "write", "the", "line", ",", "not", "the", "verse", ".", "i", "bet", "you", "do", "not", "even", "know", "what", "verse", "be", "."]
(c22-2 / multi-sentence
       :snt1 (c22-9 / contrast-01
                    :ARG1 (c22-10 / write-01
                                  :ARG0 (c22-3 / she)
                                  :ARG1 (c22-6 / line))
                    :ARG2 (c22-8 / write-01
                                 :ARG0 c22-3
                                 :ARG1 (c22-4 / verse)
                                 :polarity -))
       :snt2 (c22-0 / bet-01
                    :ARG0 (c22-12 / i)
                    :ARG2 (c22-7 / know-01
                                 :ARG0 (c22-1 / you)
                                 :ARG1 (c22-11 / verse)
                                 :mod (c22-5 / even)
                                 :polarity -)))

# ::snt Hmm
# ::tokens ["Hmm"]
# ::lemmas ["hmm"]
(c23-0 / hmm)

# ::snt &amp; stay sleep
# ::tokens ["&", "amp", ";", "stay", "sleep"]
# ::lemmas ["&", "amp", ";", "stay", "sleep"]
(c24-3 / and
       :op2 (c24-0 / stay-01
                   :ARG1 (c24-2 / you)
                   :ARG3 (c24-1 / sleep-01
                                :ARG0 c24-2)
                   :mode imperative))

# ::snt Did anyone record it ?
# ::tokens ["Did", "anyone", "record", "it", "?"]
# ::lemmas ["do", "anyone", "record", "it", "?"]
(c25-0 / record-01
       :polarity (c25-3 / amr-unknown)
       :ARG0 (c25-2 / anyone)
       :ARG1 (c25-1 / it))

# ::snt that was a cool surprise.
# ::tokens ["that", "was", "a", "cool", "surprise", "."]
# ::lemmas ["that", "be", "a", "cool", "surprise", "."]
(c26-2 / surprise-01
       :ARG0 (c26-1 / that)
       :ARG1-of (c26-0 / cool-04))

# ::snt drake hides his writers, ye doesnt he gives credit.
# ::tokens ["drake", "hides", "his", "writers", ",", "ye", "does", "nt", "he", "gives", "credit", "."]
# ::lemmas ["drake", "hide", "his", "writer", ",", "ye", "do", "not", "he", "give", "credit", "."]
(c27-7 / and
       :op1 (c27-3 / hide-01
                   :ARG0 (c27-4 / person
                                :name (c27-0 / name
                                             :op1 "drake"))
                   :ARG1 (c27-1 / person
                                :ARG0-of (c27-5 / write-01
                                                :ARG1 c27-4)))
       :op2 (c27-8 / give-01
                   :ARG0 c27-4
                   :ARG1 (c27-6 / credit-01
                                :ARG0 c27-4)
                   :ARG1-of (c27-2 / request-confirmation-91
                                   :ARG2 c27-4)
                   :polarity -))

# ::snt But Pusha was knocking Drake for what Kanye does...? I'm going to bed.
# ::tokens ["But", "Pusha", "was", "knocking", "Drake", "for", "what", "Kanye", "does", "...", "?", "I", "'m", "going", "to", "bed", "."]
# ::lemmas ["but", "Pusha", "be", "knock", "Drake", "for", "what", "Kanye", "do", "...", "?", "i", "be", "go", "to", "bed", "."]
(c28-2 / multi-sentence
       :snt1 (c28-8 / contrast-01
                    :ARG2 (c28-6 / knock-01
                                 :ARG0 (c28-5 / person
                                              :name (c28-1 / name
                                                           :op1 "Pua"))
                                 :ARG1 (c28-3 / person
                                              :name (c28-4 / name
                                                           :op1 "Drake"))
                                 :ARG2 (c28-10 / thing
                                               :ARG1-of (c28-11 / do-02
                                                                :ARG0 (c28-12 / person
                                                                              :name (c28-7 / name
                                                                                           :op1 "Kanye"))))))
       :snt2 (c28-0 / bed-down-01
                    :ARG0 (c28-9 / i)))

# ::snt let's be fake
# ::tokens ["let", "'s", "be", "fake"]
# ::lemmas ["let", "us", "be", "fake"]
(c29-0 / fake-02
       :ARG0 (c29-1 / we)
       :mode imperative)

# ::snt nicki minajs job is to be an entertainer not raise your daughters for you!! &lt;
# ::tokens ["nicki", "minajs", "job", "is", "to", "be", "an", "entertainer", "not", "raise", "your", "daughters", "for", "you", "!", "!", "&", "lt", ";"]
# ::lemmas ["nicki", "minajs", "job", "be", "to", "be", "an", "entertainer", "not", "raise", "your", "daughter", "for", "you", "!", "!", "&", "lt", ";"]
(c30-9 / job
       :poss (c30-1 / minaj
                    :mod (c30-7 / person
                                :name (c30-2 / name
                                             :op1 "Nicky")))
       :domain (c30-8 / contrast-01
                      :ARG1 (c30-5 / entertain-01
                                   :ARG0 c30-1)
                      :ARG2 (c30-4 / raise-03
                                   :ARG0 c30-1
                                   :ARG1 (c30-3 / person
                                                :ARG0-of (c30-6 / have-rel-role-91
                                                                :ARG1 c30-1
                                                                :ARG2 (c30-10 / daughter)))
                                   :beneficiary (c30-0 / you)
                                   :polarity -)))

# ::snt Twitter been telling me that the day I logged in
# ::tokens ["Twitter", "been", "telling", "me", "that", "the", "day", "I", "logged", "in"]
# ::lemmas ["Twitter", "been", "tell", "i", "that", "the", "day", "i", "log", "in"]
(c31-4 / tell-01
       :ARG0 (c31-1 / publication
                    :name (c31-0 / name
                                 :op1 "Twitter"))
       :ARG1 (c31-2 / log-in-02
                    :ARG0 (c31-3 / i)
                    :time (c31-5 / day))
       :ARG2 c31-3)

# ::snt madam minaj, Nicki one and only clown baby
# ::tokens ["madam", "minaj", ",", "Nicki", "one", "and", "only", "clown", "baby"]
# ::lemmas ["madam", "minaj", ",", "Nicki", "one", "and", "only", "clown", "baby"]
(c32-7 / and
       :op1 (c32-5 / person
                   :name (c32-2 / name
                                :op1 "madam"
                                :op2 "minaj"))
       :op2 (c32-3 / person
                   :name (c32-4 / name
                                :op1 "Nicki")
                   :mod (c32-1 / baby
                               :mod (c32-6 / clown)
                               :mod (c32-0 / only))))

# ::snt marilyn monroe pretty straight tho lol compared to the others
# ::tokens ["marilyn", "monroe", "pretty", "straight", "tho", "lol", "compared", "to", "the", "others"]
# ::lemmas ["marilyn", "monroe", "pretty", "straight", "tho", "lol", "compare", "to", "the", "other"]
(c33-3 / straight-04
       :ARG1 (c33-5 / person
                    :name (c33-1 / name
                                 :op1 "Monroe"))
       :degree (c33-2 / pretty)
       :ARG2-of (c33-4 / laugh-01
                       :ARG0 (c33-7 / i)
                       :manner (c33-9 / loud)
                       :mode expressive)
       :ARG1-of (c33-6 / compare-01
                       :ARG2 (c33-8 / person
                                    :mod (c33-0 / other))))
