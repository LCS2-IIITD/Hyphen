# ::snt Educate your staff on LGBT issues before you go talking about this stuff. You are a national radio station and you know your influences. Use it responsibly.
# ::tokens ["Educate", "your", "staff", "on", "LGBT", "issues", "before", "you", "go", "talking", "about", "this", "stuff", ".", "You", "are", "a", "national", "radio", "station", "and", "you", "know", "your", "influences", ".", "Use", "it", "responsibly", "."]
# ::lemmas ["educate", "your", "staff", "on", "LGBT", "issue", "before", "you", "go", "talk", "about", "this", "stuff", ".", "you", "be", "a", "national", "radio", "station", "and", "you", "know", "your", "influence", ".", "use", "it", "responsibly", "."]
(c1-16 / multi-sentence
       :snt1 (c1-21 / educate-01
                    :ARG0 (c1-7 / you)
                    :ARG1 (c1-22 / person
                                 :ARG2-of (c1-0 / staff-01
                                                :ARG0 c1-7))
                    :ARG2 (c1-23 / issue-02
                                 :ARG0 (c1-11 / and
                                              :op1 (c1-1 / lesbian)
                                              :op2 (c1-12 / gay-01)))
                    :time (c1-15 / before
                                 :op1 (c1-2 / go-05
                                            :ARG0 c1-7
                                            :ARG1 (c1-10 / talk-01
                                                         :ARG0 c1-7
                                                         :ARG1 (c1-6 / stuff
                                                                     :mod (c1-17 / this))))))
       :snt2 c1-11
       :op1 (c1-4 / station
                  :mod (c1-20 / radio)
                  :mod (c1-19 / nation)
                  :domain (c1-13 / you))
       :op2 (c1-9 / know-01
                  :ARG0 c1-13
                  :ARG1 (c1-8 / influence-01
                              :ARG0 c1-13))
       :snt3 (c1-18 / use-01
                    :ARG0 (c1-5 / you)
                    :ARG1 (c1-14 / it)
                    :ARG1-of (c1-3 / responsible-02)
                    :mode imperative))

# ::snt Like saying being male was inherently better and that Caitlyns past accomplishments werent her own? Shame on yall. And dont even try to say that this is an account if being too sensitive when transpeople die every day bc of hateful shit like this.
# ::tokens ["Like", "saying", "being", "male", "was", "inherently", "better", "and", "that", "Caitlyns", "past", "accomplishments", "were", "nt", "her", "own", "?", "Shame", "on", "y", "all", ".", "And", "do", "nt", "even", "try", "to", "say", "that", "this", "is", "an", "account", "if", "being", "too", "sensitive", "when", "transpeople", "die", "every", "day", "bc", "of", "hateful", "shit", "like", "this", "."]
# ::lemmas ["like", "say", "be", "male", "be", "inherently", "well", "and", "that", "Caitlyns", "past", "accomplishment", "be", "not", "her", "own", "?", "shame", "on", "you", "all", ".", "and", "do", "nt", "even", "try", "to", "say", "that", "this", "be", "an", "account", "if", "be", "too", "sensitive", "when", "transpeople", "die", "every", "day", "bc", "of", "hateful", "shit", "like", "this", "."]
(c2-20 / multi-sentence
       :snt1 (c2-31 / exemplify-01
                    :ARG0 (c2-14 / and
                                 :op1 (c2-0 / say-01
                                            :ARG1 (c2-10 / have-degree-91
                                                         :ARG1 (c2-11 / male)
                                                         :ARG2 (c2-15 / good-02
                                                                      :ARG1 c2-11
                                                                      :mod (c2-35 / inherent))
                                                         :ARG3 (c2-26 / more)))
                                 :op2 (c2-7 / say-01
                                            :ARG1 (c2-13 / accomplish-01
                                                         :ARG0 (c2-32 / person
                                                                      :name (c2-27 / name
                                                                                   :op1 "Caitly"))
                                                         :time (c2-21 / past)
                                                         :poss c2-32)))
                    :polarity (c2-12 / amr-unknown))
       :snt2 (c2-6 / shame-01
                   :ARG1 (c2-8 / you
                               :mod (c2-37 / all)))
       :snt3 (c2-33 / and
                    :op2 (c2-16 / try-01
                                :ARG0 c2-8
                                :ARG1 (c2-28 / say-01
                                             :ARG0 c2-8
                                             :ARG1 (c2-24 / account-01
                                                          :ARG1 (c2-25 / this)))
                                :condition (c2-1 / sensitive-03
                                                 :ARG0 c2-8
                                                 :ARG1 c2-24
                                                 :ARG2-of (c2-34 / have-degree-91
                                                                 :ARG1 c2-8
                                                                 :ARG3 (c2-36 / too))
                                                 :time (c2-29 / die-01
                                                              :ARG1 (c2-3 / person
                                                                          :mod (c2-2 / transgender))
                                                              :frequency (c2-30 / rate-entity-91
                                                                                :ARG3 (c2-17 / temporal-quantity
                                                                                             :unit (c2-23 / day)
                                                                                             :quant 1))
                                                              :ARG1-of (c2-22 / cause-01
                                                                              :ARG0 (c2-19 / shit
                                                                                           :ARG0-of (c2-9 / hate-01)
                                                                                           :ARG1-of (c2-5 / resemble-01
                                                                                                          :ARG2 (c2-4 / this))))))
                                :mod (c2-18 / even)
                                :polarity -
                                :mode imperative)))

# ::snt why did your showrunners think it was okay to say that Caitlyn had to turn back into Bruce bc Bruce was the athlete? Like Caitlyn Jenners own accomplishments are separate from Bruces, when they are the same person and that persons name is Caitlyn? Thats so disgusting of you.
# ::tokens ["why", "did", "your", "showrunners", "think", "it", "was", "okay", "to", "say", "that", "Caitlyn", "had", "to", "turn", "back", "into", "Bruce", "bc", "Bruce", "was", "the", "athlete", "?", "Like", "Caitlyn", "Jenners", "own", "accomplishments", "are", "separate", "from", "Bruces", ",", "when", "they", "are", "the", "same", "person", "and", "that", "persons", "name", "is", "Caitlyn", "?", "That", "s", "so", "disgusting", "of", "you", "."]
# ::lemmas ["why", "do", "your", "showrunner", "think", "it", "be", "okay", "to", "say", "that", "Caitlyn", "have", "to", "turn", "back", "into", "Bruce", "bc", "Bruce", "be", "the", "athlete", "?", "like", "Caitlyn", "Jenners", "own", "accomplishment", "be", "separate", "from", "Bruces", ",", "when", "they", "be", "the", "same", "person", "and", "that", "person", "name", "be", "Caitlyn", "?", "that", "s", "so", "disgusting", "of", "you", "."]
(c3-17 / multi-sentence
       :snt1 (c3-11 / think-01
                    :ARG0 (c3-27 / person
                                 :ARG0-of (c3-25 / run-01
                                                 :ARG1 (c3-0 / show))
                                 :poss (c3-7 / you))
                    :ARG1 (c3-5 / okay-04
                                :ARG1 (c3-6 / say-01
                                            :ARG0 c3-27
                                            :ARG1 (c3-15 / obligate-01
                                                         :ARG1 (c3-18 / person
                                                                      :name (c3-23 / name
                                                                                   :op1 "Caitlyn"
                                                                                   :op2 "Jenners"))
                                                         :ARG2 (c3-22 / turn-02
                                                                      :ARG0 c3-18
                                                                      :ARG1 c3-18
                                                                      :direction (c3-16 / back)
                                                                      :ARG1-of (c3-20 / cause-01
                                                                                      :ARG0 (c3-10 / athlete
                                                                                                   :domain c3-18))))))
                    :polarity (c3-9 / amr-unknown)
                    :ARG1-of (c3-14 / cause-01
                                    :ARG0 (c3-8 / amr-unknown)))
       :snt2 (c3-4 / separate-01
                   :ARG1 (c3-32 / accomplish-01
                                :ARG0 (c3-3 / person
                                            :name (c3-19 / name
                                                         :op1 "Caitlyn"
                                                         :op2 "Jenners")))
                   :ARG2 (c3-2 / person
                               :name (c3-28 / name
                                            :op1 "Bruces"))
                   :condition (c3-29 / and
                                     :op1 (c3-24 / same-01
                                                 :ARG1 c3-3)
                                     :op2 (c3-21 / name-01
                                                 :ARG1 (c3-12 / person
                                                              :name (c3-30 / name
                                                                           :op1 "Caitlyn"
                                                                           :op2 "Jenners"))
                                                 :ARG2 c3-2)))
       :snt3 (c3-26 / disgust-01
                    :ARG0 (c3-31 / that)
                    :ARG1 (c3-13 / you)
                    :degree (c3-1 / so)))

# ::snt Horrible
# ::tokens ["Horrible"]
# ::lemmas ["horrible"]
(c4-0 / horrible)

# ::snt Well that will free up space on my DVR
# ::tokens ["Well", "that", "will", "free", "up", "space", "on", "my", "DVR"]
# ::lemmas ["well", "that", "will", "free", "up", "space", "on", "my", "DVR"]
(c5-0 / free-up-03
      :ARG0 (c5-4 / that)
      :ARG1 (c5-2 / space)
      :location (c5-6 / thing
                      :name (c5-1 / name
                                  :op1 "DVR")
                      :poss (c5-5 / i))
      :mod (c5-3 / well))

# ::snt Ugh!
# ::tokens ["Ugh", "!"]
# ::lemmas ["Ugh", "!"]
(c6-0 / ugh
      :mode expressive)

# ::snt I wont watch if any of that family is on!!
# ::tokens ["I", "wo", "nt", "watch", "if", "any", "of", "that", "family", "is", "on", "!", "!"]
# ::lemmas ["i", "will", "not", "watch", "if", "any", "of", "that", "family", "be", "on", "!", "!"]
(c7-2 / watch-01
      :ARG0 (c7-4 / i)
      :condition (c7-1 / on-01
                       :ARG1 (c7-0 / family
                                   :mod (c7-5 / any)
                                   :mod (c7-3 / that)))
      :polarity -)

# ::snt bet he'd win if a foot race was involved
# ::tokens ["bet", "he", "'d", "win", "if", "a", "foot", "race", "was", "involved"]
# ::lemmas ["bet", "he", "would", "win", "if", "a", "foot", "race", "be", "involve"]
(c8-1 / bet-01
      :ARG0 (c8-6 / i)
      :ARG2 (c8-5 / win-01
                  :ARG0 (c8-4 / he)
                  :condition (c8-2 / involve-01
                                   :ARG1 (c8-3 / race-02
                                               :manner (c8-0 / foot)))))

# ::snt are you kidding with that photo shop?
# ::tokens ["are", "you", "kidding", "with", "that", "photo", "shop", "?"]
# ::lemmas ["be", "you", "kid", "with", "that", "photo", "shop", "?"]
(c9-3 / kid-01
      :polarity (c9-5 / amr-unknown)
      :ARG0 (c9-0 / you)
      :ARG2 (c9-1 / shop
                  :mod (c9-2 / photo)
                  :mod (c9-4 / that)))

# ::snt Oh
# ::tokens ["Oh"]
# ::lemmas ["oh"]
(c10-0 / oh
       :mode expressive)

# ::snt Yuck nooooooo
# ::tokens ["Yuck", "nooooooo"]
# ::lemmas ["Yuck", "nooooooo"]
(c11-0 / yuck
       :mode expressive)

# ::snt Oh dear God. Noooooooooo I will not watch
# ::tokens ["Oh", "dear", "God", ".", "Noooooooooo", "I", "will", "not", "watch"]
# ::lemmas ["oh", "dear", "God", ".", "Noooooooooo", "i", "will", "not", "watch"]
(c12-2 / multi-sentence
       :snt1 (c12-4 / person
                    :name (c12-1 / name
                                 :op1 "God")
                    :mod (c12-7 / dear)
                    :mod (c12-0 / oh))
       :snt2 (c12-5 / watch-01
                    :ARG0 (c12-6 / i)
                    :mod (c12-3 / no)
                    :polarity -))

# ::snt She'll be '6" in heels.
# ::tokens ["She", "'ll", "be", "'", "6", "\"", "in", "heels", "."]
# ::lemmas ["she", "'ll", "be", "'", "6", "\"", "in", "heel", "."]
(c14-2 / age-01
       :ARG1 (c14-1 / she)
       :ARG2 (c14-5 / tall
                    :quant (c14-0 / sum-of
                                  :op2 (c14-6 / distance-quantity
                                              :unit (c14-4 / inch)
                                              :quant 1)
                                  :op1 6))
       :manner (c14-3 / heel))

# ::snt Can you say explotation .
# ::tokens ["Can", "you", "say", "explotation", "."]
# ::lemmas ["can", "you", "say", "explotation", "."]
(c15-3 / possible-01
       :ARG1 (c15-1 / say-01
                    :ARG0 (c15-0 / you)
                    :ARG1 (c15-2 / explicate-01))
       :polarity (c15-4 / amr-unknown))

# ::snt Omg please dont
# ::tokens ["Omg", "please", "do", "nt"]
# ::lemmas ["Omg", "please", "do", "not"]
(c16-0 / do-02
       :mod (c16-1 / oh-my-god
                   :mode expressive)
       :polarity -
       :polite +)

# ::snt At first glance, I thought that was the .
# ::tokens ["At", "first", "glance", ",", "I", "thought", "that", "was", "the", "."]
# ::lemmas ["at", "first", "glance", ",", "i", "think", "that", "be", "the", "."]
(c17-1 / think-01
       :ARG0 (c17-2 / i)
       :ARG1 (c17-3 / that)
       :time (c17-4 / glance-01
                    :ord (c17-0 / ordinal-entity
                                :value 1)))

# ::snt Ug
# ::tokens ["Ug"]
# ::lemmas ["ug"]
(c18-0 / ug)

# ::snt Ugh
# ::tokens ["Ugh"]
# ::lemmas ["ugh"]
(c19-0 / ugh
       :mode expressive)

# ::snt Ugh. Paso doble
# ::tokens ["Ugh", ".", "Paso", "doble"]
# ::lemmas ["Ugh", ".", "Paso", "doble"]
(c20-1 / multi-sentence
       :snt1 (c20-4 / ugh
                    :mode expressive)
       :snt2 (c20-3 / doble
                    :poss (c20-2 / province
                                 :name (c20-0 / name
                                              :op1 "Pauw"))))

# ::snt and a shark ?
# ::tokens ["and", "a", "shark", "?"]
# ::lemmas ["and", "a", "shark", "?"]
(c21-2 / and
       :op2 (c21-0 / sharks
                   :polarity (c21-1 / amr-unknown)))

# ::snt Well way to set a precedent for killers coming on your show.
# ::tokens ["Well", "way", "to", "set", "a", "precedent", "for", "killers", "coming", "on", "your", "show", "."]
# ::lemmas ["well", "way", "to", "set", "a", "precedent", "for", "killer", "come", "on", "your", "show", "."]
(c22-3 / set-02
       :ARG1 (c22-5 / precedent)
       :ARG2 (c22-2 / person
                    :ARG0-of (c22-4 / kill-01)
                    :ARG1-of (c22-6 / come-01
                                    :ARG4 (c22-0 / show-04
                                                 :ARG0 (c22-1 / you))))
       :mod (c22-7 / well))

# ::snt Please no
# ::tokens ["Please", "no"]
# ::lemmas ["please", "no"]
(c23-0 / no
       :polite +)

# ::snt Apparently its all athletes, so Id be shocked if not
# ::tokens ["Apparently", "its", "all", "athletes", ",", "so", "I", "d", "be", "shocked", "if", "not"]
# ::lemmas ["apparently", "its", "all", "athlete", ",", "so", "i", "d", "be", "shock", "if", "not"]
(c24-2 / athlete
       :domain (c24-7 / it)
       :mod (c24-6 / all)
       :ARG1-of (c24-5 / appear-02)
       :ARG0-of (c24-4 / cause-01
                       :ARG1 (c24-0 / shock-01
                                    :ARG0 c24-7
                                    :ARG1 (c24-1 / i)
                                    :condition (c24-3 / have-polarity-91
                                                      :ARG2 -))))

# ::snt Will Bruce still get to be in Chips ?
# ::tokens ["Will", "Bruce", "still", "get", "to", "be", "in", "Chips", "?"]
# ::lemmas ["Will", "Bruce", "still", "get", "to", "be", "in", "Chips", "?"]
(c25-7 / get-22
       :ARG0 (c25-4 / person
                    :name (c25-1 / name
                                 :op1 "Bruce"))
       :ARG1 (c25-0 / be-located-at-91
                    :ARG1 c25-4
                    :ARG2 (c25-5 / company
                                 :name (c25-3 / name
                                              :op1 "Chips")))
       :polarity (c25-6 / amr-unknown)
       :mod (c25-2 / still))

# ::snt One big ugly mixed up goofball
# ::tokens ["One", "big", "ugly", "mixed", "up", "goofball"]
# ::lemmas ["One", "big", "ugly", "mix", "up", "goofball"]
(c26-0 / goofball
       :mod (c26-2 / ugly)
       :mod (c26-1 / big)
       :ARG1-of (c26-3 / mix-up-03)
       :quant 1)

# ::snt can we all say puke!
# ::tokens ["can", "we", "all", "say", "puke", "!"]
# ::lemmas ["can", "we", "all", "say", "puke", "!"]
(c27-2 / possible-01
       :ARG1 (c27-1 / say-01
                    :ARG0 (c27-3 / we
                                 :mod (c27-5 / all))
                    :ARG1 (c27-0 / puke-01))
       :polarity (c27-4 / amr-unknown))

# ::snt Who will be the dance partner dealing with the lifts, or being lifted?
# ::tokens ["Who", "will", "be", "the", "dance", "partner", "dealing", "with", "the", "lifts", ",", "or", "being", "lifted", "?"]
# ::lemmas ["who", "will", "be", "the", "dance", "partner", "deal", "with", "the", "lift", ",", "or", "be", "lift", "?"]
(c28-1 / partner
       :mod (c28-5 / dance-01)
       :domain (c28-4 / amr-unknown)
       :ARG0-of (c28-3 / deal-01
                       :ARG1 (c28-0 / or
                                    :op1 (c28-2 / lift-01
                                                :op2-of c28-0))))

# ::snt Yikes
# ::tokens ["Yikes"]
# ::lemmas ["yike"]
(c29-0 / yikes)

# ::snt Ill not watch ...
# ::tokens ["Ill", "not", "watch", "..."]
# ::lemmas ["Ill", "not", "watch", "..."]
(c30-0 / watch-01
       :ARG0 (c30-1 / i)
       :polarity -)

# ::snt Yuck
# ::tokens ["Yuck"]
# ::lemmas ["Yuck"]
(c31-0 / yuck
       :mode expressive)

# ::snt Any thoughts Miss Piggy?
# ::tokens ["Any", "thoughts", "Miss", "Piggy", "?"]
# ::lemmas ["any", "thought", "Miss", "Piggy", "?"]
(c32-1 / say-01
       :ARG1 (c32-3 / think-01
                    :ARG0 (c32-2 / person
                                 :name (c32-0 / name
                                              :op1 "Miss"
                                              :op2 "Piggy"))
                    :ARG1 (c32-5 / amr-unknown)
                    :mod (c32-4 / any))
       :ARG2 c32-2)

# ::snt Just we need. Her doing cartwheels.
# ::tokens ["Just", "we", "need", ".", "Her", "doing", "cartwheels", "."]
# ::lemmas ["just", "we", "need", ".", "her", "do", "cartwheel", "."]
(c33-1 / multi-sentence
       :snt1 (c33-0 / need-01
                    :ARG0 (c33-3 / we)
                    :mod (c33-5 / just))
       :snt2 (c33-6 / do-02
                    :ARG0 (c33-2 / she)
                    :ARG1 (c33-4 / cartwheel)))

# ::snt Their ratings must really, really suck.
# ::tokens ["Their", "ratings", "must", "really", ",", "really", "suck", "."]
# ::lemmas ["their", "rating", "must", "really", ",", "really", "suck", "."]
(c34-2 / infer-01
       :ARG1 (c34-0 / suck-03
                    :ARG0 (c34-1 / rate-01
                                 :ARG1 (c34-3 / they))
                    :degree (c34-4 / really)))

# ::snt Gotta dance to Dude Looks Like A Lady
# ::tokens ["Got", "ta", "dance", "to", "Dude", "Looks", "Like", "A", "Lady"]
# ::lemmas ["got", "to", "dance", "to", "Dude", "Looks", "like", "a", "lady"]
(c35-0 / obligate-01
       :ARG2 (c35-4 / dance-01
                    :ARG0 (c35-3 / i)
                    :ARG2 (c35-2 / person
                                 :name (c35-1 / name
                                              :op1 "Dude"
                                              :op2 "Looks"
                                              :op3 "Like"
                                              :op4 "A"
                                              :op5 "Lady"))))

# ::snt Gag
# ::tokens ["Gag"]
# ::lemmas ["gag"]
(c36-0 / gag
       :mode expressive)

# ::snt Horrible mistake. Shes a repugnant human being.
# ::tokens ["Horrible", "mistake", ".", "She", "s", "a", "repugnant", "human", "being", "."]
# ::lemmas ["horrible", "mistake", ".", "she", "s", "a", "repugnant", "human", "being", "."]
(c37-1 / multi-sentence
       :snt1 (c37-4 / mistake-02
                    :mod (c37-5 / horrible))
       :snt2 (c37-0 / being
                    :mod (c37-6 / human)
                    :domain (c37-3 / he)
                    :mod (c37-2 / repugnant)))

# ::snt And the winner gets a years supply of Wheaties.
# ::tokens ["And", "the", "winner", "gets", "a", "years", "supply", "of", "Wheaties", "."]
# ::lemmas ["and", "the", "winner", "get", "a", "years", "supply", "of", "Wheaties", "."]
(c38-8 / and
       :op2 (c38-9 / get-01
                   :ARG0 (c38-4 / person
                                :ARG0-of (c38-5 / win-01))
                   :ARG1 (c38-3 / supply-01
                                :ARG1 (c38-6 / cereal
                                             :name (c38-1 / name
                                                          :op1 "Wheaties"))
                                :ARG2 c38-4
                                :duration (c38-2 / multiple
                                                 :op1 (c38-7 / temporal-quantity
                                                             :unit (c38-0 / year)
                                                             :quant 1)))))

# ::snt Yeah. Okay.
# ::tokens ["Yeah", ".", "Okay", "."]
# ::lemmas ["yeah", ".", "okay", "."]
(c39-0 / okay-01)

# ::snt gross...who's she going to dance with, Chelsea Manning?
# ::tokens ["gross", "...", "who", "'s", "she", "going", "to", "dance", "with", ",", "Chelsea", "Manning", "?"]
# ::lemmas ["gross", "...", "who", "be", "she", "go", "to", "dance", "with", ",", "Chelsea", "Manning", "?"]
(c40-2 / say-01
       :ARG1 (c40-6 / dance-01
                    :ARG0 (c40-0 / she)
                    :accompanier (c40-4 / amr-unknown
                                        :domain (c40-3 / person
                                                       :name (c40-1 / name
                                                                    :op1 "Chelsea"
                                                                    :op2 "Manning")))
                    :mod (c40-5 / gross))
       :ARG2 c40-3)

# ::snt Did Jenner ever put his money where his mouth is and have his package removed?
# ::tokens ["Did", "Jenner", "ever", "put", "his", "money", "where", "his", "mouth", "is", "and", "have", "his", "package", "removed", "?"]
# ::lemmas ["do", "Jenner", "ever", "put", "his", "money", "where", "his", "mouth", "be", "and", "have", "his", "package", "remove", "?"]
(c42-9 / and
       :op1 (c42-6 / put-01
                   :ARG0 (c42-2 / person
                                :name (c42-1 / name
                                             :op1 "Jenner")
                                :part (c42-0 / mouth))
                   :ARG1 (c42-5 / money
                                :poss c42-2)
                   :ARG2 (c42-7 / location
                                :location-of c42-0)
                   :time (c42-4 / ever))
       :op2 (c42-3 / remove-01
                   :ARG1 (c42-10 / package
                                 :poss c42-2))
       :polarity (c42-8 / amr-unknown))

# ::snt Shoot me now.
# ::tokens ["Shoot", "me", "now", "."]
# ::lemmas ["shoot", "i", "now", "."]
(c44-3 / shoot-02
       :ARG0 (c44-0 / you)
       :ARG1 (c44-2 / i)
       :time (c44-1 / now)
       :mode imperative)

# ::snt Please no....
# ::tokens ["Please", "no", "...."]
# ::lemmas ["please", "no", "...."]
(c45-0 / no
       :polite +)

# ::snt WHOOPEE ???
# ::tokens ["WHOOPEE", "?", "?", "?"]
# ::lemmas ["whoopee", "?", "?", "?"]
(c46-0 / whoopee
       :mode expressive)

# ::snt NOOOOOOOOOOOOOOOOOOOOOOOOOOOOO!
# ::tokens ["NOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "!"]
# ::lemmas ["NOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "!"]
(c47-0 / no)
