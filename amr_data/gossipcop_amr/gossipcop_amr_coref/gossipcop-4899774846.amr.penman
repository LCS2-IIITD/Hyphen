# ::snt Who is still that interested in Justin Bieber???
# ::tokens ["Who", "is", "still", "that", "interested", "in", "Justin", "Bieber", "?", "?", "?"]
# ::lemmas ["who", "be", "still", "that", "interested", "in", "Justin", "Bieber", "?", "?", "?"]
(c1-4 / interest-01
      :ARG1 (c1-5 / amr-unknown)
      :ARG2 (c1-2 / person
                  :name (c1-0 / name
                              :op1 "Justin"
                              :op2 "Bieber"))
      :mod (c1-1 / still)
      :degree (c1-3 / that))

# ::snt My god
# ::tokens ["My", "god"]
# ::lemmas ["my", "god"]
(c2-1 / person
      :name (c2-0 / name
                  :op1 "God")
      :poss (c2-2 / i))

# ::snt she was
# ::tokens ["she", "was"]
# ::lemmas ["she", "be"]
(c3-0 / she)

# ::snt This time nothing happened... Need se e improvements. Remember kadarshian...
# ::tokens ["This", "time", "nothing", "happened", "...", "Need", "se", "e", "improvements", ".", "Remember", "kadarshian", "..."]
# ::lemmas ["this", "time", "nothing", "happen", "...", "need", "se", "e", "improvement", ".", "remember", "kadarshian", "..."]
(c4-2 / multi-sentence
      :snt1 (c4-5 / event
                  :time (c4-9 / time
                              :mod (c4-11 / this))
                  :polarity -)
      :snt2 (c4-1 / need-01
                  :ARG1 (c4-10 / improve-01
                               :ARG1 (c4-7 / product
                                           :name (c4-6 / name
                                                       :op1 "SEMA"))))
      :snt3 (c4-4 / remember-01
                  :ARG0 (c4-0 / you)
                  :ARG1 (c4-3 / person
                              :name (c4-8 / name
                                          :op1 "kadarshian"))
                  :mode imperative))

# ::snt The y got security.. Lost some stuff at most
# ::tokens ["The", "y", "got", "security", "..", "Lost", "some", "stuff", "at", "most"]
# ::lemmas ["the", "y", "get", "security", "..", "lose", "some", "stuff", "at", "most"]
(c5-2 / multi-sentence
      :snt1 (c5-6 / get-01
                  :ARG0 (c5-1 / you)
                  :ARG1 (c5-3 / security))
      :snt2 (c5-4 / lose-02
                  :ARG0 (c5-7 / you)
                  :ARG1 (c5-0 / stuff
                              :quant (c5-8 / some))
                  :mod (c5-5 / at-most)))

# ::snt Yeah soo sad
# ::tokens ["Yeah", "soo", "sad"]
# ::lemmas ["yeah", "soo", "sad"]
(c6-2 / sad-02
      :degree (c6-0 / so)
      :mod (c6-1 / yeah
                 :mode expressive))

# ::snt I would like to know how she found out where he lives ....
# ::tokens ["I", "would", "like", "to", "know", "how", "she", "found", "out", "where", "he", "lives", "...."]
# ::lemmas ["i", "would", "like", "to", "know", "how", "she", "find", "out", "where", "he", "live", "...."]
(c7-3 / like-02
      :ARG0 (c7-5 / i)
      :ARG1 (c7-4 / know-01
                  :ARG0 c7-5
                  :ARG1 (c7-6 / thing
                              :manner-of (c7-0 / find-out-03
                                               :ARG0 (c7-1 / she)
                                               :ARG1 c7-6
                                               :location-of (c7-7 / live-01
                                                                  :ARG0 (c7-2 / he))))))

# ::snt poor fan..
# ::tokens ["poor", "fan", ".."]
# ::lemmas ["poor", "fan", ".."]
(c8-0 / fan
      :mod (c8-1 / poor))

# ::snt That isn't all Jordan dose is it Jordan should we talk about smule
# ::tokens ["That", "is", "n't", "all", "Jordan", "dose", "is", "it", "Jordan", "should", "we", "talk", "about", "smule"]
# ::lemmas ["that", "be", "not", "all", "Jordan", "dose", "be", "it", "Jordan", "should", "we", "talk", "about", "smule"]
(c9-5 / contrast-01
      :ARG1 (c9-8 / dose-01
                  :ARG1 (c9-9 / country
                              :name (c9-0 / name
                                          :op1 "Jordan"))
                  :ARG2 (c9-7 / that)
                  :mod (c9-2 / all)
                  :polarity -)
      :ARG2 (c9-3 / recommend-01
                  :ARG1 (c9-4 / talk-01
                              :ARG0 (c9-6 / we)
                              :ARG1 (c9-1 / smule))
                  :ARG2 c9-9))

# ::snt Justin I'm glad they got her you never know how far she could of went
# ::tokens ["Justin", "I", "'m", "glad", "they", "got", "her", "you", "never", "know", "how", "far", "she", "could", "of", "went"]
# ::lemmas ["Justin", "i", "be", "glad", "they", "get", "she", "you", "never", "know", "how", "far", "she", "could", "of", "go"]
(c10-4 / say-01
       :ARG0 (c10-12 / i)
       :ARG1 (c10-11 / glad-02
                     :ARG0 (c10-9 / get-01
                                  :ARG0 (c10-10 / they)
                                  :ARG1 (c10-0 / she))
                     :ARG1 c10-12)
       :ARG2 (c10-6 / person
                    :name (c10-2 / name
                                 :op1 "Justin"))
       :ARG1-of (c10-8 / cause-01
                       :ARG0 (c10-7 / know-01
                                    :ARG0 c10-12
                                    :ARG1 (c10-14 / thing
                                                  :extent-of (c10-1 / far
                                                                    :ARG4-of (c10-13 / go-01
                                                                                     :ARG1 c10-0
                                                                                     :ARG1-of (c10-3 / possible-01))))
                                    :time (c10-5 / ever)
                                    :polarity -)))

# ::snt it was not Justin's house anymore. I hate Jordan tbh, but I honestly think he said he invaded for views and attention
# ::tokens ["it", "was", "not", "Justin", "'s", "house", "anymore", ".", "I", "hate", "Jordan", "tbh", ",", "but", "I", "honestly", "think", "he", "said", "he", "invaded", "for", "views", "and", "attention"]
# ::lemmas ["it", "be", "not", "Justin", "'s", "house", "anymore", ".", "i", "hate", "Jordan", "tbh", ",", "but", "i", "honestly", "think", "he", "say", "he", "invade", "for", "view", "and", "attention"]
(c11-11 / multi-sentence
        :snt1 (c11-4 / house
                     :poss (c11-16 / person
                                   :name (c11-15 / name
                                                 :op1 "Justin"))
                     :domain (c11-18 / it)
                     :time (c11-8 / anymore)
                     :polarity -)
        :snt2 (c11-13 / contrast-01
                      :ARG1 (c11-17 / hate-01
                                    :ARG0 (c11-1 / i)
                                    :ARG1 (c11-10 / country
                                                  :name (c11-12 / name
                                                                :op1 "Jordan"))
                                    :ARG1-of (c11-3 / honest-01))
                      :ARG2 (c11-7 / think-01
                                   :ARG0 c11-1
                                   :ARG1 (c11-0 / say-01
                                                :ARG0 (c11-14 / he)
                                                :ARG1 (c11-9 / invade-01
                                                             :ARG0 c11-14
                                                             :purpose (c11-6 / and
                                                                             :op1 (c11-2 / view-02)
                                                                             :op2 (c11-5 / attend-02)))))))

# ::snt Mhm but unfortunately someone's already tried and failed which angers me, Jordans actions annoy me
# ::tokens ["Mhm", "but", "unfortunately", "someone", "'s", "already", "tried", "and", "failed", "which", "angers", "me", ",", "Jordans", "actions", "annoy", "me"]
# ::lemmas ["mhm", "but", "unfortunately", "someone", "be", "already", "try", "and", "fail", "which", "anger", "i", ",", "Jordans", "action", "annoy", "i"]
(c12-6 / contrast-01
       :ARG1 (c12-3 / and
                    :op1 (c12-9 / try-01
                                :ARG0 (c12-2 / someone))
                    :op2 (c12-0 / fail-01
                                :ARG1 c12-2)
                    :ARG2-of (c12-5 / fortunate-01
                                    :polarity -)
                    :ARG0-of (c12-8 / anger-01
                                    :ARG1 (c12-10 / i)))
       :ARG2 (c12-7 / annoy-01
                    :ARG0 (c12-11 / act-02
                                  :ARG0 (c12-12 / company
                                                :name (c12-1 / name
                                                             :op1 "Jordans")))
                    :ARG1 c12-10)
       :mod (c12-4 / hmm
                   :mode expressive))

# ::snt right!! him getting away w trespassing is setting an example for others that they wont get arrested if they did something like that too!
# ::tokens ["right", "!", "!", "him", "getting", "away", "w", "trespassing", "is", "setting", "an", "example", "for", "others", "that", "they", "wo", "nt", "get", "arrested", "if", "they", "did", "something", "like", "that", "too", "!"]
# ::lemmas ["right", "!", "!", "he", "get", "away", "w", "trespassing", "be", "set", "an", "example", "for", "other", "that", "they", "will", "not", "get", "arrest", "if", "they", "do", "something", "like", "that", "too", "!"]
(c13-2 / multi-sentence
       :snt1 (c13-4 / right-06
                    :mode expressive)
       :snt2 (c13-3 / set-02
                    :ARG0 (c13-9 / get-away-08
                                 :ARG0 (c13-7 / he)
                                 :manner (c13-8 / trespass-01
                                                :ARG0 c13-7))
                    :ARG1 (c13-6 / example
                                 :beneficiary (c13-0 / other)
                                 :topic (c13-5 / arrest-01
                                               :ARG1 c13-0
                                               :condition (c13-10 / do-02
                                                                  :ARG0 c13-0
                                                                  :ARG1 (c13-1 / something
                                                                               :ARG1-of (c13-11 / resemble-01
                                                                                                :ARG2 c13-8))
                                                                  :mod (c13-12 / too))
                                               :polarity -))))

# ::snt Because he knows he can
# ::tokens ["Because", "he", "knows", "he", "can"]
# ::lemmas ["because", "he", "know", "he", "can"]
(c14-0 / cause-01
       :ARG0 (c14-2 / know-01
                    :ARG0 (c14-1 / he)
                    :ARG1 (c14-3 / possible-01)))

# ::snt Doesn't matter, shouldn't of been on the property either way
# ::tokens ["Does", "n't", "matter", ",", "should", "n't", "of", "been", "on", "the", "property", "either", "way"]
# ::lemmas ["do", "not", "matter", ",", "should", "not", "of", "be", "on", "the", "property", "either", "way"]
(c15-6 / and
       :op1 (c15-1 / matter-01
                   :ARG1 (c15-3 / event)
                   :polarity -)
       :op2 (c15-2 / recommend-01
                   :ARG1 (c15-0 / be-located-at-91
                                :ARG2 (c15-4 / property))
                   :mod (c15-5 / way
                               :mod (c15-7 / either))
                   :polarity -))

# ::snt Thursday, Oct will drop Her New MV
# ::tokens ["Thursday", ",", "Oct", "will", "drop", "Her", "New", "MV"]
# ::lemmas ["Thursday", ",", "Oct", "will", "drop", "her", "New", "MV"]
(c16-6 / drop-05
       :ARG1 (c16-3 / product
                    :name (c16-0 / name
                                 :op1 "MV")
                    :poss (c16-1 / she)
                    :ARG1-of (c16-2 / new-01))
       :time (c16-4 / date-entity
                    :weekday (c16-5 / thursday)
                    :month 10))

# ::snt But yall cant arrest almighty bizzle oh
# ::tokens ["But", "y", "all", "ca", "nt", "arrest", "almighty", "bizzle", "oh"]
# ::lemmas ["but", "you", "all", "can", "not", "arrest", "almighty", "bizzle", "oh"]
(c17-3 / contrast-01
       :ARG2 (c17-2 / possible-01
                    :ARG1 (c17-6 / arrest-01
                                 :ARG0 (c17-1 / you
                                              :mod (c17-5 / all))
                                 :ARG1 (c17-0 / bizzle-01
                                              :mod (c17-4 / almighty)
                                              :mode expressive))
                    :polarity -))

# ::snt Wow a Fan get arrested but this pice of a shiiit aka gets attention and money for this shit ? AWW HELL NAH YALL ARE FAKE
# ::tokens ["Wow", "a", "Fan", "get", "arrested", "but", "this", "pice", "of", "a", "shiiit", "aka", "gets", "attention", "and", "money", "for", "this", "shit", "?", "AWW", "HELL", "NAH", "YALL", "ARE", "FAKE"]
# ::lemmas ["wow", "a", "Fan", "get", "arrest", "but", "this", "pice", "of", "a", "shiiit", "aka", "get", "attention", "and", "money", "for", "this", "shit", "?", "AWW", "HELL", "NAH", "yall", "be", "fake"]
(c18-1 / multi-sentence
       :snt1 (c18-7 / contrast-01
                    :ARG1 (c18-12 / arrest-01
                                  :ARG1 (c18-0 / fan))
                    :ARG2 (c18-13 / get-01
                                  :ARG0 (c18-4 / pice
                                               :consist-of (c18-2 / shit)
                                               :mod (c18-10 / this))
                                  :ARG1 (c18-11 / and
                                                :op1 (c18-8 / attend-02
                                                            :ARG1 c18-4)
                                                :op2 (c18-3 / money))
                                  :ARG3 c18-2
                                  :mod (c18-15 / this)))
       :mod (c18-9 / wow
                   :mode expressive)
       :snt2 (c18-5 / fail-01
                    :mod (c18-6 / hell
                                :mode expressive)
                    :mod (c18-14 / aw
                                 :mode expressive)
                    :mode expressive))

# ::snt Apparently that's not enough evidence
# ::tokens ["Apparently", "that", "'s", "not", "enough", "evidence"]
# ::lemmas ["apparently", "that", "be", "not", "enough", "evidence"]
(c19-0 / evidence-01
       :ARG0 (c19-2 / that)
       :ARG1-of (c19-1 / have-quant-91
                       :ARG3 (c19-4 / enough)
                       :polarity -)
       :ARG1-of (c19-3 / appear-02))

# ::snt Just because he does all of that doesn't mean he can't have a huge ego and be a strange guy. He's got issues, you can't argue with that.
# ::tokens ["Just", "because", "he", "does", "all", "of", "that", "does", "n't", "mean", "he", "ca", "n't", "have", "a", "huge", "ego", "and", "be", "a", "strange", "guy", ".", "He", "'s", "got", "issues", ",", "you", "ca", "n't", "argue", "with", "that", "."]
# ::lemmas ["just", "because", "he", "do", "all", "of", "that", "do", "not", "mean", "he", "can", "not", "have", "a", "huge", "ego", "and", "be", "a", "strange", "guy", ".", "he", "be", "get", "issue", ",", "you", "can", "not", "argue", "with", "that", "."]
(c20-11 / multi-sentence
        :snt1 (c20-3 / mean-01
                     :ARG1 (c20-19 / do-02
                                   :ARG0 (c20-4 / he)
                                   :ARG1 (c20-9 / that
                                                :mod (c20-8 / all)))
                     :ARG2 (c20-16 / possible-01
                                   :ARG1 (c20-7 / and
                                                :op1 (c20-17 / have-03
                                                             :ARG0 c20-4
                                                             :ARG1 (c20-15 / ego
                                                                           :mod (c20-2 / huge)))
                                                :op2 (c20-10 / guy
                                                             :mod (c20-0 / strange)
                                                             :domain c20-4))
                                   :polarity -)
                     :mod (c20-6 / just)
                     :polarity -)
        :snt2 c20-7
        :op1 (c20-18 / issue-02
                     :ARG1 (c20-14 / he))
        :op2 (c20-12 / possible-01
                     :ARG1 (c20-5 / argue-02
                                  :ARG0 (c20-1 / you)
                                  :ARG2 (c20-13 / that))
                     :polarity -))

# ::snt You must love her TMZ. xoxoxo
# ::tokens ["You", "must", "love", "her", "TMZ", ".", "xoxoxo"]
# ::lemmas ["you", "must", "love", "her", "TMZ", ".", "xoxoxo"]
(c21-2 / multi-sentence
       :snt1 (c21-0 / obligate-01
                    :ARG1 (c21-1 / you)
                    :ARG2 (c21-6 / love-01
                                 :ARG0 c21-1
                                 :ARG1 (c21-4 / she)
                                 :medium (c21-7 / company
                                                :name (c21-3 / name
                                                             :op1 "TMZ"))))
       :snt2 (c21-5 / emoticon
                    :value "xoxoxo"))

# ::snt you know a "fan" killed Christina Grimmie, right? And almightyjbizzle went to his old house. Justin was home when this woman invaded
# ::tokens ["you", "know", "a", "\"", "fan", "\"", "killed", "Christina", "Grimmie", ",", "right", "?", "And", "almightyjbizzle", "went", "to", "his", "old", "house", ".", "Justin", "was", "home", "when", "this", "woman", "invaded"]
# ::lemmas ["you", "know", "a", "\"", "fan", "\"", "kill", "Christina", "Grimmie", ",", "right", "?", "and", "almightyjbizzle", "go", "to", "his", "old", "house", ".", "Justin", "be", "home", "when", "this", "woman", "invade"]
(c22-9 / multi-sentence
       :snt1 (c22-4 / know-01
                    :ARG0 (c22-2 / you)
                    :ARG1 (c22-12 / kill-01
                                  :ARG0 (c22-13 / fan)
                                  :ARG1 (c22-16 / person
                                                :name (c22-14 / name
                                                              :op1 "Christina"
                                                              :op2 "G Grimmie")))
                    :ARG1-of (c22-15 / request-confirmation-91
                                     :ARG2 c22-2))
       :snt2 (c22-5 / and
                    :op2 (c22-6 / go-02
                                :ARG0 (c22-10 / person
                                              :name (c22-11 / name
                                                            :op1 "Almightyjbizzle"))
                                :ARG4 (c22-3 / house
                                             :poss c22-10
                                             :mod (c22-1 / old))))
       :snt3 (c22-8 / be-located-at-91
                    :ARG1 (c22-0 / person
                                 :name (c22-17 / name
                                               :op1 "Justin"))
                    :ARG2 (c22-19 / home)
                    :time (c22-20 / invade-01
                                  :ARG0 (c22-18 / woman
                                                :mod (c22-7 / this)))))

# ::snt She's years old come on her grown ass should know what the word "Privacy" means
# ::tokens ["She", "'s", "years", "old", "come", "on", "her", "grown", "ass", "should", "know", "what", "the", "word", "\"", "Privacy", "\"", "means"]
# ::lemmas ["she", "'s", "years", "old", "come", "on", "her", "grown", "ass", "should", "know", "what", "the", "word", "\"", "privacy", "\"", "mean"]
(c23-7 / infer-01
       :ARG1 (c23-3 / know-01
                    :ARG0 (c23-8 / ass
                                 :ARG1-of (c23-9 / grow-03)
                                 :part-of (c23-2 / she))
                    :ARG1 (c23-6 / thing
                                 :ARG2-of (c23-1 / mean-01
                                                 :ARG1 (c23-4 / word
                                                              :value "Privacy"))))
       :ARG2 (c23-5 / come-on-25
                    :ARG1 c23-2
                    :time (c23-10 / age-01
                                  :ARG1 c23-2
                                  :ARG2 (c23-11 / temporal-quantity
                                                :unit (c23-0 / year)
                                                :quant 1))))

# ::snt This is insane i feel so scary for Justin i don't want any crazy ass "fan" putting him in dangerous Keep this woman in jail pls
# ::tokens ["This", "is", "insane", "i", "feel", "so", "scary", "for", "Justin", "i", "do", "n't", "want", "any", "crazy", "ass", "\"", "fan", "\"", "putting", "him", "in", "dangerous", "Keep", "this", "woman", "in", "jail", "pls"]
# ::lemmas ["this", "be", "insane", "i", "feel", "so", "scary", "for", "Justin", "i", "do", "not", "want", "any", "crazy", "ass", "\"", "fan", "\"", "put", "he", "in", "dangerous", "keep", "this", "woman", "in", "jail", "pls"]
(c24-10 / multi-sentence
        :snt1 (c24-20 / insane
                      :domain (c24-9 / this))
        :snt2 (c24-14 / feel-01
                      :ARG0 (c24-4 / i)
                      :ARG1 (c24-0 / scary-03
                                   :ARG0 c24-9
                                   :ARG1 c24-4
                                   :degree (c24-2 / so))
                      :ARG2 (c24-17 / person
                                    :name (c24-15 / name
                                                  :op1 "Justin")))
        :snt3 (c24-19 / want-01
                      :ARG0 c24-4
                      :ARG1 (c24-11 / put-01
                                    :ARG0 (c24-18 / fan
                                                  :mod (c24-8 / ass
                                                              :ARG1-of (c24-12 / crazy-03))
                                                  :mod (c24-7 / any))
                                    :ARG1 c24-17
                                    :ARG2 (c24-6 / jail)
                                    :ARG0-of (c24-16 / endanger-01))
                      :polarity -)
        :snt4 (c24-5 / keep-01
                     :ARG0 (c24-3 / you)
                     :ARG1 (c24-1 / woman
                                  :mod (c24-13 / this))
                     :mode imperative))

# ::snt Hi If u don't mind, see &amp; listen 's new album. tell me What do u think? Thx u
# ::tokens ["Hi", "If", "u", "do", "n't", "mind", ",", "see", "&", "amp", ";", "listen", "'s", "new", "album", ".", "tell", "me", "What", "do", "u", "think", "?", "Thx", "u"]
# ::lemmas ["hi", "if", "u", "do", "not", "mind", ",", "see", "&", "amp", ";", "listen", "'s", "new", "album", ".", "tell", "i", "what", "do", "u", "think", "?", "thx", "u"]
(c25-2 / multi-sentence
       :snt1 (c25-12 / and
                     :op1 (c25-4 / see-01
                                 :ARG0 (c25-1 / you)
                                 :ARG1 (c25-6 / person
                                              :name (c25-3 / name
                                                           :op1 "&"
                                                           :op2 "amp"))
                                 :mode imperative)
                     :op2 (c25-7 / listen-01
                                 :ARG0 c25-1
                                 :ARG1 (c25-11 / album
                                               :ARG1-of (c25-5 / new-01))
                                 :mode imperative)
                     :condition (c25-8 / mind-01
                                       :ARG0 c25-1
                                       :polarity -))
       :snt2 (c25-10 / tell-01
                     :ARG0 (c25-13 / you)
                     :ARG1 (c25-16 / thing
                                   :ARG1-of (c25-14 / think-01
                                                    :ARG0 c25-13))
                     :ARG2 (c25-15 / i)
                     :mode imperative)
       :snt3 (c25-0 / say-01
                    :ARG0 c25-15)
       :ARG1 (c25-9 / hi)
       :ARG2 c25-13)

# ::snt Insane
# ::tokens ["Insane"]
# ::lemmas ["insane"]
(c26-0 / insane)

# ::snt Must b of d many facades they paint simply just publicity as it's always been and unfortunately D innOcEnTnaiVe bystanderPaysDprICe4FllwN
# ::tokens ["Must", "b", "of", "d", "many", "facades", "they", "paint", "simply", "just", "publicity", "as", "it", "'s", "always", "been", "and", "unfortunately", "D", "innOcEnTnaiVe", "bystanderPaysDprICe4FllwN"]
# ::lemmas ["must", "b", "of", "d", "many", "facade", "they", "paint", "simply", "just", "publicity", "as", "it", "be", "always", "be", "and", "unfortunately", "D", "innOcEnTnaiVe", "bystanderPaysDprICe4FllwN"]
(c27-6 / and
       :op1 (c27-0 / obligate-01
                   :ARG2 (c27-8 / paint-03
                                :ARG0 (c27-13 / they)
                                :ARG1 (c27-1 / face
                                             :quant (c27-2 / many))
                                :ARG2 (c27-3 / publicity
                                             :mod (c27-11 / just))
                                :ARG1-of (c27-4 / simple-02)
                                :ARG1-of (c27-7 / resemble-01
                                                :ARG2 (c27-14 / paint-03
                                                              :ARG1 c27-3
                                                              :time (c27-12 / always)))))
       :op2 (c27-9 / fortunate-01
                   :ARG2 (c27-10 / person
                                 :name (c27-5 / name
                                              :op1 "DinnOcEnTnaiVe bystanderPaysDprICe4FllwN"))
                   :polarity -))

# ::snt So he's basically getting away with trespassing
# ::tokens ["So", "he", "'s", "basically", "getting", "away", "with", "trespassing"]
# ::lemmas ["so", "he", "be", "basically", "get", "away", "with", "trespassing"]
(c28-2 / infer-01
       :ARG1 (c28-4 / get-away-08
                    :ARG0 (c28-1 / he)
                    :ARG1 (c28-3 / trespass-01
                                 :ARG0 c28-1)
                    :mod (c28-0 / basic)))

# ::snt As much as i hate jordan, they cant arrest him if a youtube video is the only proof. yt vids are no proof.
# ::tokens ["As", "much", "as", "i", "hate", "jordan", ",", "they", "ca", "nt", "arrest", "him", "if", "a", "youtube", "video", "is", "the", "only", "proof", ".", "yt", "vids", "are", "no", "proof", "."]
# ::lemmas ["as", "much", "as", "i", "hate", "jordan", ",", "they", "can", "not", "arrest", "he", "if", "a", "youtube", "video", "be", "the", "only", "proof", ".", "yt", "vid", "be", "no", "proof", "."]
(c29-1 / multi-sentence
       :snt1 (c29-7 / possible-01
                    :ARG1 (c29-4 / arrest-01
                                 :ARG0 (c29-11 / they)
                                 :ARG1 (c29-2 / person
                                              :name (c29-3 / name
                                                           :op1 "Jordan")))
                    :concession (c29-6 / hate-01
                                       :ARG0 (c29-10 / i)
                                       :ARG1 c29-2)
                    :condition (c29-13 / prove-01
                                       :ARG0 (c29-5 / video
                                                    :medium (c29-9 / publication
                                                                   :name (c29-8 / name
                                                                                :op1 "YouTube")))
                                       :mod (c29-0 / only))
                    :polarity -)
       :snt2 (c29-12 / prove-01
                     :ARG0 c29-5
                     :mod (c29-14 / this)
                     :polarity -))

# ::snt We fucking wish
# ::tokens ["We", "fucking", "wish"]
# ::lemmas ["we", "fucking", "wish"]
(c31-0 / wish-01
       :ARG0 (c31-2 / we)
       :mod (c31-1 / fucking
                   :mode expressive))

# ::snt Look at Jordan Taylor Aka AlmightyJBizzle, who's recorded himself trespassing Justin's home
# ::tokens ["Look", "at", "Jordan", "Taylor", "Aka", "AlmightyJBizzle", ",", "who", "'s", "recorded", "himself", "trespassing", "Justin", "'s", "home"]
# ::lemmas ["look", "at", "Jordan", "Taylor", "Aka", "AlmightyJBizzle", ",", "who", "be", "record", "himself", "trespass", "Justin", "'s", "home"]
(c32-6 / look-01
       :ARG0 (c32-0 / you)
       :ARG1 (c32-5 / person
                    :name (c32-1 / name
                                 :op1 "Jordan"
                                 :op2 "Taylor"
                                 :op3 "Aka"
                                 :op4 "LJBizzle")
                    :ARG0-of (c32-3 / record-01
                                    :ARG1 (c32-8 / trespass-01
                                                 :ARG0 c32-5
                                                 :ARG1 (c32-4 / home
                                                              :poss (c32-2 / person
                                                                           :name (c32-7 / name
                                                                                        :op1 "Justin"))))))
       :mode imperative)

# ::snt What so Jordan Taylor can do it and get away with it? WHEN ITS EVEN ON YOUTUBE
# ::tokens ["What", "so", "Jordan", "Taylor", "can", "do", "it", "and", "get", "away", "with", "it", "?", "WHEN", "ITS", "EVEN", "ON", "YOUTUBE"]
# ::lemmas ["what", "so", "Jordan", "Taylor", "can", "do", "it", "and", "get", "away", "with", "it", "?", "when", "its", "even", "ON", "YOUTUBE"]
(c33-7 / cause-01
       :ARG0 (c33-9 / amr-unknown)
       :ARG1 (c33-6 / possible-01
                    :ARG1 (c33-8 / and
                                 :op1 (c33-11 / do-02
                                              :ARG0 (c33-2 / person
                                                           :name (c33-1 / name
                                                                        :op1 "Jordan"
                                                                        :op2 "Taylor"))
                                              :ARG1 (c33-10 / it))
                                 :op2 (c33-3 / get-away-08
                                             :ARG0 c33-2
                                             :ARG1 c33-10)))
       :time (c33-0 / be-located-at-91
                    :ARG1 c33-10
                    :ARG2 (c33-12 / publication
                                  :name (c33-5 / name
                                               :op1 "YouTube"))
                    :mod (c33-4 / even)))

# ::snt Looks like i cant even spell&lt;.&lt; they****
# ::tokens ["Looks", "like", "i", "ca", "nt", "even", "spell&lt;.&lt", ";", "they", "*", "*", "*", "*"]
# ::lemmas ["look", "like", "i", "can", "not", "even", "spell&lt;.&lt", ";", "they", "*", "*", "*", "*"]
(c34-3 / look-02
       :ARG1 (c34-2 / possible-01
                    :ARG1 (c34-0 / spell-01
                                 :ARG0 (c34-4 / i)
                                 :mod (c34-1 / even))
                    :polarity -))

# ::snt WHY DONT DAY ARREST JORDAN TAYLOR WHO HAS VIDEO OF HIMSELF TRESPASSING MY BABYS HOME ASDFGJKLLLLL FUCK THIS SHIT CRYING
# ::tokens ["WHY", "DONT", "DAY", "ARREST", "JORDAN", "TAYLOR", "WHO", "HAS", "VIDEO", "OF", "HIMSELF", "TRESPASSING", "MY", "BABYS", "HOME", "ASDFGJKLLLLL", "FUCK", "THIS", "SHIT", "CRYING"]
# ::lemmas ["why", "dont", "day", "arrest", "JORDAN", "TAYLOR", "who", "have", "video", "of", "himself", "trespass", "MY", "BABYS", "HOME", "ASDFGJKLLLLL", "FUCK", "this", "shit", "crying"]
(c35-5 / ask-01
       :ARG0 (c35-15 / i)
       :ARG1 (c35-10 / cause-01
                     :ARG0 (c35-14 / amr-unknown)
                     :ARG1 (c35-11 / arrest-01
                                   :ARG0 (c35-16 / day)
                                   :ARG1 (c35-9 / person
                                                :name (c35-2 / name
                                                             :op1 "JORDAN"
                                                             :op2 "TayLOR")
                                                :ARG0-of (c35-8 / have-03
                                                                :ARG1 (c35-6 / video
                                                                             :topic (c35-3 / pass-by-17
                                                                                           :ARG0 c35-9
                                                                                           :ARG1 c35-9
                                                                                           :ARG0-of (c35-12 / have-rel-role-91
                                                                                                            :ARG1 c35-15
                                                                                                            :ARG2 (c35-1 / buddy)))
                                                                             :location (c35-7 / home))))
                                   :polarity -))
       :ARG2 (c35-0 / fuck-01
                    :ARG1 (c35-4 / shit
                                 :mod (c35-13 / this)
                                 :ARG0-of (c35-17 / CRY-01))
                    :mode expressive))

# ::snt He records himself trespassing Justin's home for YouTube and gets away with it but a fan does it BC they love him and is arrested HOLDDD UPP
# ::tokens ["He", "records", "himself", "trespassing", "Justin", "'s", "home", "for", "YouTube", "and", "gets", "away", "with", "it", "but", "a", "fan", "does", "it", "BC", "they", "love", "him", "and", "is", "arrested", "HOLDDD", "UPP"]
# ::lemmas ["he", "record", "himself", "trespass", "Justin", "'s", "home", "for", "YouTube", "and", "get", "away", "with", "it", "but", "a", "fan", "do", "it", "BC", "they", "love", "he", "and", "be", "arrest", "HOLDDD", "UPP"]
(c36-8 / multi-sentence
       :snt1 (c36-5 / and
                    :op1 (c36-14 / record-01
                                 :ARG0 (c36-2 / he)
                                 :ARG1 (c36-6 / trespass-01
                                              :ARG0 c36-2
                                              :ARG1 (c36-17 / home
                                                            :poss (c36-15 / person
                                                                          :name (c36-13 / name
                                                                                        :op1 "Justin"))))
                                 :medium (c36-9 / publication
                                                :name (c36-10 / name
                                                              :op1 "YouTube")))
                    :op2 (c36-7 / get-away-08
                                :ARG0 c36-2
                                :ARG1 c36-6)
                    :concession-of (c36-4 / and
                                          :op1 (c36-0 / love-01
                                                      :ARG0 (c36-12 / fan)
                                                      :ARG1 (c36-1 / he))
                                          :op2 (c36-3 / arrest-01
                                                      :ARG1 c36-12)))
       :snt2 (c36-11 / hold-01
                     :ARG0 c36-15
                     :name (c36-16 / name
                                   :op1 "UPP"))
       :ARG1 (c36-18 / dear))

# ::snt All celebrities have at least one stalker in their life time, no surprise to hear this... you need security gates &amp; alarms.
# ::tokens ["All", "celebrities", "have", "at", "least", "one", "stalker", "in", "their", "life", "time", ",", "no", "surprise", "to", "hear", "this", "...", "you", "need", "security", "gates", "&", "amp", ";", "alarms", "."]
# ::lemmas ["all", "celebrity", "have", "at", "least", "one", "stalker", "in", "their", "life", "time", ",", "no", "surprise", "to", "hear", "this", "...", "you", "need", "security", "gate", "&", "amp", ";", "alarm", "."]
(c37-2 / multi-sentence
       :snt1 (c37-5 / have-03
                    :ARG0 (c37-8 / celebrity
                                 :mod (c37-14 / all))
                    :ARG1 (c37-6 / person
                                 :ARG0-of (c37-4 / stalk-02)
                                 :quant (c37-13 / at-least
                                                :op1 1))
                    :time (c37-7 / live-01
                                 :ARG0 c37-8))
       :snt2 (c37-0 / surprise-01
                    :ARG0 (c37-11 / hear-01
                                  :ARG1 (c37-12 / this))
                    :ARG1 (c37-3 / need-01
                                 :ARG0 (c37-1 / you)
                                 :ARG1 (c37-9 / and
                                              :op1 (c37-15 / gate
                                                           :mod (c37-17 / security))
                                              :op2 (c37-16 / amp)
                                              :op3 (c37-10 / alarm-01)))
                    :polarity -))

# ::snt Should go to Kim s house, you could get in make a sandwich, grab a few souvenirs and take a ride in a fancy car
# ::tokens ["Should", "go", "to", "Kim", "s", "house", ",", "you", "could", "get", "in", "make", "a", "sandwich", ",", "grab", "a", "few", "souvenirs", "and", "take", "a", "ride", "in", "a", "fancy", "car"]
# ::lemmas ["should", "go", "to", "Kim", "s", "house", ",", "you", "could", "get", "in", "make", "a", "sandwich", ",", "grab", "a", "few", "souvenir", "and", "take", "a", "ride", "in", "a", "fancy", "car"]
(c38-6 / recommend-01
       :ARG1 (c38-13 / go-02
                     :ARG0 (c38-2 / you)
                     :ARG4 (c38-7 / house
                                  :poss (c38-8 / person
                                               :name (c38-3 / name
                                                            :op1 "Kim"))))
       :ARG1-of (c38-10 / cause-01
                        :ARG0 (c38-4 / possible-01
                                     :ARG1 (c38-12 / and
                                                   :op1 (c38-11 / get-05
                                                                :ARG0 c38-2
                                                                :ARG1 (c38-5 / sandwich))
                                                   :op2 (c38-15 / grab-01
                                                                :ARG0 c38-2
                                                                :ARG1 (c38-0 / souvenir
                                                                             :quant (c38-1 / few)))
                                                   :op3 (c38-14 / ride-01
                                                                :ARG0 c38-2
                                                                :ARG1 (c38-16 / car
                                                                              :mod (c38-9 / fancy)))))))

# ::snt What did she think going to happen...he will invite her inside and show her his tattoos..crazy fan.lady get a cat or a hobby
# ::tokens ["What", "did", "she", "think", "going", "to", "happen", "...", "he", "will", "invite", "her", "inside", "and", "show", "her", "his", "tattoos", "..", "crazy", "fan.lady", "get", "a", "cat", "or", "a", "hobby"]
# ::lemmas ["what", "do", "she", "think", "go", "to", "happen", "...", "he", "will", "invite", "she", "inside", "and", "show", "she", "his", "tattoo", "..", "crazy", "fan.lady", "get", "a", "cat", "or", "a", "hobby"]
(c39-12 / multi-sentence
        :snt1 (c39-8 / think-01
                     :ARG0 (c39-0 / she)
                     :ARG1 (c39-16 / event
                                   :mod (c39-10 / amr-unknown)))
        :snt2 (c39-7 / and
                     :op1 (c39-18 / invite-01
                                  :ARG0 (c39-6 / he)
                                  :ARG1 (c39-2 / she)
                                  :ARG2 (c39-5 / inside))
                     :op2 (c39-1 / show-01
                                 :ARG0 c39-6
                                 :ARG1 (c39-14 / tattoo-01
                                               :ARG1 c39-6
                                               :ARG2 c39-2)
                                 :ARG2 c39-2))
        :snt3 (c39-15 / fan
                      :ARG1-of (c39-13 / crazy-03))
        :snt4 (c39-9 / get-01
                     :ARG0 (c39-4 / you)
                     :ARG1 (c39-3 / or
                                  :op1 (c39-11 / cat)
                                  :op2 (c39-17 / hobby))
                     :mode imperative))

# ::snt Omg can someone please let all of his fans know that there's certain things or boundaries u just don't cross! FANTALKER IS A NO/NO
# ::tokens ["Omg", "can", "someone", "please", "let", "all", "of", "his", "fans", "know", "that", "there", "'s", "certain", "things", "or", "boundaries", "u", "just", "do", "n't", "cross", "!", "FANTALKER", "IS", "A", "NO", "/", "NO"]
# ::lemmas ["Omg", "can", "someone", "please", "let", "all", "of", "his", "fan", "know", "that", "there", "be", "certain", "thing", "or", "boundary", "u", "just", "do", "not", "cross", "!", "FANTALKER", "be", "a", "no", "/", "no"]
(c40-4 / multi-sentence
       :snt1 (c40-10 / possible-01
                     :ARG1 (c40-11 / let-know-07
                                   :ARG0 (c40-6 / someone)
                                   :ARG1 (c40-0 / fan
                                                :mod (c40-16 / all)
                                                :poss (c40-9 / he))
                                   :ARG2 (c40-1 / or
                                                :op1 (c40-14 / thing
                                                             :mod (c40-13 / certain))
                                                :op2 (c40-2 / boundary
                                                            :mod c40-13)
                                                :ARG1-of (c40-17 / cross-02
                                                                 :ARG0 (c40-3 / you)
                                                                 :mod (c40-15 / just)
                                                                 :polarity -))
                                   :polite +)
                     :mod (c40-5 / oh-my-god
                                 :mode expressive))
       :snt2 (c40-7 / no
                    :domain (c40-8 / person
                                   :name (c40-12 / name
                                                 :op1 "Fantalker"))
                    :mode expressive))

# ::snt I don't get it. truly do not
# ::tokens ["I", "do", "n't", "get", "it", ".", "truly", "do", "not"]
# ::lemmas ["i", "do", "not", "get", "it", ".", "truly", "do", "not"]
(c41-1 / multi-sentence
       :snt1 (c41-6 / get-30
                    :ARG0 (c41-5 / i)
                    :ARG1 (c41-2 / it)
                    :polarity -)
       :snt2 (c41-4 / get-30
                    :ARG0 (c41-0 / you)
                    :ARG1 c41-2
                    :ARG1-of (c41-3 / true-01)
                    :polarity -))

# ::snt you can arrest her but not ? hes done this several times. do something. check his youtube channel for proof
# ::tokens ["you", "can", "arrest", "her", "but", "not", "?", "he", "s", "done", "this", "several", "times", ".", "do", "something", ".", "check", "his", "youtube", "channel", "for", "proof"]
# ::lemmas ["you", "can", "arrest", "she", "but", "not", "?", "he", "s", "do", "this", "several", "time", ".", "do", "something", ".", "check", "his", "youtube", "channel", "for", "proof"]
(c42-12 / multi-sentence
        :snt1 (c42-14 / contrast-01
                      :polarity (c42-10 / amr-unknown)
                      :ARG1 (c42-17 / possible-01
                                    :ARG1 (c42-8 / arrest-01
                                                 :ARG0 (c42-5 / you)
                                                 :ARG1 (c42-0 / she)))
                      :ARG2 (c42-7 / arrest-01
                                   :ARG0 c42-5
                                   :ARG1 c42-0
                                   :polarity -))
        :snt2 (c42-18 / do-02
                      :ARG0 (c42-6 / he)
                      :ARG1 (c42-9 / this)
                      :frequency (c42-4 / several))
        :snt3 (c42-15 / do-02
                      :ARG0 c42-6
                      :ARG1 (c42-3 / something))
        :snt4 (c42-11 / check-01
                      :ARG0 c42-5
                      :mode imperative)
        :ARG1 (c42-1 / channel
                     :medium (c42-13 / publication
                                     :name (c42-16 / name
                                                   :op1 "YouTube"))
                     :poss c42-6)
        :ARG2 (c42-2 / prove-01
                     :ARG0 c42-6))

# ::snt It's like everyone is in on this plan to fuel his ego as much as possible.
# ::tokens ["It", "'s", "like", "everyone", "is", "in", "on", "this", "plan", "to", "fuel", "his", "ego", "as", "much", "as", "possible", "."]
# ::lemmas ["it", "be", "like", "everyone", "be", "in", "on", "this", "plan", "to", "fuel", "his", "ego", "as", "much", "as", "possible", "."]
(c43-3 / resemble-01
       :ARG1 (c43-6 / plan-01
                    :ARG0 (c43-4 / everyone)
                    :ARG1 (c43-0 / fuel-01
                                 :ARG0 c43-4
                                 :ARG1 (c43-10 / ego
                                               :poss (c43-5 / he))
                                 :ARG1-of (c43-8 / have-quant-91
                                                 :ARG2 (c43-1 / much)
                                                 :ARG3 (c43-7 / equal)
                                                 :ARG4 (c43-2 / possible-01
                                                              :ARG1 c43-0)))
                    :mod (c43-9 / this)))
