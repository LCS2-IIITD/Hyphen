# ::snt the Dr. acted like a jerk.
# ::tokens ["the", "Dr.", "acted", "like", "a", "jerk", "."]
# ::lemmas ["the", "Dr.", "act", "like", "a", "jerk", "."]
(c1-2 / act-01
      :ARG0 (c1-0 / doctor)
      :ARG1 (c1-1 / jerk))

# ::snt They belong together, they look almost alike. No, they need more time with a therapist. For real. It's not as bad as the think it is.
# ::tokens ["They", "belong", "together", ",", "they", "look", "almost", "alike", ".", "No", ",", "they", "need", "more", "time", "with", "a", "therapist", ".", "For", "real", ".", "It", "'s", "not", "as", "bad", "as", "the", "think", "it", "is", "."]
# ::lemmas ["they", "belong", "together", ",", "they", "look", "almost", "alike", ".", "no", ",", "they", "need", "more", "time", "with", "a", "therapist", ".", "for", "real", ".", "it", "be", "not", "as", "bad", "as", "the", "think", "it", "be", "."]
(c2-15 / multi-sentence
       :snt1 (c2-11 / and
                    :op1 (c2-14 / belong-01
                                :ARG0 (c2-13 / they)
                                :mod (c2-17 / together))
                    :op2 (c2-2 / look-02
                               :ARG0 c2-13
                               :ARG1 (c2-10 / alike-05
                                            :ARG1 c2-13
                                            :mod (c2-9 / almost))))
       :snt2 (c2-18 / need-01
                    :ARG0 (c2-21 / they)
                    :ARG1 (c2-0 / time
                                :mod (c2-7 / more)
                                :accompanier (c2-12 / therapist))
                    :mod (c2-16 / no)
                    :polarity -)
       :snt3 (c2-19 / real-04
                    :ARG1 (c2-22 / it))
       :snt4 (c2-8 / have-degree-91
                   :ARG1 (c2-6 / it)
                   :ARG2 (c2-1 / bad-07
                               :ARG1 c2-6)
                   :ARG3 (c2-20 / equal)
                   :ARG4 (c2-4 / thing
                               :ARG1-of (c2-3 / think-01
                                              :ARG0 (c2-5 / you)))
                   :polarity -))

# ::snt Ohh myyy goodness.
# ::tokens ["Ohh", "myyy", "goodness", "."]
# ::lemmas ["Ohh", "myyy", "goodness", "."]
(c3-0 / goodness
      :mod (c3-1 / oh
                 :mode expressive)
      :poss (c3-2 / i)
      :mode expressive)

# ::snt Sorry to hear the news!!
# ::tokens ["Sorry", "to", "hear", "the", "news", "!", "!"]
# ::lemmas ["sorry", "to", "hear", "the", "news", "!", "!"]
(c4-2 / sorry-01
      :ARG2 (c4-0 / hear-01
                  :ARG1 (c4-1 / news)))

# ::snt Sorry, I had to.
# ::tokens ["Sorry", ",", "I", "had", "to", "."]
# ::lemmas ["sorry", ",", "i", "have", "to", "."]
(c5-2 / sorry-01
      :ARG1 (c5-1 / i)
      :ARG2 (c5-0 / obligate-01
                  :ARG1 c5-1))

# ::snt Too easy.
# ::tokens ["Too", "easy", "."]
# ::lemmas ["too", "easy", "."]
(c6-1 / have-degree-91
      :ARG2 (c6-0 / easy-05)
      :ARG3 (c6-2 / too))

# ::snt *phew*...and, there I was sweating about that...(is that BREAKING News? Just curious)
# ::tokens ["*", "phew*", "...", "and", ",", "there", "I", "was", "sweating", "about", "that", "...", "(is", "that", "BREAKING", "News", "?", "Just", "curious", ")"]
# ::lemmas ["*", "phew*", "...", "and", ",", "there", "i", "be", "sweat", "about", "that", "...", "(is", "that", "BREAKING", "News", "?", "just", "curious", ")"]
(c7-1 / multi-sentence
      :snt1 (c7-5 / phew
                  :mode expressive)
      :snt2 (c7-3 / sweat-01
                  :ARG0 (c7-8 / i)
                  :topic (c7-9 / that)
                  :location (c7-11 / there))
      :snt3 (c7-2 / news
                  :ARG1-of (c7-0 / break-13)
                  :polarity (c7-4 / amr-unknown)
                  :domain (c7-10 / that))
      :snt4 (c7-6 / curious-01
                  :ARG1 c7-8)
      :mod (c7-7 / just))

# ::snt Okay, who'll be the first to say it: they're on a break.
# ::tokens ["Okay", ",", "who", "'ll", "be", "the", "first", "to", "say", "it", ":", "they", "'re", "on", "a", "break", "."]
# ::lemmas ["okay", ",", "who", "'ll", "be", "the", "first", "to", "say", "it", ":", "they", "be", "on", "a", "break", "."]
(c8-3 / multi-sentence
      :snt1 (c8-1 / okay-01)
      :snt2 (c8-4 / say-01
                  :ARG0 (c8-5 / person
                              :ord (c8-0 / ordinal-entity
                                         :value 1))
                  :ARG1 (c8-2 / break-13
                              :ARG0 (c8-6 / they))))

# ::snt Thats his thing, divorces
# ::tokens ["That", "s", "his", "thing", ",", "divorces"]
# ::lemmas ["that", "s", "his", "thing", ",", "divorce"]
(c9-0 / and
      :op1 (c9-2 / thing
                 :poss (c9-1 / he)
                 :domain (c9-4 / that))
      :op2 (c9-3 / divorce-01))

# ::snt DIVORCES DIVORCES
# ::tokens ["DIVORCES", "DIVORCES"]
# ::lemmas ["divorce", "divorces"]
(c10-0 / divide-02
       :ARG0 (c10-1 / you))

# ::snt too classic
# ::tokens ["too", "classic"]
# ::lemmas ["too", "classic"]
(c11-1 / have-degree-91
       :ARG2 (c11-0 / classic)
       :ARG3 (c11-2 / too))

# ::snt She finally watched Friends.
# ::tokens ["She", "finally", "watched", "Friends", "."]
# ::lemmas ["she", "finally", "watch", "Friends", "."]
(c12-4 / watch-01
       :ARG0 (c12-3 / she)
       :ARG1 (c12-1 / broadcast-program
                    :name (c12-2 / name
                                 :op1 "Friends"))
       :time (c12-0 / final))

# ::snt Let me guess... because of sexual harrassment?
# ::tokens ["Let", "me", "guess", "...", "because", "of", "sexual", "harrassment", "?"]
# ::lemmas ["let", "i", "guess", "...", "because", "of", "sexual", "harrassment", "?"]
(c13-2 / let-01
       :ARG1 (c13-6 / guess-01
                    :ARG0 (c13-4 / i)
                    :ARG1 (c13-3 / cause-01
                                 :ARG0 (c13-1 / harass-01
                                              :manner (c13-0 / sex-01))
                                 :polarity (c13-5 / amr-unknown))))

# ::snt He will get married hes good at that. He just wont STAY married
# ::tokens ["He", "will", "get", "married", "he", "s", "good", "at", "that", ".", "He", "just", "wo", "nt", "STAY", "married"]
# ::lemmas ["he", "will", "get", "marry", "he", "s", "good", "at", "that", ".", "he", "just", "will", "not", "stay", "married"]
(c14-0 / multi-sentence
       :snt1 (c14-2 / marry-01
                    :ARG1 (c14-3 / he))
       :snt2 (c14-7 / good-03
                    :ARG1 (c14-4 / he)
                    :ARG2 (c14-6 / that))
       :snt3 (c14-8 / marry-01
                    :ARG1 (c14-1 / he)
                    :time (c14-5 / just)
                    :polarity -))

# ::snt Watch out for Joey
# ::tokens ["Watch", "out", "for", "Joey"]
# ::lemmas ["watch", "out", "for", "Joey"]
(c15-0 / watch-out-02
       :ARG1 (c15-2 / person
                    :name (c15-1 / name
                                 :op1 "Joey")))

# ::snt On a break
# ::tokens ["On", "a", "break"]
# ::lemmas ["on", "a", "break"]
(c16-0 / break-19)

# ::snt divorces, Ross. divorces.
# ::tokens ["divorces", ",", "Ross", ".", "divorces", "."]
# ::lemmas ["divorce", ",", "Ross", ".", "divorce", "."]
(c17-1 / multi-sentence
       :snt1 (c17-4 / divorce-01
                    :ARG0 (c17-2 / person
                                 :name (c17-0 / name
                                              :op1 "Ross")))
       :snt2 (c17-3 / divorce-01))

# ::snt He misses Rachel. Poor guy.
# ::tokens ["He", "misses", "Rachel", ".", "Poor", "guy", "."]
# ::lemmas ["he", "miss", "Rachel", ".", "poor", "guy", "."]
(c18-1 / multi-sentence
       :snt1 (c18-3 / miss-01
                    :ARG0 (c18-5 / he)
                    :ARG1 (c18-4 / person
                                 :name (c18-0 / name
                                              :op1 "Rachel")))
       :snt2 (c18-6 / guy
                    :mod (c18-2 / poor)))

# ::snt Are they on a break or not?
# ::tokens ["Are", "they", "on", "a", "break", "or", "not", "?"]
# ::lemmas ["be", "they", "on", "a", "break", "or", "not", "?"]
(c19-0 / break-16
       :polarity (c19-2 / amr-unknown)
       :ARG0 (c19-1 / they))

# ::snt Too many 'on a break' gifs
# ::tokens ["Too", "many", "'", "on", "a", "break", "'", "gifs"]
# ::lemmas ["too", "many", "'", "on", "a", "break", "'", "gif"]
(c20-2 / have-quant-91
       :ARG1 (c20-4 / gif
                    :mod (c20-0 / on-a-break-19))
       :ARG2 (c20-1 / many)
       :ARG3 (c20-3 / too))

# ::snt damn Ross
# ::tokens ["damn", "Ross"]
# ::lemmas ["damn", "Ross"]
(c22-0 / damn-01
       :ARG1 (c22-2 / person
                    :name (c22-1 / name
                                 :op1 "Ross")))

# ::snt You know what I just realized shawty looks like SCOTT
# ::tokens ["You", "know", "what", "I", "just", "realized", "shawty", "looks", "like", "SCOTT"]
# ::lemmas ["you", "know", "what", "i", "just", "realize", "shawty", "look", "like", "SCOTT"]
(c25-5 / know-01
       :ARG0 (c25-0 / you)
       :ARG1 (c25-10 / thing
                     :ARG1-of (c25-3 / realize-01
                                     :ARG0 (c25-9 / i)
                                     :time (c25-8 / just))
                     :domain (c25-6 / look-02
                                    :ARG0 (c25-7 / person
                                                 :name (c25-1 / name
                                                              :op1 "Shawty"))
                                    :ARG1 (c25-2 / person
                                                 :name (c25-4 / name
                                                              :op1 "ScOTT")))))

# ::snt Going on a break??? Hes gonna find another woman during that time
# ::tokens ["Going", "on", "a", "break", "?", "?", "?", "He", "s", "gon", "na", "find", "another", "woman", "during", "that", "time"]
# ::lemmas ["go", "on", "a", "break", "?", "?", "?", "he", "s", "going", "to", "find", "another", "woman", "during", "that", "time"]
(c30-2 / multi-sentence
       :snt1 (c30-10 / go-02
                     :ARG0 (c30-3 / he)
                     :ARG4 (c30-1 / break-19
                                  :ARG0 c30-3)
                     :polarity (c30-9 / amr-unknown))
       :snt2 (c30-0 / find-01
                    :ARG0 (c30-6 / he)
                    :ARG1 (c30-4 / woman
                                 :mod (c30-8 / another))
                    :polarity (c30-5 / amr-unknown)
                    :time (c30-7 / time
                                 :mod (c30-11 / that))))

# ::snt We were on a BREAK!
# ::tokens ["We", "were", "on", "a", "BREAK", "!"]
# ::lemmas ["we", "be", "on", "a", "BREAK", "!"]
(c31-1 / break-13
       :ARG0 (c31-0 / we)
       :mode expressive)

# ::snt Freaking sad
# ::tokens ["Freaking", "sad"]
# ::lemmas ["freak", "sad"]
(c32-1 / sad-02
       :ARG1-of (c32-0 / freak-01))

# ::snt $5 she a lesbian
# ::tokens ["$", "5", "she", "a", "lesbian"]
# ::lemmas ["$", "5", "she", "a", "lesbian"]
(c33-2 / lesbian
       :domain (c33-1 / she)
       :ARG1-of (c33-3 / cost-01
                       :ARG2 (c33-0 / monetary-quantity
                                    :unit (c33-4 / dollar)
                                    :quant 5)))

# ::snt He should stay with Rachel
# ::tokens ["He", "should", "stay", "with", "Rachel"]
# ::lemmas ["he", "should", "stay", "with", "Rachel"]
(c35-2 / recommend-01
       :ARG1 (c35-1 / stay-01
                    :ARG1 (c35-3 / he)
                    :accompanier (c35-4 / person
                                        :name (c35-0 / name
                                                     :op1 "Rachel"))))

# ::snt HZZZK
# ::tokens ["HZZZK"]
# ::lemmas ["hzzzk"]
(c36-1 / person
       :name (c36-0 / name
                    :op1 "HZZZK"))

# ::snt getting some frozen yoghurt??
# ::tokens ["getting", "some", "frozen", "yoghurt", "?", "?"]
# ::lemmas ["get", "some", "frozen", "yoghurt", "?", "?"]
(c37-4 / get-01
       :polarity (c37-3 / amr-unknown)
       :ARG1 (c37-1 / yoghurt
                    :ARG1-of (c37-0 / freeze-01)
                    :quant (c37-2 / some)))

# ::snt Was she a lesbian too?
# ::tokens ["Was", "she", "a", "lesbian", "too", "?"]
# ::lemmas ["be", "she", "a", "lesbian", "too", "?"]
(c39-2 / lesbian
       :polarity (c39-3 / amr-unknown)
       :domain (c39-0 / she)
       :mod (c39-1 / too))

# ::snt WE WERE ON A BREAK
# ::tokens ["WE", "WERE", "ON", "A", "BREAK"]
# ::lemmas ["we", "be", "on", "A", "BREAK"]
(c40-1 / be-located-at-91
       :ARG1 (c40-0 / we)
       :ARG2 (c40-2 / break-13))

# ::snt th failed marriage :/
# ::tokens ["th", "failed", "marriage", ":/"]
# ::lemmas ["th", "fail", "marriage", ":/"]
(c41-1 / marry-01
       :ARG1-of (c41-0 / fail-01))

# ::snt Came here looking for this. I am not disappointed.
# ::tokens ["Came", "here", "looking", "for", "this", ".", "I", "am", "not", "disappointed", "."]
# ::lemmas ["come", "here", "look", "for", "this", ".", "i", "be", "not", "disappointed", "."]
(c42-0 / multi-sentence
       :snt1 (c42-4 / come-01
                    :ARG1 (c42-5 / i)
                    :ARG4 (c42-2 / here)
                    :purpose (c42-3 / look-01
                                    :ARG0 c42-5
                                    :ARG1 (c42-6 / this)))
       :snt2 (c42-7 / disappoint-01
                    :ARG1 (c42-1 / i)
                    :polarity -))

# ::snt The one where they take a break
# ::tokens ["The", "one", "where", "they", "take", "a", "break"]
# ::lemmas ["the", "one", "where", "they", "take", "a", "break"]
(c46-0 / one
       :location-of (c46-1 / break-19
                           :ARG0 (c46-2 / they)))

# ::snt dj ddddddddd trev
# ::tokens ["dj", "ddddddddd", "trev"]
# ::lemmas ["dj", "ddddddddd", "trev"]
(c47-0 / string-entity
       :value "dj ddddddd trev")

# ::snt Ohhhh fucccckkkkkkkkkk
# ::tokens ["Ohhhh", "fucccckkkkkkkkkk"]
# ::lemmas ["ohhhh", "fucccckkkkkkkkkk"]
(c48-0 / oh
       :mode expressive)

# ::snt The divorce force is back
# ::tokens ["The", "divorce", "force", "is", "back"]
# ::lemmas ["the", "divorce", "force", "be", "back"]
(c49-1 / back-02
       :ARG1 (c49-0 / force-04
                    :ARG2 (c49-2 / divorce-01)))

# ::snt Ross can't afford another divorce smh
# ::tokens ["Ross", "ca", "n't", "afford", "another", "divorce", "smh"]
# ::lemmas ["Ross", "can", "not", "afford", "another", "divorce", "smh"]
(c50-3 / possible-01
       :ARG1 (c50-5 / afford-01
                    :ARG0 (c50-1 / person
                                 :name (c50-0 / name
                                              :op1 "Ross"))
                    :ARG1 (c50-6 / divorce-01
                                 :mod (c50-4 / another)))
       :mod (c50-2 / smh
                   :mode expressive)
       :polarity -)
