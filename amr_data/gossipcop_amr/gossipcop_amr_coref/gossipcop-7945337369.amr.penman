# ::snt Genial!! Parodico pero con gran estilo y es mas bien un homenaje a y
# ::tokens ["Genial", "!", "!", "Parodico", "pero", "con", "gran", "estilo", "y", "es", "mas", "bien", "un", "homenaje", "a", "y"]
# ::lemmas ["Genial", "!", "!", "Parodico", "pero", "con", "gran", "estilo", "y", "es", "mas", "bien", "un", "homenaje", "a", "y"]
(c1-1 / multi-sentence
      :snt1 (c1-5 / positive)
      :snt2 (c1-2 / pero
                  :op1 (c1-7 / con-cetera
                             :domain (c1-3 / estilo
                                           :mod (c1-8 / gran)))
                  :op2 (c1-4 / mas-01
                             :ARG1 (c1-9 / estilo
                                         :domain (c1-0 / y))
                             :ARG1-of (c1-11 / cause-01
                                             :ARG0 (c1-6 / homenaje
                                                         :domain (c1-10 / y)
                                                         :polarity -)))))

# ::snt Oh my ga! What Are Thooose!!
# ::tokens ["Oh", "my", "ga", "!", "What", "Are", "Thooose", "!", "!"]
# ::lemmas ["oh", "my", "ga", "!", "what", "be", "Thooose", "!", "!"]
(c2-1 / multi-sentence
      :snt1 (c2-0 / oh-my-god
                  :mode expressive)
      :snt2 (c2-2 / think-01
                  :ARG0 (c2-3 / i)
                  :ARG1 (c2-4 / amr-unknown)
                  :mode expressive))

# ::snt I love tour dress.Who is tour dressdesigner?
# ::tokens ["I", "love", "tour", "dress", ".", "Who", "is", "tour", "dressdesigner", "?"]
# ::lemmas ["i", "love", "tour", "dress", ".", "who", "be", "tour", "dressdesigner", "?"]
(c4-0 / multi-sentence
      :snt1 (c4-2 / love-01
                  :ARG0 (c4-6 / i)
                  :ARG1 (c4-8 / dress
                              :mod (c4-7 / tour)))
      :snt2 (c4-3 / person
                  :ARG0-of (c4-5 / design-01
                                 :ARG1 (c4-4 / dress
                                             :mod (c4-9 / tour)))
                  :domain (c4-1 / amr-unknown)))

# ::snt Great costumes!
# ::tokens ["Great", "costumes", "!"]
# ::lemmas ["great", "costume", "!"]
(c6-1 / costume
      :mod (c6-0 / great)
      :mode expressive)

# ::snt Beautiful.
# ::tokens ["Beautiful", "."]
# ::lemmas ["beautiful", "."]
(c7-0 / beautiful-02)

# ::snt La fama de Gabo.
# ::tokens ["La", "fama", "de", "Gabo", "."]
# ::lemmas ["La", "fama", "de", "Gabo", "."]
(c8-1 / fama
      :mod (c8-0 / Gabo))

# ::snt Great job!!
# ::tokens ["Great", "job", "!", "!"]
# ::lemmas ["great", "job", "!", "!"]
(c10-1 / job
       :mod (c10-0 / great)
       :mode expressive)

# ::snt Great job!
# ::tokens ["Great", "job", "!"]
# ::lemmas ["great", "job", "!"]
(c11-1 / job
       :mod (c11-0 / great)
       :mode expressive)

# ::snt super nice
# ::tokens ["super", "nice"]
# ::lemmas ["super", "nice"]
(c13-0 / nice-01
       :degree (c13-1 / super))

# ::snt I think your in marry day
# ::tokens ["I", "think", "your", "in", "marry", "day"]
# ::lemmas ["i", "think", "your", "in", "marry", "day"]
(c14-4 / think-01
       :ARG0 (c14-3 / i)
       :ARG1 (c14-0 / be-temporally-at-91
                    :ARG1 (c14-1 / you)
                    :ARG2 (c14-5 / day
                                 :mod (c14-2 / marry-01))))

# ::snt Yep Kim rocks it
# ::tokens ["Yep", "Kim", "rocks", "it"]
# ::lemmas ["Yep", "Kim", "rock", "it"]
(c15-0 / rock-03
       :ARG0 (c15-2 / person
                    :name (c15-1 / name
                                 :op1 "Kim"))
       :ARG1 (c15-3 / it))

# ::snt U are the best!!!
# ::tokens ["U", "are", "the", "best", "!", "!", "!"]
# ::lemmas ["u", "be", "the", "good", "!", "!", "!"]
(c16-1 / have-degree-91
       :ARG1 (c16-3 / you)
       :ARG2 (c16-0 / good-02
                    :ARG1 c16-3)
       :ARG3 (c16-2 / most)
       :mode expressive)

# ::snt Hi
# ::tokens ["Hi"]
# ::lemmas ["hi"]
(c17-0 / hi)

# ::snt I have a dream, and is to meet both you, Mr and Mrs West.
# ::tokens ["I", "have", "a", "dream", ",", "and", "is", "to", "meet", "both", "you", ",", "Mr", "and", "Mrs", "West", "."]
# ::lemmas ["i", "have", "a", "dream", ",", "and", "be", "to", "meet", "both", "you", ",", "Mr", "and", "Mrs", "West", "."]
(c19-4 / and
       :op1 (c19-8 / dream-01
                   :ARG0 (c19-7 / i))
       :op2 (c19-2 / meet-03
                   :ARG0 c19-7
                   :ARG1 (c19-6 / and
                                :op1 (c19-1 / you)
                                :op2 (c19-5 / person
                                            :name (c19-3 / name
                                                         :op1 "Mr"
                                                         :op2 "West")
                                            :op3-of c19-6)
                                :name c19-3
                                :op1 "Mrs"
                                :op2 "West"))
       :mod (c19-0 / both))

# ::snt love it!!
# ::tokens ["love", "it", "!", "!"]
# ::lemmas ["love", "it", "!", "!"]
(c20-1 / love-01
       :ARG0 (c20-2 / i)
       :ARG1 (c20-0 / it))

# ::snt Accessorizing with
# ::tokens ["Accessorizing", "with"]
# ::lemmas ["accessorize", "with"]
(c21-1 / accessorize-01
       :accompanier (c21-0 / event))

# ::snt Yass Gabo yass!
# ::tokens ["Yass", "Gabo", "yass", "!"]
# ::lemmas ["Yass", "Gabo", "yass", "!"]
(c22-1 / yass
       :mod (c22-0 / yass
                   :mode expressive)
       :mod (c22-2 / yass
                   :mode expressive)
       :mode expressive)

# ::snt Wow.
# ::tokens ["Wow", "."]
# ::lemmas ["wow", "."]
(c24-0 / wow
       :mode expressive)

# ::snt Nice, it's made with Pose software
# ::tokens ["Nice", ",", "it", "'s", "made", "with", "Pose", "software"]
# ::lemmas ["nice", ",", "it", "be", "make", "with", "Pose", "software"]
(c25-5 / and
       :op1 (c25-1 / nice-01)
       :op2 (c25-0 / make-01
                   :ARG1 (c25-4 / it)
                   :ARG3 (c25-2 / software
                                :name (c25-3 / name
                                             :op1 "Pose"))))

# ::snt Please help - this is my Son &amp; they are making him so ill in Menard. Now days in solitary without even a blanket, a coat or beanie hat. Often he is deprived of food &amp; even water. If you can't sign then please RT - thank you, every signature helps.
# ::tokens ["Please", "help", "-", "this", "is", "my", "Son", "&", "amp", ";", "they", "are", "making", "him", "so", "ill", "in", "Menard", ".", "Now", "days", "in", "solitary", "without", "even", "a", "blanket", ",", "a", "coat", "or", "beanie", "hat", ".", "Often", "he", "is", "deprived", "of", "food", "&", "amp", ";", "even", "water", ".", "If", "you", "ca", "n't", "sign", "then", "please", "RT", "-", "thank", "you", ",", "every", "signature", "helps", "."]
# ::lemmas ["please", "help", "-", "this", "be", "my", "Son", "&", "amp", ";", "they", "be", "make", "he", "so", "ill", "in", "Menard", ".", "now", "day", "in", "solitary", "without", "even", "a", "blanket", ",", "a", "coat", "or", "beanie", "hat", ".", "often", "he", "be", "deprive", "of", "food", "&", "amp", ";", "even", "water", ".", "if", "you", "can", "not", "sign", "then", "please", "RT", "-", "thank", "you", ",", "every", "signature", "help", "."]
(c27-18 / multi-sentence
        :snt1 (c27-10 / help-01
                      :ARG0 (c27-6 / you)
                      :ARG1-of (c27-20 / cause-01
                                       :ARG0 (c27-9 / make-02
                                                    :ARG0 (c27-15 / they)
                                                    :ARG1 (c27-30 / ill-01
                                                                  :ARG1 (c27-27 / person
                                                                                :ARG0-of (c27-29 / have-rel-role-91
                                                                                                 :ARG1 (c27-7 / i)
                                                                                                 :ARG2 (c27-0 / son)))
                                                                  :ARG2-of (c27-8 / have-degree-91
                                                                                  :ARG1 c27-27
                                                                                  :ARG3 (c27-4 / so)))
                                                    :location (c27-17 / city
                                                                      :name (c27-23 / name
                                                                                    :op1 "Menard"))))
                      :polite +
                      :mode imperative)
        :snt2 (c27-25 / ration-01
                      :ARG1 (c27-14 / and
                                    :op1 (c27-22 / food)
                                    :op2 (c27-13 / amp)
                                    :op3 (c27-28 / water))
                      :ARG2 (c27-21 / he)
                      :frequency (c27-5 / often)
                      :condition (c27-19 / possible-01
                                         :ARG1 (c27-3 / sign-01
                                                      :ARG0 c27-6)
                                         :polarity -))
        :snt3 (c27-11 / have-condition-91
                      :ARG1 (c27-12 / help-01
                                    :ARG0 (c27-24 / sign-01
                                                  :mod (c27-26 / every)))
                      :ARG2 (c27-2 / possible-01
                                   :ARG1 (c27-1 / sign-01
                                                :ARG0 (c27-16 / you))
                                   :polarity -)))

# ::snt Where is the dress from?
# ::tokens ["Where", "is", "the", "dress", "from", "?"]
# ::lemmas ["where", "be", "the", "dress", "from", "?"]
(c28-0 / dress
       :source (c28-1 / amr-unknown))

# ::snt Linda roupa.
# ::tokens ["Linda", "roupa", "."]
# ::lemmas ["Linda", "roupa", "."]
(c29-1 / person
       :name (c29-0 / name
                    :op1 "Linda"
                    :op2 "Roupa"))

# ::snt D e m a s i a d o es el mejor que he visto este ao. Nailed it
# ::tokens ["D", "e", "m", "a", "s", "i", "a", "d", "o", "es", "el", "mejor", "que", "he", "visto", "este", "ao", ".", "Nailed", "it"]
# ::lemmas ["d", "e", "m", "a", "s", "i", "a", "d", "o", "es", "el", "mejor", "que", "he", "visto", "este", "ao", ".", "nail", "it"]
(c30-0 / multi-sentence
       :snt1 (c30-9 / amr-unintelligible
                    :mod (c30-2 / s)
                    :value "D e m")
       :snt2 (c30-4 / el-mejor
                    :domain (c30-5 / he)
                    :ARG0-of (c30-6 / cause-01
                                    :ARG1 (c30-3 / visto-01
                                                 :ARG0 c30-5
                                                 :ARG1 (c30-7 / this))))
       :snt3 (c30-1 / nail-01
                    :ARG1 (c30-8 / it)))

# ::snt Hollup
# ::tokens ["Hollup"]
# ::lemmas ["Hollup"]
(c31-1 / person
       :name (c31-0 / name
                    :op1 "Hollup"))

# ::snt Ooh yeah? I doubt you can found such girls here in SA, unless you are into "slay queens"
# ::tokens ["Ooh", "yeah", "?", "I", "doubt", "you", "can", "found", "such", "girls", "here", "in", "SA", ",", "unless", "you", "are", "into", "\"", "slay", "queens", "\""]
# ::lemmas ["ooh", "yeah", "?", "i", "doubt", "you", "can", "find", "such", "girl", "here", "in", "SA", ",", "unless", "you", "be", "into", "\"", "slay", "queen", "\""]
(c32-4 / multi-sentence
       :snt1 (c32-0 / oh-yeah
                    :mode expressive)
       :snt2 (c32-14 / doubt-01
                     :ARG0 (c32-11 / i)
                     :ARG1 (c32-8 / possible-01
                                  :ARG1 (c32-1 / find-01
                                               :ARG0 (c32-3 / you)
                                               :ARG1 (c32-13 / girl
                                                             :mod (c32-6 / such))
                                               :location (c32-7 / here
                                                                :location (c32-10 / country
                                                                                  :name (c32-5 / name
                                                                                               :op1 "SA"))))
                                  :condition (c32-9 / like-01
                                                    :ARG0 c32-3
                                                    :ARG1 (c32-12 / queen
                                                                  :mod (c32-2 / slut))
                                                    :polarity -))))

# ::snt Lol... like a Kim K history, it comes with some perks
# ::tokens ["Lol", "...", "like", "a", "Kim", "K", "history", ",", "it", "comes", "with", "some", "perks"]
# ::lemmas ["Lol", "...", "like", "a", "Kim", "K", "history", ",", "it", "come", "with", "some", "perk"]
(c33-7 / come-03
       :ARG1 (c33-8 / it)
       :ARG2 (c33-5 / perk
                    :quant (c33-2 / some))
       :ARG2-of (c33-3 / resemble-01
                       :ARG1 (c33-4 / history
                                    :poss (c33-1 / person
                                                 :name (c33-0 / name
                                                              :op1 "Kim"
                                                              :op2 "K"))))
       :ARG2-of (c33-6 / laugh-01
                       :manner (c33-9 / loud)
                       :mode expressive))

# ::snt Don't they all?
# ::tokens ["Do", "n't", "they", "all", "?"]
# ::lemmas ["do", "not", "you", "all", "?"]
(c34-0 / request-confirmation-91
       :ARG1 (c34-2 / they
                    :mod (c34-1 / all)))

# ::snt I like a girl with a history...
# ::tokens ["I", "like", "a", "girl", "with", "a", "history", "..."]
# ::lemmas ["i", "like", "a", "girl", "with", "a", "history", "..."]
(c35-1 / like-01
       :ARG0 (c35-3 / i)
       :ARG1 (c35-4 / girl
                    :ARG0-of (c35-0 / have-03
                                    :ARG1 (c35-2 / history))))

# ::snt Kim is rich
# ::tokens ["Kim", "is", "rich"]
# ::lemmas ["Kim", "be", "rich"]
(c36-0 / rich
       :domain (c36-2 / person
                      :name (c36-1 / name
                                   :op1 "Kim")))

# ::snt Tricky
# ::tokens ["Tricky"]
# ::lemmas ["tricky"]
(c37-0 / tricky-02)

# ::snt We different people. I will also never date someone like that knowing. Preferences are not the same. Some even date people who are murderers. Asifani
# ::tokens ["We", "different", "people", ".", "I", "will", "also", "never", "date", "someone", "like", "that", "knowing", ".", "Preferences", "are", "not", "the", "same", ".", "Some", "even", "date", "people", "who", "are", "murderers", ".", "Asifani"]
# ::lemmas ["we", "different", "people", ".", "i", "will", "also", "never", "date", "someone", "like", "that", "know", ".", "preference", "be", "not", "the", "same", ".", "some", "even", "date", "people", "who", "be", "murderer", ".", "asifani"]
(c38-10 / multi-sentence
        :snt1 (c38-17 / person
                      :ARG1-of (c38-20 / differ-02)
                      :domain (c38-18 / we))
        :snt2 (c38-13 / date-02
                      :ARG0 (c38-19 / i)
                      :ARG1 (c38-0 / someone
                                   :ARG1-of (c38-15 / resemble-01
                                                    :ARG2 (c38-8 / that)))
                      :mod (c38-7 / also)
                      :time (c38-16 / ever)
                      :manner (c38-6 / know-01
                                     :ARG0 c38-19)
                      :polarity -)
        :snt3 (c38-4 / same-01
                     :ARG1 (c38-11 / prefer-01)
                     :polarity -)
        :snt4 (c38-12 / date-02
                      :ARG0 (c38-3 / some)
                      :ARG1 (c38-2 / person
                                   :ARG0-of (c38-5 / murder-01))
                      :mod (c38-9 / even))
        :snt5 (c38-1 / person
                     :name (c38-14 / name
                                   :op1 "Asifani")))

# ::snt But we not puppets like kanye
# ::tokens ["But", "we", "not", "puppets", "like", "kanye"]
# ::lemmas ["but", "we", "not", "puppet", "like", "kanye"]
(c39-3 / contrast-01
       :ARG2 (c39-2 / puppet
                    :example (c39-1 / person
                                    :name (c39-0 / name
                                                 :op1 "Kanye"))
                    :domain (c39-4 / we)
                    :polarity -))

# ::snt Kim is rich.
# ::tokens ["Kim", "is", "rich", "."]
# ::lemmas ["Kim", "be", "rich", "."]
(c40-0 / rich
       :domain (c40-2 / person
                      :name (c40-1 / name
                                   :op1 "Kim")))

# ::snt What are you trying to do
# ::tokens ["What", "are", "you", "trying", "to", "do"]
# ::lemmas ["what", "be", "you", "try", "to", "do"]
(c41-3 / try-01
       :ARG0 (c41-1 / you)
       :ARG1 (c41-0 / do-02
                    :ARG0 c41-1
                    :ARG1 (c41-2 / amr-unknown)))

# ::snt Is the girl worth $350 million?
# ::tokens ["Is", "the", "girl", "worth", "$", "350", "million", "?"]
# ::lemmas ["be", "the", "girl", "worth", "$", "350", "million", "?"]
(c42-1 / worth-01
       :polarity (c42-2 / amr-unknown)
       :ARG1 (c42-3 / girl)
       :ARG2 (c42-0 / monetary-quantity
                    :unit (c42-4 / dollar)
                    :quant 400000000))

# ::snt Oh YE has done lost his shit again.
# ::tokens ["Oh", "YE", "has", "done", "lost", "his", "shit", "again", "."]
# ::lemmas ["oh", "YE", "have", "do", "lose", "his", "shit", "again", "."]
(c43-4 / lose-02
       :ARG0 (c43-3 / person
                    :name (c43-1 / name
                                 :op1 "YE"))
       :ARG1 (c43-2 / shit
                    :poss c43-3)
       :mod (c43-0 / oh
                   :mode expressive)
       :mod (c43-5 / again))

# ::snt Is that her in the background....
# ::tokens ["Is", "that", "her", "in", "the", "background", "...."]
# ::lemmas ["be", "that", "she", "in", "the", "background", "...."]
(c44-2 / she
       :location (c44-1 / background)
       :polarity (c44-0 / amr-unknown))

# ::snt ???
# ::tokens ["?", "?", "?"]
# ::lemmas ["?", "?", "?"]
(c45-0 / amr-unknown)

# ::snt Don't worry CNN you're still the og of fake news!
# ::tokens ["Do", "n't", "worry", "CNN", "you", "'re", "still", "the", "og", "of", "fake", "news", "!"]
# ::lemmas ["do", "not", "worry", "CNN", "you", "be", "still", "the", "og", "of", "fake", "news", "!"]
(c46-6 / worry-01
       :ARG0 (c46-5 / publication
                    :name (c46-2 / name
                                 :op1 "CNN"))
       :ARG1 (c46-0 / og
                    :domain c46-5
                    :mod (c46-3 / still)
                    :topic (c46-4 / news
                                  :ARG1-of (c46-1 / fake-02)))
       :polarity -
       :mode imperative)

# ::snt CNN FAKE NEWS
# ::tokens ["CNN", "FAKE", "NEWS"]
# ::lemmas ["CNN", "FAKE", "NEWS"]
(c47-0 / fake-02
       :ARG0 (c47-1 / broadcast-program
                    :name (c47-3 / name
                                 :op1 "CNN"))
       :ARG1 (c47-2 / news))

# ::snt What? No
# ::tokens ["What", "?", "No"]
# ::lemmas ["what", "?", "no"]
(c48-1 / multi-sentence
       :snt1 (c48-2 / amr-unknown)
       :snt2 (c48-0 / no))

# ::snt Who cares one is constantly taking selfies the other one having a mental breakdown ...Both are just sad
# ::tokens ["Who", "cares", "one", "is", "constantly", "taking", "selfies", "the", "other", "one", "having", "a", "mental", "breakdown", "...", "Both", "are", "just", "sad"]
# ::lemmas ["who", "care", "one", "be", "constantly", "take", "selfie", "the", "other", "one", "have", "a", "mental", "breakdown", "...", "both", "be", "just", "sad"]
(c50-3 / multi-sentence
       :snt1 (c50-9 / care-01
                    :ARG0 (c50-5 / amr-unknown)
                    :ARG1 (c50-11 / and
                                  :op1 (c50-12 / take-01
                                               :ARG0 (c50-0 / one)
                                               :ARG1 (c50-7 / photograph-01
                                                            :ARG0 c50-0)
                                               :frequency (c50-14 / constant))
                                  :op2 (c50-2 / break-down-12
                                              :ARG0 (c50-1 / one
                                                           :mod (c50-13 / other))
                                              :ARG1 (c50-6 / mind))))
       :snt2 (c50-4 / sad-02
                    :ARG1 (c50-8 / both)
                    :mod (c50-10 / just)))
