# ::snt That's good , years in prison is not a joke .
# ::tokens ["That", "'s", "good", ",", "years", "in", "prison", "is", "not", "a", "joke", "."]
# ::lemmas ["that", "be", "good", ",", "year", "in", "prison", "be", "not", "a", "joke", "."]
(c1-2 / and
      :op1 (c1-6 / good-02
                 :ARG1 (c1-5 / that))
      :op2 (c1-3 / joke-01
                 :ARG2 (c1-4 / imprison-01
                             :ARG2 (c1-1 / multiple
                                         :op1 (c1-7 / temporal-quantity
                                                    :unit (c1-0 / year)
                                                    :quant 1)))
                 :polarity -))

# ::snt Good
# ::tokens ["Good"]
# ::lemmas ["good"]
(c2-0 / good-02)

# ::snt We don't care about this old coot!
# ::tokens ["We", "do", "n't", "care", "about", "this", "old", "coot", "!"]
# ::lemmas ["we", "do", "not", "care", "about", "this", "old", "coot", "!"]
(c3-1 / care-01
      :ARG0 (c3-2 / we)
      :ARG1 (c3-4 / coot
                  :mod (c3-0 / old)
                  :mod (c3-3 / this))
      :polarity -)

# ::snt I don't know, I think he's old more bull shit. Don't forget da JUICE. Bad man back in da days, still da best football player ever
# ::tokens ["I", "do", "n't", "know", ",", "I", "think", "he", "'s", "old", "more", "bull", "shit", ".", "Do", "n't", "forget", "da", "JUICE", ".", "Bad", "man", "back", "in", "da", "days", ",", "still", "da", "best", "football", "player", "ever"]
# ::lemmas ["i", "do", "not", "know", ",", "i", "think", "he", "be", "old", "more", "bull", "shit", ".", "do", "not", "forget", "da", "juice", ".", "bad", "man", "back", "in", "da", "day", ",", "still", "da", "good", "football", "player", "ever"]
(c4-15 / multi-sentence
       :snt1 (c4-9 / know-01
                   :ARG0 (c4-26 / i)
                   :polarity -)
       :snt2 (c4-12 / think-01
                    :ARG0 (c4-7 / i)
                    :ARG1 (c4-5 / old
                                :mod (c4-8 / more)
                                :domain (c4-10 / he)
                                :mod (c4-14 / bullshit
                                            :mod c4-8)))
       :snt3 (c4-20 / forget-01
                    :ARG0 (c4-6 / you)
                    :ARG1 (c4-23 / person
                                 :name (c4-21 / name
                                              :op1 "JUICE"))
                    :polarity -
                    :mode imperative)
       :snt4 (c4-11 / and
                    :op1 (c4-19 / man
                                :ARG1-of (c4-1 / bad-07)
                                :time (c4-27 / day
                                             :mod (c4-18 / da))
                                :mod (c4-4 / back))
                    :op2 (c4-25 / have-degree-91
                                :ARG1 (c4-16 / person
                                             :ARG0-of (c4-3 / play-01
                                                            :ARG1 (c4-24 / football))
                                             :mod (c4-0 / still))
                                :ARG2 (c4-13 / good-03
                                             :ARG1 c4-16)
                                :ARG3 (c4-17 / most)
                                :ARG5 (c4-2 / person
                                            :time (c4-22 / ever)))))

# ::snt Very concerned
# ::tokens ["Very", "concerned"]
# ::lemmas ["very", "concerned"]
(c5-0 / concern-01
      :degree (c5-1 / very))

# ::snt Hopfully whats next is that they lock him back up
# ::tokens ["Hopfully", "what", "s", "next", "is", "that", "they", "lock", "him", "back", "up"]
# ::lemmas ["hopfully", "what", "s", "next", "be", "that", "they", "lock", "he", "back", "up"]
(c7-2 / hope-01
      :ARG1 (c7-5 / thing
                  :mod (c7-1 / next)
                  :domain (c7-3 / lock-up-03
                                :ARG0 (c7-6 / they)
                                :ARG1 (c7-4 / he)
                                :mod (c7-0 / back))))

# ::snt Good Sex
# ::tokens ["Good", "Sex"]
# ::lemmas ["good", "sex"]
(c8-1 / sex-01
      :ARG1-of (c8-0 / good-02))

# ::snt to TV show.
# ::tokens ["to", "TV", "show", "."]
# ::lemmas ["to", "tv", "show", "."]
(c9-1 / show-04
      :ARG3 (c9-0 / television))

# ::snt Hey O.J. flip the script and pretend to be a right wing evanhypocrite Christian and donald trash supporter ALL WILL BE FORGIVEN!
# ::tokens ["Hey", "O.J.", "flip", "the", "script", "and", "pretend", "to", "be", "a", "right", "wing", "evanhypocrite", "Christian", "and", "donald", "trash", "supporter", "ALL", "WILL", "BE", "FORGIVEN", "!"]
# ::lemmas ["hey", "O.J.", "flip", "the", "script", "and", "pretend", "to", "be", "a", "right", "wing", "evanhypocrite", "Christian", "and", "donald", "trash", "supporter", "all", "will", "be", "forgiven", "!"]
(c10-0 / forgive-01
       :ARG1 (c10-8 / person
                    :ARG0-of (c10-9 / flip-01
                                    :ARG1 (c10-4 / script)
                                    :mode imperative)
                    :ARG0-of (c10-3 / pretend-01
                                    :ARG1 (c10-15 / person
                                                  :ARG0-of (c10-1 / support-01
                                                                  :ARG1 (c10-5 / and
                                                                               :op1 (c10-11 / person
                                                                                            :mod (c10-6 / religious-group
                                                                                                        :name (c10-2 / name
                                                                                                                     :op1 "Christian")))
                                                                               :op2 (c10-13 / trash
                                                                                            :mod c10-6
                                                                                            :name (c10-7 / name
                                                                                                         :op1 "Donald"))))
                                                  :ARG1-of (c10-16 / right-08)
                                                  :mod (c10-10 / hypocritical))))
       :mod (c10-14 / all)
       :mod (c10-12 / hey
                    :mode expressive))

# ::snt Dancing with the stars?
# ::tokens ["Dancing", "with", "the", "stars", "?"]
# ::lemmas ["dance", "with", "the", "star", "?"]
(c11-1 / dance-01
       :polarity (c11-2 / amr-unknown)
       :ARG2 (c11-0 / star))

# ::snt Coming out as an uninvited guest in keeping up with the kardashian.with everyone face like
# ::tokens ["Coming", "out", "as", "an", "uninvited", "guest", "in", "keeping", "up", "with", "the", "kardashian.with", "everyone", "face", "like"]
# ::lemmas ["come", "out", "as", "an", "uninvited", "guest", "in", "keep", "up", "with", "the", "kardashian.with", "everyone", "face", "like"]
(c13-6 / come-out-09
       :ARG1 (c13-8 / guest
                    :ARG1-of (c13-7 / invite-01
                                    :ARG2 (c13-5 / keep-up-05
                                                 :ARG0 c13-8
                                                 :ARG1 (c13-4 / person
                                                              :mod (c13-9 / country
                                                                          :name (c13-1 / name
                                                                                       :op1 "Kardashian"))))
                                    :polarity -))
       :manner (c13-0 / face
                      :ARG1-of (c13-2 / resemble-01
                                      :ARG2 (c13-3 / everyone))))

# ::snt Another murder
# ::tokens ["Another", "murder"]
# ::lemmas ["another", "murder"]
(c14-0 / murder-01
       :mod (c14-1 / another))

# ::snt Headline should read...O.J Simpson,Double Murderer,Released From Prison After Years.
# ::tokens ["Headline", "should", "read", "...", "O.J", "Simpson", ",", "Double", "Murderer", ",", "Released", "From", "Prison", "After", "Years", "."]
# ::lemmas ["Headline", "should", "read", "...", "O.J", "Simpson", ",", "Double", "Murderer", ",", "release", "from", "Prison", "after", "Years", "."]
(c16-4 / recommend-01
       :ARG1 (c16-12 / read-01
                     :ARG1 (c16-5 / headline)
                     :ARG3 (c16-8 / release-01
                                  :ARG1 (c16-6 / person
                                               :name (c16-1 / name
                                                            :op1 "O.J."
                                                            :op2 "Simpson")
                                               :ARG0-of (c16-2 / murder-01
                                                               :mod (c16-11 / double)))
                                  :ARG2 (c16-3 / prison)
                                  :time (c16-10 / after
                                                :op1 (c16-7 / multiple
                                                            :op1 (c16-9 / temporal-quantity
                                                                        :unit (c16-0 / year)
                                                                        :quant 1))))))

# ::snt Who cares need to be back in jail
# ::tokens ["Who", "cares", "need", "to", "be", "back", "in", "jail"]
# ::lemmas ["who", "care", "need", "to", "be", "back", "in", "jail"]
(c17-3 / care-01
       :ARG0 (c17-5 / amr-unknown)
       :ARG1 (c17-1 / need-01
                    :ARG1 (c17-0 / be-located-at-91
                                 :ARG2 (c17-4 / jail)
                                 :mod (c17-2 / back))))

# ::snt It won't take long and he will be back,
# ::tokens ["It", "wo", "n't", "take", "long", "and", "he", "will", "be", "back", ","]
# ::lemmas ["it", "will", "not", "take", "long", "and", "he", "will", "be", "back", ","]
(c18-1 / and
       :op1 (c18-6 / take-10
                   :ARG0 (c18-5 / it)
                   :ARG1 (c18-3 / long-03)
                   :polarity -)
       :op2 (c18-0 / be-located-at-91
                   :ARG1 (c18-2 / he)
                   :ARG2 (c18-4 / back)))

# ::snt Maybe someone will " pay him back " .., just sayin
# ::tokens ["Maybe", "someone", "will", "\"", "pay", "him", "back", "\"", "..", ",", "just", "sayin"]
# ::lemmas ["maybe", "someone", "will", "\"", "pay", "he", "back", "\"", "..", ",", "just", "sayin"]
(c19-7 / and
       :op1 (c19-5 / possible-01
                   :ARG1 (c19-2 / pay-01
                                :ARG0 (c19-3 / someone)
                                :ARG1 (c19-1 / back)
                                :ARG2 (c19-4 / he)))
       :op2 (c19-0 / say-01
                   :mod (c19-6 / just)))

# ::snt As I Tweeted: This IS ROCTOBER!!!! Only GOOD Things Happen! Hierdie Is: ROKTOBER Die Mooiste Maand!
# ::tokens ["As", "I", "Tweeted", ":", "This", "IS", "ROCTOBER", "!", "!", "!", "!", "Only", "GOOD", "Things", "Happen", "!", "Hierdie", "Is", ":", "ROKTOBER", "Die", "Mooiste", "Maand", "!"]
# ::lemmas ["as", "i", "tweet", ":", "this", "be", "roctober", "!", "!", "!", "!", "only", "good", "thing", "Happen", "!", "Hierdie", "be", ":", "ROKTOBER", "die", "Mooiste", "Maand", "!"]
(c20-1 / multi-sentence
       :snt1 (c20-8 / write-01
                    :ARG0 (c20-12 / i)
                    :ARG1 (c20-4 / roll-01
                                 :ARG1 (c20-9 / city)
                                 :time (c20-15 / date-entity
                                               :month 10)
                                 :mode expressive))
       :snt2 (c20-5 / have-mod-91
                    :ARG1 (c20-13 / thing
                                  :mod (c20-0 / only)
                                  :ARG1-of (c20-14 / good-02))
                    :ARG2 c20-4)
       :snt3 (c20-11 / have-mod-91
                     :ARG1 (c20-6 / person
                                  :name (c20-2 / name
                                               :op1 "Hierdie"))
                     :ARG2 (c20-10 / die-01
                                   :ARG1 (c20-3 / person
                                                :name (c20-7 / name
                                                             :op1 "Mooiste"
                                                             :op2 "Maand")))))

# ::snt Neighbors, lock your doors
# ::tokens ["Neighbors", ",", "lock", "your", "doors"]
# ::lemmas ["neighbor", ",", "lock", "your", "door"]
(c21-3 / lock-01
       :ARG0 (c21-0 / you
                    :ARG0-of (c21-2 / have-rel-role-91
                                    :ARG2 (c21-1 / neighbor)))
       :ARG1 (c21-4 / door
                    :poss c21-0)
       :mode imperative)

# ::snt He will be locked up again we all know it!!
# ::tokens ["He", "will", "be", "locked", "up", "again", "we", "all", "know", "it", "!", "!"]
# ::lemmas ["he", "will", "be", "lock", "up", "again", "we", "all", "know", "it", "!", "!"]
(c22-2 / lock-up-03
       :ARG1 (c22-0 / he)
       :mod (c22-5 / again)
       :ARG1-of (c22-1 / know-01
                       :ARG0 (c22-3 / we
                                    :mod (c22-4 / all))))

# ::snt love it. Xx
# ::tokens ["love", "it", ".", "Xx"]
# ::lemmas ["love", "it", ".", "Xx"]
(c24-0 / multi-sentence
       :snt1 (c24-4 / love-01
                    :ARG0 (c24-5 / i)
                    :ARG1 (c24-2 / it))
       :snt2 (c24-3 / person
                    :name (c24-1 / name
                                 :op1 "xx")))

# ::snt Disneyland.
# ::tokens ["Disneyland", "."]
# ::lemmas ["Disneyland", "."]
(c25-1 / amusement-park
       :name (c25-0 / name
                    :op1 "Disneyland"))
