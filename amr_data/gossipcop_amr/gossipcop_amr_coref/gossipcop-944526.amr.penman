# ::snt Lmao
# ::tokens ["Lmao"]
# ::lemmas ["lmao"]
(c1-1 / laugh-01
      :ARG0 (c1-2 / i
                  :part (c1-3 / ass))
      :ARG3 (c1-0 / off
                  :op1 c1-3))

# ::snt Wow thats disgusting... I wished I never asked ffs
# ::tokens ["Wow", "that", "s", "disgusting", "...", "I", "wished", "I", "never", "asked", "ffs"]
# ::lemmas ["wow", "that", "s", "disgusting", "...", "i", "wish", "i", "never", "ask", "ffs"]
(c2-1 / multi-sentence
      :snt1 (c2-9 / disgust-01
                  :ARG0 (c2-8 / that)
                  :mod (c2-6 / wow
                             :mode expressive))
      :snt2 (c2-5 / wish-01
                  :ARG0 (c2-7 / i)
                  :ARG1 (c2-2 / ask-01
                              :ARG0 c2-7
                              :ARG2 (c2-4 / person
                                          :ARG0-of (c2-0 / fuck-01))
                              :time (c2-3 / ever)
                              :polarity -)))

# ::snt That aint no cat
# ::tokens ["That", "ai", "nt", "no", "cat"]
# ::lemmas ["that", "be", "nt", "no", "cat"]
(c3-0 / cat
      :domain (c3-1 / that)
      :polarity -)

# ::snt Hope hes ok
# ::tokens ["Hope", "he", "s", "ok"]
# ::lemmas ["hope", "he", "s", "ok"]
(c4-2 / hope-01
      :ARG0 (c4-3 / i)
      :ARG1 (c4-1 / okay-03
                  :ARG1 (c4-0 / he)))

# ::snt So sorry for the loss of Gia
# ::tokens ["So", "sorry", "for", "the", "loss", "of", "Gia"]
# ::lemmas ["so", "sorry", "for", "the", "loss", "of", "Gia"]
(c5-2 / sorry-01
      :ARG2 (c5-4 / lose-02
                  :ARG1 (c5-3 / person
                              :name (c5-1 / name
                                          :op1 "Gia")))
      :degree (c5-0 / so))

# ::snt RIP cat, it is now liberated from this world! Speaking of liberated buy the new album by on iTunes guys!
# ::tokens ["RIP", "cat", ",", "it", "is", "now", "liberated", "from", "this", "world", "!", "Speaking", "of", "liberated", "buy", "the", "new", "album", "by", "on", "iTunes", "guys", "!"]
# ::lemmas ["RIP", "cat", ",", "it", "be", "now", "liberate", "from", "this", "world", "!", "speak", "of", "liberated", "buy", "the", "new", "album", "by", "on", "iTunes", "guy", "!"]
(c7-1 / multi-sentence
      :snt1 (c7-3 / say-01
                  :ARG1 (c7-5 / rest-01
                              :ARG1 (c7-9 / cat)
                              :manner (c7-7 / peace))
                  :ARG2 c7-9
                  :snt2-of c7-1)
      :ARG1 (c7-0 / buy-01
                  :ARG0 (c7-13 / guy)
                  :ARG1 (c7-12 / album
                               :ARG1-of (c7-2 / new-01))
                  :medium (c7-4 / product
                                :name (c7-6 / name
                                            :op1 "iTunes"))
                  :topic (c7-8 / liberate-01
                               :ARG1 (c7-10 / world
                                            :mod (c7-11 / this)))
                  :mode imperative)
      :ARG2 c7-13)

# ::snt stan list jokes are not funny lena was so so sad guys please be a decent humanbeing for a sec
# ::tokens ["stan", "list", "jokes", "are", "not", "funny", "lena", "was", "so", "so", "sad", "guys", "please", "be", "a", "decent", "humanbeing", "for", "a", "sec"]
# ::lemmas ["stan", "list", "joke", "be", "not", "funny", "lena", "be", "so", "so", "sad", "guy", "please", "be", "a", "decent", "humanbeing", "for", "a", "sec"]
(c8-0 / funny
      :domain (c8-12 / joke-01
                     :ARG2 (c8-9 / list
                                 :mod (c8-8 / product
                                            :name (c8-3 / name
                                                        :op1 "stan"))))
      :ARG1-of (c8-11 / cause-01
                      :ARG0 (c8-5 / sad-02
                                  :ARG1 (c8-4 / person
                                              :name (c8-7 / name
                                                          :op1 "ena"))
                                  :degree (c8-1 / so)))
      :ARG1-of (c8-15 / cause-01
                      :ARG0 (c8-16 / say-01
                                   :ARG0 c8-4
                                   :ARG1 (c8-2 / being
                                               :mod (c8-10 / human)
                                               :mod (c8-14 / decent)
                                               :domain c8-4
                                               :duration (c8-13 / temporal-quantity
                                                                :unit (c8-6 / second)
                                                                :quant 1)
                                               :polite +))
                      :ARG2 c8-4)
      :polarity -)

# ::snt I am so sorry for your loss. I never knew I could make the sounds of grief made when my cat passed. I still wear her collar as a bracelet, it's been nearly yrs. Get another cat, NOT to replace but to have a new furry friend to fill your mind with happy thoughts. Chose wisely
# ::tokens ["I", "am", "so", "sorry", "for", "your", "loss", ".", "I", "never", "knew", "I", "could", "make", "the", "sounds", "of", "grief", "made", "when", "my", "cat", "passed", ".", "I", "still", "wear", "her", "collar", "as", "a", "bracelet", ",", "it", "'s", "been", "nearly", "yrs", ".", "Get", "another", "cat", ",", "NOT", "to", "replace", "but", "to", "have", "a", "new", "furry", "friend", "to", "fill", "your", "mind", "with", "happy", "thoughts", ".", "Chose", "wisely"]
# ::lemmas ["i", "be", "so", "sorry", "for", "your", "loss", ".", "i", "never", "know", "i", "could", "make", "the", "sound", "of", "grief", "make", "when", "my", "cat", "pass", ".", "i", "still", "wear", "her", "collar", "as", "a", "bracelet", ",", "it", "be", "be", "nearly", "yr", ".", "get", "another", "cat", ",", "not", "to", "replace", "but", "to", "have", "a", "new", "furry", "friend", "to", "fill", "your", "mind", "with", "happy", "thought", ".", "choose", "wisely"]
(c10-23 / multi-sentence
        :snt1 (c10-0 / sorry-01
                     :ARG1 (c10-42 / i)
                     :ARG2 (c10-1 / lose-02
                                  :ARG0 (c10-9 / you))
                     :degree (c10-8 / so))
        :snt2 (c10-13 / know-01
                      :ARG0 (c10-10 / i)
                      :ARG1 (c10-36 / possible-01
                                    :ARG1 (c10-6 / sound-01
                                                 :ARG1 (c10-17 / grief)
                                                 :ARG1-of (c10-12 / make-01
                                                                  :time (c10-24 / pass-20
                                                                                :ARG1 (c10-26 / cat
                                                                                              :poss c10-10)))))
                      :time (c10-35 / ever)
                      :polarity -)
        :snt3 (c10-40 / wear-01
                      :ARG0 (c10-20 / i)
                      :ARG1 (c10-21 / collar
                                    :poss (c10-3 / cat
                                                 :poss c10-20))
                      :ARG3 (c10-22 / bracelet)
                      :mod (c10-32 / still)
                      :time (c10-16 / after
                                    :op1 (c10-31 / now)
                                    :quant (c10-25 / nearly
                                                   :op1 (c10-18 / temporal-quantity
                                                                :unit (c10-19 / year)
                                                                :quant 1))))
        :snt4 (c10-4 / get-01
                     :ARG0 (c10-7 / you)
                     :ARG1 (c10-29 / cat
                                   :mod (c10-15 / another))
                     :purpose (c10-34 / replace-01
                                      :ARG1 c10-7
                                      :ARG2 (c10-14 / have-03
                                                    :ARG0 c10-7
                                                    :ARG1 (c10-5 / person
                                                                 :ARG0-of (c10-41 / have-rel-role-91
                                                                                  :ARG1 c10-7
                                                                                  :ARG2 (c10-30 / friend))
                                                                 :mod (c10-37 / furry)
                                                                 :ARG1-of (c10-38 / new-01))
                                                    :purpose (c10-39 / fill-01
                                                                     :ARG0 c10-7
                                                                     :ARG1 (c10-28 / mind
                                                                                   :poss c10-7)
                                                                     :ARG2 (c10-27 / thing
                                                                                   :ARG1-of (c10-43 / think-01)
                                                                                   :ARG1-of (c10-11 / happy-02))))
                                      :polarity -)
                     :snt5 (c10-2 / wise
                                  :domain (c10-33 / you))
                     :mode imperative))

# ::snt Probably cause she doesnt know how to take care of a hairless cat cause they have a lot of health issues &amp; need proper care
# ::tokens ["Probably", "cause", "she", "does", "nt", "know", "how", "to", "take", "care", "of", "a", "hairless", "cat", "cause", "they", "have", "a", "lot", "of", "health", "issues", "&", "amp", ";", "need", "proper", "care"]
# ::lemmas ["probably", "cause", "she", "do", "not", "know", "how", "to", "take", "care", "of", "a", "hairless", "cat", "cause", "they", "have", "a", "lot", "of", "health", "issue", "&", "amp", ";", "need", "proper", "care"]
(c12-8 / probable
       :domain (c12-11 / cause-01
                       :ARG0 (c12-9 / know-01
                                    :ARG0 (c12-4 / she)
                                    :ARG1 (c12-15 / thing
                                                  :manner-of (c12-17 / care-03
                                                                     :ARG0 c12-4
                                                                     :ARG1 (c12-12 / cat
                                                                                   :ARG0-of (c12-7 / have-03
                                                                                                   :ARG1 (c12-13 / hair)
                                                                                                   :polarity -))))
                                    :ARG1-of (c12-0 / cause-01
                                                    :ARG0 (c12-5 / and
                                                                 :op1 (c12-14 / issue-02
                                                                              :ARG0 (c12-6 / health)
                                                                              :ARG1 c12-12)
                                                                 :op2 (c12-16 / amp)
                                                                 :quant (c12-10 / lot))
                                                    :op3 (c12-2 / need-01
                                                                :ARG0 c12-12
                                                                :ARG1 (c12-1 / care-03
                                                                             :mod (c12-3 / proper))))
                                    :polarity -)))

# ::snt Why do people hate this lady? Never heard of her before
# ::tokens ["Why", "do", "people", "hate", "this", "lady", "?", "Never", "heard", "of", "her", "before"]
# ::lemmas ["why", "do", "people", "hate", "this", "lady", "?", "never", "hear", "of", "she", "before"]
(c13-1 / multi-sentence
       :snt1 (c13-6 / cause-01
                    :ARG0 (c13-10 / amr-unknown)
                    :ARG1 (c13-3 / hate-01
                                 :ARG0 (c13-4 / person)
                                 :ARG1 (c13-5 / lady
                                              :mod (c13-8 / this))))
       :snt2 (c13-7 / hear-01
                    :ARG0 (c13-9 / i)
                    :ARG1 c13-5
                    :time (c13-2 / ever)
                    :time (c13-0 / before)
                    :polarity -))

# ::snt please shut up
# ::tokens ["please", "shut", "up"]
# ::lemmas ["please", "shut", "up"]
(c14-1 / shut-up-06
       :ARG0 (c14-0 / you
                    :ARG1-of c14-1)
       :mode imperative
       :polite +)

# ::snt Sksksksk
# ::tokens ["Sksksksk"]
# ::lemmas ["sksksksk"]
(c15-1 / person
       :name (c15-0 / name
                    :op1 "Sksksksk"))

# ::snt Dont get a sphynx cat or any cat if you dont know how to take care of it properly smh
# ::tokens ["Do", "nt", "get", "a", "sphynx", "cat", "or", "any", "cat", "if", "you", "do", "nt", "know", "how", "to", "take", "care", "of", "it", "properly", "smh"]
# ::lemmas ["do", "not", "get", "a", "sphynx", "cat", "or", "any", "cat", "if", "you", "do", "not", "know", "how", "to", "take", "care", "of", "it", "properly", "smh"]
(c16-10 / get-01
        :ARG0 (c16-2 / you)
        :ARG1 (c16-0 / or
                     :op1 (c16-6 / cat
                                 :mod (c16-3 / sphynx))
                     :op2 (c16-11 / cat
                                  :mod (c16-9 / any)))
        :condition (c16-4 / know-01
                          :ARG0 c16-2
                          :ARG1 (c16-8 / thing
                                       :manner-of (c16-7 / care-03
                                                         :ARG0 c16-2
                                                         :ARG1 c16-0
                                                         :manner (c16-5 / proper)))
                          :polarity -)
        :mod (c16-1 / smh
                    :mode expressive)
        :polarity -
        :mode imperative)

# ::snt who cares, stan LOO
# ::tokens ["who", "cares", ",", "stan", "LOO"]
# ::lemmas ["who", "care", ",", "stan", "LOO"]
(c17-1 / and
       :op1 (c17-3 / care-01
                   :ARG0 (c17-5 / amr-unknown))
       :op2 (c17-2 / laugh-01
                   :ARG0 (c17-4 / i)
                   :manner (c17-6 / loud)
                   :degree (c17-0 / so)))

# ::snt What an ugly cat. RIP tho
# ::tokens ["What", "an", "ugly", "cat", ".", "RIP", "tho"]
# ::lemmas ["what", "an", "ugly", "cat", ".", "rip", "tho"]
(c18-0 / multi-sentence
       :snt1 (c18-4 / cat
                    :mod (c18-5 / ugly
                                :degree (c18-1 / so)))
       :snt2 (c18-3 / have-concession-91
                    :ARG1 (c18-2 / RIP-01
                                 :ARG1 c18-4)))

# ::snt aw
# ::tokens ["aw"]
# ::lemmas ["aw"]
(c19-0 / aw
       :mode expressive)

# ::snt Who?
# ::tokens ["Who", "?"]
# ::lemmas ["who", "?"]
(c20-0 / amr-unknown)

# ::snt also some of you are so rude, an animal just died, have some respect, who cares if it's lena dunham's cat or not
# ::tokens ["also", "some", "of", "you", "are", "so", "rude", ",", "an", "animal", "just", "died", ",", "have", "some", "respect", ",", "who", "cares", "if", "it", "'s", "lena", "dunham", "'s", "cat", "or", "not"]
# ::lemmas ["also", "some", "of", "you", "be", "so", "rude", ",", "an", "animal", "just", "die", ",", "have", "some", "respect", ",", "who", "care", "if", "it", "be", "lena", "dunham", "'s", "cat", "or", "not"]
(c21-11 / and
        :op1 (c21-16 / rude-01
                     :ARG1 (c21-18 / person
                                   :ARG1-of (c21-19 / include-91
                                                    :ARG2 (c21-6 / you))
                                   :quant (c21-0 / some))
                     :mod (c21-10 / also)
                     :ARG2-of (c21-7 / have-degree-91
                                     :ARG1 c21-18
                                     :ARG3 (c21-4 / so)))
        :op2 (c21-17 / die-01
                     :ARG1 (c21-8 / animal)
                     :time (c21-9 / just))
        :op3 (c21-2 / respect-01
                    :ARG0 c21-18
                    :mod (c21-3 / some))
        :op4 (c21-14 / care-01
                     :ARG0 (c21-20 / amr-unknown)
                     :ARG1 (c21-5 / or
                                  :op1 (c21-12 / cat
                                               :poss (c21-13 / person
                                                             :name (c21-15 / name
                                                                           :op1 "Lena"
                                                                           :op2 "Dunham")))
                                  :op2 (c21-1 / cat
                                              :poss c21-13
                                              :polarity -))))

# ::snt why did it only survive months?!?!?!!?!?!
# ::tokens ["why", "did", "it", "only", "survive", "months", "?", "!", "?", "!", "?", "!", "!", "?", "!", "?", "!"]
# ::lemmas ["why", "do", "it", "only", "survive", "months", "?", "!", "?", "!", "?", "!", "!", "?", "!", "?", "!"]
(c22-2 / survive-01
       :ARG0 (c22-6 / it)
       :ARG1 (c22-1 / multiple
                    :op1 (c22-7 / temporal-quantity
                                :unit (c22-4 / month)
                                :quant 1))
       :mod (c22-0 / only)
       :ARG1-of (c22-5 / cause-01
                       :ARG0 (c22-3 / amr-unknown)))

# ::snt Hope it's okay
# ::tokens ["Hope", "it", "'s", "okay"]
# ::lemmas ["hope", "it", "be", "okay"]
(c23-2 / hope-01
       :ARG0 (c23-3 / i)
       :ARG1 (c23-1 / okay-04
                    :ARG1 (c23-0 / it)))

# ::snt What about the dog she gave away?
# ::tokens ["What", "about", "the", "dog", "she", "gave", "away", "?"]
# ::lemmas ["what", "about", "the", "dog", "she", "give", "away", "?"]
(c24-3 / amr-unknown
       :topic (c24-1 / dog
                     :ARG1-of (c24-0 / give-away-02
                                     :ARG0 (c24-2 / she))))

# ::snt Stan list
# ::tokens ["Stan", "list"]
# ::lemmas ["Stan", "list"]
(c25-2 / list
       :mod (c25-0 / person
                   :name (c25-1 / name
                                :op1 "Stan")))

# ::snt Rest in peace cat
# ::tokens ["Rest", "in", "peace", "cat"]
# ::lemmas ["rest", "in", "peace", "cat"]
(c26-3 / say-01
       :ARG1 (c26-0 / rest-01
                    :ARG1 (c26-1 / cat)
                    :manner (c26-2 / peace))
       :ARG2 c26-1)

# ::snt That was classic, that was classic!
# ::tokens ["That", "was", "classic", ",", "that", "was", "classic", "!"]
# ::lemmas ["that", "be", "classic", ",", "that", "be", "classic", "!"]
(c27-2 / and
       :op1 (c27-0 / classic
                   :domain (c27-1 / that)
                   :op2-of c27-2)
       :mode expressive)

# ::snt Stan list
# ::tokens ["Stan", "list"]
# ::lemmas ["Stan", "list"]
(c28-2 / list
       :mod (c28-0 / person
                   :name (c28-1 / name
                                :op1 "Stan")))

# ::snt Stan list
# ::tokens ["Stan", "list"]
# ::lemmas ["Stan", "list"]
(c29-2 / list
       :mod (c29-0 / person
                   :name (c29-1 / name
                                :op1 "Stan")))

# ::snt we dont care
# ::tokens ["we", "do", "nt", "care"]
# ::lemmas ["we", "do", "not", "care"]
(c30-0 / care-01
       :ARG0 (c30-1 / we)
       :polarity -)

# ::snt the cat was cute
# ::tokens ["the", "cat", "was", "cute"]
# ::lemmas ["the", "cat", "be", "cute"]
(c32-0 / cute
       :domain (c32-1 / cat))

# ::snt Stan List
# ::tokens ["Stan", "List"]
# ::lemmas ["Stan", "List"]
(c33-1 / person
       :name (c33-0 / name
                    :op1 "Stan"
                    :op2 "List"))

# ::snt Stan list
# ::tokens ["Stan", "list"]
# ::lemmas ["Stan", "list"]
(c34-2 / list
       :mod (c34-0 / person
                   :name (c34-1 / name
                                :op1 "Stan")))

# ::snt The cat is free
# ::tokens ["The", "cat", "is", "free"]
# ::lemmas ["the", "cat", "be", "free"]
(c35-0 / free-04
       :ARG1 (c35-1 / cat))

# ::snt So sorry that cat had to live with her
# ::tokens ["So", "sorry", "that", "cat", "had", "to", "live", "with", "her"]
# ::lemmas ["so", "sorry", "that", "cat", "have", "to", "live", "with", "she"]
(c36-2 / sorry-01
       :ARG2 (c36-0 / obligate-01
                    :ARG1 (c36-4 / cat
                                 :mod (c36-5 / that))
                    :ARG2 (c36-3 / live-01
                                 :ARG0 c36-4
                                 :accompanier (c36-1 / she)))
       :degree (c36-6 / so))
