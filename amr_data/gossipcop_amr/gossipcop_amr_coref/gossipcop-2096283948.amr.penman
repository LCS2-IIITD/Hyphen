# ::snt Yeah I Think We Both Dropping Sum in October Too... Im Doin a Whole Tape w
# ::tokens ["Yeah", "I", "Think", "We", "Both", "Dropping", "Sum", "in", "October", "Too", "...", "I", "m", "Doin", "a", "Whole", "Tape", "w"]
# ::lemmas ["yeah", "i", "think", "we", "both", "Dropping", "Sum", "in", "October", "too", "...", "i", "m", "doin", "a", "Whole", "Tape", "w"]
(c1-2 / multi-sentence
      :snt1 (c1-10 / think-01
                   :ARG0 (c1-9 / i)
                   :ARG1 (c1-12 / drop-01
                                :ARG0 (c1-7 / we
                                            :mod (c1-0 / both))
                                :ARG1 (c1-3 / Sum)
                                :time (c1-8 / date-entity
                                            :month 10)
                                :mod (c1-13 / too))
                   :mod (c1-1 / yeah))
      :snt2 (c1-5 / do-02
                  :ARG0 (c1-4 / i)
                  :ARG1 (c1-11 / tape
                               :mod (c1-6 / whole))))

# ::snt KD fmu
# ::tokens ["KD", "fmu"]
# ::lemmas ["KD", "fmu"]
(c2-0 / amr-empty)

# ::snt Don't act like you don't know how that's possible. Quit being so humble.
# ::tokens ["Do", "n't", "act", "like", "you", "do", "n't", "know", "how", "that", "'s", "possible", ".", "Quit", "being", "so", "humble", "."]
# ::lemmas ["do", "not", "act", "like", "you", "do", "not", "know", "how", "that", "be", "possible", ".", "quit", "be", "so", "humble", "."]
(c3-1 / multi-sentence
      :snt1 (c3-3 / act-01
                  :ARG0 (c3-0 / you)
                  :conj-as-if (c3-5 / know-01
                                    :ARG0 c3-0
                                    :ARG1 (c3-8 / thing
                                                :manner-of (c3-6 / possible-01
                                                                 :ARG1 (c3-10 / that)))
                                    :polarity -)
                  :mode imperative
                  :polarity -)
      :snt2 (c3-7 / quit-01
                  :ARG0 (c3-9 / you)
                  :ARG1 (c3-4 / humble
                              :degree (c3-2 / so)
                              :domain c3-9)
                  :mode imperative))

# ::snt Because we are all nostalgic with so many year tours and reunions happening nowadays! You guys were a big part of a lot of our lives and we love to relive that.
# ::tokens ["Because", "we", "are", "all", "nostalgic", "with", "so", "many", "year", "tours", "and", "reunions", "happening", "nowadays", "!", "You", "guys", "were", "a", "big", "part", "of", "a", "lot", "of", "our", "lives", "and", "we", "love", "to", "relive", "that", "."]
# ::lemmas ["because", "we", "be", "all", "nostalgic", "with", "so", "many", "year", "tour", "and", "reunion", "happen", "nowadays", "!", "you", "guy", "be", "a", "big", "part", "of", "a", "lot", "of", "our", "life", "and", "we", "love", "to", "relive", "that", "."]
(c4-15 / multi-sentence
       :snt1 (c4-17 / cause-01
                    :ARG0 (c4-19 / nostalgic
                                 :domain (c4-21 / we
                                                :mod (c4-10 / all))
                                 :ARG1-of c4-17
                                 :ARG0 (c4-8 / and
                                             :op1 (c4-9 / tour-01
                                                        :duration (c4-18 / temporal-quantity
                                                                         :unit (c4-3 / year)
                                                                         :quant 1))
                                             :op2 (c4-20 / reunite-01
                                                         :duration c4-18)
                                             :time (c4-16 / nowadays)
                                             :ARG1-of (c4-4 / have-quant-91
                                                            :ARG2 (c4-5 / many)
                                                            :ARG3 (c4-0 / so)))))
       :snt2 (c4-7 / and
                   :op1 (c4-22 / have-part-91
                               :ARG1 (c4-1 / life
                                           :poss c4-21
                                           :quant (c4-12 / lot))
                               :ARG2 (c4-11 / you
                                            :mod (c4-13 / guy))
                               :mod (c4-14 / big))
                   :op2 (c4-6 / love-02
                              :ARG0 c4-21
                              :ARG1 (c4-2 / relive-01
                                          :ARG0 c4-21
                                          :ARG1 c4-22))))

# ::snt Why do you do this to me?! You are breaking my heart
# ::tokens ["Why", "do", "you", "do", "this", "to", "me", "?", "!", "You", "are", "breaking", "my", "heart"]
# ::lemmas ["why", "do", "you", "do", "this", "to", "i", "?", "!", "you", "be", "break", "my", "heart"]
(c5-2 / multi-sentence
      :snt1 (c5-4 / cause-01
                  :ARG0 (c5-7 / amr-unknown)
                  :ARG1 (c5-9 / do-02
                              :ARG0 (c5-1 / you)
                              :ARG1 (c5-5 / this)
                              :ARG2 (c5-6 / i)))
      :snt2 (c5-0 / break-heart-31
                  :ARG0 (c5-8 / you)
                  :ARG1 (c5-3 / i)))

# ::snt Yup!
# ::tokens ["Yup", "!"]
# ::lemmas ["yup", "!"]
(c6-0 / yup
      :mode expressive)

# ::snt It is in iTunes
# ::tokens ["It", "is", "in", "iTunes"]
# ::lemmas ["it", "be", "in", "iTunes"]
(c7-1 / be-located-at-91
      :ARG1 (c7-3 / it)
      :ARG2 (c7-2 / product
                  :name (c7-0 / name
                              :op1 "iPod")))

# ::snt Because we still speak your praise! Miss you guys so much!
# ::tokens ["Because", "we", "still", "speak", "your", "praise", "!", "Miss", "you", "guys", "so", "much", "!"]
# ::lemmas ["because", "we", "still", "speak", "your", "praise", "!", "miss", "you", "guy", "so", "much", "!"]
(c8-2 / multi-sentence
      :snt1 (c8-7 / cause-01
                  :ARG0 (c8-4 / speak-01
                              :ARG0 (c8-8 / we)
                              :ARG1 (c8-6 / praise-01
                                          :ARG0 (c8-1 / you))
                              :mod (c8-0 / still)))
      :snt2 (c8-5 / miss-01
                  :ARG0 (c8-9 / i)
                  :ARG1 (c8-10 / you
                               :mod (c8-3 / guy))
                  :degree (c8-11 / much
                                 :degree (c8-12 / so))
                  :mode expressive))

# ::snt You'll always be in me heart. So catchy and so good!I'm gonna start giving my, giving my, giving my, my love love love (to this song)
# ::tokens ["You", "'ll", "always", "be", "in", "me", "heart", ".", "So", "catchy", "and", "so", "good!I'm", "gon", "na", "start", "giving", "my", ",", "giving", "my", ",", "giving", "my", ",", "my", "love", "love", "love", "(", "to", "this", "song", ")"]
# ::lemmas ["you", "'ll", "always", "be", "in", "i", "heart", ".", "so", "catchy", "and", "so", "good!I'm", "going", "to", "start", "give", "my", ",", "give", "my", ",", "give", "my", ",", "my", "love", "love", "love", "(", "to", "this", "song", ")"]
(c9-16 / multi-sentence
       :snt1 (c9-15 / be-located-at-91
                    :ARG1 (c9-6 / you)
                    :ARG2 (c9-8 / heart
                                :part-of (c9-21 / i))
                    :time (c9-12 / always))
       :snt2 (c9-9 / and
                   :op1 (c9-17 / catchy
                               :degree (c9-0 / so))
                   :op2 (c9-11 / good-02
                               :degree (c9-5 / so))
                   :mode expressive)
       :snt3 (c9-4 / start-01
                   :ARG0 (c9-7 / i)
                   :ARG1 c9-9
                   :op1 (c9-2 / give-01
                              :ARG0 c9-7
                              :ARG1 (c9-10 / thing
                                           :poss c9-7))
                   :op2 (c9-3 / give-01
                              :ARG0 c9-7
                              :ARG1 (c9-18 / thing
                                           :poss c9-7))
                   :op3 (c9-13 / give-01
                               :ARG0 c9-7
                               :ARG1 (c9-22 / thing
                                            :name (c9-19 / name
                                                         :op1 "love"
                                                         :op2 "love"
                                                         :op3 "love"
                                                         :op4 "love"))
                               :ARG2 (c9-1 / thing
                                           :ARG1-of (c9-20 / song-01)
                                           :mod (c9-14 / this)))))

# ::snt Do you have room in your heart (playlists) for new stuff?
# ::tokens ["Do", "you", "have", "room", "in", "your", "heart", "(", "playlists", ")", "for", "new", "stuff", "?"]
# ::lemmas ["do", "you", "have", "room", "in", "your", "heart", "(", "playlist", ")", "for", "new", "stuff", "?"]
(c10-5 / have-03
       :polarity (c10-8 / amr-unknown)
       :ARG0 (c10-0 / you
                    :part (c10-7 / heart))
       :ARG1 (c10-4 / room
                    :location c10-7
                    :ARG1-of (c10-1 / mean-01
                                    :ARG2 (c10-6 / play-lists)))
       :purpose (c10-3 / stuff
                       :ARG1-of (c10-2 / new-01)))

# ::snt i am Expert Estate Trace use premier tools do.contact us me now&gt;
# ::tokens ["i", "am", "Expert", "Estate", "Trace", "use", "premier", "tools", "do.contact", "us", "me", "now&gt", ";"]
# ::lemmas ["i", "be", "Expert", "Estate", "Trace", "use", "premier", "tool", "do.contact", "we", "i", "now&gt", ";"]
(c11-2 / multi-sentence
       :snt1 (c11-5 / person
                    :name (c11-1 / name
                                 :op1 "Expert"
                                 :op2 "Real Estate"
                                 :op3 "Trace")
                    :ARG0-of (c11-11 / use-01
                                     :ARG1 (c11-9 / tool
                                                  :mod (c11-3 / premier)))
                    :domain (c11-8 / i))
       :snt2 (c11-6 / contact-01
                    :ARG0 (c11-0 / you)
                    :ARG1 (c11-7 / we)
                    :time (c11-4 / now)
                    :mode imperative)
       :snt3 (c11-10 / gt))

# ::snt Looking for Web Developer? Contact me or
# ::tokens ["Looking", "for", "Web", "Developer", "?", "Contact", "me", "or"]
# ::lemmas ["look", "for", "web", "Developer", "?", "contact", "i", "or"]
(c12-1 / multi-sentence
       :snt1 (c12-3 / look-01
                    :ARG0 (c12-0 / you)
                    :ARG1 (c12-2 / person
                                 :ARG0-of (c12-8 / develop-02
                                                 :ARG1 (c12-4 / web)))
                    :polarity (c12-7 / amr-unknown))
       :snt2 (c12-5 / contact-01
                    :ARG0 c12-0)
       :ARG1 (c12-6 / i))

# ::snt Will the new song be on ITunes any time soon?
# ::tokens ["Will", "the", "new", "song", "be", "on", "ITunes", "any", "time", "soon", "?"]
# ::lemmas ["will", "the", "new", "song", "be", "on", "ITunes", "any", "time", "soon", "?"]
(c13-1 / be-located-at-91
       :ARG1 (c13-3 / song
                    :ARG1-of (c13-2 / new-01))
       :ARG2 (c13-5 / product
                    :name (c13-4 / name
                                 :op1 "iTunes"))
       :polarity (c13-8 / amr-unknown)
       :time (c13-6 / time
                    :mod (c13-7 / any)
                    :mod (c13-0 / soon)))

# ::snt I'm so out of the loop. Had no idea you even had new stuff out. Will definitely take a listen!
# ::tokens ["I", "'m", "so", "out", "of", "the", "loop", ".", "Had", "no", "idea", "you", "even", "had", "new", "stuff", "out", ".", "Will", "definitely", "take", "a", "listen", "!"]
# ::lemmas ["i", "be", "so", "out", "of", "the", "loop", ".", "have", "no", "idea", "you", "even", "have", "new", "stuff", "out", ".", "will", "definitely", "take", "a", "listen", "!"]
(c14-3 / multi-sentence
       :snt1 (c14-0 / out-06
                    :ARG1 (c14-11 / i)
                    :ARG2 (c14-9 / loop)
                    :degree (c14-5 / so))
       :snt2 (c14-8 / have-03
                    :ARG0 c14-11
                    :ARG1 (c14-6 / idea
                                 :topic (c14-10 / have-03
                                                :ARG0 (c14-2 / you)
                                                :ARG1 (c14-1 / stuff
                                                             :ARG1-of (c14-4 / new-01))
                                                :mod (c14-7 / even)))
                    :polarity -)
       :snt3 (c14-13 / listen-01
                     :ARG0 c14-11)
       :mod (c14-12 / definite))

# ::snt Unlikely but never say never I guess . Give the new stuff a try
# ::tokens ["Unlikely", "but", "never", "say", "never", "I", "guess", ".", "Give", "the", "new", "stuff", "a", "try"]
# ::lemmas ["unlikely", "but", "never", "say", "never", "i", "guess", ".", "give", "the", "new", "stuff", "a", "try"]
(c15-2 / multi-sentence
       :snt1 (c15-6 / contrast-01
                    :ARG2 (c15-4 / say-01
                                 :ARG0 (c15-1 / you)
                                 :time (c15-5 / ever)
                                 :ARG1-of (c15-10 / guess-01
                                                  :ARG0 (c15-8 / i))
                                 :polarity -
                                 :mode imperative))
       :snt2 (c15-9 / give-01
                    :ARG0 (c15-11 / you)
                    :ARG1 (c15-0 / stuff
                                 :ARG1-of (c15-3 / new-01))
                    :ARG2 (c15-7 / try-01
                                 :ARG0 c15-11)
                    :mode imperative))

# ::snt I miss Honor Society so much
# ::tokens ["I", "miss", "Honor", "Society", "so", "much"]
# ::lemmas ["i", "miss", "Honor", "Society", "so", "much"]
(c16-2 / miss-01
       :ARG0 (c16-5 / i)
       :ARG1 (c16-0 / organization
                    :name (c16-1 / name
                                 :op1 "Honor"
                                 :op2 "Society"))
       :degree (c16-4 / much
                      :degree (c16-3 / so)))

# ::snt We still love you guys!
# ::tokens ["We", "still", "love", "you", "guys", "!"]
# ::lemmas ["we", "still", "love", "you", "guy", "!"]
(c17-2 / love-01
       :ARG0 (c17-3 / we)
       :ARG1 (c17-4 / guy
                    :mod (c17-0 / you))
       :mod (c17-1 / still))

# ::snt Ahh good times! but a reunion show would be nice.
# ::tokens ["Ahh", "good", "times", "!", "but", "a", "reunion", "show", "would", "be", "nice", "."]
# ::lemmas ["Ahh", "good", "time", "!", "but", "a", "reunion", "show", "would", "be", "nice", "."]
(c18-3 / contrast-01
       :ARG1 (c18-4 / time
                    :ARG1-of (c18-6 / good-02)
                    :mod (c18-5 / ah
                                :mode expressive))
       :ARG2 (c18-0 / nice-01
                    :ARG1 (c18-1 / show-04
                                 :ARG1 (c18-2 / reunite-01))))

# ::snt Yup, I heard it just when it came out! Love it! Really! Missed your voice, tbh! Can't wait for more, but I also miss the guys
# ::tokens ["Yup", ",", "I", "heard", "it", "just", "when", "it", "came", "out", "!", "Love", "it", "!", "Really", "!", "Missed", "your", "voice", ",", "tbh", "!", "Ca", "n't", "wait", "for", "more", ",", "but", "I", "also", "miss", "the", "guys"]
# ::lemmas ["yup", ",", "i", "hear", "it", "just", "when", "it", "come", "out", "!", "love", "it", "!", "really", "!", "miss", "your", "voice", ",", "tbh", "!", "can", "not", "wait", "for", "more", ",", "but", "i", "also", "miss", "the", "guy"]
(c19-13 / multi-sentence
        :snt1 (c19-6 / hear-01
                     :ARG0 (c19-21 / i)
                     :ARG1 (c19-4 / it)
                     :time (c19-15 / come-out-09
                                   :ARG1 (c19-11 / it))
                     :mod (c19-8 / just))
        :snt2 (c19-2 / love-01
                     :ARG0 (c19-0 / i)
                     :ARG1 (c19-16 / it))
        :snt3 (c19-7 / miss-01
                     :ARG0 (c19-1 / i)
                     :ARG1 (c19-5 / voice
                                  :poss (c19-3 / you))
                     :ARG1-of (c19-18 / real-04))
        :snt4 (c19-12 / contrast-01
                      :ARG1 (c19-19 / wait-01
                                    :ARG1 c19-1
                                    :ARG2 (c19-17 / more))
                      :ARG2 (c19-14 / miss-01
                                    :ARG0 c19-1
                                    :ARG1 (c19-10 / guy)
                                    :mod (c19-9 / also))
                      :ARG1-of (c19-20 / honest-01
                                       :ARG0 c19-1)))

# ::snt How bout this for now
# ::tokens ["How", "bout", "this", "for", "now"]
# ::lemmas ["how", "bout", "this", "for", "now"]
(c20-2 / this
       :manner (c20-0 / amr-unknown)
       :time (c20-1 / now))

# ::snt That's a sign you have to get back!
# ::tokens ["That", "'s", "a", "sign", "you", "have", "to", "get", "back", "!"]
# ::lemmas ["that", "be", "a", "sign", "you", "have", "to", "get", "back", "!"]
(c21-2 / signal-07
       :ARG0 (c21-3 / that)
       :ARG1 (c21-0 / obligate-01
                    :ARG1 (c21-1 / you)
                    :ARG2 (c21-4 / get-back-09
                                 :ARG0 c21-1)))

# ::snt The usual suspects
# ::tokens ["The", "usual", "suspects"]
# ::lemmas ["the", "usual", "suspect"]
(c22-1 / person
       :ARG2-of (c22-2 / suspect-01)
       :mod (c22-0 / usual))

# ::snt Thanks, found out the way that I needed to change how I was doing it. Fortunately not a breeder queen
# ::tokens ["Thanks", ",", "found", "out", "the", "way", "that", "I", "needed", "to", "change", "how", "I", "was", "doing", "it", ".", "Fortunately", "not", "a", "breeder", "queen"]
# ::lemmas ["thank", ",", "find", "out", "the", "way", "that", "i", "need", "to", "change", "how", "i", "be", "do", "it", ".", "fortunately", "not", "a", "breeder", "queen"]
(c23-3 / multi-sentence
       :snt1 (c23-10 / thank-01
                     :ARG0 (c23-9 / i)
                     :ARG1 (c23-2 / you))
       :snt2 (c23-0 / find-out-03
                    :ARG0 (c23-5 / i)
                    :ARG1 (c23-7 / way
                                 :manner-of (c23-4 / need-01
                                                   :ARG0 c23-5
                                                   :ARG1 (c23-8 / change-01
                                                                :ARG0 c23-5
                                                                :ARG1 (c23-14 / thing
                                                                              :manner-of (c23-12 / do-02
                                                                                                 :ARG0 c23-5
                                                                                                 :ARG1 (c23-13 / it)))))))
       :snt3 (c23-11 / queen
                     :mod (c23-1 / breeder)
                     :ARG2-of (c23-6 / fortunate-01
                                     :polarity -)
                     :polarity -))

# ::snt HiThe queen is in a 'Butler' style transport cage having just been removed from a mating nuc. I spray the transport cage with water so as to wet the queen - open the transport cage and she will walk onto the frame of brood then cage goes on top. The water stops her flying off!
# ::tokens ["HiThe", "queen", "is", "in", "a", "'", "Butler", "'", "style", "transport", "cage", "having", "just", "been", "removed", "from", "a", "mating", "nuc", ".", "I", "spray", "the", "transport", "cage", "with", "water", "so", "as", "to", "wet", "the", "queen", "-", "open", "the", "transport", "cage", "and", "she", "will", "walk", "onto", "the", "frame", "of", "brood", "then", "cage", "goes", "on", "top", ".", "The", "water", "stops", "her", "flying", "off", "!"]
# ::lemmas ["HiThe", "queen", "be", "in", "a", "'", "Butler", "'", "style", "transport", "cage", "having", "just", "be", "remove", "from", "a", "mating", "nuc", ".", "i", "spray", "the", "transport", "cage", "with", "water", "so", "as", "to", "wet", "the", "queen", "-", "open", "the", "transport", "cage", "and", "she", "will", "walk", "onto", "the", "frame", "of", "brood", "then", "cage", "go", "on", "top", ".", "the", "water", "stop", "she", "fly", "off", "!"]
(c24-14 / multi-sentence
        :snt1 (c24-4 / hi
                     :mode expressive)
        :snt2 (c24-21 / remove-01
                      :ARG1 (c24-6 / queen
                                   :ARG0-of (c24-25 / have-03
                                                    :ARG1 (c24-20 / nuc
                                                                  :mod (c24-22 / person
                                                                               :name (c24-15 / name
                                                                                             :op1 "Butler"))
                                                                  :ARG2-of c24-21)))
                      :time (c24-5 / just))
        :snt3 (c24-0 / spray-01
                     :ARG0 (c24-26 / i)
                     :ARG1 (c24-16 / cage
                                   :mod (c24-8 / transport-01))
                     :ARG2 (c24-24 / water)
                     :purpose (c24-1 / wet-01
                                     :ARG0 c24-26
                                     :ARG1 c24-6))
        :snt4 (c24-7 / and
                     :op1 (c24-2 / open-01
                                 :ARG0 c24-26
                                 :ARG1 (c24-11 / cage
                                               :mod c24-8))
                     :op2 (c24-9 / and
                                 :op1 (c24-18 / walk-01
                                              :ARG0 c24-6
                                              :destination (c24-12 / onto
                                                                   :op1 (c24-19 / frame
                                                                                :mod (c24-13 / brood-01))))
                                 :op2 (c24-10 / go-01
                                              :ARG1 c24-11
                                              :ARG4 (c24-17 / top))))
        :snt5 (c24-3 / stop-03
                     :ARG0 c24-24)
        :ARG1 (c24-23 / fly-01
                      :ARG0 c24-6
                      :direction (c24-27 / off)))

# ::snt Hi AdamIf only we had the time. All our honey goes to the Barbakan- when we eventually get round to getting it into jars; the Barbakan are very patient!
# ::tokens ["Hi", "AdamIf", "only", "we", "had", "the", "time", ".", "All", "our", "honey", "goes", "to", "the", "Barbakan-", "when", "we", "eventually", "get", "round", "to", "getting", "it", "into", "jars", ";", "the", "Barbakan", "are", "very", "patient", "!"]
# ::lemmas ["hi", "AdamIf", "only", "we", "have", "the", "time", ".", "all", "our", "honey", "go", "to", "the", "Barbakan-", "when", "we", "eventually", "get", "round", "to", "get", "it", "into", "jar", ";", "the", "Barbakan", "be", "very", "patient", "!"]
(c25-12 / multi-sentence
        :snt1 (c25-0 / say-01
                     :ARG1 (c25-6 / hi)
                     :ARG2 (c25-17 / person
                                   :name (c25-15 / name
                                                 :op1 "Adam"))
                     :condition (c25-19 / have-03
                                        :ARG0 (c25-18 / we)
                                        :ARG1 (c25-9 / time)
                                        :mod (c25-3 / only)))
        :snt2 (c25-10 / go-01
                      :ARG1 (c25-5 / honey
                                   :poss c25-18
                                   :mod (c25-8 / all))
                      :ARG4 (c25-20 / island
                                    :name (c25-14 / name
                                                  :op1 "Barbakan"))
                      :time (c25-1 / get-around-26
                                   :ARG0 c25-18
                                   :ARG1 (c25-2 / get-05
                                                :ARG1 c25-18
                                                :ARG2 c25-2
                                                :ARG0 c25-18
                                                :ARG1 c25-5
                                                :ARG2 (c25-7 / jar)))
                      :mod (c25-16 / eventual))
        :snt3 (c25-13 / patient-01
                      :ARG1 (c25-11 / Barbakan)
                      :degree (c25-4 / very)))

# ::snt How do you reliably get the queen into the press in cage?
# ::tokens ["How", "do", "you", "reliably", "get", "the", "queen", "into", "the", "press", "in", "cage", "?"]
# ::lemmas ["how", "do", "you", "reliably", "get", "the", "queen", "into", "the", "press", "in", "cage", "?"]
(c26-5 / get-05
       :ARG0 (c26-0 / you)
       :ARG1 (c26-3 / queen)
       :ARG2 (c26-1 / press)
       :manner (c26-4 / amr-unknown)
       :manner (c26-2 / consistent-02)
       :location (c26-6 / cage))

# ::snt He needed
# ::tokens ["He", "needed"]
# ::lemmas ["he", "need"]
(c27-1 / need-01
       :ARG0 (c27-0 / he))

# ::snt You think that lovely hair you have will stick around through such torment?!
# ::tokens ["You", "think", "that", "lovely", "hair", "you", "have", "will", "stick", "around", "through", "such", "torment", "?", "!"]
# ::lemmas ["you", "think", "that", "lovely", "hair", "you", "have", "will", "stick", "around", "through", "such", "torment", "?", "!"]
(c28-6 / think-01
       :polarity (c28-8 / amr-unknown)
       :ARG0 (c28-1 / you)
       :ARG1 (c28-2 / stick-around-03
                    :ARG1 (c28-3 / hair
                                 :mod (c28-4 / lovely)
                                 :mod (c28-9 / that)
                                 :ARG1-of (c28-5 / have-03
                                                 :ARG0 c28-1))
                    :duration (c28-7 / torment-01
                                     :ARG1 c28-1
                                     :degree (c28-0 / such))))

# ::snt *Note: All credit goes to 'Mr D Green' writer and head reporter behind the *
# ::tokens ["*", "Note", ":", "All", "credit", "goes", "to", "'", "Mr", "D", "Green", "'", "writer", "and", "head", "reporter", "behind", "the", "*"]
# ::lemmas ["*", "note", ":", "all", "credit", "go", "to", "'", "Mr", "D", "Green", "'", "writer", "and", "head", "reporter", "behind", "the", "*"]
(c29-1 / note-01
       :ARG1 (c29-13 / go-10
                     :ARG1 (c29-8 / credit-01
                                  :mod (c29-12 / all))
                     :ARG2 (c29-11 / and
                                   :op1 (c29-5 / person
                                               :ARG0-of (c29-9 / write-01)
                                               :ARG0-of (c29-4 / have-org-role-91
                                                               :ARG1 (c29-6 / newspaper
                                                                            :name (c29-7 / name
                                                                                         :op1 "Mr"
                                                                                         :op2 "D"
                                                                                         :op3 "Green"))))
                                   :op2 (c29-2 / person
                                               :ARG0-of (c29-3 / report-01)
                                               :ARG0-of (c29-10 / head-01)
                                               :location (c29-0 / behind
                                                                :op1 c29-6)))))

# ::snt *News from the * BUSINESSPage of
# ::tokens ["*", "News", "from", "the", "*", "BUSINESSPage", "of"]
# ::lemmas ["*", "news", "from", "the", "*", "businesspage", "of"]
(c30-2 / news
       :source (c30-0 / publication
                      :name (c30-1 / name
                                   :op1 "Businesses")))

# ::snt *News from the * BUSINESSPage of
# ::tokens ["*", "News", "from", "the", "*", "BUSINESSPage", "of"]
# ::lemmas ["*", "news", "from", "the", "*", "businesspage", "of"]
(c31-2 / news
       :source (c31-0 / publication
                      :name (c31-1 / name
                                   :op1 "Businesses")))

# ::snt *News from the * BUSINESSPage of
# ::tokens ["*", "News", "from", "the", "*", "BUSINESSPage", "of"]
# ::lemmas ["*", "news", "from", "the", "*", "businesspage", "of"]
(c32-2 / news
       :source (c32-0 / publication
                      :name (c32-1 / name
                                   :op1 "Businesses")))

# ::snt *News from the * BUSINESSPage of
# ::tokens ["*", "News", "from", "the", "*", "BUSINESSPage", "of"]
# ::lemmas ["*", "news", "from", "the", "*", "businesspage", "of"]
(c33-2 / news
       :source (c33-0 / publication
                      :name (c33-1 / name
                                   :op1 "Businesses")))

# ::snt Im not trying to shield or absolve lisson, or pin the blame on anyone else. Im stating the obvious: unless the opposition shoot unopposed from midfield on the first second, theres a sequence of events that leads to goal. I guarantee you Klopp wont just yell at lisson.
# ::tokens ["I", "m", "not", "trying", "to", "shield", "or", "absolve", "lisson", ",", "or", "pin", "the", "blame", "on", "anyone", "else", ".", "I", "m", "stating", "the", "obvious", ":", "unless", "the", "opposition", "shoot", "unopposed", "from", "midfield", "on", "the", "first", "second", ",", "there", "s", "a", "sequence", "of", "events", "that", "leads", "to", "goal", ".", "I", "guarantee", "you", "Klopp", "wo", "nt", "just", "yell", "at", "lisson", "."]
# ::lemmas ["i", "m", "not", "try", "to", "shield", "or", "absolve", "lisson", ",", "or", "pin", "the", "blame", "on", "anyone", "else", ".", "i", "m", "state", "the", "obvious", ":", "unless", "the", "opposition", "shoot", "unoppose", "from", "midfield", "on", "the", "first", "second", ",", "there", "s", "a", "sequence", "of", "event", "that", "lead", "to", "goal", ".", "i", "guarantee", "you", "Klopp", "will", "not", "just", "yell", "at", "lisson", "."]
(c34-22 / multi-sentence
        :snt1 (c34-16 / try-01
                      :ARG0 (c34-31 / i)
                      :ARG1 (c34-7 / or
                                   :op1 (c34-0 / shield-01
                                               :ARG0 c34-31
                                               :ARG1 (c34-30 / person
                                                             :name (c34-27 / name
                                                                           :op1 "Lisson")))
                                   :op2 (c34-14 / absolve-01
                                                :ARG0 c34-31
                                                :ARG1 c34-30)
                                   :op3 (c34-23 / pin-01
                                                :ARG0 c34-31
                                                :ARG1 (c34-21 / blame-01)
                                                :ARG2 (c34-13 / anyone
                                                              :mod (c34-29 / else))))
                      :polarity -)
        :snt2 (c34-8 / state-01
                     :ARG0 (c34-10 / i)
                     :ARG1 (c34-6 / sequence-01
                                  :ARG1 (c34-17 / event)
                                  :ARG0-of (c34-2 / lead-03
                                                  :ARG2 (c34-15 / goal))
                                  :condition (c34-28 / shoot-01
                                                     :ARG0 (c34-5 / person
                                                                  :ARG0-of (c34-20 / oppose-01))
                                                     :location (c34-26 / from
                                                                       :op1 (c34-11 / midfield))
                                                     :time (c34-1 / second
                                                                  :ord (c34-32 / ordinal-entity
                                                                               :value 1))
                                                     :manner c34-20
                                                     :polarity -)))
        :ARG1-of (c34-25 / obvious-01)
        :snt3 (c34-4 / guarantee-01
                     :ARG0 (c34-18 / i)
                     :ARG1 (c34-9 / yell-01
                                  :ARG0 (c34-3 / person
                                               :name (c34-24 / name
                                                             :op1 "Klopp"))
                                  :ARG2 c34-30
                                  :mod (c34-12 / just)
                                  :polarity -)
                     :ARG2 (c34-19 / you)))

# ::snt No. Why are you trying to shield him. Hes a good goalie who made a stupid mistake. Hes human after all. Everybody makes mistakes. What matters is how he reacted afterwards, by not panicking and still trying to find players with a pass. His attitude is top notch.
# ::tokens ["No", ".", "Why", "are", "you", "trying", "to", "shield", "him", ".", "He", "s", "a", "good", "goalie", "who", "made", "a", "stupid", "mistake", ".", "He", "s", "human", "after", "all", ".", "Everybody", "makes", "mistakes", ".", "What", "matters", "is", "how", "he", "reacted", "afterwards", ",", "by", "not", "panicking", "and", "still", "trying", "to", "find", "players", "with", "a", "pass", ".", "His", "attitude", "is", "top", "notch", "."]
# ::lemmas ["no", ".", "why", "be", "you", "try", "to", "shield", "he", ".", "he", "s", "a", "good", "goalie", "who", "make", "a", "stupid", "mistake", ".", "he", "s", "human", "after", "all", ".", "everybody", "make", "mistake", ".", "what", "matter", "be", "how", "he", "react", "afterwards", ",", "by", "not", "panic", "and", "still", "try", "to", "find", "player", "with", "a", "pass", ".", "his", "attitude", "be", "top", "notch", "."]
(c35-16 / multi-sentence
        :snt1 (c35-24 / no)
        :snt2 (c35-19 / cause-01
                      :ARG0 (c35-12 / amr-unknown)
                      :ARG1 (c35-13 / try-01
                                    :ARG0 (c35-6 / you)
                                    :ARG1 (c35-0 / shield-01
                                                 :ARG0 c35-6
                                                 :ARG1 (c35-8 / he))))
        :snt3 (c35-9 / mistake-02
                     :ARG0 (c35-27 / he)
                     :mod (c35-5 / stupid)
                     :ARG1-of (c35-14 / good-03))
        :snt4 (c35-7 / human
                     :domain c35-27
                     :concession (c35-11 / after-all))
        :snt5 (c35-20 / thing
                      :ARG1-of (c35-22 / matter-01)
                      :domain (c35-28 / thing
                                      :ARG2-of (c35-25 / react-01
                                                       :ARG0 c35-27
                                                       :time (c35-10 / afterwards)
                                                       :manner (c35-26 / panicky-00
                                                                       :ARG1 c35-27
                                                                       :polarity -)
                                                       :manner (c35-1 / try-01
                                                                      :ARG0 c35-27
                                                                      :ARG1 (c35-23 / find-01
                                                                                    :ARG0 c35-27
                                                                                    :ARG1 (c35-17 / person
                                                                                                  :ARG0-of (c35-3 / play-01))
                                                                                    :instrument (c35-2 / pass))
                                                                      :mod (c35-4 / still)))))
        :snt6 (c35-29 / attitude
                      :poss (c35-21 / he)
                      :mod (c35-18 / notch
                                   :mod (c35-15 / top))))

# ::snt Van dijk wasnt at fault,allison had all the time in the world to make a clearance but chose not to
# ::tokens ["Van", "dijk", "was", "nt", "at", "fault", ",", "allison", "had", "all", "the", "time", "in", "the", "world", "to", "make", "a", "clearance", "but", "chose", "not", "to"]
# ::lemmas ["Van", "dijk", "be", "not", "at", "fault", ",", "allison", "have", "all", "the", "time", "in", "the", "world", "to", "make", "a", "clearance", "but", "choose", "not", "to"]
(c36-12 / and
        :op1 (c36-0 / fault-01
                    :ARG1 (c36-5 / person
                                 :name (c36-1 / name
                                              :op1 "Van"
                                              :op2 "Djk"))
                    :polarity -)
        :op2 (c36-7 / contrast-01
                    :ARG1 (c36-4 / have-03
                                 :ARG0 (c36-2 / person
                                              :name (c36-6 / name
                                                           :op1 "Allison"))
                                 :ARG1 (c36-10 / time
                                               :mod (c36-11 / all)
                                               :location (c36-8 / world))
                                 :purpose (c36-3 / make-01
                                                 :ARG0 c36-2
                                                 :ARG1 (c36-13 / clearance)))
                    :ARG2 (c36-9 / choose-01
                                 :ARG0 c36-2
                                 :ARG1 c36-3
                                 :polarity -)))

# ::snt The main thing is that his error cant be seen in isolation. It followed sloppy play in the midfield and from Van Dijk. In many ways, it was a culmination of poor performances throughout the pitch, throughout the game.
# ::tokens ["The", "main", "thing", "is", "that", "his", "error", "ca", "nt", "be", "seen", "in", "isolation", ".", "It", "followed", "sloppy", "play", "in", "the", "midfield", "and", "from", "Van", "Dijk", ".", "In", "many", "ways", ",", "it", "was", "a", "culmination", "of", "poor", "performances", "throughout", "the", "pitch", ",", "throughout", "the", "game", "."]
# ::lemmas ["the", "main", "thing", "be", "that", "his", "error", "can", "not", "be", "see", "in", "isolation", ".", "it", "follow", "sloppy", "play", "in", "the", "midfield", "and", "from", "Van", "Dijk", ".", "in", "many", "way", ",", "it", "be", "a", "culmination", "of", "poor", "performance", "throughout", "the", "pitch", ",", "throughout", "the", "game", "."]
(c37-11 / multi-sentence
        :snt1 (c37-19 / possible-01
                      :ARG1 (c37-0 / see-01
                                   :ARG1 (c37-18 / err-01
                                                 :ARG0 (c37-5 / he))
                                   :manner (c37-21 / isolate-01
                                                   :ARG1 c37-18))
                      :mod (c37-6 / main)
                      :polarity -)
        :snt2 (c37-16 / follow-01
                      :ARG1 (c37-4 / it)
                      :ARG2 (c37-12 / play-01
                                    :mod (c37-3 / sloppy)
                                    :location (c37-9 / and
                                                     :op1 (c37-15 / midfield)
                                                     :op2 (c37-8 / team
                                                                 :name (c37-17 / name
                                                                               :op1 "Van"
                                                                               :op2 "Dijk")))))
        :snt3 (c37-14 / culminate-01
                      :ARG1 (c37-2 / perform-02
                                   :ARG1-of (c37-1 / poor-02)
                                   :location c37-9
                                   :op1 (c37-7 / pitch)
                                   :op2 (c37-10 / game)))
        :ARG2 c37-4
        :manner (c37-20 / way
                        :quant (c37-13 / many)))

# ::snt I AM CRYING HAHAHAHAHAHHAHAHAHHA
# ::tokens ["I", "AM", "CRYING", "HAHAHAHAHAHHAHAHAHHA"]
# ::lemmas ["i", "be", "CRYING", "hahahahahahhahahahha"]
(c38-0 / crap-01
       :ARG0 (c38-1 / i)
       :mode expressive)

# ::snt AHAHAHAH JUCCCOOOO PICTURESSS
# ::tokens ["AHAHAHAH", "JUCCCOOOO", "PICTURESSS"]
# ::lemmas ["AHAHAHAH", "JUCCCOOOO", "PICTURESSS"]
(c39-1 / picture
       :mod (c39-0 / jeez
                   :mode expressive))

# ::snt JUUUUCO SHOOOOEEESSSS
# ::tokens ["JUUUUCO", "SHOOOOEEESSSS"]
# ::lemmas ["JUUUUCO", "SHOOOOEEESSSS"]
(c40-1 / shoo
       :mod (c40-0 / jeez)
       :mode expressive)

# ::snt AHAHAHAHAHAHAHHAHAAHHA POOR JUCCCCOOO HEART
# ::tokens ["AHAHAHAHAHAHAHHAHAAHHA", "POOR", "JUCCCCOOO", "HEART"]
# ::lemmas ["AHAHAHAHAHAHAHHAHAAHHA", "POOR", "JUCCCCOOO", "heart"]
(c41-3 / and
       :op1 (c41-2 / aha
                   :mode expressive)
       :op2 (c41-1 / laugh-01
                   :mode expressive)
       :op3 (c41-0 / hmm
                   :op4-of c41-3
                   :mode expressive)
       :mode expressive)

# ::snt but but theres so many other options
# ::tokens ["but", "but", "there", "s", "so", "many", "other", "options"]
# ::lemmas ["but", "but", "there", "s", "so", "many", "other", "option"]
(c42-5 / contrast-01
       :ARG2 (c42-1 / option
                    :mod (c42-0 / other)
                    :ARG1-of (c42-4 / have-quant-91
                                    :ARG2 (c42-2 / many)
                                    :ARG3 (c42-3 / so))))

# ::snt basically LOL
# ::tokens ["basically", "LOL"]
# ::lemmas ["basically", "LOL"]
(c43-2 / laugh-01
       :ARG0 (c43-3 / i)
       :manner (c43-0 / loud)
       :mod (c43-1 / basic)
       :mode expressive)

# ::snt Lmao yesterday
# ::tokens ["Lmao", "yesterday"]
# ::lemmas ["Lmao", "yesterday"]
(c44-2 / laugh-01
       :ARG0 (c44-3 / i)
       :manner (c44-0 / loud)
       :time (c44-1 / yesterday)
       :mode expressive)

# ::snt i am.
# ::tokens ["i", "am", "."]
# ::lemmas ["i", "be", "."]
(c45-0 / i)

# ::snt Got to be creative with the art
# ::tokens ["Got", "to", "be", "creative", "with", "the", "art"]
# ::lemmas ["got", "to", "be", "creative", "with", "the", "art"]
(c46-0 / get-03
       :ARG1 (c46-1 / creative
                    :domain (c46-2 / art)))

# ::snt lazy?
# ::tokens ["lazy", "?"]
# ::lemmas ["lazy", "?"]
(c47-0 / lazy
       :polarity (c47-1 / amr-unknown))

# ::snt Lazy
# ::tokens ["Lazy"]
# ::lemmas ["Lazy"]
(c48-0 / lazy)

# ::snt okay
# ::tokens ["okay"]
# ::lemmas ["okay"]
(c49-0 / okay-04)

# ::snt so?
# ::tokens ["so", "?"]
# ::lemmas ["so", "?"]
(c50-1 / so
       :polarity (c50-0 / amr-unknown))
