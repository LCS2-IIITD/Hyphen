# ::snt by my father Carl Khler (1919-2006)
# ::tokens ["by", "my", "father", "Carl", "Khler", "(", "1919", "-", "2006", ")"]
# ::lemmas ["by", "my", "father", "Carl", "Khler", "(", "1919", "-", "2006", ")"]
(c1-1 / byline-91
      :ARG1 (c1-4 / person
                  :name (c1-2 / name
                              :op1 "Carl"
                              :op2 "Kharler")
                  :ARG0-of (c1-3 / have-rel-role-91
                                 :ARG1 (c1-7 / i)
                                 :ARG2 (c1-0 / father))
                  :time (c1-8 / date-interval
                              :op1 (c1-6 / date-entity
                                         :year1919 (c1-5 / date-entity
                                                         :year 2006)))))

# ::snt And in our graduation year too?! Sis is promised to be LIT. We're graduating, MJ is coming to Broadway, ANDD tr*mp is getting out of office?! A BLESSING. A YEAR!
# ::tokens ["And", "in", "our", "graduation", "year", "too", "?", "!", "Sis", "is", "promised", "to", "be", "LIT", ".", "We", "'re", "graduating", ",", "MJ", "is", "coming", "to", "Broadway", ",", "ANDD", "tr*mp", "is", "getting", "out", "of", "office", "?", "!", "A", "BLESSING", ".", "A", "YEAR", "!"]
# ::lemmas ["and", "in", "our", "graduation", "year", "too", "?", "!", "Sis", "be", "promise", "to", "be", "LIT", ".", "we", "be", "graduate", ",", "MJ", "be", "come", "to", "Broadway", ",", "ANDD", "tr*mp", "be", "get", "out", "of", "office", "?", "!", "a", "blessing", ".", "a", "YEAR", "!"]
(c2-16 / multi-sentence
       :snt1 (c2-10 / and
                    :op2 (c2-23 / promise-01
                                :polarity (c2-8 / amr-unknown)
                                :ARG2 (c2-0 / shit)
                                :time (c2-6 / year
                                            :mod (c2-11 / graduate-01
                                                        :ARG1 (c2-24 / we))
                                            :mod (c2-9 / too))))
       :snt2 (c2-7 / and
                   :op1 (c2-3 / graduate-01
                              :ARG1 (c2-2 / we))
                   :op2 (c2-19 / come-01
                               :ARG1 (c2-17 / person
                                            :name (c2-21 / name
                                                         :op1 "MJ"))
                               :ARG4 (c2-22 / road
                                            :name (c2-18 / name
                                                         :op1 "Broadway")))
                   :op3 (c2-4 / get-05
                              :ARG1 (c2-27 / and
                                           :op1 (c2-20 / tr*kk)
                                           :op2 (c2-26 / tr*kk))
                              :ARG2 (c2-5 / out-06
                                          :ARG1 c2-27
                                          :ARG2 (c2-14 / office)))
                   :polarity (c2-25 / amr-unknown))
       :snt3 (c2-1 / thing
                   :ARG1-of (c2-15 / blESS-01)
                   :duration (c2-12 / temporal-quantity
                                    :unit (c2-13 / year)
                                    :quant 1)))

# ::snt I SEE YALL
# ::tokens ["I", "SEE", "YALL"]
# ::lemmas ["i", "see", "YALL"]
(c3-3 / see-01
      :ARG0 (c3-2 / i)
      :ARG1 (c3-1 / thing
                  :mod (c3-0 / all)))

# ::snt Why not, seriously?
# ::tokens ["Why", "not", ",", "seriously", "?"]
# ::lemmas ["why", "not", ",", "seriously", "?"]
(c4-1 / serious-01
      :ARG2 (c4-0 / amr-unknown))

# ::snt .who's playing dr murray...?
# ::tokens [".who", "'s", "playing", "dr", "murray", "...", "?"]
# ::lemmas [".who", "be", "play", "dr", "murray", "...", "?"]
(c6-2 / play-11
      :ARG0 (c6-3 / amr-unknown)
      :ARG1 (c6-0 / music
                  :name (c6-1 / name
                              :op1 "Dr"
                              :op2 "Murray")))

# ::snt Why ?? Seriously ...
# ::tokens ["Why", "?", "?", "Seriously", "..."]
# ::lemmas ["why", "?", "?", "seriously", "..."]
(c7-1 / cause-01
      :ARG0 (c7-2 / amr-unknown)
      :ARG2-of (c7-0 / serious-01))

# ::snt I think that is billy jean
# ::tokens ["I", "think", "that", "is", "billy", "jean"]
# ::lemmas ["i", "think", "that", "be", "billy", "jean"]
(c9-2 / think-01
      :ARG0 (c9-3 / i)
      :ARG1 (c9-4 / that
                  :domain (c9-1 / person
                                :name (c9-0 / name
                                            :op1 "Billy"
                                            :op2 "Jean"))))

# ::snt Awesome can't wait.
# ::tokens ["Awesome", "ca", "n't", "wait", "."]
# ::lemmas ["Awesome", "can", "not", "wait", "."]
(c10-2 / possible-01
       :ARG1 (c10-0 / wait-01
                    :ARG1 (c10-1 / event
                                 :ARG0-of (c10-3 / awe-01)))
       :polarity -)

# ::snt haha ur literally so funny
# ::tokens ["haha", "ur", "literally", "so", "funny"]
# ::lemmas ["haha", "ur", "literally", "so", "funny"]
(c11-0 / funny-02
       :ARG1 (c11-1 / you)
       :manner (c11-4 / literal)
       :degree (c11-2 / so)
       :mod (c11-3 / haha
                   :mode expressive))

# ::snt This will be the FIRST time Michael Jackson will be represented without all the false B*llsh*t angles of the biased media -- His mission of love, unity, brotherhood &amp;healing the world is finally coming to Broadway "In a world filled with hate"- This could not be more timely !
# ::tokens ["This", "will", "be", "the", "FIRST", "time", "Michael", "Jackson", "will", "be", "represented", "without", "all", "the", "false", "B*llsh*t", "angles", "of", "the", "biased", "media", "--", "His", "mission", "of", "love", ",", "unity", ",", "brotherhood", "&", "amp;healing", "the", "world", "is", "finally", "coming", "to", "Broadway", "\"", "In", "a", "world", "filled", "with", "hate\"-", "This", "could", "not", "be", "more", "timely", "!"]
# ::lemmas ["this", "will", "be", "the", "FIRST", "time", "Michael", "Jackson", "will", "be", "represent", "without", "all", "the", "false", "b*llsh*t", "angle", "of", "the", "biased", "medium", "--", "his", "mission", "of", "love", ",", "unity", ",", "brotherhood", "&", "amp;heale", "the", "world", "be", "finally", "come", "to", "Broadway", "\"", "in", "a", "world", "fill", "with", "hate\"-", "this", "could", "not", "be", "more", "timely", "!"]
(c12-11 / multi-sentence
        :snt1 (c12-21 / represent-01
                      :ARG1 (c12-22 / person
                                    :name (c12-20 / name
                                                  :op1 "Michael"
                                                  :op2 "Jackson"))
                      :ord (c12-3 / ordinal-entity
                                  :value 1)
                      :manner (c12-8 / angle
                                     :mod (c12-19 / false)
                                     :mod (c12-7 / all)
                                     :poss (c12-4 / media
                                                  :ARG1-of (c12-10 / bias-01))
                                     :polarity -))
        :snt2 (c12-15 / come-01
                      :ARG1 (c12-18 / mission-01
                                    :ARG0 (c12-5 / he)
                                    :ARG1 (c12-6 / and
                                                 :op1 (c12-1 / love-01)
                                                 :op2 (c12-17 / unity)
                                                 :op3 (c12-0 / brotherhood)
                                                 :op4 (c12-27 / amp)))
                      :ARG4 (c12-25 / work-of-art
                                    :name (c12-13 / name
                                                  :op1 "Healing"
                                                  :op2 "the"
                                                  :op3 "World"))
                      :time (c12-23 / final)
                      :location (c12-2 / road
                                       :name (c12-24 / name
                                                     :op1 "Broadway")))
        :snt3 (c12-12 / possible-01
                      :ARG1 (c12-9 / timely-03
                                   :ARG1 (c12-16 / this)
                                   :ARG2-of (c12-26 / have-degree-91
                                                    :ARG1 c12-16
                                                    :ARG3 (c12-14 / more)))
                      :polarity -))

# ::snt Oh nice
# ::tokens ["Oh", "nice"]
# ::lemmas ["oh", "nice"]
(c13-1 / nice-01
       :mod (c13-0 / oh
                   :mode expressive))

# ::snt Will young boys get a discount?
# ::tokens ["Will", "young", "boys", "get", "a", "discount", "?"]
# ::lemmas ["will", "young", "boy", "get", "a", "discount", "?"]
(c14-0 / discount-02
       :polarity (c14-3 / amr-unknown)
       :ARG1 (c14-1 / boy
                    :mod (c14-2 / young)))

# ::snt Michael Jackson &amp; The Ghost of Ben by David Louis Whitehead, submitted to Sony &amp; Jackson Estate, waiting on Judge Friedman's probe. Unseal!
# ::tokens ["Michael", "Jackson", "&", "amp", ";", "The", "Ghost", "of", "Ben", "by", "David", "Louis", "Whitehead", ",", "submitted", "to", "Sony", "&", "amp", ";", "Jackson", "Estate", ",", "waiting", "on", "Judge", "Friedman", "'s", "probe", ".", "Unseal", "!"]
# ::lemmas ["Michael", "Jackson", "&", "amp", ";", "The", "Ghost", "of", "Ben", "by", "David", "Louis", "Whitehead", ",", "submit", "to", "Sony", "&", "amp", ";", "Jackson", "Estate", ",", "wait", "on", "Judge", "Friedman", "'s", "probe", ".", "unseal", "!"]
(c15-7 / multi-sentence
       :snt1 (c15-15 / publication-91
                     :ARG0 (c15-8 / person
                                  :name (c15-13 / name
                                                :op1 "David"
                                                :op2 "Louis"
                                                :op3 "Whitehead"))
                     :ARG1 (c15-6 / book
                                  :name (c15-9 / name
                                               :op1 "The"
                                               :op2 "Ghost"
                                               :op3 "of"
                                               :op4 "Ben"))
                     :ARG4 (c15-10 / company
                                   :name (c15-16 / name
                                                 :op1 "Michael"
                                                 :op2 "Jackson"
                                                 :op3 "&amp"))
                     :ARG1-of (c15-0 / submit-01
                                     :ARG2 (c15-5 / company
                                                  :name (c15-11 / name
                                                                :op1 "Sony"
                                                                :op2 "&amp"))))
       :snt2 (c15-17 / wait-01
                     :ARG1 (c15-2 / company
                                  :name (c15-18 / name
                                                :op1 "Jackson"
                                                :op2 "estate"))
                     :ARG2 (c15-3 / probe-01
                                  :ARG0 (c15-1 / person
                                               :name (c15-14 / name
                                                             :op1 "Friedman")
                                               :ARG0-of (c15-4 / judge-01))))
       :snt3 (c15-12 / unseal
                     :mode expressive))

# ::snt courtesy of
# ::tokens ["courtesy", "of"]
# ::lemmas ["courtesy", "of"]
(c16-0 / courtesy-01
       :ARG0 (c16-1 / i))

# ::snt I heard it will star Adam Lambert.
# ::tokens ["I", "heard", "it", "will", "star", "Adam", "Lambert", "."]
# ::lemmas ["i", "hear", "it", "will", "star", "Adam", "Lambert", "."]
(c17-3 / hear-01
       :ARG0 (c17-5 / i)
       :ARG1 (c17-1 / star-01
                    :ARG1 (c17-4 / person
                                 :name (c17-0 / name
                                              :op1 "Adam"
                                              :op2 "Lambert"))
                    :ARG2 (c17-2 / it)))

# ::snt Studios &amp; news agencies produce, publish &amp; broadcast films &amp; other IP knowing that works were stolen, or infringed based on RICO are liable.
# ::tokens ["Studios", "&", "amp", ";", "news", "agencies", "produce", ",", "publish", "&", "amp", ";", "broadcast", "films", "&", "amp", ";", "other", "IP", "knowing", "that", "works", "were", "stolen", ",", "or", "infringed", "based", "on", "RICO", "are", "liable", "."]
# ::lemmas ["Studios", "&", "amp", ";", "news", "agency", "produce", ",", "publish", "&", "amp", ";", "broadcast", "film", "&", "amp", ";", "other", "IP", "know", "that", "work", "be", "steal", ",", "or", "infringe", "base", "on", "RICO", "be", "liable", "."]
(c18-2 / liable-01
       :ARG1 (c18-9 / and
                    :op1 (c18-8 / and
                                :op1 (c18-20 / publication
                                             :name (c18-18 / name
                                                           :op1 "Studios"))
                                :op2 (c18-13 / publication
                                             :name (c18-14 / name
                                                           :op1 "&"
                                                           :op2 "amp")))
                    :op2 (c18-7 / and
                                :op1 (c18-4 / produce-01
                                            :ARG0 (c18-25 / agency
                                                          :mod (c18-21 / news))
                                            :ARG1 c18-8)
                                :op2 (c18-3 / publish-01
                                            :ARG0 c18-25
                                            :ARG1 c18-8)
                                :op3 (c18-17 / film
                                             :ARG1-of (c18-12 / broadcast-01))
                                :op4 (c18-19 / et-cetera))
                    :op3 (c18-15 / company
                                 :name (c18-16 / name
                                               :op1 "IP")
                                 :mod (c18-5 / other)
                                 :ARG0-of (c18-6 / know-01
                                                 :ARG1 (c18-11 / or
                                                               :op1 (c18-0 / steal-01
                                                                           :ARG1 (c18-22 / work-12))
                                                               :op2 (c18-24 / infringe-01
                                                                            :ARG1 c18-22)
                                                               :ARG1-of (c18-1 / base-02
                                                                               :ARG2 (c18-10 / law
                                                                                             :name (c18-23 / name
                                                                                                           :op1 "RICO"))))))))

# ::snt Are there big dancing stuffed animals in it?
# ::tokens ["Are", "there", "big", "dancing", "stuffed", "animals", "in", "it", "?"]
# ::lemmas ["be", "there", "big", "dancing", "stuff", "animal", "in", "it", "?"]
(c19-0 / be-located-at-91
       :polarity (c19-4 / amr-unknown)
       :ARG1 (c19-3 / animal
                    :mod (c19-2 / big)
                    :ARG0-of (c19-6 / dance-01)
                    :ARG1-of (c19-1 / stuff-01))
       :ARG2 (c19-5 / it))

# ::snt Ugh
# ::tokens ["Ugh"]
# ::lemmas ["ugh"]
(c20-0 / ugh
       :mode expressive)

# ::snt hoe
# ::tokens ["hoe"]
# ::lemmas ["hoe"]
(c21-0 / hoe)

# ::snt Nope
# ::tokens ["Nope"]
# ::lemmas ["nope"]
(c22-0 / nope)

# ::snt I said what i said, gtf over it bitch! Always got some smart shit to say, damn lemme live!
# ::tokens ["I", "said", "what", "i", "said", ",", "gtf", "over", "it", "bitch", "!", "Always", "got", "some", "smart", "shit", "to", "say", ",", "damn", "lemme", "live", "!"]
# ::lemmas ["i", "say", "what", "i", "say", ",", "gtf", "over", "it", "bitch", "!", "always", "get", "some", "smart", "shit", "to", "say", ",", "damn", "lemme", "live", "!"]
(c23-13 / multi-sentence
        :snt1 (c23-0 / say-01
                     :ARG0 (c23-17 / i)
                     :ARG1 (c23-8 / thing
                                  :ARG1-of (c23-4 / say-01
                                                  :ARG0 c23-17)))
        :snt2 (c23-11 / bitch
                      :domain (c23-6 / i)
                      :mod (c23-15 / fuck
                                   :mode expressive)
                      :mode expressive)
        :snt3 (c23-9 / get-04
                     :ARG0 (c23-5 / you)
                     :ARG1 (c23-3 / shit
                                  :ARG1-of (c23-16 / smart-06)
                                  :quant (c23-1 / some)
                                  :ARG1-of (c23-12 / say-01
                                                   :ARG0 c23-5)
                                  :ARG0-of (c23-14 / say-01
                                                   :ARG1 (c23-2 / live-01
                                                                :ARG0 (c23-10 / i)
                                                                :mod (c23-18 / damn
                                                                             :mode expressive))))
                     :time (c23-7 / always)))

# ::snt Ok bitch extraaaaa! There are plenty to see before Michaels lmao
# ::tokens ["Ok", "bitch", "extraaaaa", "!", "There", "are", "plenty", "to", "see", "before", "Michaels", "lmao"]
# ::lemmas ["ok", "bitch", "extraaaaa", "!", "there", "be", "plenty", "to", "see", "before", "Michaels", "lmao"]
(c24-2 / multi-sentence
       :snt1 (c24-0 / okay-01
                    :mod (c24-1 / bitch
                                :mod (c24-6 / extra)))
       :snt2 (c24-4 / see-01
                    :ARG1 (c24-8 / plenty)
                    :time (c24-7 / before
                                 :op1 (c24-3 / person
                                             :name (c24-5 / name
                                                          :op1 "Michaels")))
                    :ARG2-of (c24-9 / laugh-01
                                    :ARG0 (c24-10 / i)
                                    :manner (c24-11 / loud)
                                    :mode expressive)))

# ::snt This would be my life!
# ::tokens ["This", "would", "be", "my", "life", "!"]
# ::lemmas ["this", "would", "be", "my", "life", "!"]
(c25-0 / life
       :poss (c25-1 / i)
       :domain (c25-2 / this))

# ::snt Wheres the line forming?
# ::tokens ["Where", "s", "the", "line", "forming", "?"]
# ::lemmas ["where", "s", "the", "line", "form", "?"]
(c26-0 / form-01
       :ARG1 (c26-1 / line)
       :time (c26-2 / amr-unknown))

# ::snt MJ
# ::tokens ["MJ"]
# ::lemmas ["mj"]
(c27-0 / name
       :op1 "MJ")

# ::snt 'bout time.
# ::tokens ["'bout", "time", "."]
# ::lemmas ["'bout", "time", "."]
(c28-1 / time
       :mod (c28-0 / out))

# ::snt Im in
# ::tokens ["I", "m", "in"]
# ::lemmas ["i", "m", "in"]
(c29-0 / i
       :location (c29-1 / amr-empty))

# ::snt Right?
# ::tokens ["Right", "?"]
# ::lemmas ["right", "?"]
(c30-0 / request-confirmation-91)

# ::snt Oh my gosh no way! This would be so awesome!
# ::tokens ["Oh", "my", "gosh", "no", "way", "!", "This", "would", "be", "so", "awesome", "!"]
# ::lemmas ["oh", "my", "gosh", "no", "way", "!", "this", "would", "be", "so", "awesome", "!"]
(c34-1 / multi-sentence
       :snt1 (c34-3 / way
                    :mod (c34-0 / oh-my-god
                                :mode expressive)
                    :polarity -)
       :snt2 (c34-5 / awesome-02
                    :ARG0 (c34-4 / this)
                    :degree (c34-2 / so)))

# ::snt Uh oh.
# ::tokens ["Uh", "oh", "."]
# ::lemmas ["uh", "oh", "."]
(c35-0 / uh-oh
       :mode expressive)

# ::snt And you know that for certain?
# ::tokens ["And", "you", "know", "that", "for", "certain", "?"]
# ::lemmas ["and", "you", "know", "that", "for", "certain", "?"]
(c36-1 / and
       :op2 (c36-2 / know-01
                   :polarity (c36-4 / amr-unknown)
                   :ARG0 (c36-0 / you)
                   :ARG1 (c36-5 / that)
                   :mod (c36-3 / certain)))

# ::snt Sick perverted kiddy fiddler
# ::tokens ["Sick", "perverted", "kiddy", "fiddler"]
# ::lemmas ["Sick", "pervert", "kiddy", "fiddler"]
(c37-0 / fiddle
       :mod (c37-4 / person
                   :name (c37-1 / name
                                :op1 "Kiddy"))
       :ARG1-of (c37-2 / perverted-02)
       :ARG1-of (c37-3 / sick-02))

# ::snt Wonder if theyll have him portraying his childmolester phase
# ::tokens ["Wonder", "if", "they", "ll", "have", "him", "portraying", "his", "childmolester", "phase"]
# ::lemmas ["wonder", "if", "they", "ll", "have", "he", "portray", "his", "childmolester", "phase"]
(c38-4 / wonder-01
       :ARG0 (c38-6 / i)
       :ARG1 (c38-3 / portray-01
                    :ARG0 (c38-2 / he)
                    :ARG1 (c38-1 / phase
                                 :mod (c38-7 / person
                                             :ARG0-of (c38-0 / molest-01
                                                             :ARG1 (c38-5 / child)))
                                 :poss c38-2)))

# ::snt What the Fuck happened to broadway
# ::tokens ["What", "the", "Fuck", "happened", "to", "broadway"]
# ::lemmas ["what", "the", "Fuck", "happen", "to", "broadway"]
(c39-1 / event
       :mod (c39-0 / fuck
                   :mode expressive)
       :topic (c39-2 / company
                     :name (c39-3 / name
                                  :op1 "Broadway")))

# ::snt Will it include all the little kids he assaulted?
# ::tokens ["Will", "it", "include", "all", "the", "little", "kids", "he", "assaulted", "?"]
# ::lemmas ["will", "it", "include", "all", "the", "little", "kid", "he", "assault", "?"]
(c40-7 / include-01
       :polarity (c40-1 / amr-unknown)
       :ARG1 (c40-4 / kid
                    :mod (c40-3 / little)
                    :mod (c40-6 / all)
                    :ARG1-of (c40-5 / assault-01
                                    :ARG0 (c40-2 / he)))
       :ARG2 (c40-0 / it))

# ::snt this made me think of you!
# ::tokens ["this", "made", "me", "think", "of", "you", "!"]
# ::lemmas ["this", "make", "i", "think", "of", "you", "!"]
(c41-1 / make-02
       :ARG0 (c41-2 / this)
       :ARG1 (c41-4 / think-01
                    :ARG0 (c41-3 / i)
                    :ARG2 (c41-0 / you)))

# ::snt Please god dont let him get played by a white guy...
# ::tokens ["Please", "god", "do", "nt", "let", "him", "get", "played", "by", "a", "white", "guy", "..."]
# ::lemmas ["please", "god", "do", "not", "let", "he", "get", "play", "by", "a", "white", "guy", "..."]
(c42-4 / let-01
       :ARG0 (c42-3 / person
                    :name (c42-0 / name
                                 :op1 "God"))
       :ARG1 (c42-1 / play-10
                    :ARG0 (c42-6 / guy
                                 :ARG1-of (c42-5 / white-02))
                    :ARG1 (c42-2 / he))
       :mode imperative
       :polite +)
