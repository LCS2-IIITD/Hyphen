# ::snt Took the cars long enough
# ::tokens ["Took", "the", "cars", "long", "enough"]
# ::lemmas ["take", "the", "car", "long", "enough"]
(c1-4 / take-10
      :ARG1 (c1-3 / car)
      :ARG1-of (c1-1 / have-degree-91
                     :ARG2 (c1-2 / long-03
                                 :ARG1 c1-4)
                     :ARG3 (c1-0 / enough)))

# ::snt Much deserved. And the Moody Blues, long overdue.
# ::tokens ["Much", "deserved", ".", "And", "the", "Moody", "Blues", ",", "long", "overdue", "."]
# ::lemmas ["much", "deserve", ".", "and", "the", "Moody", "Blues", ",", "long", "overdue", "."]
(c2-2 / multi-sentence
      :snt1 (c2-7 / deserve-01
                  :degree (c2-4 / much))
      :snt2 (c2-6 / and
                  :op2 (c2-0 / organization
                             :name (c2-3 / name
                                         :op1 "Moody's"
                                         :op2 "Blues")
                             :mod (c2-1 / overdue
                                        :ARG1-of (c2-5 / long-03)))))

# ::snt Finally Ms. Simone is recognized.
# ::tokens ["Finally", "Ms.", "Simone", "is", "recognized", "."]
# ::lemmas ["finally", "Ms.", "Simone", "be", "recognize", "."]
(c3-0 / recognize-01
      :ARG1 (c3-3 / person
                  :name (c3-1 / name
                              :op1 "Ms."
                              :op2 "Simone"))
      :time (c3-2 / final))

# ::snt Ms Nina should have been in there a long time ago.
# ::tokens ["Ms", "Nina", "should", "have", "been", "in", "there", "a", "long", "time", "ago", "."]
# ::lemmas ["Ms", "Nina", "should", "have", "be", "in", "there", "a", "long", "time", "ago", "."]
(c4-2 / recommend-01
      :ARG1 (c4-0 / be-located-at-91
                  :ARG1 (c4-4 / person
                              :name (c4-1 / name
                                          :op1 "Ms"
                                          :op2 "Nina"))
                  :ARG2 (c4-7 / there)
                  :time (c4-3 / before
                              :op1 (c4-5 / now)
                              :quant (c4-8 / time
                                           :ARG1-of (c4-6 / long-03)))))

# ::snt Some great artist right there.
# ::tokens ["Some", "great", "artist", "right", "there", "."]
# ::lemmas ["some", "great", "artist", "right", "there", "."]
(c5-2 / artist
      :mod (c5-4 / great)
      :mod (c5-0 / some)
      :location (c5-3 / there
                      :mod (c5-1 / right)))

# ::snt Finally... more than deserved.
# ::tokens ["Finally", "...", "more", "than", "deserved", "."]
# ::lemmas ["finally", "...", "more", "than", "deserve", "."]
(c6-0 / deserve-01
      :time (c6-1 / final)
      :ARG2-of (c6-3 / have-degree-91
                     :ARG3 (c6-2 / more)))

# ::snt Love Them Both. Congrats &lt;3
# ::tokens ["Love", "Them", "Both", ".", "Congrats", "&", "lt;3"]
# ::lemmas ["Love", "Them", "Both", ".", "Congrats", "&", "lt;3"]
(c7-1 / multi-sentence
      :snt1 (c7-2 / love-01
                  :ARG1 (c7-4 / they
                              :quant (c7-0 / both)))
      :snt2 (c7-5 / and
                  :op1 (c7-3 / congratulate-01)
                  :op2 (c7-6 / lt;3)))

# ::snt Will that Richie Sambora and Jon Bon Jovi put their differences aside for one night, Harry?
# ::tokens ["Will", "that", "Richie", "Sambora", "and", "Jon", "Bon", "Jovi", "put", "their", "differences", "aside", "for", "one", "night", ",", "Harry", "?"]
# ::lemmas ["will", "that", "Richie", "Sambora", "and", "Jon", "Bon", "Jovi", "put", "their", "difference", "aside", "for", "one", "night", ",", "Harry", "?"]
(c9-3 / ask-01
      :ARG0 (c9-11 / i)
      :ARG1 (c9-5 / put-01
                  :ARG0 (c9-10 / and
                               :op1 (c9-1 / person
                                          :name (c9-0 / name
                                                      :op1 "Richie"
                                                      :op2 "Sambora"))
                               :op2 (c9-13 / person
                                           :name (c9-4 / name
                                                       :op1 "Jon"
                                                       :op2 "Bon"
                                                       :op3 "Jovi")))
                  :ARG1 (c9-12 / differ-01
                               :ARG0 c9-1
                               :ARG1 c9-13)
                  :ARG2 (c9-8 / aside)
                  :duration (c9-6 / night
                                  :quant 1)
                  :polarity (c9-2 / amr-unknown))
      :ARG2 (c9-7 / person
                  :name (c9-9 / name
                              :op1 "Harry")))

# ::snt Wonder if hell ride in on a steel horse
# ::tokens ["Wonder", "if", "hell", "ride", "in", "on", "a", "steel", "horse"]
# ::lemmas ["wonder", "if", "hell", "ride", "in", "on", "a", "steel", "horse"]
(c10-3 / wonder-01
       :ARG0 (c10-5 / i)
       :ARG1 (c10-1 / ride-01
                    :ARG0 (c10-2 / hell)
                    :manner (c10-4 / horse
                                   :consist-of (c10-0 / steel))))

# ::snt Utterly happy for Bon Jovi
# ::tokens ["Utterly", "happy", "for", "Bon", "Jovi"]
# ::lemmas ["utterly", "happy", "for", "Bon", "Jovi"]
(c11-2 / happy-01
       :ARG1 (c11-3 / person
                    :name (c11-0 / name
                                 :op1 "Bon"
                                 :op2 "Jovi"))
       :degree (c11-1 / utter))

# ::snt Love
# ::tokens ["Love"]
# ::lemmas ["Love"]
(c12-0 / love-01)

# ::snt I am sooooo in love with him since i am ...!!
# ::tokens ["I", "am", "sooooo", "in", "love", "with", "him", "since", "i", "am", "...", "!", "!"]
# ::lemmas ["i", "be", "sooooo", "in", "love", "with", "he", "since", "i", "be", "...", "!", "!"]
(c13-2 / love-01
       :ARG0 (c13-4 / i)
       :ARG1 (c13-1 / he)
       :degree (c13-0 / so)
       :ARG1-of (c13-3 / cause-01
                       :ARG0 c13-2))

# ::snt Eh, he just needs a new destination.
# ::tokens ["Eh", ",", "he", "just", "needs", "a", "new", "destination", "."]
# ::lemmas ["eh", ",", "he", "just", "need", "a", "new", "destination", "."]
(c14-0 / need-01
       :ARG0 (c14-2 / he)
       :ARG1 (c14-5 / destination
                    :ARG1-of (c14-3 / new-01))
       :mod (c14-4 / just)
       :mod (c14-1 / eh
                   :mode expressive))

# ::snt Yaaay Nina Simone!!
# ::tokens ["Yaaay", "Nina", "Simone", "!", "!"]
# ::lemmas ["Yaaay", "Nina", "Simone", "!", "!"]
(c15-2 / say-01
       :ARG0 (c15-4 / i)
       :ARG1 (c15-0 / yaaay)
       :ARG2 (c15-3 / person
                    :name (c15-1 / name
                                 :op1 "Nina"
                                 :op2 "Simone")))

# ::snt is in good company.
# ::tokens ["is", "in", "good", "company", "."]
# ::lemmas ["be", "in", "good", "company", "."]
(c16-2 / be-located-at-91
       :ARG2 (c16-1 / company
                    :ARG1-of (c16-0 / good-02)))

# ::snt Can't believe Nina Simone isn't already, I just assumed she was...
# ::tokens ["Ca", "n't", "believe", "Nina", "Simone", "is", "n't", "already", ",", "I", "just", "assumed", "she", "was", "..."]
# ::lemmas ["can", "not", "believe", "Nina", "Simone", "be", "not", "already", ",", "i", "just", "assume", "she", "be", "..."]
(c17-8 / and
       :op1 (c17-4 / possible-01
                   :ARG1 (c17-0 / believe-01
                                :ARG0 (c17-7 / i)
                                :ARG1 (c17-3 / be-temporally-at-91
                                             :ARG1 (c17-2 / person
                                                          :name (c17-1 / name
                                                                       :op1 "Nina"
                                                                       :op2 "Simone"))
                                             :ARG2 (c17-9 / already)
                                             :polarity -))
                   :polarity -)
       :op2 (c17-5 / assume-02
                   :ARG0 c17-7
                   :ARG1 c17-3
                   :mod (c17-6 / just)))

# ::snt Love Nina Simone!
# ::tokens ["Love", "Nina", "Simone", "!"]
# ::lemmas ["Love", "Nina", "Simone", "!"]
(c19-2 / love-01
       :ARG1 (c19-0 / person
                    :name (c19-1 / name
                                 :op1 "Nina"
                                 :op2 "Simone")))

# ::snt Congratulations
# ::tokens ["Congratulations"]
# ::lemmas ["congratulation"]
(c20-0 / congratulate-01)

# ::snt Congratulations!
# ::tokens ["Congratulations", "!"]
# ::lemmas ["congratulation", "!"]
(c21-0 / congratulate-01
       :mode expressive)

# ::snt If you need check it
# ::tokens ["If", "you", "need", "check", "it"]
# ::lemmas ["if", "you", "need", "check", "it"]
(c23-0 / check-01
       :ARG0 (c23-1 / you)
       :ARG1 (c23-3 / it)
       :condition (c23-2 / need-01
                         :ARG0 c23-1)
       :mode imperative)

# ::snt :But no Warren Zevon
# ::tokens [":", "But", "no", "Warren", "Zevon"]
# ::lemmas [":", "but", "no", "Warren", "Zevon"]
(c24-0 / contrast-01
       :ARG2 (c24-2 / person
                    :name (c24-1 / name
                                 :op1 "Warren"
                                 :op2 "Zevon")
                    :polarity -))

# ::snt Headline should be Sister Rosetta Tharp got in!
# ::tokens ["Headline", "should", "be", "Sister", "Rosetta", "Tharp", "got", "in", "!"]
# ::lemmas ["Headline", "should", "be", "Sister", "Rosetta", "Tharp", "get", "in", "!"]
(c25-2 / recommend-01
       :ARG1 (c25-3 / headline-01
                    :ARG1 (c25-7 / get-05
                                 :ARG0 (c25-4 / person
                                              :name (c25-0 / name
                                                           :op1 "Rosetta"
                                                           :op2 "Tharp")
                                              :ARG0-of (c25-5 / have-rel-role-91
                                                              :ARG2 (c25-1 / sister)))
                                 :ARG1 (c25-6 / inside))))

# ::snt Does Bruce Springsteen put him in ?
# ::tokens ["Does", "Bruce", "Springsteen", "put", "him", "in", "?"]
# ::lemmas ["do", "Bruce", "Springsteen", "put", "he", "in", "?"]
(c26-3 / put-01
       :ARG0 (c26-1 / person
                    :name (c26-0 / name
                                 :op1 "Bruce"
                                 :op2 "Springsteen"))
       :ARG1 (c26-2 / he)
       :polarity (c26-4 / amr-unknown))
