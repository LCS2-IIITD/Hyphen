# ::snt Sounds like George should have started out with a bicycle
# ::tokens ["Sounds", "like", "George", "should", "have", "started", "out", "with", "a", "bicycle"]
# ::lemmas ["sound", "like", "George", "should", "have", "start", "out", "with", "a", "bicycle"]
(c1-3 / sound-01
      :ARG1 (c1-4 / recommend-01
                  :ARG1 (c1-0 / start-out-05
                              :ARG0 (c1-5 / person
                                          :name (c1-2 / name
                                                      :op1 "George"))
                              :manner (c1-1 / bicycle))))

# ::snt Quite sure the nurses were fighting over who will look after him
# ::tokens ["Quite", "sure", "the", "nurses", "were", "fighting", "over", "who", "will", "look", "after", "him"]
# ::lemmas ["quite", "sure", "the", "nurse", "be", "fight", "over", "who", "will", "look", "after", "he"]
(c2-2 / sure-02
      :ARG1 (c2-0 / fight-01
                  :ARG0 (c2-1 / nurse)
                  :ARG1 (c2-5 / person
                              :ARG0-of (c2-4 / look-after-07
                                             :ARG1 (c2-3 / he))))
      :degree (c2-6 / quite))

# ::snt Ooh discharged thats good news
# ::tokens ["Ooh", "discharged", "that", "s", "good", "news"]
# ::lemmas ["Ooh", "discharge", "that", "s", "good", "news"]
(c3-2 / multi-sentence
      :snt1 (c3-5 / discharge-101
                  :mod (c3-0 / oh
                             :mode expressive))
      :snt2 (c3-1 / news
                  :ARG1-of (c3-4 / good-02)
                  :domain (c3-3 / that)))

# ::snt Esheee
# ::tokens ["Esheee"]
# ::lemmas ["esheee"]
(c4-0 / sheee
      :mode expressive)

# ::snt At least he's used to being in an ER.Some people get spooked.
# ::tokens ["At", "least", "he", "'s", "used", "to", "being", "in", "an", "ER.Some", "people", "get", "spooked", "."]
# ::lemmas ["at", "least", "he", "be", "use", "to", "be", "in", "an", "er.some", "people", "get", "spook", "."]
(c5-2 / multi-sentence
      :snt1 (c5-9 / use-02
                  :ARG0 (c5-5 / he)
                  :ARG1 (c5-1 / be-located-at-91
                              :ARG1 c5-5
                              :ARG2 (c5-4 / ER))
                  :mod (c5-7 / at-least))
      :snt2 (c5-8 / get-03
                  :ARG1 (c5-6 / person
                              :mod (c5-3 / some))
                  :ARG2 (c5-0 / spook-01
                              :ARG1 c5-6)))

# ::snt I know right?
# ::tokens ["I", "know", "right", "?"]
# ::lemmas ["i", "know", "right", "?"]
(c6-1 / know-01
      :polarity (c6-3 / amr-unknown)
      :ARG0 (c6-2 / i)
      :ARG1-of (c6-0 / right-02))

# ::snt Lol plus daai ompie is freaken hot
# ::tokens ["Lol", "plus", "daai", "ompie", "is", "freaken", "hot"]
# ::lemmas ["Lol", "plus", "daai", "ompie", "be", "freaken", "hot"]
(c7-5 / and
      :op1 (c7-4 / laugh-01
                 :manner (c7-6 / loud)
                 :mode expressive)
      :op2 (c7-2 / hot-03
                 :ARG1 (c7-3 / person
                             :name (c7-1 / name
                                         :op1 "Daai"
                                         :op2 "Ompie"))
                 :mod (c7-0 / freaken)))

# ::snt And for free
# ::tokens ["And", "for", "free"]
# ::lemmas ["and", "for", "free"]
(c8-1 / and
      :op2 (c8-0 / free-03))

# ::snt I agree with you Anele ahhhhh
# ::tokens ["I", "agree", "with", "you", "Anele", "ahhhhh"]
# ::lemmas ["i", "agree", "with", "you", "Anele", "ahhhhh"]
(c9-1 / say-01
      :ARG0 (c9-3 / i)
      :ARG1 (c9-4 / agree-01
                  :ARG0 c9-3
                  :ARG2 (c9-2 / person
                              :name (c9-0 / name
                                          :op1 "Anele")
                              :ARG2-of c9-1))
      :mod (c9-5 / ahhhh
                 :mode expressive))

# ::snt Hayibo Anele...If you dont mind me asking... Do you have a man?
# ::tokens ["Hayibo", "Anele", "...", "If", "you", "do", "nt", "mind", "me", "asking", "...", "Do", "you", "have", "a", "man", "?"]
# ::lemmas ["Hayibo", "Anele", "...", "if", "you", "do", "not", "mind", "i", "ask", "...", "do", "you", "have", "a", "man", "?"]
(c10-3 / say-01
       :ARG1 (c10-4 / have-condition-91
                    :ARG1 (c10-7 / have-03
                                 :ARG0 (c10-0 / you)
                                 :ARG1 (c10-1 / man)
                                 :polarity (c10-9 / amr-unknown))
                    :ARG2 (c10-5 / mind-01
                                 :ARG0 c10-0
                                 :ARG1 (c10-8 / ask-01
                                              :ARG0 (c10-10 / i)
                                              :ARG2 c10-0)
                                 :polarity -))
       :ARG2 (c10-6 / publication
                    :name (c10-2 / name
                                 :op1 "Hayibo"
                                 :op2 "Anele")))

# ::snt I could be his nurse anytime
# ::tokens ["I", "could", "be", "his", "nurse", "anytime"]
# ::lemmas ["i", "could", "be", "his", "nurse", "anytime"]
(c11-2 / possible-01
       :ARG1 (c11-0 / nurse-01
                    :ARG0 (c11-3 / i)
                    :ARG1 (c11-1 / he)
                    :time (c11-4 / anytime)))

# ::snt I can imagine i woukdnt have released him as his doctor bathung
# ::tokens ["I", "can", "imagine", "i", "woukdnt", "have", "released", "him", "as", "his", "doctor", "bathung"]
# ::lemmas ["i", "can", "imagine", "i", "woukdnt", "have", "release", "he", "as", "his", "doctor", "bathung"]
(c12-4 / possible-01
       :ARG1 (c12-5 / imagine-01
                    :ARG0 (c12-1 / i)
                    :ARG1 (c12-2 / release-01
                                 :ARG0 c12-1
                                 :ARG1 (c12-3 / he)
                                 :prep-as (c12-0 / batung
                                                 :mod (c12-6 / doctor)
                                                 :poss c12-3)
                                 :polarity -)))

# ::snt Amen
# ::tokens ["Amen"]
# ::lemmas ["amen"]
(c13-0 / man)

# ::snt You spelt 'mension' wrong.. Come correct
# ::tokens ["You", "spelt", "'", "mension", "'", "wrong", "..", "Come", "correct"]
# ::lemmas ["you", "spelt", "'", "mension", "'", "wrong", "..", "come", "correct"]
(c14-2 / multi-sentence
       :snt1 (c14-3 / spell-01
                    :ARG0 (c14-1 / you)
                    :ARG1 (c14-0 / string-entity
                                 :value "mension")
                    :ARG2-of (c14-4 / wrong-04))
       :snt2 (c14-5 / come-01
                    :ARG1 (c14-6 / correct-02
                                 :ARG1 c14-1)
                    :mode imperative))

# ::snt Anele cela undiphe inumber yakho, ndicela uthetha nawe mfondin haykakubi
# ::tokens ["Anele", "cela", "undiphe", "inumber", "yakho", ",", "ndicela", "uthetha", "nawe", "mfondin", "haykakubi"]
# ::lemmas ["Anele", "cela", "undiphe", "inumber", "yakho", ",", "ndicela", "uthetha", "nawe", "mfondin", "haykakubi"]
(c15-10 / and
        :op1 (c15-1 / be-located-at-91
                    :ARG1 (c15-6 / person
                                 :name (c15-3 / name
                                              :op1 "Anele"
                                              :op2 "Cela"))
                    :ARG2 (c15-9 / inumber
                                 :mod (c15-2 / yakho)))
        :op2 (c15-5 / be-located-at-91
                    :ARG1 c15-6
                    :ARG2 c15-9)
        :op3 (c15-12 / be-located-at-91
                     :ARG1 (c15-4 / person
                                  :name (c15-7 / name
                                               :op1 "Ndicela"
                                               :op2 "Uthetha"))
                     :ARG2 c15-9)
        :op4 (c15-0 / be-located-at-91
                    :ARG1 (c15-11 / person
                                  :name (c15-8 / name
                                               :op1 "Mfondin"
                                               :op2 "Haykakubi"))
                    :ARG2 c15-9))

# ::snt Yeah the oldest too
# ::tokens ["Yeah", "the", "oldest", "too"]
# ::lemmas ["yeah", "the", "old", "too"]
(c16-3 / have-degree-91
       :ARG2 (c16-0 / old)
       :ARG3 (c16-2 / most)
       :mod (c16-1 / yeah)
       :mod (c16-4 / too))

# ::snt Nah his too old for that!!!! wrinkles are not cute or sexy
# ::tokens ["Nah", "his", "too", "old", "for", "that", "!", "!", "!", "!", "wrinkles", "are", "not", "cute", "or", "sexy"]
# ::lemmas ["Nah", "his", "too", "old", "for", "that", "!", "!", "!", "!", "wrinkle", "be", "not", "cute", "or", "sexy"]
(c17-2 / multi-sentence
       :snt1 (c17-4 / have-degree-91
                    :ARG1 (c17-7 / he)
                    :ARG2 (c17-0 / old)
                    :ARG3 (c17-8 / too)
                    :ARG6 (c17-9 / that)
                    :polarity -)
       :snt2 (c17-1 / or
                    :op1 (c17-5 / cute
                                :domain (c17-6 / wrinkle-01)
                                :polarity -)
                    :op2 (c17-3 / sexy
                                :domain c17-6
                                :polarity -)))

# ::snt I'd hook you up with him yaz. We're kinda of like friends mna naye.
# ::tokens ["I", "'d", "hook", "you", "up", "with", "him", "yaz", ".", "We", "'re", "kinda", "of", "like", "friends", "mna", "naye", "."]
# ::lemmas ["i", "would", "hook", "you", "up", "with", "he", "yaz", ".", "we", "be", "kinda", "of", "like", "friend", "mna", "naye", "."]
(c18-3 / multi-sentence
       :snt1 (c18-8 / hook-up-02
                    :ARG0 (c18-13 / i)
                    :ARG1 (c18-2 / you)
                    :ARG2 (c18-12 / he)
                    :mod (c18-14 / yaz))
       :snt2 (c18-6 / resemble-01
                    :ARG1 (c18-11 / we)
                    :ARG2 (c18-9 / person
                                 :ARG0-of (c18-7 / have-rel-role-91
                                                 :ARG1 (c18-5 / i)
                                                 :ARG2 (c18-1 / friend)))
                    :degree (c18-10 / kind-of)
                    :ARG1-of (c18-4 / say-01
                                    :ARG0 (c18-15 / i)
                                    :ARG2 (c18-0 / you))))

# ::snt No RAF in Italy Anele.jst to mension.
# ::tokens ["No", "RAF", "in", "Italy", "Anele.jst", "to", "mension", "."]
# ::lemmas ["no", "RAF", "in", "Italy", "anele.jst", "to", "mension", "."]
(c19-5 / cause-01
       :ARG0 (c19-1 / mension)
       :ARG1 (c19-0 / be-located-at-91
                    :ARG1 (c19-3 / military
                                 :name (c19-2 / name
                                              :op1 "RAF"))
                    :ARG2 (c19-6 / country
                                 :name (c19-4 / name
                                              :op1 "Italy"))
                    :polarity -))

# ::snt Hau kodwa
# ::tokens ["Hau", "kodwa"]
# ::lemmas ["Hau", "kodwa"]
(c20-1 / kodwa
       :mod (c20-0 / hau
                   :mode expressive))

# ::snt mara
# ::tokens ["mara"]
# ::lemmas ["mara"]
(c21-1 / person
       :name (c21-0 / name
                    :op1 "Mara"))

# ::snt Goodness Anele
# ::tokens ["Goodness", "Anele"]
# ::lemmas ["Goodness", "Anele"]
(c22-3 / say-01
       :ARG1 (c22-0 / goodness)
       :ARG2 (c22-2 / person
                    :name (c22-1 / name
                                 :op1 "Anele")))

# ::snt I wouldn't mind taking leave from work to go and nurse him
# ::tokens ["I", "would", "n't", "mind", "taking", "leave", "from", "work", "to", "go", "and", "nurse", "him"]
# ::lemmas ["i", "would", "not", "mind", "take", "leave", "from", "work", "to", "go", "and", "nurse", "he"]
(c23-0 / mind-01
       :ARG0 (c23-6 / i)
       :ARG1 (c23-7 / take-01
                    :ARG0 c23-6
                    :ARG1 (c23-4 / leave-15
                                 :ARG0 c23-6
                                 :ARG2 (c23-5 / work-01))
                    :purpose (c23-2 / and
                                    :op1 (c23-8 / go-02
                                                :ARG0 c23-6)
                                    :op2 (c23-1 / nurse-01
                                                :ARG0 c23-6
                                                :ARG1 (c23-3 / he))))
       :polarity -)

# ::snt Na all I can imagine is old white flabby skin
# ::tokens ["Na", "all", "I", "can", "imagine", "is", "old", "white", "flabby", "skin"]
# ::lemmas ["na", "all", "i", "can", "imagine", "be", "old", "white", "flabby", "skin"]
(c24-4 / possible-01
       :ARG1 (c24-6 / imagine-01
                    :ARG0 (c24-3 / i)
                    :ARG1 (c24-2 / skin
                                 :mod (c24-0 / old)
                                 :ARG1-of (c24-5 / white-03)
                                 :mod (c24-1 / flabby)
                                 :domain (c24-7 / all))))

# ::snt I love Anele we should go out sometime , I'm a big fan ,rapper ,presenter ,motivator
# ::tokens ["I", "love", "Anele", "we", "should", "go", "out", "sometime", ",", "I", "'m", "a", "big", "fan", ",", "rapper", ",", "presenter", ",", "motivator"]
# ::lemmas ["i", "love", "Anele", "we", "should", "go", "out", "sometime", ",", "i", "be", "a", "big", "fan", ",", "rapper", ",", "presenter", ",", "motivator"]
(c25-3 / multi-sentence
       :snt1 (c25-10 / love-01
                     :ARG0 (c25-13 / i)
                     :ARG1 (c25-9 / person
                                  :name (c25-2 / name
                                               :op1 "Anele"))
                     :topic (c25-6 / recommend-01
                                   :ARG1 (c25-15 / go-out-17
                                                 :ARG0 (c25-11 / we)
                                                 :time (c25-4 / sometime))))
       :snt2 (c25-0 / fan
                    :domain (c25-5 / i)
                    :mod (c25-1 / big))
       :snt3 (c25-7 / person
                    :ARG0-of (c25-14 / present-01))
       :snt4 (c25-12 / person
                     :ARG0-of (c25-8 / motivate-01)))

# ::snt I sooooooooooooooooooooooo agree!
# ::tokens ["I", "sooooooooooooooooooooooo", "agree", "!"]
# ::lemmas ["i", "sooooooooooooooooooooooo", "agree", "!"]
(c26-2 / agree-01
       :ARG0 (c26-1 / i)
       :degree (c26-0 / so)
       :mode expressive)

# ::snt Iwe lol
# ::tokens ["Iwe", "lol"]
# ::lemmas ["Iwe", "lol"]
(c28-1 / laugh-01
       :ARG0 (c28-2 / i)
       :manner (c28-0 / loud))

# ::snt Anele!if only you could have been one of the nurses neh ma
# ::tokens ["Anele!if", "only", "you", "could", "have", "been", "one", "of", "the", "nurses", "neh", "ma"]
# ::lemmas ["anele!if", "only", "you", "could", "have", "be", "one", "of", "the", "nurse", "neh", "ma"]
(c29-3 / have-condition-91
       :ARG1 (c29-2 / no)
       :ARG2 (c29-4 / possible-01
                    :ARG1 (c29-6 / include-91
                                 :ARG1 (c29-1 / you)
                                 :ARG2 (c29-5 / nurse))
                    :mod (c29-0 / only))
       :mode expressive)

# ::snt He sure is we love him here in The States
# ::tokens ["He", "sure", "is", "we", "love", "him", "here", "in", "The", "States"]
# ::lemmas ["he", "sure", "be", "we", "love", "he", "here", "in", "the", "state"]
(c30-3 / love-01
       :ARG0 (c30-4 / we)
       :ARG1 (c30-2 / he)
       :ARG1-of (c30-1 / sure-02)
       :location (c30-6 / here
                        :location (c30-5 / country
                                         :name (c30-0 / name
                                                      :op1 "The"
                                                      :op2 "States"))))

# ::snt Poor fellow, hope he's OK...... Nice bloke !!!
# ::tokens ["Poor", "fellow", ",", "hope", "he", "'s", "OK", "......", "Nice", "bloke", "!", "!", "!"]
# ::lemmas ["poor", "fellow", ",", "hope", "he", "be", "ok", "......", "nice", "bloke", "!", "!", "!"]
(c31-3 / multi-sentence
       :snt1 (c31-5 / say-01
                    :ARG0 (c31-8 / i)
                    :ARG1 (c31-6 / hope-01
                                 :ARG0 c31-8
                                 :ARG1 (c31-0 / okay-03
                                              :ARG1 (c31-1 / fellow
                                                           :mod (c31-7 / poor)
                                                           :ARG2-of c31-5))))
       :snt2 (c31-2 / bloke
                    :ARG1-of (c31-4 / nice-01)))

# ::snt One of my elementary school principles, later on in life, after surviving open-heart surgery, went to Italy and crashed in that round about they have
# ::tokens ["One", "of", "my", "elementary", "school", "principles", ",", "later", "on", "in", "life", ",", "after", "surviving", "open", "-", "heart", "surgery", ",", "went", "to", "Italy", "and", "crashed", "in", "that", "round", "about", "they", "have"]
# ::lemmas ["One", "of", "my", "elementary", "school", "principle", ",", "later", "on", "in", "life", ",", "after", "survive", "open", "-", "heart", "surgery", ",", "go", "to", "Italy", "and", "crash", "in", "that", "round", "about", "they", "have"]
(c32-8 / and
       :op1 (c32-9 / go-02
                   :ARG0 (c32-16 / principle
                                 :ARG1-of (c32-18 / include-91
                                                  :ARG2 (c32-11 / principle
                                                                :mod (c32-0 / school
                                                                            :mod (c32-15 / elementary))
                                                                :poss (c32-4 / i)))
                                 :quant 1)
                   :ARG4 (c32-12 / country
                                 :name (c32-13 / name
                                               :op1 "Italy"))
                   :time (c32-6 / after
                                :op1 (c32-2 / survive-01
                                            :ARG0 c32-16
                                            :ARG1 (c32-1 / surgery-01
                                                         :ARG1 c32-16
                                                         :ARG2 (c32-5 / heart
                                                                      :ARG1-of (c32-3 / open-01))))))
       :op2 (c32-10 / crash-01
                    :ARG0 c32-16
                    :subevent-of (c32-14 / round
                                         :mod (c32-7 / that)
                                         :ARG1-of (c32-17 / have-03
                                                          :ARG0 c32-16))))

# ::snt :Those scooters are scary!
# ::tokens [":", "Those", "scooters", "are", "scary", "!"]
# ::lemmas [":", "those", "scooter", "be", "scary", "!"]
(c33-2 / scary-03
       :ARG0 (c33-0 / scooter
                    :mod (c33-1 / that)))

# ::snt Thats It George!!! No More Scooters For You!!! You Have Work To Do!!!
# ::tokens ["That", "s", "It", "George", "!", "!", "!", "No", "More", "Scooters", "For", "You", "!", "!", "!", "You", "Have", "Work", "To", "Do", "!", "!", "!"]
# ::lemmas ["that", "s", "it", "George", "!", "!", "!", "no", "more", "scooter", "for", "you", "!", "!", "!", "you", "have", "work", "to", "do", "!", "!", "!"]
(c34-4 / multi-sentence
       :snt1 (c34-5 / say-01
                    :ARG1 (c34-10 / that)
                    :ARG2 (c34-7 / person
                                 :name (c34-3 / name
                                              :op1 "George")))
       :snt2 (c34-6 / have-03
                    :ARG0 (c34-2 / you)
                    :ARG1 (c34-0 / scooter
                                 :mod (c34-8 / more))
                    :polarity -)
       :snt3 (c34-1 / obligate-01
                    :ARG1 (c34-11 / you)
                    :ARG2 (c34-9 / work-01
                                 :ARG0 c34-11)))

# ::snt Bit of an alarmist headline, don't you think? He was hospitalized but was then fortunately released hours ago.
# ::tokens ["Bit", "of", "an", "alarmist", "headline", ",", "do", "n't", "you", "think", "?", "He", "was", "hospitalized", "but", "was", "then", "fortunately", "released", "hours", "ago", "."]
# ::lemmas ["bit", "of", "an", "alarmist", "headline", ",", "do", "not", "you", "think", "?", "he", "be", "hospitalize", "but", "be", "then", "fortunately", "release", "hours", "ago", "."]
(c35-3 / multi-sentence
       :snt1 (c35-12 / think-01
                     :ARG0 (c35-2 / you)
                     :ARG1 (c35-14 / alarmist
                                   :degree (c35-1 / bit))
                     :polarity -)
       :snt2 (c35-10 / contrast-01
                     :ARG1 (c35-7 / hospitalize-01
                                  :ARG1 (c35-11 / he))
                     :ARG2 (c35-5 / release-01
                                  :ARG1 c35-11
                                  :ARG2-of (c35-0 / fortunate-01)
                                  :time (c35-8 / before
                                               :op1 (c35-4 / now)
                                               :quant (c35-9 / multiple
                                                             :op1 (c35-15 / temporal-quantity
                                                                          :unit (c35-6 / hour)
                                                                          :quant 1)))
                                  :time (c35-13 / then))))

# ::snt Get well soon!
# ::tokens ["Get", "well", "soon", "!"]
# ::lemmas ["get", "well", "soon", "!"]
(c36-0 / get-03
       :ARG1 (c36-2 / you)
       :ARG2 (c36-1 / well-05
                    :ARG1 c36-2)
       :time (c36-3 / soon)
       :mode imperative)

# ::snt Youre never too old to ride a scooter.
# ::tokens ["You", "re", "never", "too", "old", "to", "ride", "a", "scooter", "."]
# ::lemmas ["you", "re", "never", "too", "old", "to", "ride", "a", "scooter", "."]
(c37-5 / have-degree-91
       :ARG1 (c37-1 / you)
       :ARG2 (c37-0 / old)
       :ARG3 (c37-6 / too)
       :ARG6 (c37-3 / ride-01
                    :ARG0 c37-1
                    :ARG1 (c37-2 / scooter))
       :time (c37-4 / ever)
       :polarity -)

# ::snt Omg
# ::tokens ["Omg"]
# ::lemmas ["Omg"]
(c38-0 / oh-my-god
       :mode expressive)

# ::snt Lmfao yeesss
# ::tokens ["Lmfao", "yeesss"]
# ::lemmas ["lmfao", "yeesss"]
(c39-3 / and
       :op1 (c39-1 / laugh-01
                   :ARG0 (c39-2 / i)
                   :manner (c39-4 / loud))
       :op2 (c39-0 / yeess))

# ::snt What was he doing on some Euro pussy-ass scooter?
# ::tokens ["What", "was", "he", "doing", "on", "some", "Euro", "pussy", "-", "ass", "scooter", "?"]
# ::lemmas ["what", "be", "he", "do", "on", "some", "Euro", "pussy", "-", "ass", "scooter", "?"]
(c40-6 / do-02
       :ARG0 (c40-3 / he)
       :ARG1 (c40-5 / amr-unknown)
       :ARG2 (c40-1 / scooter
                    :mod (c40-4 / pussyass)
                    :mod (c40-2 / euro)
                    :mod (c40-0 / some)))

# ::snt Did you learn how to drive in kentucky? Get well soon
# ::tokens ["Did", "you", "learn", "how", "to", "drive", "in", "kentucky", "?", "Get", "well", "soon"]
# ::lemmas ["do", "you", "learn", "how", "to", "drive", "in", "kentucky", "?", "get", "well", "soon"]
(c41-2 / multi-sentence
       :snt1 (c41-5 / learn-01
                    :ARG0 (c41-1 / you)
                    :ARG1 (c41-9 / drive-01
                                 :ARG0 c41-1
                                 :location (c41-4 / state
                                                  :name (c41-3 / name
                                                               :op1 "Kentucky")))
                    :polarity (c41-7 / amr-unknown))
       :snt2 (c41-8 / get-05
                    :ARG1 (c41-10 / you)
                    :ARG2 (c41-6 / well-05
                                 :ARG1 c41-10)
                    :time (c41-0 / soon)
                    :mode imperative))

# ::snt Oh my God I feel sarcasm
# ::tokens ["Oh", "my", "God", "I", "feel", "sarcasm"]
# ::lemmas ["oh", "my", "god", "i", "feel", "sarcasm"]
(c42-0 / feel-01
       :ARG0 (c42-2 / i)
       :ARG1 (c42-3 / sarcasm)
       :mod (c42-1 / oh-my-god
                   :mode expressive))

# ::snt He's too old to be riding scooters.
# ::tokens ["He", "'s", "too", "old", "to", "be", "riding", "scooters", "."]
# ::lemmas ["he", "be", "too", "old", "to", "be", "ride", "scooter", "."]
(c43-3 / have-degree-91
       :ARG1 (c43-4 / he)
       :ARG2 (c43-0 / old)
       :ARG3 (c43-5 / too)
       :ARG6 (c43-2 / ride-01
                    :ARG0 c43-4
                    :ARG1 (c43-1 / scooter)))

# ::snt Stay off the scooter's and bikes you are to valuable to lose to an accident love ya be safe
# ::tokens ["Stay", "off", "the", "scooter", "'s", "and", "bikes", "you", "are", "to", "valuable", "to", "lose", "to", "an", "accident", "love", "ya", "be", "safe"]
# ::lemmas ["stay", "off", "the", "scooter", "'s", "and", "bike", "you", "be", "to", "valuable", "to", "lose", "to", "an", "accident", "love", "ya", "be", "safe"]
(c44-5 / multi-sentence
       :snt1 (c44-6 / stay-01
                    :ARG1 (c44-4 / you)
                    :ARG3 (c44-1 / off
                                 :op1 (c44-11 / and
                                              :op1 (c44-2 / scooter)
                                              :op2 (c44-3 / bike)))
                    :mode imperative)
       :snt2 (c44-7 / value-02
                    :ARG0 (c44-12 / you)
                    :ARG1-of (c44-9 / cause-01
                                    :ARG0 (c44-8 / lose-02
                                                 :ARG0 c44-12
                                                 :ARG1-of c44-9
                                                 :ARG0 (c44-10 / accident))))
       :ARG1-of (c44-14 / love-02
                        :ARG0 (c44-13 / i))
       :snt3 (c44-15 / safe-01
                     :ARG1 (c44-0 / you)))

# ::snt Get well soon, George.
# ::tokens ["Get", "well", "soon", ",", "George", "."]
# ::lemmas ["get", "well", "soon", ",", "George", "."]
(c45-2 / say-01
       :ARG0 (c45-5 / i)
       :ARG1 (c45-6 / get-03
                    :ARG1 (c45-3 / person
                                 :name (c45-1 / name
                                              :op1 "George"))
                    :ARG2 (c45-4 / well-05
                                 :ARG1 c45-3)
                    :time (c45-0 / soon))
       :ARG2 c45-3)

# ::snt Oh no!!
# ::tokens ["Oh", "no", "!", "!"]
# ::lemmas ["oh", "no", "!", "!"]
(c46-0 / oh-no
       :mode expressive)

# ::snt Omg , how will the world ever recover???
# ::tokens ["Omg", ",", "how", "will", "the", "world", "ever", "recover", "?", "?", "?"]
# ::lemmas ["Omg", ",", "how", "will", "the", "world", "ever", "recover", "?", "?", "?"]
(c47-1 / recover-01
       :ARG1 (c47-3 / world)
       :manner (c47-4 / amr-unknown)
       :time (c47-2 / ever)
       :mod (c47-0 / oh-my-god
                   :mode expressive))

# ::snt Get well soon, Mr Clooney.
# ::tokens ["Get", "well", "soon", ",", "Mr", "Clooney", "."]
# ::lemmas ["get", "well", "soon", ",", "Mr", "Clooney", "."]
(c48-2 / say-01
       :ARG1 (c48-5 / get-03
                    :ARG1 (c48-3 / person
                                 :name (c48-1 / name
                                              :op1 "Mr"
                                              :op2 "Cl Clooney"))
                    :ARG2 (c48-4 / well-05
                                 :ARG1 c48-3)
                    :time (c48-0 / soon)
                    :mode imperative)
       :ARG2 c48-3)

# ::snt He must have re watched this hysterical short clip, hope he is okay.
# ::tokens ["He", "must", "have", "re", "watched", "this", "hysterical", "short", "clip", ",", "hope", "he", "is", "okay", "."]
# ::lemmas ["he", "must", "have", "re", "watch", "this", "hysterical", "short", "clip", ",", "hope", "he", "be", "okay", "."]
(c49-1 / multi-sentence
       :snt1 (c49-9 / infer-01
                    :ARG1 (c49-7 / watch-01
                                 :ARG0 (c49-5 / he)
                                 :ARG1 (c49-6 / clip
                                              :mod (c49-8 / hysterical)
                                              :ARG1-of (c49-2 / short-07)
                                              :mod (c49-10 / this))))
       :snt2 (c49-4 / hope-01
                    :ARG0 (c49-3 / i)
                    :ARG1 (c49-0 / okay-03
                                 :ARG1 (c49-11 / he))))

# ::snt Oh no! I hope he's going to be okay.
# ::tokens ["Oh", "no", "!", "I", "hope", "he", "'s", "going", "to", "be", "okay", "."]
# ::lemmas ["oh", "no", "!", "i", "hope", "he", "be", "go", "to", "be", "okay", "."]
(c50-2 / multi-sentence
       :snt1 (c50-1 / oh-no
                    :mode expressive)
       :snt2 (c50-3 / hope-01
                    :ARG0 (c50-5 / i)
                    :ARG1 (c50-0 / okay-03
                                 :ARG1 (c50-4 / he))))
