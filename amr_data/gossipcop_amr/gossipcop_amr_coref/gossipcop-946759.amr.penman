# ::snt When has trump ever been a man . Cant even keep a woman satisfied.
# ::tokens ["When", "has", "trump", "ever", "been", "a", "man", ".", "Ca", "nt", "even", "keep", "a", "woman", "satisfied", "."]
# ::lemmas ["when", "have", "trump", "ever", "be", "a", "man", ".", "can", "nt", "even", "keep", "a", "woman", "satisfied", "."]
(c1-1 / multi-sentence
      :snt1 (c1-5 / man
                  :domain (c1-6 / person
                                :name (c1-0 / name
                                            :op1 " trump"))
                  :time (c1-4 / ever)
                  :time (c1-9 / amr-unknown))
      :snt2 (c1-2 / possible-01
                  :ARG1 (c1-7 / keep-02
                              :ARG1 (c1-3 / satisfy-01
                                          :ARG0 (c1-8 / woman)))
                  :mod (c1-10 / even)
                  :polarity -))

# ::snt Really? He said that??? Im fucking dying
# ::tokens ["Really", "?", "He", "said", "that", "?", "?", "?", "I", "m", "fucking", "dying"]
# ::lemmas ["really", "?", "he", "say", "that", "?", "?", "?", "i", "m", "fuck", "die"]
(c3-1 / multi-sentence
      :snt1 (c3-3 / real-04
                  :polarity (c3-7 / amr-unknown))
      :snt2 (c3-2 / say-01
                  :ARG0 (c3-4 / he)
                  :ARG1 (c3-5 / that))
      :snt3 (c3-8 / die-01
                  :ARG1 (c3-6 / i)
                  :mod (c3-0 / fucking)))

# ::snt That looks like something the dumbass is participating in.
# ::tokens ["That", "looks", "like", "something", "the", "dumbass", "is", "participating", "in", "."]
# ::lemmas ["that", "look", "like", "something", "the", "dumbass", "be", "participate", "in", "."]
(c4-2 / look-02
      :ARG0 (c4-3 / that)
      :ARG1 (c4-1 / participate-01
                  :ARG0 (c4-4 / dumbass)
                  :ARG1 (c4-0 / something)))

# ::snt Its just SO sad to me that he was &amp; is SO greatly attacked for this interview years ago where he was just being himself &amp; made us laugh....he had no political agenda at the time.
# ::tokens ["Its", "just", "SO", "sad", "to", "me", "that", "he", "was", "&", "amp", ";", "is", "SO", "greatly", "attacked", "for", "this", "interview", "years", "ago", "where", "he", "was", "just", "being", "himself", "&", "amp", ";", "made", "us", "laugh", "....", "he", "had", "no", "political", "agenda", "at", "the", "time", "."]
# ::lemmas ["its", "just", "so", "sad", "to", "i", "that", "he", "be", "&", "amp", ";", "be", "so", "greatly", "attack", "for", "this", "interview", "years", "ago", "where", "he", "be", "just", "be", "himself", "&", "amp", ";", "make", "we", "laugh", "....", "he", "have", "no", "political", "agenda", "at", "the", "time", "."]
(c5-13 / and
       :op1 (c5-0 / sad-02
                  :ARG0 (c5-12 / and
                               :op1 (c5-7 / he)
                               :op2 (c5-10 / amp))
                  :ARG1 (c5-25 / i)
                  :mod (c5-11 / just)
                  :degree (c5-4 / so))
       :op2 (c5-27 / attack-01
                   :ARG1 c5-7
                   :ARG2 (c5-6 / interview-01
                               :time (c5-16 / before
                                            :op1 (c5-20 / now)
                                            :quant (c5-17 / multiple
                                                          :op1 (c5-14 / temporal-quantity
                                                                      :unit (c5-5 / year)
                                                                      :quant 1)))
                               :mod (c5-19 / this)
                               :time-of (c5-22 / and
                                               :op1 (c5-18 / and
                                                           :op1 (c5-1 / by-oneself
                                                                      :domain c5-7
                                                                      :mod c5-11)
                                                           :op2 (c5-8 / make-02
                                                                      :ARG0 c5-7
                                                                      :ARG1 (c5-2 / laugh-01
                                                                                  :ARG0 (c5-23 / we))))))
                   :degree (c5-15 / great
                                  :degree (c5-3 / so)))
       :op3 (c5-24 / have-03
                   :ARG0 c5-7
                   :ARG1 (c5-9 / agenda
                               :mod (c5-21 / politics))
                   :time (c5-26 / time)
                   :polarity -))

# ::snt Ya,Cheat on your wives,fuck people out of jobs,and treat people like shit.
# ::tokens ["Ya", ",", "Cheat", "on", "your", "wives", ",", "fuck", "people", "out", "of", "jobs", ",", "and", "treat", "people", "like", "shit", "."]
# ::lemmas ["ya", ",", "cheat", "on", "your", "wife", ",", "fuck", "people", "out", "of", "job", ",", "and", "treat", "people", "like", "shit", "."]
(c6-11 / and
       :op1 (c6-7 / cheat-03
                  :ARG0 (c6-1 / you)
                  :ARG1 (c6-6 / person
                              :ARG0-of (c6-5 / have-rel-role-91
                                             :ARG1 c6-1
                                             :ARG2 (c6-8 / wife))))
       :op2 (c6-0 / fuck-01
                  :ARG0 c6-1
                  :ARG1 (c6-2 / person)
                  :source (c6-9 / job))
       :op3 (c6-10 / treat-01
                   :ARG0 c6-1
                   :ARG1 c6-2
                   :ARG2 (c6-4 / resemble-01
                               :ARG1 c6-2
                               :ARG2 (c6-3 / shit))))

# ::snt Ask Trump what the definition of a man is. He has no clue. Now ask him the definition of liar is. All he needs to do is look in the mirror.
# ::tokens ["Ask", "Trump", "what", "the", "definition", "of", "a", "man", "is", ".", "He", "has", "no", "clue", ".", "Now", "ask", "him", "the", "definition", "of", "liar", "is", ".", "All", "he", "needs", "to", "do", "is", "look", "in", "the", "mirror", "."]
# ::lemmas ["ask", "Trump", "what", "the", "definition", "of", "a", "man", "be", ".", "he", "have", "no", "clue", ".", "now", "ask", "he", "the", "definition", "of", "liar", "be", ".", "all", "he", "need", "to", "do", "be", "look", "in", "the", "mirror", "."]
(c7-11 / multi-sentence
       :snt1 (c7-7 / ask-01
                   :ARG0 (c7-1 / you)
                   :ARG1 (c7-8 / thing
                               :ARG2-of (c7-22 / define-01
                                               :ARG1 (c7-3 / man)))
                   :ARG2 (c7-19 / person
                                :name (c7-18 / name
                                             :op1 "Trump"))
                   :mode imperative)
       :snt2 (c7-4 / have-03
                   :ARG0 (c7-21 / he)
                   :ARG1 (c7-14 / clue)
                   :polarity -)
       :snt3 (c7-6 / ask-01
                   :ARG0 (c7-9 / you)
                   :ARG1 c7-8
                   :ARG2-of (c7-15 / define-01
                                   :ARG1 (c7-12 / person
                                                :ARG0-of (c7-0 / lie-08)))
                   :mode imperative)
       :ARG2 (c7-2 / he)
       :time (c7-13 / now)
       :snt4 (c7-20 / need-01
                    :ARG0 (c7-16 / he)
                    :ARG1 (c7-10 / look-01
                                 :ARG0 c7-16
                                 :ARG1 (c7-17 / mirror))
                    :mod (c7-5 / all)))

# ::snt Thats rich coming from trump who wouldnt know jack shit about being a man
# ::tokens ["That", "s", "rich", "coming", "from", "trump", "who", "would", "nt", "know", "jack", "shit", "about", "being", "a", "man"]
# ::lemmas ["that", "s", "rich", "come", "from", "trump", "who", "would", "not", "know", "jack", "shit", "about", "be", "a", "man"]
(c8-2 / rich
      :domain (c8-8 / that)
      :ARG1-of (c8-6 / cause-01
                     :ARG0 (c8-4 / person
                                 :name (c8-0 / name
                                             :op1 " trump")
                                 :ARG0-of (c8-5 / know-01
                                                :ARG1 (c8-3 / anything
                                                            :mod (c8-7 / jack-shit
                                                                       :mode expressive))
                                                :topic (c8-1 / man
                                                             :domain c8-4)
                                                :polarity -))))

# ::snt is one to talk, being the 'man-child' that he is with his temper tantrums and the like!
# ::tokens ["is", "one", "to", "talk", ",", "being", "the", "'", "man", "-", "child", "'", "that", "he", "is", "with", "his", "temper", "tantrums", "and", "the", "like", "!"]
# ::lemmas ["be", "one", "to", "talk", ",", "be", "the", "'", "man", "-", "child", "'", "that", "he", "be", "with", "his", "temper", "tantrum", "and", "the", "like", "!"]
(c9-5 / talk-01
      :ARG0 (c9-0 / one
                  :domain c9-0
                  :ARG0-of (c9-4 / cause-01
                                 :ARG1 (c9-7 / and
                                             :op1 (c9-8 / tantrum
                                                        :mod (c9-6 / temper)
                                                        :poss c9-0)
                                             :op2 (c9-3 / thing
                                                        :ARG1-of (c9-2 / resemble-01
                                                                       :ARG2 c9-8)))
                                 :domain c9-0)
                  :mod (c9-1 / manchild
                             :domain c9-0)))

# ::snt Some people will find anything to hate on. You ok with me got you!
# ::tokens ["Some", "people", "will", "find", "anything", "to", "hate", "on", ".", "You", "ok", "with", "me", "got", "you", "!"]
# ::lemmas ["some", "people", "will", "find", "anything", "to", "hate", "on", ".", "you", "ok", "with", "i", "get", "you", "!"]
(c10-3 / multi-sentence
       :snt1 (c10-0 / find-01
                    :ARG0 (c10-6 / person
                                 :mod (c10-4 / some))
                    :ARG1 (c10-8 / anything
                                 :ARG1-of (c10-5 / hate-01
                                                 :ARG0 c10-6)))
       :snt2 (c10-9 / get-02
                    :ARG0 (c10-2 / you
                                 :ARG1-of (c10-1 / okay-04
                                                 :ARG0 (c10-7 / i)))
                    :ARG1 (c10-10 / you)
                    :mode expressive))

# ::snt Oh no Jimmy has the cooties
# ::tokens ["Oh", "no", "Jimmy", "has", "the", "cooties"]
# ::lemmas ["oh", "no", "Jimmy", "have", "the", "cootie"]
(c11-2 / have-03
       :ARG0 (c11-3 / person
                    :name (c11-1 / name
                                 :op1 "Jimmy"))
       :ARG1 (c11-4 / cootie)
       :mod (c11-0 / oh-no
                   :mode expressive))

# ::snt Be a man, Said the baby... Jimmys response was so classy. Jimmy is amazing!
# ::tokens ["Be", "a", "man", ",", "Said", "the", "baby", "...", "Jimmys", "response", "was", "so", "classy", ".", "Jimmy", "is", "amazing", "!"]
# ::lemmas ["be", "a", "man", ",", "say", "the", "baby", "...", "Jimmys", "response", "be", "so", "classy", ".", "Jimmy", "be", "amazing", "!"]
(c12-3 / multi-sentence
       :snt1 (c12-5 / say-01
                    :ARG1 (c12-7 / man
                                 :domain (c12-2 / you))
                    :snt2-of c12-3)
       :ARG1 (c12-1 / baby)
       :snt3 (c12-10 / classy-02
                     :ARG1 (c12-6 / respond-01
                                  :ARG0 (c12-0 / show
                                               :name (c12-4 / name
                                                            :op1 "Jimmys")))
                     :degree (c12-12 / so))
       :snt4 (c12-11 / amaze-01
                     :ARG0 (c12-8 / person
                                  :name (c12-9 / name
                                               :op1 "Jimmy"))
                     :mode expressive))

# ::snt More of a man than will ever be.
# ::tokens ["More", "of", "a", "man", "than", "will", "ever", "be", "."]
# ::lemmas ["more", "of", "a", "man", "than", "will", "ever", "be", "."]
(c13-3 / have-degree-91
       :ARG2 (c13-0 / man)
       :ARG3 (c13-2 / more)
       :ARG4 (c13-4 / man
                    :time (c13-1 / ever)))

# ::snt jimmy needs to teach trump how to Be A Man
# ::tokens ["jimmy", "needs", "to", "teach", "trump", "how", "to", "Be", "A", "Man"]
# ::lemmas ["jimmy", "need", "to", "teach", "trump", "how", "to", "be", "a", "man"]
(c15-0 / need-01
       :ARG0 (c15-4 / person
                    :name (c15-3 / name
                                 :op1 "Jimmy"))
       :ARG1 (c15-6 / teach-01
                    :ARG0 c15-4
                    :ARG1 (c15-7 / thing
                                 :manner-of (c15-1 / man
                                                   :domain (c15-2 / person
                                                                  :name (c15-5 / name
                                                                               :op1 " trump")
                                                                  :ARG2-of c15-6)))))

# ::snt Alternative headline: Whiny elderly man-baby tells a guy to be a man!
# ::tokens ["Alternative", "headline", ":", "Whiny", "elderly", "man", "-", "baby", "tells", "a", "guy", "to", "be", "a", "man", "!"]
# ::lemmas ["alternative", "headline", ":", "Whiny", "elderly", "man", "-", "baby", "tell", "a", "guy", "to", "be", "a", "man", "!"]
(c16-4 / headline-01
       :ARG2 (c16-7 / tell-01
                    :ARG0 (c16-0 / baby
                                 :mod (c16-1 / man)
                                 :mod (c16-6 / whine-01)
                                 :mod (c16-3 / elderly))
                    :ARG1 (c16-5 / man
                                 :domain (c16-8 / guy
                                                :ARG2-of c16-7)))
       :mod (c16-2 / alternative))
