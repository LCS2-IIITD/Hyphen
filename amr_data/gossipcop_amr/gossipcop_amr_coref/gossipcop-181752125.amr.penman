# ::snt Why not? Just curious.
# ::tokens ["Why", "not", "?", "Just", "curious", "."]
# ::lemmas ["why", "not", "?", "just", "curious", "."]
(c1-0 / multi-sentence
      :snt1 (c1-1 / cause-01
                  :ARG0 (c1-4 / amr-unknown)
                  :polarity -)
      :snt2 (c1-5 / curious-01
                  :ARG1 (c1-3 / i)
                  :mod (c1-2 / just)))

# ::snt It was the best
# ::tokens ["It", "was", "the", "best"]
# ::lemmas ["it", "be", "the", "good"]
(c2-1 / have-degree-91
      :ARG1 (c2-3 / it)
      :ARG2 (c2-0 / good-02
                  :ARG1 c2-3)
      :ARG3 (c2-2 / most))

# ::snt Favorite show of all time!!!
# ::tokens ["Favorite", "show", "of", "all", "time", "!", "!", "!"]
# ::lemmas ["favorite", "show", "of", "all", "time", "!", "!", "!"]
(c3-3 / show-04
      :ARG1-of (c3-1 / favor-01)
      :time (c3-2 / time
                  :mod (c3-0 / all)))

# ::snt My favourite couple!
# ::tokens ["My", "favourite", "couple", "!"]
# ::lemmas ["my", "favourite", "couple", "!"]
(c4-0 / couple
      :ARG1-of (c4-1 / favor-01
                     :ARG0 (c4-2 / i)))

# ::snt The Kardashians/Jenners could learn a thing or two from these .
# ::tokens ["The", "Kardashians", "/", "Jenners", "could", "learn", "a", "thing", "or", "two", "from", "these", "."]
# ::lemmas ["the", "Kardashians", "/", "Jenners", "could", "learn", "a", "thing", "or", "two", "from", "these", "."]
(c5-5 / possible-01
      :ARG1 (c5-6 / learn-01
                  :ARG0 (c5-3 / slash
                              :op1 (c5-2 / person
                                         :name (c5-1 / name
                                                     :op1 "Kardian"))
                              :op2 (c5-8 / person
                                         :name (c5-4 / name
                                                     :op1 "Jenner")))
                  :ARG1 (c5-7 / thing
                              :quant (c5-0 / or
                                           :op1 1
                                           :op2 2))
                  :ARG2 (c5-9 / this)))

# ::snt *Publicly
# ::tokens ["*", "Publicly"]
# ::lemmas ["*", "publicly"]
(c6-0 / public-02)

# ::snt You wont ever never see Jamie Fox n Katie Holmes slipping lol.. Cause Tom gone be waiting on the outside of the restaurant by their car with them papers that keeps her from dating publicity.
# ::tokens ["You", "wo", "nt", "ever", "never", "see", "Jamie", "Fox", "n", "Katie", "Holmes", "slipping", "lol", "..", "Cause", "Tom", "gone", "be", "waiting", "on", "the", "outside", "of", "the", "restaurant", "by", "their", "car", "with", "them", "papers", "that", "keeps", "her", "from", "dating", "publicity", "."]
# ::lemmas ["you", "will", "not", "ever", "never", "see", "Jamie", "Fox", "n", "Katie", "Holmes", "slip", "lol", "..", "Cause", "Tom", "go", "be", "wait", "on", "the", "outside", "of", "the", "restaurant", "by", "their", "car", "with", "they", "paper", "that", "keep", "she", "from", "date", "publicity", "."]
(c7-0 / see-01
      :ARG0 (c7-6 / you)
      :ARG1 (c7-4 / slip-01
                  :ARG1 (c7-9 / and
                              :op1 (c7-18 / person
                                          :name (c7-15 / name
                                                       :op1 "Jamie"
                                                       :op2 "Fox"))
                              :op2 (c7-12 / person
                                          :name (c7-13 / name
                                                       :op1 "Katie"
                                                       :op2 "Holmes"))))
      :time (c7-17 / ever)
      :ARG2-of (c7-1 / laugh-01
                     :ARG0 c7-6
                     :manner (c7-11 / loud))
      :ARG1-of (c7-14 / cause-01
                      :ARG0 (c7-20 / wait-01
                                   :ARG1 (c7-8 / and
                                               :op1 (c7-3 / person
                                                          :name (c7-19 / name
                                                                       :op1 "Tom"))
                                               :op2 (c7-2 / paper
                                                          :ARG0-of (c7-7 / keep-04
                                                                         :ARG1 c7-12
                                                                         :ARG2 (c7-21 / date-02
                                                                                      :ARG0 c7-12
                                                                                      :ARG1 (c7-10 / publicity)))))
                                   :ARG2 (c7-5 / outside
                                               :op1 (c7-16 / restaurant))))
      :polarity -)

# ::snt Awww, I got a little nostalgic there lol
# ::tokens ["Awww", ",", "I", "got", "a", "little", "nostalgic", "there", "lol"]
# ::lemmas ["Awww", ",", "i", "get", "a", "little", "nostalgic", "there", "lol"]
(c8-5 / get-03
      :ARG1 (c8-3 / i)
      :ARG2 (c8-0 / nostalgic
                  :degree (c8-1 / little))
      :mod (c8-4 / awww
                 :mode expressive)
      :ARG2-of (c8-6 / laugh-01
                     :ARG0 c8-3
                     :manner (c8-2 / loud)
                     :mode expressive))

# ::snt Still didnt tell us why. Could it be guilt ???
# ::tokens ["Still", "did", "nt", "tell", "us", "why", ".", "Could", "it", "be", "guilt", "?", "?", "?"]
# ::lemmas ["still", "do", "not", "tell", "we", "why", ".", "could", "it", "be", "guilt", "?", "?", "?"]
(c9-0 / multi-sentence
      :snt1 (c9-6 / tell-01
                  :ARG1 (c9-7 / thing
                              :ARG0-of (c9-5 / cause-01))
                  :ARG2 (c9-4 / we)
                  :mod (c9-1 / still)
                  :polarity -)
      :snt2 (c9-3 / possible-01
                  :ARG1 (c9-8 / guilt)
                  :polarity (c9-2 / amr-unknown)))

# ::snt Just like Joey and Dawson never climb that ladder together
# ::tokens ["Just", "like", "Joey", "and", "Dawson", "never", "climb", "that", "ladder", "together"]
# ::lemmas ["just", "like", "Joey", "and", "Dawson", "never", "climb", "that", "ladder", "together"]
(c10-2 / resemble-01
       :ARG2 (c10-7 / climb-01
                    :ARG0 (c10-10 / and
                                  :op1 (c10-5 / person
                                              :name (c10-0 / name
                                                           :op1 "Joey"))
                                  :op2 (c10-1 / person
                                              :name (c10-4 / name
                                                           :op1 "D Dawson")))
                    :ARG1 (c10-6 / ladder
                                 :mod (c10-8 / that))
                    :time (c10-3 / ever)
                    :manner (c10-11 / together)
                    :polarity -)
       :mod (c10-9 / just))
