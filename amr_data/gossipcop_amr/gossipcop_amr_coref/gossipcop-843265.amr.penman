# ::snt I have been voting for you!!!
# ::tokens ["I", "have", "been", "voting", "for", "you", "!", "!", "!"]
# ::lemmas ["i", "have", "be", "vote", "for", "you", "!", "!", "!"]
(c1-0 / vote-01
      :ARG0 (c1-2 / i)
      :ARG1 (c1-1 / you))

# ::snt Voted!!!! Good luck!!!!
# ::tokens ["Voted", "!", "!", "!", "!", "Good", "luck", "!", "!", "!", "!"]
# ::lemmas ["vote", "!", "!", "!", "!", "good", "luck", "!", "!", "!", "!"]
(c2-2 / multi-sentence
      :snt1 (c2-1 / vote-01)
      :snt2 (c2-3 / luck
                  :ARG1-of (c2-0 / good-02)
                  :mode expressive))

# ::snt Thanks for trying. Doesnt work on an iPhone
# ::tokens ["Thanks", "for", "trying", ".", "Does", "nt", "work", "on", "an", "iPhone"]
# ::lemmas ["thank", "for", "try", ".", "do", "not", "work", "on", "an", "iPhone"]
(c3-1 / multi-sentence
      :snt1 (c3-6 / thank-01
                  :ARG0 (c3-7 / i)
                  :ARG1 (c3-0 / you)
                  :ARG2 (c3-8 / try-01
                              :ARG0 c3-0))
      :snt2 (c3-5 / work-09
                  :ARG1 (c3-3 / it)
                  :ARG2 (c3-4 / product
                              :name (c3-2 / name
                                          :op1 "iPhone"))
                  :polarity -))

# ::snt (lovely newf ) hope this helps good luck good night
# ::tokens ["(", "lovely", "newf", ")", "hope", "this", "helps", "good", "luck", "good", "night"]
# ::lemmas ["(", "lovely", "newf", ")", "hope", "this", "help", "good", "luck", "good", "night"]
(c4-1 / say-01
      :ARG1 (c4-2 / hope-01
                  :ARG0 (c4-7 / i)
                  :ARG1 (c4-6 / help-01
                              :ARG0 (c4-8 / this)
                              :ARG1 (c4-3 / luck
                                          :ARG1-of (c4-9 / good-02)))
                  :time (c4-0 / night
                              :ARG1-of c4-9))
      :ARG2 (c4-4 / person
                  :name (c4-5 / name
                              :op1 "Newf")
                  :ARG1-of (c4-10 / love-01)))

# ::snt How do you get that to work on a phone? My dog broke my laptop. I dont think shes even sorry.
# ::tokens ["How", "do", "you", "get", "that", "to", "work", "on", "a", "phone", "?", "My", "dog", "broke", "my", "laptop", ".", "I", "do", "nt", "think", "she", "s", "even", "sorry", "."]
# ::lemmas ["how", "do", "you", "get", "that", "to", "work", "on", "a", "phone", "?", "my", "dog", "break", "my", "laptop", ".", "i", "do", "not", "think", "she", "s", "even", "sorry", "."]
(c5-11 / multi-sentence
       :snt1 (c5-5 / have-manner-91
                   :ARG1 (c5-8 / get-04
                               :ARG0 (c5-3 / you)
                               :ARG1 (c5-16 / work-09
                                            :ARG1 (c5-7 / that)
                                            :medium (c5-15 / phone)))
                   :ARG2 (c5-6 / amr-unknown))
       :snt2 (c5-10 / break-01
                    :ARG0 (c5-12 / person
                                 :ARG0-of (c5-17 / have-rel-role-91
                                                 :ARG1 (c5-18 / i)
                                                 :ARG2 (c5-19 / dog)))
                    :ARG1 (c5-1 / laptop
                                :poss (c5-4 / i)))
       :snt3 (c5-13 / think-01
                    :ARG0 (c5-9 / i)
                    :ARG1 (c5-0 / sorry-01
                                :ARG1 (c5-2 / she)
                                :mod (c5-14 / even))
                    :polarity -))

# ::snt youre welcome
# ::tokens ["you", "re", "welcome"]
# ::lemmas ["you", "re", "welcome"]
(c6-0 / welcome-01
      :ARG1 (c6-1 / you))

# ::snt Thank you, so much. Just voted!
# ::tokens ["Thank", "you", ",", "so", "much", ".", "Just", "voted", "!"]
# ::lemmas ["thank", "you", ",", "so", "much", ".", "just", "vote", "!"]
(c7-1 / multi-sentence
      :snt1 (c7-8 / thank-01
                  :ARG0 (c7-7 / i)
                  :ARG1 (c7-0 / you)
                  :degree (c7-5 / much
                                :degree (c7-2 / so)))
      :snt2 (c7-4 / vote-01
                  :ARG0 (c7-3 / i)
                  :time (c7-6 / just)))

# ::snt If you switch to the desktop version it should work hope that helps (full instructions are somewhere on our timeline)
# ::tokens ["If", "you", "switch", "to", "the", "desktop", "version", "it", "should", "work", "hope", "that", "helps", "(", "full", "instructions", "are", "somewhere", "on", "our", "timeline", ")"]
# ::lemmas ["if", "you", "switch", "to", "the", "desktop", "version", "it", "should", "work", "hope", "that", "help", "(", "full", "instruction", "be", "somewhere", "on", "our", "timeline", ")"]
(c8-4 / multi-sentence
      :snt1 (c8-9 / have-condition-91
                  :ARG1 (c8-11 / hope-01
                               :ARG0 (c8-12 / i)
                               :ARG1 (c8-8 / help-01
                                           :ARG0 (c8-5 / switch-01
                                                       :ARG0 (c8-3 / you)
                                                       :ARG2 (c8-7 / version
                                                                   :mod (c8-14 / desktop))
                                                       :ARG2-of c8-9))))
      :snt2 (c8-2 / be-located-at-91
                  :ARG1 (c8-6 / instruction
                              :mod (c8-0 / full))
                  :ARG2 (c8-1 / somewhere
                              :location (c8-13 / timeline
                                               :poss (c8-10 / we)))))

# ::snt There's no link to click on so you can vote. How can I vote, please?
# ::tokens ["There", "'s", "no", "link", "to", "click", "on", "so", "you", "can", "vote", ".", "How", "can", "I", "vote", ",", "please", "?"]
# ::lemmas ["there", "be", "no", "link", "to", "click", "on", "so", "you", "can", "vote", ".", "how", "can", "i", "vote", ",", "please", "?"]
(c9-1 / multi-sentence
      :snt1 (c9-4 / link
                  :purpose (c9-6 / click-01
                                 :ARG0 (c9-0 / you)
                                 :purpose (c9-3 / vote-01
                                                :ARG0 c9-0
                                                :ARG1-of (c9-5 / possible-01)))
                  :polarity -)
      :snt2 (c9-2 / possible-01
                  :ARG1 (c9-7 / vote-01
                              :ARG0 (c9-8 / i))
                  :manner (c9-9 / amr-unknown)
                  :polite +))

# ::snt Been at work &amp; didnt see the time!!
# ::tokens ["Been", "at", "work", "&", "amp", ";", "did", "nt", "see", "the", "time", "!", "!"]
# ::lemmas ["be", "at", "work", "&", "amp", ";", "do", "not", "see", "the", "time", "!", "!"]
(c10-5 / and
       :op1 (c10-0 / be-located-at-91
                   :op1 (c10-2 / work-01)
                   :op2 (c10-4 / amp)
                   :ARG2 c10-5)
       :op2 (c10-1 / see-01
                   :ARG0 (c10-6 / i)
                   :ARG1 (c10-3 / time)
                   :polarity -))

# ::snt We will see!
# ::tokens ["We", "will", "see", "!"]
# ::lemmas ["we", "will", "see", "!"]
(c11-1 / see-01
       :ARG0 (c11-0 / we))

# ::snt Guess we did not make it.
# ::tokens ["Guess", "we", "did", "not", "make", "it", "."]
# ::lemmas ["guess", "we", "do", "not", "make", "it", "."]
(c12-0 / guess-01
       :ARG1 (c12-2 / make-it-14
                    :ARG0 (c12-1 / we)
                    :polarity -))

# ::snt Eastern time.
# ::tokens ["Eastern", "time", "."]
# ::lemmas ["Eastern", "time", "."]
(c13-1 / time
       :mod (c13-0 / east))

# ::snt Guess got the time wrong
# ::tokens ["Guess", "got", "the", "time", "wrong"]
# ::lemmas ["Guess", "get", "the", "time", "wrong"]
(c14-0 / guess-01
       :ARG1 (c14-2 / get-02
                    :ARG1 (c14-1 / wrong-04
                                 :ARG1 (c14-3 / time))))

# ::snt I thought it was to stay open until PM
# ::tokens ["I", "thought", "it", "was", "to", "stay", "open", "until", "PM"]
# ::lemmas ["i", "think", "it", "be", "to", "stay", "open", "until", "PM"]
(c15-4 / think-01
       :ARG0 (c15-3 / i)
       :ARG1 (c15-1 / stay-01
                    :ARG1 (c15-2 / it)
                    :ARG3 (c15-0 / open-09
                                 :ARG1 c15-2)
                    :time (c15-6 / until
                                 :op1 (c15-5 / date-entity
                                             :time "PM"))))

# ::snt voting ended at pm. that was minutes ago
# ::tokens ["voting", "ended", "at", "pm", ".", "that", "was", "minutes", "ago"]
# ::lemmas ["voting", "end", "at", "pm", ".", "that", "be", "minutes", "ago"]
(c16-1 / multi-sentence
       :snt1 (c16-4 / end-01
                    :ARG1 (c16-3 / vote-01)
                    :time (c16-8 / date-entity
                                 :time " pm"))
       :snt2 (c16-0 / be-temporally-at-91
                    :ARG1 c16-4
                    :ARG2 (c16-5 / before
                                 :op1 (c16-2 / now)
                                 :quant (c16-6 / multiple
                                               :op1 (c16-7 / temporal-quantity
                                                           :unit (c16-9 / minute)
                                                           :quant 1)))))

# ::snt Has the site gone down!! Refusing all of a sudden to let me vote!
# ::tokens ["Has", "the", "site", "gone", "down", "!", "!", "Refusing", "all", "of", "a", "sudden", "to", "let", "me", "vote", "!"]
# ::lemmas ["have", "the", "site", "go", "down", "!", "!", "refuse", "all", "of", "a", "sudden", "to", "let", "i", "vote", "!"]
(c17-1 / multi-sentence
       :snt1 (c17-9 / down-03
                    :polarity (c17-7 / amr-unknown)
                    :ARG1 (c17-2 / site))
       :snt2 (c17-3 / refuse-01
                    :ARG1 (c17-5 / let-01
                                 :ARG1 (c17-4 / vote-01
                                              :ARG0 (c17-6 / i)))
                    :manner (c17-0 / sudden
                                   :mod (c17-8 / all))))

# ::snt Yes, we definitely need voters
# ::tokens ["Yes", ",", "we", "definitely", "need", "voters"]
# ::lemmas ["yes", ",", "we", "definitely", "need", "voter"]
(c18-0 / need-01
       :ARG0 (c18-3 / we)
       :ARG1 (c18-2 / person
                    :ARG0-of (c18-1 / vote-01))
       :mod (c18-4 / definite))

# ::snt holy cow. It's literally /50 right now! less than hours to go!
# ::tokens ["holy", "cow", ".", "It", "'s", "literally", "/50", "right", "now", "!", "less", "than", "hours", "to", "go", "!"]
# ::lemmas ["holy", "cow", ".", "it", "be", "literally", "/50", "right", "now", "!", "less", "than", "hours", "to", "go", "!"]
(c19-0 / multi-sentence
       :snt1 (c19-6 / cow
                    :mod (c19-4 / holy)
                    :mode expressive)
       :snt2 (c19-3 / equal-01
                    :mod (c19-5 / literal)
                    :time (c19-1 / now
                                 :mod (c19-2 / right))
                    :ARG2 50)
       :snt3 (c19-10 / less-than
                     :op1 (c19-8 / temporal-quantity
                                 :unit (c19-7 / hour)
                                 :quant 1)
                     :ARG2-of (c19-9 / go-01)))

# ::snt Yes it is. We need voters Pronto! Vote for Sam!
# ::tokens ["Yes", "it", "is", ".", "We", "need", "voters", "Pronto", "!", "Vote", "for", "Sam", "!"]
# ::lemmas ["yes", "it", "be", ".", "we", "need", "voter", "Pronto", "!", "vote", "for", "Sam", "!"]
(c20-2 / multi-sentence
       :snt1 (c20-0 / yes)
       :snt2 (c20-1 / need-01
                    :ARG0 (c20-7 / we)
                    :ARG1 (c20-6 / person
                                 :ARG0-of (c20-4 / vote-01))
                    :mod (c20-3 / pronto))
       :snt3 (c20-8 / vote-01
                    :ARG0 (c20-10 / you)
                    :ARG1 (c20-9 / person
                                 :name (c20-5 / name
                                              :op1 "Sam"))
                    :mode imperative))

# ::snt Its so close.
# ::tokens ["Its", "so", "close", "."]
# ::lemmas ["its", "so", "close", "."]
(c21-0 / close-10
       :ARG1 (c21-1 / it)
       :degree (c21-2 / so))

# ::snt Please vote as much as you can. Sam seems to be stuck at % We need all the voters we can get one day left!
# ::tokens ["Please", "vote", "as", "much", "as", "you", "can", ".", "Sam", "seems", "to", "be", "stuck", "at", "%", "We", "need", "all", "the", "voters", "we", "can", "get", "one", "day", "left", "!"]
# ::lemmas ["please", "vote", "as", "much", "as", "you", "can", ".", "Sam", "seem", "to", "be", "stick", "at", "%", "we", "need", "all", "the", "voter", "we", "can", "get", "one", "day", "leave", "!"]
(c22-14 / multi-sentence
        :snt1 (c22-7 / vote-01
                     :ARG0 (c22-6 / you)
                     :ARG1-of (c22-9 / have-quant-91
                                     :ARG2 (c22-8 / much)
                                     :ARG3 (c22-18 / equal)
                                     :ARG4 (c22-19 / possible-01
                                                   :ARG1 (c22-1 / vote-01
                                                                :ARG0 c22-6)))
                     :mode imperative
                     :polite +)
        :snt2 (c22-0 / seem-01
                     :ARG1 (c22-4 / stick-01
                                  :ARG1 (c22-15 / person
                                                :name (c22-17 / name
                                                              :op1 "Sam"))
                                  :ARG2 (c22-3 / percentage)))
        :snt3 (c22-16 / need-01
                      :ARG0 (c22-20 / we)
                      :ARG1 (c22-2 / person
                                   :ARG0-of (c22-13 / vote-01)
                                   :mod (c22-11 / all)
                                   :ARG1-of (c22-12 / get-01
                                                    :ARG0 c22-20
                                                    :ARG1-of (c22-10 / possible-01)
                                                    :time (c22-21 / day
                                                                  :mod (c22-5 / one))))))

# ::snt I know. Same thing happened last year!!
# ::tokens ["I", "know", ".", "Same", "thing", "happened", "last", "year", "!", "!"]
# ::lemmas ["i", "know", ".", "same", "thing", "happen", "last", "year", "!", "!"]
(c23-1 / multi-sentence
       :snt1 (c23-4 / know-01
                    :ARG0 (c23-6 / i))
       :snt2 (c23-3 / event
                    :ARG1-of (c23-2 / same-01)
                    :time (c23-0 / year
                                 :mod (c23-5 / last))))

# ::snt Keep voting but % is not budging
# ::tokens ["Keep", "voting", "but", "%", "is", "not", "budging"]
# ::lemmas ["keep", "voting", "but", "%", "be", "not", "budge"]
(c24-5 / contrast-01
       :ARG1 (c24-3 / keep-02
                    :ARG0 (c24-1 / you)
                    :ARG1 (c24-2 / vote-01
                                 :ARG0 c24-1)
                    :mode imperative)
       :ARG2 (c24-0 / budge-01
                    :ARG0 (c24-4 / percentage-entity)
                    :polarity -))

# ::snt Need to vote for Sam as much as we can Sam us now under % Let's do this clan!
# ::tokens ["Need", "to", "vote", "for", "Sam", "as", "much", "as", "we", "can", "Sam", "us", "now", "under", "%", "Let", "'s", "do", "this", "clan", "!"]
# ::lemmas ["need", "to", "vote", "for", "Sam", "as", "much", "as", "we", "can", "Sam", "us", "now", "under", "%", "let", "us", "do", "this", "clan", "!"]
(c26-1 / multi-sentence
       :snt1 (c26-0 / need-01
                    :ARG0 (c26-10 / we)
                    :ARG1 (c26-3 / vote-01
                                 :ARG0 c26-10
                                 :ARG1 (c26-6 / person
                                              :name (c26-5 / name
                                                           :op1 "Sam"))
                                 :ARG1-of (c26-7 / have-quant-91
                                                 :ARG2 (c26-8 / much)
                                                 :ARG3 (c26-4 / equal)
                                                 :ARG4 (c26-2 / possible-01
                                                              :ARG1 (c26-11 / vote-01
                                                                            :ARG0 c26-10
                                                                            :ARG1 c26-6)))))
       :snt2 (c26-14 / do-02
                     :ARG0 (c26-9 / we)
                     :ARG1 (c26-12 / clan
                                   :mod (c26-13 / this))
                     :mode imperative))

# ::snt No longer the case! He is behind now!!
# ::tokens ["No", "longer", "the", "case", "!", "He", "is", "behind", "now", "!", "!"]
# ::lemmas ["no", "long", "the", "case", "!", "he", "be", "behind", "now", "!", "!"]
(c27-2 / multi-sentence
       :snt1 (c27-5 / case-04
                    :ARG1 (c27-6 / it)
                    :time (c27-1 / no-longer))
       :snt2 (c27-0 / behind
                    :domain (c27-3 / he)
                    :time (c27-4 / now)))

# ::snt Sam has a slight edge!
# ::tokens ["Sam", "has", "a", "slight", "edge", "!"]
# ::lemmas ["Sam", "have", "a", "slight", "edge", "!"]
(c28-3 / have-03
       :ARG0 (c28-4 / person
                    :name (c28-0 / name
                                 :op1 "Sam"))
       :ARG1 (c28-2 / edge-03
                    :degree (c28-1 / slight))
       :mode expressive)

# ::snt I keep voting!!
# ::tokens ["I", "keep", "voting", "!", "!"]
# ::lemmas ["i", "keep", "vote", "!", "!"]
(c31-1 / keep-02
       :ARG0 (c31-2 / i)
       :ARG1 (c31-0 / vote-01
                    :ARG0 c31-2)
       :mode expressive)

# ::snt Just did
# ::tokens ["Just", "did"]
# ::lemmas ["just", "do"]
(c33-0 / event
       :mod (c33-2 / i)
       :mod (c33-1 / just))

# ::snt Ok. I did itTHUMBS UP FOR BOB AND RICHARD
# ::tokens ["Ok", ".", "I", "did", "itTHUMBS", "UP", "FOR", "BOB", "AND", "RICHARD"]
# ::lemmas ["ok", ".", "i", "do", "itthumbs", "up", "for", "BOB", "and", "RICHARD"]
(c34-2 / multi-sentence
       :snt1 (c34-0 / okay-01)
       :snt2 (c34-8 / do-02
                    :ARG0 (c34-6 / i)
                    :ARG1 (c34-4 / it)
                    :purpose (c34-7 / and
                                    :op1 (c34-1 / business)
                                    :op2 (c34-5 / person
                                                :name (c34-3 / name
                                                             :op1 "Richard")))))

# ::snt Keep voting for Richard, Jarod and Zach too!
# ::tokens ["Keep", "voting", "for", "Richard", ",", "Jarod", "and", "Zach", "too", "!"]
# ::lemmas ["keep", "voting", "for", "Richard", ",", "Jarod", "and", "Zach", "too", "!"]
(c35-6 / keep-02
       :ARG0 (c35-0 / you)
       :ARG1 (c35-3 / vote-01
                    :ARG0 c35-0
                    :ARG1 (c35-9 / and
                                 :op1 (c35-5 / person
                                             :name (c35-1 / name
                                                          :op1 "Richard"))
                                 :op2 (c35-2 / person
                                             :name (c35-4 / name
                                                          :op1 "Jaredod"))
                                 :op3 (c35-10 / person
                                              :name (c35-7 / name
                                                           :op1 "Zach")))
                    :mod (c35-8 / too))
       :mode imperative)

# ::snt Yay!
# ::tokens ["Yay", "!"]
# ::lemmas ["Yay", "!"]
(c36-0 / yay
       :mode expressive)

# ::snt Have my entire office voting now
# ::tokens ["Have", "my", "entire", "office", "voting", "now"]
# ::lemmas ["have", "my", "entire", "office", "voting", "now"]
(c37-4 / have-04
       :ARG1 (c37-2 / vote-01
                    :ARG0 (c37-0 / office
                                 :poss (c37-5 / i)
                                 :mod (c37-3 / entire))
                    :time (c37-1 / now)))

# ::snt Was on until PM ET, was down more than points.
# ::tokens ["Was", "on", "until", "PM", "ET", ",", "was", "down", "more", "than", "points", "."]
# ::lemmas ["be", "on", "until", "PM", "ET", ",", "be", "down", "more", "than", "point", "."]
(c38-6 / and
       :op1 (c38-0 / on-01
                   :time (c38-8 / until
                                :op1 (c38-7 / date-entity
                                            :time "PM"
                                            :timezone "ET")))
       :op2 (c38-4 / down-03
                   :ARG2-of (c38-2 / have-degree-91
                                   :ARG1 (c38-5 / it)
                                   :ARG3 (c38-1 / more)
                                   :ARG4 (c38-3 / point))))

# ::snt Been trying but can't get in by phone!
# ::tokens ["Been", "trying", "but", "ca", "n't", "get", "in", "by", "phone", "!"]
# ::lemmas ["be", "try", "but", "can", "not", "get", "in", "by", "phone", "!"]
(c39-3 / try-01
       :ARG0 (c39-2 / i)
       :concession-of (c39-1 / possible-01
                             :ARG1 (c39-4 / get-05
                                          :ARG0 c39-2
                                          :ARG1 (c39-0 / phone))
                             :polarity -))

# ::snt Sam who?
# ::tokens ["Sam", "who", "?"]
# ::lemmas ["Sam", "who", "?"]
(c40-1 / person
       :name (c40-0 / name
                    :op1 "Sam")
       :polarity (c40-2 / amr-unknown))

# ::snt who???
# ::tokens ["who", "?", "?", "?"]
# ::lemmas ["who", "?", "?", "?"]
(c41-0 / amr-unknown)

# ::snt YES!! Hoping for third year in a row win.
# ::tokens ["YES", "!", "!", "Hoping", "for", "third", "year", "in", "a", "row", "win", "."]
# ::lemmas ["yes", "!", "!", "hope", "for", "third", "year", "in", "a", "row", "win", "."]
(c42-2 / multi-sentence
       :snt1 (c42-1 / yes)
       :snt2 (c42-3 / hope-01
                    :ARG1 (c42-4 / win-01
                                 :ord (c42-0 / ordinal-entity
                                             :mod (c42-5 / in-a-row)
                                             :value 3))))

# ::snt They are just so dang hot!
# ::tokens ["They", "are", "just", "so", "dang", "hot", "!"]
# ::lemmas ["they", "be", "just", "so", "dang", "hot", "!"]
(c44-1 / hot-03
       :ARG1 (c44-3 / they)
       :mod (c44-4 / dang
                   :degree (c44-0 / so)
                   :mode expressive)
       :mod (c44-2 / just))

# ::snt Me too--back to /50.
# ::tokens ["Me", "too", "--", "back", "to", "/50", "."]
# ::lemmas ["i", "too", "--", "back", "to", "/50", "."]
(c45-2 / and
       :op1 (c45-3 / i
                   :mod (c45-4 / too))
       :op2 (c45-5 / go-back-19
                   :ARG2 (c45-1 / rate-entity-91
                                :ARG3 (c45-6 / temporal-quantity
                                             :unit (c45-0 / year)
                                             :quant 50))))

# ::snt Vote by April th at :00 pm
# ::tokens ["Vote", "by", "April", "th", "at", ":", "00", "pm"]
# ::lemmas ["vote", "by", "April", "th", "at", ":", "00", "pm"]
(c46-1 / vote-01
       :time (c46-2 / by
                    :op1 (c46-0 / date-entity
                                :day (c46-3 / th
                                            :time "16:00")
                                :month 4)))

# ::snt Yes, I am voting because I am not a robot!
# ::tokens ["Yes", ",", "I", "am", "voting", "because", "I", "am", "not", "a", "robot", "!"]
# ::lemmas ["yes", ",", "i", "be", "vote", "because", "i", "be", "not", "a", "robot", "!"]
(c48-1 / vote-01
       :ARG0 (c48-2 / i)
       :ARG1-of (c48-0 / cause-01
                       :ARG0 (c48-3 / robot
                                    :domain c48-2
                                    :polarity -)))

# ::snt Here we go again
# ::tokens ["Here", "we", "go", "again"]
# ::lemmas ["here", "we", "go", "again"]
(c50-0 / go-02
       :ARG0 (c50-1 / we)
       :ARG4 (c50-2 / here)
       :mod (c50-3 / again))
