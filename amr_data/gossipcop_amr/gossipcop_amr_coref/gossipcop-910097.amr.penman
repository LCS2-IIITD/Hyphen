# ::snt Awesome, a natural! And of course Kevin James has to be the next lovable Captain Kangaroo.
# ::tokens ["Awesome", ",", "a", "natural", "!", "And", "of", "course", "Kevin", "James", "has", "to", "be", "the", "next", "lovable", "Captain", "Kangaroo", "."]
# ::lemmas ["Awesome", ",", "a", "natural", "!", "and", "of", "course", "Kevin", "James", "have", "to", "be", "the", "next", "lovable", "Captain", "Kangaroo", "."]
(c1-3 / multi-sentence
      :snt1 (c1-11 / and
                   :op1 (c1-10 / awe-01)
                   :op2 (c1-2 / natural-03)
                   :snt2-of c1-3)
      :op2 (c1-0 / obligate-01
                 :ARG1 (c1-6 / person
                             :name (c1-5 / name
                                         :op1 "Kevin"
                                         :op2 "James"))
                 :ARG2 (c1-4 / person
                             :name (c1-7 / name
                                         :op1 "Captain"
                                         :op2 "Kangaroo")
                             :mod (c1-9 / next)
                             :ARG1-of (c1-8 / love-01
                                            :ARG0 c1-6))
                 :mod (c1-1 / of-course)))

# ::snt Won't cha be my neighbor
# ::tokens ["Wo", "n't", "cha", "be", "my", "neighbor"]
# ::lemmas ["will", "not", "cha", "be", "my", "neighbor"]
(c2-1 / neighbor-01
      :polarity (c2-3 / amr-unknown)
      :ARG1 (c2-0 / you)
      :ARG2 (c2-2 / i))

# ::snt Right make sure he has Sacramento Milks
# ::tokens ["Right", "make", "sure", "he", "has", "Sacramento", "Milks"]
# ::lemmas ["right", "make", "sure", "he", "have", "Sacramento", "Milks"]
(c3-3 / ensure-01
      :ARG0 (c3-0 / you)
      :ARG1 (c3-4 / have-03
                  :ARG0 (c3-5 / he)
                  :ARG1 (c3-6 / team
                              :name (c3-1 / name
                                          :op1 "Sacramento"
                                          :op2 "Milks")))
      :ARG2-of (c3-2 / right-06)
      :mode imperative)

# ::snt I see your point but like mine better...
# ::tokens ["I", "see", "your", "point", "but", "like", "mine", "better", "..."]
# ::lemmas ["i", "see", "your", "point", "but", "like", "mine", "well", "..."]
(c4-7 / contrast-01
      :ARG1 (c4-3 / see-01
                  :ARG0 (c4-8 / i)
                  :ARG1 (c4-5 / point-04
                              :ARG0 (c4-0 / you)))
      :ARG2 (c4-6 / like-01
                  :ARG0 c4-8
                  :ARG1 (c4-2 / point-04
                              :ARG0 c4-8)
                  :ARG1-of (c4-4 / have-degree-91
                                 :ARG2 (c4-9 / good-02)
                                 :ARG3 (c4-1 / more))))

# ::snt But but, Tom 'wholesome boy' Hanks!
# ::tokens ["But", "but", ",", "Tom", "'", "wholesome", "boy", "'", "Hanks", "!"]
# ::lemmas ["but", "but", ",", "Tom", "'", "wholesome", "boy", "'", "Hanks", "!"]
(c5-3 / contrast-01
      :ARG2 (c5-2 / person
                  :name (c5-1 / name
                              :op1 "Tom"
                              :op2 "Hanks")
                  :mod (c5-0 / boy
                             :mod (c5-4 / whore))))

# ::snt But Michael Keaton actually worked with Fred and is a burgher
# ::tokens ["But", "Michael", "Keaton", "actually", "worked", "with", "Fred", "and", "is", "a", "burgher"]
# ::lemmas ["but", "Michael", "Keaton", "actually", "work", "with", "Fred", "and", "be", "a", "burgher"]
(c6-5 / contrast-01
      :ARG2 (c6-8 / and
                  :op1 (c6-6 / work-01
                             :ARG0 (c6-4 / person
                                         :name (c6-1 / name
                                                     :op1 "Michael"
                                                     :op2 "Keaton"))
                             :ARG3 (c6-2 / person
                                         :name (c6-3 / name
                                                     :op1 "Fred"))
                             :ARG1-of (c6-7 / actual-02))
                  :op2 (c6-0 / burgher
                             :domain c6-4)))

# ::snt But Tom Hanks is so wholesome!
# ::tokens ["But", "Tom", "Hanks", "is", "so", "wholesome", "!"]
# ::lemmas ["but", "Tom", "Hanks", "be", "so", "wholesome", "!"]
(c7-3 / contrast-01
      :ARG2 (c7-4 / wholesome
                  :degree (c7-1 / so)
                  :domain (c7-2 / person
                                :name (c7-0 / name
                                            :op1 "Tom"
                                            :op2 "Hanks"))
                  :mode expressive))

# ::snt I can. Michael Keaton
# ::tokens ["I", "can", ".", "Michael", "Keaton"]
# ::lemmas ["i", "can", ".", "Michael", "Keaton"]
(c8-0 / multi-sentence
      :snt1 (c8-4 / possible-01
                  :ARG1 (c8-3 / event
                              :mod (c8-5 / i)))
      :snt2 (c8-1 / person
                  :name (c8-2 / name
                              :op1 "Michael"
                              :op2 "Keaton")))

# ::snt This is gonna be epic like Forest Gump!!!
# ::tokens ["This", "is", "gon", "na", "be", "epic", "like", "Forest", "Gump", "!", "!", "!"]
# ::lemmas ["this", "be", "going", "to", "be", "epic", "like", "Forest", "Gump", "!", "!", "!"]
(c9-1 / resemble-01
      :ARG1 (c9-4 / this)
      :ARG2 (c9-3 / person
                  :name (c9-0 / name
                              :op1 "Forrest"
                              :op2 "Gump"))
      :degree (c9-2 / epic))

# ::snt Perfect casting. Tom Hanks is an all round good guy. Just once I wanted to see Mr Rogers do something out of character.
# ::tokens ["Perfect", "casting", ".", "Tom", "Hanks", "is", "an", "all", "round", "good", "guy", ".", "Just", "once", "I", "wanted", "to", "see", "Mr", "Rogers", "do", "something", "out", "of", "character", "."]
# ::lemmas ["perfect", "casting", ".", "Tom", "Hanks", "be", "an", "all", "round", "good", "guy", ".", "just", "once", "i", "want", "to", "see", "Mr", "Rogers", "do", "something", "out", "of", "character", "."]
(c10-10 / multi-sentence
        :snt1 (c10-13 / cast-02
                      :ARG1-of (c10-15 / perfect-02))
        :snt2 (c10-7 / guy
                     :ARG1-of (c10-1 / good-02
                                     :mod (c10-6 / all-round))
                     :domain (c10-11 / person
                                     :name (c10-14 / name
                                                   :op1 "Tom"
                                                   :op2 "Hanks")))
        :snt3 (c10-16 / want-01
                      :ARG0 (c10-17 / i)
                      :ARG1 (c10-0 / see-01
                                   :ARG0 c10-17
                                   :ARG1 (c10-18 / do-02
                                                 :ARG0 (c10-2 / person
                                                              :name (c10-12 / name
                                                                            :op1 "Mr"
                                                                            :op2 "Rogers"))
                                                 :ARG1 (c10-3 / something
                                                              :ARG1-of (c10-4 / out-06
                                                                              :ARG2 (c10-8 / character)))))
                      :time (c10-9 / once
                                   :mod (c10-5 / just))))

# ::snt We will see how he does! Should work out ok!!
# ::tokens ["We", "will", "see", "how", "he", "does", "!", "Should", "work", "out", "ok", "!", "!"]
# ::lemmas ["we", "will", "see", "how", "he", "do", "!", "should", "work", "out", "ok", "!", "!"]
(c11-1 / multi-sentence
       :snt1 (c11-2 / see-01
                    :ARG0 (c11-6 / we)
                    :ARG1 (c11-7 / thing
                                 :manner-of (c11-8 / do-02
                                                   :ARG0 (c11-4 / he))))
       :snt2 (c11-3 / recommend-01
                    :ARG1 (c11-5 / work-out-02
                                 :ARG1-of (c11-0 / okay-04))))

# ::snt nice to have a childhood icon that it turns out never molested or abused kids or women or had bad addictions or behaviorsnot even with a middle name like McFeely
# ::tokens ["nice", "to", "have", "a", "childhood", "icon", "that", "it", "turns", "out", "never", "molested", "or", "abused", "kids", "or", "women", "or", "had", "bad", "addictions", "or", "behaviorsnot", "even", "with", "a", "middle", "name", "like", "McFeely"]
# ::lemmas ["nice", "to", "have", "a", "childhood", "icon", "that", "it", "turn", "out", "never", "molest", "or", "abuse", "kid", "or", "woman", "or", "have", "bad", "addiction", "or", "behaviorsnot", "even", "with", "a", "middle", "name", "like", "McFeely"]
(c12-3 / nice-01
       :ARG1 (c12-6 / have-03
                    :ARG1 (c12-12 / icon
                                  :mod (c12-10 / childhood)
                                  :topic (c12-0 / or
                                                :op1 (c12-4 / molest-01
                                                            :ARG1 (c12-1 / or
                                                                         :op1 (c12-7 / kid)
                                                                         :op2 (c12-11 / woman))
                                                            :time (c12-5 / ever)
                                                            :polarity -)
                                                :op2 (c12-13 / abuse-01
                                                             :ARG1 c12-1
                                                             :polarity -)
                                                :op3 c12-6
                                                :ARG0 c12-1
                                                :ARG1 (c12-16 / or
                                                              :op1 (c12-14 / addict-01
                                                                           :ARG1 c12-1)
                                                              :op2 (c12-2 / behave-01
                                                                          :ARG0 c12-1)
                                                              :ARG1-of (c12-8 / bad-07))
                                                :polarity -)
                                  :condition (c12-9 / name-01
                                                    :ARG1 c12-1
                                                    :mod (c12-15 / even)
                                                    :polarity -))))

# ::snt Right Said Fred!
# ::tokens ["Right", "Said", "Fred", "!"]
# ::lemmas ["right", "Said", "Fred", "!"]
(c13-3 / say-01
       :ARG0 (c13-1 / person
                    :name (c13-0 / name
                                 :op1 "Fred"))
       :ARG1 (c13-2 / right-06))

# ::snt Between you singing that and Im too sexy Im surprised I didnt jump off the balcony haha
# ::tokens ["Between", "you", "singing", "that", "and", "I", "m", "too", "sexy", "I", "m", "surprised", "I", "did", "nt", "jump", "off", "the", "balcony", "haha"]
# ::lemmas ["between", "you", "singe", "that", "and", "i", "m", "too", "sexy", "i", "m", "surprised", "i", "do", "not", "jump", "off", "the", "balcony", "haha"]
(c14-3 / surprise-01
       :ARG0 (c14-7 / jump-03
                    :ARG0 (c14-8 / i)
                    :source (c14-1 / balcony)
                    :ARG1-of (c14-6 / cause-01
                                    :ARG0 (c14-9 / and
                                                 :op1 (c14-0 / sing-01
                                                             :ARG0 (c14-2 / you)
                                                             :ARG1 (c14-10 / that))
                                                 :op2 (c14-4 / have-degree-91
                                                             :ARG1 c14-8
                                                             :ARG2 (c14-13 / sexy-03
                                                                           :ARG1 c14-8)
                                                             :ARG3 (c14-12 / too))))
                    :polarity -)
       :ARG1 c14-8
       :ARG2-of (c14-5 / laugh-01
                       :ARG0 c14-8
                       :manner (c14-11 / loud)
                       :mode expressive))

# ::snt hahaha!
# ::tokens ["hahaha", "!"]
# ::lemmas ["hahaha", "!"]
(c15-0 / haha
       :mode expressive)

# ::snt aww man... I was hoping that Eddie Murphy would get to play Mister Rogers
# ::tokens ["aww", "man", "...", "I", "was", "hoping", "that", "Eddie", "Murphy", "would", "get", "to", "play", "Mister", "Rogers"]
# ::lemmas ["aww", "man", "...", "i", "be", "hope", "that", "Eddie", "Murphy", "would", "get", "to", "play", "Mister", "Rogers"]
(c16-0 / multi-sentence
       :snt1 (c16-7 / aw
                    :mode expressive)
       :snt2 (c16-3 / hope-01
                    :ARG0 (c16-6 / i)
                    :ARG1 (c16-8 / get-22
                                 :ARG0 (c16-4 / person
                                              :name (c16-1 / name
                                                           :op1 "Eddie"
                                                           :op2 "Murphy"))
                                 :ARG1 (c16-2 / play-02
                                              :ARG0 c16-4
                                              :ARG1 (c16-9 / person
                                                           :name (c16-5 / name
                                                                        :op1 "Mister"
                                                                        :op2 "Rogers"))))))

# ::snt fuck, you used to sing this to me all the time ahaha you: wont you be mine, wont you be mine, wont you be my neighb-Me: STOP ITTTTTTT
# ::tokens ["fuck", ",", "you", "used", "to", "sing", "this", "to", "me", "all", "the", "time", "ahaha", "you", ":", "wo", "nt", "you", "be", "mine", ",", "wo", "nt", "you", "be", "mine", ",", "wo", "nt", "you", "be", "my", "neighb", "-", "Me", ":", "STOP", "ITTTTTTT"]
# ::lemmas ["fuck", ",", "you", "use", "to", "sing", "this", "to", "i", "all", "the", "time", "ahaha", "you", ":", "will", "not", "you", "be", "mine", ",", "will", "not", "you", "be", "mine", ",", "will", "not", "you", "be", "my", "neighb", "-", "me", ":", "STOP", "ittttttt"]
(c17-3 / multi-sentence
       :snt1 (c17-5 / sing-01
                    :ARG0 (c17-2 / you)
                    :ARG1 (c17-11 / this)
                    :ARG2 (c17-10 / i)
                    :time (c17-15 / use-03)
                    :frequency (c17-16 / time
                                       :mod (c17-7 / all))
                    :mod (c17-12 / ahaha
                                 :mode expressive))
       :snt2 (c17-0 / say-01
                    :ARG0 (c17-13 / you)
                    :ARG1 (c17-9 / and
                                 :op1 (c17-1 / belong-01
                                             :ARG0 c17-13
                                             :ARG1 c17-10
                                             :polarity -)
                                 :op2 (c17-8 / belong-01
                                             :ARG0 c17-13
                                             :ARG1 c17-10
                                             :polarity -)
                                 :op3 (c17-4 / neighbor-01
                                             :ARG1 c17-13
                                             :ARG2 c17-10
                                             :polarity -)
                                 :op4 (c17-17 / stop-01
                                              :ARG0 c17-13
                                              :ARG1 (c17-6 / it)
                                              :polarity -))
                    :ARG2 (c17-14 / i)))

# ::snt I wish he was my neighbor!
# ::tokens ["I", "wish", "he", "was", "my", "neighbor", "!"]
# ::lemmas ["i", "wish", "he", "be", "my", "neighbor", "!"]
(c18-0 / wish-01
       :ARG0 (c18-3 / i)
       :ARG1 (c18-2 / neighbor
                    :domain (c18-1 / he)
                    :poss c18-3))

# ::snt I think Eddie Murphy would be better.
# ::tokens ["I", "think", "Eddie", "Murphy", "would", "be", "better", "."]
# ::lemmas ["i", "think", "Eddie", "Murphy", "would", "be", "well", "."]
(c19-5 / think-01
       :ARG0 (c19-4 / i)
       :ARG1 (c19-2 / have-degree-91
                    :ARG1 (c19-3 / person
                                 :name (c19-0 / name
                                              :op1 "Eddie"
                                              :op2 "Murphy"))
                    :ARG2 (c19-6 / good-02
                                 :ARG1 c19-3)
                    :ARG3 (c19-1 / more)))

# ::snt Love Mr Rogers but won't watch Hanks
# ::tokens ["Love", "Mr", "Rogers", "but", "wo", "n't", "watch", "Hanks"]
# ::lemmas ["Love", "Mr", "Rogers", "but", "will", "not", "watch", "Hanks"]
(c20-5 / contrast-01
       :ARG1 (c20-3 / love-01
                    :ARG1 (c20-4 / person
                                 :name (c20-0 / name
                                              :op1 "Mr"
                                              :op2 "Rogers")))
       :ARG2 (c20-6 / watch-01
                    :ARG1 (c20-1 / person
                                 :name (c20-2 / name
                                              :op1 "Hanks"))
                    :polarity -))

# ::snt What ever. Going to another one to skip!
# ::tokens ["What", "ever", ".", "Going", "to", "another", "one", "to", "skip", "!"]
# ::lemmas ["what", "ever", ".", "go", "to", "another", "one", "to", "skip", "!"]
(c21-1 / multi-sentence
       :snt1 (c21-5 / amr-unknown
                    :mod (c21-3 / ever))
       :snt2 (c21-6 / go-02
                    :ARG0 (c21-4 / i)
                    :ARG4 (c21-0 / one
                                 :mod (c21-7 / another)
                                 :ARG1-of (c21-2 / skip-01
                                                 :ARG0 c21-4))))

# ::snt Fred Rogers was everybodys neighbor, Tom Hanks uh I dont know. Was this thought through?
# ::tokens ["Fred", "Rogers", "was", "everybodys", "neighbor", ",", "Tom", "Hanks", "uh", "I", "do", "nt", "know", ".", "Was", "this", "thought", "through", "?"]
# ::lemmas ["Fred", "Rogers", "be", "everybodys", "neighbor", ",", "Tom", "Hanks", "uh", "i", "do", "not", "know", ".", "be", "this", "thought", "through", "?"]
(c22-1 / multi-sentence
       :snt1 (c22-0 / neighbor-01
                    :ARG1 (c22-6 / person
                                 :name (c22-5 / name
                                              :op1 "Fred"
                                              :op2 "Rogers"))
                    :ARG2 (c22-4 / everybody))
       :snt2 (c22-7 / know-01
                    :ARG0 (c22-9 / i)
                    :ARG1 (c22-2 / person
                                 :name (c22-8 / name
                                              :op1 "Tom"
                                              :op2 "Hanks"))
                    :mod (c22-11 / uh
                                 :mode expressive)
                    :polarity -)
       :snt3 (c22-10 / think-through-04
                     :ARG1 (c22-12 / this)
                     :polarity (c22-3 / amr-unknown)))

# ::snt Jada Pinkett Smith will whine about the "lack of diversity."
# ::tokens ["Jada", "Pinkett", "Smith", "will", "whine", "about", "the", "\"", "lack", "of", "diversity", ".", "\""]
# ::lemmas ["Jada", "Pinkett", "Smith", "will", "whine", "about", "the", "\"", "lack", "of", "diversity", ".", "\""]
(c23-3 / whine-01
       :ARG0 (c23-1 / person
                    :name (c23-0 / name
                                 :op1 "Jada"
                                 :op2 "Pinkett"
                                 :op3 "Smith"))
       :ARG3 (c23-2 / lack-01
                    :ARG1 (c23-4 / diversity)))

# ::snt OMG Say it AIN'T so....I won't be viewing
# ::tokens ["OMG", "Say", "it", "AIN'T", "so", "....", "I", "wo", "n't", "be", "viewing"]
# ::lemmas ["OMG", "say", "it", "ain't", "so", "....", "i", "will", "not", "be", "view"]
(c25-2 / multi-sentence
       :snt1 (c25-3 / say-01
                    :ARG0 (c25-6 / i)
                    :ARG1 (c25-0 / so
                                 :polarity -)
                    :mod (c25-1 / oh-my-god
                                :mode expressive))
       :snt2 (c25-5 / view-01
                    :ARG0 (c25-4 / i)
                    :polarity -))

# ::snt I can't wait
# ::tokens ["I", "ca", "n't", "wait"]
# ::lemmas ["i", "can", "not", "wait"]
(c26-1 / possible-01
       :ARG1 (c26-0 / wait-01
                    :ARG1 (c26-2 / i))
       :polarity -)

# ::snt he's the perfect guy
# ::tokens ["he", "'s", "the", "perfect", "guy"]
# ::lemmas ["he", "be", "the", "perfect", "guy"]
(c27-0 / guy
       :ARG1-of (c27-2 / perfect-02)
       :domain (c27-1 / he))

# ::snt Steve Buscemi wasn't available?
# ::tokens ["Steve", "Buscemi", "was", "n't", "available", "?"]
# ::lemmas ["Steve", "Buscemi", "be", "not", "available", "?"]
(c28-3 / available-02
       :ARG2 (c28-1 / person
                    :name (c28-0 / name
                                 :op1 "Steve"
                                 :op2 "Buscemi"))
       :polarity (c28-2 / amr-unknown)
       :polarity -)

# ::snt Perfect
# ::tokens ["Perfect"]
# ::lemmas ["perfect"]
(c29-0 / perfect-02)

# ::snt Why the heck would he do it...? He's ruined his reputation
# ::tokens ["Why", "the", "heck", "would", "he", "do", "it", "...", "?", "He", "'s", "ruined", "his", "reputation"]
# ::lemmas ["why", "the", "heck", "would", "he", "do", "it", "...", "?", "he", "be", "ruin", "his", "reputation"]
(c30-0 / multi-sentence
       :snt1 (c30-4 / cause-01
                    :ARG0 (c30-7 / amr-unknown
                                 :mod (c30-3 / heck))
                    :ARG1 (c30-8 / do-02
                                 :ARG0 (c30-5 / he)
                                 :ARG1 (c30-6 / it)))
       :snt2 (c30-1 / ruin-01
                    :ARG0 (c30-2 / he)
                    :ARG1 (c30-9 / reputation
                                 :poss c30-2)))

# ::snt Hell be great
# ::tokens ["Hell", "be", "great"]
# ::lemmas ["hell", "be", "great"]
(c31-0 / great
       :mod (c31-1 / hell))

# ::snt I would rather watch Hillary read Fire and Fury while Michael Moore, squatting on the toiled, eats a bucket of KFC a la the kid in Bad News Bears Go to Japan.
# ::tokens ["I", "would", "rather", "watch", "Hillary", "read", "Fire", "and", "Fury", "while", "Michael", "Moore", ",", "squatting", "on", "the", "toiled", ",", "eats", "a", "bucket", "of", "KFC", "a", "la", "the", "kid", "in", "Bad", "News", "Bears", "Go", "to", "Japan", "."]
# ::lemmas ["i", "would", "rather", "watch", "Hillary", "read", "Fire", "and", "Fury", "while", "Michael", "Moore", ",", "squat", "on", "the", "toil", ",", "eat", "a", "bucket", "of", "KFC", "a", "la", "the", "kid", "in", "Bad", "News", "Bears", "Go", "to", "Japan", "."]
(c32-15 / prefer-01
        :ARG0 (c32-19 / i)
        :ARG1 (c32-17 / watch-01
                      :ARG0 c32-19
                      :ARG1 (c32-13 / read-01
                                    :ARG0 (c32-9 / person
                                                 :name (c32-12 / name
                                                               :op1 "Hillary"))
                                    :ARG1 (c32-8 / book
                                                 :name (c32-10 / name
                                                               :op1 "Fire"
                                                               :op2 "and"
                                                               :op3 "Fury")))
                      :time (c32-14 / eat-01
                                    :ARG0 (c32-4 / person
                                                 :name (c32-16 / name
                                                               :op1 "Michael"
                                                               :op2 "Moore")
                                                 :ARG1-of (c32-0 / squat-01
                                                                 :ARG2 (c32-7 / toiled)))
                                    :ARG1 (c32-1 / bucket
                                                 :consist-of (c32-3 / product
                                                                    :name (c32-11 / name
                                                                                  :op1 "KFC")))
                                    :ARG1-of (c32-5 / resemble-01
                                                    :ARG2 (c32-6 / kid
                                                                 :location (c32-2 / work-of-art
                                                                                  :name (c32-18 / name
                                                                                                :op1 "Bad"
                                                                                                :op2 "News"
                                                                                                :op3 "Bears"
                                                                                                :op4 "Go"
                                                                                                :op5 "to"
                                                                                                :op6 "Japan")))))))

# ::snt as long as he doesnt travel in the movie, he wont get stranded.
# ::tokens ["as", "long", "as", "he", "does", "nt", "travel", "in", "the", "movie", ",", "he", "wo", "nt", "get", "stranded", "."]
# ::lemmas ["as", "long", "as", "he", "do", "not", "travel", "in", "the", "movie", ",", "he", "will", "not", "get", "strand", "."]
(c33-2 / have-condition-91
       :ARG1 (c33-1 / strand-01
                    :ARG1 (c33-3 / he)
                    :polarity -)
       :ARG2 (c33-5 / as-long-as
                    :op1 (c33-4 / travel-01
                                :ARG0 c33-3
                                :location (c33-0 / movie)
                                :polarity -)))

# ::snt are providing %off in all product
# ::tokens ["are", "providing", "%", "off", "in", "all", "product"]
# ::lemmas ["be", "provide", "%", "off", "in", "all", "product"]
(c35-1 / provide-01
       :ARG1 (c35-2 / percentage-entity
                    :part-of (c35-3 / product
                                    :mod (c35-0 / all))
                    :value -1))

# ::snt I grew up watch Mr.Rosgers
# ::tokens ["I", "grew", "up", "watch", "Mr.", "Rosgers"]
# ::lemmas ["i", "grow", "up", "watch", "Mr.", "Rosgers"]
(c36-2 / watch-01
       :ARG0 (c36-3 / i)
       :ARG1 (c36-1 / person
                    :name (c36-0 / name
                                 :op1 "Mr."
                                 :op2 "Rosgers"))
       :time (c36-4 / grow-up-04
                    :ARG1 c36-3))
