# ::snt I dunno. But now I'll stop picturing a guy leaving a smell on his sheets. It's no big deal, just what I thought I knew.
# ::tokens ["I", "dunno", ".", "But", "now", "I", "'ll", "stop", "picturing", "a", "guy", "leaving", "a", "smell", "on", "his", "sheets", ".", "It", "'s", "no", "big", "deal", ",", "just", "what", "I", "thought", "I", "knew", "."]
# ::lemmas ["i", "dunno", ".", "but", "now", "i", "'ll", "stop", "picture", "a", "guy", "leave", "a", "smell", "on", "his", "sheet", ".", "it", "be", "no", "big", "deal", ",", "just", "what", "i", "think", "i", "know", "."]
(c1-12 / multi-sentence
       :snt1 (c1-5 / know-01
                   :ARG0 (c1-18 / i)
                   :polarity -)
       :snt2 (c1-13 / contrast-01
                    :ARG2 (c1-0 / stop-01
                                :ARG0 (c1-4 / i)
                                :ARG1 (c1-17 / picture-01
                                             :ARG0 c1-4
                                             :ARG1 (c1-9 / guy
                                                         :ARG0-of (c1-1 / leave-13
                                                                        :ARG1 (c1-8 / thing
                                                                                    :ARG1-of (c1-3 / smell-01))
                                                                        :location (c1-2 / sheet
                                                                                        :poss c1-9))))
                                :time (c1-16 / now)))
       :snt3 (c1-7 / and
                   :op1 (c1-20 / deal-03
                               :ARG1 (c1-10 / it)
                               :mod (c1-11 / big)
                               :polarity -)
                   :op2 (c1-14 / thing
                               :ARG1-of (c1-15 / know-01
                                               :ARG0 c1-4
                                               :ARG1-of (c1-19 / think-01
                                                               :ARG0 c1-4)
                                               :mod (c1-6 / just)))))

# ::snt Omg I thought this said "Congratulations! Ed Sheeran and his girlfriend are not engaged" lol
# ::tokens ["Omg", "I", "thought", "this", "said", "\"", "Congratulations", "!", "Ed", "Sheeran", "and", "his", "girlfriend", "are", "not", "engaged", "\"", "lol"]
# ::lemmas ["Omg", "i", "think", "this", "say", "\"", "congratulation", "!", "Ed", "Sheeran", "and", "his", "girlfriend", "be", "not", "engage", "\"", "lol"]
(c2-9 / think-01
      :ARG0 (c2-10 / i)
      :ARG1 (c2-3 / say-01
                  :ARG0 (c2-11 / this)
                  :ARG1 (c2-5 / engagement-02
                              :ARG1 (c2-4 / and
                                          :op1 (c2-7 / person
                                                     :name (c2-1 / name
                                                                 :op1 "Ed"
                                                                 :op2 "Sheeran"))
                                          :op2 (c2-2 / person
                                                     :ARG0-of (c2-6 / have-rel-role-91
                                                                    :ARG1 c2-7
                                                                    :ARG2 (c2-12 / girlfriend))))
                              :polarity -)
                  :ARG2-of (c2-8 / laugh-01
                                 :ARG0 c2-10
                                 :manner (c2-13 / loud)))
      :mod (c2-0 / oh-my-god
                 :mode expressive))

# ::snt Dunno - he's been with Cherry for awhile.
# ::tokens ["Dunno", "-", "he", "'s", "been", "with", "Cherry", "for", "awhile", "."]
# ::lemmas ["Dunno", "-", "he", "be", "be", "with", "Cherry", "for", "awhile", "."]
(c3-1 / multi-sentence
      :snt1 (c3-3 / have-polarity-91
                  :ARG2 -)
      :snt2 (c3-0 / be-with-10
                  :ARG0 (c3-5 / he)
                  :ARG1 (c3-4 / person
                              :name (c3-2 / name
                                          :op1 "Cherry"))
                  :duration (c3-6 / awhile)))

# ::snt Girlfriend? Where did I hear he was gay?
# ::tokens ["Girlfriend", "?", "Where", "did", "I", "hear", "he", "was", "gay", "?"]
# ::lemmas ["girlfriend", "?", "where", "do", "i", "hear", "he", "be", "gay", "?"]
(c4-0 / multi-sentence
      :snt1 (c4-4 / person
                  :ARG0-of (c4-3 / have-rel-role-91
                                 :ARG2 (c4-8 / girlfriend)))
      :snt2 (c4-5 / hear-01
                  :ARG0 (c4-6 / i)
                  :ARG1 (c4-7 / gay-01
                              :ARG1 (c4-2 / he))
                  :ARG2 (c4-1 / amr-unknown)))

# ::snt What about personality, humor, charm, quick wit and intelligence? These matter to a relationship. A good heart and kindness? Looks can only take you so far. But for some thats not enough.
# ::tokens ["What", "about", "personality", ",", "humor", ",", "charm", ",", "quick", "wit", "and", "intelligence", "?", "These", "matter", "to", "a", "relationship", ".", "A", "good", "heart", "and", "kindness", "?", "Looks", "can", "only", "take", "you", "so", "far", ".", "But", "for", "some", "that", "s", "not", "enough", "."]
# ::lemmas ["what", "about", "personality", ",", "humor", ",", "charm", ",", "quick", "wit", "and", "intelligence", "?", "these", "matter", "to", "a", "relationship", ".", "a", "good", "heart", "and", "kindness", "?", "look", "can", "only", "take", "you", "so", "far", ".", "but", "for", "some", "that", "s", "not", "enough", "."]
(c5-16 / multi-sentence
       :snt1 (c5-13 / amr-unknown
                    :topic (c5-10 / and
                                  :op1 (c5-23 / personality)
                                  :op2 (c5-6 / humor)
                                  :op3 (c5-18 / charm-01)
                                  :op4 (c5-24 / wit
                                              :ARG1-of (c5-14 / quick-02))
                                  :op5 (c5-26 / intelligent-01)))
       :snt2 (c5-7 / matter-01
                   :ARG1 (c5-11 / this)
                   :ARG2 (c5-21 / relation-03))
       :snt3 (c5-9 / and
                   :op1 (c5-25 / heart
                               :ARG1-of (c5-12 / good-02))
                   :op2 (c5-8 / kind-01)
                   :polarity c5-13)
       :snt4 (c5-15 / contrast-01
                    :ARG2 (c5-17 / possible-01
                                 :ARG1 (c5-19 / take-01
                                              :ARG0 (c5-1 / look-01)
                                              :ARG1 (c5-4 / you)
                                              :ARG3 (c5-20 / far
                                                           :mod (c5-0 / so))
                                              :mod (c5-2 / only)))
                    :snt5-of c5-16)
       :ARG2 (c5-5 / have-quant-91
                   :ARG1 (c5-27 / that)
                   :ARG3 (c5-22 / enough)
                   :beneficiary (c5-3 / some)
                   :polarity -))

# ::snt Delighted for a fellow
# ::tokens ["Delighted", "for", "a", "fellow"]
# ::lemmas ["delighted", "for", "a", "fellow"]
(c6-1 / brilliant-01
      :ARG1 (c6-0 / fellow))

# ::snt Hehe, not everyone has the same criteria for choosing a partner as you Andy
# ::tokens ["Hehe", ",", "not", "everyone", "has", "the", "same", "criteria", "for", "choosing", "a", "partner", "as", "you", "Andy"]
# ::lemmas ["hehe", ",", "not", "everyone", "have", "the", "same", "criterion", "for", "choose", "a", "partner", "as", "you", "Andy"]
(c7-3 / say-01
      :ARG0 (c7-10 / i)
      :ARG1 (c7-5 / have-03
                  :ARG0 (c7-4 / everyone)
                  :ARG1 (c7-8 / criteria
                              :ARG1-of (c7-0 / same-01
                                             :ARG2 (c7-12 / choose-01
                                                          :ARG0 (c7-6 / person
                                                                      :name (c7-1 / name
                                                                                  :op1 "Andy"))
                                                          :ARG1 (c7-2 / person
                                                                      :ARG0-of (c7-9 / have-rel-role-91
                                                                                     :ARG1 c7-6
                                                                                     :ARG2 (c7-11 / partner))))))
                  :mod (c7-7 / hehe
                             :mode expressive)
                  :polarity -)
      :ARG2 c7-6)

# ::snt You're not exactly "open-casket" material yourself Jase.
# ::tokens ["You", "'re", "not", "exactly", "\"", "open", "-", "casket", "\"", "material", "yourself", "Jase", "."]
# ::lemmas ["you", "be", "not", "exactly", "\"", "open", "-", "casket", "\"", "material", "yourself", "Jase", "."]
(c8-3 / say-01
      :ARG0 (c8-7 / i)
      :ARG1 (c8-1 / material
                  :mod (c8-6 / casket
                             :ARG1-of (c8-0 / open-01))
                  :domain (c8-5 / person
                                :name (c8-2 / name
                                            :op1 "Jase"))
                  :mod (c8-4 / exact)
                  :polarity -)
      :ARG2 c8-5)

# ::snt Very happy for Ed!! I hope he finds happiness in his own life that he is given all of us through his music
# ::tokens ["Very", "happy", "for", "Ed", "!", "!", "I", "hope", "he", "finds", "happiness", "in", "his", "own", "life", "that", "he", "is", "given", "all", "of", "us", "through", "his", "music"]
# ::lemmas ["very", "happy", "for", "Ed", "!", "!", "i", "hope", "he", "find", "happiness", "in", "his", "own", "life", "that", "he", "be", "give", "all", "of", "we", "through", "his", "music"]
(c11-2 / multi-sentence
       :snt1 (c11-5 / happy-01
                    :ARG1 (c11-6 / person
                                 :name (c11-1 / name
                                              :op1 "Ed"))
                    :degree (c11-3 / very))
       :snt2 (c11-10 / hope-01
                     :ARG0 (c11-11 / i)
                     :ARG1 (c11-0 / find-01
                                  :ARG0 (c11-4 / he)
                                  :ARG1 c11-5
                                  :ARG1 c11-4
                                  :location (c11-7 / life
                                                   :poss c11-4)
                                  :ARG1-of (c11-9 / cause-01
                                                  :ARG0 (c11-8 / music
                                                               :poss c11-4)))))

# ::snt Congratulations Ed Sheeran .Many a heart you'll have broken today .All the best for the future .x
# ::tokens ["Congratulations", "Ed", "Sheeran", ".Many", "a", "heart", "you", "'ll", "have", "broken", "today", ".All", "the", "best", "for", "the", "future", ".x"]
# ::lemmas ["Congratulations", "Ed", "Sheeran", ".Many", "a", "heart", "you", "'ll", "have", "break", "today", ".all", "the", "good", "for", "the", "future", ".x"]
(c12-4 / multi-sentence
       :snt1 (c12-9 / congratulate-01
                    :ARG1 (c12-7 / person
                                 :name (c12-3 / name
                                              :op1 "Ed"
                                              :op2 "Sheeran")))
       :snt2 (c12-1 / break-heart-31
                    :ARG1 (c12-2 / you)
                    :time (c12-11 / today)
                    :quant (c12-6 / many))
       :snt3 (c12-10 / wish-01
                     :ARG1 (c12-14 / thing
                                   :mod (c12-5 / all)
                                   :ARG1-of (c12-8 / have-degree-91
                                                   :ARG2 (c12-12 / good-04
                                                                 :ARG1 c12-14)
                                                   :ARG3 (c12-13 / most)))
                     :ARG2 (c12-0 / future)))

# ::snt About time. He's been shagging her for the last years !!.
# ::tokens ["About", "time", ".", "He", "'s", "been", "shagging", "her", "for", "the", "last", "years", "!", "!", "."]
# ::lemmas ["about", "time", ".", "he", "be", "be", "shag", "she", "for", "the", "last", "years", "!", "!", "."]
(c13-3 / multi-sentence
       :snt1 (c13-9 / about-time)
       :snt2 (c13-5 / shag-01
                    :ARG0 (c13-6 / he)
                    :ARG1 (c13-0 / she)
                    :time (c13-1 / before
                                 :op1 (c13-4 / now)
                                 :duration (c13-7 / multiple
                                                  :op1 (c13-8 / temporal-quantity
                                                              :unit (c13-2 / year)
                                                              :quant 1)))))

# ::snt Well I suppose someone has to take him she should have gone to SpecSavers
# ::tokens ["Well", "I", "suppose", "someone", "has", "to", "take", "him", "she", "should", "have", "gone", "to", "SpecSavers"]
# ::lemmas ["well", "i", "suppose", "someone", "have", "to", "take", "he", "she", "should", "have", "go", "to", "SpecSavers"]
(c14-4 / suppose-01
       :ARG0 (c14-9 / i)
       :ARG1 (c14-0 / obligate-01
                    :ARG1 (c14-1 / someone)
                    :ARG2 (c14-10 / take-01
                                  :ARG0 c14-1
                                  :ARG1 (c14-6 / he)))
       :mod (c14-7 / well)
       :ARG1-of (c14-2 / mean-01
                       :ARG2 (c14-5 / recommend-01
                                    :ARG1 (c14-11 / go-02
                                                  :ARG0 (c14-12 / she)
                                                  :ARG4 (c14-8 / company
                                                               :name (c14-3 / name
                                                                            :op1 "Sansavers"))))))

# ::snt Is that before or after he porked Taylor Swift?
# ::tokens ["Is", "that", "before", "or", "after", "he", "porked", "Taylor", "Swift", "?"]
# ::lemmas ["be", "that", "before", "or", "after", "he", "porke", "Taylor", "Swift", "?"]
(c15-0 / or
       :op1 (c15-1 / before
                   :op1 (c15-5 / pork-00
                               :ARG0 (c15-4 / he)
                               :ARG1 (c15-3 / person
                                            :name (c15-2 / name
                                                         :op1 "Taylor"
                                                         :op2 "Swift"))))
       :op2 (c15-8 / after
                   :op1 c15-5)
       :domain (c15-6 / that)
       :polarity (c15-7 / amr-unknown))

# ::snt I was expecting this
# ::tokens ["I", "was", "expecting", "this"]
# ::lemmas ["i", "be", "expect", "this"]
(c16-0 / expect-01
       :ARG0 (c16-1 / i)
       :ARG1 (c16-2 / this))

# ::snt Long term? years...???
# ::tokens ["Long", "term", "?", "years", "...", "?", "?", "?"]
# ::lemmas ["long", "term", "?", "years", "...", "?", "?", "?"]
(c17-1 / multi-sentence
       :snt1 (c17-4 / term
                    :ARG1-of (c17-3 / long-03)
                    :polarity (c17-6 / amr-unknown))
       :snt2 (c17-2 / multiple
                    :op1 (c17-7 / temporal-quantity
                                :unit (c17-0 / year)
                                :quant 1)
                    :polarity (c17-5 / amr-unknown)))

# ::snt Congratulations!
# ::tokens ["Congratulations", "!"]
# ::lemmas ["congratulation", "!"]
(c18-0 / congratulate-01
       :mode expressive)

# ::snt Surely this means an extra bank holiday
# ::tokens ["Surely", "this", "means", "an", "extra", "bank", "holiday"]
# ::lemmas ["surely", "this", "mean", "an", "extra", "bank", "holiday"]
(c20-1 / mean-01
       :ARG1 (c20-5 / this)
       :ARG2 (c20-4 / holiday-01
                    :mod (c20-0 / bank)
                    :mod (c20-3 / extra))
       :ARG1-of (c20-2 / sure-02))

# ::snt He's a daywalker. How has he got a girlfriend? He must be a demon of a swordsman.
# ::tokens ["He", "'s", "a", "daywalker", ".", "How", "has", "he", "got", "a", "girlfriend", "?", "He", "must", "be", "a", "demon", "of", "a", "swordsman", "."]
# ::lemmas ["he", "be", "a", "daywalker", ".", "how", "have", "he", "get", "a", "girlfriend", "?", "he", "must", "be", "a", "demon", "of", "a", "swordsman", "."]
(c21-0 / multi-sentence
       :snt1 (c21-5 / walk-01
                    :ARG0 (c21-3 / he)
                    :time (c21-11 / day))
       :snt2 (c21-10 / get-01
                     :ARG0 (c21-7 / he)
                     :ARG1 (c21-4 / person
                                  :ARG0-of (c21-2 / have-rel-role-91
                                                  :ARG1 c21-7
                                                  :ARG2 (c21-8 / girlfriend)))
                     :manner (c21-9 / amr-unknown))
       :snt3 (c21-12 / infer-01
                     :ARG1 (c21-6 / demon
                                  :domain (c21-13 / he)
                                  :mod (c21-1 / swordsman))))

# ::snt Wishing them both all the happiness in the world
# ::tokens ["Wishing", "them", "both", "all", "the", "happiness", "in", "the", "world"]
# ::lemmas ["wish", "they", "both", "all", "the", "happiness", "in", "the", "world"]
(c23-4 / wish-01
       :ARG1 (c23-2 / happiness
                    :mod (c23-1 / all)
                    :location (c23-3 / world))
       :ARG2 (c23-5 / they
                    :mod (c23-0 / both)))

# ::snt And it's on Sky News!....why? grant that the bloke can croon
# ::tokens ["And", "it", "'s", "on", "Sky", "News!", "....", "why", "?", "grant", "that", "the", "bloke", "can", "croon"]
# ::lemmas ["and", "it", "be", "on", "Sky", "News!", "....", "why", "?", "grant", "that", "the", "bloke", "can", "croon"]
(c24-2 / multi-sentence
       :snt1 (c24-7 / and
                    :op2 (c24-0 / broadcast-program
                                :name (c24-1 / name
                                             :op1 "Sky"
                                             :op2 "News")
                                :medium-of (c24-6 / it)))
       :snt2 (c24-8 / grant-01
                    :ARG1 (c24-4 / possible-01
                                 :ARG1 (c24-5 / croon-01
                                              :ARG0 (c24-3 / bloke
                                                           :ARG2-of c24-8)))
                    :ARG1-of (c24-10 / cause-01
                                     :ARG0 (c24-9 / amr-unknown))))

# ::snt Is she from Galway?
# ::tokens ["Is", "she", "from", "Galway", "?"]
# ::lemmas ["be", "she", "from", "Galway", "?"]
(c25-3 / she
       :source (c25-1 / city
                      :name (c25-2 / name
                                   :op1 "Galway"))
       :polarity (c25-0 / amr-unknown))

# ::snt Tell me Cherry, what convinced you to say yes to the ugly ginger kid youve been with for so long who now just happens to be a millionaire?
# ::tokens ["Tell", "me", "Cherry", ",", "what", "convinced", "you", "to", "say", "yes", "to", "the", "ugly", "ginger", "kid", "you", "ve", "been", "with", "for", "so", "long", "who", "now", "just", "happens", "to", "be", "a", "millionaire", "?"]
# ::lemmas ["tell", "i", "Cherry", ",", "what", "convince", "you", "to", "say", "yes", "to", "the", "ugly", "ginger", "kid", "you", "ve", "be", "with", "for", "so", "long", "who", "now", "just", "happen", "to", "be", "a", "millionaire", "?"]
(c26-12 / tell-01
        :ARG0 (c26-2 / you)
        :ARG1 (c26-11 / convince-01
                      :ARG0 (c26-14 / amr-unknown)
                      :ARG1 (c26-8 / person
                                   :name (c26-3 / name
                                                :op1 "Cherry"))
                      :ARG2 (c26-5 / say-01
                                   :ARG0 c26-8
                                   :ARG1 (c26-15 / yes)
                                   :ARG2 (c26-9 / kid
                                                :mod (c26-4 / ginger)
                                                :ARG1-of (c26-1 / be-with-10
                                                                :ARG0 c26-2
                                                                :duration (c26-10 / long
                                                                                  :degree (c26-0 / so)))
                                                :mod (c26-6 / millionaire
                                                            :time (c26-7 / now)
                                                            :mod (c26-13 / just)
                                                            :domain c26-9))))
        :ARG2 c26-8
        :mode imperative)

# ::snt Zzzzzzzz
# ::tokens ["Zzzzzzzz"]
# ::lemmas ["Zzzzzzzz"]
(c27-0 / zzzzzzzz)

# ::snt Long term? years.... okay
# ::tokens ["Long", "term", "?", "years", "....", "okay"]
# ::lemmas ["long", "term", "?", "years", "....", "okay"]
(c28-1 / multi-sentence
       :snt1 (c28-3 / term
                    :ARG1-of (c28-2 / long-03)
                    :polarity (c28-4 / amr-unknown))
       :snt2 (c28-0 / okay-01))

# ::snt Versatile Logo Design In Hours
# ::tokens ["Versatile", "Logo", "Design", "In", "Hours"]
# ::lemmas ["Versatile", "Logo", "Design", "in", "Hours"]
(c29-0 / be-temporally-at-91
       :ARG1 (c29-6 / design-01
                    :ARG1 (c29-4 / logo)
                    :mod (c29-2 / versatile))
       :ARG2 (c29-1 / multiple
                    :op1 (c29-5 / temporal-quantity
                                :unit (c29-3 / hour)
                                :quant 1)))

# ::snt More proof sky news Twitter is now nothing more then a showbiz gossip page
# ::tokens ["More", "proof", "sky", "news", "Twitter", "is", "now", "nothing", "more", "then", "a", "showbiz", "gossip", "page"]
# ::lemmas ["more", "proof", "sky", "news", "Twitter", "be", "now", "nothing", "more", "then", "a", "showbiz", "gossip", "page"]
(c30-6 / prove-01
       :ARG1 (c30-8 / concern-02
                    :ARG0 (c30-2 / publication
                                 :name (c30-1 / name
                                              :op1 "Twitter"))
                    :ARG1 (c30-9 / page
                                 :mod (c30-10 / gossip)
                                 :mod (c30-3 / showbiz))
                    :time (c30-5 / now)
                    :mod (c30-4 / more
                                :mod-of c30-6)
                    :polarity -)
       :topic (c30-7 / news
                     :mod (c30-0 / sky)))

# ::snt Who gives a fuck?
# ::tokens ["Who", "gives", "a", "fuck", "?"]
# ::lemmas ["who", "give", "a", "fuck", "?"]
(c31-0 / give-16
       :ARG0 (c31-2 / amr-unknown)
       :ARG1 (c31-1 / fuck))

# ::snt They found love right where they are
# ::tokens ["They", "found", "love", "right", "where", "they", "are"]
# ::lemmas ["they", "find", "love", "right", "where", "they", "be"]
(c32-0 / find-01
       :ARG0 (c32-3 / they)
       :ARG1 (c32-2 / love-01
                    :ARG1 c32-3)
       :location (c32-4 / thing
                        :location-of c32-3
                        :mod (c32-1 / right)))

# ::snt Congratulations
# ::tokens ["Congratulations"]
# ::lemmas ["congratulation"]
(c33-0 / congratulate-01)

# ::snt Yes I know you what mean
# ::tokens ["Yes", "I", "know", "you", "what", "mean"]
# ::lemmas ["yes", "i", "know", "you", "what", "mean"]
(c34-2 / know-01
       :ARG0 (c34-3 / i)
       :ARG1 (c34-4 / thing
                    :ARG2-of (c34-1 / mean-01))
       :ARG2 (c34-0 / you))

# ::snt But someday he will be, no doubt
# ::tokens ["But", "someday", "he", "will", "be", ",", "no", "doubt"]
# ::lemmas ["but", "someday", "he", "will", "be", ",", "no", "doubt"]
(c35-3 / contrast-01
       :ARG2 (c35-4 / doubt-01
                    :ARG1 (c35-1 / exist-01
                                 :ARG1 (c35-2 / he)
                                 :time (c35-0 / someday))
                    :polarity -))

# ::snt Congrats RT
# ::tokens ["Congrats", "RT"]
# ::lemmas ["Congrats", "RT"]
(c36-0 / congratulate-01
       :ARG0 (c36-3 / i)
       :ARG1 (c36-2 / person
                    :name (c36-1 / name
                                 :op1 "RT")))

# ::snt CONGRATULATIONS!
# ::tokens ["CONGRATULATIONS", "!"]
# ::lemmas ["CONGRATULATIONS", "!"]
(c37-0 / congratulate-01
       :mode expressive)

# ::snt Many congrats to this young couple.
# ::tokens ["Many", "congrats", "to", "this", "young", "couple", "."]
# ::lemmas ["many", "congrat", "to", "this", "young", "couple", "."]
(c38-2 / congratulate-01
       :ARG1 (c38-4 / couple
                    :mod (c38-0 / young)
                    :mod (c38-3 / this))
       :quant (c38-1 / many))

# ::snt So fucking what?.. I had a shit today.. anyone care???
# ::tokens ["So", "fucking", "what", "?", "..", "I", "had", "a", "shit", "today", "..", "anyone", "care", "?", "?", "?"]
# ::lemmas ["so", "fucking", "what", "?", "..", "i", "have", "a", "shit", "today", "..", "anyone", "care", "?", "?", "?"]
(c40-1 / multi-sentence
       :snt1 (c40-6 / amr-unknown
                    :mod (c40-0 / fucking
                                :mode expressive))
       :snt2 (c40-2 / shit-01
                    :ARG0 (c40-5 / i)
                    :time (c40-4 / today))
       :snt3 (c40-3 / care-01
                    :polarity c40-6)
       :ARG0 (c40-7 / anyone))

# ::snt Gaf
# ::tokens ["Gaf"]
# ::lemmas ["Gaf"]
(c41-0 / gaf
       :mode expressive)

# ::snt Who Cares ? People get engaged every day !
# ::tokens ["Who", "Cares", "?", "People", "get", "engaged", "every", "day", "!"]
# ::lemmas ["who", "care", "?", "people", "get", "engage", "every", "day", "!"]
(c42-0 / multi-sentence
       :snt1 (c42-4 / care-01
                    :ARG0 (c42-6 / amr-unknown))
       :snt2 (c42-2 / engage-01
                    :ARG1 (c42-3 / person)
                    :frequency (c42-1 / rate-entity-91
                                      :ARG3 (c42-5 / temporal-quantity
                                                   :unit (c42-7 / day)
                                                   :quant 1))))

# ::snt ADHD does not exist. Poor parenting and lack of discipline exist!!
# ::tokens ["ADHD", "does", "not", "exist", ".", "Poor", "parenting", "and", "lack", "of", "discipline", "exist", "!", "!"]
# ::lemmas ["ADHD", "do", "not", "exist", ".", "poor", "parenting", "and", "lack", "of", "discipline", "exist", "!", "!"]
(c43-0 / multi-sentence
       :snt1 (c43-4 / exist-01
                    :ARG1 (c43-9 / disease
                                 :name (c43-1 / name
                                              :op1 "ADHD"))
                    :polarity -)
       :snt2 (c43-2 / exist-01
                    :ARG1 (c43-8 / and
                                 :op1 (c43-5 / parenting
                                             :mod (c43-3 / poor))
                                 :op2 (c43-6 / lack-01
                                             :ARG1 (c43-7 / discipline)))))

# ::snt *fiancee....
# ::tokens ["*", "fiancee", "...."]
# ::lemmas ["*", "fiancee", "...."]
(c44-0 / have-rel-role-91
       :ARG0 (c44-2 / i)
       :ARG1 (c44-1 / you))

# ::snt She looks a lot older than she is lol
# ::tokens ["She", "looks", "a", "lot", "older", "than", "she", "is", "lol"]
# ::lemmas ["she", "look", "a", "lot", "old", "than", "she", "be", "lol"]
(c46-4 / look-02
       :ARG0 (c46-2 / she)
       :ARG1 (c46-3 / have-degree-91
                    :ARG1 c46-2
                    :ARG2 (c46-0 / old)
                    :ARG3 (c46-1 / more
                                 :quant (c46-8 / lot))
                    :ARG4 c46-2)
       :ARG2-of (c46-5 / laugh-01
                       :ARG0 (c46-7 / i)
                       :manner (c46-6 / loud)
                       :mode expressive))

# ::snt The real royal couple
# ::tokens ["The", "real", "royal", "couple"]
# ::lemmas ["the", "real", "royal", "couple"]
(c47-0 / couple
       :mod (c47-2 / royal)
       :ARG1-of (c47-1 / real-04))

# ::snt So what? Who gives a flying f***?
# ::tokens ["So", "what", "?", "Who", "gives", "a", "flying", "f", "*", "*", "*", "?"]
# ::lemmas ["so", "what", "?", "who", "give", "a", "fly", "f", "*", "*", "*", "?"]
(c49-1 / multi-sentence
       :snt1 (c49-2 / so)
       :snt2 (c49-5 / give-16
                    :ARG0 (c49-4 / amr-unknown)
                    :ARG1 (c49-0 / fuck
                                 :ARG1-of (c49-3 / fly-01))))

# ::snt Hard to tell..
# ::tokens ["Hard", "to", "tell", ".."]
# ::lemmas ["hard", "to", "tell", ".."]
(c50-0 / hard-02
       :ARG1 (c50-1 / tell-02))
