# ::snt Yesss!! John.
# ::tokens ["Yesss", "!", "!", "John", "."]
# ::lemmas ["yesss", "!", "!", "John", "."]
(c1-2 / say-01
      :ARG0 (c1-4 / i)
      :ARG1 (c1-0 / yesss
                  :mode expressive)
      :ARG2 (c1-3 / person
                  :name (c1-1 / name
                              :op1 "John")))

# ::snt Congrats to John and Caitlin on this very happy baby news and I know their child will be a cutie
# ::tokens ["Congrats", "to", "John", "and", "Caitlin", "on", "this", "very", "happy", "baby", "news", "and", "I", "know", "their", "child", "will", "be", "a", "cutie"]
# ::lemmas ["congrat", "to", "John", "and", "Caitlin", "on", "this", "very", "happy", "baby", "news", "and", "i", "know", "their", "child", "will", "be", "a", "cutie"]
(c2-3 / and
      :op1 (c2-10 / congratulate-01
                  :ARG0 (c2-14 / i)
                  :ARG1 (c2-13 / and
                               :op1 (c2-6 / person
                                          :name (c2-1 / name
                                                      :op1 "John"))
                               :op2 (c2-2 / person
                                          :name (c2-5 / name
                                                      :op1 "Caitlin")))
                  :ARG2 (c2-7 / news
                              :mod (c2-0 / baby)
                              :ARG1-of (c2-8 / happy-01
                                             :degree (c2-4 / very))
                              :mod (c2-12 / this)))
      :op2 (c2-9 / know-01
                 :ARG0 c2-14
                 :ARG1 (c2-17 / cutie
                              :domain (c2-16 / person
                                             :ARG0-of (c2-11 / have-rel-role-91
                                                             :ARG1 c2-13
                                                             :ARG2 (c2-15 / child))))))

# ::snt congratulations!
# ::tokens ["congratulations", "!"]
# ::lemmas ["congratulation", "!"]
(c3-0 / congratulate-01)

# ::snt Rebbeca is pissed off
# ::tokens ["Rebbeca", "is", "pissed", "off"]
# ::lemmas ["Rebbeca", "be", "piss", "off"]
(c4-1 / piss-off-02
      :ARG1 (c4-2 / person
                  :name (c4-0 / name
                              :op1 "Rebbeca")))

# ::snt Good grief, they're not even married yet! Why the rush? Unless she's ensuring future child support payments in case it doesn't work out
# ::tokens ["Good", "grief", ",", "they", "'re", "not", "even", "married", "yet", "!", "Why", "the", "rush", "?", "Unless", "she", "'s", "ensuring", "future", "child", "support", "payments", "in", "case", "it", "does", "n't", "work", "out"]
# ::lemmas ["good", "grief", ",", "they", "be", "not", "even", "marry", "yet", "!", "why", "the", "rush", "?", "unless", "she", "be", "ensure", "future", "child", "support", "payment", "in", "case", "it", "do", "not", "work", "out"]
(c5-3 / multi-sentence
      :snt1 (c5-14 / grief
                   :ARG1-of (c5-12 / good-02)
                   :domain (c5-8 / marry-01
                                 :ARG1 (c5-13 / they)
                                 :mod (c5-7 / even)
                                 :time (c5-2 / yet)
                                 :polarity -)
                   :mode expressive)
      :snt2 (c5-10 / cause-01
                   :ARG0 (c5-5 / amr-unknown)
                   :ARG1 (c5-6 / rush-01))
      :snt3 (c5-15 / ensure-01
                   :ARG0 (c5-4 / she)
                   :ARG1 (c5-9 / pay-01
                               :ARG3 (c5-0 / support-01
                                           :ARG1 (c5-17 / child))
                               :time (c5-1 / future))
                   :condition (c5-11 / work-out-02
                                     :ARG1 (c5-16 / it)
                                     :polarity -)
                   :polarity -))

# ::snt Didn't that show get cancelled already?
# ::tokens ["Did", "n't", "that", "show", "get", "cancelled", "already", "?"]
# ::lemmas ["do", "not", "that", "show", "get", "cancel", "already", "?"]
(c6-2 / cancel-01
      :ARG1 (c6-0 / show-04
                  :mod (c6-3 / that))
      :time (c6-4 / already)
      :ARG1-of (c6-1 / request-confirmation-91)
      :polarity -)

# ::snt Congratulations!
# ::tokens ["Congratulations", "!"]
# ::lemmas ["congratulation", "!"]
(c7-0 / congratulate-01
      :mode expressive)

# ::snt How old is Uncle Jessie? You made it this far without a child bro. Poor kid doesnt want you at his kindergarten class with a walker and people thinking youre his grandpa.
# ::tokens ["How", "old", "is", "Uncle", "Jessie", "?", "You", "made", "it", "this", "far", "without", "a", "child", "bro", ".", "Poor", "kid", "does", "nt", "want", "you", "at", "his", "kindergarten", "class", "with", "a", "walker", "and", "people", "thinking", "you", "re", "his", "grandpa", "."]
# ::lemmas ["how", "old", "be", "Uncle", "Jessie", "?", "you", "make", "it", "this", "far", "without", "a", "child", "bro", ".", "poor", "kid", "do", "not", "want", "you", "at", "his", "kindergarten", "class", "with", "a", "walker", "and", "people", "think", "you", "re", "his", "grandpa", "."]
(c8-15 / multi-sentence
       :snt1 (c8-22 / person
                    :name (c8-21 / name
                                 :op1 "Uncle"
                                 :op2 "Jessie")
                    :age (c8-10 / amr-unknown))
       :snt2 (c8-5 / make-18
                   :ARG0 (c8-4 / you)
                   :ARG1 (c8-20 / far
                                :mod (c8-9 / this))
                   :manner (c8-8 / accompany-01
                                 :ARG0 (c8-16 / person
                                              :ARG0-of (c8-6 / have-rel-role-91
                                                             :ARG1 c8-4
                                                             :ARG2 (c8-14 / bro)))
                                 :ARG1 c8-4
                                 :polarity -))
       :snt3 (c8-23 / want-01
                    :ARG0 (c8-7 / kid
                                :mod (c8-3 / poor))
                    :ARG1 (c8-0 / be-located-at-91
                                :ARG1 (c8-11 / you)
                                :ARG2 (c8-17 / class
                                             :mod (c8-19 / kindergarten)
                                             :poss c8-7
                                             :accompanier (c8-1 / walker)))
                    :ARG1-of (c8-13 / cause-01
                                    :ARG0 (c8-18 / think-01
                                                 :ARG0 (c8-2 / person)
                                                 :ARG1 (c8-24 / have-rel-role-91
                                                              :ARG0 c8-11
                                                              :ARG1 c8-7
                                                              :ARG2 (c8-12 / grandpa))))
                    :polarity -))

# ::snt Congratulations John &amp; Caitlin Your CHILDREN are going to be gorgeous
# ::tokens ["Congratulations", "John", "&", "amp", ";", "Caitlin", "Your", "CHILDREN", "are", "going", "to", "be", "gorgeous"]
# ::lemmas ["Congratulations", "John", "&", "amp", ";", "Caitlin", "Your", "child", "be", "go", "to", "be", "gorgeous"]
(c9-8 / and
      :op1 (c9-6 / congratulate-01
                 :ARG1 (c9-7 / and
                             :op1 (c9-4 / person
                                        :name (c9-1 / name
                                                    :op1 "John"))
                             :op2 (c9-2 / person
                                        :name (c9-3 / name
                                                    :op1 "amp"))))
      :op2 (c9-9 / gorgeous
                 :domain (c9-10 / person
                                :ARG0-of (c9-5 / have-rel-role-91
                                               :ARG1 (c9-0 / you)
                                               :ARG2 (c9-11 / child)
                                               :ARG0 c9-10)
                                :ARG1 c9-4
                                :ARG2 c9-11)))

# ::snt LOVELY...................
# ::tokens ["LOVELY", "..................."]
# ::lemmas ["LOVELY", "..................."]
(c10-0 / beautiful-02)

# ::snt This guy doesnt have a kid yet!??
# ::tokens ["This", "guy", "does", "nt", "have", "a", "kid", "yet", "!", "?", "?"]
# ::lemmas ["this", "guy", "do", "not", "have", "a", "kid", "yet", "!", "?", "?"]
(c11-2 / have-05
       :ARG0 (c11-5 / guy
                    :mod (c11-4 / this))
       :ARG1 (c11-3 / kid)
       :time (c11-0 / yet)
       :polarity (c11-1 / amr-unknown)
       :polarity -)

# ::snt anyone see the SVU episode where he's impregnating chicks left and right, poking holes in condoms and what not? Wild episode.
# ::tokens ["anyone", "see", "the", "SVU", "episode", "where", "he", "'s", "impregnating", "chicks", "left", "and", "right", ",", "poking", "holes", "in", "condoms", "and", "what", "not", "?", "Wild", "episode", "."]
# ::lemmas ["anyone", "see", "the", "SVU", "episode", "where", "he", "be", "impregnate", "chick", "leave", "and", "right", ",", "poke", "hole", "in", "condom", "and", "what", "not", "?", "wild", "episode", "."]
(c12-1 / multi-sentence
       :snt1 (c12-3 / see-01
                    :ARG0 (c12-13 / anyone)
                    :ARG1 (c12-4 / episode
                                 :mod (c12-0 / broadcast-program
                                             :name (c12-2 / name
                                                          :op1 "SVU"))
                                 :subevent (c12-12 / and
                                                   :op1 (c12-14 / impregnate-01
                                                                :ARG0 (c12-5 / he)
                                                                :ARG1 (c12-9 / chick
                                                                             :ARG1-of (c12-6 / left-20)))
                                                   :op2 (c12-7 / poke-01
                                                               :ARG0 c12-5
                                                               :ARG1 (c12-11 / hole)
                                                               :ARG2 (c12-16 / condom))
                                                   :op3 (c12-15 / et-cetera))))
       :snt2 (c12-8 / episode
                    :mod (c12-10 / wild)))

# ::snt donkeys and lemons i tell em!
# ::tokens ["donkeys", "and", "lemons", "i", "tell", "em", "!"]
# ::lemmas ["donkey", "and", "lemon", "i", "tell", "em", "!"]
(c13-1 / tell-01
       :ARG0 (c13-2 / i)
       :ARG1 (c13-3 / and
                    :op1 (c13-4 / donkey)
                    :op2 (c13-0 / lemon))
       :ARG2 (c13-5 / they))

# ::snt Cut It Out
# ::tokens ["Cut", "It", "Out"]
# ::lemmas ["cut", "it", "out"]
(c14-0 / cut-out-06
       :ARG0 (c14-1 / you)
       :ARG1 (c14-2 / it)
       :mode imperative)

# ::snt Have mercy
# ::tokens ["Have", "mercy"]
# ::lemmas ["have", "mercy"]
(c15-0 / have-03
       :ARG0 (c15-2 / you)
       :ARG1 (c15-1 / mercy)
       :mode imperative)

# ::snt Congratulation to the both of you
# ::tokens ["Congratulation", "to", "the", "both", "of", "you"]
# ::lemmas ["congratulation", "to", "the", "both", "of", "you"]
(c16-0 / congratulate-01
       :ARG1 (c16-2 / you
                    :mod (c16-1 / both)))

# ::snt So happy for them!!
# ::tokens ["So", "happy", "for", "them", "!", "!"]
# ::lemmas ["so", "happy", "for", "they", "!", "!"]
(c17-1 / happy-01
       :ARG0 (c17-2 / they)
       :degree (c17-0 / so))
