# ::snt Who gives a shit?! Let him be drunk and disorderly. I try to be disorderly at least once a month.
# ::tokens ["Who", "gives", "a", "shit", "?", "!", "Let", "him", "be", "drunk", "and", "disorderly", ".", "I", "try", "to", "be", "disorderly", "at", "least", "once", "a", "month", "."]
# ::lemmas ["who", "give", "a", "shit", "?", "!", "let", "he", "be", "drunk", "and", "disorderly", ".", "i", "try", "to", "be", "disorderly", "at", "least", "once", "a", "month", "."]
(c1-1 / multi-sentence
      :snt1 (c1-12 / give-16
                   :polarity (c1-11 / amr-unknown)
                   :ARG0 (c1-10 / amr-unknown)
                   :ARG1 (c1-3 / shit)
                   :ARG2 (c1-5 / let-01
                               :ARG0 (c1-0 / you)
                               :ARG1 (c1-7 / and
                                           :op1 (c1-13 / drunk
                                                       :domain (c1-4 / he))
                                           :op2 (c1-8 / disorderly
                                                      :domain c1-4))
                               :mode imperative))
      :snt2 (c1-9 / try-01
                  :ARG0 (c1-14 / i)
                  :ARG1 c1-8
                  :domain c1-14)
      :frequency (c1-2 / at-least
                       :op1 (c1-15 / temporal-quantity
                                   :unit (c1-6 / month)
                                   :quant 1)))

# ::snt Drunk people ? Late at Night? On the streets? In Miami? GET THE NATIONAL GUARD. USA Is the country with the most hostile cops.
# ::tokens ["Drunk", "people", "?", "Late", "at", "Night", "?", "On", "the", "streets", "?", "In", "Miami", "?", "GET", "THE", "NATIONAL", "GUARD", ".", "USA", "Is", "the", "country", "with", "the", "most", "hostile", "cops", "."]
# ::lemmas ["drunk", "people", "?", "late", "at", "Night", "?", "on", "the", "street", "?", "in", "Miami", "?", "get", "THE", "NATIONAL", "GUARD", ".", "USA", "be", "the", "country", "with", "the", "most", "hostile", "cop", "."]
(c2-12 / multi-sentence
       :snt1 (c2-8 / and
                   :op1 (c2-20 / drink-01
                               :ARG0 (c2-17 / person))
                   :op2 (c2-1 / late
                              :op1 (c2-16 / night))
                   :op3 (c2-11 / be-located-at-91
                               :ARG1 c2-17
                               :ARG2 (c2-0 / street))
                   :op4 (c2-9 / get-01
                              :ARG0 (c2-4 / you)
                              :ARG1 (c2-3 / guide
                                          :mod (c2-13 / nation))
                              :location (c2-14 / city
                                               :name (c2-18 / name
                                                            :op1 "Miami")))
                   :snt2 (c2-6 / have-03
                               :ARG0 (c2-10 / country
                                            :name (c2-15 / name
                                                         :op1 "USA"))
                               :ARG1 (c2-2 / cop
                                           :ARG1-of (c2-19 / have-degree-91
                                                           :ARG2 (c2-5 / hostile)
                                                           :ARG3 (c2-7 / most))))))

# ::snt Wait...he asked a cop to call him an Uber, cop refuses , and locks him up for not leaving the area? How was he supposed to Leave? Teleportation? GTFOH...
# ::tokens ["Wait", "...", "he", "asked", "a", "cop", "to", "call", "him", "an", "Uber", ",", "cop", "refuses", ",", "and", "locks", "him", "up", "for", "not", "leaving", "the", "area", "?", "How", "was", "he", "supposed", "to", "Leave", "?", "Teleportation", "?", "GTFOH", "..."]
# ::lemmas ["wait", "...", "he", "ask", "a", "cop", "to", "call", "he", "an", "Uber", ",", "cop", "refuse", ",", "and", "lock", "he", "up", "for", "not", "leave", "the", "area", "?", "how", "be", "he", "suppose", "to", "leave", "?", "teleportation", "?", "GTFOH", "..."]
(c3-13 / multi-sentence
       :snt1 (c3-19 / wait-01
                    :ARG1 (c3-3 / you)
                    :mode imperative)
       :snt2 (c3-7 / and
                   :op1 (c3-6 / ask-02
                              :ARG0 (c3-4 / he)
                              :ARG1 (c3-14 / call-02
                                           :ARG0 (c3-12 / cop)
                                           :ARG1 (c3-2 / company
                                                       :name (c3-17 / name
                                                                    :op1 " Uber"))
                                           :ARG2 c3-4)
                              :ARG2 c3-12)
                   :op2 (c3-18 / refuse-01
                               :ARG0 c3-12
                               :ARG1 (c3-1 / lock-up-03
                                           :ARG0 c3-12
                                           :ARG1 c3-4
                                           :ARG1-of (c3-15 / cause-01
                                                           :ARG0 (c3-10 / leave-11
                                                                        :ARG0 c3-4
                                                                        :ARG1 (c3-5 / area)
                                                                        :polarity -))))
                   :op3 (c3-0 / suppose-02
                              :ARG1 (c3-20 / he)
                              :ARG2 c3-10
                              :ARG0 c3-20
                              :ARG1 c3-5))
       :manner (c3-21 / amr-unknown)
       :op4 (c3-8 / telecommunication)
       :op5 (c3-9 / go-out-17
                  :ARG0 (c3-11 / you)
                  :mod (c3-16 / fuck
                              :mode expressive)
                  :mode expressive))

# ::snt Lmaooooo this guy is my favorite
# ::tokens ["Lmaooooo", "this", "guy", "is", "my", "favorite"]
# ::lemmas ["Lmaooooo", "this", "guy", "be", "my", "favorite"]
(c5-0 / favor-01
      :ARG0 (c5-2 / i)
      :ARG1 (c5-4 / guy
                  :mod (c5-3 / this))
      :mod (c5-1 / laugh-01
                 :ARG0 c5-2
                 :manner (c5-5 / loud)
                 :mode expressive))

# ::snt Aww...man
# ::tokens ["Aww", "...", "man"]
# ::lemmas ["Aww", "...", "man"]
(c6-0 / man
      :mod (c6-1 / aw
                 :mode expressive))

# ::snt Hi
# ::tokens ["Hi"]
# ::lemmas ["hi"]
(c7-0 / hi)

# ::snt in Miami. on Saturday night. come on
# ::tokens ["in", "Miami", ".", "on", "Saturday", "night", ".", "come", "on"]
# ::lemmas ["in", "Miami", ".", "on", "Saturday", "night", ".", "come", "on"]
(c9-4 / come-on-25
      :ARG1 (c9-0 / you)
      :location (c9-6 / city
                      :name (c9-1 / name
                                  :op1 "Miami"))
      :time (c9-5 / date-entity
                  :weekday (c9-2 / saturday)
                  :dayperiod (c9-3 / night))
      :mode imperative)

# ::snt i dealt w miami pd at a lawful protest, they were absolute dicks and even catcalled us
# ::tokens ["i", "dealt", "w", "miami", "pd", "at", "a", "lawful", "protest", ",", "they", "were", "absolute", "dicks", "and", "even", "catcalled", "us"]
# ::lemmas ["i", "deal", "w", "miami", "pd", "at", "a", "lawful", "protest", ",", "they", "be", "absolute", "dick", "and", "even", "catcall", "we"]
(c11-11 / and
        :op1 (c11-13 / deal-01
                     :ARG0 (c11-10 / i)
                     :ARG2 (c11-3 / person
                                  :name (c11-0 / name
                                               :op1 "Miami"))
                     :purpose (c11-1 / protest-01
                                     :mod (c11-4 / lawful)))
        :op2 (c11-12 / and
                     :op1 (c11-6 / dick
                                 :mod (c11-7 / absolute)
                                 :domain (c11-9 / they))
                     :op2 (c11-5 / call-01
                                 :ARG0 c11-9
                                 :ARG1 (c11-8 / we)
                                 :mod (c11-2 / even))))

# ::snt can someone replace the word booing with arresting in this picture?
# ::tokens ["can", "someone", "replace", "the", "word", "booing", "with", "arresting", "in", "this", "picture", "?"]
# ::lemmas ["can", "someone", "replace", "the", "word", "boo", "with", "arrest", "in", "this", "picture", "?"]
(c12-4 / possible-01
       :polarity (c12-8 / amr-unknown)
       :ARG1 (c12-3 / replace-01
                    :ARG0 (c12-2 / someone)
                    :ARG1 (c12-5 / word
                                 :mod (c12-0 / boo-01))
                    :ARG2 (c12-7 / arrest-01)
                    :location (c12-1 / picture
                                     :mod (c12-6 / this))))

# ::snt he cannot be contained
# ::tokens ["he", "can", "not", "be", "contained"]
# ::lemmas ["he", "can", "not", "be", "contain"]
(c13-2 / possible-01
       :ARG1 (c13-0 / contain-02
                    :ARG1 (c13-1 / he))
       :polarity -)

# ::snt Cant wait to see the new comedy special based on this material.
# ::tokens ["Ca", "nt", "wait", "to", "see", "the", "new", "comedy", "special", "based", "on", "this", "material", "."]
# ::lemmas ["can", "nt", "wait", "to", "see", "the", "new", "comedy", "special", "base", "on", "this", "material", "."]
(c14-5 / possible-01
       :ARG1 (c14-6 / wait-01
                    :ARG1 (c14-8 / i)
                    :ARG2 (c14-4 / see-01
                                 :ARG0 c14-8
                                 :ARG1 (c14-0 / special-02
                                              :ARG1 (c14-7 / comedy)
                                              :ARG1-of (c14-2 / new-01)
                                              :ARG1-of (c14-1 / base-02
                                                              :ARG2 (c14-3 / material
                                                                           :mod (c14-9 / this))))))
       :polarity -)

# ::snt like that time he got shitfaced on a podcast with Joe Rogan and Sam Harris and totally made a fucking fool out of himself? No way this guy has an alcohol problem.
# ::tokens ["like", "that", "time", "he", "got", "shitfaced", "on", "a", "podcast", "with", "Joe", "Rogan", "and", "Sam", "Harris", "and", "totally", "made", "a", "fucking", "fool", "out", "of", "himself", "?", "No", "way", "this", "guy", "has", "an", "alcohol", "problem", "."]
# ::lemmas ["like", "that", "time", "he", "got", "shitface", "on", "a", "podcast", "with", "Joe", "Rogan", "and", "Sam", "Harris", "and", "totally", "make", "a", "fucking", "fool", "out", "of", "himself", "?", "no", "way", "this", "guy", "have", "an", "alcohol", "problem", "."]
(c15-10 / multi-sentence
        :snt1 (c15-16 / resemble-01
                      :ARG2 (c15-8 / and
                                   :op1 (c15-0 / shitfaced
                                               :domain (c15-3 / he)
                                               :medium (c15-17 / podcast
                                                               :accompanier (c15-6 / and
                                                                                   :op1 (c15-11 / person
                                                                                                :name (c15-15 / name
                                                                                                              :op1 "Joe"
                                                                                                              :op2 "Romo"))
                                                                                   :op2 (c15-2 / person
                                                                                               :name (c15-12 / name
                                                                                                             :op1 "Sam"
                                                                                                             :op2 "Harris")))))
                                   :op2 (c15-4 / make-02
                                               :ARG0 c15-3
                                               :ARG1 (c15-14 / fool-01
                                                             :ARG0 c15-3
                                                             :mod (c15-18 / fucking))
                                               :ARG2 c15-3
                                               :mod (c15-7 / total))))
        :snt2 (c15-20 / have-03
                      :ARG0 (c15-9 / guy
                                   :mod (c15-13 / this))
                      :ARG1 (c15-1 / problem
                                   :topic (c15-5 / alcohol))
                      :manner (c15-19 / way
                                      :polarity -)))

# ::snt Another horrible job thanks to City of Miami PD. Way to go guys! Arrest a comedian for being drunk at a bar where its perfectly legal
# ::tokens ["Another", "horrible", "job", "thanks", "to", "City", "of", "Miami", "PD", ".", "Way", "to", "go", "guys", "!", "Arrest", "a", "comedian", "for", "being", "drunk", "at", "a", "bar", "where", "its", "perfectly", "legal"]
# ::lemmas ["another", "horrible", "job", "thank", "to", "City", "of", "Miami", "PD", ".", "way", "to", "go", "guy", "!", "arrest", "a", "comedian", "for", "be", "drunk", "at", "a", "bar", "where", "its", "perfectly", "legal"]
(c16-2 / multi-sentence
       :snt1 (c16-11 / job
                     :mod (c16-6 / horrible)
                     :mod (c16-4 / another)
                     :ARG2-of (c16-13 / thank-01
                                      :ARG1 (c16-14 / government-organization
                                                    :name (c16-3 / name
                                                                 :op1 "City"
                                                                 :op2 "of"
                                                                 :op3 "Miami"
                                                                 :op4 "PD"))))
       :snt2 (c16-9 / way
                    :manner-of (c16-12 / go-06))
       :snt3 (c16-15 / arrest-01
                     :ARG0 (c16-1 / you)
                     :ARG1 (c16-10 / comedian)
                     :ARG2 (c16-5 / drunk
                                  :domain c16-10
                                  :location (c16-0 / bar
                                                   :ARG1-of (c16-7 / legal-02
                                                                   :ARG1-of (c16-8 / perfect-02))))
                     :mode imperative))

# ::snt Is there such a thing as orderly intoxication?
# ::tokens ["Is", "there", "such", "a", "thing", "as", "orderly", "intoxication", "?"]
# ::lemmas ["be", "there", "such", "a", "thing", "as", "orderly", "intoxication", "?"]
(c17-2 / thing
       :polarity (c17-4 / amr-unknown)
       :mod (c17-1 / such)
       :example (c17-3 / intoxicate-01
                       :ARG1-of (c17-0 / orderly-03)))

# ::snt Ill be waiting for that comedy special to drop lol
# ::tokens ["Ill", "be", "waiting", "for", "that", "comedy", "special", "to", "drop", "lol"]
# ::lemmas ["Ill", "be", "wait", "for", "that", "comedy", "special", "to", "drop", "lol"]
(c18-2 / wait-01
       :ARG1 (c18-4 / i)
       :ARG2 (c18-6 / drop-01
                    :ARG1 (c18-0 / special-02
                                 :ARG1 (c18-3 / comedy)
                                 :mod (c18-5 / that)))
       :ARG2-of (c18-1 / laugh-01
                       :ARG0 c18-4
                       :manner (c18-7 / loud)
                       :mode expressive))

# ::snt Shit Happens
# ::tokens ["Shit", "Happens"]
# ::lemmas ["Shit", "Happens"]
(c20-0 / event
       :mod (c20-1 / shit))

# ::snt Pyramid scheme. Seen it too many times! If you were in from the start and got out, you're ok. The rest are gonna get f$!!
# ::tokens ["Pyramid", "scheme", ".", "Seen", "it", "too", "many", "times", "!", "If", "you", "were", "in", "from", "the", "start", "and", "got", "out", ",", "you", "'re", "ok", ".", "The", "rest", "are", "gon", "na", "get", "f$", "!", "!"]
# ::lemmas ["Pyramid", "scheme", ".", "see", "it", "too", "many", "time", "!", "if", "you", "be", "in", "from", "the", "start", "and", "get", "out", ",", "you", "be", "ok", ".", "the", "rest", "be", "going", "to", "get", "f$", "!", "!"]
(c21-4 / multi-sentence
       :snt1 (c21-6 / scheme
                    :mod (c21-11 / pyramid))
       :snt2 (c21-0 / see-01
                    :ARG0 (c21-13 / i)
                    :ARG1 c21-6
                    :ARG1-of (c21-10 / have-quant-91
                                     :ARG2 (c21-12 / many)
                                     :ARG3 (c21-14 / too)))
       :snt3 (c21-1 / okay-04
                    :ARG1 (c21-3 / you)
                    :condition (c21-8 / and
                                      :op1 (c21-2 / be-located-at-91
                                                  :ARG1 c21-3
                                                  :ARG2 (c21-17 / start-01))
                                      :op2 (c21-15 / get-05
                                                   :ARG1 c21-3
                                                   :ARG2 (c21-5 / out))))
       :snt4 (c21-16 / get-01
                     :ARG1 (c21-9 / rest)
                     :ARG2 (c21-7 / fuck)))

# ::snt Is he wearing a blouse? It's finally coming together.
# ::tokens ["Is", "he", "wearing", "a", "blouse", "?", "It", "'s", "finally", "coming", "together", "."]
# ::lemmas ["be", "he", "wear", "a", "blouse", "?", "it", "be", "finally", "come", "together", "."]
(c22-2 / multi-sentence
       :snt1 (c22-4 / wear-01
                    :polarity (c22-8 / amr-unknown)
                    :ARG0 (c22-3 / he)
                    :ARG1 (c22-1 / blouse))
       :snt2 (c22-5 / come-01
                    :ARG1 (c22-7 / it)
                    :ARG4 (c22-6 / together)
                    :time (c22-0 / final)))

# ::snt Two year old grow up back to behavioural class
# ::tokens ["Two", "year", "old", "grow", "up", "back", "to", "behavioural", "class"]
# ::lemmas ["Two", "year", "old", "grow", "up", "back", "to", "behavioural", "class"]
(c24-6 / grow-up-04
       :ARG1 (c24-3 / person
                    :age (c24-5 / temporal-quantity
                                :unit (c24-1 / year)
                                :quant 2))
       :direction (c24-4 / class
                         :topic (c24-0 / Behaviour))
       :direction (c24-2 / back))

# ::snt Wack
# ::tokens ["Wack"]
# ::lemmas ["wack"]
(c25-0 / whack)

# ::snt Is that over the legal limit?
# ::tokens ["Is", "that", "over", "the", "legal", "limit", "?"]
# ::lemmas ["be", "that", "over", "the", "legal", "limit", "?"]
(c26-1 / be-located-at-91
       :ARG1 (c26-4 / that)
       :ARG2 (c26-0 / over
                    :op1 (c26-3 / limit-01
                                :ARG1-of (c26-5 / legal-02)))
       :polarity (c26-2 / amr-unknown))

# ::snt I prefer to use much order on my path towards intoxication. He must have been doing something wrong.
# ::tokens ["I", "prefer", "to", "use", "much", "order", "on", "my", "path", "towards", "intoxication", ".", "He", "must", "have", "been", "doing", "something", "wrong", "."]
# ::lemmas ["i", "prefer", "to", "use", "much", "order", "on", "my", "path", "towards", "intoxication", ".", "he", "must", "have", "be", "do", "something", "wrong", "."]
(c27-1 / multi-sentence
       :snt1 (c27-6 / prefer-01
                    :ARG0 (c27-9 / i)
                    :ARG1 (c27-12 / use-01
                                  :ARG0 c27-9
                                  :ARG1 (c27-0 / order
                                               :quant (c27-5 / much))
                                  :location (c27-2 / path
                                                   :direction (c27-4 / intoxicate-01
                                                                     :ARG1 c27-9))))
       :snt2 (c27-11 / infer-01
                     :ARG1 (c27-10 / do-02
                                   :ARG0 (c27-7 / he)
                                   :ARG1 (c27-3 / something
                                                :ARG1-of (c27-8 / wrong-02)))))

# ::snt I don't know how anyone can tell when he is and isn't intoxicated because he seems high percent of the time to me.
# ::tokens ["I", "do", "n't", "know", "how", "anyone", "can", "tell", "when", "he", "is", "and", "is", "n't", "intoxicated", "because", "he", "seems", "high", "percent", "of", "the", "time", "to", "me", "."]
# ::lemmas ["i", "do", "not", "know", "how", "anyone", "can", "tell", "when", "he", "be", "and", "be", "not", "intoxicate", "because", "he", "seem", "high", "percent", "of", "the", "time", "to", "i", "."]
(c28-4 / know-01
       :ARG0 (c28-9 / i)
       :ARG1 (c28-8 / thing
                    :manner-of (c28-14 / tell-01
                                       :ARG0 (c28-10 / anyone)
                                       :ARG1 (c28-11 / and
                                                     :op1 (c28-2 / intoxicate-01
                                                                 :ARG1 (c28-3 / he))
                                                     :op2 (c28-13 / intoxicate-01
                                                                  :ARG1 c28-3
                                                                  :polarity -))
                                       :ARG1-of (c28-5 / possible-01)))
       :ARG1-of (c28-6 / cause-01
                       :ARG0 (c28-1 / seem-01
                                    :ARG1 (c28-7 / high-02
                                                 :ARG1 c28-3
                                                 :frequency (c28-12 / time
                                                                    :quant (c28-0 / percentage-entity
                                                                                  :value 1)))
                                    :ARG2 c28-9))
       :polarity -)

# ::snt Uuuummm. Who?
# ::tokens ["Uuuummm", ".", "Who", "?"]
# ::lemmas ["Uuuummm", ".", "who", "?"]
(c29-1 / multi-sentence
       :snt1 (c29-0 / umm
                    :mode expressive)
       :snt2 (c29-2 / amr-unknown))

# ::snt Really hoping this is a bit for broad city
# ::tokens ["Really", "hoping", "this", "is", "a", "bit", "for", "broad", "city"]
# ::lemmas ["really", "hope", "this", "be", "a", "bit", "for", "broad", "city"]
(c31-2 / hope-01
       :ARG1 (c31-5 / this
                    :degree (c31-0 / bit)
                    :beneficiary (c31-4 / city
                                        :ARG1-of (c31-3 / broad-02)))
       :degree (c31-1 / really))

# ::snt Was Cosby the bartender by any chance?
# ::tokens ["Was", "Cosby", "the", "bartender", "by", "any", "chance", "?"]
# ::lemmas ["be", "cosby", "the", "bartender", "by", "any", "chance", "?"]
(c32-2 / person
       :polarity (c32-4 / amr-unknown)
       :ARG0-of (c32-5 / drink-01)
       :domain (c32-1 / person
                      :name (c32-0 / name
                                   :op1 "Bill"
                                   :op2 "Cosby"))
       :ARG1-of (c32-3 / chance-02))

# ::snt He mustve been constituting himself as a nuisance at the time.
# ::tokens ["He", "must", "ve", "been", "constituting", "himself", "as", "a", "nuisance", "at", "the", "time", "."]
# ::lemmas ["he", "must", "ve", "be", "constitute", "himself", "as", "a", "nuisance", "at", "the", "time", "."]
(c33-3 / infer-01
       :ARG1 (c33-2 / constitute-01
                    :ARG0 (c33-1 / he
                                 :ARG1-of c33-2)
                    :ARG2 (c33-0 / nuisance)
                    :time (c33-4 / time)))

# ::snt Good for him... hope he had fun.
# ::tokens ["Good", "for", "him", "...", "hope", "he", "had", "fun", "."]
# ::lemmas ["good", "for", "he", "...", "hope", "he", "have", "fun", "."]
(c34-1 / multi-sentence
       :snt1 (c34-5 / good-04
                    :ARG2 (c34-3 / he))
       :snt2 (c34-4 / hope-01
                    :ARG1 (c34-0 / fun-01
                                 :ARG0 (c34-2 / he))))

# ::snt His smile says any publicity is good publicity.
# ::tokens ["His", "smile", "says", "any", "publicity", "is", "good", "publicity", "."]
# ::lemmas ["his", "smile", "say", "any", "publicity", "be", "good", "publicity", "."]
(c35-2 / say-01
       :ARG0 (c35-0 / smile-01
                    :ARG0 (c35-3 / he))
       :ARG1 (c35-4 / publicity
                    :ARG1-of (c35-6 / good-02)
                    :domain (c35-1 / publicity
                                   :mod (c35-5 / any))))

# ::snt C'est la Vie?
# ::tokens ["C'est", "la", "Vie", "?"]
# ::lemmas ["c'", "la", "Vie", "?"]
(c37-0 / c'est-la-vie
       :polarity (c37-1 / amr-unknown))

# ::snt Thats
# ::tokens ["That", "s"]
# ::lemmas ["that", "s"]
(c38-0 / that)

# ::snt Who??????
# ::tokens ["Who", "?", "?", "?", "?", "?", "?"]
# ::lemmas ["who", "?", "?", "?", "?", "?", "?"]
(c39-0 / amr-unknown)

# ::snt We pay there salaries to serve and protect. They did neither!
# ::tokens ["We", "pay", "there", "salaries", "to", "serve", "and", "protect", ".", "They", "did", "neither", "!"]
# ::lemmas ["we", "pay", "there", "salary", "to", "serve", "and", "protect", ".", "they", "do", "neither", "!"]
(c40-1 / multi-sentence
       :snt1 (c40-6 / pay-01
                    :ARG0 (c40-7 / we)
                    :ARG1 (c40-3 / salary
                                 :poss (c40-8 / they))
                    :ARG3 (c40-4 / and
                                 :op1 (c40-0 / serve-01
                                             :ARG0 c40-8)
                                 :op2 (c40-2 / protect-01
                                             :ARG0 c40-8)))
       :snt2 (c40-9 / do-02
                    :ARG0 (c40-10 / they)
                    :ARG1 (c40-5 / either)
                    :polarity -))

# ::snt He aint do shit
# ::tokens ["He", "ai", "nt", "do", "shit"]
# ::lemmas ["he", "be", "not", "do", "shit"]
(c41-0 / do-02
       :ARG0 (c41-1 / he)
       :ARG1 (c41-2 / shit)
       :polarity -)

# ::snt Many people, apparently.
# ::tokens ["Many", "people", ",", "apparently", "."]
# ::lemmas ["many", "people", ",", "apparently", "."]
(c45-2 / appear-02
       :ARG1 (c45-1 / person
                    :quant (c45-0 / many)))

# ::snt No one gets bad karma for outing a rapist this is a "no good deed goes unpunished" type of thing
# ::tokens ["No", "one", "gets", "bad", "karma", "for", "outing", "a", "rapist", "this", "is", "a", "\"", "no", "good", "deed", "goes", "unpunished", "\"", "type", "of", "thing"]
# ::lemmas ["no", "one", "get", "bad", "karma", "for", "out", "a", "rapist", "this", "be", "a", "\"", "no", "good", "deed", "go", "unpunished", "\"", "type", "of", "thing"]
(c46-3 / multi-sentence
       :snt1 (c46-11 / get-01
                     :ARG0 (c46-2 / no-one)
                     :ARG1 (c46-6 / karma
                                  :ARG1-of (c46-1 / bad-07))
                     :ARG1-of (c46-8 / cause-01
                                     :ARG0 (c46-0 / outing-06
                                                  :ARG0 c46-2
                                                  :ARG1 (c46-7 / person
                                                               :ARG0-of (c46-5 / rape-01)))))
       :snt2 (c46-10 / type-03
                     :ARG1 (c46-14 / thing
                                   :mod (c46-12 / deed
                                                :ARG1-of (c46-9 / good-02)
                                                :polarity -)
                                   :ARG1-of (c46-4 / punish-01
                                                   :polarity -))
                     :ARG2 (c46-13 / this)))

# ::snt We all make mistakes, we all should learn something when we do. So what did you learn? At least you didn't grope anyone...or do you remember if you did or not. I'll wait for it on
# ::tokens ["We", "all", "make", "mistakes", ",", "we", "all", "should", "learn", "something", "when", "we", "do", ".", "So", "what", "did", "you", "learn", "?", "At", "least", "you", "did", "n't", "grope", "anyone", "...", "or", "do", "you", "remember", "if", "you", "did", "or", "not", ".", "I", "'ll", "wait", "for", "it", "on"]
# ::lemmas ["we", "all", "make", "mistake", ",", "we", "all", "should", "learn", "something", "when", "we", "do", ".", "so", "what", "do", "you", "learn", "?", "at", "least", "you", "do", "not", "grope", "anyone", "...", "or", "do", "you", "remember", "if", "you", "do", "or", "not", ".", "i", "'ll", "wait", "for", "it", "on"]
(c47-16 / multi-sentence
        :snt1 (c47-13 / and
                      :op1 (c47-8 / mistake-02
                                  :ARG0 (c47-19 / we
                                                :mod (c47-10 / all)))
                      :op2 (c47-17 / recommend-01
                                   :ARG1 (c47-1 / learn-01
                                                :ARG0 c47-19
                                                :ARG1 (c47-0 / something)
                                                :time (c47-18 / do-02
                                                              :ARG0 c47-19))))
        :snt2 (c47-15 / learn-01
                      :ARG0 (c47-6 / you)
                      :ARG1 (c47-9 / amr-unknown))
        :snt3 (c47-5 / or
                     :op1 (c47-14 / grope-01
                                  :ARG0 (c47-12 / you)
                                  :ARG1 (c47-22 / anyone)
                                  :mod (c47-20 / at-least)
                                  :polarity -)
                     :op2 (c47-4 / remember-01
                                 :ARG0 c47-12
                                 :ARG1 (c47-11 / truth-value
                                               :polarity-of (c47-3 / grope-01
                                                                   :ARG0 c47-12))))
        :snt4 (c47-2 / wait-01
                     :ARG1 (c47-21 / i)
                     :ARG2 (c47-7 / it)))

# ::snt At least it wasn't cos he got his was beat
# ::tokens ["At", "least", "it", "was", "n't", "cos", "he", "got", "his", "was", "beat"]
# ::lemmas ["at", "least", "it", "be", "not", "cos", "he", "get", "his", "be", "beat"]
(c48-2 / cause-01
       :ARG0 (c48-0 / beat-01
                    :ARG1 (c48-1 / he))
       :ARG1 (c48-3 / it)
       :mod (c48-4 / at-least)
       :polarity -)

# ::snt You too Dabrielle. Were living in sad times.
# ::tokens ["You", "too", "Dabrielle", ".", "Were", "living", "in", "sad", "times", "."]
# ::lemmas ["you", "too", "Dabrielle", ".", "be", "live", "in", "sad", "time", "."]
(c49-3 / multi-sentence
       :snt1 (c49-4 / say-01
                    :ARG1 (c49-5 / person
                                 :name (c49-2 / name
                                              :op1 "Dabrielle")
                                 :mod (c49-7 / too)
                                 :ARG2-of c49-4))
       :snt2 (c49-6 / live-01
                    :ARG0 (c49-1 / you)
                    :time (c49-8 / time
                                 :ARG1-of (c49-0 / sad-02))))

# ::snt By the look of things, it seems like youll have to sleep at the bar until youre sober or drive yourself home drink, or brave it and ask the police for help and get locked up in jail.
# ::tokens ["By", "the", "look", "of", "things", ",", "it", "seems", "like", "you", "ll", "have", "to", "sleep", "at", "the", "bar", "until", "you", "re", "sober", "or", "drive", "yourself", "home", "drink", ",", "or", "brave", "it", "and", "ask", "the", "police", "for", "help", "and", "get", "locked", "up", "in", "jail", "."]
# ::lemmas ["by", "the", "look", "of", "thing", ",", "it", "seem", "like", "you", "ll", "have", "to", "sleep", "at", "the", "bar", "until", "you", "re", "sober", "or", "drive", "yourself", "home", "drink", ",", "or", "brave", "it", "and", "ask", "the", "police", "for", "help", "and", "get", "lock", "up", "in", "jail", "."]
(c50-0 / seem-01
       :ARG1 (c50-4 / obligate-01
                    :ARG1 (c50-6 / you)
                    :ARG2 (c50-13 / or
                                  :op1 (c50-5 / sleep-01
                                              :ARG0 c50-6
                                              :location (c50-14 / bar)
                                              :duration (c50-16 / until
                                                                :op1 (c50-3 / sober-02
                                                                            :ARG1 c50-6)))
                                  :op2 (c50-19 / drive-01
                                               :ARG0 c50-6
                                               :ARG1 (c50-15 / drink)
                                               :ARG2 (c50-7 / home))
                                  :op3 (c50-1 / brave-02
                                              :ARG0 c50-6
                                              :ARG1 (c50-10 / and
                                                            :op1 c50-15
                                                            :op2 (c50-9 / ask-02
                                                                        :ARG0 c50-6
                                                                        :ARG1 (c50-18 / help-01
                                                                                      :ARG2 c50-6)
                                                                        :ARG2 (c50-17 / police))
                                                            :op4 (c50-2 / lock-up-03
                                                                        :ARG1 c50-6
                                                                        :location (c50-8 / jail)))))
                    :ARG1-of (c50-12 / look-02
                                     :ARG0 (c50-11 / thing))))
