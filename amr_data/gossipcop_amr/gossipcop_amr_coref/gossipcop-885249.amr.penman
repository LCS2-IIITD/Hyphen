# ::snt Gimme! ARROW IS BACK
# ::tokens ["Gimme", "!", "ARROW", "IS", "BACK"]
# ::lemmas ["Gimme", "!", "ARROW", "be", "back"]
(c1-2 / back-02
      :ARG1 (c1-1 / country
                  :name (c1-3 / name
                              :op1 "Arkansas"))
      :mod (c1-0 / me
                 :mode expressive)
      :mode expressive)

# ::snt . Lots more Olicity :')(I finished the list for you)
# ::tokens [".", "Lots", "more", "Olicity", ":')", "(", "I", "finished", "the", "list", "for", "you", ")"]
# ::lemmas [".", "lot", "more", "olicity", ":')", "(", "i", "finish", "the", "list", "for", "you", ")"]
(c2-3 / subjective-03
      :quant (c2-2 / more
                   :quant (c2-4 / lot))
      :example (c2-0 / finish-01
                     :ARG0 (c2-5 / i)
                     :ARG1 (c2-6 / list)
                     :beneficiary (c2-1 / you)))

# ::snt Norah can totally take credit for that one.
# ::tokens ["Norah", "can", "totally", "take", "credit", "for", "that", "one", "."]
# ::lemmas ["Norah", "can", "totally", "take", "credit", "for", "that", "one", "."]
(c3-3 / possible-01
      :ARG1 (c3-6 / take-01
                  :ARG0 (c3-2 / person
                              :name (c3-1 / name
                                          :op1 "Norah"))
                  :ARG1 (c3-4 / credit-01
                              :ARG0 c3-2
                              :ARG1 c3-2
                              :ARG2 (c3-0 / one
                                          :mod (c3-7 / that)))
                  :degree (c3-5 / total)))

# ::snt Bring season . It's going to be lit
# ::tokens ["Bring", "season", ".", "It", "'s", "going", "to", "be", "lit"]
# ::lemmas ["bring", "season", ".", "it", "be", "go", "to", "be", "light"]
(c4-2 / multi-sentence
      :snt1 (c4-0 / bring-01
                  :ARG0 (c4-1 / you)
                  :ARG1 (c4-3 / season)
                  :mode imperative)
      :snt2 (c4-4 / light-04
                  :ARG1 (c4-5 / it)))

# ::snt . I think we can also expect that an Oliver that has his s--t together will wife up the love of his life, Felicity Smoak
# ::tokens [".", "I", "think", "we", "can", "also", "expect", "that", "an", "Oliver", "that", "has", "his", "s", "--", "t", "together", "will", "wife", "up", "the", "love", "of", "his", "life", ",", "Felicity", "Smoak"]
# ::lemmas [".", "i", "think", "we", "can", "also", "expect", "that", "an", "Oliver", "that", "have", "his", "s", "--", "t", "together", "will", "wife", "up", "the", "love", "of", "his", "life", ",", "Felicity", "Smoak"]
(c5-12 / think-01
       :ARG0 (c5-11 / i)
       :ARG1 (c5-7 / possible-01
                   :ARG1 (c5-5 / expect-01
                               :ARG0 (c5-10 / we)
                               :ARG1 (c5-9 / wife-01
                                           :ARG0 (c5-2 / person
                                                       :name (c5-1 / name
                                                                   :op1 "Oliver")
                                                       :ARG0-of (c5-6 / have-03
                                                                      :ARG1 (c5-3 / shit
                                                                                  :poss c5-2
                                                                                  :mod (c5-15 / together))))
                                           :ARG1 (c5-14 / person
                                                        :name c5-1
                                                        :op1 "Felicity"
                                                        :op2 "Smoak")
                                           :ARG0-of (c5-8 / love-01
                                                          :ARG1 (c5-13 / life
                                                                       :poss c5-2)))
                               :mod (c5-0 / up))
                   :mod (c5-4 / also)))
