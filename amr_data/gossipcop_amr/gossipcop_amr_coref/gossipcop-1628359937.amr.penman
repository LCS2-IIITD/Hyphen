# ::snt He just stole the title from ur beloved lol
# ::tokens ["He", "just", "stole", "the", "title", "from", "ur", "beloved", "lol"]
# ::lemmas ["he", "just", "steal", "the", "title", "from", "ur", "beloved", "lol"]
(c1-1 / steal-01
      :ARG0 (c1-2 / he)
      :ARG1 (c1-8 / title)
      :ARG2 (c1-3 / person
                  :ARG1-of (c1-4 / love-01
                                 :ARG0 (c1-0 / you)))
      :mod (c1-6 / just)
      :ARG2-of (c1-9 / laugh-01
                     :ARG0 (c1-7 / i)
                     :manner (c1-5 / loud)
                     :mode expressive))

# ::snt It's funny how my jab at Kanye West turned against me in an unexpected way. The bots are with you. I have nothing against Adam Lambert tbh
# ::tokens ["It", "'s", "funny", "how", "my", "jab", "at", "Kanye", "West", "turned", "against", "me", "in", "an", "unexpected", "way", ".", "The", "bots", "are", "with", "you", ".", "I", "have", "nothing", "against", "Adam", "Lambert", "tbh"]
# ::lemmas ["it", "be", "funny", "how", "my", "jab", "at", "Kanye", "West", "turn", "against", "i", "in", "an", "unexpected", "way", ".", "the", "bot", "be", "with", "you", ".", "i", "have", "nothing", "against", "Adam", "Lambert", "tbh"]
(c2-8 / multi-sentence
      :snt1 (c2-11 / funny
                   :domain (c2-6 / turn-02
                                 :ARG1 (c2-3 / jab-01
                                             :ARG0 (c2-18 / i)
                                             :ARG1 (c2-14 / person
                                                          :name (c2-12 / name
                                                                       :op1 "Kanye"
                                                                       :op2 "West")))
                                 :ARG2 (c2-5 / against
                                             :op1 c2-18)
                                 :manner (c2-16 / way
                                                :ARG1-of (c2-13 / expect-01
                                                                :polarity -))))
      :snt2 (c2-4 / accompany-01
                  :ARG0 (c2-7 / bot)
                  :ARG1 (c2-0 / you))
      :snt3 (c2-2 / have-03
                  :ARG0 (c2-1 / i)
                  :ARG1 (c2-10 / nothing
                               :prep-against (c2-9 / person
                                                   :name (c2-15 / name
                                                                :op1 "Adam"
                                                                :op2 "Lambert")))
                  :ARG1-of (c2-17 / honest-01)))

# ::snt I didn't mean him per se. My point is "superstars" ain't always as good as the industry make them look like.
# ::tokens ["I", "did", "n't", "mean", "him", "per", "se", ".", "My", "point", "is", "\"", "superstars", "\"", "ai", "n't", "always", "as", "good", "as", "the", "industry", "make", "them", "look", "like", "."]
# ::lemmas ["i", "do", "not", "mean", "he", "per", "se", ".", "my", "point", "be", "\"", "superstar", "\"", "be", "not", "always", "as", "good", "as", "the", "industry", "make", "they", "look", "like", "."]
(c3-1 / multi-sentence
      :snt1 (c3-8 / mean-01
                  :ARG0 (c3-11 / i)
                  :ARG2 (c3-6 / he
                              :mod (c3-7 / per-se))
                  :polarity -)
      :snt2 (c3-2 / point-04
                  :ARG0 (c3-4 / i)
                  :ARG1 (c3-10 / have-degree-91
                               :ARG1 (c3-3 / star
                                           :mod (c3-0 / super))
                               :ARG2 (c3-13 / good-02
                                            :ARG1 c3-3)
                               :ARG3 (c3-5 / equal)
                               :ARG4 (c3-15 / make-02
                                            :ARG0 (c3-14 / industry)
                                            :ARG1 (c3-9 / look-02
                                                        :ARG0 c3-3))
                               :time (c3-12 / always)
                               :polarity -)))

# ::snt Let's not forget that the "industry" is full of medicore artists that don't deserve their stardom. That's why many underground artists are
# ::tokens ["Let", "'s", "not", "forget", "that", "the", "\"", "industry", "\"", "is", "full", "of", "medicore", "artists", "that", "do", "n't", "deserve", "their", "stardom", ".", "That", "'s", "why", "many", "underground", "artists", "are"]
# ::lemmas ["let", "us", "not", "forget", "that", "the", "\"", "industry", "\"", "be", "full", "of", "medicore", "artist", "that", "do", "not", "deserve", "their", "stardom", ".", "that", "be", "why", "many", "underground", "artist", "be"]
(c4-1 / multi-sentence
      :snt1 (c4-0 / forget-01
                  :ARG0 (c4-5 / we)
                  :ARG1 (c4-4 / fill-01
                              :ARG1 (c4-9 / industry)
                              :ARG2 (c4-10 / artist
                                           :mod (c4-3 / medicore)
                                           :ARG0-of (c4-12 / deserve-01
                                                           :ARG1 (c4-2 / stardom
                                                                       :poss c4-10)
                                                           :polarity -)))
                  :polarity -
                  :mode imperative)
      :snt2 (c4-6 / cause-01
                  :ARG0 (c4-8 / that)
                  :ARG1 (c4-11 / artist
                               :mod (c4-13 / underground)
                               :quant (c4-7 / many))))

# ::snt Follow it wil be an Beyonc Stan acc.
# ::tokens ["Follow", "it", "wil", "be", "an", "Beyonc", "Stan", "acc", "."]
# ::lemmas ["follow", "it", "wil", "be", "an", "Beyonc", "Stan", "acc", "."]
(c5-0 / follow-02
      :ARG0 (c5-1 / you)
      :ARG1 (c5-3 / person
                  :name (c5-2 / name
                              :op1 "Beyoncec"
                              :op2 "Stan")
                  :domain (c5-4 / it))
      :mode imperative)

# ::snt He should. America Loved that show. I miss it.
# ::tokens ["He", "should", ".", "America", "Loved", "that", "show", ".", "I", "miss", "it", "."]
# ::lemmas ["he", "should", ".", "America", "Loved", "that", "show", ".", "i", "miss", "it", "."]
(c6-0 / multi-sentence
      :snt1 (c6-3 / recommend-01
                  :ARG0 (c6-4 / he))
      :snt2 (c6-5 / love-01
                  :ARG0 (c6-7 / country
                              :name (c6-1 / name
                                          :op1 "America"))
                  :ARG1 (c6-2 / show-04
                              :mod (c6-9 / that)))
      :snt3 (c6-6 / miss-01
                  :ARG0 (c6-8 / i)
                  :ARG1 c6-2))

# ::snt I mean.. I do get your point to an extent.. Especially the idea that we don't know what goes on behind closed doors
# ::tokens ["I", "mean", "..", "I", "do", "get", "your", "point", "to", "an", "extent", "..", "Especially", "the", "idea", "that", "we", "do", "n't", "know", "what", "goes", "on", "behind", "closed", "doors"]
# ::lemmas ["i", "mean", "..", "i", "do", "get", "your", "point", "to", "an", "extent", "..", "especially", "the", "idea", "that", "we", "do", "not", "know", "what", "go", "on", "behind", "closed", "door"]
(c8-2 / mean-01
      :ARG0 (c8-11 / i)
      :ARG2 (c8-13 / get-30
                   :ARG0 c8-11
                   :ARG1 (c8-7 / point-04
                               :ARG0 (c8-1 / you))
                   :degree (c8-6 / extent)
                   :example (c8-4 / idea
                                  :topic (c8-8 / know-01
                                               :ARG0 (c8-9 / we)
                                               :ARG1 (c8-12 / thing
                                                            :ARG1-of (c8-14 / go-on-15
                                                                            :location (c8-0 / behind
                                                                                            :op1 (c8-5 / door
                                                                                                       :ARG1-of (c8-10 / close-01)))))
                                               :polarity -)
                                  :mod (c8-3 / especially))))

# ::snt She somewhat believes in the barbaric thoughts her husband shares. Just because she doesn't/didn't have the same nerve to do as her husband is doing, doesn't mean she doesn't share the same thoughts. As I said before she isn't to blame but she is part of the problem. My opinion
# ::tokens ["She", "somewhat", "believes", "in", "the", "barbaric", "thoughts", "her", "husband", "shares", ".", "Just", "because", "she", "doesn't", "/", "didn't", "have", "the", "same", "nerve", "to", "do", "as", "her", "husband", "is", "doing", ",", "does", "n't", "mean", "she", "does", "n't", "share", "the", "same", "thoughts", ".", "As", "I", "said", "before", "she", "is", "n't", "to", "blame", "but", "she", "is", "part", "of", "the", "problem", ".", "My", "opinion"]
# ::lemmas ["she", "somewhat", "believe", "in", "the", "barbaric", "thought", "her", "husband", "share", ".", "just", "because", "she", "doesn't", "/", "didn't", "have", "the", "same", "nerve", "to", "do", "as", "her", "husband", "be", "do", ",", "do", "not", "mean", "she", "do", "not", "share", "the", "same", "thought", ".", "as", "i", "say", "before", "she", "be", "not", "to", "blame", "but", "she", "be", "part", "of", "the", "problem", ".", "my", "opinion"]
(c9-20 / multi-sentence
       :snt1 (c9-18 / believe-01
                    :ARG0 (c9-0 / she)
                    :ARG1 (c9-15 / thing
                                 :ARG1-of (c9-25 / think-01)
                                 :mod (c9-2 / barbaric)
                                 :ARG1-of (c9-6 / share-01
                                                :ARG0 (c9-29 / person
                                                             :ARG0-of (c9-11 / have-rel-role-91
                                                                             :ARG1 c9-0
                                                                             :ARG2 (c9-30 / husband)))))
                    :degree (c9-4 / somewhat))
       :snt2 (c9-12 / mean-01
                    :ARG1 (c9-24 / cause-01
                                 :ARG0 (c9-28 / slash
                                              :op1 (c9-10 / have-03
                                                          :ARG0 (c9-1 / she)
                                                          :ARG1 (c9-27 / nerve
                                                                       :ARG1-of (c9-19 / same-01
                                                                                       :ARG2 c9-27))
                                                          :polarity -)
                                              :op2 (c9-26 / have-03
                                                          :ARG0 c9-1
                                                          :ARG1 c9-27
                                                          :polarity -))
                                 :mod (c9-14 / just))
                    :ARG2 (c9-23 / share-01
                                 :ARG0 c9-1
                                 :ARG1 (c9-31 / thing
                                              :ARG1-of (c9-3 / think-01)
                                              :ARG1-of (c9-9 / same-01))
                                 :polarity -)
                    :polarity -)
       :snt3 (c9-16 / contrast-01
                    :ARG1 (c9-5 / blame-01
                                :ARG1 (c9-22 / she)
                                :polarity -)
                    :ARG2 (c9-13 / have-part-91
                                 :ARG1 (c9-21 / problem)
                                 :ARG2 c9-22)
                    :ARG1-of (c9-7 / say-01
                                   :ARG0 (c9-32 / i)
                                   :time (c9-17 / before)))
       :snt4 (c9-8 / opine-01
                   :ARG0 c9-32))

# ::snt She deffo isn't to blame.. She's just most definitely part of the problem
# ::tokens ["She", "deffo", "is", "n't", "to", "blame", "..", "She", "'s", "just", "most", "definitely", "part", "of", "the", "problem"]
# ::lemmas ["she", "deffo", "be", "not", "to", "blame", "..", "she", "be", "just", "most", "definitely", "part", "of", "the", "problem"]
(c10-2 / multi-sentence
       :snt1 (c10-1 / blame-01
                    :ARG1 (c10-3 / she)
                    :mod (c10-10 / deffo)
                    :polarity -)
       :snt2 (c10-4 / have-part-91
                    :ARG1 (c10-5 / problem)
                    :ARG2 (c10-0 / she)
                    :mod (c10-9 / just)
                    :mod (c10-7 / definite
                                :ARG2-of (c10-8 / have-degree-91
                                                :ARG1 c10-4
                                                :ARG3 (c10-6 / most)))))

# ::snt He now lays.. within the sunken place lool.
# ::tokens ["He", "now", "lays", "..", "within", "the", "sunken", "place", "lool", "."]
# ::lemmas ["he", "now", "lay", "..", "within", "the", "sunken", "place", "lool", "."]
(c11-3 / lay-01
       :ARG1 (c11-2 / he)
       :ARG2 (c11-5 / within
                    :op1 (c11-6 / lool
                                :mod (c11-4 / place)
                                :ARG1-of (c11-1 / sink-01)))
       :time (c11-0 / now))

# ::snt Chris Tucker would be great.
# ::tokens ["Chris", "Tucker", "would", "be", "great", "."]
# ::lemmas ["Chris", "Tucker", "would", "be", "great", "."]
(c12-0 / great
       :domain (c12-2 / person
                      :name (c12-1 / name
                                   :op1 "Chris"
                                   :op2 "Tucker")))

# ::snt this is the only way I'd watch! Come on Ye! This would be good
# ::tokens ["this", "is", "the", "only", "way", "I", "'d", "watch", "!", "Come", "on", "Ye", "!", "This", "would", "be", "good"]
# ::lemmas ["this", "be", "the", "only", "way", "i", "would", "watch", "!", "come", "on", "Ye", "!", "this", "would", "be", "good"]
(c13-2 / multi-sentence
       :snt1 (c13-4 / way
                    :mod (c13-0 / only)
                    :manner-of (c13-3 / watch-01
                                      :ARG0 (c13-6 / i))
                    :domain (c13-7 / this))
       :snt2 (c13-5 / come-on-25
                    :ARG1 (c13-1 / you)
                    :mode imperative)
       :snt3 (c13-8 / good-02
                    :ARG1 (c13-9 / this)))

# ::snt This was to increase ratings for d show
# ::tokens ["This", "was", "to", "increase", "ratings", "for", "d", "show"]
# ::lemmas ["this", "be", "to", "increase", "rating", "for", "d", "show"]
(c14-2 / have-purpose-91
       :ARG1 (c14-4 / this)
       :ARG2 (c14-3 / increase-01
                    :ARG0 c14-4
                    :ARG1 (c14-1 / rate-01
                                 :ARG1 (c14-0 / show-04
                                              :mod (c14-5 / d)))))

# ::snt Thanks
# ::tokens ["Thanks"]
# ::lemmas ["thank"]
(c15-2 / thank-01
       :ARG0 (c15-1 / i)
       :ARG1 (c15-0 / you))

# ::snt "It better fucking be me"
# ::tokens ["\"", "It", "better", "fucking", "be", "me", "\""]
# ::lemmas ["\"", "it", "well", "fucking", "be", "i", "\""]
(c16-2 / have-degree-91
       :ARG1 (c16-3 / i)
       :ARG2 (c16-4 / good-02)
       :ARG3 (c16-1 / more)
       :ARG4 (c16-0 / fuck-01
                    :ARG1 c16-3))

# ::snt Yo guys what did jlo say before Kanye started.!?
# ::tokens ["Yo", "guys", "what", "did", "jlo", "say", "before", "Kanye", "started", ".", "!", "?"]
# ::lemmas ["Yo", "guy", "what", "do", "jlo", "say", "before", "Kanye", "start", ".", "!", "?"]
(c17-5 / say-01
       :ARG0 (c17-7 / person
                    :name (c17-3 / name
                                 :op1 "Jlo"))
       :ARG1 (c17-8 / amr-unknown)
       :time (c17-1 / before
                    :op1 (c17-0 / start-01
                                :ARG0 (c17-4 / person
                                             :name (c17-6 / name
                                                          :op1 "Kanye"))))
       :ARG2 (c17-9 / guy
                    :mod (c17-2 / yo)))

# ::snt Without music
# ::tokens ["Without", "music"]
# ::lemmas ["without", "music"]
(c18-0 / music
       :polarity -)

# ::snt well considering this is a singing show, and he didnt sing.... good job on that analysis
# ::tokens ["well", "considering", "this", "is", "a", "singing", "show", ",", "and", "he", "did", "nt", "sing", "....", "good", "job", "on", "that", "analysis"]
# ::lemmas ["well", "consider", "this", "be", "a", "singing", "show", ",", "and", "he", "do", "not", "sing", "....", "good", "job", "on", "that", "analysis"]
(c19-1 / multi-sentence
       :snt1 (c19-4 / consider-02
                    :ARG1 (c19-8 / and
                                 :op1 (c19-2 / show-04
                                             :ARG1 (c19-0 / sing-01)
                                             :domain (c19-6 / this))
                                 :op2 (c19-12 / sing-01
                                              :ARG0 (c19-3 / he)
                                              :polarity -))
                    :mod (c19-5 / well))
       :snt2 (c19-7 / job
                    :ARG1-of (c19-9 / good-02)
                    :topic (c19-10 / analyze-01
                                   :mod (c19-11 / that))))

# ::snt Thank u hun will do so
# ::tokens ["Thank", "u", "hun", "will", "do", "so"]
# ::lemmas ["thank", "u", "hun", "will", "do", "so"]
(c20-3 / thank-01
       :ARG1 (c20-0 / you
                    :mod (c20-2 / hun))
       :ARG2 (c20-4 / do-02
                    :ARG0 c20-0
                    :ARG1 (c20-1 / so)))

# ::snt Dope as hell
# ::tokens ["Dope", "as", "hell"]
# ::lemmas ["Dope", "as", "hell"]
(c21-2 / have-degree-91
       :ARG1 (c21-0 / you)
       :ARG2 (c21-4 / dope-01
                    :ARG0 c21-0)
       :ARG3 (c21-1 / equal)
       :ARG4 (c21-3 / hell))

# ::snt Really???
# ::tokens ["Really", "?", "?", "?"]
# ::lemmas ["really", "?", "?", "?"]
(c22-0 / real-04
       :polarity (c22-1 / amr-unknown))

# ::snt GOAT bruh
# ::tokens ["GOAT", "bruh"]
# ::lemmas ["GOAT", "bruh"]
(c23-2 / say-01
       :ARG1 (c23-0 / good-02)
       :ARG2 (c23-1 / bruh))

# ::snt your role model
# ::tokens ["your", "role", "model"]
# ::lemmas ["your", "role", "model"]
(c25-0 / role-model
       :poss (c25-1 / you))

# ::snt : "That one time Kanye West auditioned for American Idol. " in South Africa
# ::tokens [":", "\"", "That", "one", "time", "Kanye", "West", "auditioned", "for", "American", "Idol", ".", "\"", "in", "South", "Africa"]
# ::lemmas [":", "\"", "that", "one", "time", "Kanye", "West", "audition", "for", "American", "Idol", ".", "\"", "in", "South", "Africa"]
(c26-2 / say-01
       :ARG1 (c26-7 / time
                    :mod (c26-9 / that)
                    :time-of (c26-8 / audition-01
                                    :ARG0 (c26-4 / person
                                                 :name (c26-1 / name
                                                              :op1 "Kanye"
                                                              :op2 "West"))
                                    :ARG1 (c26-0 / broadcast-program
                                                 :name (c26-3 / name
                                                              :op1 "American"
                                                              :op2 "Idol"))))
       :location (c26-6 / country
                        :name (c26-5 / name
                                     :op1 "South"
                                     :op2 "Africa")))

# ::snt If you search on YouTube I'm sure you'll find it.
# ::tokens ["If", "you", "search", "on", "YouTube", "I", "'m", "sure", "you", "'ll", "find", "it", "."]
# ::lemmas ["if", "you", "search", "on", "YouTube", "i", "be", "sure", "you", "'ll", "find", "it", "."]
(c27-4 / sure-02
       :ARG0 (c27-7 / i)
       :ARG1 (c27-0 / find-01
                    :ARG0 (c27-2 / you)
                    :ARG1 (c27-5 / it))
       :condition (c27-1 / search-01
                         :ARG0 c27-2
                         :ARG1 (c27-6 / publication
                                      :name (c27-3 / name
                                                   :op1 "YouTube"))))

# ::snt I remember that audition. It was kinda funny and fun. He even brought Kim K for support.
# ::tokens ["I", "remember", "that", "audition", ".", "It", "was", "kinda", "funny", "and", "fun", ".", "He", "even", "brought", "Kim", "K", "for", "support", "."]
# ::lemmas ["i", "remember", "that", "audition", ".", "it", "be", "kinda", "funny", "and", "fun", ".", "he", "even", "bring", "Kim", "K", "for", "support", "."]
(c28-2 / multi-sentence
       :snt1 (c28-6 / remember-01
                    :ARG0 (c28-13 / i)
                    :ARG1 (c28-7 / audition-01
                                 :mod (c28-14 / that)))
       :snt2 (c28-15 / and
                     :op1 (c28-0 / funny-02
                                 :ARG1 (c28-5 / it)
                                 :degree (c28-10 / kind-of))
                     :op2 (c28-11 / fun-01
                                  :ARG1 c28-5
                                  :degree c28-10))
       :snt3 (c28-1 / bring-01
                    :ARG0 (c28-9 / he)
                    :ARG1 (c28-12 / person
                                  :name (c28-3 / name
                                               :op1 "Kim"
                                               :op2 "K"))
                    :purpose (c28-4 / support-01
                                    :ARG0 c28-9
                                    :ARG1 c28-12)
                    :mod (c28-8 / even)))

# ::snt if kanye wasn't already famous he would've get rejected
# ::tokens ["if", "kanye", "was", "n't", "already", "famous", "he", "would", "'ve", "get", "rejected"]
# ::lemmas ["if", "kanye", "be", "not", "already", "famous", "he", "would", "'ve", "get", "reject"]
(c29-2 / reject-01
       :ARG1 (c29-3 / person
                    :name (c29-1 / name
                                 :op1 "Kanye"))
       :condition (c29-0 / fame-01
                         :ARG1 c29-3
                         :time (c29-4 / already)
                         :polarity -))

# ::snt I would love to see the whole thing
# ::tokens ["I", "would", "love", "to", "see", "the", "whole", "thing"]
# ::lemmas ["i", "would", "love", "to", "see", "the", "whole", "thing"]
(c30-1 / love-02
       :ARG0 (c30-3 / i)
       :ARG1 (c30-0 / see-01
                    :ARG0 c30-3
                    :ARG1 (c30-4 / thing
                                 :mod (c30-2 / whole))))

# ::snt Gold digger
# ::tokens ["Gold", "digger"]
# ::lemmas ["gold", "digger"]
(c31-2 / person
       :ARG0-of (c31-1 / dig-01
                       :ARG1 (c31-0 / gold)))

# ::snt kanye west the boooy!
# ::tokens ["kanye", "west", "the", "boooy", "!"]
# ::lemmas ["kanye", "west", "the", "boooy", "!"]
(c33-1 / boooy
       :domain (c33-2 / person
                      :name (c33-0 / name
                                   :op1 "Kanye"
                                   :op2 "West"))
       :mode expressive)

# ::snt Thank you - this was a great interview and as a huge Petty fan, I appreciate you asking and getting a good answer on that question!
# ::tokens ["Thank", "you", "-", "this", "was", "a", "great", "interview", "and", "as", "a", "huge", "Petty", "fan", ",", "I", "appreciate", "you", "asking", "and", "getting", "a", "good", "answer", "on", "that", "question", "!"]
# ::lemmas ["thank", "you", "-", "this", "be", "a", "great", "interview", "and", "as", "a", "huge", "Petty", "fan", ",", "i", "appreciate", "you", "ask", "and", "get", "a", "good", "answer", "on", "that", "question", "!"]
(c35-14 / multi-sentence
        :snt1 (c35-8 / thank-01
                     :ARG0 (c35-20 / i)
                     :ARG1 (c35-3 / you))
        :snt2 (c35-9 / and
                     :op1 (c35-4 / interview-01
                                 :mod (c35-10 / great)
                                 :domain (c35-15 / this))
                     :op2 (c35-7 / appreciate-02
                                 :ARG0 (c35-12 / i
                                               :mod (c35-16 / fan
                                                            :mod (c35-18 / person
                                                                         :name (c35-17 / name
                                                                                       :op1 "Petty"))
                                                            :mod (c35-5 / huge)))
                                 :ARG1 (c35-6 / and
                                              :op1 (c35-22 / ask-01
                                                           :ARG0 (c35-11 / you))
                                              :op2 (c35-1 / get-01
                                                          :ARG0 c35-11
                                                          :ARG1 (c35-19 / answer-01
                                                                        :ARG1 (c35-21 / thing
                                                                                      :ARG1-of (c35-13 / question-01)
                                                                                      :mod (c35-0 / that))
                                                                        :ARG1-of (c35-2 / good-02)))))))

# ::snt Very true.
# ::tokens ["Very", "true", "."]
# ::lemmas ["very", "true", "."]
(c36-1 / true-01
       :degree (c36-0 / very))

# ::snt Well, none of them have that either.
# ::tokens ["Well", ",", "none", "of", "them", "have", "that", "either", "."]
# ::lemmas ["well", ",", "none", "of", "they", "have", "that", "either", "."]
(c37-2 / have-03
       :ARG0 (c37-4 / they
                    :quant (c37-0 / none))
       :ARG1 (c37-5 / that)
       :mod (c37-1 / either)
       :mod (c37-3 / well)
       :polarity -)

# ::snt I'm voting for you Caleb I hope you win
# ::tokens ["I", "'m", "voting", "for", "you", "Caleb", "I", "hope", "you", "win"]
# ::lemmas ["i", "be", "vote", "for", "you", "Caleb", "i", "hope", "you", "win"]
(c38-1 / say-01
       :ARG0 (c38-6 / i)
       :ARG1 (c38-7 / and
                    :op1 (c38-2 / vote-01
                                :ARG0 c38-6
                                :ARG1 (c38-4 / person
                                             :name (c38-0 / name
                                                          :op1 "Caleb")))
                    :op2 (c38-3 / hope-01
                                :ARG0 c38-6
                                :ARG1 (c38-5 / win-01
                                             :ARG0 c38-4)))
       :ARG2 c38-4)

# ::snt You are my fav omg
# ::tokens ["You", "are", "my", "fav", "omg"]
# ::lemmas ["you", "be", "my", "fav", "omg"]
(c39-0 / favor-01
       :ARG0 (c39-2 / i)
       :ARG1 (c39-1 / you)
       :mod (c39-3 / omg
                   :mode expressive))

# ::snt You've had my vote all along in all ways one can vote.
# ::tokens ["You", "'ve", "had", "my", "vote", "all", "along", "in", "all", "ways", "one", "can", "vote", "."]
# ::lemmas ["you", "'ve", "have", "my", "vote", "all", "along", "in", "all", "way", "one", "can", "vote", "."]
(c40-3 / have-03
       :ARG0 (c40-1 / you)
       :ARG1 (c40-2 / vote-01
                    :ARG0 (c40-7 / i))
       :duration (c40-8 / all-along)
       :manner (c40-5 / way
                      :mod (c40-9 / all)
                      :manner-of (c40-6 / vote-01
                                        :ARG0 (c40-0 / one)
                                        :ARG1-of (c40-4 / possible-01))))

# ::snt I believe it
# ::tokens ["I", "believe", "it"]
# ::lemmas ["i", "believe", "it"]
(c41-0 / believe-01
       :ARG0 (c41-1 / it
                    :ARG1-of c41-0))

# ::snt If he doesnt. I will!
# ::tokens ["If", "he", "does", "nt", ".", "I", "will", "!"]
# ::lemmas ["if", "he", "do", "not", ".", "i", "will", "!"]
(c42-0 / do-02
       :ARG0 (c42-3 / i)
       :condition (c42-1 / do-02
                         :ARG0 (c42-2 / he)
                         :polarity -)
       :mode expressive)

# ::snt Yessss.
# ::tokens ["Yessss", "."]
# ::lemmas ["Yessss", "."]
(c43-0 / yessss)

# ::snt Doesnt matter Id vote for you a million thousand different times
# ::tokens ["Does", "nt", "matter", "I", "d", "vote", "for", "you", "a", "million", "thousand", "different", "times"]
# ::lemmas ["do", "not", "matter", "i", "d", "vote", "for", "you", "a", "million", "thousand", "different", "time"]
(c44-1 / matter-01
       :ARG1 (c44-2 / vote-01
                    :ARG0 (c44-3 / i)
                    :ARG1 (c44-0 / you)
                    :frequency (c44-4 / time
                                      :ARG1-of (c44-5 / differ-02)
                                      :quant 1000000))
       :polarity -)

# ::snt Why didnt you tag him to find out?!!
# ::tokens ["Why", "did", "nt", "you", "tag", "him", "to", "find", "out", "?", "!", "!"]
# ::lemmas ["why", "do", "not", "you", "tag", "he", "to", "find", "out", "?", "!", "!"]
(c45-5 / tag-01
       :ARG0 (c45-1 / you)
       :ARG1 (c45-3 / he)
       :purpose (c45-0 / find-out-03
                       :ARG0 c45-3)
       :ARG1-of (c45-4 / cause-01
                       :ARG0 (c45-2 / amr-unknown))
       :polarity -)

# ::snt Kanye only votes for Kanye. He has his own special number to text.
# ::tokens ["Kanye", "only", "votes", "for", "Kanye", ".", "He", "has", "his", "own", "special", "number", "to", "text", "."]
# ::lemmas ["Kanye", "only", "vote", "for", "Kanye", ".", "he", "have", "his", "own", "special", "number", "to", "text", "."]
(c46-2 / multi-sentence
       :snt1 (c46-5 / vote-01
                    :ARG0 (c46-7 / person
                                 :name (c46-1 / name
                                              :op1 "Kanye"))
                    :ARG1 (c46-3 / person
                                 :name (c46-6 / name
                                              :op1 "Kanye"))
                    :mod (c46-0 / only))
       :snt2 (c46-8 / have-03
                    :ARG0 (c46-10 / he)
                    :ARG1 (c46-9 / number
                                 :ARG1-of (c46-4 / special-02)
                                 :poss c46-10)
                    :purpose (c46-11 / text-01
                                     :ARG0 c46-10)))

# ::snt You don't need his vote. He's an ass
# ::tokens ["You", "do", "n't", "need", "his", "vote", ".", "He", "'s", "an", "ass"]
# ::lemmas ["you", "do", "not", "need", "his", "vote", ".", "he", "be", "an", "ass"]
(c47-2 / multi-sentence
       :snt1 (c47-1 / need-01
                    :ARG0 (c47-0 / you)
                    :ARG1 (c47-3 / vote-01
                                 :ARG0 (c47-4 / he)
                                 :ARG1 c47-0)
                    :polarity -)
       :snt2 (c47-6 / ass
                    :domain (c47-5 / he)))

# ::snt I think he would, He is smart and supports our great POTUS
# ::tokens ["I", "think", "he", "would", ",", "He", "is", "smart", "and", "supports", "our", "great", "POTUS"]
# ::lemmas ["i", "think", "he", "would", ",", "he", "be", "smart", "and", "support", "our", "great", "POTUS"]
(c49-9 / think-01
       :ARG0 (c49-10 / i)
       :ARG1 (c49-11 / and
                     :op1 (c49-3 / smart-06
                                 :ARG1 (c49-4 / he))
                     :op2 (c49-0 / support-01
                                 :ARG0 c49-4
                                 :ARG1 (c49-5 / person
                                              :ARG0-of (c49-8 / have-org-role-91
                                                              :ARG1 (c49-6 / country
                                                                           :name (c49-1 / name
                                                                                        :op1 "United"
                                                                                        :op2 "States"))
                                                              :ARG2 (c49-2 / president))
                                              :mod (c49-12 / great)
                                              :poss (c49-7 / we)))))

# ::snt You are amazing!
# ::tokens ["You", "are", "amazing", "!"]
# ::lemmas ["you", "be", "amazing", "!"]
(c50-1 / amaze-01
       :ARG0 (c50-0 / you))
