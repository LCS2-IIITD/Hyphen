# ::snt "does not work on set"
# ::tokens ["\"", "does", "not", "work", "on", "set", "\""]
# ::lemmas ["\"", "do", "not", "work", "on", "set", "\""]
(c1-0 / work-09
      :location (c1-1 / set)
      :polarity -)

# ::snt Shes an executive producer
# ::tokens ["She", "s", "an", "executive", "producer"]
# ::lemmas ["she", "s", "an", "executive", "producer"]
(c2-2 / person
      :ARG0-of (c2-3 / produce-01)
      :mod (c2-0 / executive)
      :domain (c2-1 / he))

# ::snt Shes not the directorShes the producer
# ::tokens ["She", "s", "not", "the", "directorShes", "the", "producer"]
# ::lemmas ["she", "s", "not", "the", "directorshe", "the", "producer"]
(c3-3 / contrast-01
      :ARG1 (c3-2 / person
                  :ARG0-of (c3-1 / have-org-role-91
                                 :ARG2 (c3-6 / director))
                  :domain (c3-4 / he)
                  :polarity -)
      :ARG2 (c3-0 / person
                  :ARG0-of (c3-5 / produce-01)
                  :domain c3-4))

# ::snt Who, who, who, who, who, who and who?
# ::tokens ["Who", ",", "who", ",", "who", ",", "who", ",", "who", ",", "who", "and", "who", "?"]
# ::lemmas ["who", ",", "who", ",", "who", ",", "who", ",", "who", ",", "who", "and", "who", "?"]
(c4-4 / and
      :op1 (c4-3 / amr-unknown)
      :op2 (c4-1 / amr-unknown)
      :op3 (c4-5 / amr-unknown)
      :op4 (c4-0 / amr-unknown)
      :op5 (c4-6 / amr-unknown)
      :op6 (c4-2 / amr-unknown))

# ::snt They should've left it after the first season. They got their point across I loved it but dragging it on might lose its focus
# ::tokens ["They", "should", "'ve", "left", "it", "after", "the", "first", "season", ".", "They", "got", "their", "point", "across", "I", "loved", "it", "but", "dragging", "it", "on", "might", "lose", "its", "focus"]
# ::lemmas ["they", "should", "'ve", "leave", "it", "after", "the", "first", "season", ".", "they", "get", "their", "point", "across", "i", "love", "it", "but", "drag", "it", "on", "might", "lose", "its", "focus"]
(c6-11 / multi-sentence
       :snt1 (c6-16 / recommend-01
                    :ARG1 (c6-1 / leave-15
                                :ARG0 (c6-7 / they)
                                :ARG1 (c6-18 / it)
                                :time (c6-6 / after
                                            :op1 (c6-0 / season
                                                       :ord (c6-2 / ordinal-entity
                                                                  :value 1)))))
       :snt2 (c6-13 / contrast-01
                    :ARG1 (c6-8 / get-04
                                :ARG0 (c6-14 / they)
                                :ARG1 (c6-5 / across
                                            :domain (c6-17 / point-04
                                                           :ARG0 c6-14))
                                :ARG1-of (c6-9 / love-01
                                               :ARG0 (c6-3 / i)))
                    :ARG2 (c6-12 / possible-01
                                 :ARG1 (c6-4 / lose-02
                                             :ARG0 (c6-19 / drag-01
                                                          :ARG1 (c6-10 / it))
                                             :ARG1 (c6-15 / focus-01
                                                          :ARG1 c6-10)))))

# ::snt Bij Roulette already outstreamed tsunami on everywhere, she can keep all of it except for roulette
# ::tokens ["Bij", "Roulette", "already", "outstreamed", "tsunami", "on", "everywhere", ",", "she", "can", "keep", "all", "of", "it", "except", "for", "roulette"]
# ::lemmas ["Bij", "Roulette", "already", "outstreame", "tsunami", "on", "everywhere", ",", "she", "can", "keep", "all", "of", "it", "except", "for", "roulette"]
(c7-8 / cause-01
      :ARG0 (c7-3 / stream-03
                  :ARG0 (c7-10 / tsunami
                               :name (c7-1 / name
                                           :op1 "Bij"
                                           :op2 "Roulette"))
                  :ARG1 (c7-5 / everywhere)
                  :time (c7-4 / already))
      :ARG1 (c7-6 / possible-01
                  :ARG1 (c7-7 / keep-01
                              :ARG0 (c7-0 / she)
                              :ARG1 (c7-9 / all
                                          :ARG2-of (c7-11 / except-01
                                                          :ARG1 (c7-2 / person
                                                                      :name c7-1
                                                                      :op1 "Roulette"))))))

# ::snt ew no
# ::tokens ["ew", "no"]
# ::lemmas ["ew", "no"]
(c8-1 / no
      :mod (c8-0 / ewww))

# ::snt terrible defines h new music. please stfu and go buy down
# ::tokens ["terrible", "defines", "h", "new", "music", ".", "please", "stfu", "and", "go", "buy", "down"]
# ::lemmas ["terrible", "define", "h", "new", "music", ".", "please", "stfu", "and", "go", "buy", "down"]
(c9-3 / multi-sentence
      :snt1 (c9-9 / define-01
                  :ARG0 (c9-6 / horrible)
                  :ARG1 (c9-5 / music
                              :ARG1-of (c9-2 / new-01)))
      :snt2 (c9-7 / and
                  :op1 (c9-4 / stfu
                             :ARG0 (c9-1 / you)
                             :mode imperative
                             :polite +)
                  :op2 (c9-8 / go-05
                             :ARG0 c9-1
                             :ARG1 (c9-0 / buy-down-27
                                         :ARG0 c9-1)
                             :mode imperative)))

# ::snt Tsunami outsold both
# ::tokens ["Tsunami", "outsold", "both"]
# ::lemmas ["Tsunami", "outsold", "both"]
(c10-0 / outsell-01
       :ARG0 (c10-2 / tsunami)
       :ARG1 (c10-1 / both))

# ::snt ROULETTE is definitely a million times better than De Ja Vu
# ::tokens ["ROULETTE", "is", "definitely", "a", "million", "times", "better", "than", "De", "Ja", "Vu"]
# ::lemmas ["ROULETTE", "be", "definitely", "a", "million", "time", "well", "than", "De", "Ja", "Vu"]
(c11-2 / have-degree-91
       :ARG1 (c11-1 / rape-01)
       :ARG2 (c11-5 / good-02)
       :ARG3 (c11-4 / times
                    :quant 1000000)
       :ARG4 (c11-3 / product
                    :name (c11-0 / name
                                 :op1 "De"
                                 :op2 "Ja"
                                 :op3 "Vu"))
       :mod (c11-6 / definite))

# ::snt i want the old cast
# ::tokens ["i", "want", "the", "old", "cast"]
# ::lemmas ["i", "want", "the", "old", "cast"]
(c12-0 / want-01
       :ARG0 (c12-2 / i)
       :ARG1 (c12-1 / cast
                    :mod (c12-3 / old)))

# ::snt don't know maybe it will be good but Yeah i am going to watch it.
# ::tokens ["do", "n't", "know", "maybe", "it", "will", "be", "good", "but", "Yeah", "i", "am", "going", "to", "watch", "it", "."]
# ::lemmas ["do", "not", "know", "maybe", "it", "will", "be", "good", "but", "yeah", "i", "be", "go", "to", "watch", "it", "."]
(c13-4 / contrast-01
       :ARG1 (c13-3 / know-01
                    :ARG0 (c13-6 / i)
                    :ARG1 (c13-2 / possible-01
                                 :ARG1 (c13-7 / good-02
                                              :ARG1 (c13-1 / it)))
                    :polarity -)
       :ARG2 (c13-5 / watch-01
                    :ARG0 c13-6
                    :ARG1 c13-1
                    :mod (c13-0 / yeah)))

# ::snt This is about how they get cure from what happened on season , and all questions will be answered in season
# ::tokens ["This", "is", "about", "how", "they", "get", "cure", "from", "what", "happened", "on", "season", ",", "and", "all", "questions", "will", "be", "answered", "in", "season"]
# ::lemmas ["this", "be", "about", "how", "they", "get", "cure", "from", "what", "happen", "on", "season", ",", "and", "all", "question", "will", "be", "answer", "in", "season"]
(c14-3 / and
       :op1 (c14-5 / concern-02
                   :ARG0 (c14-8 / this)
                   :ARG1 (c14-13 / thing
                                 :manner-of (c14-9 / get-01
                                                   :ARG0 (c14-7 / they)
                                                   :ARG1 (c14-4 / thing
                                                                :ARG0-of (c14-12 / cure-01))
                                                   :ARG2 (c14-2 / season))))
       :op2 (c14-10 / answer-01
                    :ARG1 (c14-1 / thing
                                 :ARG1-of (c14-11 / question-01)
                                 :mod (c14-6 / all))
                    :time (c14-0 / season)))

# ::snt Roulette deserve better seriously
# ::tokens ["Roulette", "deserve", "better", "seriously"]
# ::lemmas ["roulette", "deserve", "well", "seriously"]
(c15-7 / deserve-01
       :ARG0 (c15-4 / person
                    :name (c15-0 / name
                                 :op1 "Roulette"))
       :ARG1 (c15-5 / thing
                    :ARG1-of (c15-3 / have-degree-91
                                    :ARG2 (c15-6 / good-02
                                                 :ARG1 c15-5)
                                    :ARG3 (c15-1 / more)))
       :ARG2-of (c15-2 / serious-01))

# ::snt I'm still trying to figure that out myself.
# ::tokens ["I", "'m", "still", "trying", "to", "figure", "that", "out", "myself", "."]
# ::lemmas ["i", "be", "still", "try", "to", "figure", "that", "out", "myself", "."]
(c16-2 / try-01
       :ARG0 (c16-3 / i)
       :ARG1 (c16-0 / figure-out-05
                    :ARG0 c16-3
                    :ARG1 (c16-4 / that))
       :mod (c16-1 / still))

# ::snt Why ?
# ::tokens ["Why", "?"]
# ::lemmas ["why", "?"]
(c17-0 / cause-01
       :ARG0 (c17-1 / amr-unknown))

# ::snt Cancelled
# ::tokens ["Cancelled"]
# ::lemmas ["cancel"]
(c18-0 / delay-01)

# ::snt why does it need a second season exactly
# ::tokens ["why", "does", "it", "need", "a", "second", "season", "exactly"]
# ::lemmas ["why", "do", "it", "need", "a", "second", "season", "exactly"]
(c19-1 / need-01
       :ARG0 (c19-4 / it)
       :ARG1 (c19-2 / season
                    :ord (c19-0 / ordinal-entity
                                :value 2))
       :purpose (c19-5 / amr-unknown)
       :mod (c19-3 / exact))

# ::snt All these people are making fun of the cast and the show, but are still going to watch it the second it comes back
# ::tokens ["All", "these", "people", "are", "making", "fun", "of", "the", "cast", "and", "the", "show", ",", "but", "are", "still", "going", "to", "watch", "it", "the", "second", "it", "comes", "back"]
# ::lemmas ["all", "these", "people", "be", "make", "fun", "of", "the", "cast", "and", "the", "show", ",", "but", "be", "still", "go", "to", "watch", "it", "the", "second", "it", "come", "back"]
(c20-6 / contrast-01
       :ARG1 (c20-2 / make-fun-04
                    :ARG0 (c20-5 / person
                                 :mod (c20-4 / all)
                                 :mod (c20-10 / this))
                    :ARG1 (c20-9 / and
                                 :op1 (c20-11 / cast)
                                 :op2 (c20-3 / show-04)))
       :ARG2 (c20-7 / watch-01
                    :ARG0 c20-5
                    :ARG1 c20-3
                    :mod (c20-0 / still)
                    :time (c20-12 / second
                                  :time-of (c20-8 / come-01
                                                  :ARG1 c20-3
                                                  :direction (c20-1 / back)))))

# ::snt ohh. I guess so. There are no books for this season. they can write and take it in whichever direction they like
# ::tokens ["ohh", ".", "I", "guess", "so", ".", "There", "are", "no", "books", "for", "this", "season", ".", "they", "can", "write", "and", "take", "it", "in", "whichever", "direction", "they", "like"]
# ::lemmas ["ohh", ".", "i", "guess", "so", ".", "there", "be", "no", "book", "for", "this", "season", ".", "they", "can", "write", "and", "take", "it", "in", "whichever", "direction", "they", "like"]
(c21-3 / multi-sentence
       :snt1 (c21-13 / guess-01
                     :ARG0 (c21-11 / i)
                     :ARG1 (c21-4 / so)
                     :mod (c21-0 / oh
                                 :mode expressive))
       :snt2 (c21-2 / book
                    :time (c21-1 / season
                                 :mod (c21-12 / this))
                    :polarity -)
       :snt3 (c21-8 / possible-01
                    :ARG1 (c21-6 / and
                                 :op1 (c21-10 / write-01
                                              :ARG0 (c21-15 / they))
                                 :op2 (c21-14 / take-01
                                              :ARG0 c21-15
                                              :ARG1 (c21-5 / it)
                                              :ARG3 (c21-7 / direction
                                                           :ARG1-of (c21-9 / like-02
                                                                           :ARG0 c21-15))))))

# ::snt what the??
# ::tokens ["what", "the", "?", "?"]
# ::lemmas ["what", "the", "?", "?"]
(c22-0 / amr-unknown)

# ::snt wha-
# ::tokens ["wha-"]
# ::lemmas ["wha-"]
(c23-0 / wha
       :mode expressive)

# ::snt Oh my god
# ::tokens ["Oh", "my", "god"]
# ::lemmas ["oh", "my", "god"]
(c24-0 / god
       :mod (c24-1 / oh)
       :poss (c24-2 / i))

# ::snt Yeap but didn't nominate it!
# ::tokens ["Yeap", "but", "did", "n't", "nominate", "it", "!"]
# ::lemmas ["yeap", "but", "do", "not", "nominate", "it", "!"]
(c25-0 / contrast-01
       :ARG2 (c25-2 / nominate-01
                    :ARG1 (c25-3 / it)
                    :polarity -)
       :mod (c25-1 / yeap
                   :mode expressive))

# ::snt RW is over.But I've been thinking when it started?
# ::tokens ["RW", "is", "over", ".", "But", "I", "'ve", "been", "thinking", "when", "it", "started", "?"]
# ::lemmas ["RW", "be", "over", ".", "but", "i", "'ve", "be", "think", "when", "it", "start", "?"]
(c26-6 / contrast-01
       :ARG1 (c26-0 / over-01
                    :ARG1 (c26-5 / person
                                 :name (c26-1 / name
                                              :op1 "RW")))
       :ARG2 (c26-8 / think-01
                    :ARG0 (c26-7 / i)
                    :time (c26-2 / start-01
                                 :ARG1 (c26-3 / it))
                    :polarity (c26-4 / amr-unknown)))

# ::snt Old cast outsold
# ::tokens ["Old", "cast", "outsold"]
# ::lemmas ["old", "cast", "outsold"]
(c27-0 / cast-out-05
       :ARG1 (c27-1 / person
                    :mod (c27-2 / old)))

# ::snt Stranger things outeverythinged
# ::tokens ["Stranger", "things", "outeverythinged"]
# ::lemmas ["stranger", "thing", "outeverythinge"]
(c28-1 / everything
       :ARG1-of (c28-0 / endanger-01)
       :ARG1-of (c28-2 / out-06))

# ::snt Why is there more cast lol?
# ::tokens ["Why", "is", "there", "more", "cast", "lol", "?"]
# ::lemmas ["why", "be", "there", "more", "cast", "lol", "?"]
(c29-2 / cast-03
       :quant (c29-0 / more)
       :ARG1-of (c29-6 / cause-01
                       :ARG0 (c29-4 / amr-unknown))
       :ARG2-of (c29-1 / laugh-01
                       :ARG0 (c29-3 / i)
                       :manner (c29-5 / loud)
                       :mode expressive))

# ::snt whatttt
# ::tokens ["whatttt"]
# ::lemmas ["whatttt"]
(c30-1 / thing
       :name (c30-0 / name
                    :op1 "whatttt"))

# ::snt don't you think Alex taping why he died
# ::tokens ["do", "n't", "you", "think", "Alex", "taping", "why", "he", "died"]
# ::lemmas ["do", "not", "you", "think", "Alex", "tape", "why", "he", "die"]
(c31-5 / think-01
       :ARG0 (c31-0 / you)
       :ARG1 (c31-7 / tape-02
                    :ARG0 (c31-3 / person
                                 :name (c31-1 / name
                                              :op1 "Alex"))
                    :ARG1 (c31-6 / thing
                                 :ARG0-of (c31-4 / cause-01
                                                 :ARG1 (c31-8 / die-01
                                                              :ARG1 c31-3))))
       :ARG1-of (c31-2 / request-confirmation-91))

# ::snt Lmao FALSE
# ::tokens ["Lmao", "FALSE"]
# ::lemmas ["lmao", "false"]
(c32-0 / false
       :mod (c32-2 / laugh-01
                   :ARG0 (c32-3 / i)
                   :manner (c32-1 / loud)
                   :mode expressive))

# ::snt what a stupid show. nobody asked for this
# ::tokens ["what", "a", "stupid", "show", ".", "nobody", "asked", "for", "this"]
# ::lemmas ["what", "a", "stupid", "show", ".", "nobody", "ask", "for", "this"]
(c35-1 / multi-sentence
       :snt1 (c35-3 / show-04
                    :mod (c35-0 / stupid
                                :degree (c35-6 / so)))
       :snt2 (c35-5 / ask-02
                    :ARG0 (c35-2 / nobody)
                    :ARG1 (c35-4 / this)))

# ::snt Haters
# ::tokens ["Haters"]
# ::lemmas ["hater"]
(c37-1 / person
       :ARG0-of (c37-0 / hate-01))

# ::snt *you
# ::tokens ["*", "you"]
# ::lemmas ["*", "you"]
(c38-0 / you)

# ::snt Even tho they aren't famous, why are guys judging them? You haven't even seen them acting in the show. Get off their backs.
# ::tokens ["Even", "tho", "they", "are", "n't", "famous", ",", "why", "are", "guys", "judging", "them", "?", "You", "have", "n't", "even", "seen", "them", "acting", "in", "the", "show", ".", "Get", "off", "their", "backs", "."]
# ::lemmas ["even", "tho", "they", "be", "not", "famous", ",", "why", "be", "guy", "judge", "they", "?", "you", "have", "not", "even", "see", "they", "act", "in", "the", "show", ".", "get", "off", "their", "back", "."]
(c39-4 / multi-sentence
       :snt1 (c39-10 / judge-01
                     :ARG0 (c39-13 / guy)
                     :ARG1 (c39-12 / they)
                     :concession (c39-0 / fame-01
                                        :ARG1 c39-12
                                        :polarity -)
                     :ARG1-of (c39-9 / cause-01
                                     :ARG0 (c39-7 / amr-unknown)))
       :snt2 (c39-6 / see-01
                    :ARG0 (c39-3 / you)
                    :ARG1 (c39-11 / act-01
                                  :ARG0 (c39-15 / they
                                                :part (c39-2 / back))
                                  :location (c39-1 / show-04))
                    :mod (c39-8 / even)
                    :polarity -)
       :snt3 (c39-14 / get-05
                     :ARG0 c39-3
                     :mode imperative)
       :ARG2 (c39-5 / off
                    :op1 c39-2))

# ::snt What k of you? Yes!
# ::tokens ["What", "k", "of", "you", "?", "Yes", "!"]
# ::lemmas ["what", "k", "of", "you", "?", "yes", "!"]
(c40-2 / multi-sentence
       :snt1 (c40-3 / amr-unknown
                    :domain (c40-1 / you))
       :snt2 (c40-0 / yes
                    :mode expressive))

# ::snt So don't use words like "we" when majority of us will be watching. You are a minority
# ::tokens ["So", "do", "n't", "use", "words", "like", "\"", "we", "\"", "when", "majority", "of", "us", "will", "be", "watching", ".", "You", "are", "a", "minority"]
# ::lemmas ["so", "do", "not", "use", "word", "like", "\"", "we", "\"", "when", "majority", "of", "we", "will", "be", "watch", ".", "you", "be", "a", "minority"]
(c41-1 / multi-sentence
       :snt1 (c41-10 / use-01
                     :ARG0 (c41-0 / you)
                     :ARG1 (c41-6 / word
                                  :ARG1-of (c41-3 / resemble-01
                                                  :ARG2 (c41-5 / we)))
                     :time (c41-11 / watch-01
                                   :ARG0 (c41-4 / majority
                                                :ARG3-of (c41-8 / include-91
                                                                :ARG2 (c41-2 / we))))
                     :polarity -
                     :mode imperative)
       :snt2 (c41-7 / minority
                    :domain (c41-9 / you)))

# ::snt She wasn't in it, she was a producer or something
# ::tokens ["She", "was", "n't", "in", "it", ",", "she", "was", "a", "producer", "or", "something"]
# ::lemmas ["she", "be", "not", "in", "it", ",", "she", "be", "a", "producer", "or", "something"]
(c42-6 / contrast-01
       :ARG1 (c42-7 / involve-01
                    :ARG1 (c42-3 / she)
                    :ARG2 (c42-4 / it)
                    :polarity -)
       :ARG2 (c42-0 / or
                    :op1 (c42-5 / person
                                :ARG0-of (c42-2 / produce-01))
                    :op2 (c42-1 / something)))

# ::snt We really won't
# ::tokens ["We", "really", "wo", "n't"]
# ::lemmas ["we", "really", "will", "not"]
(c43-0 / do-02
       :ARG0 (c43-2 / we)
       :ARG1-of (c43-1 / real-04)
       :polarity -)

# ::snt Ok so..
# ::tokens ["Ok", "so", ".."]
# ::lemmas ["ok", "so", ".."]
(c44-0 / okay-01
       :mod (c44-1 / so))

# ::snt YES ITS MY FAVE WHERES THE RECIEPTS? Yesterday someone said penedulum was announced
# ::tokens ["YES", "ITS", "MY", "FAVE", "WHERES", "THE", "RECIEPTS", "?", "Yesterday", "someone", "said", "penedulum", "was", "announced"]
# ::lemmas ["yes", "its", "my", "fave", "wheres", "the", "RECIEPTS", "?", "Yesterday", "someone", "say", "penedulum", "be", "announce"]
(c45-2 / multi-sentence
       :snt1 (c45-9 / truth-value
                    :polarity-of (c45-6 / prove-01
                                        :ARG0 (c45-8 / i)
                                        :ARG1 (c45-7 / claim-01)))
       :snt2 (c45-4 / say-01
                    :ARG0 (c45-0 / someone)
                    :ARG1 (c45-5 / announce-01
                                 :ARG1 (c45-3 / penedulum))
                    :time (c45-1 / yesterday)))

# ::snt No we wont
# ::tokens ["No", "we", "wo", "nt"]
# ::lemmas ["no", "we", "will", "not"]
(c46-0 / do-02
       :ARG0 (c46-1 / we)
       :polarity -)

# ::snt Follow our voting account for the legend Camila Cabello
# ::tokens ["Follow", "our", "voting", "account", "for", "the", "legend", "Camila", "Cabello"]
# ::lemmas ["follow", "our", "voting", "account", "for", "the", "legend", "Camila", "Cabello"]
(c47-0 / follow-02
       :ARG0 (c47-1 / you)
       :ARG1 (c47-7 / account-01
                    :ARG0 (c47-6 / we)
                    :ARG1 (c47-3 / vote-01
                                 :ARG1 (c47-4 / person
                                              :name (c47-2 / name
                                                           :op1 "Camila"
                                                           :op2 "Cabello")
                                              :mod (c47-5 / legend))))
       :mode imperative)

# ::snt Wait what
# ::tokens ["Wait", "what"]
# ::lemmas ["wait", "what"]
(c48-0 / wait-01
       :ARG1 (c48-1 / you)
       :ARG2 (c48-2 / amr-unknown)
       :mode imperative)

# ::snt is that ryan newman?
# ::tokens ["is", "that", "ryan", "newman", "?"]
# ::lemmas ["be", "that", "ryan", "newman", "?"]
(c49-2 / person
       :polarity (c49-3 / amr-unknown)
       :name (c49-0 / name
                    :op1 "Ryan"
                    :op2 "Newman")
       :domain (c49-1 / that))

# ::snt "y'all im so excited for rw s2 omg""Meet the NEW CAST of rw""Oh bitch hell nah rw s2 is already cancelled"
# ::tokens ["\"", "y'", "all", "i", "m", "so", "excited", "for", "rw", "s2", "omg\"\"Meet", "the", "NEW", "CAST", "of", "rw\"\"Oh", "bitch", "hell", "nah", "rw", "s2", "is", "already", "cancelled", "\""]
# ::lemmas ["\"", "you", "all", "i", "m", "so", "excited", "for", "rw", "s2", "omg\"\"meet", "the", "new", "cast", "of", "rw\"\"Oh", "bitch", "hell", "nah", "rw", "s2", "be", "already", "cancel", "\""]
(c50-2 / multi-sentence
       :snt1 (c50-5 / excite-01
                    :ARG0 (c50-7 / product
                                 :name (c50-3 / name
                                              :op1 "RW"
                                              :op2 "s2"))
                    :ARG1 (c50-12 / i)
                    :degree (c50-4 / so)
                    :mod (c50-0 / oh))
       :snt2 (c50-6 / meet-02
                    :ARG0 (c50-1 / you
                                 :mod (c50-13 / all))
                    :ARG1 (c50-14 / AST
                                  :poss c50-7
                                  :ARG1-of (c50-8 / new-01))
                    :mode imperative)
       :snt3 (c50-10 / cancel-01
                     :ARG1 c50-7
                     :mod (c50-9 / hell
                                 :mod c50-0
                                 :mode expressive)
                     :mode expressive)
       :time (c50-11 / already))
