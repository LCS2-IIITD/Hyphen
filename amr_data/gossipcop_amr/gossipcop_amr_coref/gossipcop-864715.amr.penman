# ::snt Are they considered celebrities/talent?????
# ::tokens ["Are", "they", "considered", "celebrities", "/", "talent", "?", "?", "?", "?", "?"]
# ::lemmas ["be", "they", "consider", "celebrity", "/", "talent", "?", "?", "?", "?", "?"]
(c1-2 / consider-01
      :polarity (c1-1 / amr-unknown)
      :ARG1 (c1-0 / slash
                  :op1 (c1-5 / celebrity)
                  :op2 (c1-3 / talent)
                  :domain (c1-4 / they)))

# ::snt I bet he wouldn't be apologizing if he wasn't exposed..
# ::tokens ["I", "bet", "he", "would", "n't", "be", "apologizing", "if", "he", "was", "n't", "exposed", ".."]
# ::lemmas ["i", "bet", "he", "would", "not", "be", "apologize", "if", "he", "be", "not", "expose", ".."]
(c3-0 / bet-01
      :ARG0 (c3-3 / i)
      :ARG2 (c3-4 / apologize-01
                  :ARG0 (c3-2 / he)
                  :condition (c3-1 / expose-01
                                   :ARG1 c3-2
                                   :polarity -)
                  :polarity -))

# ::snt OK, duly noted.
# ::tokens ["OK", ",", "duly", "noted", "."]
# ::lemmas ["ok", ",", "duly", "note", "."]
(c5-1 / note-01
      :ARG1-of (c5-0 / okay-01)
      :manner (c5-2 / due))

# ::snt That's what I thought as well...
# ::tokens ["That", "'s", "what", "I", "thought", "as", "well", "..."]
# ::lemmas ["that", "be", "what", "i", "think", "as", "well", "..."]
(c6-3 / think-01
      :ARG0 (c6-2 / i)
      :ARG1 (c6-0 / that)
      :mod (c6-1 / as-well))

# ::snt This is so unreal!This guy treat her bad and after he tried apologizes himself
# ::tokens ["This", "is", "so", "unreal!This", "guy", "treat", "her", "bad", "and", "after", "he", "tried", "apologizes", "himself"]
# ::lemmas ["this", "be", "so", "unreal!this", "guy", "treat", "her", "bad", "and", "after", "he", "try", "apologize", "himself"]
(c7-3 / and
      :op1 (c7-8 / treat-01
                 :ARG0 (c7-9 / guy
                             :mod (c7-11 / this))
                 :ARG1 (c7-2 / she)
                 :ARG2 (c7-1 / bad-07))
      :op2 (c7-7 / apologize-01
                 :ARG0 c7-9
                 :ARG1 c7-9
                 :time (c7-6 / after
                             :op1 (c7-10 / try-01
                                         :ARG0 c7-9
                                         :ARG1 c7-8)))
      :domain (c7-5 / this
                    :ARG1-of (c7-4 / realistic-03
                                   :degree (c7-0 / so)
                                   :polarity -)))

# ::snt Apologizes doesn't fix what's broken,right what's wrong &amp; undo what's done,he said what he meant at the time &amp; that's that.
# ::tokens ["Apologizes", "does", "n't", "fix", "what", "'s", "broken", ",", "right", "what", "'s", "wrong", "&", "amp", ";", "undo", "what", "'s", "done", ",", "he", "said", "what", "he", "meant", "at", "the", "time", "&", "amp", ";", "that", "'s", "that", "."]
# ::lemmas ["Apologizes", "do", "not", "fix", "what", "be", "break", ",", "right", "what", "be", "wrong", "&", "amp", ";", "undo", "what", "be", "do", ",", "he", "say", "what", "he", "mean", "at", "the", "time", "&", "amp", ";", "that", "be", "that", "."]
(c8-11 / multi-sentence
       :snt1 (c8-7 / and
                   :op1 (c8-14 / fix-02
                               :ARG0 (c8-6 / apologize-01)
                               :ARG1 (c8-9 / thing
                                           :ARG1-of (c8-10 / break-01))
                               :polarity -)
                   :op2 (c8-15 / right-06
                               :ARG1 (c8-12 / thing
                                            :ARG1-of (c8-17 / wrong-02)))
                   :op3 (c8-13 / undo-01
                               :ARG1 (c8-18 / thing
                                            :ARG1-of (c8-16 / do-02))))
       :snt2 (c8-0 / say-01
                   :ARG0 (c8-3 / he)
                   :ARG1 (c8-1 / thing
                               :ARG2-of (c8-4 / mean-01
                                              :ARG0 c8-3
                                              :time (c8-5 / and
                                                          :op1 (c8-8 / time)
                                                          :op2 (c8-19 / amp)))))
       :snt3 (c8-2 / be-it-08
                   :ARG1 c8-5))

# ::snt I know where he can shove that apology in.
# ::tokens ["I", "know", "where", "he", "can", "shove", "that", "apology", "in", "."]
# ::lemmas ["i", "know", "where", "he", "can", "shove", "that", "apology", "in", "."]
(c9-3 / know-01
      :ARG0 (c9-6 / i)
      :ARG1 (c9-2 / location
                  :location-of (c9-0 / shove-01
                                     :ARG0 (c9-1 / he)
                                     :ARG1 (c9-7 / apologize-01
                                                 :mod (c9-5 / that))
                                     :ARG1-of (c9-4 / possible-01))))

# ::snt !!!!!
# ::tokens ["!", "!", "!", "!", "!"]
# ::lemmas ["!", "!", "!", "!", "!"]
(c11-0 / thing
       :mode expressive)
