# ::snt Time to call it a day Kimi U knew from the start the way he dictated UR clothes he was a nutty bully, kick him out
# ::tokens ["Time", "to", "call", "it", "a", "day", "Kimi", "U", "knew", "from", "the", "start", "the", "way", "he", "dictated", "UR", "clothes", "he", "was", "a", "nutty", "bully", ",", "kick", "him", "out"]
# ::lemmas ["time", "to", "call", "it", "a", "day", "Kimi", "U", "know", "from", "the", "start", "the", "way", "he", "dictate", "UR", "clothe", "he", "be", "a", "nutty", "bully", ",", "kick", "he", "out"]
(c1-15 / time
       :time-of (c1-10 / call-01
                       :ARG1 (c1-14 / it)
                       :ARG2 (c1-16 / day))
       :ARG1-of (c1-7 / know-01
                      :ARG0 (c1-8 / person
                                  :name (c1-2 / name
                                              :op1 "Kimi"
                                              :op2 "U"))
                      :ARG1 (c1-5 / and
                                  :op1 (c1-11 / way
                                              :manner-of (c1-12 / dictate-01
                                                                :ARG0 c1-8
                                                                :ARG1 (c1-17 / clothes
                                                                             :poss (c1-3 / person
                                                                                         :mod (c1-13 / country
                                                                                                     :name c1-2
                                                                                                     :op1 "United"
                                                                                                     :op2 "States"))))))
                      :op2 (c1-1 / bully-01
                                 :ARG0 c1-8
                                 :mod (c1-6 / nutty))
                      :op3 (c1-9 / kick-out-05
                                 :ARG0 c1-8
                                 :ARG1 c1-3))
       :time (c1-0 / from
                   :op1 (c1-4 / start-01)))

# ::snt simply amazing; how on earth with such a busy schedule she has time to have sex at all? Putting on makeup, lunching in restaurants, failing as a singer, giving instructions to nanny, shopping all day, beauty treatments, plastic surgeries. Kim is such a miracle mum
# ::tokens ["simply", "amazing", ";", "how", "on", "earth", "with", "such", "a", "busy", "schedule", "she", "has", "time", "to", "have", "sex", "at", "all", "?", "Putting", "on", "makeup", ",", "lunching", "in", "restaurants", ",", "failing", "as", "a", "singer", ",", "giving", "instructions", "to", "nanny", ",", "shopping", "all", "day", ",", "beauty", "treatments", ",", "plastic", "surgeries", ".", "Kim", "is", "such", "a", "miracle", "mum"]
# ::lemmas ["simply", "amazing", ";", "how", "on", "earth", "with", "such", "a", "busy", "schedule", "she", "have", "time", "to", "have", "sex", "at", "all", "?", "put", "on", "makeup", ",", "lunch", "in", "restaurant", ",", "fail", "as", "a", "singer", ",", "give", "instruction", "to", "nanny", ",", "shop", "all", "day", ",", "beauty", "treatment", ",", "plastic", "surgery", ".", "Kim", "be", "such", "a", "miracle", "mum"]
(c2-19 / multi-sentence
       :snt1 (c2-14 / amaze-01
                    :ARG0 (c2-9 / have-03
                                :ARG0 (c2-33 / person
                                             :name (c2-30 / name
                                                          :op1 "Kim"))
                                :ARG1 (c2-13 / time
                                             :mod (c2-12 / at-all)
                                             :purpose (c2-0 / sex-01
                                                            :ARG0 c2-33))
                                :ARG1-of (c2-26 / cause-01
                                                :ARG0 (c2-7 / schedule
                                                            :ARG1-of (c2-17 / busy-02
                                                                            :degree (c2-6 / such))
                                                            :poss c2-33)))
                    :mod (c2-31 / simple))
       :snt2 (c2-11 / and
                    :op1 (c2-20 / put-on-08
                                :ARG0 (c2-1 / she)
                                :ARG1 (c2-10 / makeup))
                    :op2 (c2-3 / lunch-01
                               :ARG0 c2-1
                               :location (c2-32 / restaurant))
                    :op3 (c2-29 / fail-01
                                :ARG1 c2-1
                                :ARG2 (c2-5 / person
                                            :ARG0-of (c2-18 / sing-01)))
                    :op4 (c2-15 / give-01
                                :ARG0 c2-1
                                :ARG1 (c2-35 / instruct-01
                                             :ARG0 c2-1
                                             :ARG1 (c2-24 / nanny)))
                    :op5 (c2-23 / shop-01
                                :ARG0 c2-1
                                :duration (c2-36 / day
                                                 :mod (c2-21 / all)))
                    :op6 (c2-27 / treat-03
                                :ARG1 c2-1
                                :ARG2 (c2-2 / beautiful-02))
                    :op7 (c2-8 / surgery-01
                               :ARG1 c2-1
                               :ARG2 (c2-4 / plastic)))
       :snt3 (c2-16 / person
                    :ARG0-of (c2-34 / have-rel-role-91
                                    :ARG2 (c2-28 / mum))
                    :mod (c2-25 / miracle
                                :degree (c2-22 / such))
                    :domain c2-33))

# ::snt here is a name i would suggest jordan or Nathan!
# ::tokens ["here", "is", "a", "name", "i", "would", "suggest", "jordan", "or", "Nathan", "!"]
# ::lemmas ["here", "be", "a", "name", "i", "would", "suggest", "jordan", "or", "Nathan", "!"]
(c4-3 / suggest-01
      :ARG0 (c4-8 / i)
      :ARG1 (c4-1 / name
                  :location (c4-4 / here)
                  :domain (c4-0 / or
                                :op1 (c4-5 / person
                                           :name (c4-6 / name
                                                       :op1 "Jordan"))
                                :op2 (c4-2 / person
                                           :name (c4-7 / name
                                                       :op1 "Nathan")))))

# ::snt they waiting for the paparazzi to come up with something :-/
# ::tokens ["they", "waiting", "for", "the", "paparazzi", "to", "come", "up", "with", "something", ":-/"]
# ::lemmas ["they", "wait", "for", "the", "paparazzi", "to", "come", "up", "with", "something", ":-/"]
(c5-2 / wait-01
      :ARG1 (c5-4 / they)
      :ARG2 (c5-3 / come-up-11
                  :ARG0 (c5-1 / paparazzi)
                  :ARG1 (c5-0 / something)))

# ::snt name him Negus
# ::tokens ["name", "him", "Negus"]
# ::lemmas ["name", "he", "Negus"]
(c6-2 / name-01
      :ARG1 (c6-1 / he)
      :ARG2 (c6-0 / person
                  :name (c6-3 / name
                              :op1 "Negus")))

# ::snt go with east west or south west. How fucking difficult is that!
# ::tokens ["go", "with", "east", "west", "or", "south", "west", ".", "How", "fucking", "difficult", "is", "that", "!"]
# ::lemmas ["go", "with", "east", "west", "or", "south", "west", ".", "how", "fucking", "difficult", "be", "that", "!"]
(c7-3 / multi-sentence
      :snt1 (c7-10 / go-06
                   :ARG0 (c7-2 / you)
                   :ARG2 (c7-0 / or
                               :op1 (c7-6 / east
                                          :part-of (c7-8 / west))
                               :op2 (c7-7 / west
                                          :part-of (c7-4 / south)))
                   :mode imperative)
      :snt2 (c7-11 / difficult
                   :domain (c7-9 / that)
                   :degree (c7-5 / amr-unknown)
                   :mod (c7-1 / fucking)))

# ::snt just call it dirty south
# ::tokens ["just", "call", "it", "dirty", "south"]
# ::lemmas ["just", "call", "it", "dirty", "south"]
(c8-2 / call-01
      :ARG0 (c8-0 / you)
      :ARG1 (c8-4 / it)
      :ARG2 (c8-6 / country-region
                  :name (c8-1 / name
                              :op1 "South")
                  :ARG1-of (c8-5 / dirty-02))
      :mod (c8-3 / just)
      :mode imperative)

# ::snt how about a normal fuckin name yous ain't nothing special
# ::tokens ["how", "about", "a", "normal", "fuckin", "name", "yous", "ai", "n't", "nothing", "special"]
# ::lemmas ["how", "about", "a", "normal", "fuckin", "name", "yous", "ai", "not", "nothing", "special"]
(c9-3 / special-02
      :ARG1 (c9-2 / nothing
                  :ARG2-of (c9-4 / name-01
                                 :ARG1 (c9-1 / you)
                                 :mod (c9-0 / fucking
                                            :mode expressive)
                                 :ARG1-of (c9-5 / normal-02)))
      :topic (c9-6 / amr-unknown)
      :polarity -)

# ::snt obviously you care enough to comment on it lol
# ::tokens ["obviously", "you", "care", "enough", "to", "comment", "on", "it", "lol"]
# ::lemmas ["obviously", "you", "care", "enough", "to", "comment", "on", "it", "lol"]
(c10-0 / obvious-01
       :ARG1 (c10-6 / care-01
                    :ARG0 (c10-1 / you)
                    :ARG1-of (c10-4 / have-quant-91
                                    :ARG3 (c10-3 / enough)
                                    :ARG6 (c10-9 / comment-01
                                                 :ARG0 c10-1
                                                 :ARG3 (c10-7 / it))))
       :ARG2-of (c10-5 / laugh-01
                       :ARG0 (c10-2 / i)
                       :manner (c10-8 / loud)
                       :mode expressive))

# ::snt seriously they had like months to prepare they're just making us wait
# ::tokens ["seriously", "they", "had", "like", "months", "to", "prepare", "they", "'re", "just", "making", "us", "wait"]
# ::lemmas ["seriously", "they", "have", "like", "months", "to", "prepare", "they", "be", "just", "make", "we", "wait"]
(c11-2 / and
       :op1 (c11-3 / have-03
                   :ARG0 (c11-9 / they)
                   :ARG1 (c11-4 / like
                                :op1 (c11-0 / multiple
                                            :op1 (c11-11 / temporal-quantity
                                                         :unit (c11-5 / month)
                                                         :quant 1)))
                   :ARG2-of (c11-1 / serious-01))
       :op2 (c11-10 / make-02
                    :ARG0 c11-9
                    :ARG1 (c11-7 / wait-01
                                 :ARG1 (c11-6 / we))
                    :mod (c11-8 / just)))

# ::snt Just name him Leroy.....
# ::tokens ["Just", "name", "him", "Leroy", "....."]
# ::lemmas ["just", "name", "he", "Leroy", "....."]
(c12-1 / name-01
       :ARG0 (c12-0 / you)
       :ARG1 (c12-2 / he)
       :ARG2 (c12-3 / person
                    :name (c12-4 / name
                                 :op1 "Leroy"))
       :mod (c12-5 / just)
       :mode imperative)

# ::snt what about South West!
# ::tokens ["what", "about", "South", "West", "!"]
# ::lemmas ["what", "about", "South", "West", "!"]
(c13-2 / amr-unknown
       :topic (c13-0 / country-region
                     :name (c13-1 / name
                                  :op1 "South"
                                  :op2 "West")))

# ::snt YES!!!
# ::tokens ["YES", "!", "!", "!"]
# ::lemmas ["yes", "!", "!", "!"]
(c14-0 / yes)

# ::snt in return I'll give you a fire verse and let you take all credit (-
# ::tokens ["in", "return", "I", "'ll", "give", "you", "a", "fire", "verse", "and", "let", "you", "take", "all", "credit", "(", "-"]
# ::lemmas ["in", "return", "i", "'ll", "give", "you", "a", "fire", "verse", "and", "let", "you", "take", "all", "credit", "(", "-"]
(c15-2 / return-05
       :ARG0 (c15-7 / i)
       :ARG1 (c15-8 / and
                    :op1 (c15-9 / give-01
                                :ARG0 c15-7
                                :ARG1 (c15-3 / verse
                                             :mod (c15-0 / fire))
                                :ARG2 (c15-1 / you))
                    :op2 (c15-4 / let-01
                                :ARG0 c15-7
                                :ARG1 (c15-6 / take-01
                                             :ARG0 c15-1
                                             :ARG1 (c15-5 / credit-01
                                                          :ARG0 c15-1
                                                          :mod (c15-10 / all))))))

# ::snt :that's the name of their st child!
# ::tokens [":", "that", "'s", "the", "name", "of", "their", "st", "child", "!"]
# ::lemmas [":", "that", "be", "the", "name", "of", "their", "st", "child", "!"]
(c16-0 / name-01
       :ARG1 (c16-3 / person
                    :ARG0-of (c16-2 / have-rel-role-91
                                    :ARG1 (c16-5 / they)
                                    :ARG2 (c16-4 / child))
                    :mod (c16-1 / st))
       :ARG2 (c16-6 / that))

# ::snt what about Northwest
# ::tokens ["what", "about", "Northwest"]
# ::lemmas ["what", "about", "Northwest"]
(c17-2 / amr-unknown
       :topic (c17-0 / country-region
                     :name (c17-1 / name
                                  :op1 "Northwest")))

# ::snt Just be John.. John West, as in the canned fish brand!
# ::tokens ["Just", "be", "John", "..", "John", "West", ",", "as", "in", "the", "canned", "fish", "brand", "!"]
# ::lemmas ["just", "be", "John", "..", "John", "West", ",", "as", "in", "the", "canned", "fish", "brand", "!"]
(c18-6 / person
       :name (c18-3 / name
                    :op1 "John")
       :mod (c18-8 / just)
       :ARG1-of (c18-2 / mean-01
                       :ARG2 (c18-4 / person
                                    :name (c18-5 / name
                                                 :op1 "John"
                                                 :op2 "West")
                                    :ARG1-of (c18-1 / brand-01
                                                    :ARG2 (c18-0 / fish
                                                                 :ARG1-of (c18-7 / can-01)))))
       :mode imperative)

# ::snt baby jesus
# ::tokens ["baby", "jesus"]
# ::lemmas ["baby", "jesus"]
(c19-3 / person
       :name (c19-0 / name
                    :op1 "Jesus")
       :ARG0-of (c19-2 / have-rel-role-91
                       :ARG2 (c19-1 / baby)))

# ::snt oh
# ::tokens ["oh"]
# ::lemmas ["oh"]
(c20-0 / oh
       :mode expressive)

# ::snt hugs for you. My real surname is Renard. ie Fox
# ::tokens ["hugs", "for", "you", ".", "My", "real", "surname", "is", "Renard", ".", "ie", "Fox"]
# ::lemmas ["hug", "for", "you", ".", "my", "real", "surname", "be", "Renard", ".", "ie", "Fox"]
(c21-2 / multi-sentence
       :snt1 (c21-6 / hug-01
                    :ARG1 (c21-1 / you))
       :snt2 (c21-4 / surname
                    :poss (c21-10 / i)
                    :ARG1-of (c21-5 / real-04)
                    :domain (c21-7 / person
                                   :name (c21-3 / name
                                                :op1 "Renard")
                                   :ARG1-of (c21-8 / mean-01
                                                   :ARG2 (c21-0 / broadcast-program
                                                                :name (c21-9 / name
                                                                             :op1 "Fox"))))))

# ::snt "Wild, wild"
# ::tokens ["\"", "Wild", ",", "wild", "\""]
# ::lemmas ["\"", "wild", ",", "wild", "\""]
(c22-0 / wild)

# ::snt thought kourtney had a baby boy call reign not daughter??
# ::tokens ["thought", "kourtney", "had", "a", "baby", "boy", "call", "reign", "not", "daughter", "?", "?"]
# ::lemmas ["think", "kourtney", "have", "a", "baby", "boy", "call", "reign", "not", "daughter", "?", "?"]
(c23-10 / think-01
        :ARG1 (c23-8 / contrast-01
                     :ARG1 (c23-5 / have-03
                                  :ARG0 (c23-6 / person
                                               :name (c23-1 / name
                                                            :op1 "Kourtney"))
                                  :ARG1 (c23-0 / boy
                                               :mod (c23-7 / baby)))
                     :ARG2 (c23-9 / have-03
                                  :ARG0 c23-6
                                  :ARG1 (c23-2 / person
                                               :ARG0-of (c23-4 / have-rel-role-91
                                                               :ARG1 c23-6
                                                               :ARG2 (c23-11 / daughter)))
                                  :polarity -))
        :polarity (c23-3 / amr-unknown))

# ::snt how about South? just a thought!
# ::tokens ["how", "about", "South", "?", "just", "a", "thought", "!"]
# ::lemmas ["how", "about", "South", "?", "just", "a", "thought", "!"]
(c24-0 / multi-sentence
       :snt1 (c24-2 / amr-unknown
                    :topic (c24-1 / south))
       :snt2 (c24-4 / think-01
                    :mod (c24-3 / just)))

# ::snt beautiful lady
# ::tokens ["beautiful", "lady"]
# ::lemmas ["beautiful", "lady"]
(c26-1 / lady
       :ARG1-of (c26-0 / beautiful-02))

# ::snt PLEASE he always seems tense and uptight. Lighten up, smile and enjoy a simpler life perhaps.
# ::tokens ["PLEASE", "he", "always", "seems", "tense", "and", "uptight", ".", "Lighten", "up", ",", "smile", "and", "enjoy", "a", "simpler", "life", "perhaps", "."]
# ::lemmas ["please", "he", "always", "seem", "tense", "and", "uptight", ".", "lighten", "up", ",", "smile", "and", "enjoy", "a", "simple", "life", "perhaps", "."]
(c27-13 / multi-sentence
        :snt1 (c27-17 / please-01
                      :ARG0 (c27-4 / you)
                      :ARG1 (c27-0 / seem-01
                                   :ARG1 (c27-10 / and
                                                 :op1 (c27-9 / tense-03
                                                             :ARG1 (c27-5 / he))
                                                 :op2 (c27-15 / uptight-05
                                                              :ARG1 c27-5))
                                   :time (c27-8 / always))
                      :mode imperative
                      :polite +)
        :snt2 (c27-7 / and
                     :op1 (c27-1 / lighten-up-09
                                 :ARG0 (c27-11 / you)
                                 :mode imperative)
                     :op2 (c27-3 / smile-01
                                 :ARG0 c27-11
                                 :mode imperative)
                     :op3 (c27-16 / enjoy-01
                                  :ARG0 c27-11
                                  :ARG1 (c27-12 / life
                                                :ARG1-of (c27-2 / simple-02
                                                                :ARG2-of (c27-18 / have-degree-91
                                                                                 :ARG1 c27-12
                                                                                 :ARG3 (c27-6 / more)))
                                                :ARG1-of (c27-14 / possible-01))
                                  :mode imperative)))

# ::snt O wow! I must have got distracted by the welfare of our country and missed that
# ::tokens ["O", "wow", "!", "I", "must", "have", "got", "distracted", "by", "the", "welfare", "of", "our", "country", "and", "missed", "that"]
# ::lemmas ["o", "wow", "!", "i", "must", "have", "got", "distract", "by", "the", "welfare", "of", "our", "country", "and", "miss", "that"]
(c28-0 / multi-sentence
       :snt1 (c28-4 / wow
                    :mode expressive)
       :snt2 (c28-7 / infer-01
                    :ARG1 (c28-8 / and
                                 :op1 (c28-9 / distract-01
                                             :ARG0 (c28-3 / welfare
                                                          :poss (c28-5 / country
                                                                       :poss (c28-10 / we)))
                                             :ARG1 (c28-1 / i))
                                 :op2 (c28-2 / miss-02
                                             :ARG0 c28-1
                                             :ARG1 (c28-6 / that)))))
