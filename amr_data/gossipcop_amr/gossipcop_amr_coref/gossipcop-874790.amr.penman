# ::snt LMAOO!
# ::tokens ["LMAOO", "!"]
# ::lemmas ["LMAOO", "!"]
(c1-1 / laugh-01
      :ARG1 (c1-3 / ass
                  :part-of (c1-2 / i))
      :mod (c1-0 / off)
      :mode expressive)

# ::snt Love how you politely said "nahh"
# ::tokens ["Love", "how", "you", "politely", "said", "\"", "nahh", "\""]
# ::lemmas ["Love", "how", "you", "politely", "say", "\"", "nahh", "\""]
(c2-3 / love-01
      :ARG1 (c2-2 / say-01
                  :ARG0 (c2-0 / you)
                  :ARG1 (c2-1 / nah)
                  :manner (c2-4 / polite-01)))

# ::snt Yeah? Well she got one. That's for sure
# ::tokens ["Yeah", "?", "Well", "she", "got", "one", ".", "That", "'s", "for", "sure"]
# ::lemmas ["yeah", "?", "well", "she", "get", "one", ".", "that", "be", "for", "sure"]
(c3-3 / multi-sentence
      :snt1 (c3-2 / yeah
                  :polarity (c3-7 / amr-unknown))
      :snt2 (c3-8 / get-01
                  :ARG0 (c3-4 / she)
                  :ARG1 (c3-0 / one)
                  :mod (c3-5 / well))
      :snt3 (c3-1 / sure-02
                  :ARG1 (c3-6 / that)))

# ::snt can you add harry on there
# ::tokens ["can", "you", "add", "harry", "on", "there"]
# ::lemmas ["can", "you", "add", "harry", "on", "there"]
(c5-3 / possible-01
      :ARG1 (c5-1 / add-02
                  :ARG0 (c5-0 / you)
                  :ARG1 (c5-2 / harry)
                  :location (c5-5 / there))
      :polarity (c5-4 / amr-unknown))

# ::snt chance to win apple watch
# ::tokens ["chance", "to", "win", "apple", "watch"]
# ::lemmas ["chance", "to", "win", "apple", "watch"]
(c6-1 / chance-02
      :ARG1 (c6-3 / win-01
                  :ARG1 (c6-0 / watch-01
                              :ARG1 (c6-2 / apple))))

# ::snt Once again, STOP WATCHING , GET IGNORANT DYLAN DREYER AND SHEINELLE TO RETIRE, BOTCOTT RETWEET
# ::tokens ["Once", "again", ",", "STOP", "WATCHING", ",", "GET", "IGNORANT", "DYLAN", "DREYER", "AND", "SHEINELLE", "TO", "RETIRE", ",", "BOTCOTT", "RETWEET"]
# ::lemmas ["once", "again", ",", "stop", "watch", ",", "get", "IGNORANT", "DYLAN", "DREYER", "and", "SHEINELLE", "to", "RETIRE", ",", "BOTCOTT", "RETWEET"]
(c7-8 / and
      :op1 (c7-1 / stop-01
                 :ARG0 (c7-5 / you)
                 :ARG1 (c7-17 / watch-01
                              :ARG0 c7-5)
                 :mode imperative)
      :op2 (c7-9 / get-05
                 :ARG0 c7-5
                 :ARG1 (c7-7 / and
                             :op1 (c7-15 / person
                                         :name (c7-13 / name
                                                      :op1 "DyLAN"
                                                      :op2 "Delaney")
                                         :ARG0-of (c7-18 / intimidate-01))
                             :op2 (c7-10 / person
                                         :name (c7-11 / name
                                                      :op1 "Sheinel")
                                         :ARG0-of (c7-14 / retire-01)))
                 :op3-of c7-8
                 :mode imperative)
      :ARG0 c7-5
      :ARG1 (c7-3 / ready-02
                  :ARG1 c7-5
                  :ARG2 (c7-12 / retire-01
                               :ARG0 c7-5))
      :op4 (c7-0 / return-01
                 :ARG1 (c7-2 / person
                             :name (c7-16 / name
                                          :op1 "BOTCOTT"))
                 :mode imperative)
      :mod (c7-6 / again
                 :mod (c7-4 / once))
      :mode imperative)

# ::snt probs
# ::tokens ["probs"]
# ::lemmas ["prob"]
(c8-0 / prove-01)

# ::snt need to make a comeback to Yum Center. Where can I win some Ed Sheeran tickets for September th?
# ::tokens ["need", "to", "make", "a", "comeback", "to", "Yum", "Center", ".", "Where", "can", "I", "win", "some", "Ed", "Sheeran", "tickets", "for", "September", "th", "?"]
# ::lemmas ["need", "to", "make", "a", "comeback", "to", "Yum", "Center", ".", "where", "can", "i", "win", "some", "Ed", "Sheeran", "ticket", "for", "September", "th", "?"]
(c9-2 / multi-sentence
      :snt1 (c9-1 / need-01
                  :ARG0 (c9-12 / i)
                  :ARG1 (c9-10 / comeback-01
                               :ARG0 c9-12
                               :ARG2 (c9-3 / sports-facility
                                           :name (c9-7 / name
                                                       :op1 "Yum"
                                                       :op2 "Center"))))
      :snt2 (c9-8 / possible-01
                  :ARG1 (c9-11 / win-01
                               :ARG0 (c9-4 / i)
                               :ARG1 (c9-13 / ticket
                                            :poss (c9-5 / person
                                                        :name (c9-9 / name
                                                                    :op1 "Ed"
                                                                    :op2 "Sheeran"))
                                            :quant (c9-0 / some))
                               :ARG4 (c9-14 / date-entity
                                            :month 9
                                            :day 14)
                               :location (c9-6 / amr-unknown))))

# ::snt save One Sweet Day
# ::tokens ["save", "One", "Sweet", "Day"]
# ::lemmas ["save", "One", "Sweet", "Day"]
(c11-3 / save-02
       :ARG0 (c11-2 / you)
       :ARG1 (c11-0 / day
                    :mod (c11-1 / sweet)
                    :quant 1)
       :mode imperative)

# ::snt CODY DE PAYLASANA
# ::tokens ["CODY", "DE", "PAYLASANA"]
# ::lemmas ["CODY", "DE", "PAYLASANA"]
(c12-0 / come-01
       :ARG1 (c12-1 / everybody)
       :ARG4 (c12-3 / country
                    :name (c12-2 / name
                                 :op1 "Palestine")))

# ::snt W H O C A R E S ? ?
# ::tokens ["W", "H", "O", "C", "A", "R", "E", "S", "?", "?"]
# ::lemmas ["W", "H", "O", "C", "A", "R", "E", "S", "?", "?"]
(c13-1 / amr-unknown
       :name (c13-0 / name
                    :op1 "W"
                    :op2 "O"
                    :op3 "C"
                    :op4 "E"
                    :op5 "S"))

# ::snt Good morning dear I need help from you people can't you do something for my disability daycare I need pls help for my kids with food Pampers
# ::tokens ["Good", "morning", "dear", "I", "need", "help", "from", "you", "people", "ca", "n't", "you", "do", "something", "for", "my", "disability", "daycare", "I", "need", "pls", "help", "for", "my", "kids", "with", "food", "Pampers"]
# ::lemmas ["good", "morning", "dear", "i", "need", "help", "from", "you", "people", "can", "not", "you", "do", "something", "for", "my", "disability", "daycare", "i", "need", "pls", "help", "for", "my", "kid", "with", "food", "Pampers"]
(c14-11 / multi-sentence
        :snt1 (c14-0 / say-01
                     :ARG0 (c14-24 / i)
                     :ARG1 (c14-20 / need-01
                                   :ARG0 c14-24
                                   :ARG1 (c14-7 / help-01
                                                :ARG0 (c14-22 / person)
                                                :ARG1 c14-24))
                     :ARG2 (c14-25 / dear)
                     :time (c14-16 / date-entity
                                   :dayperiod (c14-8 / morning)
                                   :ARG1-of (c14-10 / good-02)))
        :snt2 (c14-12 / possible-01
                      :ARG1 (c14-14 / do-02
                                    :ARG0 (c14-4 / you)
                                    :ARG1 (c14-3 / something)
                                    :ARG2 (c14-15 / care-03
                                                  :ARG1 c14-24
                                                  :mod (c14-21 / disability)
                                                  :mod (c14-17 / day)))
                      :polarity -)
        :snt3 (c14-13 / need-01
                      :ARG0 (c14-5 / i)
                      :ARG1 (c14-23 / help-01
                                    :ARG0 (c14-2 / person)
                                    :ARG1 (c14-1 / person
                                                 :ARG0-of (c14-6 / have-rel-role-91
                                                                 :ARG1 c14-5
                                                                 :ARG2 (c14-9 / kid))
                                                 :ARG0-of (c14-18 / have-03
                                                                  :ARG1 (c14-19 / food)))
                                    :ARG2 c14-5)))

# ::snt My Taylor I can't wait to hear it
# ::tokens ["My", "Taylor", "I", "ca", "n't", "wait", "to", "hear", "it"]
# ::lemmas ["my", "Taylor", "i", "can", "not", "wait", "to", "hear", "it"]
(c15-1 / say-01
       :ARG0 (c15-6 / i)
       :ARG1 (c15-5 / wait-01
                    :ARG1 c15-6
                    :ARG2 (c15-3 / hear-01
                                 :ARG0 c15-6
                                 :ARG1 (c15-2 / it)))
       :ARG2 (c15-4 / person
                    :name (c15-0 / name
                                 :op1 "Taylor")
                    :poss c15-6))

# ::snt just in time with the court decision to give her publicity
# ::tokens ["just", "in", "time", "with", "the", "court", "decision", "to", "give", "her", "publicity"]
# ::lemmas ["just", "in", "time", "with", "the", "court", "decision", "to", "give", "her", "publicity"]
(c16-4 / in-time
       :op1 (c16-6 / decide-01
                   :ARG0 (c16-2 / court)
                   :ARG1 (c16-5 / give-01
                                :ARG0 c16-2
                                :ARG1 (c16-1 / publicity)
                                :ARG2 (c16-0 / she)))
       :mod (c16-3 / just))

# ::snt Thins see you soon
# ::tokens ["Thins", "see", "you", "soon"]
# ::lemmas ["thin", "see", "you", "soon"]
(c17-3 / see-01
       :ARG0 (c17-2 / i)
       :ARG1 (c17-1 / you)
       :time (c17-0 / soon))

# ::snt Hello beautiful woman how was your night dear
# ::tokens ["Hello", "beautiful", "woman", "how", "was", "your", "night", "dear"]
# ::lemmas ["hello", "beautiful", "woman", "how", "be", "your", "night", "dear"]
(c18-2 / say-01
       :ARG1 (c18-3 / have-manner-91
                    :ARG1 (c18-1 / night
                                 :poss (c18-6 / dear))
                    :ARG2 (c18-5 / amr-unknown))
       :ARG2 (c18-4 / woman
                    :ARG1-of (c18-0 / beautiful-02)))

# ::snt I love taylor swift Anna kay what's your favorite music
# ::tokens ["I", "love", "taylor", "swift", "Anna", "kay", "what", "'s", "your", "favorite", "music"]
# ::lemmas ["i", "love", "taylor", "swift", "Anna", "kay", "what", "be", "your", "favorite", "music"]
(c20-5 / love-01
       :ARG0 (c20-6 / i)
       :ARG1 (c20-4 / person
                    :name (c20-3 / name
                                 :op1 "Taylor"
                                 :op2 " swift"
                                 :op3 "Anna"
                                 :op4 "Kay"))
       :topic (c20-2 / music
                     :ARG1-of (c20-0 / favor-01
                                     :ARG0 (c20-1 / you))))

# ::snt Let her stfu
# ::tokens ["Let", "her", "stfu"]
# ::lemmas ["let", "she", "stfu"]
(c21-2 / let-01
       :ARG0 (c21-1 / you)
       :ARG1 (c21-0 / fuck-01
                    :ARG0 (c21-3 / she))
       :mode imperative)

# ::snt Stop the press
# ::tokens ["Stop", "the", "press"]
# ::lemmas ["stop", "the", "press"]
(c23-2 / stop-01
       :ARG0 (c23-0 / you)
       :ARG1 (c23-1 / press)
       :mode imperative)

# ::snt Go to sleep eNCA
# ::tokens ["Go", "to", "sleep", "eNCA"]
# ::lemmas ["go", "to", "sleep", "eNCA"]
(c25-2 / say-01
       :ARG0 (c25-4 / i)
       :ARG1 (c25-5 / go-05
                    :ARG0 (c25-3 / person
                                 :name (c25-1 / name
                                              :op1 "ENCA"))
                    :ARG1 (c25-0 / sleep-01
                                 :ARG0 c25-3)
                    :mode imperative)
       :ARG2 c25-3)

# ::snt Impressive. Truly.
# ::tokens ["Impressive", ".", "Truly", "."]
# ::lemmas ["impressive", ".", "Truly", "."]
(c26-0 / multi-sentence
       :snt1 (c26-1 / impress-01)
       :snt2 (c26-2 / true-01))

# ::snt I FUCKING CALLED IT OMFG
# ::tokens ["I", "FUCKING", "CALLED", "IT", "OMFG"]
# ::lemmas ["i", "fucking", "call", "it", "OMFG"]
(c27-3 / call-01
       :ARG0 (c27-4 / i)
       :ARG1 (c27-2 / it)
       :ARG2 (c27-1 / OMFG)
       :mod (c27-0 / fucking
                   :mode expressive))

# ::snt kep pushing realy hard trough facebok and twiter for this dudes stop fucking with us fuk yeh helll yeh
# ::tokens ["kep", "pushing", "realy", "hard", "trough", "facebok", "and", "twiter", "for", "this", "dudes", "stop", "fucking", "with", "us", "fuk", "yeh", "helll", "yeh"]
# ::lemmas ["kep", "push", "realy", "hard", "trough", "facebok", "and", "twiter", "for", "this", "dude", "stop", "fuck", "with", "we", "fuk", "yeh", "helll", "yeh"]
(c29-3 / stop-01
       :ARG0 (c29-2 / you
                    :ARG0-of (c29-6 / push-01
                                    :ARG2 (c29-13 / and
                                                  :op1 (c29-0 / facebok)
                                                  :op2 (c29-11 / twiter))
                                    :ARG1-of (c29-5 / hard-04
                                                    :ARG1-of (c29-4 / real-04)))
                    :mod (c29-7 / fuck-01
                                :ARG1 (c29-9 / we)
                                :ARG0 c29-2))
       :ARG1 (c29-8 / fuck-01
                    :ARG0 c29-2
                    :ARG1 c29-9
                    :mod (c29-10 / hell
                                 :mode expressive))
       :ARG1-of (c29-1 / say-01
                       :ARG0 (c29-12 / i)
                       :ARG2 c29-2)
       :mode imperative)

# ::snt great white people like us helll yeah fuk yeh and our great white flag helll yeh fuk yeh.
# ::tokens ["great", "white", "people", "like", "us", "helll", "yeah", "fuk", "yeh", "and", "our", "great", "white", "flag", "helll", "yeh", "fuk", "yeh", "."]
# ::lemmas ["great", "white", "people", "like", "we", "helll", "yeah", "fuk", "yeh", "and", "our", "great", "white", "flag", "helll", "yeh", "fuk", "yeh", "."]
(c30-8 / and
       :op1 (c30-0 / fuck-01
                   :ARG1 (c30-2 / person
                                :ARG1-of (c30-6 / white-02)
                                :mod (c30-9 / great)
                                :example (c30-4 / we))
                   :mod (c30-1 / yeah
                               :mode expressive)
                   :mode expressive)
       :op2 (c30-3 / fuck-01
                   :ARG1 (c30-5 / flag
                                :poss c30-4
                                :mod c30-9
                                :ARG1-of c30-6)
                   :mode expressive)
       :mod (c30-7 / fuck-01
                   :mode expressive))

# ::snt My daughters called it. Way to go girls!
# ::tokens ["My", "daughters", "called", "it", ".", "Way", "to", "go", "girls", "!"]
# ::lemmas ["my", "daughter", "call", "it", ".", "way", "to", "go", "girl", "!"]
(c31-0 / multi-sentence
       :snt1 (c31-4 / call-01
                    :ARG0 (c31-3 / person
                                 :ARG0-of (c31-2 / have-rel-role-91
                                                 :ARG1 (c31-6 / i)
                                                 :ARG2 (c31-9 / daughter)))
                    :ARG1 (c31-1 / it))
       :snt2 (c31-5 / way
                    :manner-of (c31-8 / go-06
                                      :ARG0 (c31-7 / girl))))

# ::snt Is this site real? it says the single drops in minutes.
# ::tokens ["Is", "this", "site", "real", "?", "it", "says", "the", "single", "drops", "in", "minutes", "."]
# ::lemmas ["be", "this", "site", "real", "?", "it", "say", "the", "single", "drop", "in", "minutes", "."]
(c32-1 / multi-sentence
       :snt1 (c32-3 / real-04
                    :polarity (c32-4 / amr-unknown)
                    :ARG1 (c32-2 / site
                                 :mod (c32-7 / this)))
       :snt2 (c32-0 / say-01
                    :ARG0 (c32-6 / it)
                    :ARG1 (c32-8 / drop-01
                                 :ARG1-of (c32-11 / single-02)
                                 :duration (c32-5 / multiple
                                                  :op1 (c32-10 / temporal-quantity
                                                               :unit (c32-9 / minute)
                                                               :quant 1)))))

# ::snt Yes devastated.
# ::tokens ["Yes", "devastated", "."]
# ::lemmas ["yes", "devastate", "."]
(c33-0 / devastate-01)

# ::snt Another White Supremacist emboldened by Trump.
# ::tokens ["Another", "White", "Supremacist", "emboldened", "by", "Trump", "."]
# ::lemmas ["Another", "White", "Supremacist", "embolden", "by", "Trump", "."]
(c34-2 / embolden-01
       :ARG0 (c34-3 / person
                    :name (c34-0 / name
                                 :op1 "Trump")
                    :ARG1-of c34-2)
       :mod (c34-5 / another)
       :mod (c34-1 / supremacy
                   :mod c34-3
                   :ARG1-of (c34-4 / white-02)))

# ::snt I do
# ::tokens ["I", "do"]
# ::lemmas ["i", "do"]
(c35-0 / do-02
       :ARG0 (c35-1 / i))

# ::snt I've seen Taylor Swift perform live before she was even a thing in the mid 's. Can't escape her since. She's always had shitty music imo
# ::tokens ["I", "'ve", "seen", "Taylor", "Swift", "perform", "live", "before", "she", "was", "even", "a", "thing", "in", "the", "mid", "'", "s.", "Ca", "n't", "escape", "her", "since", ".", "She", "'s", "always", "had", "shitty", "music", "imo"]
# ::lemmas ["i", "'ve", "see", "Taylor", "Swift", "perform", "live", "before", "she", "be", "even", "a", "thing", "in", "the", "mid", "'", "s.", "can", "not", "escape", "she", "since", ".", "she", "be", "always", "have", "shitty", "music", "imo"]
(c36-12 / multi-sentence
        :snt1 (c36-0 / see-01
                     :ARG0 (c36-19 / i)
                     :ARG1 (c36-18 / perform-01
                                   :ARG0 (c36-13 / person
                                                 :name (c36-15 / name
                                                               :op1 "Taylor"
                                                               :op2 "Swift"))
                                   :manner (c36-1 / live)
                                   :time (c36-11 / before
                                                 :op1 (c36-8 / thing
                                                             :domain c36-13
                                                             :mod (c36-17 / even)
                                                             :time (c36-6 / middle
                                                                          :op1 (c36-20 / date-entity
                                                                                       :decade 1980)))))
                     :snt2 (c36-2 / possible-01
                                  :ARG1 (c36-10 / escape-01
                                                :ARG0 c36-19
                                                :ARG1 c36-13
                                                :time (c36-4 / since))
                                  :polarity -)
                     :snt3 (c36-7 / have-03
                                  :ARG0 (c36-3 / she)
                                  :ARG1 (c36-14 / music
                                                :mod (c36-16 / shitty))
                                  :time (c36-9 / always)
                                  :ARG1-of (c36-5 / opine-01
                                                  :ARG0 c36-19))))

# ::snt U
# ::tokens ["U"]
# ::lemmas ["u"]
(c37-1 / person
       :name (c37-0 / name
                    :op1 "U"))

# ::snt And no one is also interested in ur comment gurl.
# ::tokens ["And", "no", "one", "is", "also", "interested", "in", "ur", "comment", "gurl", "."]
# ::lemmas ["and", "no", "one", "be", "also", "interested", "in", "ur", "comment", "gurl", "."]
(c38-6 / and
       :op2 (c38-5 / interest-01
                   :ARG1 (c38-1 / no-one)
                   :ARG2 (c38-3 / person
                                :name (c38-2 / name
                                             :op1 "Gurl")
                                :mod (c38-4 / comment-01
                                            :ARG0 (c38-0 / you)))
                   :mod (c38-7 / also)))

# ::snt Commenting with a GIF only shows how much u care. Thanks for the effort.
# ::tokens ["Commenting", "with", "a", "GIF", "only", "shows", "how", "much", "u", "care", ".", "Thanks", "for", "the", "effort", "."]
# ::lemmas ["comment", "with", "a", "GIF", "only", "show", "how", "much", "u", "care", ".", "thank", "for", "the", "effort", "."]
(c39-2 / multi-sentence
       :snt1 (c39-3 / show-01
                    :ARG0 (c39-5 / comment-01
                                 :instrument (c39-7 / thing
                                                    :ARG1-of (c39-8 / GIF-01)))
                    :ARG1 (c39-11 / thing
                                  :degree-of (c39-10 / care-01
                                                     :ARG0 (c39-1 / you)))
                    :mod (c39-0 / only))
       :snt2 (c39-6 / thank-01
                    :ARG1 (c39-9 / you)
                    :ARG2 (c39-4 / effort-01)))

# ::snt It's a free country so CNN can also post whatever they see as "news". If this ain't news for u then just gtfo.
# ::tokens ["It", "'s", "a", "free", "country", "so", "CNN", "can", "also", "post", "whatever", "they", "see", "as", "\"", "news", "\"", ".", "If", "this", "ai", "n't", "news", "for", "u", "then", "just", "gtfo", "."]
# ::lemmas ["it", "be", "a", "free", "country", "so", "CNN", "can", "also", "post", "whatever", "they", "see", "as", "\"", "news", "\"", ".", "if", "this", "be", "not", "news", "for", "u", "then", "just", "gtfo", "."]
(c40-2 / multi-sentence
       :snt1 (c40-0 / free-04
                    :ARG1 (c40-11 / country)
                    :ARG0-of (c40-17 / cause-01
                                     :ARG1 (c40-8 / possible-01
                                                  :ARG1 (c40-3 / post-01
                                                               :ARG0 (c40-16 / publication
                                                                             :name (c40-4 / name
                                                                                          :op1 "CNN"))
                                                               :ARG1 (c40-12 / whatever
                                                                             :ARG1-of (c40-5 / see-01
                                                                                             :ARG0 c40-16
                                                                                             :ARG2 (c40-7 / news)))
                                                               :mod (c40-6 / also)))))
       :snt2 (c40-9 / have-condition-91
                    :ARG1 c40-16
                    :name (c40-10 / name
                                  :op1 "GI")
                    :mod (c40-14 / just))
       :ARG2 (c40-13 / news
                     :beneficiary (c40-1 / you)
                     :domain (c40-15 / this)
                     :polarity -))

# ::snt Your comment actually shows that u care gurl.
# ::tokens ["Your", "comment", "actually", "shows", "that", "u", "care", "gurl", "."]
# ::lemmas ["your", "comment", "actually", "show", "that", "u", "care", "gurl", "."]
(c41-2 / show-01
       :ARG0 (c41-4 / comment-01
                    :ARG0 (c41-0 / you))
       :ARG1 (c41-6 / care-01
                    :ARG0 c41-0
                    :ARG1 (c41-3 / person
                                 :name (c41-1 / name
                                              :op1 "Gurl")))
       :ARG1-of (c41-5 / actual-02))

# ::snt U can call yourself overSHIT.
# ::tokens ["U", "can", "call", "yourself", "overSHIT", "."]
# ::lemmas ["u", "can", "call", "yourself", "overshit", "."]
(c42-3 / possible-01
       :ARG1 (c42-4 / call-01
                    :ARG0 (c42-1 / you
                                 :ARG1-of c42-4)
                    :ARG2 (c42-2 / shit
                                 :mod (c42-0 / over))))

# ::snt I don't have to like a females shitty music just because I'm a feminist.
# ::tokens ["I", "do", "n't", "have", "to", "like", "a", "females", "shitty", "music", "just", "because", "I", "'m", "a", "feminist", "."]
# ::lemmas ["i", "do", "not", "have", "to", "like", "a", "females", "shitty", "music", "just", "because", "i", "be", "a", "feminist", "."]
(c43-0 / obligate-01
       :ARG1 (c43-8 / i)
       :ARG2 (c43-4 / like-01
                    :ARG0 c43-8
                    :ARG1 (c43-2 / music
                                 :mod (c43-3 / shitty)
                                 :poss (c43-1 / female)))
       :ARG1-of (c43-6 / cause-01
                       :ARG0 (c43-5 / feminist
                                    :domain c43-8
                                    :mod (c43-7 / just)))
       :polarity -)

# ::snt I AM ABSOLUTELY READY FOR THIS
# ::tokens ["I", "AM", "ABSOLUTELY", "READY", "FOR", "THIS"]
# ::lemmas ["i", "be", "absolutely", "ready", "for", "this"]
(c44-0 / read-01
       :ARG0 (c44-2 / i)
       :ARG1 (c44-3 / this)
       :ARG1-of (c44-1 / complete-02))

# ::snt Reading Environmental Governmentality: An Introduction
# ::tokens ["Reading", "Environmental", "Governmentality", ":", "An", "Introduction"]
# ::lemmas ["read", "Environmental", "Governmentality", ":", "an", "introduction"]
(c45-0 / read-01
       :ARG1 (c45-2 / publication
                    :name (c45-1 / name
                                 :op1 "Environmental"
                                 :op2 "Governmentality:"
                                 :op3 "An"
                                 :op4 " Introduction")))

# ::snt Anthony?
# ::tokens ["Anthony", "?"]
# ::lemmas ["Anthony", "?"]
(c46-1 / person
       :name (c46-0 / name
                    :op1 "Anthony")
       :polarity (c46-2 / amr-unknown))

# ::snt "Slithering"
# ::tokens ["\"", "Slithering", "\""]
# ::lemmas ["\"", "Slithering", "\""]
(c47-0 / slither-01)

# ::snt Who cares!
# ::tokens ["Who", "cares", "!"]
# ::lemmas ["who", "care", "!"]
(c48-0 / care-01
       :ARG0 (c48-1 / amr-unknown)
       :mode expressive)

# ::snt Sounds mediocre already
# ::tokens ["Sounds", "mediocre", "already"]
# ::lemmas ["sound", "mediocre", "already"]
(c49-2 / sound-01
       :ARG2 (c49-1 / mediocre)
       :time (c49-0 / already))

# ::snt chance to win apple watch
# ::tokens ["chance", "to", "win", "apple", "watch"]
# ::lemmas ["chance", "to", "win", "apple", "watch"]
(c50-1 / chance-02
       :ARG1 (c50-3 / win-01
                    :ARG1 (c50-0 / watch-01
                                 :ARG1 (c50-2 / apple))))
