# ::snt Hospitalized for... indigestion? Hm. Alrighty then. Hope he gets to feeling better.
# ::tokens ["Hospitalized", "for", "...", "indigestion", "?", "Hm", ".", "Alrighty", "then", ".", "Hope", "he", "gets", "to", "feeling", "better", "."]
# ::lemmas ["hospitalize", "for", "...", "indigestion", "?", "hm", ".", "Alrighty", "then", ".", "hope", "he", "get", "to", "feel", "well", "."]
(c1-2 / multi-sentence
      :snt1 (c1-4 / hospitalize-01
                  :ARG1 (c1-9 / he)
                  :ARG1-of (c1-8 / cause-01
                                 :ARG0 (c1-11 / indigestion
                                              :polarity (c1-12 / amr-unknown)))
                  :mod (c1-3 / hmm
                             :mode expressive))
      :snt2 (c1-0 / okay-04
                  :mod (c1-10 / then))
      :snt3 (c1-15 / hope-01
                   :ARG1 (c1-13 / get-04
                                :ARG0 (c1-5 / he)
                                :ARG1 (c1-1 / feel-01
                                            :ARG0 c1-5
                                            :ARG1 (c1-14 / good-02
                                                         :ARG2-of (c1-7 / have-degree-91
                                                                        :ARG1 c1-1
                                                                        :ARG3 (c1-6 / more)))))))

# ::snt praying for Richard Simmons wishing him good health
# ::tokens ["praying", "for", "Richard", "Simmons", "wishing", "him", "good", "health"]
# ::lemmas ["pray", "for", "Richard", "Simmons", "wish", "he", "good", "health"]
(c2-3 / wish-01
      :ARG0 (c2-4 / i)
      :ARG1 (c2-1 / healthy
                  :domain (c2-2 / person
                                :name (c2-0 / name
                                            :op1 "Richard"
                                            :op2 "Simmons"))
                  :ARG1-of (c2-5 / good-02))
      :ARG2 c2-2)

# ::snt I take Prilosec. Just sayin'
# ::tokens ["I", "take", "Prilosec", ".", "Just", "sayin", "'"]
# ::lemmas ["i", "take", "Prilosec", ".", "just", "sayin", "'"]
(c4-1 / multi-sentence
      :snt1 (c4-6 / take-01
                  :ARG0 (c4-5 / i)
                  :ARG1 (c4-3 / medication
                              :name (c4-0 / name
                                          :op1 "Prilosec")))
      :snt2 (c4-2 / say-01
                  :ARG0 c4-5
                  :mod (c4-4 / just)))

# ::snt Severe indigestion huh? Maybe he needed a refill on his scripts
# ::tokens ["Severe", "indigestion", "huh", "?", "Maybe", "he", "needed", "a", "refill", "on", "his", "scripts"]
# ::lemmas ["severe", "indigestion", "huh", "?", "maybe", "he", "need", "a", "refill", "on", "his", "script"]
(c5-1 / multi-sentence
      :snt1 (c5-7 / indigestion
                  :degree (c5-3 / severe)
                  :ARG1-of (c5-4 / request-confirmation-91))
      :snt2 (c5-6 / possible-01
                  :ARG1 (c5-2 / need-01
                              :ARG0 (c5-5 / he)
                              :ARG1 (c5-8 / refill-01
                                          :ARG1 (c5-0 / script-01
                                                      :ARG0 c5-5)))))

# ::snt He just needs to cut down on the sausage.
# ::tokens ["He", "just", "needs", "to", "cut", "down", "on", "the", "sausage", "."]
# ::lemmas ["he", "just", "need", "to", "cut", "down", "on", "the", "sausage", "."]
(c6-0 / need-01
      :ARG0 (c6-2 / he)
      :ARG1 (c6-3 / cut-down-11
                  :ARG0 c6-2
                  :ARG1 (c6-1 / sausage))
      :mod (c6-4 / just))

# ::snt I have a lot of feelings about Richard Simmons
# ::tokens ["I", "have", "a", "lot", "of", "feelings", "about", "Richard", "Simmons"]
# ::lemmas ["i", "have", "a", "lot", "of", "feeling", "about", "Richard", "Simmons"]
(c7-0 / feel-01
      :ARG0 (c7-4 / i)
      :ARG2 (c7-2 / person
                  :name (c7-1 / name
                              :op1 "Richard"
                              :op2 "Simmons"))
      :quant (c7-3 / lot))

# ::snt . cc
# ::tokens [".", "cc"]
# ::lemmas [".", "cc"]
(c8-1 / thing
      :mod (c8-0 / emoticon
                 :value "cc"))

# ::snt I thought your tweet was a joke but, no.
# ::tokens ["I", "thought", "your", "tweet", "was", "a", "joke", "but", ",", "no", "."]
# ::lemmas ["i", "think", "your", "tweet", "be", "a", "joke", "but", ",", "no", "."]
(c9-2 / contrast-01
      :ARG1 (c9-6 / think-01
                  :ARG0 (c9-4 / i)
                  :ARG1 (c9-3 / joke-01
                              :ARG2 (c9-5 / tweet-02
                                          :ARG0 (c9-0 / you))))
      :ARG2 (c9-1 / no))

# ::snt Krystal hamburgers will do it every time
# ::tokens ["Krystal", "hamburgers", "will", "do", "it", "every", "time"]
# ::lemmas ["krystal", "hamburger", "will", "do", "it", "every", "time"]
(c10-6 / do-02
       :ARG0 (c10-2 / hamburger
                    :mod (c10-3 / company
                                :name (c10-0 / name
                                             :op1 "Krystal")))
       :ARG1 (c10-4 / it)
       :frequency (c10-5 / time
                         :mod (c10-1 / every)))

# ::snt He is getting older and has not treated himself well. Paying high price, feel bad for him
# ::tokens ["He", "is", "getting", "older", "and", "has", "not", "treated", "himself", "well", ".", "Paying", "high", "price", ",", "feel", "bad", "for", "him"]
# ::lemmas ["he", "be", "get", "old", "and", "have", "not", "treat", "himself", "well", ".", "pay", "high", "price", ",", "feel", "bad", "for", "he"]
(c11-4 / multi-sentence
       :snt1 (c11-12 / and
                     :op1 (c11-13 / get-03
                                  :ARG1 (c11-7 / he)
                                  :ARG2 (c11-0 / old))
                     :op2 (c11-11 / treat-01
                                  :ARG0 c11-7
                                  :ARG1 c11-7
                                  :ARG2 (c11-9 / well-09)
                                  :polarity -))
       :snt2 (c11-1 / feel-01
                    :ARG0 (c11-3 / you)
                    :ARG1 (c11-2 / bad-07)
                    :ARG2 (c11-10 / he)
                    :condition (c11-8 / pay-01
                                      :ARG0 c11-3
                                      :ARG1 (c11-5 / price
                                                   :ARG1-of (c11-6 / high-02)))))

# ::snt He's probably been binge eating with all of Kimmy's nuclear missile testing talk!
# ::tokens ["He", "'s", "probably", "been", "binge", "eating", "with", "all", "of", "Kimmy", "'s", "nuclear", "missile", "testing", "talk", "!"]
# ::lemmas ["he", "be", "probably", "be", "binge", "eat", "with", "all", "of", "Kimmy", "'s", "nuclear", "missile", "testing", "talk", "!"]
(c12-7 / probable
       :domain (c12-0 / binge-01
                      :ARG0 (c12-6 / he)
                      :ARG1 (c12-5 / eat-01
                                   :ARG0 c12-6
                                   :accompanier (c12-9 / talk-01
                                                       :ARG0 (c12-2 / person
                                                                    :name (c12-1 / name
                                                                                 :op1 "Kimmy"))
                                                       :ARG1 (c12-10 / test-01
                                                                     :ARG1 (c12-3 / missile
                                                                                  :mod (c12-8 / nucleus)))
                                                       :mod (c12-4 / all)))))

# ::snt Get well soon Richard !!
# ::tokens ["Get", "well", "soon", "Richard", "!", "!"]
# ::lemmas ["get", "well", "soon", "Richard", "!", "!"]
(c13-2 / say-01
       :ARG0 (c13-4 / i)
       :ARG1 (c13-5 / get-well-09
                    :ARG1 (c13-3 / person
                                 :name (c13-1 / name
                                              :op1 "Richard"))
                    :time (c13-0 / soon)
                    :mode imperative)
       :ARG2 c13-3)

# ::snt guess those old Deal-A-Meals will do that to you
# ::tokens ["guess", "those", "old", "Deal", "-", "A", "-", "Meals", "will", "do", "that", "to", "you"]
# ::lemmas ["guess", "those", "old", "Deal", "-", "A", "-", "Meals", "will", "do", "that", "to", "you"]
(c15-5 / guess-01
       :ARG1 (c15-6 / do-02
                    :ARG0 (c15-3 / person
                                 :name (c15-2 / name
                                              :op1 "Deal-A-Meals")
                                 :mod (c15-0 / old)
                                 :mod (c15-4 / that
                                             :ARG1-of c15-6))
                    :ARG2 (c15-1 / you)))

# ::snt What did he swallow this time?
# ::tokens ["What", "did", "he", "swallow", "this", "time", "?"]
# ::lemmas ["what", "do", "he", "swallow", "this", "time", "?"]
(c16-0 / swallow-01
       :ARG0 (c16-1 / he)
       :ARG1 (c16-3 / amr-unknown)
       :time (c16-2 / time
                    :mod (c16-4 / this)))

# ::snt Let's hope not. But you never know about CA.
# ::tokens ["Let", "'s", "hope", "not", ".", "But", "you", "never", "know", "about", "CA", "."]
# ::lemmas ["let", "us", "hope", "not", ".", "but", "you", "never", "know", "about", "CA", "."]
(c17-1 / multi-sentence
       :snt1 (c17-5 / hope-01
                    :ARG0 (c17-7 / we)
                    :ARG1 (c17-9 / thing
                                 :polarity -)
                    :mode imperative)
       :snt2 (c17-8 / contrast-01
                    :ARG2 (c17-6 / know-01
                                 :ARG0 (c17-0 / you)
                                 :ARG1 (c17-3 / state
                                              :name (c17-2 / name
                                                           :op1 "CA"))
                                 :time (c17-4 / ever)
                                 :polarity -)))

# ::snt HANG IN THERE OUR GURU HERO OUR PRAY IS WITH YOU BE STRONG BROTHER
# ::tokens ["HANG", "IN", "THERE", "OUR", "GURU", "HERO", "OUR", "PRAY", "IS", "WITH", "YOU", "BE", "STRONG", "BROTHER"]
# ::lemmas ["hang", "in", "there", "our", "GURU", "HERO", "OUR", "PRAY", "be", "with", "you", "be", "strong", "brother"]
(c18-2 / multi-sentence
       :snt1 (c18-5 / hanging-07
                    :ARG1 (c18-1 / you)
                    :location (c18-10 / there)
                    :mode imperative)
       :snt2 (c18-12 / unite-01
                     :ARG1 (c18-7 / we)
                     :ARG2 (c18-9 / hero
                                  :mod (c18-8 / country
                                              :name (c18-3 / name
                                                           :op1 "Gulf"))
                                  :poss c18-7))
       :snt3 (c18-6 / person
                    :ARG0-of (c18-0 / bear-02)
                    :ARG1-of (c18-4 / strong-02)
                    :domain (c18-11 / you)
                    :mode imperative))

# ::snt Gary!! Where are you !?
# ::tokens ["Gary", "!", "!", "Where", "are", "you", "!", "?"]
# ::lemmas ["Gary", "!", "!", "where", "be", "you", "!", "?"]
(c19-3 / multi-sentence
       :snt1 (c19-4 / person
                    :name (c19-2 / name
                                 :op1 "Gary")
                    :mode expressive)
       :snt2 (c19-0 / be-located-at-91
                    :ARG1 (c19-1 / you)
                    :ARG2 (c19-5 / amr-unknown)))

# ::snt Uh no.... chest pains maybe... or HIV
# ::tokens ["Uh", "no", "....", "chest", "pains", "maybe", "...", "or", "HIV"]
# ::lemmas ["uh", "no", "....", "chest", "pain", "maybe", "...", "or", "HIV"]
(c20-3 / possible-01
       :ARG1 (c20-0 / or
                    :op1 (c20-2 / pain-01
                                :ARG0 (c20-4 / chest))
                    :op2 (c20-5 / disease
                                :name (c20-1 / name
                                             :op1 "HIV")))
       :mod (c20-6 / uh-no
                   :mode expressive))

# ::snt They just told him that Donald Trump IS his President ....
# ::tokens ["They", "just", "told", "him", "that", "Donald", "Trump", "IS", "his", "President", "...."]
# ::lemmas ["they", "just", "tell", "he", "that", "Donald", "Trump", "be", "his", "President", "...."]
(c21-5 / tell-01
       :ARG0 (c21-7 / they)
       :ARG1 (c21-2 / have-org-role-91
                    :ARG0 (c21-3 / person
                                 :name (c21-0 / name
                                              :op1 "Donald"
                                              :op2 "Trump"))
                    :ARG1 (c21-4 / he)
                    :ARG2 (c21-1 / president))
       :ARG2 c21-4
       :time (c21-6 / just))

# ::snt he can't stomach himself anymore? cheap joke, back to the corner i go
# ::tokens ["he", "ca", "n't", "stomach", "himself", "anymore", "?", "cheap", "joke", ",", "back", "to", "the", "corner", "i", "go"]
# ::lemmas ["he", "can", "not", "stomach", "himself", "anymore", "?", "cheap", "joke", ",", "back", "to", "the", "corner", "i", "go"]
(c22-1 / multi-sentence
       :snt1 (c22-4 / possible-01
                    :ARG1 (c22-2 / stomach-01
                                 :ARG0 (c22-3 / he
                                              :ARG1-of c22-2)
                                 :time (c22-8 / anymore))
                    :polarity (c22-7 / amr-unknown)
                    :polarity -)
       :snt2 (c22-6 / joke-01
                    :ARG1-of (c22-5 / cheap-02))
       :snt3 (c22-9 / go-02
                    :ARG0 (c22-10 / i)
                    :ARG4 (c22-11 / corner)
                    :direction (c22-0 / back)))

# ::snt Poor gentleman: I wish him the best all around
# ::tokens ["Poor", "gentleman", ":", "I", "wish", "him", "the", "best", "all", "around"]
# ::lemmas ["poor", "gentleman", ":", "i", "wish", "he", "the", "good", "all", "around"]
(c23-4 / wish-01
       :ARG0 (c23-5 / i)
       :ARG1 (c23-6 / thing
                    :ARG1-of (c23-2 / have-degree-91
                                    :ARG2 (c23-7 / good-02
                                                 :ARG1 c23-6)
                                    :ARG3 (c23-0 / most)))
       :ARG2 (c23-8 / gentleman
                    :mod (c23-3 / poor))
       :mod (c23-1 / all-around))

# ::snt AMEN!!!
# ::tokens ["AMEN", "!", "!", "!"]
# ::lemmas ["AMEN", "!", "!", "!"]
(c24-0 / amen
       :mode expressive)

# ::snt Wishing him a full and speedy recovery...he hasn't 'been himself', it would seem, for quite some time.
# ::tokens ["Wishing", "him", "a", "full", "and", "speedy", "recovery", "...", "he", "has", "n't", "'", "been", "himself", "'", ",", "it", "would", "seem", ",", "for", "quite", "some", "time", "."]
# ::lemmas ["wish", "he", "a", "full", "and", "speedy", "recovery", "...", "he", "have", "not", "'", "be", "himself", "'", ",", "it", "would", "seem", ",", "for", "quite", "some", "time", "."]
(c25-2 / multi-sentence
       :snt1 (c25-7 / wish-01
                    :ARG1 (c25-4 / recover-01
                                 :ARG1 (c25-6 / he)
                                 :ARG1-of (c25-0 / full-09)
                                 :ARG1-of (c25-3 / speedy-03))
                    :ARG2 c25-6)
       :snt2 (c25-8 / have-mod-91
                    :ARG1 (c25-5 / he
                                 :ARG2-of c25-8)
                    :duration (c25-10 / time
                                      :quant (c25-1 / some
                                                    :degree (c25-9 / quite)))
                    :ARG1-of (c25-11 / seem-01)
                    :polarity -))

# ::snt Just let the man be
# ::tokens ["Just", "let", "the", "man", "be"]
# ::lemmas ["just", "let", "the", "man", "be"]
(c26-3 / let-01
       :ARG0 (c26-2 / you)
       :ARG1 (c26-0 / man)
       :mod (c26-1 / just)
       :mode imperative)

# ::snt shoulda spit!!!
# ::tokens ["shoulda", "spit", "!", "!", "!"]
# ::lemmas ["shoulda", "spit", "!", "!", "!"]
(c27-0 / recommend-01
       :ARG1 (c27-1 / spit-01))

# ::snt Way to go -- your podcast sucked so much it made RIchard sick.
# ::tokens ["Way", "to", "go", "--", "your", "podcast", "sucked", "so", "much", "it", "made", "RIchard", "sick", "."]
# ::lemmas ["way", "to", "go", "--", "your", "podcast", "suck", "so", "much", "it", "make", "RIchard", "sick", "."]
(c29-11 / and
        :op1 (c29-9 / way
                    :manner-of (c29-12 / go-06))
        :op2 (c29-4 / suck-03
                    :ARG0 (c29-7 / podcast
                                 :poss (c29-1 / you))
                    :ARG1-of (c29-6 / have-quant-91
                                    :ARG2 (c29-2 / much)
                                    :ARG3 (c29-0 / so)
                                    :ARG6 (c29-8 / make-02
                                                 :ARG0 (c29-10 / it)
                                                 :ARG1 (c29-13 / sick-05
                                                               :ARG0 c29-10
                                                               :ARG1 (c29-3 / person
                                                                            :name (c29-5 / name
                                                                                         :op1 "Riotchard")))))))

# ::snt Garrryyyy where are you Gary
# ::tokens ["Garrryyyy", "where", "are", "you", "Gary"]
# ::lemmas ["garrryyyy", "where", "be", "you", "Gary"]
(c31-2 / say-01
       :ARG0 (c31-5 / i)
       :ARG1 (c31-0 / be-located-at-91
                    :ARG1 (c31-4 / person
                                 :name (c31-1 / name
                                              :op1 "Gary"))
                    :ARG2 (c31-6 / amr-unknown)
                    :mod (c31-3 / hilarious))
       :ARG2 c31-4)

# ::snt the struggle is real
# ::tokens ["the", "struggle", "is", "real"]
# ::lemmas ["the", "struggle", "be", "real"]
(c32-0 / real-04
       :ARG1 (c32-1 / struggle-02))

# ::snt I thought he was missing? Nah, just has gas.
# ::tokens ["I", "thought", "he", "was", "missing", "?", "Nah", ",", "just", "has", "gas", "."]
# ::lemmas ["i", "think", "he", "be", "miss", "?", "Nah", ",", "just", "have", "gas", "."]
(c33-0 / multi-sentence
       :snt1 (c33-3 / think-01
                    :polarity (c33-5 / amr-unknown)
                    :ARG0 (c33-4 / i)
                    :ARG1 (c33-1 / miss-01
                                 :ARG1 (c33-2 / he)))
       :snt2 (c33-6 / gas
                    :mod (c33-7 / just)
                    :polarity c33-5))

# ::snt Thought he was missing???
# ::tokens ["Thought", "he", "was", "missing", "?", "?", "?"]
# ::lemmas ["thought", "he", "be", "miss", "?", "?", "?"]
(c34-3 / think-01
       :polarity (c34-0 / amr-unknown)
       :ARG1 (c34-2 / miss-01
                    :ARG1 (c34-1 / he)))

# ::snt Not the most flattering photo...
# ::tokens ["Not", "the", "most", "flattering", "photo", "..."]
# ::lemmas ["not", "the", "most", "flattering", "photo", "..."]
(c35-2 / have-degree-91
       :ARG1 (c35-3 / photo)
       :ARG2 (c35-1 / flattering-02
                    :ARG0 c35-3)
       :ARG3 (c35-0 / most)
       :polarity -)

# ::snt Take two Tums.
# ::tokens ["Take", "two", "Tums", "."]
# ::lemmas ["take", "two", "Tums", "."]
(c36-2 / take-01
       :ARG0 (c36-0 / you)
       :ARG1 (c36-1 / pill
                    :quant 2)
       :mode imperative)

# ::snt He's always been a hard act to swallow!
# ::tokens ["He", "'s", "always", "been", "a", "hard", "act", "to", "swallow", "!"]
# ::lemmas ["he", "be", "always", "be", "a", "hard", "act", "to", "swallow", "!"]
(c37-4 / act-02
       :ARG1 (c37-0 / swallow-01
                    :ARG1 (c37-1 / he))
       :ARG1-of (c37-2 / hard-02)
       :time (c37-3 / always))

# ::snt He didn't piss off Putin recently, did he?
# ::tokens ["He", "did", "n't", "piss", "off", "Putin", "recently", ",", "did", "he", "?"]
# ::lemmas ["he", "do", "not", "piss", "off", "Putin", "recently", ",", "do", "he", "?"]
(c38-4 / piss-off-02
       :ARG0 (c38-3 / he)
       :ARG1 (c38-1 / person
                    :name (c38-0 / name
                                 :op1 "Putin"))
       :time (c38-2 / recent)
       :ARG1-of (c38-5 / request-confirmation-91)
       :polarity -)

# ::snt This is good news.
# ::tokens ["This", "is", "good", "news", "."]
# ::lemmas ["this", "be", "good", "news", "."]
(c39-1 / news
       :ARG1-of (c39-0 / good-02)
       :domain (c39-2 / this))

# ::snt glad to hear he'd finally getting real help - he's funny but motivating-he better start EATING &amp; was it poison? Via food??
# ::tokens ["glad", "to", "hear", "he", "'d", "finally", "getting", "real", "help", "-", "he", "'s", "funny", "but", "motivating", "-", "he", "better", "start", "EATING", "&", "amp", ";", "was", "it", "poison", "?", "Via", "food", "?", "?"]
# ::lemmas ["glad", "to", "hear", "he", "would", "finally", "get", "real", "help", "-", "he", "be", "funny", "but", "motivating", "-", "he", "well", "start", "EATING", "&", "amp", ";", "be", "it", "poison", "?", "via", "food", "?", "?"]
(c40-11 / multi-sentence
        :snt1 (c40-10 / glad-02
                      :ARG0 (c40-4 / hear-01
                                   :ARG0 (c40-21 / i)
                                   :ARG1 (c40-1 / get-01
                                                :ARG0 (c40-20 / he)
                                                :ARG1 (c40-3 / help-01
                                                             :ARG1-of (c40-15 / real-04))
                                                :mod (c40-14 / final)))
                      :ARG1 c40-21)
        :snt2 (c40-12 / contrast-01
                      :ARG1 (c40-18 / funny-02
                                    :ARG1 (c40-13 / he))
                      :ARG2 (c40-5 / motivate-01
                                   :ARG0 c40-13))
        :snt3 (c40-2 / recommend-01
                     :ARG1 (c40-0 / start-01
                                  :ARG0 (c40-6 / he)
                                  :ARG1 (c40-9 / and
                                               :op1 (c40-16 / eat-01
                                                            :ARG0 c40-6)
                                               :op2 (c40-8 / amp))))
        :snt4 (c40-17 / poison-02
                      :polarity (c40-7 / amr-unknown)
                      :source (c40-19 / food)))

# ::snt I don't know why some people don't clean their armpit !!!
# ::tokens ["I", "do", "n't", "know", "why", "some", "people", "do", "n't", "clean", "their", "armpit", "!", "!", "!"]
# ::lemmas ["i", "do", "not", "know", "why", "some", "people", "do", "not", "clean", "their", "armpit", "!", "!", "!"]
(c41-2 / know-01
       :ARG0 (c41-5 / i)
       :ARG1 (c41-6 / thing
                    :ARG0-of (c41-4 / cause-01
                                    :ARG1 (c41-7 / clean-01
                                                 :ARG0 (c41-3 / person
                                                              :mod (c41-0 / some)
                                                              :part (c41-1 / ass
                                                                           :ARG1-of c41-7))
                                                 :polarity -)))
       :polarity -)

# ::snt Get well soon!
# ::tokens ["Get", "well", "soon", "!"]
# ::lemmas ["get", "well", "soon", "!"]
(c42-0 / get-03
       :ARG1 (c42-2 / you)
       :ARG2 (c42-1 / well-05
                    :ARG1 c42-2)
       :time (c42-3 / soon)
       :mode imperative)

# ::snt Love you, Richard! Get well soon!
# ::tokens ["Love", "you", ",", "Richard", "!", "Get", "well", "soon", "!"]
# ::lemmas ["Love", "you", ",", "Richard", "!", "get", "well", "soon", "!"]
(c43-2 / multi-sentence
       :snt1 (c43-4 / say-01
                    :ARG1 (c43-6 / love-01
                                 :ARG0 (c43-8 / i)
                                 :ARG1 (c43-5 / person
                                              :name (c43-3 / name
                                                           :op1 "Richard")
                                              :ARG2-of c43-4)))
       :snt2 (c43-9 / get-05
                    :ARG0 (c43-1 / you)
                    :ARG1 (c43-7 / well-05
                                 :ARG1 c43-1)
                    :time (c43-0 / soon
                                 :mode expressive)
                    :mode imperative))

# ::snt At least we know he's not being held captive!
# ::tokens ["At", "least", "we", "know", "he", "'s", "not", "being", "held", "captive", "!"]
# ::lemmas ["at", "least", "we", "know", "he", "be", "not", "be", "hold", "captive", "!"]
(c44-1 / know-01
       :ARG0 (c44-2 / we)
       :ARG1 (c44-0 / hold-01
                    :ARG1 (c44-4 / he)
                    :ARG3 (c44-3 / captive)
                    :polarity -)
       :mod (c44-5 / at-least))

# ::snt You'll be alright cancer I'm rooting for U
# ::tokens ["You", "'ll", "be", "alright", "cancer", "I", "'m", "rooting", "for", "U"]
# ::lemmas ["you", "'ll", "be", "alright", "cancer", "i", "be", "root", "for", "u"]
(c45-3 / cause-01
       :ARG0 (c45-5 / cancer)
       :ARG1 (c45-1 / root-03
                    :ARG0 (c45-4 / i)
                    :ARG1 (c45-2 / person
                                 :name (c45-0 / name
                                              :op1 "U"))))

# ::snt Praying for Richard's quick and speedy recovery
# ::tokens ["Praying", "for", "Richard", "'s", "quick", "and", "speedy", "recovery"]
# ::lemmas ["pray", "for", "Richard", "'s", "quick", "and", "speedy", "recovery"]
(c46-4 / pray-01
       :ARG1 (c46-3 / recover-01
                    :ARG1 (c46-1 / person
                                 :name (c46-0 / name
                                              :op1 "Richard"))
                    :ARG1-of (c46-5 / quick-02)
                    :ARG1-of (c46-2 / speedy-03)))

# ::snt Warm.Prayers.Sent.
# ::tokens ["Warm", ".", "Prayers", ".", "Sent", "."]
# ::lemmas ["warm", ".", "prayer", ".", "send", "."]
(c47-3 / and
       :op1 (c47-1 / warm-01)
       :op2 (c47-2 / pray-01)
       :op3 (c47-0 / sentence-01))

# ::snt God bless him
# ::tokens ["God", "bless", "him"]
# ::lemmas ["God", "bless", "he"]
(c48-1 / bless-01
       :ARG0 (c48-3 / person
                    :name (c48-0 / name
                                 :op1 "God"))
       :ARG1 (c48-2 / he))

# ::snt Rrrrrriiiiggghhhhttt that's what they're calling it now huh
# ::tokens ["Rrrrrriiiiggghhhhttt", "that", "'s", "what", "they", "'re", "calling", "it", "now", "huh"]
# ::lemmas ["Rrrrrriiiiggghhhhttt", "that", "be", "what", "they", "be", "call", "it", "now", "huh"]
(c49-2 / call-01
       :ARG0 (c49-3 / they)
       :ARG1 (c49-4 / it)
       :ARG2 (c49-5 / that)
       :ARG1-of (c49-1 / request-confirmation-91)
       :time (c49-0 / now))

# ::snt he's having a sex change
# ::tokens ["he", "'s", "having", "a", "sex", "change"]
# ::lemmas ["he", "be", "have", "a", "sex", "change"]
(c50-0 / change-01
       :ARG0 (c50-1 / he)
       :ARG1 (c50-2 / sex-01
                    :ARG0 c50-1))
