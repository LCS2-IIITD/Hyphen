# ::snt I really hope so!
# ::tokens ["I", "really", "hope", "so", "!"]
# ::lemmas ["i", "really", "hope", "so", "!"]
(c1-1 / hope-01
      :ARG0 (c1-2 / i)
      :ARG1 (c1-3 / so)
      :degree (c1-0 / really)
      :mode expressive)

# ::snt We need to rewatch it if there are clues
# ::tokens ["We", "need", "to", "rewatch", "it", "if", "there", "are", "clues"]
# ::lemmas ["we", "need", "to", "rewatch", "it", "if", "there", "be", "clue"]
(c2-0 / obligate-01
      :ARG1 (c2-3 / we)
      :ARG2 (c2-1 / rewatch-01
                  :ARG0 c2-3
                  :ARG1 (c2-4 / it)
                  :condition (c2-2 / clue)))

# ::snt He definitely is
# ::tokens ["He", "definitely", "is"]
# ::lemmas ["he", "definitely", "be"]
(c3-1 / he
      :mod (c3-0 / definite))

# ::snt Bhan, I'm with Jinay
# ::tokens ["Bhan", ",", "I", "'m", "with", "Jinay"]
# ::lemmas ["Bhan", ",", "i", "be", "with", "Jinay"]
(c4-2 / say-01
      :ARG0 (c4-5 / i)
      :ARG1 (c4-6 / accompany-01
                  :ARG0 c4-5
                  :ARG1 (c4-4 / person
                              :name (c4-0 / name
                                          :op1 "Jinay")))
      :ARG2 (c4-1 / person
                  :name (c4-3 / name
                              :op1 "Bhan")))

# ::snt I hope he doesn't return if they choose to continue that mess of a revival. The writers &amp; ASP will only ruin his character more.
# ::tokens ["I", "hope", "he", "does", "n't", "return", "if", "they", "choose", "to", "continue", "that", "mess", "of", "a", "revival", ".", "The", "writers", "&", "amp", ";", "ASP", "will", "only", "ruin", "his", "character", "more", "."]
# ::lemmas ["i", "hope", "he", "do", "not", "return", "if", "they", "choose", "to", "continue", "that", "mess", "of", "a", "revival", ".", "the", "writer", "&", "amp", ";", "ASP", "will", "only", "ruin", "his", "character", "more", "."]
(c6-9 / multi-sentence
      :snt1 (c6-4 / hope-01
                  :ARG0 (c6-21 / i)
                  :ARG1 (c6-17 / return-01
                               :ARG1 (c6-20 / he)
                               :condition (c6-12 / choose-01
                                                 :ARG0 (c6-7 / they)
                                                 :ARG1 (c6-8 / continue-01
                                                             :ARG0 c6-7
                                                             :ARG1 (c6-5 / mess
                                                                         :mod (c6-13 / that)
                                                                         :mod (c6-1 / revive-01))))
                               :polarity -)
                  :snt2 (c6-11 / ruin-01
                               :ARG0 (c6-6 / and
                                           :op1 (c6-18 / person
                                                       :ARG0-of (c6-19 / write-01))
                                           :op2 (c6-10 / person
                                                       :name (c6-16 / name
                                                                    :op1 "amp")))
                               :ARG1 (c6-0 / character
                                           :poss (c6-3 / he))
                               :mod (c6-2 / only)
                               :ARG1-of (c6-14 / have-quant-91
                                               :ARG3 (c6-15 / more)))))

# ::snt Team Jess all the way
# ::tokens ["Team", "Jess", "all", "the", "way"]
# ::lemmas ["Team", "Jess", "all", "the", "way"]
(c7-2 / team
      :name (c7-1 / name
                  :op1 "Jess")
      :extent (c7-0 / all-the-way))

# ::snt Isn't he sexy?!!! !!!! Of course he is!...the father
# ::tokens ["Is", "n't", "he", "sexy", "?", "!", "!", "!", "!", "!", "!", "!", "Of", "course", "he", "is!", "...", "the", "father"]
# ::lemmas ["be", "not", "he", "sexy", "?", "!", "!", "!", "!", "!", "!", "!", "of", "course", "he", "is!", "...", "the", "father"]
(c8-2 / multi-sentence
      :snt1 (c8-3 / sexy
                  :domain (c8-5 / he)
                  :polarity (c8-8 / amr-unknown)
                  :polarity -)
      :snt2 (c8-7 / he
                  :mod (c8-0 / of-course))
      :snt3 (c8-6 / person
                  :ARG0-of (c8-4 / have-rel-role-91
                                 :ARG2 (c8-1 / father))))

# ::snt It's obviously him, that was never really a question, we just wanna know how everything will turn out
# ::tokens ["It", "'s", "obviously", "him", ",", "that", "was", "never", "really", "a", "question", ",", "we", "just", "wanna", "know", "how", "everything", "will", "turn", "out"]
# ::lemmas ["it", "be", "obviously", "he", ",", "that", "be", "never", "really", "a", "question", ",", "we", "just", "wanna", "know", "how", "everything", "will", "turn", "out"]
(c10-1 / and
       :op1 (c10-0 / obvious-01
                   :ARG1 (c10-4 / he))
       :op2 (c10-9 / question-01
                   :ARG1 (c10-10 / that)
                   :time (c10-3 / ever)
                   :ARG1-of (c10-2 / real-04)
                   :polarity -)
       :op3 (c10-7 / want-01
                   :ARG0 (c10-6 / we)
                   :ARG1 (c10-5 / know-01
                                :ARG0 c10-6
                                :ARG1 (c10-13 / thing
                                              :manner-of (c10-11 / turn-out-11
                                                                 :ARG1 (c10-12 / everything))))
                   :mod (c10-8 / just)))

# ::snt We know this
# ::tokens ["We", "know", "this"]
# ::lemmas ["we", "know", "this"]
(c11-1 / know-01
       :ARG0 (c11-0 / we)
       :ARG1 (c11-2 / this))

# ::snt I was watching GG yesterday and thinking about this.
# ::tokens ["I", "was", "watching", "GG", "yesterday", "and", "thinking", "about", "this", "."]
# ::lemmas ["i", "be", "watch", "gg", "yesterday", "and", "think", "about", "this", "."]
(c12-6 / and
       :op1 (c12-3 / watch-01
                   :ARG0 (c12-5 / i)
                   :ARG1 (c12-0 / broadcast-program
                                :name (c12-2 / name
                                             :op1 "GG"))
                   :time (c12-1 / yesterday))
       :op2 (c12-4 / think-01
                   :ARG0 c12-5
                   :ARG1 (c12-7 / this)))

# ::snt Is this even a question?
# ::tokens ["Is", "this", "even", "a", "question", "?"]
# ::lemmas ["be", "this", "even", "a", "question", "?"]
(c14-2 / question-01
       :polarity (c14-3 / amr-unknown)
       :ARG1 (c14-1 / this)
       :mod (c14-0 / even))

# ::snt of course he is
# ::tokens ["of", "course", "he", "is"]
# ::lemmas ["of", "course", "he", "be"]
(c15-1 / he
       :mod (c15-0 / of-course))

# ::snt Nive man
# ::tokens ["Nive", "man"]
# ::lemmas ["nive", "man"]
(c17-1 / man
       :mod (c17-0 / nive))
