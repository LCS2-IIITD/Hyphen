# ::snt please play 'Will I See You' by feat.
# ::tokens ["please", "play", "'", "Will", "I", "See", "You", "'", "by", "feat", "."]
# ::lemmas ["please", "play", "'", "will", "i", "see", "you", "'", "by", "feat", "."]
(c1-4 / play-11
      :ARG0 (c1-1 / you)
      :ARG1 (c1-2 / music
                  :name (c1-3 / name
                              :op1 "Will"
                              :op2 "I"
                              :op3 "See"
                              :op4 "You"))
      :manner (c1-0 / feat)
      :polite +
      :mode imperative)

# ::snt I hope she didn't lose her virginity to Chris Brown....
# ::tokens ["I", "hope", "she", "did", "n't", "lose", "her", "virginity", "to", "Chris", "Brown", "...."]
# ::lemmas ["i", "hope", "she", "do", "not", "lose", "her", "virginity", "to", "Chris", "Brown", "...."]
(c2-3 / hope-01
      :ARG0 (c2-6 / i)
      :ARG1 (c2-4 / lose-02
                  :ARG0 (c2-1 / she)
                  :ARG1 (c2-2 / virginity
                              :poss c2-1)
                  :ARG2 (c2-5 / person
                              :name (c2-0 / name
                                          :op1 "Chris"
                                          :op2 "Brown"))
                  :polarity -))

# ::snt She wants to go back to grade school??
# ::tokens ["She", "wants", "to", "go", "back", "to", "grade", "school", "?", "?"]
# ::lemmas ["she", "want", "to", "go", "back", "to", "grade", "school", "?", "?"]
(c3-2 / want-01
      :polarity (c3-4 / amr-unknown)
      :ARG0 (c3-1 / she)
      :ARG1 (c3-5 / go-back-19
                  :ARG1 c3-1
                  :ARG2 (c3-0 / school
                              :mod (c3-3 / grade))))

# ::snt Lord Jesus, the jokes to be made out of this.....
# ::tokens ["Lord", "Jesus", ",", "the", "jokes", "to", "be", "made", "out", "of", "this", "....."]
# ::lemmas ["Lord", "Jesus", ",", "the", "joke", "to", "be", "make", "out", "of", "this", "....."]
(c5-1 / say-01
      :ARG1 (c5-3 / joke-01
                  :ARG2 (c5-4 / this))
      :ARG2 (c5-2 / person
                  :name (c5-0 / name
                              :op1 "Lord"
                              :op2 "Jesus")))

# ::snt I want to time-travel to the day I met my last boyfriend. My WORST MISTAKE ever.
# ::tokens ["I", "want", "to", "time", "-", "travel", "to", "the", "day", "I", "met", "my", "last", "boyfriend", ".", "My", "WORST", "MISTAKE", "ever", "."]
# ::lemmas ["i", "want", "to", "time", "-", "travel", "to", "the", "day", "i", "meet", "my", "last", "boyfriend", ".", "my", "bad", "mistake", "ever", "."]
(c6-1 / multi-sentence
      :snt1 (c6-9 / want-01
                  :ARG0 (c6-12 / i)
                  :ARG1 (c6-13 / travel-01
                               :ARG0 c6-12
                               :ARG1 (c6-14 / day
                                            :time-of (c6-4 / meet-02
                                                           :ARG0 c6-12
                                                           :ARG1 (c6-5 / person
                                                                       :ARG0-of (c6-6 / have-rel-role-91
                                                                                      :ARG1 c6-12
                                                                                      :ARG2 (c6-0 / boyfriend))
                                                                       :mod (c6-7 / last))))
                               :mod (c6-16 / time)))
      :snt2 (c6-15 / mistake-02
                   :ARG0 (c6-2 / i)
                   :time (c6-3 / ever)
                   :ARG1-of (c6-11 / have-degree-91
                                   :ARG2 (c6-8 / bad-07
                                               :ARG1 c6-15)
                                   :ARG3 (c6-10 / most))))

# ::snt Don't we all.
# ::tokens ["Do", "n't", "we", "all", "."]
# ::lemmas ["do", "not", "we", "all", "."]
(c7-1 / event
      :polarity (c7-3 / amr-unknown)
      :mod (c7-0 / we
                 :mod (c7-2 / all)))

# ::snt the point u made if positive will go well with U bcoz God we shld always be positive
# ::tokens ["the", "point", "u", "made", "if", "positive", "will", "go", "well", "with", "U", "bcoz", "God", "we", "shld", "always", "be", "positive"]
# ::lemmas ["the", "point", "u", "make", "if", "positive", "will", "go", "well", "with", "U", "bcoz", "God", "we", "shld", "always", "be", "positive"]
(c8-4 / point-04
      :ARG0 (c8-0 / you)
      :ARG1 (c8-3 / have-condition-91
                  :ARG1 (c8-2 / positive
                              :domain (c8-6 / we)
                              :time (c8-9 / always)
                              :ARG1-of (c8-7 / cause-01
                                             :ARG0 (c8-11 / person
                                                          :name (c8-1 / name
                                                                      :op1 "God"))))
                  :ARG2 (c8-10 / go-on-15
                               :ARG1 (c8-8 / positive)
                               :ARG1-of (c8-5 / well-09))))

# ::snt It must have been a bad performance and she wants to right a wrong.
# ::tokens ["It", "must", "have", "been", "a", "bad", "performance", "and", "she", "wants", "to", "right", "a", "wrong", "."]
# ::lemmas ["it", "must", "have", "be", "a", "bad", "performance", "and", "she", "want", "to", "right", "a", "wrong", "."]
(c9-8 / and
      :op1 (c9-7 / infer-01
                 :ARG1 (c9-4 / perform-02
                             :ARG1-of (c9-0 / bad-07)
                             :domain (c9-2 / it)))
      :op2 (c9-6 / want-01
                 :ARG0 (c9-1 / she)
                 :ARG1 (c9-3 / right-02
                             :ARG0 c9-1
                             :ARG1 (c9-5 / wrong-04
                                         :ARG1 c9-1))))

# ::snt She'll have A LOT of traveling to do! RICH People the things they think of
# ::tokens ["She", "'ll", "have", "A", "LOT", "of", "traveling", "to", "do", "!", "RICH", "People", "the", "things", "they", "think", "of"]
# ::lemmas ["she", "'ll", "have", "a", "LOT", "of", "travel", "to", "do", "!", "rich", "people", "the", "thing", "they", "think", "of"]
(c10-0 / multi-sentence
       :snt1 (c10-2 / have-03
                    :ARG0 (c10-1 / she)
                    :ARG1 (c10-6 / travel-01
                                 :ARG0 c10-1
                                 :quant (c10-3 / lot)))
       :snt2 (c10-7 / think-01
                    :ARG0 (c10-4 / person)
                    :ARG1 (c10-5 / thing)))

# ::snt Good luck with that..the past is the past
# ::tokens ["Good", "luck", "with", "that", "..", "the", "past", "is", "the", "past"]
# ::lemmas ["good", "luck", "with", "that", "..", "the", "past", "be", "the", "past"]
(c11-0 / multi-sentence
       :snt1 (c11-3 / luck
                    :ARG1-of (c11-5 / good-02)
                    :purpose (c11-4 / that))
       :snt2 (c11-2 / past
                    :domain (c11-1 / past)))

# ::snt Umm, hell no. That hurt like hell
# ::tokens ["Umm", ",", "hell", "no", ".", "That", "hurt", "like", "hell"]
# ::lemmas ["Umm", ",", "hell", "no", ".", "that", "hurt", "like", "hell"]
(c12-0 / multi-sentence
       :snt1 (c12-3 / hell
                    :mod (c12-6 / umm
                                :mode expressive)
                    :mode expressive)
       :snt2 (c12-4 / hurt-02
                    :ARG0 (c12-5 / that)
                    :ARG1-of (c12-1 / resemble-01
                                    :ARG2 (c12-2 / hell))))

# ::snt Don't we all
# ::tokens ["Do", "n't", "we", "all"]
# ::lemmas ["do", "not", "we", "all"]
(c13-1 / event
       :polarity (c13-3 / amr-unknown)
       :mod (c13-0 / we
                   :mod (c13-2 / all)))

# ::snt Who doesn't?
# ::tokens ["Who", "does", "n't", "?"]
# ::lemmas ["who", "do", "not", "?"]
(c14-0 / event
       :mod (c14-1 / amr-unknown)
       :polarity -)

# ::snt Same. Wait just kidding
# ::tokens ["Same", ".", "Wait", "just", "kidding"]
# ::lemmas ["same", ".", "wait", "just", "kid"]
(c15-1 / multi-sentence
       :snt1 (c15-2 / same-01)
       :snt2 (c15-4 / wait-01
                    :ARG1 (c15-0 / you)
                    :ARG2 (c15-3 / kid-01
                                 :ARG0 c15-0
                                 :mod (c15-5 / just))
                    :mode imperative))

# ::snt Heck don't we all lol
# ::tokens ["Heck", "do", "n't", "we", "all", "lol"]
# ::lemmas ["heck", "do", "not", "we", "all", "lol"]
(c16-0 / event
       :mod (c16-3 / we
                   :mod (c16-4 / all))
       :mod (c16-1 / heck)
       :ARG2-of (c16-2 / laugh-01
                       :ARG0 c16-3
                       :manner (c16-5 / loud))
       :polarity -)

# ::snt lol same
# ::tokens ["lol", "same"]
# ::lemmas ["lol", "same"]
(c19-3 / same-01
       :manner (c19-1 / laugh-01
                      :ARG0 (c19-2 / i)
                      :manner (c19-0 / loud)))

# ::snt Don't we all really?!
# ::tokens ["Do", "n't", "we", "all", "really", "?", "!"]
# ::lemmas ["do", "not", "we", "all", "really", "?", "!"]
(c20-0 / request-confirmation-91
       :ARG1 (c20-1 / real-04
                    :ARG1 (c20-3 / we
                                 :mod (c20-2 / all))))

# ::snt Might as well time travel to the day she lost her head!! LOL..
# ::tokens ["Might", "as", "well", "time", "travel", "to", "the", "day", "she", "lost", "her", "head", "!", "!", "LOL", ".."]
# ::lemmas ["might", "as", "well", "time", "travel", "to", "the", "day", "she", "lose", "her", "head", "!", "!", "LOL", ".."]
(c21-3 / possible-01
       :ARG1 (c21-6 / travel-01
                    :ARG0 (c21-0 / she
                                 :part (c21-2 / head))
                    :ARG1 (c21-8 / time)
                    :ARG4 (c21-9 / day
                                 :time-of (c21-4 / lose-02
                                                 :ARG0 c21-0
                                                 :ARG1 c21-2))
                    :mod (c21-1 / as-well))
       :ARG2-of (c21-10 / laugh-01
                        :ARG0 (c21-7 / i)
                        :manner (c21-5 / loud)
                        :mode expressive))

# ::snt She better time travel to the gym
# ::tokens ["She", "better", "time", "travel", "to", "the", "gym"]
# ::lemmas ["she", "well", "time", "travel", "to", "the", "gym"]
(c22-3 / travel-01
       :ARG0 (c22-1 / she)
       :ARG4 (c22-6 / gym)
       :time (c22-5 / time
                    :ARG1-of (c22-2 / have-degree-91
                                    :ARG2 (c22-4 / good-02
                                                 :ARG1 c22-3)
                                    :ARG3 (c22-0 / more))))

# ::snt only happened way back
# ::tokens ["only", "happened", "way", "back"]
# ::lemmas ["only", "happen", "way", "back"]
(c23-1 / be-temporally-at-91
       :ARG2 (c23-2 / back
                    :extent (c23-0 / way))
       :mod (c23-3 / only))

# ::snt Who you lost it to Riri. If he ain't a zoe, u ain't lost it yet.
# ::tokens ["Who", "you", "lost", "it", "to", "Riri", ".", "If", "he", "ai", "n't", "a", "zoe", ",", "u", "ai", "n't", "lost", "it", "yet", "."]
# ::lemmas ["who", "you", "lose", "it", "to", "Riri", ".", "if", "he", "be", "not", "a", "zoe", ",", "u", "ai", "not", "lose", "it", "yet", "."]
(c24-2 / multi-sentence
       :snt1 (c24-8 / lose-02
                    :ARG0 (c24-1 / you)
                    :ARG1 (c24-9 / it)
                    :ARG2 (c24-7 / person
                                 :name (c24-3 / name
                                              :op1 "Riri")))
       :snt2 (c24-11 / lose-02
                     :ARG0 (c24-10 / you)
                     :ARG1 (c24-4 / it)
                     :time (c24-0 / yet)
                     :condition (c24-5 / zoe
                                       :domain (c24-6 / he)
                                       :polarity -)
                     :polarity -))

# ::snt Wouldn't that be something, if i knew then what I know now.
# ::tokens ["Would", "n't", "that", "be", "something", ",", "if", "i", "knew", "then", "what", "I", "know", "now", "."]
# ::lemmas ["would", "not", "that", "be", "something", ",", "if", "i", "know", "then", "what", "i", "know", "now", "."]
(c25-1 / something
       :domain (c25-5 / that)
       :condition (c25-3 / know-01
                         :ARG0 (c25-4 / i)
                         :time (c25-0 / now))
       :ARG1-of (c25-2 / request-confirmation-91))

# ::snt It's going to be hard
# ::tokens ["It", "'s", "going", "to", "be", "hard"]
# ::lemmas ["it", "be", "go", "to", "be", "hard"]
(c26-0 / hard-02
       :ARG1 (c26-1 / it))

# ::snt Long long time ago
# ::tokens ["Long", "long", "time", "ago"]
# ::lemmas ["long", "long", "time", "ago"]
(c27-0 / before
       :op1 (c27-1 / now)
       :quant (c27-3 / time
                     :ARG1-of (c27-2 / long-03)))

# ::snt hi riianna the guy who got my virginity first was jesse miranda age11=15
# ::tokens ["hi", "riianna", "the", "guy", "who", "got", "my", "virginity", "first", "was", "jesse", "miranda", "age11=15"]
# ::lemmas ["hi", "riianna", "the", "guy", "who", "get", "my", "virginity", "first", "be", "jesse", "miranda", "age11=15"]
(c28-3 / multi-sentence
       :snt1 (c28-7 / hi)
       :snt2 (c28-4 / say-01
                    :ARG1 (c28-8 / person
                                 :name (c28-2 / name
                                              :op1 "Riianna"))
                    :ARG2 (c28-12 / guy
                                  :domain (c28-5 / person
                                                 :name (c28-9 / name
                                                              :op1 "Jesse"
                                                              :op2 "Miranda")
                                                 :age (c28-1 / between
                                                             :op1 11
                                                             :op2 15))
                                  :ARG0-of (c28-10 / get-01
                                                   :ARG1 (c28-6 / virginity
                                                                :poss (c28-11 / i))
                                                   :ord (c28-0 / ordinal-entity
                                                               :value 1)))))

# ::snt Almost everyone wants to time travel to the day they lost their virginity. Even me!
# ::tokens ["Almost", "everyone", "wants", "to", "time", "travel", "to", "the", "day", "they", "lost", "their", "virginity", ".", "Even", "me", "!"]
# ::lemmas ["almost", "everyone", "want", "to", "time", "travel", "to", "the", "day", "they", "lose", "their", "virginity", ".", "even", "i", "!"]
(c29-0 / multi-sentence
       :snt1 (c29-6 / want-01
                    :ARG0 (c29-4 / everyone
                                 :mod (c29-2 / almost))
                    :ARG1 (c29-8 / travel-01
                                 :ARG0 c29-4
                                 :ARG1 (c29-10 / day
                                               :time-of (c29-5 / lose-02
                                                               :ARG0 (c29-11 / they)
                                                               :ARG1 (c29-3 / virginity
                                                                            :poss c29-11)))
                                 :time (c29-7 / time)))
       :snt2 (c29-9 / i
                    :mod (c29-1 / even)))

# ::snt Hi
# ::tokens ["Hi"]
# ::lemmas ["hi"]
(c30-0 / hi)

# ::snt N become a nun?
# ::tokens ["N", "become", "a", "nun", "?"]
# ::lemmas ["n", "become", "a", "nun", "?"]
(c31-0 / become-01
       :polarity (c31-4 / amr-unknown)
       :ARG1 (c31-3 / person
                    :name (c31-1 / name
                                 :op1 "N"))
       :ARG2 (c31-2 / nun))

# ::snt Don't we all lol
# ::tokens ["Do", "n't", "we", "all", "lol"]
# ::lemmas ["do", "not", "we", "all", "lol"]
(c32-0 / request-confirmation-91
       :ARG1 (c32-2 / we
                    :mod (c32-3 / all))
       :ARG2 (c32-1 / laugh-01
                    :ARG0 c32-2
                    :manner (c32-4 / loud)))
