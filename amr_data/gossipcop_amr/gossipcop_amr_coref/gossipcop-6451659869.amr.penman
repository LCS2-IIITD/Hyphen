# ::snt y'all are pathetic
# ::tokens ["y'", "all", "are", "pathetic"]
# ::lemmas ["you", "all", "be", "pathetic"]
(c1-1 / pathetic
      :domain (c1-0 / you
                    :mod (c1-2 / all)))

# ::snt A+ TROLL I'M LAUGHING
# ::tokens ["A+", "TROLL", "I'M", "LAUGHING"]
# ::lemmas ["A+", "TROLL", "i'm", "laugh"]
(c2-3 / and
      :op1 (c2-2 / argue-01
                 :ARG0 (c2-0 / i))
      :op2 (c2-1 / joke-01
                 :ARG0 c2-0))

# ::snt it's a food baby, probably guacamole
# ::tokens ["it", "'s", "a", "food", "baby", ",", "probably", "guacamole"]
# ::lemmas ["it", "be", "a", "food", "baby", ",", "probably", "guacamole"]
(c3-3 / contrast-01
      :ARG1 (c3-1 / baby
                  :mod (c3-0 / food)
                  :domain (c3-4 / it))
      :ARG2 (c3-5 / guacamole
                  :mod (c3-2 / probable)
                  :domain c3-4))

# ::snt they were ON A BREAK!!!
# ::tokens ["they", "were", "ON", "A", "BREAK", "!", "!", "!"]
# ::lemmas ["they", "be", "ON", "A", "BREAK", "!", "!", "!"]
(c4-0 / break-13
      :ARG0 (c4-1 / they)
      :mode expressive)

# ::snt Boy, that was the longest "break" in recorded history.
# ::tokens ["Boy", ",", "that", "was", "the", "longest", "\"", "break", "\"", "in", "recorded", "history", "."]
# ::lemmas ["boy", ",", "that", "be", "the", "long", "\"", "break", "\"", "in", "record", "history", "."]
(c5-0 / break-01
      :ARG1-of (c5-3 / have-degree-91
                     :ARG2 (c5-4 / long-03
                                 :ARG1 c5-0)
                     :ARG3 (c5-1 / most)
                     :ARG5 (c5-6 / history
                                 :ARG1-of (c5-2 / record-01)))
      :mod (c5-5 / boy
                 :mode expressive))

# ::snt me too!!! Her baby would be the cutest thing ever
# ::tokens ["me", "too", "!", "!", "!", "Her", "baby", "would", "be", "the", "cutest", "thing", "ever"]
# ::lemmas ["i", "too", "!", "!", "!", "her", "baby", "would", "be", "the", "cut", "thing", "ever"]
(c6-1 / multi-sentence
      :snt1 (c6-8 / i
                  :mod (c6-9 / too))
      :snt2 (c6-4 / have-degree-91
                  :ARG1 (c6-0 / baby
                              :ARG0-of (c6-7 / have-rel-role-91
                                             :ARG1 (c6-2 / she)
                                             :ARG2 (c6-6 / child)))
                  :ARG2 (c6-11 / cute)
                  :ARG3 (c6-5 / most)
                  :ARG5 (c6-10 / thing
                               :time (c6-3 / ever))))

# ::snt I just saw. Omg I really hope so.
# ::tokens ["I", "just", "saw", ".", "Omg", "I", "really", "hope", "so", "."]
# ::lemmas ["i", "just", "see", ".", "Omg", "i", "really", "hope", "so", "."]
(c7-2 / multi-sentence
      :snt1 (c7-3 / see-01
                  :ARG0 (c7-8 / i)
                  :time (c7-7 / just))
      :snt2 (c7-6 / hope-01
                  :ARG0 (c7-4 / i)
                  :ARG1 (c7-0 / so)
                  :degree (c7-5 / really)
                  :mod (c7-1 / oh-my-god
                             :mode expressive)))

# ::snt her rep says no, but search for pictures. It's definitely a pregnant belly
# ::tokens ["her", "rep", "says", "no", ",", "but", "search", "for", "pictures", ".", "It", "'s", "definitely", "a", "pregnant", "belly"]
# ::lemmas ["her", "rep", "say", "no", ",", "but", "search", "for", "picture", ".", "it", "be", "definitely", "a", "pregnant", "belly"]
(c8-2 / multi-sentence
      :snt1 (c8-4 / say-01
                  :ARG0 (c8-8 / person
                              :ARG0-of (c8-6 / represent-01
                                             :ARG1 (c8-0 / she)))
                  :ARG1 (c8-3 / no)
                  :concession-of (c8-11 / search-01
                                        :ARG0 c8-8
                                        :ARG1 (c8-5 / picture)))
      :snt2 (c8-1 / belly
                  :ARG1-of (c8-9 / impregnate-01)
                  :mod (c8-10 / definite)
                  :domain (c8-7 / it)))

# ::snt WAHT
# ::tokens ["WAHT"]
# ::lemmas ["waht"]
(c9-0 / wash-01)

# ::snt Floor, chair, desk... Bishop doesn't fit anywhere on !
# ::tokens ["Floor", ",", "chair", ",", "desk", "...", "Bishop", "does", "n't", "fit", "anywhere", "on", "!"]
# ::lemmas ["floor", ",", "chair", ",", "desk", "...", "Bishop", "do", "not", "fit", "anywhere", "on", "!"]
(c10-0 / fit-06
       :ARG1 (c10-3 / person
                    :name (c10-2 / name
                                 :op1 "Bishop"))
       :ARG2 (c10-6 / anywhere
                    :location-of (c10-1 / or
                                        :op1 (c10-4 / floor)
                                        :op2 (c10-5 / chair)
                                        :op3 (c10-7 / desk)))
       :polarity -
       :mode expressive)

# ::snt Viewers have "found her place"at . . .. . .hard to stomach.
# ::tokens ["Viewers", "have", "\"", "found", "her", "place\"at", ".", ".", "..", ".", ".hard", "to", "stomach", "."]
# ::lemmas ["viewer", "have", "\"", "find", "she", "place\"at", ".", ".", "..", ".", ".hard", "to", "stomach", "."]
(c11-0 / find-01
       :ARG0 (c11-6 / person
                    :ARG0-of (c11-4 / view-01))
       :ARG1 (c11-2 / place
                    :poss (c11-3 / she)
                    :ARG1-of (c11-5 / hard-02
                                    :ARG2-of (c11-1 / stomach-01))))

# ::snt Bishop will finally find her place when she walks through the door and never returns to !
# ::tokens ["Bishop", "will", "finally", "find", "her", "place", "when", "she", "walks", "through", "the", "door", "and", "never", "returns", "to", "!"]
# ::lemmas ["Bishop", "will", "finally", "find", "her", "place", "when", "she", "walk", "through", "the", "door", "and", "never", "return", "to", "!"]
(c12-0 / find-01
       :ARG0 (c12-5 / person
                    :name (c12-1 / name
                                 :op1 "Bishop"))
       :ARG1 (c12-2 / place
                    :poss c12-5)
       :time (c12-8 / and
                    :op1 (c12-7 / walk-01
                                :ARG0 c12-5
                                :path (c12-9 / door))
                    :op2 (c12-3 / return-01
                                :ARG1 c12-5
                                :ARG4 c12-2
                                :time (c12-4 / ever)
                                :polarity -))
       :mod (c12-6 / final)
       :mode expressive)
