# ::snt She should Run not walk!!!
# ::tokens ["She", "should", "Run", "not", "walk", "!", "!", "!"]
# ::lemmas ["she", "should", "run", "not", "walk", "!", "!", "!"]
(c3-1 / recommend-01
      :ARG1 (c3-4 / run-02
                  :ARG0 (c3-0 / she)
                  :ARG1-of (c3-3 / instead-of-91
                                 :ARG2 (c3-2 / walk-01
                                             :ARG0 c3-0))))

# ::snt Could care less.
# ::tokens ["Could", "care", "less", "."]
# ::lemmas ["could", "care", "less", "."]
(c4-2 / possible-01
      :ARG1 (c4-1 / have-degree-91
                  :ARG2 (c4-0 / care-01)
                  :ARG3 (c4-3 / less)))

# ::snt Wait till she gets a load of the taxes.
# ::tokens ["Wait", "till", "she", "gets", "a", "load", "of", "the", "taxes", "."]
# ::lemmas ["wait", "till", "she", "get", "a", "load", "of", "the", "taxis", "."]
(c5-3 / wait-01
      :ARG1 (c5-0 / you)
      :time (c5-5 / till
                  :op1 (c5-6 / get-01
                             :ARG0 (c5-1 / she)
                             :ARG1 (c5-2 / load
                                         :ARG1-of (c5-4 / include-91
                                                        :ARG2 (c5-7 / tax-01)))))
      :mode imperative)

# ::snt She must have already been there and applied when she was crying about Hillary.
# ::tokens ["She", "must", "have", "already", "been", "there", "and", "applied", "when", "she", "was", "crying", "about", "Hillary", "."]
# ::lemmas ["she", "must", "have", "already", "be", "there", "and", "apply", "when", "she", "be", "cry", "about", "Hillary", "."]
(c6-7 / infer-01
      :ARG1 (c6-3 / and
                  :op1 (c6-0 / be-located-at-91
                             :ARG1 (c6-2 / she)
                             :ARG2 (c6-8 / there)
                             :time (c6-9 / already))
                  :op2 (c6-6 / apply-01
                             :ARG0 c6-2
                             :time (c6-5 / cry-02
                                         :ARG0 c6-2
                                         :topic (c6-4 / person
                                                      :name (c6-1 / name
                                                                  :op1 "Hillary"))))))

# ::snt See ya Miley. Now take your riches you got from All your fans. To another country and pay their high tax rate. DUH
# ::tokens ["See", "ya", "Miley", ".", "Now", "take", "your", "riches", "you", "got", "from", "All", "your", "fans", ".", "To", "another", "country", "and", "pay", "their", "high", "tax", "rate", ".", "DUH"]
# ::lemmas ["see", "ya", "Miley", ".", "now", "take", "your", "rich", "you", "get", "from", "all", "your", "fan", ".", "to", "another", "country", "and", "pay", "their", "high", "tax", "rate", ".", "DUH"]
(c7-8 / multi-sentence
      :snt1 (c7-0 / see-01
                  :ARG1 (c7-16 / person
                               :name (c7-14 / name
                                            :op1 "Miley")))
      :snt2 (c7-6 / and
                  :op1 (c7-5 / take-01
                             :ARG0 (c7-1 / you)
                             :ARG1 (c7-12 / thing
                                          :ARG1-of (c7-7 / get-01
                                                         :ARG0 c7-1
                                                         :ARG2 (c7-13 / fan
                                                                      :mod (c7-4 / all)
                                                                      :poss c7-1)))
                             :ARG3 (c7-11 / country
                                          :mod (c7-3 / another))
                             :time (c7-10 / now)
                             :mode imperative)
                  :op2 (c7-9 / pay-01
                             :ARG0 c7-1
                             :ARG3 (c7-15 / rate
                                          :mod (c7-17 / tax-01)
                                          :ARG1-of (c7-2 / high-02)
                                          :poss c7-11)
                             :mode imperative))
      :snt3 (c7-18 / duh
                   :mode expressive))

# ::snt Are you talking about this disgusting thing? Good riddance is right. Get out and stay out. Bye bye miley!!
# ::tokens ["Are", "you", "talking", "about", "this", "disgusting", "thing", "?", "Good", "riddance", "is", "right", ".", "Get", "out", "and", "stay", "out", ".", "Bye", "bye", "miley", "!", "!"]
# ::lemmas ["be", "you", "talk", "about", "this", "disgusting", "thing", "?", "good", "riddance", "be", "right", ".", "get", "out", "and", "stay", "out", ".", "bye", "bye", "miley", "!", "!"]
(c8-13 / multi-sentence
       :snt1 (c8-7 / talk-01
                   :polarity (c8-9 / amr-unknown)
                   :ARG0 (c8-5 / you)
                   :ARG1 (c8-14 / thing
                                :ARG0-of (c8-19 / disgust-01)
                                :mod (c8-18 / this)))
       :snt2 (c8-16 / right-02
                    :ARG1 (c8-2 / riddance
                                :ARG1-of (c8-10 / good-02)))
       :snt3 (c8-6 / and
                   :op1 (c8-1 / get-05
                              :ARG0 (c8-8 / you)
                              :ARG2 (c8-3 / out)
                              :mode imperative)
                   :op2 (c8-0 / stay-01
                              :ARG1 c8-8
                              :ARG3 (c8-11 / out)
                              :mode imperative))
       :snt4 (c8-12 / bye
                    :ARG1-of (c8-4 / say-01
                                   :ARG2 (c8-17 / person
                                                :name (c8-15 / name
                                                             :op1 "Miley")))
                    :mode expressive))

# ::snt Bye, Snowflake...
# ::tokens ["Bye", ",", "Snowflake", "..."]
# ::lemmas ["Bye", ",", "Snowflake", "..."]
(c9-3 / say-01
      :ARG1 (c9-1 / bye)
      :ARG2 (c9-2 / person
                  :name (c9-0 / name
                              :op1 "Snowflake")))

# ::snt Kick rocks otch.
# ::tokens ["Kick", "rocks", "otch", "."]
# ::lemmas ["Kick", "rock", "otch", "."]
(c10-2 / kick-01
       :ARG0 (c10-1 / you)
       :ARG1 (c10-0 / rock)
       :mod (c10-3 / otch)
       :mode imperative)

# ::snt Yayyyyy
# ::tokens ["Yayyyyy"]
# ::lemmas ["Yayyyyy"]
(c11-0 / yay)

# ::snt Sweet. I wish more would have kept their word.
# ::tokens ["Sweet", ".", "I", "wish", "more", "would", "have", "kept", "their", "word", "."]
# ::lemmas ["sweet", ".", "i", "wish", "more", "would", "have", "keep", "their", "word", "."]
(c12-0 / multi-sentence
       :snt1 (c12-1 / sweet-03)
       :snt2 (c12-6 / wish-01
                    :ARG0 (c12-7 / i)
                    :ARG1 (c12-3 / keep-01
                                 :ARG0 (c12-4 / person
                                              :quant (c12-2 / more))
                                 :ARG1 (c12-5 / word
                                              :poss (c12-8 / they)))))

# ::snt Good riddance little twerp.
# ::tokens ["Good", "riddance", "little", "twerp", "."]
# ::lemmas ["good", "riddance", "little", "twerp", "."]
(c13-3 / twerp
       :mod (c13-2 / little)
       :ARG1-of (c13-0 / good-02)
       :mod (c13-1 / riddance))

# ::snt Hookup with a Muslim so we never have to see your face again, Enjoy the abuse and Dream of home.
# ::tokens ["Hookup", "with", "a", "Muslim", "so", "we", "never", "have", "to", "see", "your", "face", "again", ",", "Enjoy", "the", "abuse", "and", "Dream", "of", "home", "."]
# ::lemmas ["Hookup", "with", "a", "Muslim", "so", "we", "never", "have", "to", "see", "your", "face", "again", ",", "enjoy", "the", "abuse", "and", "Dream", "of", "home", "."]
(c14-15 / and
        :op1 (c14-9 / hook-up-02
                    :ARG1 (c14-11 / we)
                    :ARG2 (c14-10 / person
                                  :mod (c14-6 / religious-group
                                              :name (c14-3 / name
                                                           :op1 "Islam")))
                    :purpose (c14-0 / obligate-01
                                    :ARG1 c14-11
                                    :ARG2 (c14-5 / see-01
                                                 :ARG0 c14-11
                                                 :ARG1 (c14-1 / face
                                                              :part-of (c14-2 / you))
                                                 :mod (c14-14 / again)
                                                 :time (c14-8 / ever))
                                    :polarity -))
        :op2 (c14-16 / enjoy-01
                     :ARG0 c14-2
                     :ARG1 (c14-12 / and
                                   :op1 (c14-4 / abuse-01
                                               :ARG1 c14-2)
                                   :op2 (c14-7 / dream-01
                                               :ARG0 c14-2
                                               :ARG1 (c14-13 / home)))))

# ::snt Silly woman
# ::tokens ["Silly", "woman"]
# ::lemmas ["silly", "woman"]
(c15-0 / woman
       :mod (c15-1 / silly))

# ::snt Why should she?
# ::tokens ["Why", "should", "she", "?"]
# ::lemmas ["why", "should", "she", "?"]
(c16-1 / cause-01
       :ARG0 (c16-3 / amr-unknown)
       :ARG1 (c16-2 / recommend-01
                    :ARG2 (c16-0 / she)))

# ::snt Good riddance!
# ::tokens ["Good", "riddance", "!"]
# ::lemmas ["good", "riddance", "!"]
(c17-1 / riddance
       :ARG1-of (c17-0 / good-02)
       :mode expressive)

# ::snt The problem is people like her make those declarations and then change their minds.
# ::tokens ["The", "problem", "is", "people", "like", "her", "make", "those", "declarations", "and", "then", "change", "their", "minds", "."]
# ::lemmas ["the", "problem", "be", "people", "like", "she", "make", "those", "declaration", "and", "then", "change", "their", "mind", "."]
(c18-7 / and
       :op1 (c18-8 / declare-02
                   :ARG0 (c18-4 / person
                                :ARG1-of (c18-3 / resemble-01
                                                :ARG2 (c18-2 / she)))
                   :ARG1 (c18-6 / that))
       :op2 (c18-5 / change-01
                   :ARG0 c18-4
                   :ARG1 (c18-0 / mind-05
                                :ARG0 c18-4)
                   :time (c18-9 / then))
       :domain (c18-1 / problem))

# ::snt Not in Britain. They already have a huge VD problem. She wont have to worry about spreading it or finding VD infected partners.
# ::tokens ["Not", "in", "Britain", ".", "They", "already", "have", "a", "huge", "VD", "problem", ".", "She", "wo", "nt", "have", "to", "worry", "about", "spreading", "it", "or", "finding", "VD", "infected", "partners", "."]
# ::lemmas ["not", "in", "Britain", ".", "they", "already", "have", "a", "huge", "VD", "problem", ".", "she", "will", "not", "have", "to", "worry", "about", "spread", "it", "or", "find", "VD", "infect", "partner", "."]
(c19-8 / multi-sentence
       :snt1 (c19-7 / be-located-at-91
                    :ARG1 (c19-11 / country
                                  :name (c19-13 / name
                                                :op1 "Britain"))
                    :polarity -)
       :snt2 (c19-3 / have-03
                    :ARG0 (c19-5 / they)
                    :ARG1 (c19-14 / problem
                                  :topic (c19-18 / disease
                                                 :name (c19-10 / name
                                                               :op1 "vD"))
                                  :mod (c19-16 / huge))
                    :time (c19-4 / already))
       :snt3 (c19-1 / obligate-01
                    :ARG1 (c19-0 / she)
                    :ARG2 (c19-15 / worry-02
                                  :ARG0 (c19-6 / or
                                               :op1 (c19-2 / spread-02
                                                           :ARG0 c19-0
                                                           :ARG1 c19-18)
                                               :op2 (c19-12 / find-01
                                                            :ARG0 c19-0
                                                            :ARG1 (c19-9 / partner
                                                                         :ARG1-of (c19-17 / infect-01
                                                                                          :ARG2 c19-18))))
                                  :ARG1 c19-0)
                    :polarity -))

# ::snt Awesome, just dont beg to come back. Wish all haters would leave.
# ::tokens ["Awesome", ",", "just", "do", "nt", "beg", "to", "come", "back", ".", "Wish", "all", "haters", "would", "leave", "."]
# ::lemmas ["Awesome", ",", "just", "do", "not", "beg", "to", "come", "back", ".", "wish", "all", "hater", "would", "leave", "."]
(c20-2 / multi-sentence
       :snt1 (c20-11 / awe-01
                     :ARG0 (c20-0 / beg-01
                                  :ARG0 (c20-1 / you)
                                  :ARG2 (c20-7 / come-01
                                               :ARG1 c20-1
                                               :direction (c20-3 / back))
                                  :mod (c20-9 / just)
                                  :polarity -
                                  :mode imperative))
       :snt2 (c20-8 / wish-01
                    :ARG0 (c20-10 / i)
                    :ARG1 (c20-4 / leave-11
                                 :ARG0 (c20-5 / person
                                              :ARG0-of (c20-6 / hate-01)
                                              :mod (c20-12 / all)))))

# ::snt Yep...good riddance!
# ::tokens ["Yep", "...", "good", "riddance", "!"]
# ::lemmas ["yep", "...", "good", "riddance", "!"]
(c21-1 / riddance
       :ARG1-of (c21-0 / good-02))

# ::snt Bye you no talent left wing but job
# ::tokens ["Bye", "you", "no", "talent", "left", "wing", "but", "job"]
# ::lemmas ["bye", "you", "no", "talent", "leave", "wing", "but", "job"]
(c22-1 / say-01
       :ARG0 (c22-5 / i)
       :ARG1 (c22-0 / bye
                    :mode expressive)
       :ARG2 (c22-3 / contrast-01
                    :ARG1 (c22-6 / talent
                                 :ARG1-of (c22-2 / left-19)
                                 :polarity -)
                    :ARG2 (c22-4 / job)))

# ::snt Is this true? Don't lie to me or I will hurt you with my cane.
# ::tokens ["Is", "this", "true", "?", "Do", "n't", "lie", "to", "me", "or", "I", "will", "hurt", "you", "with", "my", "cane", "."]
# ::lemmas ["be", "this", "true", "?", "do", "not", "lie", "to", "i", "or", "i", "will", "hurt", "you", "with", "my", "cane", "."]
(c24-1 / multi-sentence
       :snt1 (c24-6 / true-01
                    :polarity (c24-8 / amr-unknown)
                    :ARG1 (c24-10 / this))
       :snt2 (c24-4 / lie-08
                    :ARG0 (c24-0 / you)
                    :ARG2 (c24-7 / i)
                    :condition-of (c24-3 / hurt-01
                                         :ARG0 (c24-2 / i)
                                         :ARG1 (c24-9 / you)
                                         :instrument (c24-5 / cane
                                                            :poss c24-2))
                    :mode imperative
                    :polarity -))

# ::snt Good riddance.
# ::tokens ["Good", "riddance", "."]
# ::lemmas ["good", "riddance", "."]
(c25-1 / riddance
       :ARG1-of (c25-0 / good-02))

# ::snt SHE might've forgotten, but WE haven't.
# ::tokens ["SHE", "might", "'ve", "forgotten", ",", "but", "WE", "have", "n't", "."]
# ::lemmas ["SHE", "might", "'ve", "forget", ",", "but", "we", "have", "not", "."]
(c26-3 / contrast-01
       :ARG1 (c26-1 / possible-01
                    :ARG1 (c26-0 / forget-01
                                 :ARG0 (c26-4 / we)))
       :ARG2 (c26-2 / forget-01
                    :ARG0 c26-4
                    :polarity -))

# ::snt Living outside of America will do wonders to your attitude about it - for the betterment of it's citizens
# ::tokens ["Living", "outside", "of", "America", "will", "do", "wonders", "to", "your", "attitude", "about", "it", "-", "for", "the", "betterment", "of", "it", "'s", "citizens"]
# ::lemmas ["live", "outside", "of", "America", "will", "do", "wonder", "to", "your", "attitude", "about", "it", "-", "for", "the", "betterment", "of", "it", "be", "citizen"]
(c27-8 / do-02
       :ARG0 (c27-4 / live-01
                    :ARG0 (c27-2 / you)
                    :location (c27-0 / outside
                                     :op1 (c27-5 / country
                                                 :name (c27-3 / name
                                                              :op1 "America"))))
       :ARG1 (c27-6 / wonder)
       :ARG2 (c27-7 / attitude
                    :topic c27-5
                    :poss c27-2)
       :purpose (c27-1 / better-01
                       :ARG1 (c27-9 / citizen
                                    :poss c27-5)))

# ::snt Bye Felecia....
# ::tokens ["Bye", "Felecia", "...."]
# ::lemmas ["Bye", "Felecia", "...."]
(c28-3 / say-01
       :ARG0 (c28-2 / i)
       :ARG2 (c28-1 / person
                    :name (c28-0 / name
                                 :op1 "Felecia")))

# ::snt We dont want It either!!
# ::tokens ["We", "do", "nt", "want", "It", "either", "!", "!"]
# ::lemmas ["we", "do", "not", "want", "it", "either", "!", "!"]
(c29-0 / want-01
       :ARG0 (c29-3 / we)
       :ARG1 (c29-2 / it)
       :mod (c29-1 / either)
       :polarity -)

# ::snt Nope no backsies she's urs now!
# ::tokens ["Nope", "no", "backsies", "she", "'s", "urs", "now", "!"]
# ::lemmas ["nope", "no", "backsie", "she", "be", "ur", "now", "!"]
(c30-5 / and
       :op1 (c30-3 / have-polarity-91
                   :ARG2 -)
       :op2 (c30-0 / back
                   :polarity -)
       :op3 (c30-4 / be-temporally-at-91
                   :ARG1 (c30-2 / she)
                   :ARG2 (c30-1 / now)))

# ::snt She should have that engraved on her headstone when her time comes.
# ::tokens ["She", "should", "have", "that", "engraved", "on", "her", "headstone", "when", "her", "time", "comes", "."]
# ::lemmas ["she", "should", "have", "that", "engrave", "on", "her", "headstone", "when", "her", "time", "come", "."]
(c31-1 / recommend-01
       :ARG1 (c31-2 / engrave-01
                    :ARG1 (c31-5 / that)
                    :ARG2 (c31-3 / headstone
                                 :part-of (c31-0 / she))
                    :time (c31-4 / come-01
                                 :ARG1 (c31-6 / time
                                              :poss c31-0))))

# ::snt Erm... We don't want her here in England.. Let her lick her hammer somewhere else and have her hillary posters!!
# ::tokens ["Erm", "...", "We", "do", "n't", "want", "her", "here", "in", "England", "..", "Let", "her", "lick", "her", "hammer", "somewhere", "else", "and", "have", "her", "hillary", "posters", "!", "!"]
# ::lemmas ["erm", "...", "we", "do", "not", "want", "she", "here", "in", "England", "..", "let", "she", "lick", "her", "hammer", "somewhere", "else", "and", "have", "her", "hillary", "poster", "!", "!"]
(c34-10 / multi-sentence
        :snt1 (c34-17 / want-01
                      :ARG0 (c34-2 / we)
                      :ARG1 (c34-0 / she)
                      :location (c34-7 / here
                                       :location (c34-12 / country
                                                         :name (c34-14 / name
                                                                       :op1 "England")))
                      :polarity -)
        :snt2 (c34-1 / let-01
                     :ARG0 (c34-5 / you)
                     :ARG1 (c34-8 / and
                                  :op1 (c34-9 / lick-01
                                              :ARG0 (c34-4 / she)
                                              :ARG1 (c34-18 / hammer
                                                            :poss c34-4)
                                              :location (c34-3 / somewhere
                                                               :mod (c34-15 / else)))
                                  :op2 (c34-6 / have-03
                                              :ARG0 c34-5
                                              :ARG1 (c34-16 / person
                                                            :ARG0-of (c34-11 / post-01)
                                                            :mod (c34-13 / hill)
                                                            :poss c34-4)
                                              :mode imperative))
                     :mode imperative))

# ::snt is she lying again?
# ::tokens ["is", "she", "lying", "again", "?"]
# ::lemmas ["be", "she", "lie", "again", "?"]
(c35-1 / lie-08
       :polarity (c35-3 / amr-unknown)
       :ARG0 (c35-0 / she)
       :mod (c35-2 / again))

# ::snt Do it! No one needs to know! No one cares! Little trolls never matter!
# ::tokens ["Do", "it", "!", "No", "one", "needs", "to", "know", "!", "No", "one", "cares", "!", "Little", "trolls", "never", "matter", "!"]
# ::lemmas ["do", "it", "!", "no", "one", "need", "to", "know", "!", "no", "one", "care", "!", "little", "troll", "never", "matter", "!"]
(c38-2 / multi-sentence
       :snt1 (c38-12 / do-02
                     :ARG0 (c38-0 / you)
                     :ARG1 (c38-10 / it)
                     :mode imperative)
       :snt2 (c38-1 / need-01
                    :ARG0 (c38-4 / no-one)
                    :ARG1 (c38-5 / know-01
                                 :ARG0 c38-4))
       :snt3 (c38-9 / care-01
                    :ARG0 (c38-6 / no-one))
       :snt4 (c38-7 / matter-01
                    :ARG1 (c38-11 / troll
                                  :mod (c38-8 / little))
                    :time (c38-3 / ever)
                    :polarity -))

# ::snt So long.
# ::tokens ["So", "long", "."]
# ::lemmas ["so", "long", "."]
(c39-0 / long-03
       :degree (c39-1 / so))

# ::snt Praise Jesus!
# ::tokens ["Praise", "Jesus", "!"]
# ::lemmas ["praise", "Jesus", "!"]
(c40-2 / praise-01
       :ARG0 (c40-1 / you)
       :ARG1 (c40-3 / person
                    :name (c40-0 / name
                                 :op1 "Jesus"))
       :mode imperative)

# ::snt Miley Cyrus the Virus and the defunct UK can enjoy each other! Good riddance...again, see ya next week in the USA,where you hit the lottery!
# ::tokens ["Miley", "Cyrus", "the", "Virus", "and", "the", "defunct", "UK", "can", "enjoy", "each", "other", "!", "Good", "riddance", "...", "again", ",", "see", "ya", "next", "week", "in", "the", "USA", ",", "where", "you", "hit", "the", "lottery", "!"]
# ::lemmas ["Miley", "Cyrus", "the", "Virus", "and", "the", "defunct", "UK", "can", "enjoy", "each", "other", "!", "good", "riddance", "...", "again", ",", "see", "ya", "next", "week", "in", "the", "USA", ",", "where", "you", "hit", "the", "lottery", "!"]
(c41-10 / multi-sentence
        :snt1 (c41-18 / possible-01
                      :ARG1 (c41-17 / enjoy-01
                                    :ARG0 (c41-6 / and
                                                 :op1 (c41-11 / person
                                                              :name (c41-15 / name
                                                                            :op1 "Miley"
                                                                            :op2 "Cyrus"
                                                                            :op3 "the"
                                                                            :op4 "Virus"))
                                                 :op2 (c41-13 / country
                                                              :name (c41-12 / name
                                                                            :op1 "UK")
                                                              :mod (c41-21 / defunct)))
                                    :ARG1 (c41-8 / each
                                                 :mod (c41-2 / other))))
        :snt2 (c41-16 / riddance
                      :ARG1-of (c41-7 / good-02))
        :snt3 (c41-0 / see-01
                     :ARG0 (c41-3 / you
                                  :ARG1-of c41-0)
                     :time (c41-20 / week
                                   :mod (c41-19 / next))
                     :location (c41-9 / country
                                      :name (c41-14 / name
                                                    :op1 "USA")
                                      :location-of (c41-4 / hit-02
                                                          :ARG0 c41-3
                                                          :ARG1 (c41-1 / lottery)))
                     :mod (c41-5 / again)
                     :mode imperative))

# ::snt Could we possibly convince her to take million other brainless LIBERAL imbeciles with her? I'm sure she can afford to pay their way.
# ::tokens ["Could", "we", "possibly", "convince", "her", "to", "take", "million", "other", "brainless", "LIBERAL", "imbeciles", "with", "her", "?", "I", "'m", "sure", "she", "can", "afford", "to", "pay", "their", "way", "."]
# ::lemmas ["could", "we", "possibly", "convince", "she", "to", "take", "million", "other", "brainless", "LIBERAL", "imbecile", "with", "she", "?", "i", "be", "sure", "she", "can", "afford", "to", "pay", "their", "way", "."]
(c42-12 / multi-sentence
        :snt1 (c42-17 / possible-01
                      :ARG1 (c42-14 / convince-01
                                    :ARG0 (c42-18 / we)
                                    :ARG1 (c42-0 / she)
                                    :ARG2 (c42-10 / take-01
                                                  :ARG0 c42-0
                                                  :ARG1 (c42-19 / imbecile
                                                                :mod (c42-5 / other)
                                                                :mod (c42-11 / brain
                                                                             :polarity -)
                                                                :ARG1-of (c42-1 / liberal-02)
                                                                :quant 1000000)
                                                  :ARG3 (c42-6 / she)))
                      :polarity (c42-9 / amr-unknown))
        :snt2 (c42-4 / sure-02
                     :ARG0 (c42-7 / i)
                     :ARG1 (c42-13 / possible-01
                                   :ARG1 (c42-8 / afford-01
                                                :ARG0 (c42-16 / she)
                                                :ARG1 (c42-3 / pay-01
                                                             :ARG0 c42-16
                                                             :ARG3 (c42-2 / way
                                                                          :poss (c42-15 / they)))))))

# ::snt England no different, same European mentality
# ::tokens ["England", "no", "different", ",", "same", "European", "mentality"]
# ::lemmas ["England", "no", "different", ",", "same", "European", "mentality"]
(c43-3 / and
       :op1 (c43-7 / differ-02
                   :ARG1 (c43-6 / team
                                :name (c43-1 / name
                                             :op1 "England"))
                   :polarity -)
       :op2 (c43-0 / mentality
                   :mod (c43-5 / continent
                               :name (c43-4 / name
                                            :op1 "Europe"))
                   :ARG1-of (c43-2 / same-01)))
