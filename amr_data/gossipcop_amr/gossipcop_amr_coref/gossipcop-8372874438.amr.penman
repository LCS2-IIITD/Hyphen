# ::snt Thanks Dotcy! Im going to rock and /2. Yes, people as short as me count the /2 LOLCI (Laugh Out Loud Cry Inside)
# ::tokens ["Thanks", "Dotcy", "!", "I", "m", "going", "to", "rock", "and", "/2", ".", "Yes", ",", "people", "as", "short", "as", "me", "count", "the", "/2", "LOLCI", "(", "Laugh", "Out", "Loud", "Cry", "Inside", ")"]
# ::lemmas ["thank", "Dotcy", "!", "i", "m", "go", "to", "rock", "and", "/2", ".", "yes", ",", "people", "as", "short", "as", "i", "count", "the", "/2", "LOLCI", "(", "Laugh", "Out", "Loud", "Cry", "Inside", ")"]
(c1-11 / multi-sentence
       :snt1 (c1-8 / thank-01
                   :ARG0 (c1-19 / i)
                   :ARG1 (c1-17 / person
                                :name (c1-14 / name
                                             :op1 "Dotcy")))
       :snt2 (c1-7 / and
                   :op1 (c1-15 / rock-01
                               :ARG0 (c1-5 / i))
                   :op2 (c1-6 / have-quant-91
                              :ARG1 c1-5
                              :ARG3 (c1-16 / equal)
                              :ARG4 c1-5
                              :ARG2 2))
       :snt3 (c1-13 / count-01
                    :ARG0 (c1-12 / person
                                 :ARG1-of (c1-1 / short-07
                                                :ARG2-of (c1-18 / have-degree-91
                                                                :ARG1 c1-12
                                                                :ARG3 c1-16)
                                                :ARG4 c1-5)))
       :ARG1 (c1-3 / string-entity
                   :value "/2")
       :mod (c1-4 / yes)
       :ARG1-of (c1-2 / laugh-01
                      :ARG0 (c1-10 / i)
                      :manner (c1-9 / loud)
                      :location (c1-0 / inside)
                      :mode expressive))

# ::snt Be you...even it its
# ::tokens ["Be", "you", "...", "even", "it", "its"]
# ::lemmas ["be", "you", "...", "even", "it", "its"]
(c2-0 / regardless-91
      :ARG1 (c2-2 / you)
      :ARG2 (c2-3 / it
                  :mod (c2-1 / even)))

# ::snt You think she's an egomaniac now just wait til she beats Rousey for the women's title at Mania &amp; then releases her book
# ::tokens ["You", "think", "she", "'s", "an", "egomaniac", "now", "just", "wait", "til", "she", "beats", "Rousey", "for", "the", "women", "'s", "title", "at", "Mania", "&", "amp", ";", "then", "releases", "her", "book"]
# ::lemmas ["you", "think", "she", "be", "an", "egomaniac", "now", "just", "wait", "til", "she", "beat", "Rousey", "for", "the", "woman", "'s", "title", "at", "Mania", "&", "amp", ";", "then", "release", "her", "book"]
(c3-9 / multi-sentence
      :snt1 (c3-6 / think-01
                  :ARG0 (c3-4 / you)
                  :ARG1 (c3-15 / egomaniac
                               :domain (c3-0 / she))
                  :time (c3-13 / now))
      :snt2 (c3-18 / wait-01
                   :ARG1 c3-4
                   :ARG2 (c3-8 / beat-03
                               :ARG0 (c3-3 / she)
                               :ARG1 (c3-16 / person
                                            :name (c3-10 / name
                                                         :op1 "Rousey"))
                               :ARG2 (c3-11 / title
                                            :mod (c3-2 / woman))
                               :location (c3-7 / event
                                               :name (c3-17 / name
                                                            :op1 "Macy"
                                                            :op2 "&"
                                                            :op3 "amp")))
                   :mod (c3-5 / just)
                   :time (c3-12 / until
                                :op1 (c3-14 / release-01
                                            :ARG0 c3-3
                                            :ARG1 (c3-1 / book
                                                        :poss c3-3)
                                            :time (c3-19 / then)))
                   :mode imperative))

# ::snt I hate to say it, but CM Punk was actually spot on when he said I like to think itll be better once Vince McMahon is dead, but itll just be taken over by his idiotic daughter and doofus son-in-law
# ::tokens ["I", "hate", "to", "say", "it", ",", "but", "CM", "Punk", "was", "actually", "spot", "on", "when", "he", "said", "I", "like", "to", "think", "it", "ll", "be", "better", "once", "Vince", "McMahon", "is", "dead", ",", "but", "it", "ll", "just", "be", "taken", "over", "by", "his", "idiotic", "daughter", "and", "doofus", "son", "-", "in", "-", "law"]
# ::lemmas ["i", "hate", "to", "say", "it", ",", "but", "CM", "Punk", "be", "actually", "spot", "on", "when", "he", "say", "i", "like", "to", "think", "it", "ll", "be", "well", "once", "Vince", "McMahon", "be", "dead", ",", "but", "it", "ll", "just", "be", "take", "over", "by", "his", "idiotic", "daughter", "and", "doofus", "son", "-", "in", "-", "law"]
(c4-20 / contrast-01
       :ARG1 (c4-8 / hate-01
                   :ARG0 (c4-27 / i)
                   :ARG1 (c4-0 / say-01
                               :ARG0 c4-27
                               :ARG1 (c4-6 / it)))
       :ARG2 (c4-5 / spot-on
                   :domain (c4-25 / person
                                  :name (c4-24 / name
                                               :op1 "CM"
                                               :op2 "Punk"))
                   :time (c4-4 / say-01
                               :ARG0 c4-25
                               :ARG1 (c4-15 / contrast-01
                                            :ARG1 (c4-1 / like-02
                                                        :ARG0 c4-27
                                                        :ARG1 (c4-11 / think-01
                                                                     :ARG0 c4-27
                                                                     :ARG1 (c4-12 / good-02
                                                                                  :ARG1 c4-6)
                                                                     :time (c4-28 / die-01
                                                                                  :ARG1 (c4-17 / person
                                                                                               :name (c4-18 / name
                                                                                                            :op1 "Vince"
                                                                                                            :op2 "McMahon")))
                                                                     :ARG2-of (c4-26 / have-degree-91
                                                                                     :ARG1 c4-6
                                                                                     :ARG3 (c4-16 / more)))))
                               :ARG2 (c4-22 / take-over-12
                                            :ARG0 (c4-13 / and
                                                         :op1 (c4-3 / person
                                                                    :ARG0-of (c4-7 / have-rel-role-91
                                                                                   :ARG1 c4-25
                                                                                   :ARG2 (c4-21 / daughter
                                                                                                :mod (c4-14 / idiotic))))
                                                         :op2 (c4-2 / person
                                                                    :ARG0-of (c4-23 / have-rel-role-91
                                                                                    :ARG1 c4-25
                                                                                    :ARG2 (c4-19 / doofus))))
                                            :ARG1 c4-6
                                            :mod (c4-9 / just)))
                   :ARG1-of (c4-10 / actual-02)))

# ::snt And to think theres people who think WWE will get better when Vince either steps down or dies. Itll get worse the moment Caitlyn Jenner becomes in charge.
# ::tokens ["And", "to", "think", "there", "s", "people", "who", "think", "WWE", "will", "get", "better", "when", "Vince", "either", "steps", "down", "or", "dies", ".", "It", "ll", "get", "worse", "the", "moment", "Caitlyn", "Jenner", "becomes", "in", "charge", "."]
# ::lemmas ["and", "to", "think", "there", "s", "people", "who", "think", "WWE", "will", "get", "well", "when", "Vince", "either", "step", "down", "or", "die", ".", "it", "ll", "get", "bad", "the", "moment", "Caitlyn", "Jenner", "become", "in", "charge", "."]
(c5-11 / multi-sentence
       :snt1 (c5-6 / and
                   :op2 (c5-7 / think-01
                              :ARG1 (c5-18 / person
                                           :ARG0-of (c5-15 / think-01
                                                           :ARG1 (c5-8 / get-03
                                                                       :ARG1 (c5-14 / company
                                                                                    :name (c5-17 / name
                                                                                                 :op1 "WWE"))
                                                                       :ARG2 (c5-1 / good-02
                                                                                   :ARG1 c5-14
                                                                                   :ARG2-of (c5-4 / have-degree-91
                                                                                                  :ARG1 c5-14
                                                                                                  :ARG3 (c5-5 / more)))
                                                                       :time (c5-3 / or
                                                                                   :op1 (c5-0 / step-down-04
                                                                                              :ARG0 (c5-12 / person
                                                                                                           :name (c5-13 / name
                                                                                                                        :op1 "Vince")))
                                                                                   :op2 (c5-22 / die-01
                                                                                               :ARG1 c5-12)))))))
       :snt2 (c5-20 / worsen-01
                    :ARG1 (c5-21 / it)
                    :time (c5-16 / moment
                                 :time-of (c5-10 / become-01
                                                 :ARG1 (c5-2 / person
                                                             :name (c5-19 / name
                                                                          :op1 "Caitlyn"
                                                                          :op2 "Jenner"))
                                                 :ARG2 (c5-9 / charge-05
                                                             :ARG1 c5-2)))))

# ::snt Today's version of ! LOL
# ::tokens ["Today", "'s", "version", "of", "!", "LOL"]
# ::lemmas ["Today", "'s", "version", "of", "!", "LOL"]
(c6-0 / version
      :time (c6-3 / today)
      :mod (c6-2 / laugh-01
                 :manner (c6-1 / loud)
                 :mode expressive))

# ::snt $1000? Fuck that
# ::tokens ["$", "1000", "?", "Fuck", "that"]
# ::lemmas ["$", "1000", "?", "fuck", "that"]
(c7-1 / multi-sentence
      :snt1 (c7-2 / monetary-quantity
                  :polarity (c7-4 / amr-unknown)
                  :unit (c7-5 / dollar)
                  :quant 1000)
      :snt2 (c7-0 / fuck-01
                  :ARG1 (c7-3 / that)
                  :mode expressive))

# ::snt You can get me for twenty. Quite the bargain.
# ::tokens ["You", "can", "get", "me", "for", "twenty", ".", "Quite", "the", "bargain", "."]
# ::lemmas ["you", "can", "get", "i", "for", "twenty", ".", "quite", "the", "bargain", "."]
(c8-2 / multi-sentence
      :snt1 (c8-4 / possible-01
                  :ARG1 (c8-7 / get-01
                              :ARG0 (c8-1 / you)
                              :ARG1 (c8-5 / i)
                              :ARG3 (c8-3 / monetary-quantity
                                          :unit (c8-8 / dollar)
                                          :quant 20)))
      :snt2 (c8-0 / bargain-01
                  :degree (c8-6 / quite)))

# ::snt for $750.......... tf
# ::tokens ["for", "$", "750", "..........", "tf"]
# ::lemmas ["for", "$", "750", "..........", "tf"]
(c9-1 / multi-sentence
      :snt1 (c9-0 / for
                  :op1 (c9-3 / monetary-quantity
                             :quant750 (c9-5 / dollar)))
      :snt2 (c9-4 / person
                  :name (c9-2 / name
                              :op1 "tf")))

# ::snt Isn't this that same idiot that asked about the bachelor in the press conference with Steve Smith a while back?
# ::tokens ["Is", "n't", "this", "that", "same", "idiot", "that", "asked", "about", "the", "bachelor", "in", "the", "press", "conference", "with", "Steve", "Smith", "a", "while", "back", "?"]
# ::lemmas ["be", "not", "this", "that", "same", "idiot", "that", "ask", "about", "the", "bachelor", "in", "the", "press", "conference", "with", "Steve", "Smith", "a", "while", "back", "?"]
(c10-10 / idiot
        :mod (c10-9 / that)
        :ARG1-of (c10-3 / same-01)
        :ARG0-of (c10-11 / ask-01
                         :ARG1 (c10-0 / bachelor)
                         :location (c10-7 / conference
                                          :mod (c10-6 / press)
                                          :accompanier (c10-2 / person
                                                              :name (c10-1 / name
                                                                           :op1 "Steve"
                                                                           :op2 "Smith")))
                         :time (c10-5 / before
                                      :quant (c10-8 / while)))
        :domain (c10-12 / this)
        :ARG1-of (c10-4 / request-confirmation-91))

# ::snt Sergio Ramos
# ::tokens ["Sergio", "Ramos"]
# ::lemmas ["Sergio", "Ramos"]
(c11-1 / person
       :name (c11-0 / name
                    :op1 "Sergio"
                    :op2 "Ramos"))

# ::snt on god i needa go to sleep
# ::tokens ["on", "god", "i", "needa", "go", "to", "sleep"]
# ::lemmas ["on", "god", "i", "needa", "go", "to", "sleep"]
(c12-2 / say-01
       :ARG0 (c12-5 / i)
       :ARG1 (c12-1 / need-01
                    :ARG0 c12-5
                    :ARG1 (c12-0 / sleep-01
                                 :ARG0 c12-5))
       :ARG2 (c12-4 / person
                    :name (c12-3 / name
                                 :op1 "God")))

# ::snt go to sleep LMFAO
# ::tokens ["go", "to", "sleep", "LMFAO"]
# ::lemmas ["go", "to", "sleep", "lmfao"]
(c13-2 / say-01
       :ARG0 (c13-4 / i)
       :ARG1 (c13-5 / go-05
                    :ARG0 (c13-3 / person
                                 :name (c13-1 / name
                                              :op1 "LMFAO"))
                    :ARG1 (c13-0 / sleep-01
                                 :ARG0 c13-3)
                    :mode imperative)
       :ARG2 c13-3)

# ::snt Just switched from Verizon to T-Mobile! Wish I could work for this awesome Company!!
# ::tokens ["Just", "switched", "from", "Verizon", "to", "T", "-", "Mobile", "!", "Wish", "I", "could", "work", "for", "this", "awesome", "Company", "!", "!"]
# ::lemmas ["just", "switch", "from", "Verizon", "to", "T", "-", "Mobile", "!", "wish", "i", "could", "work", "for", "this", "awesome", "company", "!", "!"]
(c14-1 / multi-sentence
       :snt1 (c14-2 / switch-01
                    :ARG2 (c14-6 / company
                                 :name (c14-0 / name
                                              :op1 "T-Mobile"))
                    :ARG3 (c14-13 / company
                                  :name (c14-3 / name
                                               :op1 "Verizon"))
                    :time (c14-9 / just))
       :snt2 (c14-7 / wish-01
                    :ARG0 (c14-10 / i)
                    :ARG1 (c14-4 / possible-01
                                 :ARG1 (c14-5 / work-01
                                              :ARG0 c14-10
                                              :ARG2 (c14-8 / company
                                                           :ARG0-of (c14-11 / awe-01)
                                                           :mod (c14-12 / this))))))

# ::snt Amazing!!
# ::tokens ["Amazing", "!", "!"]
# ::lemmas ["amazing", "!", "!"]
(c15-0 / amaze-01
       :mode expressive)

# ::snt Chief
# ::tokens ["Chief"]
# ::lemmas ["chief"]
(c18-0 / chief)

# ::snt Did Mother approve of his hanging out with a woman schtping a married man?
# ::tokens ["Did", "Mother", "approve", "of", "his", "hanging", "out", "with", "a", "woman", "schtping", "a", "married", "man", "?"]
# ::lemmas ["do", "Mother", "approve", "of", "his", "hang", "out", "with", "a", "woman", "schtpe", "a", "married", "man", "?"]
(c19-9 / approve-01
       :ARG0 (c19-4 / person
                    :ARG0-of (c19-3 / have-rel-role-91
                                    :ARG2 (c19-0 / mother)))
       :ARG1 (c19-7 / hang-out-06
                    :ARG1 (c19-2 / he)
                    :ARG2 (c19-6 / woman
                                 :ARG0-of (c19-1 / schtp-00
                                                 :ARG1 (c19-5 / man
                                                              :ARG1-of (c19-10 / marry-01)))))
       :polarity (c19-8 / amr-unknown))

# ::snt that's cause he's the biggest asshole.
# ::tokens ["that", "'s", "cause", "he", "'s", "the", "biggest", "asshole", "."]
# ::lemmas ["that", "be", "cause", "he", "be", "the", "big", "asshole", "."]
(c20-3 / cause-01
       :ARG0 (c20-6 / asshole
                    :domain (c20-2 / he)
                    :ARG1-of (c20-4 / have-degree-91
                                    :ARG2 (c20-0 / big)
                                    :ARG3 (c20-1 / most)))
       :ARG1 (c20-5 / that))

# ::snt Whos butt plug do you think is bigger?
# ::tokens ["Who", "s", "butt", "plug", "do", "you", "think", "is", "bigger", "?"]
# ::lemmas ["who", "s", "butt", "plug", "do", "you", "think", "be", "big", "?"]
(c22-7 / think-01
       :ARG0 (c22-1 / you)
       :ARG1 (c22-4 / have-degree-91
                    :ARG1 (c22-5 / plug
                                 :mod (c22-0 / butt)
                                 :poss (c22-3 / amr-unknown))
                    :ARG2 (c22-6 / big)
                    :ARG3 (c22-2 / more)))

# ::snt You got that right!
# ::tokens ["You", "got", "that", "right", "!"]
# ::lemmas ["you", "get", "that", "right", "!"]
(c23-0 / get-02
       :ARG0 (c23-2 / you)
       :ARG1 (c23-3 / that)
       :ARG1-of (c23-1 / right-02))

# ::snt Whos that next to him?
# ::tokens ["Who", "s", "that", "next", "to", "him", "?"]
# ::lemmas ["who", "s", "that", "next", "to", "he", "?"]
(c24-3 / that
       :location (c24-2 / next-to
                        :op1 (c24-1 / he))
       :mod (c24-0 / amr-unknown))

# ::snt Seems like that was who Caitlyn is trying to look like.
# ::tokens ["Seems", "like", "that", "was", "who", "Caitlyn", "is", "trying", "to", "look", "like", "."]
# ::lemmas ["seem", "like", "that", "be", "who", "Caitlyn", "be", "try", "to", "look", "like", "."]
(c25-1 / seem-01
       :ARG1 (c25-2 / resemble-01
                    :ARG1 (c25-3 / person
                                 :name (c25-0 / name
                                              :op1 "Caitlyn"))
                    :ARG2 (c25-4 / that)
                    :ARG1-of (c25-5 / try-01
                                    :ARG0 c25-3)))

# ::snt ...
# ::tokens ["..."]
# ::lemmas ["..."]
(c26-0 / amr-empty)

# ::snt Hahahahahahaha
# ::tokens ["Hahahahahahaha"]
# ::lemmas ["Hahahahahahaha"]
(c28-0 / haha
       :mode expressive)

# ::snt Well rescue,
# ::tokens ["Well", "rescue", ","]
# ::lemmas ["well", "rescue", ","]
(c29-0 / rescue-01
       :mod (c29-1 / well))

# ::snt my brother and I him
# ::tokens ["my", "brother", "and", "I", "him"]
# ::lemmas ["my", "brother", "and", "i", "he"]
(c31-5 / and
       :op1 (c31-2 / person
                   :ARG0-of (c31-1 / have-rel-role-91
                                   :ARG1 (c31-4 / i)
                                   :ARG2 (c31-0 / brother)))
       :op2 c31-4
       :op3 (c31-3 / he))

# ::snt Talking about robbing the cradle...
# ::tokens ["Talking", "about", "robbing", "the", "cradle", "..."]
# ::lemmas ["talk", "about", "rob", "the", "cradle", "..."]
(c32-2 / talk-01
       :ARG1 (c32-0 / rob-01
                    :ARG1 (c32-1 / cradle)))

# ::snt Dont tell me theres a Kanye in the House scenario coming up!
# ::tokens ["Do", "nt", "tell", "me", "there", "s", "a", "Kanye", "in", "the", "House", "scenario", "coming", "up", "!"]
# ::lemmas ["do", "not", "tell", "i", "there", "s", "a", "Kanye", "in", "the", "House", "scenario", "come", "up", "!"]
(c33-7 / tell-01
       :ARG0 (c33-0 / you)
       :ARG1 (c33-2 / scenario
                    :mod (c33-4 / person
                                :name (c33-1 / name
                                             :op1 "Kanye"))
                    :location (c33-8 / government-organization
                                     :name (c33-3 / name
                                                  :op1 "House"))
                    :ARG1-of (c33-5 / come-up-13))
       :ARG2 (c33-6 / i)
       :polarity -
       :mode imperative)

# ::snt His*
# ::tokens ["His", "*"]
# ::lemmas ["his", "*"]
(c34-0 / he)

# ::snt Can this family do anything privately ?
# ::tokens ["Can", "this", "family", "do", "anything", "privately", "?"]
# ::lemmas ["can", "this", "family", "do", "anything", "privately", "?"]
(c35-3 / possible-01
       :polarity (c35-2 / amr-unknown)
       :ARG1 (c35-6 / do-02
                    :ARG0 (c35-0 / family
                                 :mod (c35-5 / this))
                    :ARG1 (c35-4 / anything)
                    :ARG1-of (c35-1 / private-02)))

# ::snt Nooobody cares XXL
# ::tokens ["Nooobody", "cares", "XXL"]
# ::lemmas ["nooobody", "care", "XXL"]
(c37-0 / care-01
       :ARG0 (c37-2 / person
                    :name (c37-1 / name
                                 :op1 "Nooobody"))
       :ARG1 (c37-3 / person
                    :name c37-1
                    :op1 " XXL"))

# ::snt Lmao
# ::tokens ["Lmao"]
# ::lemmas ["lmao"]
(c38-1 / laugh-01
       :ARG0 (c38-2 / i
                    :part (c38-3 / ass))
       :ARG3 (c38-0 / off
                    :op1 c38-3))

# ::snt Blocked
# ::tokens ["Blocked"]
# ::lemmas ["block"]
(c39-0 / blocked-01)

# ::snt Yall said Caitlyn?
# ::tokens ["Yall", "said", "Caitlyn", "?"]
# ::lemmas ["Yall", "say", "Caitlyn", "?"]
(c42-1 / say-01
       :ARG0 (c42-4 / all)
       :ARG1 (c42-2 / person
                    :name (c42-0 / name
                                 :op1 "Caitlyn"))
       :polarity (c42-3 / amr-unknown))

# ::snt That's too funny!
# ::tokens ["That", "'s", "too", "funny", "!"]
# ::lemmas ["that", "be", "too", "funny", "!"]
(c43-1 / have-degree-91
       :ARG1 (c43-3 / that)
       :ARG2 (c43-0 / funny-02
                    :ARG1 c43-3)
       :ARG3 (c43-2 / too)
       :mode expressive)

# ::snt Bruce lays the pipe and Caitlyn eats box
# ::tokens ["Bruce", "lays", "the", "pipe", "and", "Caitlyn", "eats", "box"]
# ::lemmas ["Bruce", "lay", "the", "pipe", "and", "Caitlyn", "eat", "box"]
(c44-7 / and
       :op1 (c44-6 / lay-01
                   :ARG0 (c44-5 / person
                                :name (c44-1 / name
                                             :op1 "Bruce"))
                   :ARG1 (c44-2 / pipe))
       :op2 (c44-3 / eat-01
                   :ARG0 (c44-8 / person
                                :name (c44-4 / name
                                             :op1 "Caitlyn"))
                   :ARG1 (c44-0 / box)))

# ::snt I think brucey lays the pipe
# ::tokens ["I", "think", "brucey", "lays", "the", "pipe"]
# ::lemmas ["i", "think", "brucey", "lay", "the", "pipe"]
(c45-5 / think-01
       :ARG0 (c45-4 / i)
       :ARG1 (c45-3 / lay-01
                    :ARG0 (c45-2 / person
                                 :name (c45-0 / name
                                              :op1 "Brucey"))
                    :ARG1 (c45-1 / pipe)))

# ::snt Both
# ::tokens ["Both"]
# ::lemmas ["both"]
(c46-0 / both)

# ::snt She got a sex change so gets pipe is my vote
# ::tokens ["She", "got", "a", "sex", "change", "so", "gets", "pipe", "is", "my", "vote"]
# ::lemmas ["she", "get", "a", "sex", "change", "so", "get", "pipe", "be", "my", "vote"]
(c47-2 / vote-01
       :ARG0 (c47-5 / i)
       :ARG1 (c47-7 / get-01
                    :ARG0 (c47-1 / she)
                    :ARG1 (c47-4 / change-01
                                 :ARG1 (c47-0 / sex))
                    :ARG0-of (c47-8 / cause-01
                                    :ARG1 (c47-6 / get-01
                                                 :ARG0 c47-1
                                                 :ARG1 (c47-3 / pipe)))))

# ::snt Eats box for sure, shes a dude
# ::tokens ["Eats", "box", "for", "sure", ",", "she", "s", "a", "dude"]
# ::lemmas ["eat", "box", "for", "sure", ",", "she", "s", "a", "dude"]
(c48-2 / sure-02
       :ARG0 (c48-1 / box
                    :poss (c48-3 / they))
       :ARG1 (c48-4 / dude
                    :domain (c48-0 / she)))

# ::snt What has she done? Really
# ::tokens ["What", "has", "she", "done", "?", "Really"]
# ::lemmas ["what", "have", "she", "do", "?", "really"]
(c49-0 / multi-sentence
       :snt1 (c49-5 / do-02
                    :ARG0 (c49-1 / she)
                    :ARG1 (c49-4 / amr-unknown))
       :snt2 (c49-2 / real-04
                    :polarity (c49-3 / amr-unknown)))

# ::snt So if he identified as a she would that be cool with you ???
# ::tokens ["So", "if", "he", "identified", "as", "a", "she", "would", "that", "be", "cool", "with", "you", "?", "?", "?"]
# ::lemmas ["so", "if", "he", "identify", "as", "a", "she", "would", "that", "be", "cool", "with", "you", "?", "?", "?"]
(c50-3 / cool-04
       :polarity (c50-5 / amr-unknown)
       :ARG1 (c50-4 / identify-01
                    :ARG0 (c50-2 / he
                                 :ARG1-of c50-4)
                    :ARG2 (c50-1 / she))
       :beneficiary (c50-0 / you)
       :condition c50-4)
