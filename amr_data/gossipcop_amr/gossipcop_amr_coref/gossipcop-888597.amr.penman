# ::snt His wife will supply a lifetime supply of her beauty creams....
# ::tokens ["His", "wife", "will", "supply", "a", "lifetime", "supply", "of", "her", "beauty", "creams", "...."]
# ::lemmas ["his", "wife", "will", "supply", "a", "lifetime", "supply", "of", "her", "beauty", "cream", "...."]
(c1-1 / supply-01
      :ARG0 (c1-3 / person
                  :ARG0-of (c1-2 / have-rel-role-91
                                 :ARG1 (c1-7 / he)
                                 :ARG2 (c1-5 / wife)))
      :ARG1 (c1-6 / cream
                  :purpose (c1-0 / beautiful-02)
                  :poss c1-3)
      :ARG2 c1-3
      :duration (c1-4 / lifetime))

# ::snt Ought oh
# ::tokens ["Ought", "oh"]
# ::lemmas ["ought", "oh"]
(c3-0 / oh
      :mode expressive)

# ::snt That happened on Better Call Saul.
# ::tokens ["That", "happened", "on", "Better", "Call", "Saul", "."]
# ::lemmas ["that", "happen", "on", "Better", "Call", "Saul", "."]
(c4-0 / be-located-at-91
      :ARG1 (c4-3 / that)
      :ARG2 (c4-1 / broadcast-program
                  :name (c4-2 / name
                              :op1 "Better"
                              :op2 "Call"
                              :op3 "Saul")))

# ::snt ...and exactly what is a skateboarding bodybuilder besides an oxymoron?
# ::tokens ["...", "and", "exactly", "what", "is", "a", "skateboarding", "bodybuilder", "besides", "an", "oxymoron", "?"]
# ::lemmas ["...", "and", "exactly", "what", "be", "a", "skateboard", "bodybuilder", "besides", "an", "oxymoron", "?"]
(c5-3 / and
      :op2 (c5-7 / thing
                 :domain (c5-6 / person
                               :ARG0-of (c5-1 / build-01
                                              :ARG1 (c5-5 / body)
                                              :manner (c5-2 / skate-01)))
                 :ARG2-of (c5-4 / except-01
                                :ARG1 (c5-0 / oxymoron))
                 :mod (c5-8 / exact)))

# ::snt &amp; what happened the hit movies
# ::tokens ["&", "amp", ";", "what", "happened", "the", "hit", "movies"]
# ::lemmas ["&", "amp", ";", "what", "happen", "the", "hit", "movie"]
(c6-4 / and
      :op2 (c6-1 / event
                 :mod (c6-0 / movie
                            :ARG1-of (c6-2 / hit-02))
                 :mod (c6-3 / amr-unknown)))

# ::snt You gon payyyyy!
# ::tokens ["You", "gon", "payyyyy", "!"]
# ::lemmas ["you", "gon", "payyyyy", "!"]
(c7-1 / pay-01
      :ARG0 (c7-0 / you)
      :mode imperative)

# ::snt Here
# ::tokens ["Here"]
# ::lemmas ["here"]
(c8-0 / here)

# ::snt Of course we know where that is coming from. It's the American way.. sue.
# ::tokens ["Of", "course", "we", "know", "where", "that", "is", "coming", "from", ".", "It", "'s", "the", "American", "way", "..", "sue", "."]
# ::lemmas ["of", "course", "we", "know", "where", "that", "be", "come", "from", ".", "it", "be", "the", "American", "way", "..", "sue", "."]
(c10-1 / multi-sentence
       :snt1 (c10-5 / know-01
                    :ARG0 (c10-7 / we)
                    :ARG1 (c10-4 / location
                                 :ARG3-of (c10-8 / come-01
                                                 :ARG1 (c10-10 / that)))
                    :mod (c10-0 / of-course))
       :snt2 (c10-6 / way
                    :mod (c10-11 / country
                                 :name (c10-2 / name
                                              :op1 "America"))
                    :domain (c10-9 / it))
       :snt3 (c10-3 / sue-02))

# ::snt "Skateboarding bodybuilder"
# ::tokens ["\"", "Skateboarding", "bodybuilder", "\""]
# ::lemmas ["\"", "skateboard", "bodybuilder", "\""]
(c11-2 / person
       :ARG0-of (c11-0 / build-01
                       :ARG1 (c11-1 / body)
                       :manner (c11-3 / skate-01)))

# ::snt Haha ask cash me outside to help pay for it
# ::tokens ["Haha", "ask", "cash", "me", "outside", "to", "help", "pay", "for", "it"]
# ::lemmas ["haha", "ask", "cash", "i", "outside", "to", "help", "pay", "for", "it"]
(c12-8 / ask-01
       :ARG0 (c12-1 / you)
       :ARG1 (c12-5 / cash-01
                    :ARG0 c12-1
                    :ARG1 (c12-7 / i)
                    :location (c12-0 / outside)
                    :purpose (c12-3 / help-01
                                    :ARG0 c12-1
                                    :ARG1 (c12-4 / pay-01
                                                 :ARG3 (c12-2 / it))))
       :ARG2 c12-7
       :mod (c12-6 / haha
                   :mode expressive)
       :mode imperative)
