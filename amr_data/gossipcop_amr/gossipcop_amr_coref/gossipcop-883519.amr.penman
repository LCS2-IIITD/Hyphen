# ::snt You've heard of Elf on a shelf...
# ::tokens ["You", "'ve", "heard", "of", "Elf", "on", "a", "shelf", "..."]
# ::lemmas ["you", "'ve", "hear", "of", "Elf", "on", "a", "shelf", "..."]
(c1-4 / hear-01
      :ARG0 (c1-1 / you)
      :ARG1 (c1-0 / book
                  :name (c1-2 / name
                              :op1 "Elf")
                  :location (c1-3 / shelf)))

# ::snt She is truly the next Molly Shannon, and one day when Molly is gone, she'll be the least funny person on the planet.
# ::tokens ["She", "is", "truly", "the", "next", "Molly", "Shannon", ",", "and", "one", "day", "when", "Molly", "is", "gone", ",", "she", "'ll", "be", "the", "least", "funny", "person", "on", "the", "planet", "."]
# ::lemmas ["she", "be", "truly", "the", "next", "Molly", "Shannon", ",", "and", "one", "day", "when", "Molly", "be", "go", ",", "she", "'ll", "be", "the", "least", "funny", "person", "on", "the", "planet", "."]
(c2-10 / and
       :op1 (c2-6 / person
                  :name (c2-2 / name
                              :op1 "Molly"
                              :op2 "Shanghai")
                  :domain (c2-4 / she)
                  :mod (c2-5 / next)
                  :ARG1-of (c2-9 / true-01))
       :op2 (c2-7 / have-degree-91
                  :ARG1 c2-4
                  :ARG2 (c2-0 / funny-02
                              :ARG1 c2-4)
                  :ARG3 (c2-8 / least)
                  :ARG5 (c2-3 / person
                              :location (c2-13 / planet))
                  :time (c2-12 / day
                               :mod (c2-1 / one))
                  :time (c2-11 / go-02
                               :ARG0 c2-6)))

# ::snt Leibowitz was spot on with the dunce cap
# ::tokens ["Leibowitz", "was", "spot", "on", "with", "the", "dunce", "cap"]
# ::lemmas ["Leibowitz", "be", "spot", "on", "with", "the", "dunce", "cap"]
(c3-1 / spot-on
      :domain (c3-2 / person
                    :name (c3-0 / name
                                :op1 "Leibowitz"))
      :topic (c3-3 / cap
                   :mod (c3-4 / dunce)))

# ::snt waaaaat is all that green
# ::tokens ["waaaaat", "is", "all", "that", "green"]
# ::lemmas ["waaaaat", "be", "all", "that", "green"]
(c5-0 / green-03
      :ARG1 (c5-3 / all)
      :degree (c5-2 / that)
      :mod (c5-1 / wah
                 :mode expressive))

# ::snt These photos tho
# ::tokens ["These", "photos", "tho"]
# ::lemmas ["these", "photo", "tho"]
(c6-0 / have-concession-91
      :ARG1 (c6-1 / photo
                  :mod (c6-2 / this)))
