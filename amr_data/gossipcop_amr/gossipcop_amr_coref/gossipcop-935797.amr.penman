# ::snt Thanks girl!
# ::tokens ["Thanks", "girl", "!"]
# ::lemmas ["thank", "girl", "!"]
(c1-3 / say-01
      :ARG0 (c1-2 / i)
      :ARG1 (c1-1 / thank-01
                  :ARG0 c1-2
                  :ARG1 (c1-0 / girl
                              :ARG2-of c1-3)))

# ::snt Most of a year since this announcement, when will this be released?
# ::tokens ["Most", "of", "a", "year", "since", "this", "announcement", ",", "when", "will", "this", "be", "released", "?"]
# ::lemmas ["most", "of", "a", "year", "since", "this", "announcement", ",", "when", "will", "this", "be", "release", "?"]
(c2-3 / release-01
      :ARG1 (c2-4 / this)
      :time (c2-6 / amr-unknown)
      :time (c2-2 / since
                  :op1 (c2-5 / announce-01
                             :mod c2-4)
                  :quant (c2-1 / most
                               :op1 (c2-7 / temporal-quantity
                                          :unit (c2-0 / year)
                                          :quant 1))))

# ::snt GUILTY!!!!
# ::tokens ["GUILTY", "!", "!", "!", "!"]
# ::lemmas ["GUILTY", "!", "!", "!", "!"]
(c3-0 / guilty-01
      :mode expressive)

# ::snt Yessss! This guy is an absolute scumbag. Gator level scumbag! Ive known it since the first time I heard him open his arrogant, obnoxious, and know-it-all mouth!!!
# ::tokens ["Yessss", "!", "This", "guy", "is", "an", "absolute", "scumbag", ".", "Gator", "level", "scumbag", "!", "I", "ve", "known", "it", "since", "the", "first", "time", "I", "heard", "him", "open", "his", "arrogant", ",", "obnoxious", ",", "and", "know", "-", "it", "-", "all", "mouth", "!", "!", "!"]
# ::lemmas ["Yessss", "!", "this", "guy", "be", "an", "absolute", "scumbag", ".", "gator", "level", "scumbag", "!", "i", "ve", "know", "it", "since", "the", "first", "time", "i", "hear", "he", "open", "his", "arrogant", ",", "obnoxious", ",", "and", "know", "-", "it", "-", "all", "mouth", "!", "!", "!"]
(c4-15 / multi-sentence
       :snt1 (c4-5 / yessss
                   :mode expressive)
       :snt2 (c4-0 / scumbag
                   :mod (c4-12 / absolute)
                   :domain (c4-13 / guy
                                  :mod (c4-11 / this)))
       :snt3 (c4-3 / scumbag
                   :mod (c4-1 / level
                              :mod (c4-18 / person
                                          :name (c4-17 / name
                                                       :op1 "Gator"))))
       :snt4 (c4-8 / know-01
                   :ARG0 (c4-19 / i)
                   :ARG1 (c4-6 / it)
                   :time (c4-2 / since
                               :op1 (c4-7 / hear-01
                                          :ARG0 c4-19
                                          :ARG1 (c4-4 / open-01
                                                      :ARG0 c4-13
                                                      :ARG1 (c4-9 / mouth
                                                                  :poss c4-13
                                                                  :mod (c4-10 / arrogant)
                                                                  :mod (c4-14 / obnoxious)
                                                                  :mod (c4-16 / know-it-all)))
                                          :ord (c4-20 / ordinal-entity
                                                      :value 1)))))

# ::snt !!!!
# ::tokens ["!", "!", "!", "!"]
# ::lemmas ["!", "!", "!", "!"]
(c5-0 / thing
      :mode expressive)

# ::snt Hopefully it examines the facts, evidence &amp; keeps the real victim Hae Min Lee in mind, tired of all these PR advocacy pieces for trial convicted murderers
# ::tokens ["Hopefully", "it", "examines", "the", "facts", ",", "evidence", "&", "amp", ";", "keeps", "the", "real", "victim", "Hae", "Min", "Lee", "in", "mind", ",", "tired", "of", "all", "these", "PR", "advocacy", "pieces", "for", "trial", "convicted", "murderers"]
# ::lemmas ["hopefully", "it", "examine", "the", "fact", ",", "evidence", "&", "amp", ";", "keep", "the", "real", "victim", "Hae", "Min", "Lee", "in", "mind", ",", "tired", "of", "all", "these", "pr", "advocacy", "piece", "for", "trial", "convict", "murderer"]
(c6-11 / multi-sentence
       :snt1 (c6-18 / examine-01
                    :ARG0 (c6-20 / it)
                    :ARG1 (c6-9 / and
                                :op1 (c6-15 / fact)
                                :op2 (c6-10 / evidence-01)
                                :op3 (c6-7 / amp))
                    :ARG1-of (c6-3 / hope-01))
       :snt2 (c6-4 / keep-in-mind-08
                   :ARG1 (c6-19 / person
                                :name (c6-16 / name
                                             :op1 "Hae"
                                             :op2 "Min"
                                             :op3 "Lee")
                                :ARG1-of (c6-17 / real-04)
                                :ARG1-of (c6-2 / victimize-01)
                                :ARG1-of (c6-8 / tire-01
                                               :ARG0 (c6-12 / piece
                                                            :ARG0-of (c6-6 / advocate-01
                                                                           :ARG1 (c6-1 / public-02))
                                                            :mod (c6-14 / this)
                                                            :mod (c6-22 / all)
                                                            :purpose (c6-21 / try-02
                                                                            :ARG1 (c6-0 / person
                                                                                        :ARG0-of (c6-5 / murder-01)
                                                                                        :ARG1-of (c6-13 / convict-01))))))))

# ::snt omg I need this
# ::tokens ["omg", "I", "need", "this"]
# ::lemmas ["omg", "i", "need", "this"]
(c7-1 / need-01
      :ARG0 (c7-2 / i)
      :ARG1 (c7-3 / this)
      :mod (c7-0 / oh-my-god
                 :mode expressive))

# ::snt Need to get hbo then
# ::tokens ["Need", "to", "get", "hbo", "then"]
# ::lemmas ["need", "to", "get", "hbo", "then"]
(c10-0 / need-01
       :ARG0 (c10-3 / i)
       :ARG1 (c10-5 / get-01
                    :ARG0 c10-3
                    :ARG1 (c10-2 / product
                                 :name (c10-1 / name
                                              :op1 "HBO")))
       :time (c10-4 / then))

# ::snt Awesome sauce.
# ::tokens ["Awesome", "sauce", "."]
# ::lemmas ["Awesome", "sauce", "."]
(c12-1 / sauce
       :ARG0-of (c12-0 / awe-01))

# ::snt Yes for sure.
# ::tokens ["Yes", "for", "sure", "."]
# ::lemmas ["yes", "for", "sure", "."]
(c13-0 / sure-02)

# ::snt Deffo will, gonna go google the whole shabang
# ::tokens ["Deffo", "will", ",", "gon", "na", "go", "google", "the", "whole", "shabang"]
# ::lemmas ["Deffo", "will", ",", "going", "to", "go", "google", "the", "whole", "shabang"]
(c14-5 / go-05
       :ARG0 (c14-2 / person
                    :name (c14-0 / name
                                 :op1 "Deffo"))
       :ARG1 (c14-4 / google-01
                    :ARG0 c14-2
                    :ARG1 (c14-1 / shabang
                                 :mod (c14-3 / whole))))

# ::snt tacos &amp; docos?
# ::tokens ["tacos", "&", "amp", ";", "docos", "?"]
# ::lemmas ["tacos", "&", "amp", ";", "docos", "?"]
(c15-1 / and
       :op1 (c15-4 / taco)
       :op2 (c15-2 / product
                   :name (c15-0 / name
                                :op1 "amp"))
       :polarity (c15-3 / amr-unknown))

# ::snt What is the case
# ::tokens ["What", "is", "the", "case"]
# ::lemmas ["what", "be", "the", "case"]
(c16-0 / case-04
       :ARG1 (c16-1 / amr-unknown))

# ::snt Oh bih!!!!!!
# ::tokens ["Oh", "bih", "!", "!", "!", "!", "!", "!"]
# ::lemmas ["oh", "bih", "!", "!", "!", "!", "!", "!"]
(c19-1 / bih
       :mod (c19-0 / oh)
       :mode expressive)

# ::snt I just got it. Thank you.
# ::tokens ["I", "just", "got", "it", ".", "Thank", "you", "."]
# ::lemmas ["i", "just", "get", "it", ".", "thank", "you", "."]
(c21-1 / multi-sentence
       :snt1 (c21-6 / get-01
                    :ARG0 (c21-4 / i)
                    :ARG1 (c21-2 / it)
                    :mod (c21-3 / just))
       :snt2 (c21-5 / thank-01
                    :ARG0 c21-4
                    :ARG1 (c21-0 / you)))

# ::snt Yes its called adnans story by
# ::tokens ["Yes", "its", "called", "adnans", "story", "by"]
# ::lemmas ["yes", "its", "call", "adnan", "story", "by"]
(c22-4 / call-01
       :ARG0 (c22-2 / story
                    :poss (c22-3 / person
                                 :name (c22-1 / name
                                              :op1 "Adnan")))
       :ARG1 (c22-5 / it)
       :ARG2 (c22-0 / yes))

# ::snt Agree. I loved but its definitely feels like the meet the cast podcast now.
# ::tokens ["Agree", ".", "I", "loved", "but", "its", "definitely", "feels", "like", "the", "meet", "the", "cast", "podcast", "now", "."]
# ::lemmas ["agree", ".", "i", "love", "but", "its", "definitely", "feel", "like", "the", "meet", "the", "cast", "podcast", "now", "."]
(c23-1 / multi-sentence
       :snt1 (c23-11 / agree-01
                     :ARG0 (c23-10 / i))
       :snt2 (c23-9 / contrast-01
                    :ARG1 (c23-6 / love-01
                                 :ARG0 (c23-4 / i))
                    :ARG2 (c23-0 / feel-05
                                 :ARG1 (c23-13 / it)
                                 :ARG2 (c23-5 / have-mod-91
                                              :ARG1 c23-13
                                              :ARG2 (c23-7 / podcast
                                                           :mod (c23-8 / meet-03
                                                                       :ARG1 (c23-2 / person
                                                                                    :ARG0-of (c23-14 / cast-03)))))
                                 :mod (c23-12 / definite)
                                 :time (c23-3 / now))))

# ::snt Air date hasnt been released yet
# ::tokens ["Air", "date", "has", "nt", "been", "released", "yet"]
# ::lemmas ["air", "date", "have", "not", "be", "release", "yet"]
(c25-0 / release-01
       :ARG1 (c25-2 / date
                    :mod (c25-3 / air))
       :time (c25-1 / yet)
       :polarity -)

# ::snt There is a lot of info that didnt include and/or simply didnt know about. Listen to and read Adnans Story to be truly informed about this travesty.
# ::tokens ["There", "is", "a", "lot", "of", "info", "that", "did", "nt", "include", "and/or", "simply", "did", "nt", "know", "about", ".", "Listen", "to", "and", "read", "Adnans", "Story", "to", "be", "truly", "informed", "about", "this", "travesty", "."]
# ::lemmas ["there", "be", "a", "lot", "of", "info", "that", "do", "not", "include", "and/or", "simply", "do", "not", "know", "about", ".", "listen", "to", "and", "read", "Adnans", "Story", "to", "be", "truly", "inform", "about", "this", "travesty", "."]
(c26-2 / multi-sentence
       :snt1 (c26-11 / information
                     :quant (c26-7 / lot)
                     :ARG1-of (c26-5 / include-01
                                     :polarity -)
                     :ARG1-of (c26-8 / know-01
                                     :ARG1-of (c26-4 / simple-02)
                                     :polarity -))
       :snt2 (c26-12 / and-or
                     :op1 (c26-14 / listen-01
                                  :ARG0 (c26-1 / you)
                                  :ARG1 (c26-0 / story
                                               :poss (c26-9 / person
                                                            :name (c26-3 / name
                                                                         :op1 "Adnans")))
                                  :mode imperative)
                     :op2 (c26-6 / read-01
                                 :ARG0 c26-1
                                 :ARG1 c26-0
                                 :mode imperative)
                     :purpose (c26-15 / inform-01
                                      :ARG1 c26-1
                                      :ARG2 (c26-10 / travesty
                                                    :mod (c26-16 / this))
                                      :degree (c26-13 / truly))))

# ::snt NO WAY
# ::tokens ["NO", "WAY"]
# ::lemmas ["no", "way"]
(c27-0 / way
       :polarity -)

# ::snt And !!!
# ::tokens ["And", "!", "!", "!"]
# ::lemmas ["and", "!", "!", "!"]
(c29-0 / and
       :mode expressive)

# ::snt brought to you by mail kimp
# ::tokens ["brought", "to", "you", "by", "mail", "kimp"]
# ::lemmas ["bring", "to", "you", "by", "mail", "kimp"]
(c30-1 / bring-01
       :ARG2 (c30-2 / you)
       :medium (c30-0 / company
                      :name (c30-3 / name
                                   :op1 "Kimp")))

# ::snt Preach!
# ::tokens ["Preach", "!"]
# ::lemmas ["Preach", "!"]
(c32-1 / preach-01
       :ARG0 (c32-0 / you)
       :mode imperative)

# ::snt When is soon?! I need date and time!
# ::tokens ["When", "is", "soon", "?", "!", "I", "need", "date", "and", "time", "!"]
# ::lemmas ["when", "be", "soon", "?", "!", "i", "need", "date", "and", "time", "!"]
(c33-2 / multi-sentence
       :snt1 (c33-0 / be-temporally-at-91
                    :ARG1 (c33-3 / soon)
                    :ARG2 (c33-6 / amr-unknown))
       :snt2 (c33-1 / need-01
                    :ARG0 (c33-5 / i)
                    :ARG1 (c33-7 / and
                                 :op1 (c33-8 / date)
                                 :op2 (c33-4 / time))))

# ::snt Is there a book?
# ::tokens ["Is", "there", "a", "book", "?"]
# ::lemmas ["be", "there", "a", "book", "?"]
(c34-0 / book
       :polarity (c34-1 / amr-unknown))

# ::snt When the hell is soon!? I need dates or at least tell me what month
# ::tokens ["When", "the", "hell", "is", "soon", "!", "?", "I", "need", "dates", "or", "at", "least", "tell", "me", "what", "month"]
# ::lemmas ["when", "the", "hell", "be", "soon", "!", "?", "i", "need", "date", "or", "at", "least", "tell", "i", "what", "month"]
(c35-3 / multi-sentence
       :snt1 (c35-1 / be-temporally-at-91
                    :ARG2 (c35-5 / soon
                                 :mod (c35-7 / hell))
                    :mode expressive)
       :snt2 (c35-0 / or
                    :op1 (c35-4 / need-01
                                :ARG0 (c35-9 / i)
                                :ARG1 (c35-11 / date))
                    :op2 (c35-10 / tell-01
                                 :ARG0 (c35-2 / you)
                                 :ARG1 (c35-8 / month
                                              :mod (c35-6 / at-least))
                                 :ARG2 c35-9)))

# ::snt count me in.
# ::tokens ["count", "me", "in", "."]
# ::lemmas ["count", "i", "in", "."]
(c36-0 / count-02
       :ARG0 (c36-1 / you)
       :ARG1 (c36-2 / i)
       :mode imperative)

# ::snt Saaaame!
# ::tokens ["Saaaame", "!"]
# ::lemmas ["Saaaame", "!"]
(c37-0 / something
       :mode expressive)

# ::snt Yeeeeeessss!!! I need to know everything!
# ::tokens ["Yeeeeeessss", "!", "!", "!", "I", "need", "to", "know", "everything", "!"]
# ::lemmas ["Yeeeeeessss", "!", "!", "!", "i", "need", "to", "know", "everything", "!"]
(c38-2 / multi-sentence
       :snt1 (c38-0 / yep
                    :mode expressive)
       :snt2 (c38-1 / need-01
                    :ARG0 (c38-5 / i)
                    :ARG1 (c38-4 / know-01
                                 :ARG0 c38-5
                                 :ARG1 (c38-3 / everything))))

# ::snt Let me know what you think afterwards.
# ::tokens ["Let", "me", "know", "what", "you", "think", "afterwards", "."]
# ::lemmas ["let", "i", "know", "what", "you", "think", "afterwards", "."]
(c39-2 / let-know-07
       :ARG0 (c39-0 / you)
       :ARG1 (c39-4 / i)
       :ARG2 (c39-3 / thing
                    :ARG1-of (c39-5 / think-01
                                    :ARG0 c39-0
                                    :time (c39-1 / afterwards)))
       :mode imperative)

# ::snt Definitely should.
# ::tokens ["Definitely", "should", "."]
# ::lemmas ["definitely", "should", "."]
(c40-0 / recommend-01
       :mod (c40-1 / definite))

# ::snt !! We HAVE to watch this!!
# ::tokens ["!", "!", "We", "HAVE", "to", "watch", "this", "!", "!"]
# ::lemmas ["!", "!", "we", "have", "to", "watch", "this", "!", "!"]
(c42-1 / obligate-01
       :ARG1 (c42-3 / we)
       :ARG2 (c42-0 / watch-01
                    :ARG0 c42-3
                    :ARG1 (c42-2 / this))
       :mode expressive)

# ::snt To ALL the I heard everything by listening to people no. No you did not. and read s book!! Do yourself a favor if you want the WHOLE story. I hope this doc tells the truth! Im excited!
# ::tokens ["To", "ALL", "the", "I", "heard", "everything", "by", "listening", "to", "people", "no", ".", "No", "you", "did", "not", ".", "and", "read", "s", "book", "!", "!", "Do", "yourself", "a", "favor", "if", "you", "want", "the", "WHOLE", "story", ".", "I", "hope", "this", "doc", "tells", "the", "truth", "!", "I", "m", "excited", "!"]
# ::lemmas ["to", "all", "the", "i", "hear", "everything", "by", "listen", "to", "people", "no", ".", "no", "you", "do", "not", ".", "and", "read", "s", "book", "!", "!", "do", "yourself", "a", "favor", "if", "you", "want", "the", "WHOLE", "story", ".", "i", "hope", "this", "doc", "tell", "the", "truth", "!", "i", "m", "excited", "!"]
(c43-11 / multi-sentence
        :snt1 (c43-5 / hear-01
                     :ARG0 (c43-20 / i)
                     :ARG1 (c43-16 / everything)
                     :ARG2 (c43-17 / person
                                   :mod (c43-8 / all))
                     :manner (c43-1 / listen-01
                                    :ARG0 c43-20
                                    :ARG1 (c43-15 / no)))
        :snt2 (c43-6 / and
                     :op1 (c43-22 / do-02
                                  :ARG0 (c43-3 / you)
                                  :ARG1 c43-22
                                  :ARG0 c43-3
                                  :ARG1 (c43-14 / favor)
                                  :condition (c43-18 / want-01
                                                     :ARG0 c43-3
                                                     :ARG1 (c43-0 / story
                                                                  :mod (c43-2 / whole)))
                                  :polarity -))
        :snt3 (c43-19 / hope-01
                      :ARG0 (c43-4 / i)
                      :ARG1 (c43-7 / tell-01
                                   :ARG0 (c43-12 / doc
                                                 :mod (c43-13 / this))
                                   :ARG1 (c43-21 / truth)))
        :snt4 (c43-9 / excite-01
                     :ARG1 (c43-10 / i)))

# ::snt yessss WE CAN WATCH THIS TOGETHER
# ::tokens ["yessss", "WE", "CAN", "WATCH", "THIS", "TOGETHER"]
# ::lemmas ["yessss", "WE", "can", "watch", "this", "together"]
(c44-1 / possible-01
       :ARG1 (c44-3 / watch-01
                    :ARG0 (c44-2 / we)
                    :ARG1 (c44-4 / this)
                    :mod (c44-5 / too))
       :mod (c44-0 / yessss
                   :mode expressive))

# ::snt Heck. Yes.
# ::tokens ["Heck", ".", "Yes", "."]
# ::lemmas ["heck", ".", "yes", "."]
(c45-1 / multi-sentence
       :snt1 (c45-0 / heck
                    :mode expressive)
       :snt2 (c45-2 / yes))

# ::snt Evil genius! He killed Hae with a collar bomb!
# ::tokens ["Evil", "genius", "!", "He", "killed", "Hae", "with", "a", "collar", "bomb", "!"]
# ::lemmas ["evil", "genius", "!", "he", "kill", "Hae", "with", "a", "collar", "bomb", "!"]
(c46-1 / multi-sentence
       :snt1 (c46-8 / genius
                    :mod (c46-3 / evil)
                    :mode expressive)
       :snt2 (c46-5 / kill-01
                    :ARG0 (c46-4 / he)
                    :ARG1 (c46-6 / person
                                 :name (c46-2 / name
                                              :op1 "Hae"))
                    :ARG2 (c46-0 / bomb
                                 :mod (c46-7 / collar))))

# ::snt OMFG
# ::tokens ["OMFG"]
# ::lemmas ["OMFG"]
(c47-0 / oh-my-god
       :mode expressive)

# ::snt Theres a lot more to the case that wasnt in Serial. have discovered plenty of new information.
# ::tokens ["There", "s", "a", "lot", "more", "to", "the", "case", "that", "was", "nt", "in", "Serial", ".", "have", "discovered", "plenty", "of", "new", "information", "."]
# ::lemmas ["there", "s", "a", "lot", "more", "to", "the", "case", "that", "be", "not", "in", "Serial", ".", "have", "discover", "plenty", "of", "new", "information", "."]
(c48-0 / multi-sentence
       :snt1 (c48-3 / more
                    :quant (c48-5 / lot)
                    :domain (c48-7 / case-03
                                   :location (c48-4 / publication
                                                    :name (c48-1 / name
                                                                 :op1 "Serial"))
                                   :polarity -))
       :snt2 (c48-9 / discover-01
                    :ARG1 (c48-8 / information
                                 :ARG1-of (c48-6 / new-01)
                                 :quant (c48-2 / plenty))))

# ::snt Will we get it here in the UK?
# ::tokens ["Will", "we", "get", "it", "here", "in", "the", "UK", "?"]
# ::lemmas ["will", "we", "get", "it", "here", "in", "the", "UK", "?"]
(c50-6 / get-01
       :ARG0 (c50-2 / we)
       :ARG1 (c50-4 / it)
       :polarity (c50-5 / amr-unknown)
       :location (c50-1 / here
                        :location (c50-3 / country
                                         :name (c50-0 / name
                                                      :op1 "UK"))))
