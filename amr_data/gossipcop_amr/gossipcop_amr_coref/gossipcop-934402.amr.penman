# ::snt I saw!!
# ::tokens ["I", "saw", "!", "!"]
# ::lemmas ["i", "see", "!", "!"]
(c1-1 / see-01
      :ARG0 (c1-0 / i)
      :mode expressive)

# ::snt Ouch
# ::tokens ["Ouch"]
# ::lemmas ["ouch"]
(c3-0 / ouch
      :mode expressive)

# ::snt se t me zuando???????????
# ::tokens ["se", "t", "me", "zuando", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]
# ::lemmas ["se", "t", "me", "zuando", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"]
(c5-0 / zuando
      :polarity (c5-2 / amr-unknown)
      :domain (c5-1 / i))

# ::snt chorei
# ::tokens ["chorei"]
# ::lemmas ["chorei"]
(c6-1 / person
      :name (c6-0 / name
                  :op1 "chorei"))

# ::snt Im here for this
# ::tokens ["I", "m", "here", "for", "this"]
# ::lemmas ["i", "m", "here", "for", "this"]
(c7-0 / here
      :domain (c7-1 / i)
      :purpose (c7-2 / this))

# ::snt WHERE WAS THIS
# ::tokens ["WHERE", "WAS", "THIS"]
# ::lemmas ["where", "be", "this"]
(c8-1 / this
      :location (c8-0 / amr-unknown))

# ::snt Last time they did this with Coachella it wasnt her!
# ::tokens ["Last", "time", "they", "did", "this", "with", "Coachella", "it", "was", "nt", "her", "!"]
# ::lemmas ["last", "time", "they", "do", "this", "with", "Coachella", "it", "be", "not", "she", "!"]
(c9-2 / have-polarity-91
      :ARG1 (c9-1 / event
                  :name (c9-0 / name
                              :op1 "Coachella"))
      :time (c9-5 / do-02
                  :ARG0 (c9-4 / they)
                  :ARG1 (c9-6 / this)
                  :mod (c9-3 / last)
                  :accompanier c9-1)
      :ARG2 -)

# ::snt Oh, not again. Boring!
# ::tokens ["Oh", ",", "not", "again", ".", "Boring", "!"]
# ::lemmas ["oh", ",", "not", "again", ".", "boring", "!"]
(c10-2 / multi-sentence
       :snt1 (c10-3 / again
                    :mod (c10-0 / oh
                                :mode expressive)
                    :polarity -)
       :snt2 (c10-1 / boring-00))

# ::snt Hahahahhahahhahhahahhaha lo mismo pens.
# ::tokens ["Hahahahhahahhahhahahhaha", "lo", "mismo", "pens", "."]
# ::lemmas ["Hahahahhahahhahhahahhaha", "lo", "mismo", "pen", "."]
(c11-3 / lo
       :mod (c11-1 / pen
                   :mod (c11-0 / mismo))
       :mod (c11-2 / haha
                   :mode expressive))

# ::snt Nomas regreso con ella porque la selena lo cambio por yastin te amo wey
# ::tokens ["Nomas", "regreso", "con", "ella", "porque", "la", "selena", "lo", "cambio", "por", "yastin", "te", "amo", "wey"]
# ::lemmas ["Nomas", "regreso", "con", "ella", "porque", "la", "selena", "lo", "cambio", "por", "yastin", "te", "amo", "wey"]
(c12-4 / multi-sentence
       :snt1 (c12-6 / regreso-00
                    :ARG0 (c12-8 / person
                                 :name (c12-2 / name
                                              :op1 "Nomas"))
                    :ARG1 (c12-3 / person
                                 :name (c12-7 / name
                                              :op1 "Ella")))
       :snt2 (c12-10 / cause-01
                     :ARG0 (c12-13 / cambio
                                   :domain (c12-9 / la
                                                  :mod (c12-5 / selena))
                                   :ARG1-of (c12-11 / cause-01
                                                    :ARG0 (c12-1 / yastin
                                                                 :ARG0-of (c12-0 / cause-01
                                                                                 :ARG1 (c12-12 / amo-wey
                                                                                               :mode expressive)))))
                     :ARG1 c12-6
                     :ARG0 c12-8
                     :ARG1 c12-3))

# ::snt Yeah...you prolly right.
# ::tokens ["Yeah", "...", "you", "prolly", "right", "."]
# ::lemmas ["yeah", "...", "you", "prolly", "right", "."]
(c13-1 / right-06
       :ARG1 (c13-2 / you)
       :mod (c13-0 / yeah
                   :mode expressive)
       :mod (c13-3 / probable))

# ::snt They back together so deal with it.they don't care what you think.
# ::tokens ["They", "back", "together", "so", "deal", "with", "it.they", "do", "n't", "care", "what", "you", "think", "."]
# ::lemmas ["they", "back", "together", "so", "deal", "with", "it.they", "do", "not", "care", "what", "you", "think", "."]
(c15-2 / multi-sentence
       :snt1 (c15-0 / back-02
                    :ARG0 (c15-7 / they)
                    :ARG1-of (c15-5 / cause-01
                                    :ARG0 (c15-9 / deal-01
                                                 :ARG0 c15-7
                                                 :ARG2 (c15-6 / it))))
       :snt2 (c15-10 / care-01
                     :ARG0 (c15-4 / they)
                     :ARG1 (c15-8 / thing
                                  :ARG1-of (c15-3 / think-01
                                                  :ARG0 (c15-1 / you)))
                     :polarity -))

# ::snt You know this because?oh i forget he told you.
# ::tokens ["You", "know", "this", "because?oh", "i", "forget", "he", "told", "you", "."]
# ::lemmas ["you", "know", "this", "because?oh", "i", "forget", "he", "tell", "you", "."]
(c16-6 / cause-01
       :ARG0 (c16-0 / forget-01
                    :ARG0 (c16-7 / i)
                    :ARG1 (c16-8 / tell-01
                                 :ARG0 (c16-4 / he)
                                 :ARG2 (c16-2 / you))
                    :mod (c16-1 / oh
                                :mode expressive))
       :ARG1 (c16-5 / know-01
                    :ARG0 c16-2
                    :ARG1 (c16-9 / this))
       :polarity (c16-3 / amr-unknown))

# ::snt One turn is enough. You are young.
# ::tokens ["One", "turn", "is", "enough", ".", "You", "are", "young", "."]
# ::lemmas ["One", "turn", "be", "enough", ".", "you", "be", "young", "."]
(c17-1 / multi-sentence
       :snt1 (c17-3 / have-quant-91
                    :ARG1 (c17-4 / turn-01
                                 :quant 1)
                    :ARG3 (c17-2 / enough))
       :snt2 (c17-0 / young
                    :domain (c17-5 / you)))

# ::snt Is this her or no
# ::tokens ["Is", "this", "her", "or", "no"]
# ::lemmas ["be", "this", "she", "or", "no"]
(c18-3 / amr-choice
       :op1 (c18-0 / she
                   :domain (c18-2 / this))
       :op2 (c18-1 / no))

# ::snt Refurbished Recycled Regenerated Rebound....
# ::tokens ["Refurbished", "Recycled", "Regenerated", "Rebound", "...."]
# ::lemmas ["refurbish", "recycle", "Regenerated", "Rebound", "...."]
(c19-1 / refashion-01
       :ARG1 (c19-3 / thing
                    :ARG1-of (c19-2 / regenerate-01)
                    :ARG1-of (c19-0 / recycle-01)))

# ::snt Nah I think he cared for Selena a lot more considering COMN is for her...weeknd very well may have been selenas rebound tho....
# ::tokens ["Nah", "I", "think", "he", "cared", "for", "Selena", "a", "lot", "more", "considering", "COMN", "is", "for", "her", "...", "weeknd", "very", "well", "may", "have", "been", "selenas", "rebound", "tho", "...."]
# ::lemmas ["Nah", "i", "think", "he", "care", "for", "Selena", "a", "lot", "more", "consider", "COMN", "be", "for", "she", "...", "weeknd", "very", "well", "may", "have", "be", "selena", "rebound", "tho", "...."]
(c21-12 / multi-sentence
        :snt1 (c21-9 / think-01
                     :ARG0 (c21-23 / i)
                     :ARG1 (c21-15 / care-01
                                   :ARG0 (c21-7 / he)
                                   :ARG1 (c21-19 / person
                                                 :name (c21-17 / name
                                                               :op1 "Selena"))
                                   :ARG1-of (c21-22 / have-quant-91
                                                    :ARG3 (c21-8 / more
                                                                 :quant (c21-0 / lot)))
                                   :ARG1-of (c21-10 / cause-01
                                                    :ARG0 (c21-3 / consider-01
                                                                 :ARG0 c21-23
                                                                 :ARG1 (c21-11 / benefit-01
                                                                               :ARG0 (c21-13 / person
                                                                                             :name (c21-14 / name
                                                                                                           :op1 "Clinton"))
                                                                               :ARG1 c21-19))))
                     :mod (c21-20 / nah))
        :snt2 (c21-4 / possible-01
                     :ARG1 (c21-18 / rebound-01
                                   :ARG0 (c21-2 / person
                                                :name (c21-16 / name
                                                              :op1 "Selle"))
                                   :time (c21-21 / week
                                                 :mod (c21-1 / well
                                                             :degree (c21-5 / very))))
                     :ARG1-of (c21-6 / have-concession-91)))

# ::snt Love is sweeter the second time around.. I mean not for Jelena.
# ::tokens ["Love", "is", "sweeter", "the", "second", "time", "around", "..", "I", "mean", "not", "for", "Jelena", "."]
# ::lemmas ["Love", "be", "sweet", "the", "second", "time", "around", "..", "i", "mean", "not", "for", "Jelena", "."]
(c22-1 / multi-sentence
       :snt1 (c22-5 / have-degree-91
                    :ARG1 (c22-6 / love)
                    :ARG2 (c22-3 / sweet-03)
                    :ARG3 (c22-4 / more)
                    :time (c22-9 / time
                                 :ord (c22-0 / ordinal-entity
                                             :value 2)))
       :snt2 (c22-11 / mean-01
                     :ARG0 (c22-8 / i)
                     :ARG2 (c22-10 / love
                                   :beneficiary (c22-7 / person
                                                       :name (c22-2 / name
                                                                    :op1 "Jelena"))
                                   :polarity -)))

# ::snt Yesssssss bitch
# ::tokens ["Yesssssss", "bitch"]
# ::lemmas ["Yesssssss", "bitch"]
(c23-0 / bitch
       :domain (c23-1 / you))

# ::snt from Selena
# ::tokens ["from", "Selena"]
# ::lemmas ["from", "Selena"]
(c24-1 / be-from-91
       :ARG2 (c24-0 / city
                    :name (c24-2 / name
                                 :op1 "Selena")))

# ::snt My prayers have been answered
# ::tokens ["My", "prayers", "have", "been", "answered"]
# ::lemmas ["my", "prayer", "have", "be", "answer"]
(c25-3 / answer-01
       :ARG1 (c25-1 / thing
                    :ARG1-of (c25-0 / pray-01
                                    :ARG0 (c25-2 / i))))

# ::snt Leftovers
# ::tokens ["Leftovers"]
# ::lemmas ["Leftovers"]
(c26-1 / thing
       :ARG1-of (c26-0 / left-19))

# ::snt So hypocrite
# ::tokens ["So", "hypocrite"]
# ::lemmas ["so", "hypocrite"]
(c27-0 / hypocrite
       :degree (c27-1 / so))

# ::snt Jpleuuur
# ::tokens ["Jpleuuur"]
# ::lemmas ["Jpleuuur"]
(c28-0 / jpleuuur
       :mode expressive)

# ::snt Homeboy is getting it
# ::tokens ["Homeboy", "is", "getting", "it"]
# ::lemmas ["Homeboy", "be", "get", "it"]
(c29-0 / get-01
       :ARG0 (c29-1 / homeboy)
       :ARG1 (c29-2 / it))

# ::snt My heart
# ::tokens ["My", "heart"]
# ::lemmas ["my", "heart"]
(c31-0 / heart
       :part-of (c31-1 / i))

# ::snt Im guessing she heard Wasted Times...
# ::tokens ["I", "m", "guessing", "she", "heard", "Wasted", "Times", "..."]
# ::lemmas ["i", "m", "guess", "she", "hear", "Wasted", "Times", "..."]
(c32-5 / guess-01
       :ARG0 (c32-4 / i)
       :ARG1 (c32-2 / hear-01
                    :ARG0 (c32-1 / she)
                    :ARG1 (c32-0 / newspaper
                                 :name (c32-3 / name
                                              :op1 "Wasted"
                                              :op2 "Times"))))

# ::snt Me cago en todo
# ::tokens ["Me", "cago", "en", "todo"]
# ::lemmas ["i", "cago", "en", "todo"]
(c33-1 / me
       :mod (c33-0 / cago-de-do))
