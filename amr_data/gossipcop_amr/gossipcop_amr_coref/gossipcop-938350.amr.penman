# ::snt Next season is in a year or two. Who cares. It was awesome. Worth the wait? No.
# ::tokens ["Next", "season", "is", "in", "a", "year", "or", "two", ".", "Who", "cares", ".", "It", "was", "awesome", ".", "Worth", "the", "wait", "?", "No", "."]
# ::lemmas ["Next", "season", "be", "in", "a", "year", "or", "two", ".", "who", "care", ".", "it", "be", "awesome", ".", "worth", "the", "wait", "?", "no", "."]
(c1-3 / multi-sentence
      :snt1 (c1-4 / season
                  :mod (c1-2 / next)
                  :time (c1-12 / after
                               :op1 (c1-5 / now)
                               :quant (c1-0 / or
                                            :op1 (c1-10 / temporal-quantity
                                                        :unit (c1-1 / year)
                                                        :quant 1)
                                            :op2 (c1-15 / temporal-quantity
                                                        :unit (c1-13 / year)
                                                        :quant 2))))
      :snt2 (c1-7 / care-01
                  :ARG0 (c1-11 / amr-unknown))
      :snt3 (c1-8 / awe-01
                  :ARG0 (c1-14 / it))
      :snt4 (c1-9 / worth-02
                  :ARG2 (c1-6 / wait-01)
                  :polarity c1-11))

# ::snt I dont think I can mentally prepare myself....
# ::tokens ["I", "do", "nt", "think", "I", "can", "mentally", "prepare", "myself", "...."]
# ::lemmas ["i", "do", "not", "think", "i", "can", "mentally", "prepare", "myself", "...."]
(c2-4 / think-01
      :ARG0 (c2-3 / i)
      :ARG1 (c2-2 / possible-01
                  :ARG1 (c2-1 / prepare-02
                              :ARG0 c2-3
                              :ARG1 c2-3
                              :manner (c2-0 / mental)))
      :polarity -)

# ::snt Had that been a good thing or bad?
# ::tokens ["Had", "that", "been", "a", "good", "thing", "or", "bad", "?"]
# ::lemmas ["have", "that", "be", "a", "good", "thing", "or", "bad", "?"]
(c3-3 / amr-choice
      :op1 (c3-0 / good-02
                 :ARG1 (c3-2 / that))
      :op2 (c3-1 / bad-07
                 :ARG1 c3-2))

# ::snt Is that literally or figuratively?
# ::tokens ["Is", "that", "literally", "or", "figuratively", "?"]
# ::lemmas ["be", "that", "literally", "or", "figuratively", "?"]
(c4-3 / amr-choice
      :op1 (c4-2 / literal)
      :op2 (c4-0 / figuratively)
      :domain (c4-1 / that))

# ::snt I'll respond to that in exactly odd weeks time.
# ::tokens ["I", "'ll", "respond", "to", "that", "in", "exactly", "odd", "weeks", "time", "."]
# ::lemmas ["i", "'ll", "respond", "to", "that", "in", "exactly", "odd", "weeks", "time", "."]
(c5-2 / respond-01
      :ARG0 (c5-6 / i)
      :ARG1 (c5-5 / that)
      :time (c5-7 / after
                  :op1 (c5-1 / now)
                  :quant (c5-4 / week
                               :mod (c5-0 / odd
                                          :mod (c5-3 / exact)))))

# ::snt Maybe Jon Snow got lucky again
# ::tokens ["Maybe", "Jon", "Snow", "got", "lucky", "again"]
# ::lemmas ["maybe", "Jon", "Snow", "get", "lucky", "again"]
(c6-3 / possible-01
      :ARG1 (c6-5 / get-03
                  :ARG1 (c6-1 / person
                              :name (c6-0 / name
                                          :op1 "Jon"
                                          :op2 "Snow"))
                  :ARG2 (c6-2 / lucky)
                  :mod (c6-4 / again)))

# ::snt Should we take this thing literally ?
# ::tokens ["Should", "we", "take", "this", "thing", "literally", "?"]
# ::lemmas ["should", "we", "take", "this", "thing", "literally", "?"]
(c7-0 / recommend-01
      :polarity (c7-1 / amr-unknown)
      :ARG1 (c7-4 / take-04
                  :ARG0 (c7-3 / we)
                  :ARG1 (c7-6 / thing
                              :mod (c7-5 / this))
                  :ARG2 (c7-2 / literal)))

# ::snt Im f-ed up just reading this article
# ::tokens ["I", "m", "f", "-", "ed", "up", "just", "reading", "this", "article"]
# ::lemmas ["i", "m", "f", "-", "ed", "up", "just", "read", "this", "article"]
(c9-0 / f-up-01
      :ARG0 (c9-4 / i)
      :time (c9-2 / read-01
                  :ARG0 c9-4
                  :ARG1 (c9-1 / article
                              :mod (c9-5 / this))
                  :mod (c9-3 / just)))

# ::snt Lots of dying I guess
# ::tokens ["Lots", "of", "dying", "I", "guess"]
# ::lemmas ["lot", "of", "die", "i", "guess"]
(c10-0 / guess-01
       :ARG0 (c10-3 / i)
       :ARG1 (c10-1 / die-01
                    :quant (c10-2 / lot)))

# ::snt We have like months to prepare, we be Aight.
# ::tokens ["We", "have", "like", "months", "to", "prepare", ",", "we", "be", "Aight", "."]
# ::lemmas ["we", "have", "like", "months", "to", "prepare", ",", "we", "be", "Aight", "."]
(c11-6 / cause-01
       :ARG0 (c11-3 / have-03
                    :ARG0 (c11-7 / we)
                    :ARG1 (c11-1 / multiple
                                 :op1 (c11-8 / temporal-quantity
                                             :unit (c11-4 / month)
                                             :quant 1)
                                 :ARG1-of (c11-2 / resemble-01))
                    :purpose (c11-5 / prepare-02
                                    :ARG0 c11-7))
       :ARG1 (c11-0 / off
                    :domain c11-7))

# ::snt Helllll yeaaahhhh.
# ::tokens ["Helllll", "yeaaahhhh", "."]
# ::lemmas ["helllll", "yeaaahhhh", "."]
(c12-0 / yeah
       :mod (c12-1 / hell)
       :mode expressive)

# ::snt And of course, as well.
# ::tokens ["And", "of", "course", ",", "as", "well", "."]
# ::lemmas ["and", "of", "course", ",", "as", "well", "."]
(c14-2 / and
       :op2 (c14-0 / of-course
                   :mod (c14-1 / as-well)))

# ::snt Why would she make such a huuugggeee statement though?
# ::tokens ["Why", "would", "she", "make", "such", "a", "huuugggeee", "statement", "though", "?"]
# ::lemmas ["why", "would", "she", "make", "such", "a", "huuugggeee", "statement", "though", "?"]
(c15-2 / have-concession-91
       :ARG1 (c15-3 / cause-01
                    :ARG0 (c15-5 / amr-unknown)
                    :ARG1 (c15-1 / state-01
                                 :ARG0 (c15-0 / she)
                                 :mod (c15-4 / huck
                                             :mode expressive)
                                 :mod (c15-6 / such))))

# ::snt just the headline
# ::tokens ["just", "the", "headline"]
# ::lemmas ["just", "the", "headline"]
(c16-2 / thing
       :ARG2-of (c16-0 / headline-01)
       :mod (c16-1 / just))

# ::snt with that its official when Game of Thrones season airs in
# ::tokens ["with", "that", "its", "official", "when", "Game", "of", "Thrones", "season", "airs", "in"]
# ::lemmas ["with", "that", "its", "official", "when", "Game", "of", "Thrones", "season", "air", "in"]
(c17-0 / official
       :domain (c17-4 / that)
       :time (c17-5 / air-01
                    :ARG1 (c17-3 / season
                                 :mod (c17-1 / broadcast-program
                                             :name (c17-2 / name
                                                          :op1 "Game"
                                                          :op2 "of"
                                                          :op3 "Thrones")))))

# ::snt :Theory: She is going to die when her baby born.
# ::tokens [":", "Theory", ":", "She", "is", "going", "to", "die", "when", "her", "baby", "born", "."]
# ::lemmas [":", "theory", ":", "she", "be", "go", "to", "die", "when", "her", "baby", "bear", "."]
(c18-5 / theory
       :topic (c18-6 / die-01
                     :ARG1 (c18-1 / she)
                     :time (c18-0 / bear-02
                                  :ARG1 (c18-2 / baby
                                               :ARG0-of (c18-3 / have-rel-role-91
                                                               :ARG1 c18-1
                                                               :ARG2 (c18-4 / child))))))

# ::snt Absolutely gorgeous woman
# ::tokens ["Absolutely", "gorgeous", "woman"]
# ::lemmas ["absolutely", "gorgeous", "woman"]
(c19-1 / woman
       :mod (c19-0 / gorgeous
                   :degree (c19-2 / absolute)))

# ::snt Oh noo who got killed..
# ::tokens ["Oh", "noo", "who", "got", "killed", ".."]
# ::lemmas ["oh", "noo", "who", "got", "kill", ".."]
(c20-1 / kill-01
       :ARG1 (c20-0 / person
                    :mod (c20-2 / oh-no
                                :mode expressive)))

# ::snt Esta semana!
# ::tokens ["Esta", "semana", "!"]
# ::lemmas ["esta", "semana", "!"]
(c21-0 / Esta
       :mode expressive)

# ::snt Cuando me pase la usb hahahaha
# ::tokens ["Cuando", "me", "pase", "la", "usb", "hahahaha"]
# ::lemmas ["cuando", "i", "pase", "la", "usb", "hahahaha"]
(c22-0 / multi-sentence
       :snt1 (c22-3 / cuando
                    :ARG1 (c22-4 / i)
                    :mode expressive)
       :snt2 (c22-2 / pase-la-)
       :snt3 (c22-1 / haha
                    :mode expressive))

# ::snt Shit
# ::tokens ["Shit"]
# ::lemmas ["shit"]
(c24-0 / shit)

# ::snt I mean its still a year away...but idk of the world is ready lol
# ::tokens ["I", "mean", "its", "still", "a", "year", "away", "...", "but", "idk", "of", "the", "world", "is", "ready", "lol"]
# ::lemmas ["i", "mean", "its", "still", "a", "year", "away", "...", "but", "idk", "of", "the", "world", "be", "ready", "lol"]
(c25-2 / mean-01
       :ARG0 (c25-9 / i)
       :ARG2 (c25-7 / contrast-01
                    :ARG1 (c25-1 / now
                                 :domain (c25-10 / temporal-quantity
                                                 :unit (c25-0 / year)
                                                 :quant 1)
                                 :mod (c25-3 / still))
                    :ARG2 (c25-5 / ready-02
                                 :ARG1 (c25-8 / world
                                              :mod (c25-4 / idk))
                                 :ARG2-of (c25-6 / laugh-01
                                                 :ARG0 c25-9
                                                 :manner (c25-11 / loud)
                                                 :mode expressive))))

# ::snt TIENE QUE VERLAAAAAA
# ::tokens ["TIENE", "QUE", "VERLAAAAAA"]
# ::lemmas ["TIENE", "QUE", "VERLAAAAAA"]
(c27-0 / case-in-point-10
       :ARG2 (c27-2 / person
                    :name (c27-1 / name
                                 :op1 "Tiene"
                                 :op2 "Que"
                                 :op3 "Verlah")))

# ::snt OMG!!! I gonna get fcked up. That's for sure
# ::tokens ["OMG", "!", "!", "!", "I", "gon", "na", "get", "fcked", "up", ".", "That", "'s", "for", "sure"]
# ::lemmas ["OMG", "!", "!", "!", "i", "going", "to", "get", "fcke", "up", ".", "that", "be", "for", "sure"]
(c29-2 / multi-sentence
       :snt1 (c29-0 / oh-my-god
                    :mode expressive)
       :snt2 (c29-3 / sure-02
                    :ARG1 (c29-1 / that)))

# ::snt WE MUST PREPARE OURSELVES
# ::tokens ["WE", "MUST", "PREPARE", "OURSELVES"]
# ::lemmas ["we", "must", "prepare", "ourselves"]
(c30-1 / obligate-01
       :ARG1 (c30-3 / we)
       :ARG2 (c30-2 / protect-01
                    :ARG0 c30-3
                    :ARG1 (c30-0 / society
                                 :poss c30-3)))

# ::snt This is making me slightly uncomfortable. I have a feeling Dany's going to take after her father.
# ::tokens ["This", "is", "making", "me", "slightly", "uncomfortable", ".", "I", "have", "a", "feeling", "Dany", "'s", "going", "to", "take", "after", "her", "father", "."]
# ::lemmas ["this", "be", "make", "i", "slightly", "uncomfortable", ".", "i", "have", "a", "feeling", "Dany", "'s", "go", "to", "take", "after", "her", "father", "."]
(c31-1 / multi-sentence
       :snt1 (c31-6 / make-02
                    :ARG0 (c31-12 / this)
                    :ARG1 (c31-10 / comfortable-02
                                  :ARG0 c31-12
                                  :ARG1 (c31-11 / i)
                                  :degree (c31-3 / slight)
                                  :polarity -))
       :snt2 (c31-0 / feel-02
                    :ARG0 (c31-4 / i)
                    :ARG1 (c31-13 / take-03
                                  :ARG0 (c31-7 / person
                                               :name (c31-2 / name
                                                            :op1 "Dany"))
                                  :ARG1 (c31-5 / person
                                               :ARG0-of (c31-8 / have-rel-role-91
                                                               :ARG1 c31-7
                                                               :ARG2 (c31-9 / father))))))
