# ::snt Beliebers vote reply and RT please we are in this together every step of the way with when it was just a dream to a legend forever and alway
# ::tokens ["Beliebers", "vote", "reply", "and", "RT", "please", "we", "are", "in", "this", "together", "every", "step", "of", "the", "way", "with", "when", "it", "was", "just", "a", "dream", "to", "a", "legend", "forever", "and", "alway"]
# ::lemmas ["belieber", "vote", "reply", "and", "RT", "please", "we", "be", "in", "this", "together", "every", "step", "of", "the", "way", "with", "when", "it", "be", "just", "a", "dream", "to", "a", "legend", "forever", "and", "alway"]
(c4-10 / multi-sentence
       :snt1 (c4-8 / and
                   :op1 (c4-3 / vote-01
                              :ARG0 (c4-15 / person
                                           :name (c4-12 / name
                                                        :op1 "Beliebers"))
                              :ARG1 (c4-13 / reply-01
                                           :op2-of c4-8))
                   :ARG0 c4-15)
       :snt2 (c4-9 / be-located-at-91
                   :ARG1 (c4-16 / we)
                   :ARG2 (c4-7 / this)
                   :accompanier (c4-6 / and
                                      :op1 (c4-0 / step-01
                                                 :mod (c4-14 / every)
                                                 :part-of (c4-2 / way))
                                      :op2 (c4-18 / dream-01
                                                  :ARG0 (c4-1 / legend)
                                                  :ARG1 (c4-17 / it)
                                                  :mod (c4-5 / just)
                                                  :duration (c4-11 / forever)
                                                  :mod (c4-4 / alway))))
       :polite +)

# ::snt and have a saying the teamwork make the dream work try to think about this and work on it but never give up Love U
# ::tokens ["and", "have", "a", "saying", "the", "teamwork", "make", "the", "dream", "work", "try", "to", "think", "about", "this", "and", "work", "on", "it", "but", "never", "give", "up", "Love", "U"]
# ::lemmas ["and", "have", "a", "saying", "the", "teamwork", "make", "the", "dream", "work", "try", "to", "think", "about", "this", "and", "work", "on", "it", "but", "never", "give", "up", "Love", "U"]
(c5-13 / and
       :op2 (c5-5 / have-03
                  :ARG0 (c5-0 / you)
                  :ARG1 (c5-3 / say-01
                              :ARG1 (c5-9 / contrast-01
                                          :ARG1 (c5-1 / make-02
                                                      :ARG0 (c5-11 / teamwork)
                                                      :ARG1 (c5-10 / work-01
                                                                   :ARG1 (c5-15 / dream-01)))
                                          :ARG2 (c5-16 / try-01
                                                       :ARG0 c5-0
                                                       :ARG1 (c5-12 / and
                                                                    :op1 (c5-14 / think-01
                                                                                :ARG0 c5-0
                                                                                :ARG2 (c5-4 / this))
                                                                    :op2 (c5-8 / work-01
                                                                               :ARG0 c5-0
                                                                               :ARG1 c5-4))))
                              :ARG2 (c5-2 / give-up-07
                                          :ARG0 c5-0
                                          :ARG1 (c5-6 / love-01
                                                      :ARG0 c5-0)
                                          :time (c5-7 / ever)
                                          :polarity -
                                          :mode imperative))
                  :mode imperative))

# ::snt don't stop supporting him even if you are alone , because at the end winnig or losing you'll not be disappointed because you did your best you did what you had to do as im a but i love JB i actually miss him and i hope he'll be at the BBMAs so fighting
# ::tokens ["do", "n't", "stop", "supporting", "him", "even", "if", "you", "are", "alone", ",", "because", "at", "the", "end", "winnig", "or", "losing", "you", "'ll", "not", "be", "disappointed", "because", "you", "did", "your", "best", "you", "did", "what", "you", "had", "to", "do", "as", "i", "m", "a", "but", "i", "love", "JB", "i", "actually", "miss", "him", "and", "i", "hope", "he", "'ll", "be", "at", "the", "BBMAs", "so", "fighting"]
# ::lemmas ["do", "not", "stop", "support", "he", "even", "if", "you", "be", "alone", ",", "because", "at", "the", "end", "winnig", "or", "lose", "you", "'ll", "not", "be", "disappoint", "because", "you", "do", "your", "good", "you", "do", "what", "you", "have", "to", "do", "as", "i", "m", "a", "but", "i", "love", "JB", "i", "actually", "miss", "he", "and", "i", "hope", "he", "'ll", "be", "at", "the", "BBMAs", "so", "fight"]
(c6-0 / stop-01
      :ARG0 (c6-5 / you)
      :ARG1 (c6-3 / support-01
                  :ARG0 c6-5
                  :ARG1 (c6-7 / he))
      :concession (c6-27 / even-if
                         :op1 (c6-12 / alone
                                     :domain c6-5))
      :ARG1-of (c6-21 / cause-01
                      :ARG0 (c6-33 / disappoint-01
                                   :ARG0 (c6-22 / do-02
                                                :ARG0 c6-5
                                                :ARG1 (c6-11 / thing
                                                             :ARG1-of (c6-31 / have-degree-91
                                                                             :ARG2 (c6-14 / good-02
                                                                                          :ARG1 c6-11)
                                                                             :ARG3 (c6-19 / most)))
                                                :time (c6-13 / end-01
                                                             :ARG1 (c6-4 / or
                                                                         :op1 (c6-30 / win-01
                                                                                     :ARG0 c6-5)
                                                                         :op2 (c6-1 / lose-03
                                                                                    :ARG0 c6-5)))
                                                :ARG1 c6-5
                                                :ARG1-of (c6-16 / cause-01
                                                                :ARG0 (c6-20 / do-02
                                                                             :ARG0 c6-5
                                                                             :ARG1 (c6-23 / thing
                                                                                          :ARG1-of (c6-28 / do-02
                                                                                                          :ARG0 c6-5
                                                                                                          :ARG2-of (c6-17 / obligate-01
                                                                                                                          :ARG0 c6-5))))))
                                   :ARG1-of (c6-2 / contrast-01
                                                  :ARG2 (c6-10 / and
                                                               :op1 (c6-15 / love-01
                                                                           :ARG0 (c6-32 / i)
                                                                           :ARG1 (c6-29 / person
                                                                                        :name (c6-26 / name
                                                                                                     :op1 "JB")))
                                                               :op2 (c6-8 / miss-01
                                                                          :ARG0 c6-32
                                                                          :ARG1 c6-29
                                                                          :ARG1-of (c6-9 / actual-02))
                                                               :op3 (c6-6 / hope-01
                                                                          :ARG0 c6-32
                                                                          :ARG1 (c6-18 / be-located-at-91
                                                                                       :ARG1 c6-29
                                                                                       :ARG2 (c6-24 / military
                                                                                                    :name c6-26
                                                                                                    :op1 "British"
                                                                                                    :op2 "Defense"
                                                                                                    :op3 "Army"))
                                                                          :ARG0-of (c6-25 / fight-01))))
                                   :polarity -))
      :mode imperative
      :polarity -)

# ::snt QUE
# ::tokens ["QUE"]
# ::lemmas ["QUE"]
(c13-0 / number
       :value "QUE")

# ::snt You bout to get lucky girl
# ::tokens ["You", "bout", "to", "get", "lucky", "girl"]
# ::lemmas ["you", "bout", "to", "get", "lucky", "girl"]
(c14-1 / say-01
       :ARG0 (c14-4 / i)
       :ARG1 (c14-0 / bout-to
                    :op1 (c14-5 / get-03
                                :ARG1 (c14-3 / girl)
                                :ARG2 (c14-2 / lucky)))
       :ARG2 c14-3)

# ::snt he was on the phone with his compa and he stops and goes "es que aqu estoy con un mujeron y ya me ense sus ojazos y no estan nada mal"
# ::tokens ["he", "was", "on", "the", "phone", "with", "his", "compa", "and", "he", "stops", "and", "goes", "\"", "es", "que", "aqu", "estoy", "con", "un", "mujeron", "y", "ya", "me", "ense", "sus", "ojazos", "y", "no", "estan", "nada", "mal", "\""]
# ::lemmas ["he", "be", "on", "the", "phone", "with", "his", "compa", "and", "he", "stop", "and", "go", "\"", "es", "que", "aqu", "estoy", "con", "un", "mujeron", "y", "ya", "i", "ense", "sus", "ojazos", "y", "no", "estan", "nada", "mal", "\""]
(c15-14 / and
        :op1 (c15-9 / phone-01
                    :ARG0 (c15-8 / he)
                    :ARG1 (c15-4 / person
                                 :ARG0-of (c15-12 / have-rel-role-91
                                                  :ARG1 c15-8
                                                  :ARG2 (c15-10 / compa))))
        :op2 (c15-13 / and
                     :op1 (c15-5 / stop-01
                                 :ARG0 c15-8)
                     :op2 (c15-15 / go-23
                                  :ARG0 c15-8
                                  :ARG1 (c15-11 / and
                                                :op1 (c15-0 / obligate-01
                                                            :ARG1 c15-8
                                                            :ARG2 (c15-17 / con-03
                                                                          :ARG0 c15-8
                                                                          :ARG1 c15-4
                                                                          :ARG0-of c15-12
                                                                          :ARG1 c15-8
                                                                          :ARG2 (c15-3 / mujeron)))))
                     :op2 (c15-7 / ense-01
                                 :ARG0 (c15-2 / you)
                                 :ARG1 (c15-1 / ojazos
                                              :poss c15-2))
                     :op3 (c15-16 / obligate-01
                                  :ARG1 c15-2
                                  :ARG2 (c15-6 / nada)
                                  :polarity -)))

# ::snt True true
# ::tokens ["True", "true"]
# ::lemmas ["true", "true"]
(c16-0 / true-01)

# ::snt Y'all he's MEXICAN Y'ALL KNOW HOW ROMANTIC US MEXICANS ARE
# ::tokens ["Y'all", "he", "'s", "MEXICAN", "Y'ALL", "KNOW", "HOW", "ROMANTIC", "US", "MEXICANS", "ARE"]
# ::lemmas ["y'all", "he", "be", "MEXICAN", "y'all", "know", "how", "romantic", "US", "mexican", "be"]
(c17-3 / multi-sentence
       :snt1 (c17-6 / person
                    :mod (c17-9 / country
                                :name (c17-2 / name
                                             :op1 "Mexico"))
                    :domain (c17-5 / he))
       :snt2 (c17-7 / know-01
                    :ARG0 (c17-1 / you
                                 :mod (c17-11 / all))
                    :ARG1 (c17-10 / thing
                                  :degree-of (c17-0 / beautiful-02
                                                    :ARG1 (c17-4 / person
                                                                 :mod (c17-12 / country
                                                                              :name (c17-8 / name
                                                                                           :op1 "US")))))))

# ::snt He's taller than I thought
# ::tokens ["He", "'s", "taller", "than", "I", "thought"]
# ::lemmas ["he", "be", "tall", "than", "i", "think"]
(c18-1 / have-degree-91
       :ARG1 (c18-2 / he)
       :ARG2 (c18-3 / tall)
       :ARG3 (c18-0 / more)
       :ARG4 (c18-5 / think-01
                    :ARG0 (c18-4 / i)))

# ::snt Who is he dating/married too?
# ::tokens ["Who", "is", "he", "dating", "/", "married", "too", "?"]
# ::lemmas ["who", "be", "he", "date", "/", "marry", "too", "?"]
(c19-1 / slash
       :op1 (c19-6 / date-02
                   :ARG0 (c19-2 / he)
                   :ARG1 (c19-5 / amr-unknown))
       :op2 (c19-0 / marry-01
                   :ARG1 c19-2
                   :ARG2 (c19-4 / amr-unknown))
       :mod (c19-3 / too))

# ::snt Is he married to this person named orla?
# ::tokens ["Is", "he", "married", "to", "this", "person", "named", "orla", "?"]
# ::lemmas ["be", "he", "marry", "to", "this", "person", "name", "orla", "?"]
(c20-1 / marry-01
       :ARG1 (c20-3 / he)
       :ARG2 (c20-4 / person
                    :name (c20-0 / name
                                 :op1 "Orla")
                    :mod (c20-5 / this))
       :polarity (c20-2 / amr-unknown))

# ::snt Her username is istanaking ?
# ::tokens ["Her", "username", "is", "istanaking", "?"]
# ::lemmas ["her", "username", "be", "istanake", "?"]
(c21-1 / username
       :polarity (c21-3 / amr-unknown)
       :poss (c21-0 / she)
       :domain (c21-2 / tanaking))

# ::snt No
# ::tokens ["No"]
# ::lemmas ["no"]
(c22-0 / no)

# ::snt This person named orla?
# ::tokens ["This", "person", "named", "orla", "?"]
# ::lemmas ["this", "person", "name", "orla", "?"]
(c23-2 / person
       :polarity (c23-3 / amr-unknown)
       :name (c23-0 / name
                    :op1 "Orla")
       :mod (c23-1 / this))

# ::snt Who?
# ::tokens ["Who", "?"]
# ::lemmas ["who", "?"]
(c24-0 / amr-unknown)

# ::snt Is he married to a person named orla?
# ::tokens ["Is", "he", "married", "to", "a", "person", "named", "orla", "?"]
# ::lemmas ["be", "he", "marry", "to", "a", "person", "name", "orla", "?"]
(c25-1 / marry-01
       :ARG1 (c25-2 / he)
       :ARG2 (c25-3 / person
                    :name (c25-0 / name
                                 :op1 "Orla"))
       :polarity (c25-4 / amr-unknown))

# ::snt What? Lol
# ::tokens ["What", "?", "Lol"]
# ::lemmas ["what", "?", "Lol"]
(c26-0 / multi-sentence
       :snt1 (c26-3 / amr-unknown)
       :snt2 (c26-1 / laugh-01
                    :manner (c26-4 / loud)
                    :mode expressive)
       :snt3 (c26-2 / amr-unknown))

# ::snt Is he married to person named orla?
# ::tokens ["Is", "he", "married", "to", "person", "named", "orla", "?"]
# ::lemmas ["be", "he", "marry", "to", "person", "name", "orla", "?"]
(c27-1 / marry-01
       :ARG1 (c27-2 / he)
       :ARG2 (c27-3 / person
                    :name (c27-0 / name
                                 :op1 "Orla"))
       :polarity (c27-4 / amr-unknown))

# ::snt Right
# ::tokens ["Right"]
# ::lemmas ["right"]
(c28-0 / right-06)

# ::snt He's still the only person I still wanna date only?
# ::tokens ["He", "'s", "still", "the", "only", "person", "I", "still", "wanna", "date", "only", "?"]
# ::lemmas ["he", "be", "still", "the", "only", "person", "i", "still", "wanna", "date", "only", "?"]
(c29-5 / person
       :polarity (c29-8 / amr-unknown)
       :mod (c29-0 / only)
       :domain (c29-4 / he)
       :mod (c29-3 / still)
       :ARG1-of (c29-9 / date-02
                       :ARG0 (c29-7 / i)
                       :ARG1-of (c29-6 / want-01
                                       :ARG0 c29-7
                                       :mod (c29-1 / still))
                       :mod (c29-2 / only)))

# ::snt Dude, if you don't get the sarcasm, keep quiet.
# ::tokens ["Dude", ",", "if", "you", "do", "n't", "get", "the", "sarcasm", ",", "keep", "quiet", "."]
# ::lemmas ["dude", ",", "if", "you", "do", "not", "get", "the", "sarcasm", ",", "keep", "quiet", "."]
(c30-1 / say-01
       :ARG1 (c30-2 / quiet-03
                    :ARG0 (c30-4 / dude
                                 :ARG1-of c30-2)
                    :condition (c30-3 / get-30
                                      :ARG0 c30-4
                                      :ARG1 (c30-0 / sarcasm)
                                      :polarity -)
                    :mode imperative)
       :ARG2 c30-4)

# ::snt please reply
# ::tokens ["please", "reply"]
# ::lemmas ["please", "reply"]
(c31-0 / reply-01
       :ARG0 (c31-1 / you)
       :polite +)

# ::snt It's a sad truth my year old soul still weeps for JB
# ::tokens ["It", "'s", "a", "sad", "truth", "my", "year", "old", "soul", "still", "weeps", "for", "JB"]
# ::lemmas ["it", "be", "a", "sad", "truth", "my", "year", "old", "soul", "still", "weep", "for", "JB"]
(c32-7 / truth
       :ARG0-of (c32-3 / sad-02)
       :domain (c32-5 / weep-01
                      :ARG0 (c32-0 / soul
                                   :poss (c32-6 / i)
                                   :age (c32-8 / temporal-quantity
                                               :unit (c32-1 / year)
                                               :quant 1))
                      :mod (c32-9 / still)
                      :beneficiary (c32-4 / person
                                          :name (c32-2 / name
                                                       :op1 "JB"))))

# ::snt thats crazy
# ::tokens ["that", "s", "crazy"]
# ::lemmas ["that", "s", "crazy"]
(c33-0 / crazy-03
       :ARG1 (c33-1 / that))

# ::snt is the song btw credits to the owner
# ::tokens ["is", "the", "song", "btw", "credits", "to", "the", "owner"]
# ::lemmas ["be", "the", "song", "btw", "credit", "to", "the", "owner"]
(c34-4 / credit-01
       :ARG1 (c34-3 / person
                    :ARG0-of (c34-0 / own-01))
       :ARG2 (c34-2 / song)
       :mod (c34-1 / by-the-way))

# ::snt i take offence to this
# ::tokens ["i", "take", "offence", "to", "this"]
# ::lemmas ["i", "take", "offence", "to", "this"]
(c35-0 / offend-01
       :ARG0 (c35-1 / i)
       :ARG1 (c35-2 / this))

# ::snt Hehe!
# ::tokens ["Hehe", "!"]
# ::lemmas ["hehe", "!"]
(c36-0 / hehe
       :mode expressive)

# ::snt Wtf hahahaha
# ::tokens ["Wtf", "hahahaha"]
# ::lemmas ["wtf", "hahahaha"]
(c37-0 / fuck-01
       :mode expressive)

# ::snt Sadly, it seems some people care TOO much though haha
# ::tokens ["Sadly", ",", "it", "seems", "some", "people", "care", "TOO", "much", "though", "haha"]
# ::lemmas ["sadly", ",", "it", "seem", "some", "people", "care", "TOO", "much", "though", "haha"]
(c38-3 / have-concession-91
       :ARG1 (c38-2 / seem-01
                    :ARG1 (c38-5 / care-01
                                 :ARG0 (c38-4 / person
                                              :mod (c38-0 / some))
                                 :quant (c38-1 / much))
                    :mod (c38-7 / sad)
                    :mod (c38-6 / haha
                                :mode expressive)))

# ::snt No, Gbenga didn't take Asa to France.
# ::tokens ["No", ",", "Gbenga", "did", "n't", "take", "Asa", "to", "France", "."]
# ::lemmas ["no", ",", "Gbenga", "do", "not", "take", "Asa", "to", "France", "."]
(c39-5 / take-01
       :ARG0 (c39-4 / company
                    :name (c39-0 / name
                                 :op1 "Gbenga"))
       :ARG1 (c39-2 / person
                    :name (c39-1 / name
                                 :op1 "Asa"))
       :ARG3 (c39-6 / country
                    :name (c39-3 / name
                                 :op1 "France"))
       :polarity -)

# ::snt Could have been him and Sam then because he told me there was another guy. One was road manager
# ::tokens ["Could", "have", "been", "him", "and", "Sam", "then", "because", "he", "told", "me", "there", "was", "another", "guy", ".", "One", "was", "road", "manager"]
# ::lemmas ["could", "have", "be", "he", "and", "Sam", "then", "because", "he", "tell", "i", "there", "be", "another", "guy", ".", "One", "be", "road", "manager"]
(c40-1 / multi-sentence
       :snt1 (c40-9 / cause-01
                    :ARG0 (c40-12 / tell-01
                                  :ARG0 (c40-6 / he)
                                  :ARG1 (c40-13 / guy
                                                :mod (c40-4 / another))
                                  :ARG2 (c40-11 / i)
                                  :time (c40-16 / then))
                    :ARG1 (c40-7 / possible-01
                                 :ARG1 (c40-14 / and
                                               :op1 (c40-10 / he)
                                               :op2 (c40-2 / person
                                                           :name (c40-3 / name
                                                                        :op1 "Sam")))))
       :snt2 (c40-15 / person
                     :ARG0-of (c40-8 / manage-01
                                     :ARG1 (c40-5 / road))
                     :domain (c40-0 / one)))

# ::snt I believe this is incorrect. Gbenga Shokefun was their manager.. unless It was him and Sam, he's also the guy that took Asa to paris
# ::tokens ["I", "believe", "this", "is", "incorrect", ".", "Gbenga", "Shokefun", "was", "their", "manager", "..", "unless", "It", "was", "him", "and", "Sam", ",", "he", "'s", "also", "the", "guy", "that", "took", "Asa", "to", "paris"]
# ::lemmas ["i", "believe", "this", "be", "incorrect", ".", "Gbenga", "Shokefun", "be", "their", "manager", "..", "unless", "it", "be", "he", "and", "Sam", ",", "he", "be", "also", "the", "guy", "that", "take", "Asa", "to", "paris"]
(c41-10 / multi-sentence
        :snt1 (c41-9 / believe-01
                     :ARG0 (c41-18 / i)
                     :ARG1 (c41-13 / correct-02
                                   :ARG1 (c41-6 / this)
                                   :polarity -))
        :snt2 (c41-16 / person
                      :ARG0-of (c41-2 / manage-01
                                      :ARG1 (c41-14 / they))
                      :domain (c41-11 / person
                                      :name (c41-15 / name
                                                    :op1 "Gbenga"
                                                    :op2 "Shokefun")))
        :snt3 (c41-7 / guy
                     :ARG0-of (c41-19 / take-01
                                      :ARG1 (c41-1 / person
                                                   :name (c41-12 / name
                                                                 :op1 "Asa"))
                                      :ARG3 (c41-0 / paris))
                     :mod (c41-5 / also)
                     :condition (c41-4 / and
                                       :op1 (c41-3 / he)
                                       :op2 (c41-8 / person
                                                   :name (c41-17 / name
                                                                 :op1 "Sam")))))

# ::snt Great music teachers
# ::tokens ["Great", "music", "teachers"]
# ::lemmas ["great", "music", "teacher"]
(c42-1 / person
       :ARG0-of (c42-3 / teach-01
                       :ARG1 (c42-0 / music))
       :mod (c42-2 / great))

# ::snt Whao!
# ::tokens ["Whao", "!"]
# ::lemmas ["Whao", "!"]
(c43-0 / whao
       :mode expressive)

# ::snt That escalated quickly
# ::tokens ["That", "escalated", "quickly"]
# ::lemmas ["that", "escalate", "quickly"]
(c44-0 / escalate-01
       :ARG1 (c44-2 / that)
       :ARG1-of (c44-1 / quick-02))

# ::snt Oh ohhhh
# ::tokens ["Oh", "ohhhh"]
# ::lemmas ["oh", "ohhhh"]
(c45-0 / oh-oh
       :mode expressive)

# ::snt Interestingly, there is no hint of any work done related to Naija on his Wikipedia.
# ::tokens ["Interestingly", ",", "there", "is", "no", "hint", "of", "any", "work", "done", "related", "to", "Naija", "on", "his", "Wikipedia", "."]
# ::lemmas ["interestingly", ",", "there", "be", "no", "hint", "of", "any", "work", "do", "related", "to", "Naija", "on", "his", "Wikipedia", "."]
(c46-3 / hint-01
       :ARG1 (c46-6 / work-01
                    :ARG1-of (c46-2 / relate-01
                                    :ARG2 (c46-4 / person
                                                 :name (c46-0 / name
                                                              :op1 "Naija"))))
       :location (c46-1 / publication
                        :name (c46-5 / name
                                     :op1 "Wikipedia")
                        :poss c46-4)
       :ARG2-of (c46-7 / interest-01)
       :polarity -)

# ::snt Truth! Dapo Torimiro wrote the smash hit 'Quickly' on John Legend's Album 'Evolver'. Song was a duet by John Legend and Brandy
# ::tokens ["Truth", "!", "Dapo", "Torimiro", "wrote", "the", "smash", "hit", "'", "Quickly", "'", "on", "John", "Legend", "'s", "Album", "'", "Evolver", "'", ".", "Song", "was", "a", "duet", "by", "John", "Legend", "and", "Brandy"]
# ::lemmas ["truth", "!", "Dapo", "Torimiro", "write", "the", "smash", "hit", "'", "quickly", "'", "on", "John", "Legend", "'s", "Album", "'", "Evolver", "'", ".", "Song", "be", "a", "duet", "by", "John", "Legend", "and", "Brandy"]
(c47-2 / multi-sentence
       :snt1 (c47-13 / truth
                     :mode expressive)
       :snt2 (c47-10 / write-01
                     :ARG0 (c47-7 / person
                                  :name (c47-1 / name
                                               :op1 "Dapo"
                                               :op2 "Torimiro"))
                     :ARG1 (c47-6 / hit-11
                                  :ARG1 (c47-12 / quick-02)
                                  :ARG1-of (c47-3 / smash-02)
                                  :location (c47-5 / album
                                                   :name (c47-8 / name
                                                                :op1 "Evolver")
                                                   :poss (c47-4 / person
                                                                :name (c47-9 / name
                                                                             :op1 "John"
                                                                             :op2 "John"
                                                                             :op3 "Legend")))))
       :snt3 (c47-15 / duet-01
                     :ARG0 (c47-14 / and
                                   :op1 c47-4
                                   :op2 (c47-16 / person
                                                :name (c47-11 / name
                                                              :op1 "Brandy")))
                     :ARG1 (c47-0 / song)))

# ::snt Yeah. Co-produced.
# ::tokens ["Yeah", ".", "Co", "-", "produced", "."]
# ::lemmas ["yeah", ".", "co", "-", "produce", "."]
(c48-2 / multi-sentence
       :snt1 (c48-1 / yeah)
       :snt2 (c48-0 / produce-01
                    :ARG1-of (c48-3 / co-01)))

# ::snt *eventual darn autocorrect
# ::tokens ["*", "eventual", "darn", "autocorrect"]
# ::lemmas ["*", "eventual", "darn", "autocorrect"]
(c49-2 / autocorrect
       :mod (c49-1 / event)
       :ARG1-of (c49-0 / darn-01))

# ::snt Dapo co-produced some songs on the eventually album. It was mostly produced by one Jeffrey "Mad Jeff" Taylor.
# ::tokens ["Dapo", "co", "-", "produced", "some", "songs", "on", "the", "eventually", "album", ".", "It", "was", "mostly", "produced", "by", "one", "Jeffrey", "\"", "Mad", "Jeff", "\"", "Taylor", "."]
# ::lemmas ["dapo", "co", "-", "produce", "some", "song", "on", "the", "eventually", "album", ".", "it", "be", "mostly", "produce", "by", "one", "Jeffrey", "\"", "Mad", "Jeff", "\"", "Taylor", "."]
(c50-4 / multi-sentence
       :snt1 (c50-9 / produce-01
                    :ARG0 (c50-0 / organization
                                 :name (c50-3 / name
                                              :op1 "Dapo"))
                    :ARG1 (c50-5 / song
                                 :quant (c50-1 / some))
                    :ARG3 (c50-13 / album
                                  :time (c50-7 / eventual))
                    :manner (c50-11 / together))
       :snt2 (c50-6 / produce-01
                    :ARG0 (c50-2 / one
                                 :name (c50-8 / name
                                              :op1 "Jeffrey"
                                              :op2 "Mad"
                                              :op3 "Jeff"
                                              :op4 "Taylor"))
                    :ARG1 (c50-12 / it)
                    :mod (c50-10 / most)))
