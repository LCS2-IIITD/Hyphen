# ::snt She gets turned on by cookware?
# ::tokens ["She", "gets", "turned", "on", "by", "cookware", "?"]
# ::lemmas ["she", "gets", "turn", "on", "by", "cookware", "?"]
(c1-3 / turn-on-12
      :polarity (c1-1 / amr-unknown)
      :ARG0 (c1-2 / cookware)
      :ARG1 (c1-0 / she))

# ::snt Pansexual = Freaky (anything)
# ::tokens ["Pansexual", "=", "Freaky", "(", "anything", ")"]
# ::lemmas ["pansexual", "=", "Freaky", "(", "anything", ")"]
(c2-1 / equal-01
      :ARG1 (c2-2 / pansexual)
      :ARG2 (c2-0 / freaky
                  :domain (c2-3 / anything)))

# ::snt Not caring about the gender your partner identifies as. You just love the person.
# ::tokens ["Not", "caring", "about", "the", "gender", "your", "partner", "identifies", "as", ".", "You", "just", "love", "the", "person", "."]
# ::lemmas ["not", "care", "about", "the", "gender", "your", "partner", "identifie", "as", ".", "you", "just", "love", "the", "person", "."]
(c3-1 / multi-sentence
      :snt1 (c3-6 / care-01
                  :ARG1 (c3-10 / gender
                               :ARG2-of (c3-8 / identify-01
                                              :ARG0 (c3-4 / person
                                                          :ARG0-of (c3-3 / have-rel-role-91
                                                                         :ARG1 (c3-0 / you)
                                                                         :ARG2 (c3-2 / partner)))))
                  :polarity -)
      :snt2 (c3-5 / love-01
                  :ARG0 (c3-11 / you)
                  :ARG1 (c3-9 / person)
                  :mod (c3-7 / just)))

# ::snt Okay
# ::tokens ["Okay"]
# ::lemmas ["okay"]
(c4-0 / okay-04)

# ::snt her pansexual mind
# ::tokens ["her", "pansexual", "mind"]
# ::lemmas ["her", "pansexual", "mind"]
(c5-1 / mind
      :mod (c5-0 / pansexual)
      :domain (c5-2 / she))

# ::snt GreatWigNow Go Stream Chun Li And NTLTC
# ::tokens ["GreatWigNow", "Go", "Stream", "Chun", "Li", "And", "NTLTC"]
# ::lemmas ["greatwignow", "go", "Stream", "Chun", "Li", "and", "NTLTC"]
(c6-3 / say-01
      :ARG0 (c6-9 / i)
      :ARG1 (c6-11 / go-05
                   :ARG0 (c6-5 / person
                               :name (c6-1 / name
                                           :op1 "GreatWigNow"))
                   :ARG1 (c6-0 / stream-01
                               :ARG0 c6-5
                               :ARG1 (c6-10 / and
                                            :op1 (c6-2 / person
                                                       :name (c6-4 / name
                                                                   :op1 "Chun"
                                                                   :op2 "Li"))
                                            :op2 (c6-7 / company
                                                       :name (c6-6 / name
                                                                   :op1 "NTLTC"))))
                   :time (c6-8 / now)
                   :mode imperative)
      :ARG2 c6-5)

# ::snt We've decided to stan forever
# ::tokens ["We", "'ve", "decided", "to", "stan", "forever"]
# ::lemmas ["we", "'ve", "decide", "to", "stan", "forever"]
(c7-1 / decide-01
      :ARG0 (c7-3 / we)
      :ARG1 (c7-0 / stan-01
                  :ARG0 c7-3
                  :duration (c7-2 / forever)))

# ::snt My coins are ready for this legend
# ::tokens ["My", "coins", "are", "ready", "for", "this", "legend"]
# ::lemmas ["my", "coin", "be", "ready", "for", "this", "legend"]
(c8-0 / ready-02
      :ARG1 (c8-2 / coin
                  :poss (c8-3 / i))
      :ARG2 (c8-1 / legend
                  :mod (c8-4 / this)))

# ::snt who?
# ::tokens ["who", "?"]
# ::lemmas ["who", "?"]
(c10-0 / amr-unknown)

# ::snt WE FREAKING CARE X3
# ::tokens ["WE", "FREAKING", "CARE", "X3"]
# ::lemmas ["WE", "FREAKING", "CARE", "X3"]
(c11-1 / say-01
       :ARG0 (c11-5 / i)
       :ARG1 (c11-3 / care-01
                    :ARG0 (c11-4 / we)
                    :ARG1-of (c11-0 / FREAKING))
       :ARG2 (c11-2 / person
                    :quant 3))

# ::snt This the first I seen one hahahahaha
# ::tokens ["This", "the", "first", "I", "seen", "one", "hahahahaha"]
# ::lemmas ["this", "the", "first", "i", "see", "one", "hahahahaha"]
(c12-2 / see-01
       :ARG0 (c12-4 / i)
       :ARG1 (c12-1 / one
                    :mod (c12-5 / this))
       :ord (c12-0 / ordinal-entity
                   :value 1)
       :mod (c12-3 / haha
                   :mode expressive))

# ::snt Unproblematic queen with amazing music ugh I love herr
# ::tokens ["Unproblematic", "queen", "with", "amazing", "music", "ugh", "I", "love", "herr"]
# ::lemmas ["unproblematic", "queen", "with", "amazing", "music", "ugh", "i", "love", "herr"]
(c13-0 / multi-sentence
       :snt1 (c13-5 / queen
                    :domain (c13-1 / she)
                    :ARG1-of (c13-3 / problem
                                    :polarity -)
                    :accompanier (c13-2 / music
                                        :ARG0-of (c13-6 / amaze-01)))
       :snt2 (c13-4 / love-01
                    :ARG0 (c13-7 / i)
                    :ARG1 c13-1)
       :mod (c13-8 / ugh
                   :mode expressive))

# ::snt legend we stan
# ::tokens ["legend", "we", "stan"]
# ::lemmas ["legend", "we", "stan"]
(c14-1 / prove-01
       :ARG0 (c14-0 / we))

# ::snt Ugh a pan queen for me to look up too yes her mind the range
# ::tokens ["Ugh", "a", "pan", "queen", "for", "me", "to", "look", "up", "too", "yes", "her", "mind", "the", "range"]
# ::lemmas ["ugh", "a", "pan", "queen", "for", "i", "to", "look", "up", "too", "yes", "her", "mind", "the", "range"]
(c15-1 / and
       :op1 (c15-7 / queen
                   :mod (c15-3 / pan)
                   :domain (c15-6 / i)
                   :mod (c15-8 / ugh
                               :mode expressive))
       :op2 (c15-4 / look-up-05
                   :ARG0 c15-6
                   :mod (c15-5 / too))
       :op3 (c15-0 / mind-05
                   :ARG0 c15-7
                   :ARG1 (c15-9 / thing
                                :ARG5-of (c15-2 / range-01))))

# ::snt right. bisexual
# ::tokens ["right", ".", "bisexual"]
# ::lemmas ["right", ".", "bisexual"]
(c16-2 / multi-sentence
       :snt1 (c16-0 / right-06)
       :snt2 (c16-1 / bisexual))

# ::snt are you living under a rock sis?
# ::tokens ["are", "you", "living", "under", "a", "rock", "sis", "?"]
# ::lemmas ["be", "you", "live", "under", "a", "rock", "sis", "?"]
(c17-4 / live-01
       :polarity (c17-5 / amr-unknown)
       :ARG0 (c17-0 / you
                    :ARG0-of (c17-3 / have-rel-role-91
                                    :ARG2 (c17-1 / sister)))
       :location (c17-6 / under
                        :op1 (c17-2 / rock)))

# ::snt Janelle Monae has stans? Who knew? Lol
# ::tokens ["Janelle", "Monae", "has", "stans", "?", "Who", "knew", "?", "Lol"]
# ::lemmas ["Janelle", "Monae", "have", "stan", "?", "who", "know", "?", "Lol"]
(c18-1 / multi-sentence
       :snt1 (c18-3 / have-03
                    :ARG0 (c18-4 / person
                                 :name (c18-0 / name
                                              :op1 "Janelle"
                                              :op2 "Monae"))
                    :ARG1 (c18-2 / stan))
       :snt2 (c18-5 / know-01
                    :ARG0 (c18-7 / amr-unknown))
       :snt3 (c18-6 / laugh-01
                    :manner (c18-8 / loud)
                    :mode expressive))

# ::snt Anyway... buy .
# ::tokens ["Anyway", "...", "buy", "."]
# ::lemmas ["anyway", "...", "buy", "."]
(c19-0 / buy-01
       :ARG0 (c19-1 / you)
       :mod (c19-2 / anyway)
       :mode imperative)

# ::snt Pansexual que le gusta mucho el pan a ella.
# ::tokens ["Pansexual", "que", "le", "gusta", "mucho", "el", "pan", "a", "ella", "."]
# ::lemmas ["pansexual", "que", "le", "gusta", "mucho", "el", "pan", "a", "ella", "."]
(c20-0 / multi-sentence
       :snt1 (c20-5 / Pansexual
                    :mode expressive)
       :snt2 (c20-7 / gusta-00
                    :ARG0 (c20-6 / le)
                    :ARG1 (c20-4 / much)
                    :location (c20-1 / pan)
                    :ARG1-of (c20-2 / say-01
                                    :ARG2 (c20-3 / ella))))

# ::snt honestly the only sexuality that should exist.
# ::tokens ["honestly", "the", "only", "sexuality", "that", "should", "exist", "."]
# ::lemmas ["honestly", "the", "only", "sexuality", "that", "should", "exist", "."]
(c21-1 / sexuality
       :mod (c21-0 / only)
       :ARG1-of (c21-3 / exist-01
                       :ARG1-of (c21-2 / recommend-01))
       :ARG1-of (c21-4 / honest-01))

# ::snt We stan!
# ::tokens ["We", "stan", "!"]
# ::lemmas ["we", "stan", "!"]
(c22-1 / stan-01
       :ARG0 (c22-0 / we))

# ::snt Who is that honestly
# ::tokens ["Who", "is", "that", "honestly"]
# ::lemmas ["who", "be", "that", "honestly"]
(c23-2 / amr-unknown
       :domain (c23-1 / that)
       :ARG1-of (c23-0 / honest-01))

# ::snt We been knew.
# ::tokens ["We", "been", "knew", "."]
# ::lemmas ["we", "been", "know", "."]
(c24-1 / know-01
       :ARG1 (c24-0 / we))

# ::snt We stan
# ::tokens ["We", "stan"]
# ::lemmas ["we", "stan"]
(c25-1 / have-mod-91
       :ARG1 (c25-0 / we))

# ::snt Who again?
# ::tokens ["Who", "again", "?"]
# ::lemmas ["who", "again", "?"]
(c27-1 / amr-unknown
       :mod (c27-0 / again))

# ::snt That's exactly what I'm doing right now, we gotta get her to the spot
# ::tokens ["That", "'s", "exactly", "what", "I", "'m", "doing", "right", "now", ",", "we", "got", "ta", "get", "her", "to", "the", "spot"]
# ::lemmas ["that", "be", "exactly", "what", "i", "be", "do", "right", "now", ",", "we", "got", "to", "get", "she", "to", "the", "spot"]
(c28-11 / do-02
        :ARG0 (c28-8 / i)
        :ARG1 (c28-9 / that
                     :mod (c28-5 / exact))
        :time (c28-2 / now
                     :mod (c28-4 / right))
        :ARG1-of (c28-6 / cause-01
                        :ARG0 (c28-0 / obligate-01
                                     :ARG1 (c28-7 / we)
                                     :ARG2 (c28-10 / get-05
                                                   :ARG0 c28-7
                                                   :ARG1 (c28-3 / she)
                                                   :ARG2 (c28-1 / spot)))))

# ::snt it's the title of Janelle's new album we-Anygays, tea. We have to buy and stream NTLTC so Ariana can get a
# ::tokens ["it", "'s", "the", "title", "of", "Janelle", "'s", "new", "album", "we", "-", "Anygays", ",", "tea", ".", "We", "have", "to", "buy", "and", "stream", "NTLTC", "so", "Ariana", "can", "get", "a"]
# ::lemmas ["it", "be", "the", "title", "of", "Janelle", "'s", "new", "album", "we", "-", "Anygays", ",", "tea", ".", "we", "have", "to", "buy", "and", "stream", "NTLTC", "so", "Ariana", "can", "get", "a"]
(c29-12 / multi-sentence
        :snt1 (c29-7 / title-01
                     :ARG1 (c29-8 / album
                                  :ARG1-of (c29-17 / new-01)
                                  :poss (c29-18 / person
                                                :name (c29-14 / name
                                                              :op1 "Janelle")))
                     :ARG2 (c29-21 / it)
                     :ARG3 (c29-20 / we
                                   :ARG1-of (c29-5 / mean-01
                                                   :ARG2 (c29-13 / person
                                                                 :ARG1-of (c29-9 / gay-01))
                                                   :mod (c29-16 / tea))))
        :snt2 (c29-4 / obligate-01
                     :ARG1 (c29-6 / and
                                  :op1 (c29-11 / buy-01
                                               :ARG0 c29-20
                                               :ARG1 (c29-3 / product
                                                            :name (c29-19 / name
                                                                          :op1 "NTLTC")))
                                  :op2 (c29-0 / stream-01
                                              :ARG0 c29-20
                                              :ARG1 c29-3))
                     :purpose (c29-1 / possible-01
                                     :ARG1 (c29-2 / get-01
                                                  :ARG0 (c29-10 / person
                                                                :name (c29-15 / name
                                                                              :op1 "Ariana"))
                                                  :ARG1 c29-3))))

# ::snt There is!!
# ::tokens ["There", "is", "!", "!"]
# ::lemmas ["there", "be", "!", "!"]
(c30-0 / event)

# ::snt Tea because it's probably only out in Australia yet, so meanwhile we can stream No Tears Left To Cry
# ::tokens ["Tea", "because", "it", "'s", "probably", "only", "out", "in", "Australia", "yet", ",", "so", "meanwhile", "we", "can", "stream", "No", "Tears", "Left", "To", "Cry"]
# ::lemmas ["tea", "because", "it", "be", "probably", "only", "out", "in", "Australia", "yet", ",", "so", "meanwhile", "we", "can", "stream", "no", "tear", "leave", "to", "cry"]
(c31-8 / cause-01
       :ARG0 (c31-6 / likely-01
                    :ARG1 (c31-0 / out-03
                                 :ARG1 (c31-11 / tea)
                                 :location (c31-14 / country
                                                   :name (c31-3 / name
                                                                :op1 "Australia"))
                                 :mod (c31-1 / only)
                                 :time (c31-2 / yet)))
       :ARG1 (c31-7 / possible-01
                    :ARG1 (c31-5 / stream-01
                                 :ARG0 (c31-9 / we)
                                 :ARG1 (c31-12 / tear
                                               :ARG1-of (c31-13 / leave-17
                                                                :ARG2 (c31-10 / cry-02)))
                                 :time (c31-4 / meanwhile))))

# ::snt Love that album
# ::tokens ["Love", "that", "album"]
# ::lemmas ["love", "that", "album"]
(c32-1 / love-01
       :ARG1 (c32-2 / album
                    :mod (c32-0 / that)))

# ::snt Yoga still a bop
# ::tokens ["Yoga", "still", "a", "bop"]
# ::lemmas ["yoga", "still", "a", "bop"]
(c33-0 / bop
       :mod (c33-2 / still)
       :domain (c33-1 / yoga)
       :mode expressive)

# ::snt That's not a real thing..
# ::tokens ["That", "'s", "not", "a", "real", "thing", ".."]
# ::lemmas ["that", "be", "not", "a", "real", "thing", ".."]
(c34-2 / thing
       :ARG1-of (c34-0 / real-04)
       :domain (c34-1 / that)
       :polarity -)

# ::snt so... shes bisexual
# ::tokens ["so", "...", "she", "s", "bisexual"]
# ::lemmas ["so", "...", "she", "s", "bisexual"]
(c35-0 / bisexual
       :domain (c35-1 / she))

# ::snt Is this what celebrities do nowadays to gain attention?
# ::tokens ["Is", "this", "what", "celebrities", "do", "nowadays", "to", "gain", "attention", "?"]
# ::lemmas ["be", "this", "what", "celebrity", "do", "nowadays", "to", "gain", "attention", "?"]
(c36-6 / do-02
       :polarity (c36-1 / amr-unknown)
       :ARG0 (c36-2 / celebrity)
       :ARG1 (c36-4 / this)
       :purpose (c36-5 / gain-02
                       :ARG0 c36-2
                       :ARG1 (c36-3 / attend-02
                                    :ARG1 c36-2))
       :time (c36-0 / nowadays))

# ::snt ugh legend she did that
# ::tokens ["ugh", "legend", "she", "did", "that"]
# ::lemmas ["ugh", "legend", "she", "do", "that"]
(c37-1 / legend
       :mod (c37-4 / ugh
                   :mode expressive)
       :topic (c37-3 / do-02
                     :ARG0 (c37-0 / she)
                     :ARG1 (c37-2 / that)))

# ::snt sjskskjjk
# ::tokens ["sjskskjjk"]
# ::lemmas ["sjskskjjk"]
(c38-1 / person
       :name (c38-0 / name
                    :op1 "sjskskjjk"))

# ::snt LGBT legend. Kinaye wishes!
# ::tokens ["LGBT", "legend", ".", "Kinaye", "wishes", "!"]
# ::lemmas ["lgbt", "legend", ".", "Kinaye", "wish", "!"]
(c39-0 / multi-sentence
       :snt1 (c39-4 / legend
                    :topic (c39-2 / homosexuality))
       :snt2 (c39-5 / wish-01
                    :ARG0 (c39-3 / person
                                 :name (c39-1 / name
                                              :op1 "Kinaye"))))

# ::snt Legend
# ::tokens ["Legend"]
# ::lemmas ["legend"]
(c40-1 / person
       :name (c40-0 / name
                    :op1 "Legend"))

# ::snt Congratulations to her but theres literally no difference between bisexual and pansexual
# ::tokens ["Congratulations", "to", "her", "but", "there", "s", "literally", "no", "difference", "between", "bisexual", "and", "pansexual"]
# ::lemmas ["congratulation", "to", "she", "but", "there", "s", "literally", "no", "difference", "between", "bisexual", "and", "pansexual"]
(c41-4 / contrast-01
       :ARG1 (c41-6 / congratulate-01
                    :ARG1 (c41-1 / she))
       :ARG2 (c41-5 / differ-02
                    :ARG1 (c41-0 / bisexual)
                    :ARG2 (c41-2 / pansexual)
                    :mod (c41-3 / literal)
                    :polarity -))

# ::snt buy and stream Dirty Computer and No Tears Left To Cry
# ::tokens ["buy", "and", "stream", "Dirty", "Computer", "and", "No", "Tears", "Left", "To", "Cry"]
# ::lemmas ["buy", "and", "stream", "Dirty", "Computer", "and", "no", "Tears", "leave", "to", "cry"]
(c42-8 / and
       :op1 (c42-0 / buy-01
                   :ARG0 (c42-1 / you)
                   :ARG1 (c42-7 / and
                                :op1 (c42-4 / product
                                            :name (c42-2 / name
                                                         :op1 "Dirty"
                                                         :op2 "Computer"))
                                :op2 (c42-6 / cry-02
                                            :ARG1-of (c42-5 / leave-17
                                                            :polarity -)))
                   :mode imperative)
       :op2 (c42-3 / stream-01
                   :ARG0 c42-1
                   :ARG1 c42-7
                   :mode imperative))

# ::snt Stoppp for fuck sake
# ::tokens ["Stoppp", "for", "fuck", "sake"]
# ::lemmas ["Stoppp", "for", "fuck", "sake"]
(c43-2 / stick-01
       :ARG0 (c43-1 / you)
       :mod (c43-0 / fuck)
       :mode imperative)

# ::snt i knew she wasnt cishet. my gaydar is strong
# ::tokens ["i", "knew", "she", "was", "nt", "cishet", ".", "my", "gaydar", "is", "strong"]
# ::lemmas ["i", "know", "she", "be", "not", "cishet", ".", "my", "gaydar", "be", "strong"]
(c44-1 / multi-sentence
       :snt1 (c44-4 / know-01
                    :ARG0 (c44-5 / i)
                    :ARG1 (c44-6 / transgender
                                 :domain (c44-2 / she)
                                 :polarity -))
       :snt2 (c44-0 / strong-02
                    :ARG1 (c44-8 / dar
                                 :poss (c44-3 / i)
                                 :mod (c44-7 / gay-01))))

# ::snt Buy Ariana's new song
# ::tokens ["Buy", "Ariana", "'s", "new", "song"]
# ::lemmas ["buy", "Ariana", "'s", "new", "song"]
(c45-0 / buy-01
       :ARG0 (c45-1 / you)
       :ARG3 (c45-3 / song
                    :ARG1-of (c45-2 / new-01)
                    :poss (c45-5 / person
                                 :name (c45-4 / name
                                              :op1 "Ariana")))
       :mode imperative)

# ::snt WE CARE X2 (buy and stream Dirty Computer
# ::tokens ["WE", "CARE", "X2", "(", "buy", "and", "stream", "Dirty", "Computer"]
# ::lemmas ["WE", "care", "x2", "(", "buy", "and", "stream", "Dirty", "Computer"]
(c46-6 / care-01
       :ARG0 (c46-7 / we)
       :ARG1 (c46-5 / product
                    :name (c46-3 / name
                                 :op1 "X2")
                    :ARG1-of (c46-2 / mean-01
                                    :ARG2 (c46-8 / and
                                                 :op1 (c46-0 / buy-01
                                                             :ARG0 (c46-1 / you)
                                                             :ARG1 (c46-10 / computer
                                                                           :mod (c46-9 / dirty))
                                                             :mode imperative)
                                                 :op2 (c46-4 / stream-03
                                                             :ARG0 c46-1
                                                             :ARG1 c46-10
                                                             :mode imperative)))))

# ::snt Do you stream Delicate, NTLTC and In My Blood?
# ::tokens ["Do", "you", "stream", "Delicate", ",", "NTLTC", "and", "In", "My", "Blood", "?"]
# ::lemmas ["do", "you", "stream", "delicate", ",", "NTLTC", "and", "in", "my", "blood", "?"]
(c47-2 / stream-03
       :ARG0 (c47-0 / you)
       :ARG1 (c47-8 / and
                    :op1 (c47-6 / work-of-art
                                :name (c47-1 / name
                                             :op1 "Delicate"))
                    :op2 (c47-5 / work-of-art
                                :name (c47-3 / name
                                             :op1 "NTLTC"))
                    :op3 (c47-9 / work-of-art
                                :name (c47-4 / name
                                             :op1 "In"
                                             :op2 "My"
                                             :op3 "Blood")))
       :polarity (c47-7 / amr-unknown))

# ::snt Nick destroyed Shawn.
# ::tokens ["Nick", "destroyed", "Shawn", "."]
# ::lemmas ["Nick", "destroy", "Shawn", "."]
(c48-4 / destroy-01
       :ARG0 (c48-3 / person
                    :name (c48-0 / name
                                 :op1 "Nick"))
       :ARG1 (c48-1 / person
                    :name (c48-2 / name
                                 :op1 "Shawn")))

# ::snt buy Dirty Computer too
# ::tokens ["buy", "Dirty", "Computer", "too"]
# ::lemmas ["buy", "Dirty", "Computer", "too"]
(c49-0 / buy-01
       :ARG0 (c49-1 / you)
       :ARG1 (c49-3 / product
                    :name (c49-2 / name
                                 :op1 "Dirty"
                                 :op2 "Computer"))
       :mod (c49-4 / too)
       :mode imperative)

# ::snt Go watch pynk
# ::tokens ["Go", "watch", "pynk"]
# ::lemmas ["go", "watch", "pynk"]
(c50-4 / go-05
       :ARG0 (c50-0 / you)
       :ARG1 (c50-3 / watch-01
                    :ARG0 c50-0
                    :ARG1 (c50-2 / person
                                 :name (c50-1 / name
                                              :op1 "Pynk")))
       :mode imperative)
