# ::snt I can't take her serious because she's an unbalanced person who does not know how to set her bias aside and do her job.
# ::tokens ["I", "ca", "n't", "take", "her", "serious", "because", "she", "'s", "an", "unbalanced", "person", "who", "does", "not", "know", "how", "to", "set", "her", "bias", "aside", "and", "do", "her", "job", "."]
# ::lemmas ["i", "can", "not", "take", "she", "serious", "because", "she", "be", "an", "unbalanced", "person", "who", "do", "not", "know", "how", "to", "set", "her", "bias", "aside", "and", "do", "her", "job", "."]
(c1-6 / possible-01
      :ARG1 (c1-11 / take-04
                   :ARG0 (c1-10 / i)
                   :ARG1 (c1-3 / serious-01
                               :ARG1 (c1-0 / she)))
      :ARG1-of (c1-8 / cause-01
                     :ARG0 (c1-2 / person
                                 :ARG1-of (c1-1 / balance-01
                                                :polarity -)
                                 :domain c1-0
                                 :ARG0-of (c1-7 / know-01
                                                :ARG1 (c1-4 / and
                                                            :op1 (c1-14 / set-01
                                                                        :ARG0 c1-2
                                                                        :ARG1 (c1-5 / bias-01
                                                                                    :ARG1 c1-2)
                                                                        :ARG2 (c1-12 / aside))
                                                            :op2 (c1-13 / do-02
                                                                        :ARG0 c1-2
                                                                        :ARG1 (c1-9 / job
                                                                                    :poss c1-2)))
                                                :polarity -)))
      :polarity -)

# ::snt Krista don't recognize things that happened between season and s13
# ::tokens ["Krista", "do", "n't", "recognize", "things", "that", "happened", "between", "season", "and", "s13"]
# ::lemmas ["Krista", "do", "not", "recognize", "thing", "that", "happen", "between", "season", "and", "s13"]
(c2-5 / recognize-02
      :ARG0 (c2-6 / person
                  :name (c2-3 / name
                              :op1 "Krista"))
      :ARG1 (c2-7 / thing
                  :time (c2-2 / between
                              :op1 (c2-4 / season)
                              :op2 (c2-0 / season
                                         :ord (c2-1 / ordinal-entity
                                                    :value 13))))
      :polarity -)

# ::snt I know!
# ::tokens ["I", "know", "!"]
# ::lemmas ["i", "know", "!"]
(c3-0 / know-01
      :ARG0 (c3-1 / i)
      :mode expressive)

# ::snt After leaving him on the altar...smh
# ::tokens ["After", "leaving", "him", "on", "the", "altar", "...", "smh"]
# ::lemmas ["after", "leave", "he", "on", "the", "altar", "...", "smh"]
(c4-4 / after
      :op1 (c4-2 / leave-14
                 :ARG1 (c4-1 / he)
                 :location (c4-3 / altar))
      :mod (c4-0 / smh
                 :mode expressive))

# ::snt Relax, Jackson and April didnt work out. Low key glad Matthews back with her now
# ::tokens ["Relax", ",", "Jackson", "and", "April", "did", "nt", "work", "out", ".", "Low", "key", "glad", "Matthews", "back", "with", "her", "now"]
# ::lemmas ["relax", ",", "Jackson", "and", "April", "do", "not", "work", "out", ".", "low", "key", "glad", "Matthews", "back", "with", "she", "now"]
(c5-9 / multi-sentence
      :snt1 (c5-15 / relax-01
                   :ARG0 (c5-4 / you)
                   :ARG1-of (c5-12 / cause-01
                                   :ARG0 (c5-18 / work-out-02
                                                :ARG1 (c5-6 / and
                                                            :op1 (c5-16 / person
                                                                        :name (c5-14 / name
                                                                                     :op1 "Jackson"))
                                                            :op2 (c5-10 / person
                                                                        :name (c5-11 / name
                                                                                     :op1 "April")))
                                                :polarity -))
                   :mode imperative)
      :snt2 (c5-7 / glad-02
                  :ARG0 (c5-8 / be-with-10
                              :ARG0 (c5-3 / person
                                          :name (c5-17 / name
                                                       :op1 "Matthews"))
                              :ARG1 (c5-0 / she)
                              :mod (c5-1 / back)
                              :time (c5-13 / now)
                              :mod (c5-5 / key
                                         :ARG1-of (c5-2 / low-04)))))

# ::snt R u sure?
# ::tokens ["R", "u", "sure", "?"]
# ::lemmas ["r", "u", "sure", "?"]
(c6-2 / sure-02
      :polarity (c6-0 / amr-unknown)
      :ARG0 (c6-1 / you))

# ::snt A m s plz
# ::tokens ["A", "m", "s", "plz"]
# ::lemmas ["a", "m", "s", "plz"]
(c7-0 / amr-unintelligible
      :value "A")

# ::snt Thanks!
# ::tokens ["Thanks", "!"]
# ::lemmas ["thank", "!"]
(c8-1 / thank-01
      :ARG1 (c8-0 / you)
      :mode expressive)

# ::snt Sha me dijeron(?)pero completame... que tiene que ver que se case con que se vaya
# ::tokens ["Sha", "me", "dijeron(?)pero", "completame", "...", "que", "tiene", "que", "ver", "que", "se", "case", "con", "que", "se", "vaya"]
# ::lemmas ["sha", "i", "dijeron(?)pero", "completame", "...", "que", "tiene", "que", "ver", "que", "se", "case", "con", "que", "se", "vaya"]
(c9-3 / multi-sentence
      :snt1 (c9-10 / question-01
                   :ARG0 (c9-2 / you)
                   :ARG2 (c9-9 / i)
                   :ARG1-of (c9-4 / request-confirmation-91))
      :snt2 (c9-8 / completame-01
                  :ARG1 (c9-11 / you))
      :snt3 (c9-6 / have-concession-91
                  :ARG1 (c9-7 / possible-01
                              :ARG1 (c9-1 / believe-01
                                          :ARG0 (c9-0 / you)
                                          :ARG1 (c9-12 / case-03
                                                       :ARG0 c9-0)))
                  :ARG2 c9-7
                  :ARG1 (c9-5 / vaya
                              :domain c9-0)))

# ::snt Te spoileo? Jaja
# ::tokens ["Te", "spoileo", "?", "Jaja"]
# ::lemmas ["te", "spoileo", "?", "jaja"]
(c10-2 / say-01
       :ARG0 (c10-4 / i)
       :ARG1 (c10-0 / spoil-01
                    :polarity (c10-5 / amr-unknown))
       :ARG2 (c10-3 / person
                    :name (c10-1 / name
                                 :op1 "Jaja")))

# ::snt Nah she alive and well
# ::tokens ["Nah", "she", "alive", "and", "well"]
# ::lemmas ["Nah", "she", "alive", "and", "well"]
(c11-4 / and
       :op1 (c11-2 / live-01
                   :ARG0 (c11-1 / she))
       :op2 (c11-3 / well-09
                   :ARG1 c11-1)
       :mod (c11-0 / nah))

# ::snt ISTG DON'T KILL ARIZONA BC THE ACTRESS LEAVES THE SHOW. DON'T EVEN DARE
# ::tokens ["ISTG", "DON'T", "KILL", "ARIZONA", "BC", "THE", "ACTRESS", "LEAVES", "THE", "SHOW", ".", "DON'T", "EVEN", "DARE"]
# ::lemmas ["ISTG", "don't", "KILL", "ARIZONA", "BC", "the", "ACTRESS", "LEAVES", "the", "SHOW", ".", "don't", "even", "dare"]
(c12-3 / multi-sentence
       :snt1 (c12-6 / kill-01
                    :ARG0 (c12-1 / you)
                    :ARG1 (c12-4 / state
                                 :name (c12-2 / name
                                              :op1 "Arizona"))
                    :ARG1-of (c12-8 / cause-01
                                    :ARG0 (c12-0 / show-04
                                                 :ARG0 (c12-7 / person
                                                              :ARG0-of (c12-9 / act-01))))
                    :polarity -
                    :mode imperative)
       :snt2 (c12-11 / dare-01
                     :ARG0 (c12-10 / you)
                     :mod (c12-5 / even)
                     :mode imperative
                     :polarity -))

# ::snt Nope
# ::tokens ["Nope"]
# ::lemmas ["nope"]
(c13-0 / nope)

# ::snt Im so relieved! Will watch the ep this weekend!!
# ::tokens ["I", "m", "so", "relieved", "!", "Will", "watch", "the", "ep", "this", "weekend", "!", "!"]
# ::lemmas ["i", "m", "so", "relieved", "!", "will", "watch", "the", "ep", "this", "weekend", "!", "!"]
(c14-1 / multi-sentence
       :snt1 (c14-4 / relieve-01
                    :ARG1 (c14-7 / i)
                    :degree (c14-3 / so))
       :snt2 (c14-6 / watch-01
                    :ARG0 c14-7
                    :ARG1 (c14-0 / broadcast-program
                                 :name (c14-2 / name
                                              :op1 "Ep"))
                    :time (c14-5 / weekend
                                 :mod (c14-8 / this))))

# ::snt she lived
# ::tokens ["she", "lived"]
# ::lemmas ["she", "live"]
(c15-0 / live-01
       :ARG0 (c15-1 / she))

# ::snt Me too!!!
# ::tokens ["Me", "too", "!", "!", "!"]
# ::lemmas ["i", "too", "!", "!", "!"]
(c16-0 / i
       :mod (c16-1 / too))

# ::snt Im so happy!!!!
# ::tokens ["I", "m", "so", "happy", "!", "!", "!", "!"]
# ::lemmas ["i", "m", "so", "happy", "!", "!", "!", "!"]
(c17-0 / happy-01
       :ARG1 (c17-1 / i)
       :degree (c17-2 / so))

# ::snt April LIVES!!!!!
# ::tokens ["April", "LIVES", "!", "!", "!", "!", "!"]
# ::lemmas ["April", "life", "!", "!", "!", "!", "!"]
(c18-1 / live-01
       :time (c18-0 / date-entity
                    :month 4))

# ::snt Unfortunately not.
# ::tokens ["Unfortunately", "not", "."]
# ::lemmas ["unfortunately", "not", "."]
(c19-0 / fortunate-01
       :polarity -)

# ::snt Thanks
# ::tokens ["Thanks"]
# ::lemmas ["thank"]
(c20-2 / thank-01
       :ARG0 (c20-1 / i)
       :ARG1 (c20-0 / you))

# ::snt Ahhhh I cant find the promoooooo you are killing me
# ::tokens ["Ahhhh", "I", "ca", "nt", "find", "the", "promoooooo", "you", "are", "killing", "me"]
# ::lemmas ["ahhhh", "i", "can", "not", "find", "the", "promoooooo", "you", "be", "kill", "i"]
(c21-3 / possible-01
       :ARG1 (c21-0 / find-01
                    :ARG0 (c21-6 / i)
                    :ARG1 (c21-2 / prom))
       :ARG1-of (c21-5 / cause-01
                       :ARG0 (c21-4 / kill-01
                                    :ARG0 (c21-1 / you)
                                    :ARG1 c21-6))
       :mod (c21-7 / ah
                   :mode expressive)
       :polarity -)

# ::snt If she dies we need to revolt against Shonda
# ::tokens ["If", "she", "dies", "we", "need", "to", "revolt", "against", "Shonda"]
# ::lemmas ["if", "she", "die", "we", "need", "to", "revolt", "against", "Shonda"]
(c23-0 / obligate-01
       :ARG1 (c23-4 / we)
       :ARG2 (c23-2 / revolt-01
                    :ARG0 c23-4
                    :ARG1 (c23-3 / person
                                 :name (c23-1 / name
                                              :op1 "Shonda")))
       :condition (c23-5 / die-01
                         :ARG1 c23-3))

# ::snt HONESTLY THO..
# ::tokens ["HONESTLY", "THO", ".."]
# ::lemmas ["HONESTLY", "THO", ".."]
(c24-0 / have-mod-91
       :ARG2 (c24-1 / sincere))

# ::snt It died after the found out where the money came from. Also I thought the scandal was before this? Who knows really. Its one of her many stories she doesnt follow through with.
# ::tokens ["It", "died", "after", "the", "found", "out", "where", "the", "money", "came", "from", ".", "Also", "I", "thought", "the", "scandal", "was", "before", "this", "?", "Who", "knows", "really", ".", "Its", "one", "of", "her", "many", "stories", "she", "does", "nt", "follow", "through", "with", "."]
# ::lemmas ["it", "die", "after", "the", "find", "out", "where", "the", "money", "come", "from", ".", "also", "i", "think", "the", "scandal", "be", "before", "this", "?", "who", "know", "really", ".", "its", "one", "of", "her", "many", "story", "she", "do", "not", "follow", "through", "with", "."]
(c25-14 / multi-sentence
        :snt1 (c25-22 / die-01
                      :ARG1 (c25-21 / it)
                      :time (c25-11 / after
                                    :op1 (c25-18 / find-out-03
                                                 :ARG1 (c25-2 / location
                                                              :ARG2-of (c25-15 / come-01
                                                                               :ARG1 (c25-6 / money))))))
        :snt2 (c25-10 / think-01
                      :ARG0 (c25-5 / i)
                      :ARG1 (c25-1 / scandal
                                   :time (c25-13 / before
                                                 :op1 (c25-16 / this)))
                      :mod (c25-9 / also))
        :snt3 (c25-7 / know-01
                     :ARG0 (c25-8 / amr-unknown)
                     :ARG1-of (c25-19 / real-04))
        :snt4 (c25-12 / include-91
                      :ARG1 (c25-0 / it)
                      :ARG2 (c25-4 / story
                                   :quant (c25-17 / many)
                                   :poss (c25-3 / she)
                                   :ARG1-of (c25-20 / follow-through-04
                                                    :ARG0 c25-3
                                                    :polarity -))))

# ::snt Yeah, me too... But I really hope
# ::tokens ["Yeah", ",", "me", "too", "...", "But", "I", "really", "hope"]
# ::lemmas ["yeah", ",", "i", "too", "...", "but", "i", "really", "hope"]
(c27-0 / multi-sentence
       :snt1 (c27-5 / i
                    :mod (c27-6 / too))
       :snt2 (c27-4 / contrast-01
                    :ARG2 (c27-3 / hope-01
                                 :ARG0 (c27-1 / i)
                                 :ARG1-of (c27-2 / real-04))))

# ::snt Im def going to when i get home
# ::tokens ["I", "m", "def", "going", "to", "when", "i", "get", "home"]
# ::lemmas ["i", "m", "def", "go", "to", "when", "i", "get", "home"]
(c28-3 / go-06
       :ARG0 (c28-2 / i)
       :mod (c28-4 / definite)
       :time (c28-1 / get-05
                    :ARG1 c28-2
                    :ARG2 (c28-0 / home)))

# ::snt believe me this tweet did not spoil anything! watch the episode
# ::tokens ["believe", "me", "this", "tweet", "did", "not", "spoil", "anything", "!", "watch", "the", "episode"]
# ::lemmas ["believe", "i", "this", "tweet", "do", "not", "spoil", "anything", "!", "watch", "the", "episode"]
(c29-2 / multi-sentence
       :snt1 (c29-0 / believe-01
                    :ARG0 (c29-1 / you)
                    :ARG1 (c29-7 / i)
                    :topic (c29-3 / spoil-01
                                  :ARG0 (c29-8 / thing
                                               :ARG1-of (c29-11 / tweet-01)
                                               :mod (c29-9 / this))
                                  :ARG1 (c29-4 / anything)
                                  :polarity -)
                    :mode imperative)
       :snt2 (c29-6 / watch-01
                    :ARG0 (c29-10 / you)
                    :ARG1 (c29-5 / episode)
                    :mode imperative))

# ::snt Kind of really mad at you right now
# ::tokens ["Kind", "of", "really", "mad", "at", "you", "right", "now"]
# ::lemmas ["kind", "of", "really", "mad", "at", "you", "right", "now"]
(c30-2 / mad-04
       :ARG0 (c30-4 / i)
       :ARG1 (c30-0 / you)
       :degree (c30-3 / really)
       :time (c30-1 / now
                    :mod (c30-5 / right)))

# ::snt thanks for spoiling it, bitch
# ::tokens ["thanks", "for", "spoiling", "it", ",", "bitch"]
# ::lemmas ["thank", "for", "spoil", "it", ",", "bitch"]
(c31-2 / say-01
       :ARG0 (c31-4 / i)
       :ARG1 (c31-5 / thank-01
                    :ARG0 c31-4
                    :ARG1 (c31-1 / bitch)
                    :ARG2 (c31-0 / spoil-01
                                 :ARG0 c31-1
                                 :ARG1 (c31-3 / it)))
       :ARG2 c31-1)

# ::snt YUP
# ::tokens ["YUP"]
# ::lemmas ["yup"]
(c32-0 / yup)

# ::snt But they somehow manage to keep force feeding us Owen, and pairing him with women way out of his league.
# ::tokens ["But", "they", "somehow", "manage", "to", "keep", "force", "feeding", "us", "Owen", ",", "and", "pairing", "him", "with", "women", "way", "out", "of", "his", "league", "."]
# ::lemmas ["but", "they", "somehow", "manage", "to", "keep", "force", "feed", "us", "Owen", ",", "and", "pair", "he", "with", "woman", "way", "out", "of", "his", "league", "."]
(c33-10 / contrast-01
        :ARG2 (c33-2 / manage-02
                     :ARG0 (c33-13 / they)
                     :ARG1 (c33-14 / and
                                   :op1 (c33-6 / keep-02
                                               :ARG0 c33-13
                                               :ARG1 (c33-0 / feed-01
                                                            :ARG0 c33-13
                                                            :ARG1 (c33-7 / force)
                                                            :ARG2 (c33-8 / person
                                                                         :name (c33-3 / name
                                                                                      :op1 "Owen"))))
                                   :op2 (c33-4 / pair-01
                                               :ARG0 c33-13
                                               :ARG1 c33-8
                                               :ARG2 (c33-11 / woman)
                                               :manner (c33-1 / out-06
                                                              :ARG1 c33-8
                                                              :ARG2 (c33-9 / league
                                                                           :poss c33-8)
                                                              :degree (c33-12 / way))))
                     :manner (c33-5 / somehow)))

# ::snt Dont know
# ::tokens ["Do", "nt", "know"]
# ::lemmas ["do", "not", "know"]
(c34-1 / know-01
       :ARG0 (c34-0 / you)
       :polarity -)

# ::snt Shes in a car accident next week
# ::tokens ["She", "s", "in", "a", "car", "accident", "next", "week"]
# ::lemmas ["she", "s", "in", "a", "car", "accident", "next", "week"]
(c35-1 / suffer-01
       :ARG0 (c35-2 / he)
       :ARG1 (c35-5 / accident
                    :mod (c35-4 / car))
       :time (c35-3 / week
                    :mod (c35-0 / next)))

# ::snt Is Arizona moving to be with Callie?
# ::tokens ["Is", "Arizona", "moving", "to", "be", "with", "Callie", "?"]
# ::lemmas ["be", "Arizona", "move", "to", "be", "with", "Callie", "?"]
(c36-2 / move-01
       :ARG1 (c36-3 / state
                    :name (c36-1 / name
                                 :op1 "Arizona"))
       :ARG2 (c36-0 / be-with-10
                    :ARG0 c36-3
                    :ARG1 (c36-5 / person
                                 :name (c36-4 / name
                                              :op1 "Callie")))
       :polarity (c36-6 / amr-unknown))

# ::snt Why/how are they killing off April?
# ::tokens ["Why", "/", "how", "are", "they", "killing", "off", "April", "?"]
# ::lemmas ["why", "/", "how", "be", "they", "kill", "off", "April", "?"]
(c37-0 / kill-off-02
       :ARG0 (c37-2 / they)
       :ARG1 (c37-4 / date-entity
                    :month 4)
       :ARG1-of (c37-1 / cause-01
                       :ARG0 (c37-3 / amr-unknown)))

# ::snt I'm here for Hellmouth as a gay crushing on Mer tho. I'm here for that all day.
# ::tokens ["I", "'m", "here", "for", "Hellmouth", "as", "a", "gay", "crushing", "on", "Mer", "tho", ".", "I", "'m", "here", "for", "that", "all", "day", "."]
# ::lemmas ["i", "be", "here", "for", "Hellmouth", "as", "a", "gay", "crushing", "on", "Mer", "tho", ".", "i", "be", "here", "for", "that", "all", "day", "."]
(c38-1 / multi-sentence
       :snt1 (c38-7 / have-concession-91
                    :ARG1 (c38-0 / be-located-at-91
                                 :ARG1 (c38-13 / i)
                                 :ARG2 (c38-12 / here)
                                 :beneficiary (c38-8 / product
                                                     :name (c38-2 / name
                                                                  :op1 "Hellmouth"))
                                 :prep-as (c38-11 / crush-01
                                                  :ARG0 (c38-3 / person
                                                               :ARG1-of (c38-15 / gay-01))
                                                  :ARG1 (c38-14 / person
                                                                :name (c38-9 / name
                                                                             :op1 "Mer")))))
       :snt2 (c38-10 / be-located-at-91
                     :ARG1 (c38-4 / i)
                     :ARG2 (c38-6 / here)
                     :duration (c38-16 / day
                                       :mod (c38-5 / all))))

# ::snt Oh ok, didn't seem likely from where I'd left off.
# ::tokens ["Oh", "ok", ",", "did", "n't", "seem", "likely", "from", "where", "I", "'d", "left", "off", "."]
# ::lemmas ["oh", "ok", ",", "do", "not", "seem", "likely", "from", "where", "i", "have", "leave", "off", "."]
(c39-2 / seem-01
       :ARG1 (c39-3 / likely-01
                    :ARG1 (c39-5 / thing
                                 :ARG2-of (c39-6 / leave-off-08
                                                 :ARG0 (c39-4 / i))))
       :mod (c39-0 / oh
                   :mode expressive)
       :mod (c39-1 / ok)
       :polarity -)

# ::snt No Aprils not gay
# ::tokens ["No", "Aprils", "not", "gay"]
# ::lemmas ["no", "Aprils", "not", "gay"]
(c40-0 / gay-01
       :ARG1 (c40-2 / person
                    :name (c40-1 / name
                                 :op1 "April"))
       :polarity -)

# ::snt Wait, April's gay now? I tapped out when Sandra Oh left a few years ago which felt like a good end for me.
# ::tokens ["Wait", ",", "April", "'s", "gay", "now", "?", "I", "tapped", "out", "when", "Sandra", "Oh", "left", "a", "few", "years", "ago", "which", "felt", "like", "a", "good", "end", "for", "me", "."]
# ::lemmas ["wait", ",", "April", "'s", "gay", "now", "?", "i", "tap", "out", "when", "Sandra", "Oh", "leave", "a", "few", "years", "ago", "which", "feel", "like", "a", "good", "end", "for", "i", "."]
(c41-8 / multi-sentence
       :snt1 (c41-19 / wait-01
                     :polarity (c41-4 / amr-unknown)
                     :ARG1 (c41-2 / you)
                     :ARG2 (c41-5 / gay-01
                                  :ARG1 (c41-16 / person
                                                :name (c41-14 / name
                                                              :op1 "April"))
                                  :time (c41-10 / now)))
       :snt2 (c41-3 / tap-out-03
                    :ARG0 (c41-20 / i)
                    :time (c41-0 / leave-11
                                 :ARG0 (c41-9 / person
                                              :name (c41-17 / name
                                                            :op1 "Sandra"
                                                            :op2 "Oh"))
                                 :time (c41-7 / before
                                              :op1 (c41-11 / now)
                                              :quant (c41-13 / few
                                                             :op1 (c41-12 / temporal-quantity
                                                                          :unit (c41-6 / year)
                                                                          :quant 1)))
                                 :ARG1-of (c41-18 / feel-05
                                                  :ARG2 (c41-15 / end-01
                                                                :ARG1-of (c41-1 / good-02
                                                                                :ARG2 c41-20))))))

# ::snt Agreed. I just think it's nuts. George, Reed, Charles, Mark, Lexie and Derek ALL having died is implausible enough already -- right up there with BOTH Ellis and Adele having had early onset Alzheimer's, and with Cristina Yang having had TWO unplanned pregnancies.
# ::tokens ["Agreed", ".", "I", "just", "think", "it", "'s", "nuts", ".", "George", ",", "Reed", ",", "Charles", ",", "Mark", ",", "Lexie", "and", "Derek", "ALL", "having", "died", "is", "implausible", "enough", "already", "--", "right", "up", "there", "with", "BOTH", "Ellis", "and", "Adele", "having", "had", "early", "onset", "Alzheimer", "'s", ",", "and", "with", "Cristina", "Yang", "having", "had", "TWO", "unplanned", "pregnancies", "."]
# ::lemmas ["agree", ".", "i", "just", "think", "it", "be", "nuts", ".", "George", ",", "Reed", ",", "Charles", ",", "Mark", ",", "Lexie", "and", "Derek", "all", "having", "die", "be", "implausible", "enough", "already", "--", "right", "up", "there", "with", "both", "Ellis", "and", "Adele", "having", "have", "early", "onset", "Alzheimer", "'s", ",", "and", "with", "Cristina", "Yang", "having", "have", "TWO", "unplanned", "pregnancy", "."]
(c42-21 / multi-sentence
        :snt1 (c42-13 / agree-01
                      :ARG0 (c42-43 / i))
        :snt2 (c42-14 / think-01
                      :ARG0 c42-43
                      :ARG1 (c42-34 / nuts
                                    :domain (c42-7 / it))
                      :mod (c42-11 / just))
        :snt3 (c42-9 / have-degree-91
                     :ARG1 (c42-44 / die-01
                                   :ARG1 (c42-12 / and
                                                 :op1 (c42-38 / person
                                                              :name (c42-24 / name
                                                                            :op1 "George"))
                                                 :op2 (c42-22 / person
                                                              :name (c42-39 / name
                                                                            :op1 "Reed"))
                                                 :op3 (c42-5 / person
                                                             :name (c42-27 / name
                                                                           :op1 "Charles"))
                                                 :op4 (c42-3 / person
                                                             :name (c42-42 / name
                                                                           :op1 "Mark"))
                                                 :op5 (c42-15 / person
                                                              :name (c42-35 / name
                                                                            :op1 "Lexie"))
                                                 :op6 (c42-45 / person
                                                              :name (c42-1 / name
                                                                           :op1 "Derek"))
                                                 :mod (c42-10 / all))
                                   :time (c42-23 / already)
                                   :ARG1-of (c42-25 / cause-01
                                                    :ARG0 (c42-40 / and
                                                                  :op1 (c42-41 / have-03
                                                                               :ARG0 (c42-29 / and
                                                                                             :op1 (c42-32 / person
                                                                                                          :name (c42-0 / name
                                                                                                                       :op1 "Ellis"))
                                                                                             :op2 (c42-30 / person
                                                                                                          :name (c42-2 / name
                                                                                                                       :op1 "Adele"))
                                                                                             :mod (c42-20 / both))
                                                                               :ARG1 (c42-6 / onset
                                                                                            :mod (c42-37 / early)
                                                                                            :mod (c42-26 / disease
                                                                                                         :name (c42-28 / name
                                                                                                                       :op1 "Alzheimer's"))))
                                                                  :op2 (c42-8 / have-03
                                                                              :ARG0 (c42-16 / person
                                                                                            :name (c42-33 / name
                                                                                                          :op1 "Cristina"
                                                                                                          :op2 "Yang"))
                                                                              :ARG1 (c42-4 / pregnancy
                                                                                           :ARG1-of (c42-19 / plan-01
                                                                                                            :polarity -)
                                                                                           :quant 2))))
                                   :ARG2 (c42-17 / implausible)
                                   :ARG3 (c42-18 / enough)
                                   :time c42-23)
                     :location (c42-31 / up
                                       :mod (c42-36 / right))))

# ::snt Ditto
# ::tokens ["Ditto"]
# ::lemmas ["ditto"]
(c43-0 / ditto)

# ::snt Me = pissed
# ::tokens ["Me", "=", "pissed"]
# ::lemmas ["i", "=", "piss"]
(c44-0 / equal-01
       :ARG1 (c44-2 / i)
       :ARG2 (c44-1 / piss-03
                    :ARG1 c44-2))

# ::snt I mean well know after next week or the season premiere officially but seems unlikely that theyll let her live
# ::tokens ["I", "mean", "well", "know", "after", "next", "week", "or", "the", "season", "premiere", "officially", "but", "seems", "unlikely", "that", "they", "ll", "let", "her", "live"]
# ::lemmas ["i", "mean", "well", "know", "after", "next", "week", "or", "the", "season", "premiere", "officially", "but", "seem", "unlikely", "that", "they", "ll", "let", "she", "live"]
(c45-10 / contrast-01
        :ARG1 (c45-3 / mean-01
                     :ARG0 (c45-14 / i)
                     :ARG2 (c45-6 / know-01
                                  :ARG0 c45-14
                                  :time (c45-15 / after
                                                :op1 (c45-0 / or
                                                            :op1 (c45-11 / week
                                                                         :mod (c45-4 / next))
                                                            :op2 (c45-7 / premiere-01
                                                                        :mod (c45-5 / season))))
                                  :manner (c45-1 / official)
                                  :degree (c45-8 / well)))
        :ARG2 (c45-2 / seem-01
                     :ARG1 (c45-9 / likely-01
                                  :ARG1 (c45-16 / let-01
                                                :ARG0 (c45-13 / they)
                                                :ARG1 (c45-12 / live-01
                                                              :ARG0 (c45-17 / she)))
                                  :polarity -)))

# ::snt How ridiculous is the body count for the Grey-Sloan surgical program already, and they're going to kill off yet another? Seriously?
# ::tokens ["How", "ridiculous", "is", "the", "body", "count", "for", "the", "Grey", "-", "Sloan", "surgical", "program", "already", ",", "and", "they", "'re", "going", "to", "kill", "off", "yet", "another", "?", "Seriously", "?"]
# ::lemmas ["how", "ridiculous", "be", "the", "body", "count", "for", "the", "Grey", "-", "Sloan", "surgical", "program", "already", ",", "and", "they", "be", "go", "to", "kill", "off", "yet", "another", "?", "seriously", "?"]
(c46-3 / multi-sentence
       :snt1 (c46-6 / ridiculous-02
                    :ARG1 (c46-12 / and
                                  :op1 (c46-9 / count-01
                                              :ARG1 (c46-1 / body)
                                              :time (c46-11 / already)
                                              :beneficiary (c46-7 / program
                                                                  :name (c46-4 / name
                                                                               :op1 "Grey-Sloan")
                                                                  :mod (c46-5 / surgery-01)))
                                  :op2 (c46-8 / kill-off-02
                                              :ARG0 c46-7
                                              :ARG1 (c46-10 / another
                                                            :mod (c46-2 / yet))))
                    :degree (c46-13 / amr-unknown))
       :snt2 (c46-0 / serious-01
                    :mode expressive))

# ::snt Shhhhhhhhhhhh
# ::tokens ["Shhhhhhhhhhhh"]
# ::lemmas ["Shhhhhhhhhhhh"]
(c47-0 / shhhhh
       :mode expressive)

# ::snt Seems highly unlikely
# ::tokens ["Seems", "highly", "unlikely"]
# ::lemmas ["seem", "highly", "unlikely"]
(c48-2 / seem-01
       :ARG1 (c48-1 / likely-01
                    :degree (c48-0 / high-02)
                    :polarity -))

# ::snt I am still holding out whatever hope I have help to believe Kepner will move with Arizona to NYC
# ::tokens ["I", "am", "still", "holding", "out", "whatever", "hope", "I", "have", "help", "to", "believe", "Kepner", "will", "move", "with", "Arizona", "to", "NYC"]
# ::lemmas ["i", "be", "still", "hold", "out", "whatever", "hope", "i", "have", "help", "to", "believe", "Kepner", "will", "move", "with", "Arizona", "to", "NYC"]
(c49-5 / hold-out-09
       :ARG0 (c49-12 / i)
       :ARG1 (c49-11 / hope-01
                     :ARG0 c49-12
                     :ARG1 (c49-1 / believe-01
                                  :ARG0 c49-12
                                  :ARG1 (c49-2 / move-01
                                               :ARG0 (c49-6 / person
                                                            :name (c49-3 / name
                                                                         :op1 "Kepner")
                                                            :ARG1-of c49-2)
                                               :ARG2 (c49-9 / city
                                                            :name (c49-7 / name
                                                                         :op1 "NYC"))
                                               :accompanier (c49-4 / state
                                                                   :name (c49-8 / name
                                                                                :op1 "Arizona"))))
                     :mod (c49-10 / whatever))
       :mod (c49-0 / still))
