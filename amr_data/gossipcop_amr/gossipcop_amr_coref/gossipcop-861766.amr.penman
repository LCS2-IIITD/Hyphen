# ::snt She drank like a lush! Not good for a young woman to get so drunk.
# ::tokens ["She", "drank", "like", "a", "lush", "!", "Not", "good", "for", "a", "young", "woman", "to", "get", "so", "drunk", "."]
# ::lemmas ["she", "drink", "like", "a", "lush", "!", "not", "good", "for", "a", "young", "woman", "to", "get", "so", "drunk", "."]
(c1-2 / multi-sentence
      :snt1 (c1-11 / drink-01
                   :ARG0 (c1-3 / she)
                   :manner (c1-4 / resemble-01
                                 :ARG2 (c1-8 / drink-01
                                             :ARG0 c1-3
                                             :ARG1 (c1-5 / lush))))
      :snt2 (c1-10 / good-04
                   :ARG1 (c1-9 / get-03
                               :ARG1 (c1-7 / woman
                                           :mod (c1-1 / young))
                               :ARG2 (c1-6 / drunk
                                           :degree (c1-0 / so)))
                   :polarity -))

# ::snt She did. ((They)) do. And you follow them for more lies. Corporate television has you so consumed, you'll eat whatever they feed you.
# ::tokens ["She", "did", ".", "(", "(", "They", ")", ")", "do", ".", "And", "you", "follow", "them", "for", "more", "lies", ".", "Corporate", "television", "has", "you", "so", "consumed", ",", "you", "'ll", "eat", "whatever", "they", "feed", "you", "."]
# ::lemmas ["she", "do", ".", "(", "(", "they", ")", ")", "do", ".", "and", "you", "follow", "they", "for", "more", "lie", ".", "corporate", "television", "have", "you", "so", "consume", ",", "you", "'ll", "eat", "whatever", "they", "feed", "you", "."]
(c2-10 / multi-sentence
       :snt1 (c2-19 / do-02
                    :ARG0 (c2-0 / she))
       :snt2 (c2-12 / do-02
                    :ARG0 (c2-7 / they))
       :snt3 (c2-6 / and
                   :op2 (c2-14 / follow-02
                               :ARG0 (c2-3 / you)
                               :ARG1 (c2-13 / they)
                               :purpose (c2-1 / lie-08
                                              :ARG0 c2-13
                                              :quant (c2-4 / more))))
       :snt4 (c2-11 / consume-01
                    :ARG0 (c2-18 / television
                                 :mod (c2-9 / corporation))
                    :ARG1 (c2-8 / you)
                    :ARG2-of (c2-5 / have-degree-91
                                   :ARG1 c2-8
                                   :ARG3 (c2-2 / so)
                                   :ARG6 (c2-15 / eat-01
                                                :ARG0 c2-8
                                                :ARG1 (c2-17 / whatever
                                                             :ARG1-of (c2-16 / feed-01
                                                                             :ARG0 c2-13
                                                                             :ARG2 c2-8))))))

# ::snt . When the sentence opens what she remembers?
# ::tokens [".", "When", "the", "sentence", "opens", "what", "she", "remembers", "?"]
# ::lemmas [".", "when", "the", "sentence", "open", "what", "she", "remember", "?"]
(c3-3 / remember-01
      :ARG0 (c3-2 / she)
      :ARG1 (c3-4 / amr-unknown)
      :time (c3-1 / open-01
                  :ARG1 (c3-0 / sentence)))

# ::snt She better not accuse him of something he didnt do
# ::tokens ["She", "better", "not", "accuse", "him", "of", "something", "he", "did", "nt", "do"]
# ::lemmas ["she", "well", "not", "accuse", "he", "of", "something", "he", "do", "not", "do"]
(c4-2 / recommend-01
      :ARG1 (c4-4 / accuse-01
                  :ARG0 (c4-1 / she)
                  :ARG1 (c4-3 / he)
                  :ARG2 (c4-0 / something
                              :ARG1-of (c4-5 / do-02
                                             :ARG0 c4-3
                                             :polarity -))
                  :polarity -))

# ::snt Please make this go away
# ::tokens ["Please", "make", "this", "go", "away"]
# ::lemmas ["please", "make", "this", "go", "away"]
(c5-1 / make-02
      :ARG0 (c5-0 / you)
      :ARG1 (c5-4 / go-01
                  :ARG1 (c5-2 / this)
                  :direction (c5-3 / away))
      :mode imperative
      :polite +)

# ::snt Being sluty as usual
# ::tokens ["Being", "sluty", "as", "usual"]
# ::lemmas ["be", "sluty", "as", "usual"]
(c6-2 / sluty
      :domain (c6-1 / i)
      :mod (c6-0 / as-usual))

# ::snt She falls face first into the jacuzzi..producers should have seen how drunk she was and should have stepped in...but didn't now we have this
# ::tokens ["She", "falls", "face", "first", "into", "the", "jacuzzi", "..", "producers", "should", "have", "seen", "how", "drunk", "she", "was", "and", "should", "have", "stepped", "in", "...", "but", "did", "n't", "now", "we", "have", "this"]
# ::lemmas ["she", "fall", "face", "first", "into", "the", "jacuzzi", "..", "producer", "should", "have", "see", "how", "drunk", "she", "be", "and", "should", "have", "step", "in", "...", "but", "do", "not", "now", "we", "have", "this"]
(c7-8 / multi-sentence
      :snt1 (c7-11 / fall-01
                   :ARG1 (c7-0 / she)
                   :ARG4 (c7-6 / jacuzzi)
                   :manner (c7-16 / face
                                  :ord (c7-3 / ordinal-entity
                                             :value 1)))
      :snt2 (c7-10 / contrast-01
                   :ARG1 (c7-14 / recommend-01
                                :ARG1 (c7-4 / see-01
                                            :ARG0 (c7-15 / person
                                                         :ARG0-of (c7-9 / produce-01))
                                            :ARG1 (c7-18 / drunk
                                                         :domain c7-0
                                                         :degree (c7-2 / so))))
                   :ARG2 (c7-1 / recommend-01
                               :ARG1 (c7-13 / step-in-02
                                            :ARG0 c7-15)))
      :ARG2 (c7-5 / have-03
                  :ARG0 (c7-17 / we)
                  :ARG1 (c7-7 / this)
                  :time (c7-12 / now)
                  :polarity -))

# ::snt There's two sides of every story and then the truth.
# ::tokens ["There", "'s", "two", "sides", "of", "every", "story", "and", "then", "the", "truth", "."]
# ::lemmas ["there", "be", "two", "side", "of", "every", "story", "and", "then", "the", "truth", "."]
(c8-2 / and
      :op1 (c8-1 / side
                 :part-of (c8-0 / story
                                :mod (c8-3 / every))
                 :quant 2)
      :op2 (c8-4 / true-01
                 :time (c8-5 / then)))
