# ::snt Because shes an idiot.
# ::tokens ["Because", "she", "s", "an", "idiot", "."]
# ::lemmas ["because", "she", "s", "an", "idiot", "."]
(c1-0 / cause-01
      :ARG0 (c1-1 / idiot
                  :domain (c1-2 / she)))

# ::snt Then how does Beyonce get weekly emails with Air Miles &amp; Shoppers Optimum coupons to download onto her cards?
# ::tokens ["Then", "how", "does", "Beyonce", "get", "weekly", "emails", "with", "Air", "Miles", "&", "amp", ";", "Shoppers", "Optimum", "coupons", "to", "download", "onto", "her", "cards", "?"]
# ::lemmas ["then", "how", "do", "Beyonce", "get", "weekly", "email", "with", "Air", "Miles", "&", "amp", ";", "Shoppers", "Optimum", "coupon", "to", "download", "onto", "her", "card", "?"]
(c2-13 / get-01
       :ARG0 (c2-5 / person
                   :name (c2-1 / name
                               :op1 "Beyonce"))
       :ARG1 (c2-3 / email-01
                   :ARG2 (c2-12 / and
                                :op1 (c2-7 / company
                                           :name (c2-4 / name
                                                       :op1 "Air"
                                                       :op2 "Miles"
                                                       :op3 "&"
                                                       :op4 "amp"))
                                :op2 (c2-15 / company
                                            :name (c2-6 / name
                                                        :op1 "Shoppers"
                                                        :op2 "Optimum")))
                   :frequency (c2-2 / rate-entity-91
                                    :ARG3 (c2-10 / temporal-quantity
                                                 :unit (c2-8 / week)
                                                 :quant 1)))
       :manner (c2-11 / amr-unknown)
       :purpose (c2-14 / download-01
                       :ARG0 c2-5
                       :ARG1 (c2-9 / coupon
                                   :source c2-15)
                       :destination (c2-0 / card
                                          :poss c2-5)))

# ::snt Bitch me too the fuck? Always forgetting passwords
# ::tokens ["Bitch", "me", "too", "the", "fuck", "?", "Always", "forgetting", "passwords"]
# ::lemmas ["bitch", "i", "too", "the", "fuck", "?", "always", "forget", "password"]
(c3-3 / multi-sentence
      :snt1 (c3-1 / bitch-01
                  :ARG0 (c3-2 / you)
                  :ARG1 (c3-7 / i)
                  :mod (c3-8 / too)
                  :mod (c3-0 / fuck
                             :mode expressive)
                  :mode imperative)
      :snt2 (c3-6 / forget-01
                  :ARG1 (c3-9 / thing
                              :ARG2-of (c3-5 / log-01))
                  :time (c3-4 / always)))

# ::snt Understandable but thats MuchWork. Can people realize shes human and need live just as they do?
# ::tokens ["Understandable", "but", "that", "s", "MuchWork", ".", "Can", "people", "realize", "she", "s", "human", "and", "need", "live", "just", "as", "they", "do", "?"]
# ::lemmas ["understandable", "but", "that", "s", "MuchWork", ".", "can", "people", "realize", "she", "s", "human", "and", "need", "live", "just", "as", "they", "do", "?"]
(c4-11 / multi-sentence
       :snt1 (c4-14 / contrast-01
                    :ARG1 (c4-18 / possible-01
                                 :ARG1 (c4-15 / understand-01
                                              :ARG1 (c4-9 / that)))
                    :ARG2 (c4-4 / much
                                :domain c4-9))
       :snt2 (c4-12 / possible-01
                    :ARG1 (c4-8 / and
                                :op1 (c4-17 / realize-01
                                            :ARG0 (c4-2 / person)
                                            :ARG1 (c4-5 / human
                                                        :domain (c4-0 / she)))
                                :op2 (c4-16 / need-01
                                            :ARG0 c4-2
                                            :ARG1 (c4-1 / live-01
                                                        :ARG0 c4-2
                                                        :ARG1-of (c4-3 / resemble-01
                                                                       :ARG2 (c4-13 / need-01
                                                                                    :ARG0 c4-2
                                                                                    :ARG1 (c4-10 / live-01
                                                                                                 :ARG0 c4-2))
                                                                       :mod (c4-6 / just)))))
                    :polarity (c4-7 / amr-unknown)))
