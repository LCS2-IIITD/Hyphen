# ::snt Those look good!
# ::tokens ["Those", "look", "good", "!"]
# ::lemmas ["those", "look", "good", "!"]
(c1-1 / look-02
      :ARG0 (c1-2 / that)
      :ARG1 (c1-0 / good-02)
      :mode expressive)

# ::snt We gotta try
# ::tokens ["We", "got", "ta", "try"]
# ::lemmas ["we", "got", "to", "try"]
(c3-0 / obligate-01
      :ARG1 (c3-2 / we)
      :ARG2 (c3-1 / try-01
                  :ARG0 c3-2))

# ::snt Isnt this the frappula? We had it the last two years
# ::tokens ["Is", "nt", "this", "the", "frappula", "?", "We", "had", "it", "the", "last", "two", "years"]
# ::lemmas ["be", "not", "this", "the", "frappula", "?", "we", "have", "it", "the", "last", "two", "years"]
(c4-3 / multi-sentence
      :snt1 (c4-0 / frappula
                  :domain (c4-7 / this)
                  :polarity (c4-9 / amr-unknown))
      :snt2 (c4-5 / have-03
                  :ARG0 (c4-6 / we)
                  :ARG1 (c4-8 / it)
                  :time (c4-1 / before
                              :op1 (c4-4 / now)
                              :duration (c4-10 / temporal-quantity
                                               :unit (c4-2 / year)
                                               :quant 2))))

# ::snt US is getting a Frankenstein caramel/apple Frappuccino and another one probably the frappula from last year.
# ::tokens ["US", "is", "getting", "a", "Frankenstein", "caramel", "/", "apple", "Frappuccino", "and", "another", "one", "probably", "the", "frappula", "from", "last", "year", "."]
# ::lemmas ["US", "be", "get", "a", "Frankenstein", "caramel", "/", "apple", "Frappuccino", "and", "another", "one", "probably", "the", "frappula", "from", "last", "year", "."]
(c5-13 / get-01
       :ARG0 (c5-9 / country
                   :name (c5-2 / name
                               :op1 "US"))
       :ARG1 (c5-12 / and
                    :op1 (c5-0 / Frappuccino
                               :mod (c5-6 / person
                                          :name (c5-5 / name
                                                      :op1 "Frankenstein"))
                               :mod (c5-4 / slash
                                          :op1 (c5-14 / caramel)
                                          :op2 (c5-11 / apple)))
                    :op2 (c5-7 / Frappula
                               :mod (c5-10 / another)
                               :mod (c5-3 / probable)
                               :time (c5-1 / year
                                           :mod (c5-8 / last)))))

# ::snt In the UK and Singapore only
# ::tokens ["In", "the", "UK", "and", "Singapore", "only"]
# ::lemmas ["in", "the", "UK", "and", "Singapore", "only"]
(c6-1 / be-located-at-91
      :ARG2 (c6-5 / and
                  :op1 (c6-4 / country
                             :name (c6-2 / name
                                         :op1 "UK"))
                  :op2 (c6-6 / country
                             :name (c6-3 / name
                                         :op1 "Singapore"))
                  :mod (c6-0 / only)))

# ::snt That's bloody lol
# ::tokens ["That", "'s", "bloody", "lol"]
# ::lemmas ["that", "be", "bloody", "lol"]
(c8-1 / bloody
      :domain (c8-3 / that)
      :ARG2-of (c8-2 / laugh-01
                     :manner (c8-0 / loud)
                     :mode expressive)
      :mode expressive)

# ::snt It just might
# ::tokens ["It", "just", "might"]
# ::lemmas ["it", "just", "might"]
(c9-1 / possible-01
      :ARG1 (c9-2 / it)
      :mod (c9-0 / just))

# ::snt I wonder if theyll know what Im talking about if I try to order it this time lol
# ::tokens ["I", "wonder", "if", "they", "ll", "know", "what", "I", "m", "talking", "about", "if", "I", "try", "to", "order", "it", "this", "time", "lol"]
# ::lemmas ["i", "wonder", "if", "they", "ll", "know", "what", "i", "m", "talk", "about", "if", "i", "try", "to", "order", "it", "this", "time", "lol"]
(c11-6 / wonder-01
       :ARG0 (c11-8 / i)
       :ARG1 (c11-7 / truth-value
                    :polarity-of (c11-4 / know-01
                                        :ARG0 (c11-9 / they)
                                        :ARG1 (c11-10 / thing
                                                      :ARG1-of (c11-3 / talk-01
                                                                      :ARG0 c11-8))
                                        :condition (c11-1 / try-01
                                                          :ARG0 c11-8
                                                          :ARG1 (c11-0 / order-02
                                                                       :ARG0 c11-8
                                                                       :ARG1 (c11-2 / it)
                                                                       :time (c11-11 / this))
                                                          :ARG2-of (c11-5 / laugh-01
                                                                          :ARG0 c11-8
                                                                          :manner (c11-12 / loud)
                                                                          :mode expressive)))))

# ::snt ehhhfhsj
# ::tokens ["ehhhfhsj"]
# ::lemmas ["ehhhfhsj"]
(c12-3 / say-01
       :ARG0 (c12-2 / i)
       :ARG2 (c12-1 / person
                    :name (c12-0 / name
                                 :op1 "ehhhfhsj")))

# ::snt Wow looks good
# ::tokens ["Wow", "looks", "good"]
# ::lemmas ["wow", "look", "good"]
(c13-2 / look-02
       :ARG1 (c13-0 / good-02)
       :mod (c13-1 / wow
                   :mode expressive))

# ::snt Get me one so I know its real
# ::tokens ["Get", "me", "one", "so", "I", "know", "its", "real"]
# ::lemmas ["get", "i", "one", "so", "i", "know", "its", "real"]
(c14-6 / get-01
       :ARG0 (c14-1 / you)
       :ARG1 (c14-0 / one)
       :ARG4 (c14-5 / i)
       :purpose (c14-4 / know-01
                       :ARG0 c14-5
                       :ARG1 (c14-3 / real-04
                                    :ARG1 (c14-2 / it)))
       :mode imperative)

# ::snt Is it time for a drink, yet?
# ::tokens ["Is", "it", "time", "for", "a", "drink", ",", "yet", "?"]
# ::lemmas ["be", "it", "time", "for", "a", "drink", ",", "yet", "?"]
(c15-1 / be-temporally-at-91
       :ARG2 (c15-0 / drink-01)
       :time (c15-2 / yet)
       :polarity (c15-3 / amr-unknown))

# ::snt That looks so yummy I'm about to try that
# ::tokens ["That", "looks", "so", "yummy", "I", "'m", "about", "to", "try", "that"]
# ::lemmas ["that", "look", "so", "yummy", "i", "be", "about", "to", "try", "that"]
(c16-4 / look-02
       :ARG0 (c16-6 / that)
       :ARG1 (c16-0 / yummy
                    :ARG2-of (c16-3 / have-degree-91
                                    :ARG1 c16-6
                                    :ARG3 (c16-1 / so)
                                    :ARG6 (c16-7 / try-01
                                                 :ARG0 (c16-5 / i)
                                                 :ARG1 c16-6
                                                 :time (c16-2 / about-to)))))

# ::snt Starbucks employees all groan
# ::tokens ["Starbucks", "employees", "all", "groan"]
# ::lemmas ["starbuck", "you", "all", "groan"]
(c19-5 / groan-01
       :ARG0 (c19-2 / person
                    :ARG1-of (c19-1 / employ-01
                                    :ARG0 (c19-3 / company
                                                 :name (c19-0 / name
                                                              :op1 "Starbucks")))
                    :mod (c19-4 / all)))

# ::snt Wow, have to try this midnight
# ::tokens ["Wow", ",", "have", "to", "try", "this", "midnight"]
# ::lemmas ["wow", ",", "have", "to", "try", "this", "midnight"]
(c20-0 / obligate-01
       :ARG2 (c20-3 / try-01
                    :time (c20-1 / midnight
                                 :mod (c20-4 / this)))
       :mod (c20-2 / wow
                   :mode expressive))

# ::snt We're going OMG
# ::tokens ["We", "'re", "going", "OMG"]
# ::lemmas ["we", "be", "go", "OMG"]
(c21-0 / go-08
       :ARG1 (c21-1 / we)
       :ARG2 (c21-2 / oh-my-god
                    :mode expressive))
