# ::snt How old is David Foster?
# ::tokens ["How", "old", "is", "David", "Foster", "?"]
# ::lemmas ["how", "old", "be", "David", "Foster", "?"]
(c1-1 / person
      :name (c1-0 / name
                  :op1 "David"
                  :op2 "Foster")
      :age (c1-2 / amr-unknown))

# ::snt I love this couple
# ::tokens ["I", "love", "this", "couple"]
# ::lemmas ["i", "love", "this", "couple"]
(c2-1 / love-01
      :ARG0 (c2-2 / i)
      :ARG1 (c2-0 / couple
                  :mod (c2-3 / this)))

# ::snt Leading to a new Fox sitcom, Sass Kat and the Music Man
# ::tokens ["Leading", "to", "a", "new", "Fox", "sitcom", ",", "Sass", "Kat", "and", "the", "Music", "Man"]
# ::lemmas ["lead", "to", "a", "new", "Fox", "sitcom", ",", "Sass", "Kat", "and", "the", "Music", "man"]
(c4-4 / lead-03
      :ARG2 (c4-2 / sitcom
                  :name (c4-1 / name
                              :op1 "Sass"
                              :op2 "Kat"
                              :op3 "and"
                              :op4 "the"
                              :op5 "Music"
                              :op6 "Man")
                  :ARG1-of (c4-3 / new-01)
                  :poss (c4-0 / broadcast-program
                              :name (c4-5 / name
                                          :op1 "Fox"))))

# ::snt All that matters is that theyre happy
# ::tokens ["All", "that", "matters", "is", "that", "they", "re", "happy"]
# ::lemmas ["all", "that", "matter", "be", "that", "they", "re", "happy"]
(c6-2 / matter-01
      :ARG1 (c6-1 / happy-01
                  :ARG1 (c6-3 / they))
      :mod (c6-0 / all))

# ::snt aint fooling no one
# ::tokens ["ai", "nt", "fooling", "no", "one"]
# ::lemmas ["be", "not", "fool", "no", "one"]
(c7-0 / fool-01
      :ARG1 (c7-1 / no-one))

# ::snt stop grossing people out with your inappropriate grandpa news if you dont want backlash !
# ::tokens ["stop", "grossing", "people", "out", "with", "your", "inappropriate", "grandpa", "news", "if", "you", "do", "nt", "want", "backlash", "!"]
# ::lemmas ["stop", "gross", "people", "out", "with", "your", "inappropriate", "grandpa", "news", "if", "you", "do", "not", "want", "backlash", "!"]
(c8-4 / stop-01
      :ARG0 (c8-1 / you)
      :ARG1 (c8-10 / gross-out-01
                   :ARG0 c8-1
                   :ARG1 (c8-6 / person)
                   :ARG2 (c8-2 / news
                               :poss (c8-3 / person
                                           :ARG0-of (c8-5 / have-rel-role-91
                                                          :ARG1 c8-1
                                                          :ARG2 (c8-8 / grandpa)))
                               :ARG1-of (c8-9 / appropriate-02
                                              :polarity -)))
      :condition (c8-7 / want-01
                       :ARG0 c8-1
                       :ARG1 (c8-0 / backlash-01)
                       :polarity -)
      :mode imperative)

# ::snt Receive credits every day for free, then Invest those credits in stock for free, too - Use my link to get your first free credits!
# ::tokens ["Receive", "credits", "every", "day", "for", "free", ",", "then", "Invest", "those", "credits", "in", "stock", "for", "free", ",", "too", "-", "Use", "my", "link", "to", "get", "your", "first", "free", "credits", "!"]
# ::lemmas ["receive", "credit", "every", "day", "for", "free", ",", "then", "invest", "those", "credit", "in", "stock", "for", "free", ",", "too", "-", "use", "my", "link", "to", "get", "your", "first", "free", "credit", "!"]
(c10-13 / multi-sentence
        :snt1 (c10-10 / and
                      :op1 (c10-18 / receive-01
                                   :ARG0 (c10-6 / you)
                                   :ARG1 (c10-14 / credit)
                                   :ARG3-of (c10-17 / free-03)
                                   :frequency (c10-4 / rate-entity-91
                                                     :ARG3 (c10-8 / temporal-quantity
                                                                  :unit (c10-23 / day)
                                                                  :quant 1)))
                      :op2 (c10-21 / invest-01
                                   :ARG0 c10-6
                                   :ARG2 (c10-12 / credit
                                                 :mod (c10-15 / that)
                                                 :ARG1-of (c10-0 / stock-01))
                                   :ARG3-of (c10-19 / free-03
                                                    :ARG1 c10-6
                                                    :mod (c10-22 / too))
                                   :time (c10-1 / then)))
        :snt2 (c10-16 / use-01
                      :ARG0 (c10-9 / you)
                      :ARG1 (c10-2 / link
                                   :poss (c10-7 / i))
                      :ARG2 (c10-11 / get-01
                                    :ARG0 c10-9
                                    :ARG1 (c10-3 / credit
                                                 :ord (c10-5 / ordinal-entity
                                                             :value 1)
                                                 :ARG1-of (c10-20 / free-03)))
                      :mode imperative))

# ::snt The fact that she has to defend it at all shows how judgemental and petty ppl have become.
# ::tokens ["The", "fact", "that", "she", "has", "to", "defend", "it", "at", "all", "shows", "how", "judgemental", "and", "petty", "ppl", "have", "become", "."]
# ::lemmas ["the", "fact", "that", "she", "have", "to", "defend", "it", "at", "all", "show", "how", "judgemental", "and", "petty", "ppl", "have", "become", "."]
(c11-4 / show-01
       :ARG0 (c11-0 / obligate-01
                    :ARG1 (c11-1 / she)
                    :ARG2 (c11-10 / defend-01
                                  :ARG0 c11-1
                                  :ARG1 (c11-7 / it)
                                  :degree (c11-8 / at-all)))
       :ARG1 (c11-2 / become-01
                    :ARG1 (c11-5 / person
                                 :mod (c11-3 / petty)
                                 :ARG0-of (c11-6 / judge-01))
                    :ARG2 (c11-9 / amr-unknown)))

# ::snt Hello....I am graphics designer. If you need any Card, , Card design or many moreContact Me: Sterling Jordan Pickford Maguire Dan Ryan
# ::tokens ["Hello", "....", "I", "am", "graphics", "designer", ".", "If", "you", "need", "any", "Card", ",", ",", "Card", "design", "or", "many", "moreContact", "Me", ":", "Sterling", "Jordan", "Pickford", "Maguire", "Dan", "Ryan"]
# ::lemmas ["hello", "....", "i", "be", "graphic", "designer", ".", "if", "you", "need", "any", "Card", ",", ",", "Card", "design", "or", "many", "morecontact", "i", ":", "Sterling", "Jordan", "Pickford", "Maguire", "Dan", "Ryan"]
(c12-9 / multi-sentence
       :snt1 (c12-4 / hello)
       :snt2 (c12-15 / person
                     :ARG0-of (c12-19 / design-01
                                      :ARG1 (c12-7 / graphics))
                     :domain (c12-18 / i))
       :snt3 (c12-12 / contact-01
                     :ARG0 (c12-3 / you)
                     :ARG1 (c12-10 / person
                                   :name (c12-14 / name
                                                 :op1 "Dan"
                                                 :op2 "Ryan")
                                   :ARG0-of (c12-17 / have-org-role-91
                                                    :ARG2 (c12-1 / person
                                                                 :name (c12-11 / name
                                                                               :op1 "Sterling"
                                                                               :op2 "Jordan"
                                                                               :op3 "Pickford"
                                                                               :op4 "Maguire"))))
                     :condition (c12-16 / need-01
                                        :ARG0 c12-3
                                        :ARG1 (c12-2 / or
                                                     :op1 (c12-8 / card
                                                                 :mod (c12-6 / any))
                                                     :op2 c12-19
                                                     :ARG1 (c12-0 / card))
                                        :op3 (c12-5 / more
                                                    :quant (c12-13 / many)))
                     :mode imperative))
