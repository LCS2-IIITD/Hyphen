# ::snt Guess she shouldnt have cheated or left Tarek.
# ::tokens ["Guess", "she", "should", "nt", "have", "cheated", "or", "left", "Tarek", "."]
# ::lemmas ["guess", "she", "should", "not", "have", "cheat", "or", "leave", "Tarek", "."]
(c1-6 / guess-01
      :ARG1 (c1-3 / recommend-01
                  :ARG1 (c1-0 / or
                              :op1 (c1-5 / cheat-03
                                         :ARG0 (c1-2 / she)
                                         :polarity -)
                              :op2 (c1-4 / leave-15
                                         :ARG0 c1-2
                                         :ARG1 (c1-7 / company
                                                     :name (c1-1 / name
                                                                 :op1 "Tarek"))
                                         :polarity -))))

# ::snt why is this skank still in the news?
# ::tokens ["why", "is", "this", "skank", "still", "in", "the", "news", "?"]
# ::lemmas ["why", "be", "this", "skank", "still", "in", "the", "news", "?"]
(c3-5 / cause-01
      :ARG0 (c3-4 / amr-unknown)
      :ARG1 (c3-1 / be-located-at-91
                  :ARG1 (c3-3 / skank
                              :mod (c3-6 / this))
                  :ARG2 (c3-2 / news)
                  :mod (c3-0 / still)))

# ::snt She's probably an addict too and ended things because she didn't want to be sober with him
# ::tokens ["She", "'s", "probably", "an", "addict", "too", "and", "ended", "things", "because", "she", "did", "n't", "want", "to", "be", "sober", "with", "him"]
# ::lemmas ["she", "be", "probably", "an", "addict", "too", "and", "end", "thing", "because", "she", "do", "not", "want", "to", "be", "sober", "with", "he"]
(c4-2 / and
      :op1 (c4-8 / addict-01
                 :ARG1 (c4-1 / she)
                 :mod (c4-9 / too)
                 :mod (c4-5 / probable))
      :op2 (c4-3 / end-01
                 :ARG0 c4-1
                 :ARG1 (c4-10 / thing)
                 :ARG1-of (c4-6 / cause-01
                                :ARG0 (c4-7 / want-01
                                            :ARG0 c4-1
                                            :ARG1 (c4-0 / sober-02
                                                        :ARG1 c4-1
                                                        :accompanier (c4-4 / he))
                                            :polarity -))))

# ::snt No man is perfect Christina. Please get back w Tarek
# ::tokens ["No", "man", "is", "perfect", "Christina", ".", "Please", "get", "back", "w", "Tarek"]
# ::lemmas ["no", "man", "be", "perfect", "Christina", ".", "please", "get", "back", "w", "Tarek"]
(c5-1 / multi-sentence
      :snt1 (c5-3 / say-01
                  :ARG1 (c5-6 / perfect-02
                              :ARG1 (c5-5 / man
                                          :polarity -))
                  :ARG2 (c5-2 / person
                              :name (c5-4 / name
                                          :op1 "Christina")))
      :snt2 (c5-9 / get-back-25
                  :ARG0 (c5-0 / you)
                  :ARG1 (c5-8 / person
                              :name (c5-7 / name
                                          :op1 "Tarek"))
                  :mode imperative
                  :polite +))

# ::snt Wow and at this time is when he would actually need someone the most to support him during this process.
# ::tokens ["Wow", "and", "at", "this", "time", "is", "when", "he", "would", "actually", "need", "someone", "the", "most", "to", "support", "him", "during", "this", "process", "."]
# ::lemmas ["wow", "and", "at", "this", "time", "be", "when", "he", "would", "actually", "need", "someone", "the", "most", "to", "support", "he", "during", "this", "process", "."]
(c6-10 / and
       :op2 (c6-1 / need-01
                  :ARG0 (c6-4 / he)
                  :ARG1 (c6-3 / someone
                              :ARG1-of (c6-7 / have-quant-91
                                             :ARG3 (c6-2 / most)))
                  :ARG1-of (c6-9 / actual-02)
                  :purpose (c6-0 / support-01
                                 :ARG0 c6-3
                                 :ARG1 c6-4
                                 :time (c6-5 / process-02
                                             :mod (c6-8 / this)))
                  :time (c6-12 / time
                               :mod (c6-11 / this)))
       :mod (c6-6 / wow
                  :mode expressive))
