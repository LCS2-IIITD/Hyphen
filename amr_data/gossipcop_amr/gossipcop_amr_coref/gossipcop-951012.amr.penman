# ::snt I hope to be killed in jail....
# ::tokens ["I", "hope", "to", "be", "killed", "in", "jail", "...."]
# ::lemmas ["i", "hope", "to", "be", "kill", "in", "jail", "...."]
(c2-1 / hope-01
      :ARG0 (c2-3 / i)
      :ARG1 (c2-2 / kill-01
                  :ARG1 c2-3
                  :location (c2-0 / jail)))

# ::snt womp womp
# ::tokens ["womp", "womp"]
# ::lemmas ["womp", "womp"]
(c3-0 / womp-01
      :ARG0 (c3-1 / you)
      :ARG1 (c3-2 / womp)
      :mode expressive)

# ::snt i think you mean rip this guy
# ::tokens ["i", "think", "you", "mean", "rip", "this", "guy"]
# ::lemmas ["i", "think", "you", "mean", "rip", "this", "guy"]
(c4-4 / think-01
      :ARG0 (c4-3 / i)
      :ARG1 (c4-1 / mean-02
                  :ARG0 (c4-0 / you)
                  :ARG2 (c4-2 / rip-01
                              :ARG0 c4-0
                              :ARG1 (c4-5 / guy
                                          :mod (c4-6 / this)))))

# ::snt Yo its snickah u grt unbanned on pvpingmc
# ::tokens ["Yo", "its", "snickah", "u", "grt", "unbanned", "on", "pvpingmc"]
# ::lemmas ["Yo", "its", "snickah", "u", "grt", "unbanne", "on", "pvpingmc"]
(c5-6 / and
      :op1 (c5-3 / snickah
                 :domain (c5-5 / it)
                 :mode expressive)
      :op2 (c5-0 / ban-01
                 :ARG1 (c5-4 / publication
                             :name (c5-2 / name
                                         :op1 "Pvpingmc"))
                 :ARG2 (c5-1 / you))
      :mod (c5-7 / yo))

# ::snt Gone be jail like
# ::tokens ["Gone", "be", "jail", "like"]
# ::lemmas ["gone", "be", "jail", "like"]
(c6-0 / resemble-01
      :ARG1 (c6-1 / jail)
      :time (c6-2 / tomorrow))

# ::snt Don't forget on of the
# ::tokens ["Do", "n't", "forget", "on", "of", "the"]
# ::lemmas ["do", "not", "forget", "on", "of", "the"]
(c7-0 / forget-01
      :ARG0 (c7-1 / you)
      :ARG1 (c7-2 / on-of)
      :polarity -
      :mode imperative)

# ::snt yes very relevant to a tweet about a black murderer
# ::tokens ["yes", "very", "relevant", "to", "a", "tweet", "about", "a", "black", "murderer"]
# ::lemmas ["yes", "very", "relevant", "to", "a", "tweet", "about", "a", "black", "murderer"]
(c8-3 / relevant-01
      :ARG1 (c8-1 / yes)
      :degree (c8-4 / very)
      :prep-to (c8-6 / tweet-01
                     :topic (c8-5 / person
                                  :ARG0-of (c8-2 / murder-01)
                                  :ARG1-of (c8-0 / black-05))))

# ::snt its true
# ::tokens ["its", "true"]
# ::lemmas ["its", "true"]
(c9-1 / true-01
      :ARG1 (c9-0 / it))

# ::snt times out of yo buddy a rat
# ::tokens ["times", "out", "of", "yo", "buddy", "a", "rat"]
# ::lemmas ["time", "out", "of", "yo", "buddy", "a", "rat"]
(c10-2 / rat
       :domain (c10-4 / person
                      :ARG0-of (c10-3 / have-rel-role-91
                                      :ARG1 (c10-1 / you)
                                      :ARG2 (c10-0 / buddy)))
       :frequency (c10-5 / time))

# ::snt Foreal. Yellow af eyes
# ::tokens ["Foreal", ".", "Yellow", "af", "eyes"]
# ::lemmas ["foreal", ".", "yellow", "af", "eye"]
(c11-2 / multi-sentence
       :snt1 (c11-0 / forensics)
       :snt2 (c11-3 / eye
                    :mod (c11-1 / yellow)
                    :mod (c11-4 / af)))

# ::snt Glad they got his ass!!
# ::tokens ["Glad", "they", "got", "his", "ass", "!", "!"]
# ::lemmas ["glad", "they", "get", "his", "ass", "!", "!"]
(c15-4 / glad-02
       :ARG0 (c15-2 / get-01
                    :ARG0 (c15-1 / they)
                    :ARG1 (c15-3 / ass
                                 :part-of (c15-0 / he)))
       :ARG1 (c15-5 / i)
       :mode expressive)

# ::snt Psh all y'all tripping fuck a prison cell cuh. That nigga needs his mind opened up with the. and read his blue print
# ::tokens ["Psh", "all", "y'", "all", "tripping", "fuck", "a", "prison", "cell", "cuh", ".", "That", "nigga", "needs", "his", "mind", "opened", "up", "with", "the", ".", "and", "read", "his", "blue", "print"]
# ::lemmas ["Psh", "all", "you", "all", "trip", "fuck", "a", "prison", "cell", "cuh", ".", "that", "nigga", "need", "his", "mind", "open", "up", "with", "the", ".", "and", "read", "his", "blue", "print"]
(c16-4 / multi-sentence
       :snt1 (c16-0 / fuck-01
                    :ARG0 (c16-3 / you
                                 :mod (c16-14 / all))
                    :ARG1 (c16-11 / cell
                                  :location (c16-9 / prison))
                    :mod (c16-16 / cop)
                    :mod (c16-12 / cuh
                                 :mode expressive)
                    :mode expressive)
       :snt2 (c16-5 / need-01
                    :ARG0 (c16-8 / nigger
                                 :mod (c16-13 / that)
                                 :part (c16-10 / mind))
                    :ARG1 (c16-1 / open-up-03
                                 :ARG1 c16-10
                                 :instrument (c16-15 / gun)))
       :snt3 (c16-7 / read-01
                    :ARG0 c16-3
                    :ARG1 (c16-6 / print
                                 :mod (c16-2 / blue)
                                 :poss c16-8)))

# ::snt Don't drop the soap
# ::tokens ["Do", "n't", "drop", "the", "soap"]
# ::lemmas ["do", "not", "drop", "the", "soap"]
(c18-0 / drop-01
       :ARG0 (c18-1 / you)
       :ARG1 (c18-2 / soap)
       :mode imperative
       :polarity -)

# ::snt He shouldve been arrested for his name alone where his parents at lock them up to for naming him.
# ::tokens ["He", "should", "ve", "been", "arrested", "for", "his", "name", "alone", "where", "his", "parents", "at", "lock", "them", "up", "to", "for", "naming", "him", "."]
# ::lemmas ["he", "should", "ve", "be", "arrest", "for", "his", "name", "alone", "where", "his", "parent", "at", "lock", "they", "up", "to", "for", "name", "he", "."]
(c20-2 / recommend-01
       :ARG1 (c20-9 / arrest-01
                    :ARG1 (c20-3 / he)
                    :ARG2 (c20-0 / name
                                 :poss c20-3
                                 :mod (c20-8 / alone))
                    :location (c20-4 / lock-up-03
                                     :ARG0 (c20-5 / person
                                                  :ARG0-of (c20-7 / have-rel-role-91
                                                                  :ARG1 c20-3
                                                                  :ARG2 (c20-1 / parent))
                                                  :ARG1-of c20-4)
                                     :ARG3 (c20-6 / name
                                                  :poss c20-5))))

# ::snt hope this mans asshole gets mutilated in prison
# ::tokens ["hope", "this", "mans", "asshole", "gets", "mutilated", "in", "prison"]
# ::lemmas ["hope", "this", "mans", "asshole", "gets", "mutilate", "in", "prison"]
(c21-2 / hope-01
       :ARG0 (c21-5 / i)
       :ARG1 (c21-0 / mutilate-01
                    :ARG1 (c21-6 / asshole
                                 :mod (c21-1 / man
                                             :mod (c21-4 / this)))
                    :location (c21-3 / prison)))

# ::snt Good we need to catch all of them. May they rot in prison and being beaten tortured and then given death penalty
# ::tokens ["Good", "we", "need", "to", "catch", "all", "of", "them", ".", "May", "they", "rot", "in", "prison", "and", "being", "beaten", "tortured", "and", "then", "given", "death", "penalty"]
# ::lemmas ["good", "we", "need", "to", "catch", "all", "of", "they", ".", "may", "they", "rot", "in", "prison", "and", "be", "beat", "torture", "and", "then", "give", "death", "penalty"]
(c22-2 / multi-sentence
       :snt1 (c22-12 / good-02
                     :ARG1 (c22-1 / need-01
                                  :ARG0 (c22-9 / we)
                                  :ARG1 (c22-8 / catch-03
                                               :ARG0 c22-9
                                               :ARG1 (c22-11 / they
                                                             :mod (c22-4 / all)))))
       :snt2 (c22-7 / wish-01
                    :ARG1 (c22-10 / and
                                  :op1 (c22-5 / rot-01
                                              :ARG1 c22-11)
                                  :location (c22-6 / prison))
                    :op2 (c22-0 / beat-01
                                :ARG1 c22-11
                                :ARG2 (c22-15 / torture-01
                                              :ARG1 c22-11))
                    :op3 (c22-3 / penalize-01
                                :ARG1 c22-11
                                :manner (c22-13 / die-01
                                                :ARG1 c22-11)
                                :time (c22-14 / then))))

# ::snt them dudes in jail waiting like
# ::tokens ["them", "dudes", "in", "jail", "waiting", "like"]
# ::lemmas ["they", "dude", "in", "jail", "wait", "like"]
(c23-0 / be-located-at-91
       :ARG1 (c23-4 / dude
                    :mod (c23-3 / they))
       :ARG2 (c23-2 / jail)
       :ARG1-of (c23-1 / resemble-01))

# ::snt His instagram name is. Fly_mike1443
# ::tokens ["His", "instagram", "name", "is", ".", "Fly_mike1443"]
# ::lemmas ["his", "instagram", "name", "be", ".", "fly_mike1443"]
(c24-0 / name-01
       :ARG1 (c24-2 / he)
       :ARG2 (c24-3 / person
                    :name (c24-4 / name
                                 :op1 "Fly_mike1443")
                    :mod (c24-1 / publication
                                :name c24-4
                                :op1 "Instagram")))

# ::snt I hope he dies
# ::tokens ["I", "hope", "he", "dies"]
# ::lemmas ["i", "hope", "he", "die"]
(c25-2 / hope-01
       :ARG0 (c25-3 / i)
       :ARG1 (c25-1 / die-01
                    :ARG1 (c25-0 / he)))

# ::snt Why these kids throwing away their lives
# ::tokens ["Why", "these", "kids", "throwing", "away", "their", "lives"]
# ::lemmas ["why", "these", "kid", "throw", "away", "their", "life"]
(c26-4 / throw-away-07
       :ARG0 (c26-2 / kid
                    :mod (c26-5 / this))
       :ARG1 (c26-1 / life
                    :poss c26-2)
       :ARG1-of (c26-3 / cause-01
                       :ARG0 (c26-0 / amr-unknown)))

# ::snt The same thing that was wrong with the last generation we just got social media now.
# ::tokens ["The", "same", "thing", "that", "was", "wrong", "with", "the", "last", "generation", "we", "just", "got", "social", "media", "now", "."]
# ::lemmas ["the", "same", "thing", "that", "be", "wrong", "with", "the", "last", "generation", "we", "just", "get", "social", "medium", "now", "."]
(c27-9 / get-01
       :ARG0 (c27-5 / we)
       :ARG1 (c27-1 / media
                    :mod (c27-2 / social))
       :mod (c27-6 / just)
       :ARG1-of (c27-0 / same-01
                       :ARG2 (c27-8 / thing
                                    :ARG1-of (c27-4 / wrong-02
                                                    :ARG2 (c27-7 / generation
                                                                 :mod (c27-3 / last))))))

# ::snt He baked
# ::tokens ["He", "baked"]
# ::lemmas ["he", "bake"]
(c28-0 / bake-01
       :ARG0 (c28-1 / he))

# ::snt You are racist? since when?
# ::tokens ["You", "are", "racist", "?", "since", "when", "?"]
# ::lemmas ["you", "be", "racist", "?", "since", "when", "?"]
(c30-1 / racist
       :polarity (c30-3 / amr-unknown)
       :domain (c30-2 / you)
       :time (c30-0 / since
                    :op1 c30-3))

# ::snt Fuck this kid
# ::tokens ["Fuck", "this", "kid"]
# ::lemmas ["fuck", "this", "kid"]
(c31-0 / fuck-01
       :ARG1 (c31-1 / kid
                    :mod (c31-2 / this))
       :mode expressive)

# ::snt Neither are the people who they cover on the first
# ::tokens ["Neither", "are", "the", "people", "who", "they", "cover", "on", "the", "first"]
# ::lemmas ["neither", "be", "the", "people", "who", "they", "cover", "on", "the", "first"]
(c32-2 / person
       :ARG1-of (c32-0 / cover-03
                       :ARG0 (c32-3 / they)
                       :time (c32-1 / first))
       :polarity -)

# ::snt All tho he looks like hed enjoy it
# ::tokens ["All", "tho", "he", "looks", "like", "he", "d", "enjoy", "it"]
# ::lemmas ["all", "tho", "he", "look", "like", "he", "d", "enjoy", "it"]
(c33-2 / have-concession-91
       :ARG1 (c33-5 / all)
       :ARG2 (c33-3 / look-02
                    :ARG0 (c33-4 / he)
                    :ARG1 (c33-1 / enjoy-01
                                 :ARG0 (c33-0 / you)
                                 :ARG1 c33-5)))

# ::snt On god
# ::tokens ["On", "god"]
# ::lemmas ["on", "god"]
(c35-2 / thing
       :topic (c35-1 / person
                     :name (c35-0 / name
                                  :op1 "God")))

# ::snt Cause he
# ::tokens ["Cause", "he"]
# ::lemmas ["cause", "he"]
(c36-0 / cause-01
       :ARG0 (c36-1 / he))

# ::snt Yea TREEJUMPERS WAITING ON U
# ::tokens ["Yea", "TREEJUMPERS", "WAITING", "ON", "U"]
# ::lemmas ["Yea", "TREEJUMPERS", "wait", "on", "u"]
(c37-0 / WAIT-01
       :ARG0 (c37-2 / person
                    :mod (c37-3 / twister))
       :mod (c37-1 / u))

# ::snt This is the dude that was wearing a red mask on live IG talking shxt about X and how X "was begging for his life"
# ::tokens ["This", "is", "the", "dude", "that", "was", "wearing", "a", "red", "mask", "on", "live", "IG", "talking", "shxt", "about", "X", "and", "how", "X", "\"", "was", "begging", "for", "his", "life", "\""]
# ::lemmas ["this", "be", "the", "dude", "that", "be", "wear", "a", "red", "mask", "on", "live", "IG", "talk", "shxt", "about", "x", "and", "how", "X", "\"", "be", "beg", "for", "his", "life", "\""]
(c39-11 / dude
        :domain (c39-10 / this)
        :ARG0-of (c39-9 / wear-01
                        :ARG1 (c39-1 / mask
                                     :ARG1-of (c39-4 / red-02))
                        :medium (c39-7 / publication
                                       :name (c39-2 / name
                                                    :op1 "Institute")
                                       :mod (c39-8 / live)))
        :ARG0-of (c39-13 / talk-01
                         :ARG1 (c39-5 / and
                                      :op1 (c39-3 / person
                                                  :name (c39-6 / name
                                                               :op1 "X"))
                                      :op2 (c39-0 / beg-01
                                                  :ARG0 c39-3
                                                  :ARG2 (c39-12 / life
                                                                :poss c39-3)))))

# ::snt X was a piece of shit just like you
# ::tokens ["X", "was", "a", "piece", "of", "shit", "just", "like", "you"]
# ::lemmas ["x", "be", "a", "piece", "of", "shit", "just", "like", "you"]
(c40-4 / piece-of-shit
       :domain (c40-2 / person
                      :name (c40-1 / name
                                   :op1 "X"))
       :ARG1-of (c40-3 / resemble-01
                       :ARG2 (c40-0 / you)
                       :mod (c40-5 / just)))

# ::snt My little brother said so Kevin Durant killed him? I have yet to get off the floor
# ::tokens ["My", "little", "brother", "said", "so", "Kevin", "Durant", "killed", "him", "?", "I", "have", "yet", "to", "get", "off", "the", "floor"]
# ::lemmas ["my", "little", "brother", "say", "so", "Kevin", "Durant", "kill", "he", "?", "i", "have", "yet", "to", "get", "off", "the", "floor"]
(c41-12 / multi-sentence
        :snt1 (c41-0 / say-01
                     :ARG0 (c41-16 / person
                                   :ARG0-of (c41-6 / have-rel-role-91
                                                   :ARG1 (c41-18 / i)
                                                   :ARG2 (c41-11 / brother
                                                                 :mod (c41-1 / little))))
                     :ARG1 (c41-7 / kill-01
                                  :ARG0 (c41-13 / person
                                                :name (c41-15 / name
                                                              :op1 "Kevin"
                                                              :op2 "Derrard"))
                                  :ARG1 (c41-17 / he))
                     :polarity (c41-9 / amr-unknown))
        :snt2 (c41-5 / have-11
                     :ARG0 (c41-4 / i)
                     :ARG1 (c41-3 / yet)
                     :purpose (c41-10 / get-05
                                      :ARG1 c41-4
                                      :ARG2 (c41-2 / off
                                                   :op1 (c41-14 / floor))))
        :polarity (c41-8 / amr-unknown))

# ::snt He only tortured his gf
# ::tokens ["He", "only", "tortured", "his", "gf"]
# ::lemmas ["he", "only", "torture", "his", "gf"]
(c42-4 / torture-01
       :ARG0 (c42-1 / he)
       :ARG1 (c42-2 / person
                    :ARG0-of (c42-3 / have-rel-role-91
                                    :ARG1 c42-1
                                    :ARG2 (c42-5 / girlfriend)))
       :mod (c42-0 / only))

# ::snt he boutta get raped too RIP
# ::tokens ["he", "boutta", "get", "raped", "too", "RIP"]
# ::lemmas ["he", "boutta", "get", "rape", "too", "RIP"]
(c43-4 / get-04
       :ARG1 (c43-1 / rape-01
                    :ARG1 (c43-2 / he))
       :mod (c43-3 / too)
       :ARG2-of (c43-0 / sad-02))

# ::snt Best comment ever
# ::tokens ["Best", "comment", "ever"]
# ::lemmas ["good", "comment", "ever"]
(c44-2 / have-degree-91
       :ARG1 (c44-3 / comment-01)
       :ARG2 (c44-4 / good-02
                    :ARG1 c44-3)
       :ARG3 (c44-0 / most)
       :time (c44-1 / ever))

# ::snt you can tell cause he got them yellow ass eyes
# ::tokens ["you", "can", "tell", "cause", "he", "got", "them", "yellow", "ass", "eyes"]
# ::lemmas ["you", "can", "tell", "cause", "he", "get", "they", "yellow", "ass", "eye"]
(c45-4 / possible-01
       :ARG1 (c45-6 / tell-02
                    :ARG0 (c45-0 / you)
                    :ARG1-of (c45-5 / cause-01
                                    :ARG0 (c45-7 / get-02
                                                 :ARG0 (c45-3 / he)
                                                 :ARG1 (c45-2 / eye
                                                              :mod (c45-1 / ass
                                                                          :ARG1-of (c45-8 / yellow-02)))))))

# ::snt Hell Yeaaa !!!! Bitches !!!! Get Dem
# ::tokens ["Hell", "Yeaaa", "!", "!", "!", "!", "Bitches", "!", "!", "!", "!", "Get", "Dem"]
# ::lemmas ["Hell", "Yeaaa", "!", "!", "!", "!", "bitch", "!", "!", "!", "!", "get", "Dem"]
(c47-1 / multi-sentence
       :snt1 (c47-3 / hell
                    :mode expressive)
       :snt2 (c47-0 / bitch
                    :mode expressive)
       :snt3 (c47-5 / get-01
                    :ARG0 (c47-4 / person
                                 :name (c47-2 / name
                                              :op1 "Dem"))
                    :mode imperative))

# ::snt Let them rape this nigha took
# ::tokens ["Let", "them", "rape", "this", "nigha", "took"]
# ::lemmas ["let", "they", "rape", "this", "nigha", "take"]
(c48-3 / let-01
       :ARG0 (c48-0 / you)
       :ARG1 (c48-2 / rape-01
                    :ARG0 (c48-5 / they)
                    :ARG1 (c48-1 / nigha
                                 :ARG1-of (c48-6 / take-01
                                                 :ARG0 c48-5))
                    :mod (c48-4 / this))
       :mode imperative)

# ::snt kodaks bois in prison gonna be waitin on him like
# ::tokens ["kodaks", "bois", "in", "prison", "gon", "na", "be", "waitin", "on", "him", "like"]
# ::lemmas ["kodaks", "bois", "in", "prison", "going", "to", "be", "waitin", "on", "he", "like"]
(c49-5 / wait-01
       :ARG1 (c49-4 / person
                    :name (c49-0 / name
                                 :op1 "kodaks"
                                 :op2 "bois"))
       :ARG2 (c49-3 / he)
       :location (c49-1 / prison)
       :ARG1-of (c49-2 / resemble-01))
