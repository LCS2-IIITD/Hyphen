# ::snt I dont see why not?
# ::tokens ["I", "do", "nt", "see", "why", "not", "?"]
# ::lemmas ["i", "do", "not", "see", "why", "not", "?"]
(c1-0 / see-01
      :ARG0 (c1-3 / i)
      :ARG1 (c1-2 / cause-01
                  :ARG0 (c1-4 / amr-unknown)
                  :ARG1 (c1-1 / have-polarity-91
                              :ARG2 -))
      :polarity -)

# ::snt Wordy yet lyrical? Or an old man in a young man's old soul?
# ::tokens ["Wordy", "yet", "lyrical", "?", "Or", "an", "old", "man", "in", "a", "young", "man", "'s", "old", "soul", "?"]
# ::lemmas ["wordy", "yet", "lyrical", "?", "or", "an", "old", "man", "in", "a", "young", "man", "'s", "old", "soul", "?"]
(c2-3 / multi-sentence
      :snt1 (c2-5 / have-manner-91
                  :ARG2 (c2-6 / lyric)
                  :mod (c2-2 / yet))
      :snt2 (c2-0 / or
                  :op2 (c2-7 / man
                             :mod (c2-1 / old)
                             :location (c2-4 / soul
                                             :mod (c2-11 / old)
                                             :poss (c2-10 / man
                                                          :mod (c2-9 / young))))
                  :polarity (c2-8 / amr-unknown)))

# ::snt Is that your final answer Kevin?
# ::tokens ["Is", "that", "your", "final", "answer", "Kevin", "?"]
# ::lemmas ["be", "that", "your", "final", "answer", "Kevin", "?"]
(c3-2 / ask-01
      :ARG0 (c3-7 / i)
      :ARG1 (c3-6 / answer-01
                  :ARG0 (c3-3 / person
                              :name (c3-1 / name
                                          :op1 "Kevin"))
                  :ARG2 (c3-5 / that)
                  :mod (c3-0 / final)
                  :polarity (c3-4 / amr-unknown))
      :ARG2 c3-3)

# ::snt He's playing with y'all tonight, right? I saw "Doors open at ".
# ::tokens ["He", "'s", "playing", "with", "y'", "all", "tonight", ",", "right", "?", "I", "saw", "\"", "Doors", "open", "at", "\"", "."]
# ::lemmas ["he", "be", "play", "with", "you", "all", "tonight", ",", "right", "?", "i", "see", "\"", "door", "open", "at", "\"", "."]
(c5-3 / multi-sentence
      :snt1 (c5-8 / play-01
                  :ARG0 (c5-7 / he)
                  :ARG3 (c5-2 / you
                              :mod (c5-11 / all))
                  :time (c5-12 / date-entity
                               :dayperiod (c5-4 / night)
                               :mod (c5-9 / today))
                  :ARG1-of (c5-6 / request-confirmation-91))
      :snt2 (c5-5 / see-01
                  :ARG0 (c5-10 / i)
                  :ARG1 (c5-0 / open-01
                              :ARG1 (c5-1 / oven))))

# ::snt That is the most accurate description Ive read, lately.
# ::tokens ["That", "is", "the", "most", "accurate", "description", "I", "ve", "read", ",", "lately", "."]
# ::lemmas ["that", "be", "the", "most", "accurate", "description", "i", "ve", "read", ",", "lately", "."]
(c6-7 / describe-01
      :ARG0 (c6-4 / that)
      :ARG1-of (c6-2 / have-degree-91
                     :ARG2 (c6-6 / accurate)
                     :ARG3 (c6-0 / most))
      :ARG1-of (c6-1 / read-01
                     :ARG0 (c6-5 / i)
                     :time (c6-3 / lately)))

# ::snt Not as dangerous as Regis.
# ::tokens ["Not", "as", "dangerous", "as", "Regis", "."]
# ::lemmas ["not", "as", "dangerous", "as", "Regis", "."]
(c7-2 / have-degree-91
      :ARG2 (c7-4 / dangerous)
      :ARG3 (c7-1 / equal)
      :ARG4 (c7-3 / person
                  :name (c7-0 / name
                              :op1 "Regis"))
      :polarity -)

# ::snt There was definite flair. So it wasn't so mundane as to not be memorable at least!
# ::tokens ["There", "was", "definite", "flair", ".", "So", "it", "was", "n't", "so", "mundane", "as", "to", "not", "be", "memorable", "at", "least", "!"]
# ::lemmas ["there", "be", "definite", "flair", ".", "so", "it", "be", "not", "so", "mundane", "as", "to", "not", "be", "memorable", "at", "least", "!"]
(c8-1 / multi-sentence
      :snt1 (c8-0 / flair
                  :mod (c8-10 / definite))
      :snt2 (c8-7 / cause-01
                  :ARG1 (c8-4 / have-degree-91
                              :ARG1 (c8-8 / it)
                              :ARG2 (c8-5 / mundane)
                              :ARG3 (c8-2 / so)
                              :ARG6 (c8-6 / possible-01
                                          :ARG1 (c8-3 / remember-01
                                                      :ARG1 c8-8)
                                          :mod (c8-9 / at-least)
                                          :polarity -)
                              :polarity -)))

# ::snt But did he just say hello or did he say it with full Regis flair?
# ::tokens ["But", "did", "he", "just", "say", "hello", "or", "did", "he", "say", "it", "with", "full", "Regis", "flair", "?"]
# ::lemmas ["but", "do", "he", "just", "say", "hello", "or", "do", "he", "say", "it", "with", "full", "Regis", "flair", "?"]
(c9-6 / contrast-01
      :ARG2 (c9-10 / amr-choice
                   :op1 (c9-2 / say-01
                              :ARG0 (c9-4 / he)
                              :ARG1 (c9-7 / hello)
                              :mod (c9-8 / just))
                   :op2 (c9-0 / say-01
                              :ARG0 c9-4
                              :ARG1 (c9-9 / it)
                              :manner (c9-1 / flair
                                            :mod (c9-3 / regis)
                                            :mod (c9-5 / full)))))

# ::snt I was having dinner with some people in Toronto when I realized we were sitting beside Whoopi Goldberg and Ed Begley Jr. By the time i'd had enough wine to attempt a "hi" they were gone.
# ::tokens ["I", "was", "having", "dinner", "with", "some", "people", "in", "Toronto", "when", "I", "realized", "we", "were", "sitting", "beside", "Whoopi", "Goldberg", "and", "Ed", "Begley", "Jr.", "By", "the", "time", "i", "'d", "had", "enough", "wine", "to", "attempt", "a", "\"", "hi", "\"", "they", "were", "gone", "."]
# ::lemmas ["i", "be", "have", "dinner", "with", "some", "people", "in", "Toronto", "when", "i", "realize", "we", "be", "sit", "beside", "Whoopi", "Goldberg", "and", "Ed", "Begley", "Jr.", "by", "the", "time", "i", "would", "have", "enough", "wine", "to", "attempt", "a", "\"", "hi", "\"", "they", "be", "go", "."]
(c10-12 / multi-sentence
        :snt1 (c10-6 / have-06
                     :ARG0 (c10-24 / i)
                     :ARG1 (c10-25 / dinner)
                     :accompanier (c10-20 / person
                                          :quant (c10-0 / some)
                                          :location (c10-15 / city
                                                            :name (c10-17 / name
                                                                          :op1 "Toronto")))
                     :time (c10-18 / realize-01
                                   :ARG0 c10-24
                                   :ARG1 (c10-3 / sit-01
                                                :ARG1 (c10-22 / we)
                                                :ARG2 (c10-11 / beside
                                                              :op1 (c10-9 / and
                                                                          :op1 (c10-13 / person
                                                                                       :name (c10-14 / name
                                                                                                     :op1 "Whoopi"
                                                                                                     :op2 "Goldberg"))
                                                                          :op2 (c10-2 / person
                                                                                      :name (c10-21 / name
                                                                                                    :op1 "Ed"
                                                                                                    :op2 "Begley"
                                                                                                    :op3 "Jr.")))))))
        :snt2 (c10-10 / go-02
                      :ARG0 (c10-8 / they)
                      :time (c10-23 / have-03
                                    :ARG0 (c10-4 / i)
                                    :ARG1 (c10-1 / wine
                                                 :ARG1-of (c10-5 / have-quant-91
                                                                 :ARG3 (c10-19 / enough)
                                                                 :ARG6 (c10-7 / attempt-01
                                                                              :ARG0 c10-4
                                                                              :ARG1 (c10-16 / hi)))))))

# ::snt "Penalty Shot With the Stars"
# ::tokens ["\"", "Penalty", "Shot", "With", "the", "Stars", "\""]
# ::lemmas ["\"", "Penalty", "Shot", "With", "the", "Stars", "\""]
(c11-2 / shoot-01
       :ARG2 (c11-1 / penalty)
       :instrument (c11-0 / star))

# ::snt The modric pk with just enough pace
# ::tokens ["The", "modric", "pk", "with", "just", "enough", "pace"]
# ::lemmas ["the", "modric", "pk", "with", "just", "enough", "pace"]
(c12-5 / car-make
       :name (c12-1 / name
                    :op1 "Pk")
       :mod (c12-0 / modric)
       :ARG0-of (c12-4 / pace-01
                       :ARG1-of (c12-3 / have-quant-91
                                       :ARG3 (c12-2 / enough
                                                    :mod (c12-6 / just)))))

# ::snt That's funny. When it gets to spot kicks I stop watching and check the result later. Lottery. Uninteresting. What happened BEFORE the kicks -- THAT was breathtaking.
# ::tokens ["That", "'s", "funny", ".", "When", "it", "gets", "to", "spot", "kicks", "I", "stop", "watching", "and", "check", "the", "result", "later", ".", "Lottery", ".", "Uninteresting", ".", "What", "happened", "BEFORE", "the", "kicks", "--", "THAT", "was", "breathtaking", "."]
# ::lemmas ["that", "be", "funny", ".", "when", "it", "get", "to", "spot", "kick", "i", "stop", "watch", "and", "check", "the", "result", "later", ".", "lottery", ".", "uninteresting", ".", "what", "happen", "before", "the", "kick", "--", "that", "be", "breathtake", "."]
(c13-12 / multi-sentence
        :snt1 (c13-16 / funny
                      :domain (c13-7 / that))
        :snt2 (c13-9 / and
                     :op1 (c13-0 / stop-01
                                 :ARG0 (c13-20 / i)
                                 :ARG1 (c13-19 / watch-01
                                               :ARG0 c13-20))
                     :op2 (c13-13 / check-01
                                  :ARG0 c13-20
                                  :ARG1 (c13-17 / result-01)
                                  :time (c13-6 / after
                                               :op1 (c13-5 / kick-01)))
                     :time (c13-8 / get-22
                                  :ARG0 (c13-4 / it)
                                  :ARG1 (c13-15 / kick-01
                                                :mod (c13-3 / spot))))
        :snt3 (c13-1 / lottery)
        :snt4 (c13-10 / interest-01
                      :ARG2 (c13-18 / event
                                    :time (c13-11 / before
                                                  :op1 (c13-2 / kick-01)))
                      :polarity -)
        :snt5 (c13-14 / terrify-01
                      :ARG0 (c13-21 / that)))

# ::snt Will you be in goal?
# ::tokens ["Will", "you", "be", "in", "goal", "?"]
# ::lemmas ["will", "you", "be", "in", "goal", "?"]
(c14-0 / goal
       :polarity (c14-2 / amr-unknown)
       :domain (c14-1 / you))

# ::snt Davo already sold it to Hallmark
# ::tokens ["Davo", "already", "sold", "it", "to", "Hallmark"]
# ::lemmas ["Davo", "already", "sell", "it", "to", "Hallmark"]
(c15-1 / sell-01
       :ARG0 (c15-3 / person
                    :name (c15-0 / name
                                 :op1 "Davo"))
       :ARG1 (c15-5 / it)
       :ARG2 (c15-4 / company
                    :name (c15-2 / name
                                 :op1 "Hallmark"))
       :time (c15-6 / already))

# ::snt SUBSCRIBED
# ::tokens ["SUBSCRIBED"]
# ::lemmas ["SUBSCRIBED"]
(c16-0 / SUBSCRIBED-00)

# ::snt "And Sarah Huckabee Sanders approaches the spot ... "
# ::tokens ["\"", "And", "Sarah", "Huckabee", "Sanders", "approaches", "the", "spot", "...", "\""]
# ::lemmas ["\"", "and", "Sarah", "Huckabee", "Sanders", "approach", "the", "spot", "...", "\""]
(c17-4 / and
       :op2 (c17-3 / approach-01
                   :ARG1 (c17-2 / person
                                :name (c17-0 / name
                                             :op1 "Sarah"
                                             :op2 "Huckabee"
                                             :op3 "Sanders"))
                   :ARG2 (c17-1 / spot)))

# ::snt I hope is making calls right now.
# ::tokens ["I", "hope", "is", "making", "calls", "right", "now", "."]
# ::lemmas ["i", "hope", "be", "make", "call", "right", "now", "."]
(c18-2 / hope-01
       :ARG0 (c18-4 / i)
       :ARG1 (c18-3 / call-02
                    :time (c18-0 / now
                                 :mod (c18-1 / right))))

# ::snt Bara boy Rakiti the hero again! Bara! Bara! Bara!
# ::tokens ["Bara", "boy", "Rakiti", "the", "hero", "again", "!", "Bara", "!", "Bara", "!", "Bara", "!"]
# ::lemmas ["Bara", "boy", "Rakiti", "the", "hero", "again", "!", "Bara", "!", "Bara", "!", "Bara", "!"]
(c19-3 / multi-sentence
       :snt1 (c19-5 / person
                    :name (c19-2 / name
                                 :op1 "Rakiti")
                    :mod (c19-1 / boy
                                :mode expressive)
                    :mod (c19-4 / bara)
                    :mod (c19-6 / hero)
                    :mod (c19-9 / again))
       :snt2 (c19-10 / bara
                     :mode expressive)
       :snt3 (c19-0 / bara
                    :mode expressive)
       :snt4 (c19-7 / bara
                    :mode expressive)
       :snt5 (c19-8 / bara
                    :mode expressive))

# ::snt Gotta figure dude who scored the wining penalty against Russia comes down with a bad case of "nerve agent" before the year is out
# ::tokens ["Got", "ta", "figure", "dude", "who", "scored", "the", "wining", "penalty", "against", "Russia", "comes", "down", "with", "a", "bad", "case", "of", "\"", "nerve", "agent", "\"", "before", "the", "year", "is", "out"]
# ::lemmas ["got", "to", "figure", "dude", "who", "score", "the", "wining", "penalty", "against", "Russia", "come", "down", "with", "a", "bad", "case", "of", "\"", "nerve", "agent", "\"", "before", "the", "year", "be", "out"]
(c20-14 / get-06
        :ARG0 (c20-12 / i)
        :ARG1 (c20-0 / figure-01
                     :ARG0 c20-12
                     :ARG1 (c20-9 / come-down-23
                                  :ARG1 (c20-15 / dude
                                                :ARG0-of (c20-5 / score-01
                                                                :ARG1 (c20-7 / penalty
                                                                             :ARG0-of (c20-10 / win-01)
                                                                             :prep-against (c20-16 / country
                                                                                                   :name (c20-4 / name
                                                                                                                :op1 "Russia")))))
                                  :ARG2 (c20-11 / case-04
                                                :ARG1 (c20-13 / agent
                                                              :mod (c20-6 / nerve))
                                                :ARG1-of (c20-2 / bad-07))
                                  :time (c20-8 / before
                                               :op1 (c20-1 / out-01
                                                           :ARG1 (c20-3 / year))))))

# ::snt Jordan Pickford in goal stoning all of them!!!
# ::tokens ["Jordan", "Pickford", "in", "goal", "stoning", "all", "of", "them", "!", "!", "!"]
# ::lemmas ["Jordan", "Pickford", "in", "goal", "stone", "all", "of", "they", "!", "!", "!"]
(c21-2 / sin-01
       :ARG0 (c21-3 / person
                    :name (c21-0 / name
                                 :op1 "Jordan"
                                 :op2 "Pickford"))
       :ARG1 (c21-1 / person
                    :mod (c21-6 / all)
                    :ARG1-of (c21-5 / include-91
                                    :ARG2 (c21-4 / they)))
       :location (c21-7 / goal)
       :mode expressive)

# ::snt First cast: Betty White, Blake Shelton, Lance Bass, Hank Azaria, Caitlyn Jenner, Terry Crews, John Cena, Melissa McCarthy, Neil Patrick Harris, Tom Selleck, Elon Musk, Leslie Jones
# ::tokens ["First", "cast", ":", "Betty", "White", ",", "Blake", "Shelton", ",", "Lance", "Bass", ",", "Hank", "Azaria", ",", "Caitlyn", "Jenner", ",", "Terry", "Crews", ",", "John", "Cena", ",", "Melissa", "McCarthy", ",", "Neil", "Patrick", "Harris", ",", "Tom", "Selleck", ",", "Elon", "Musk", ",", "Leslie", "Jones"]
# ::lemmas ["First", "cast", ":", "Betty", "White", ",", "Blake", "Shelton", ",", "Lance", "Bass", ",", "Hank", "Azaria", ",", "Caitlyn", "Jenner", ",", "Terry", "Crews", ",", "John", "Cena", ",", "Melissa", "McCarthy", ",", "Neil", "Patrick", "Harris", ",", "Tom", "Selleck", ",", "Elon", "Musk", ",", "Leslie", "Jones"]
(c22-14 / cast-01
        :ARG2 (c22-9 / and
                     :op1 (c22-22 / person
                                  :name (c22-20 / name
                                                :op1 "Betty"
                                                :op2 "White"))
                     :op2 (c22-12 / person
                                  :name (c22-13 / name
                                                :op1 "Blake"
                                                :op2 "Shelton"))
                     :op3 (c22-5 / person
                                 :name (c22-23 / name
                                               :op1 "Lance"
                                               :op2 "Bass"))
                     :op4 (c22-3 / person
                                 :name (c22-15 / name
                                               :op1 "Hank"
                                               :op2 "Azaria"))
                     :op5 (c22-8 / person
                                 :name (c22-25 / name
                                               :op1 "Caitlyn"
                                               :op2 "Jenner"))
                     :op6 (c22-26 / person
                                  :name (c22-21 / name
                                                :op1 "Terry"
                                                :op2 "Crews"))
                     :op7 (c22-18 / person
                                  :name (c22-1 / name
                                               :op1 "John"
                                               :op2 "Cena"))
                     :op8 (c22-17 / person
                                  :name (c22-0 / name
                                               :op1 "Melissa"
                                               :op2 "McCarthy"))
                     :op9 (c22-10 / person
                                  :name (c22-2 / name
                                               :op1 "Neil"
                                               :op2 "Patrick"
                                               :op3 "Harris"))
                     :op10 (c22-4 / person
                                  :name (c22-16 / name
                                                :op1 "Tom"
                                                :op2 "Selleck"))
                     :op11 (c22-11 / person
                                   :name (c22-19 / name
                                                 :op1 "Elon"
                                                 :op2 "Musk"))
                     :op12 (c22-7 / person
                                  :name (c22-24 / name
                                                :op1 "Leslie"
                                                :op2 "Jones")))
        :ord (c22-6 / ordinal-entity
                    :value 1))

# ::snt You mean ?
# ::tokens ["You", "mean", "?"]
# ::lemmas ["you", "mean", "?"]
(c23-1 / mean-01
       :polarity (c23-2 / amr-unknown)
       :ARG0 (c23-0 / you))

# ::snt And socced the winning penalty
# ::tokens ["And", "socced", "the", "winning", "penalty"]
# ::lemmas ["and", "socce", "the", "win", "penalty"]
(c24-3 / and
       :op2 (c24-0 / contest-02
                   :ARG1 (c24-1 / penalty
                                :ARG0-of (c24-2 / win-01))))

# ::snt VAR cost Russia the world cup!
# ::tokens ["VAR", "cost", "Russia", "the", "world", "cup", "!"]
# ::lemmas ["VAR", "cost", "Russia", "the", "world", "cup", "!"]
(c25-3 / cost-01
       :ARG1 (c25-6 / country
                    :name (c25-0 / name
                                 :op1 "VAR"))
       :ARG2 (c25-5 / game
                    :name (c25-1 / name
                                 :op1 "World"
                                 :op2 "Cup"))
       :ARG3 (c25-4 / country
                    :name (c25-2 / name
                                 :op1 "Russia")))

# ::snt See also Ms Ross from the opening ... event
# ::tokens ["See", "also", "Ms", "Ross", "from", "the", "opening", "...", "event"]
# ::lemmas ["see", "also", "Ms", "Ross", "from", "the", "opening", "...", "event"]
(c26-3 / see-01
       :ARG0 (c26-1 / you)
       :ARG1 (c26-5 / person
                    :name (c26-2 / name
                                 :op1 "Ms"
                                 :op2 "Ross"))
       :mod (c26-6 / also)
       :time (c26-4 / event
                    :ARG0-of (c26-0 / open-02))
       :mode imperative)

# ::snt Family Feud but with PKs
# ::tokens ["Family", "Feud", "but", "with", "PKs"]
# ::lemmas ["Family", "Feud", "but", "with", "pk"]
(c27-5 / contrast-01
       :ARG1 (c27-0 / Feud
                    :mod (c27-3 / family))
       :ARG2 (c27-4 / Feud
                    :mod (c27-2 / person
                                :name (c27-1 / name
                                             :op1 "PK"))))

# ::snt Would watch
# ::tokens ["Would", "watch"]
# ::lemmas ["would", "watch"]
(c28-0 / watch-01)

# ::snt Still a shitty way to end matches .. it will be a Belgium Croatia Final ..Book it .
# ::tokens ["Still", "a", "shitty", "way", "to", "end", "matches", "..", "it", "will", "be", "a", "Belgium", "Croatia", "Final", "..", "Book", "it", "."]
# ::lemmas ["still", "a", "shitty", "way", "to", "end", "match", "..", "it", "will", "be", "a", "Belgium", "Croatia", "Final", "..", "book", "it", "."]
(c29-4 / multi-sentence
       :snt1 (c29-10 / way
                     :manner-of (c29-7 / end-01
                                       :ARG1 (c29-8 / match-03))
                     :mod (c29-6 / shitty)
                     :mod (c29-0 / still))
       :snt2 (c29-1 / final
                    :domain (c29-12 / it)
                    :mod (c29-11 / country
                                 :name (c29-5 / name
                                              :op1 "Belgium"))
                    :mod (c29-13 / country
                                 :name (c29-9 / name
                                              :op1 "Croatia")))
       :snt3 (c29-2 / book-03
                    :ARG0 (c29-3 / you)
                    :ARG1 c29-12
                    :mode imperative))

# ::snt And that TV executive is
# ::tokens ["And", "that", "TV", "executive", "is"]
# ::lemmas ["and", "that", "tv", "executive", "be"]
(c30-3 / and
       :op2 (c30-0 / executive
                   :mod (c30-1 / television)
                   :mod (c30-2 / that)))

# ::snt The Russians are out. The world makes a little more sense again.
# ::tokens ["The", "Russians", "are", "out", ".", "The", "world", "makes", "a", "little", "more", "sense", "again", "."]
# ::lemmas ["the", "Russians", "be", "out", ".", "the", "world", "make", "a", "little", "more", "sense", "again", "."]
(c31-2 / multi-sentence
       :snt1 (c31-0 / out-06
                    :ARG1 (c31-5 / person
                                 :mod (c31-8 / country
                                             :name (c31-1 / name
                                                          :op1 "Russia"))))
       :snt2 (c31-3 / sense-02
                    :ARG1 (c31-9 / world)
                    :mod (c31-10 / again)
                    :ARG2-of (c31-4 / have-degree-91
                                    :ARG1 c31-9
                                    :ARG3 (c31-6 / more
                                                 :quant (c31-7 / little)))))

# ::snt Hell no! That'd set the sport back another years.
# ::tokens ["Hell", "no", "!", "That", "'d", "set", "the", "sport", "back", "another", "years", "."]
# ::lemmas ["hell", "no", "!", "that", "would", "set", "the", "sport", "back", "another", "years", "."]
(c32-4 / multi-sentence
       :snt1 (c32-3 / no
                    :mod (c32-7 / hell)
                    :mode expressive)
       :snt2 (c32-5 / set-01
                    :ARG0 (c32-8 / that)
                    :ARG1 (c32-0 / sport)
                    :ARG2 (c32-2 / year
                                 :mod (c32-6 / another))
                    :direction (c32-1 / back)))

# ::snt Diana Ross HAS to be the first Kick
# ::tokens ["Diana", "Ross", "HAS", "to", "be", "the", "first", "Kick"]
# ::lemmas ["Diana", "Ross", "have", "to", "be", "the", "first", "Kick"]
(c33-1 / obligate-01
       :ARG2 (c33-3 / kick-01
                    :ord (c33-0 / ordinal-entity
                                :value 1)
                    :domain (c33-4 / person
                                   :name (c33-2 / name
                                                :op1 "Diana"
                                                :op2 "Ross"))))

# ::snt Only if the final round is a showdown with Regis, and it's always rigged for him to win.
# ::tokens ["Only", "if", "the", "final", "round", "is", "a", "showdown", "with", "Regis", ",", "and", "it", "'s", "always", "rigged", "for", "him", "to", "win", "."]
# ::lemmas ["only", "if", "the", "final", "round", "be", "a", "showdown", "with", "Regis", ",", "and", "it", "be", "always", "rig", "for", "he", "to", "win", "."]
(c34-5 / have-condition-91
       :ARG2 (c34-9 / and
                    :op1 (c34-3 / showdown-00
                                :ARG1 (c34-6 / person
                                             :name (c34-2 / name
                                                          :op1 "Regis"))
                                :time (c34-4 / round
                                             :mod (c34-0 / final)))
                    :op2 (c34-10 / rig-01
                                 :ARG1 c34-3
                                 :purpose (c34-7 / win-01
                                                 :ARG0 c34-6)
                                 :time (c34-8 / always)))
       :mod (c34-1 / only))

# ::snt Davo?
# ::tokens ["Davo", "?"]
# ::lemmas ["Davo", "?"]
(c35-0 / davo
       :polarity (c35-1 / amr-unknown))

# ::snt Oh I am so watching this!
# ::tokens ["Oh", "I", "am", "so", "watching", "this", "!"]
# ::lemmas ["oh", "i", "be", "so", "watch", "this", "!"]
(c36-2 / watch-01
       :ARG0 (c36-3 / i)
       :ARG1 (c36-4 / this)
       :degree (c36-1 / so)
       :mod (c36-0 / oh
                   :mode expressive))

# ::snt I think he's dead?
# ::tokens ["I", "think", "he", "'s", "dead", "?"]
# ::lemmas ["i", "think", "he", "be", "dead", "?"]
(c37-1 / think-01
       :polarity (c37-3 / amr-unknown)
       :ARG0 (c37-2 / i)
       :ARG1 (c37-4 / die-01
                    :ARG1 (c37-0 / he)))

# ::snt Do you know any Hollywood TV Executive that has ever teamed up with Regis?
# ::tokens ["Do", "you", "know", "any", "Hollywood", "TV", "Executive", "that", "has", "ever", "teamed", "up", "with", "Regis", "?"]
# ::lemmas ["do", "you", "know", "any", "Hollywood", "TV", "Executive", "that", "have", "ever", "team", "up", "with", "Regis", "?"]
(c38-8 / know-01
       :ARG0 (c38-0 / you)
       :ARG1 (c38-7 / person
                    :ARG0-of (c38-6 / have-org-role-91
                                    :ARG1 (c38-12 / television
                                                  :mod (c38-1 / market-sector
                                                              :name (c38-2 / name
                                                                           :op1 "Hollywood")))
                                    :ARG2 (c38-5 / executive))
                    :ARG0-of (c38-3 / partner-01
                                    :ARG1 (c38-10 / company
                                                  :name (c38-9 / name
                                                               :op1 "Regis"))
                                    :time (c38-13 / ever))
                    :mod (c38-4 / any))
       :polarity (c38-11 / amr-unknown))

# ::snt +=
# ::tokens ["+", "="]
# ::lemmas ["+", "="]
(c39-0 / +=)

# ::snt Also Cole Porter in---er--- "You're the Top."
# ::tokens ["Also", "Cole", "Porter", "in", "---", "er---", "\"", "You", "'re", "the", "Top", ".", "\""]
# ::lemmas ["also", "Cole", "Porter", "in", "---", "er---", "\"", "you", "be", "the", "top", ".", "\""]
(c40-2 / person
       :name (c40-1 / name
                    :op1 "Cole"
                    :op2 "Porter")
       :location (c40-3 / top
                        :domain (c40-0 / you))
       :mod (c40-4 / also))

# ::snt If you're like me, it's because your parents referenced him endlessly during your childhood and it just stuck with you
# ::tokens ["If", "you", "'re", "like", "me", ",", "it", "'s", "because", "your", "parents", "referenced", "him", "endlessly", "during", "your", "childhood", "and", "it", "just", "stuck", "with", "you"]
# ::lemmas ["if", "you", "be", "like", "i", ",", "it", "be", "because", "your", "parent", "reference", "he", "endlessly", "during", "your", "childhood", "and", "it", "just", "stick", "with", "you"]
(c41-7 / cause-01
       :ARG0 (c41-11 / and
                     :op1 (c41-3 / reference-04
                                 :ARG0 (c41-6 / person
                                              :ARG0-of (c41-5 / have-rel-role-91
                                                              :ARG1 (c41-0 / you)
                                                              :ARG2 (c41-1 / parent)))
                                 :ARG1 (c41-8 / he)
                                 :duration (c41-4 / end-01
                                                  :polarity -)
                                 :time (c41-13 / childhood
                                               :poss c41-0))
                     :op2 (c41-2 / stick-01
                                 :ARG1 c41-3
                                 :ARG2 c41-0
                                 :mod (c41-9 / just)))
       :ARG1 (c41-12 / resemble-01
                     :ARG1 c41-0
                     :ARG2 (c41-10 / i)))

# ::snt The Frosty the Snowman cartoon!
# ::tokens ["The", "Frosty", "the", "Snowman", "cartoon", "!"]
# ::lemmas ["the", "Frosty", "the", "Snowman", "cartoon", "!"]
(c42-0 / cartoon
       :name (c42-1 / name
                    :op1 "The"
                    :op2 "Frosty"
                    :op3 "the"
                    :op4 "Snowman"))

# ::snt Oldest Warner Bros. referenced him a fuckton too. Like, *so damn often*.
# ::tokens ["Oldest", "Warner", "Bros.", "referenced", "him", "a", "fuckton", "too", ".", "Like", ",", "*", "so", "damn", "often", "*", "."]
# ::lemmas ["Oldest", "Warner", "Bros.", "reference", "he", "a", "fuckton", "too", ".", "like", ",", "*", "so", "damn", "often", "*", "."]
(c43-4 / multi-sentence
       :snt1 (c43-6 / reference-04
                    :ARG0 (c43-9 / company
                                 :name (c43-3 / name
                                              :op1 "Warner"
                                              :op2 "Bros.")
                                 :ARG1-of (c43-7 / have-degree-91
                                                 :ARG2 (c43-0 / old)
                                                 :ARG3 (c43-8 / most)))
                    :ARG1 (c43-10 / he)
                    :mod (c43-1 / fuckton)
                    :mod (c43-11 / too))
       :snt2 (c43-13 / resemble-01
                     :ARG2 (c43-2 / often
                                  :degree (c43-5 / so)
                                  :mod (c43-12 / damn))))

# ::snt maybe it's all the old popeye reruns? I recall a LOT of jimmy durante references in old popeye cartoons
# ::tokens ["maybe", "it", "'s", "all", "the", "old", "popeye", "reruns", "?", "I", "recall", "a", "LOT", "of", "jimmy", "durante", "references", "in", "old", "popeye", "cartoons"]
# ::lemmas ["maybe", "it", "be", "all", "the", "old", "popeye", "rerun", "?", "i", "recall", "a", "LOT", "of", "jimmy", "durante", "reference", "in", "old", "popeye", "cartoon"]
(c44-2 / multi-sentence
       :snt1 (c44-6 / possible-01
                    :ARG1 (c44-5 / rerun-01
                                 :ARG1 (c44-3 / popeye)
                                 :mod (c44-13 / all)
                                 :mod (c44-0 / old))
                    :polarity (c44-12 / amr-unknown))
       :snt2 (c44-15 / recall-02
                     :ARG0 (c44-14 / i)
                     :ARG1 (c44-8 / reference-04
                                  :ARG1 (c44-16 / product
                                                :name (c44-4 / name
                                                             :op1 "Jimmy"
                                                             :op2 "Durante"))
                                  :quant (c44-7 / lot)
                                  :location (c44-9 / cartoon
                                                   :mod (c44-1 / old)
                                                   :mod (c44-10 / popeye))))
       :polarity (c44-11 / amr-unknown))

# ::snt ha cha cha
# ::tokens ["ha", "cha", "cha"]
# ::lemmas ["ha", "cha", "cha"]
(c45-0 / cha
       :mode expressive)

# ::snt "colin jimmy durante died over a decade before you were born, why do you make multiple jokes about him" wish i knew
# ::tokens ["\"", "colin", "jimmy", "durante", "died", "over", "a", "decade", "before", "you", "were", "born", ",", "why", "do", "you", "make", "multiple", "jokes", "about", "him", "\"", "wish", "i", "knew"]
# ::lemmas ["\"", "colin", "jimmy", "durante", "die", "over", "a", "decade", "before", "you", "be", "bear", ",", "why", "do", "you", "make", "multiple", "joke", "about", "he", "\"", "wish", "i", "know"]
(c46-8 / wish-01
       :ARG0 (c46-12 / i)
       :ARG1 (c46-6 / know-01
                    :ARG0 c46-12
                    :ARG1 (c46-13 / and
                                  :op1 (c46-15 / die-01
                                               :ARG1 (c46-7 / person
                                                            :name (c46-3 / name
                                                                         :op1 "Colin"
                                                                         :op2 "Jimmy"
                                                                         :op3 "Durante"))
                                               :time (c46-1 / before
                                                            :op1 (c46-5 / bear-02
                                                                        :ARG1 c46-12)
                                                            :quant (c46-0 / over
                                                                          :op1 (c46-11 / temporal-quantity
                                                                                       :unit (c46-9 / decade)
                                                                                       :quant 1))))
                                  :op2 (c46-10 / cause-01
                                               :ARG0 (c46-14 / amr-unknown)
                                               :ARG1 (c46-16 / joke-01
                                                             :ARG0 (c46-2 / you)
                                                             :ARG2 c46-7
                                                             :quant (c46-4 / multiple))))))

# ::snt In my living room watching it. *dab*
# ::tokens ["In", "my", "living", "room", "watching", "it", ".", "*", "dab", "*"]
# ::lemmas ["in", "my", "living", "room", "watch", "it", ".", "*", "dab", "*"]
(c47-3 / watch-01
       :ARG0 (c47-4 / i)
       :ARG1 (c47-0 / it)
       :location (c47-1 / room
                        :mod (c47-2 / living)
                        :poss c47-4)
       :mod (c47-5 / dab))

# ::snt Didnt family feud have both wwf and wcw?
# ::tokens ["Did", "nt", "family", "feud", "have", "both", "wwf", "and", "wcw", "?"]
# ::lemmas ["do", "nt", "family", "feud", "have", "both", "wwf", "and", "wcw", "?"]
(c48-0 / feud-01
       :ARG0 (c48-3 / family)
       :ARG1 (c48-2 / person
                    :name (c48-1 / name
                                 :op1 "wwf"))
       :polarity (c48-4 / amr-unknown)
       :polarity -)

# ::snt I still can't believe he didn't know that question immediately.
# ::tokens ["I", "still", "ca", "n't", "believe", "he", "did", "n't", "know", "that", "question", "immediately", "."]
# ::lemmas ["i", "still", "can", "not", "believe", "he", "do", "not", "know", "that", "question", "immediately", "."]
(c49-4 / possible-01
       :ARG1 (c49-0 / believe-01
                    :ARG0 (c49-6 / i)
                    :ARG1 (c49-5 / know-01
                                 :ARG0 (c49-3 / he)
                                 :ARG1 (c49-7 / thing
                                              :ARG1-of (c49-8 / question-01)
                                              :mod (c49-9 / that))
                                 :time (c49-2 / immediate)
                                 :polarity -))
       :mod (c49-1 / still)
       :polarity -)

# ::snt RobesPierre
# ::tokens ["RobesPierre"]
# ::lemmas ["RobesPierre"]
(c50-1 / person
       :name (c50-0 / name
                    :op1 "RobesPierre"))
