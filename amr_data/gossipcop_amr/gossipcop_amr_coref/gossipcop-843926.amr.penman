# ::snt You could add this
# ::tokens ["You", "could", "add", "this"]
# ::lemmas ["you", "could", "add", "this"]
(c1-2 / possible-01
      :ARG1 (c1-3 / add-01
                  :ARG0 (c1-1 / you)
                  :ARG1 (c1-0 / this)))

# ::snt . Your foreign wife &amp; boy knew to put their hands over their hearts for the National Anthem &amp; you didn't?
# ::tokens [".", "Your", "foreign", "wife", "&", "amp", ";", "boy", "knew", "to", "put", "their", "hands", "over", "their", "hearts", "for", "the", "National", "Anthem", "&", "amp", ";", "you", "did", "n't", "?"]
# ::lemmas [".", "your", "foreign", "wife", "&", "amp", ";", "boy", "know", "to", "put", "their", "hand", "over", "their", "heart", "for", "the", "National", "Anthem", "&", "amp", ";", "you", "do", "not", "?"]
(c2-8 / and
      :op1 (c2-7 / and
                 :op1 (c2-15 / person
                             :ARG0-of (c2-4 / have-rel-role-91
                                            :ARG1 (c2-2 / you)
                                            :ARG2 (c2-16 / wife
                                                         :mod (c2-12 / foreign))))
                 :op2 (c2-10 / person
                             :name (c2-13 / name
                                          :op1 "amp")))
      :op2 (c2-5 / know-01
                 :ARG0 (c2-9 / boy)
                 :ARG1 (c2-0 / put-01
                             :ARG0 c2-9
                             :ARG1 (c2-17 / hand
                                          :part-of c2-9)
                             :ARG2 (c2-1 / over
                                         :op1 (c2-3 / heart))
                             :purpose (c2-6 / anthem
                                            :mod (c2-11 / nation))))
      :op3 (c2-14 / do-02
                  :ARG0 c2-2
                  :ARG1 c2-0
                  :polarity (c2-18 / amr-unknown)
                  :polarity -))

# ::snt Hes such an idiot.
# ::tokens ["He", "s", "such", "an", "idiot", "."]
# ::lemmas ["he", "s", "such", "an", "idiot", "."]
(c3-1 / idiot
      :degree (c3-2 / such)
      :domain (c3-0 / he))

# ::snt Past President Obama notoriously neglected to put his hand over his heart
# ::tokens ["Past", "President", "Obama", "notoriously", "neglected", "to", "put", "his", "hand", "over", "his", "heart"]
# ::lemmas ["past", "President", "Obama", "notoriously", "neglect", "to", "put", "his", "hand", "over", "his", "heart"]
(c4-1 / neglect-01
      :ARG0 (c4-4 / person
                  :name (c4-3 / name
                              :op1 "Obama")
                  :part (c4-5 / heart)
                  :part (c4-7 / hand))
      :ARG1 (c4-2 / put-01
                  :ARG0 c4-4
                  :ARG1 c4-7
                  :ARG2 (c4-0 / over
                              :op1 c4-5))
      :ARG1-of (c4-6 / notorious-01)
      :time (c4-8 / past))

# ::snt so glad that freak is Gone
# ::tokens ["so", "glad", "that", "freak", "is", "Gone"]
# ::lemmas ["so", "glad", "that", "freak", "be", "go"]
(c5-4 / glad-02
      :ARG0 (c5-2 / go-02
                  :ARG0 (c5-0 / freak
                              :mod (c5-3 / that)))
      :degree (c5-1 / so))

# ::snt that's adorable
# ::tokens ["that", "'s", "adorable"]
# ::lemmas ["that", "be", "adorable"]
(c6-0 / cute
      :domain (c6-1 / that))

# ::snt I bet she will get a beating for that later... What a muppet
# ::tokens ["I", "bet", "she", "will", "get", "a", "beating", "for", "that", "later", "...", "What", "a", "muppet"]
# ::lemmas ["i", "bet", "she", "will", "get", "a", "beating", "for", "that", "later", "...", "what", "a", "muppet"]
(c7-2 / multi-sentence
      :snt1 (c7-1 / bet-01
                  :ARG0 (c7-7 / i)
                  :ARG2 (c7-5 / beat-01
                              :ARG1 (c7-3 / she)
                              :ARG2 (c7-8 / that)
                              :time (c7-4 / after)))
      :snt2 (c7-6 / muppet
                  :degree (c7-0 / so)))

# ::snt he's warming up for another heil
# ::tokens ["he", "'s", "warming", "up", "for", "another", "heil"]
# ::lemmas ["he", "be", "warm", "up", "for", "another", "heil"]
(c8-0 / warm-up-02
      :ARG1 (c8-1 / heil
                  :mod (c8-2 / another)))

# ::snt Had it been the Russian anthem, well...
# ::tokens ["Had", "it", "been", "the", "Russian", "anthem", ",", "well", "..."]
# ::lemmas ["have", "it", "be", "the", "Russian", "anthem", ",", "well", "..."]
(c9-1 / have-condition-91
      :ARG1 (c9-4 / anthem
                  :mod (c9-2 / country
                             :name (c9-0 / name
                                         :op1 "Russia"))
                  :domain (c9-3 / it)
                  :ARG2-of c9-1))

# ::snt Fake News
# ::tokens ["Fake", "News"]
# ::lemmas ["Fake", "news"]
(c10-1 / news
       :ARG1-of (c10-0 / fake-02))

# ::snt Good point
# ::tokens ["Good", "point"]
# ::lemmas ["good", "point"]
(c12-1 / point-04
       :ARG1-of (c12-0 / good-02))

# ::snt Please don't insult the muppets Sir.
# ::tokens ["Please", "do", "n't", "insult", "the", "muppets", "Sir", "."]
# ::lemmas ["please", "do", "not", "insult", "the", "muppet", "Sir", "."]
(c13-3 / say-01
       :ARG0 (c13-5 / i)
       :ARG1 (c13-4 / insult-01
                    :ARG0 (c13-1 / you)
                    :ARG1 (c13-2 / muppet)
                    :polarity -
                    :mode imperative)
       :ARG2 (c13-0 / sir)
       :polite +)

# ::snt hahaha HAAAhahaha
# ::tokens ["hahaha", "HAAAhahaha"]
# ::lemmas ["hahaha", "HAAAhahaha"]
(c14-0 / haha
       :mode expressive)

# ::snt or he is a Muppet!
# ::tokens ["or", "he", "is", "a", "Muppet", "!"]
# ::lemmas ["or", "he", "be", "a", "Muppet", "!"]
(c15-1 / or
       :op2 (c15-2 / have-mod-91
                   :ARG1 (c15-0 / he)
                   :ARG2 (c15-3 / muppet)))

# ::snt Blame it on amnesia!
# ::tokens ["Blame", "it", "on", "amnesia", "!"]
# ::lemmas ["blame", "it", "on", "amnesia", "!"]
(c16-0 / blame-01
       :ARG0 (c16-1 / you)
       :ARG1 (c16-3 / it)
       :ARG2 (c16-2 / nesia)
       :mode imperative)

# ::snt I'm sure he gave her a good dressing down for her presumption, afterwards.
# ::tokens ["I", "'m", "sure", "he", "gave", "her", "a", "good", "dressing", "down", "for", "her", "presumption", ",", "afterwards", "."]
# ::lemmas ["i", "be", "sure", "he", "give", "she", "a", "good", "dressing", "down", "for", "her", "presumption", ",", "afterwards", "."]
(c17-1 / sure-02
       :ARG0 (c17-6 / i)
       :ARG1 (c17-8 / give-01
                    :ARG0 (c17-3 / he)
                    :ARG1 (c17-9 / dressing-down-02
                                 :ARG1 (c17-0 / she)
                                 :ARG1-of (c17-7 / good-02))
                    :ARG2 c17-0
                    :ARG1-of (c17-5 / cause-01
                                    :ARG0 (c17-4 / presume-01
                                                 :ARG0 c17-0))
                    :time (c17-2 / afterwards)))

# ::snt He thinks he's the queen and the anthem is in praise of him.
# ::tokens ["He", "thinks", "he", "'s", "the", "queen", "and", "the", "anthem", "is", "in", "praise", "of", "him", "."]
# ::lemmas ["he", "think", "he", "be", "the", "queen", "and", "the", "anthem", "be", "in", "praise", "of", "he", "."]
(c18-0 / and
       :op1 (c18-4 / think-01
                   :ARG0 (c18-1 / he)
                   :ARG1 (c18-3 / queen
                                :domain c18-1))
       :op2 (c18-2 / praise-01
                   :ARG0 (c18-5 / anthem)
                   :ARG1 c18-1))

# ::snt so, it turns out she's benign, not a malignant Melania after all.
# ::tokens ["so", ",", "it", "turns", "out", "she", "'s", "benign", ",", "not", "a", "malignant", "Melania", "after", "all", "."]
# ::lemmas ["so", ",", "it", "turn", "out", "she", "be", "benign", ",", "not", "a", "malignant", "Melania", "after", "all", "."]
(c19-7 / turn-out-11
       :ARG1 (c19-6 / contrast-01
                    :ARG1 (c19-0 / benign
                                 :domain (c19-3 / she))
                    :ARG2 (c19-1 / malignant
                                 :domain (c19-5 / person
                                                :name (c19-2 / name
                                                             :op1 "Melania"))
                                 :mod (c19-4 / after-all)
                                 :polarity -)))

# ::snt What a plonker, It could only happen in America. Or a Tory in Wales.
# ::tokens ["What", "a", "plonker", ",", "It", "could", "only", "happen", "in", "America", ".", "Or", "a", "Tory", "in", "Wales", "."]
# ::lemmas ["what", "a", "plonker", ",", "it", "could", "only", "happen", "in", "America", ".", "or", "a", "Tory", "in", "Wales", "."]
(c20-3 / multi-sentence
       :snt1 (c20-7 / person
                    :name (c20-2 / name
                                 :op1 "Plonker")
                    :degree (c20-5 / so))
       :snt2 (c20-4 / possible-01
                    :ARG1 (c20-11 / it)
                    :mod (c20-0 / only)
                    :location (c20-9 / country
                                     :name (c20-6 / name
                                                  :op1 "America")))
       :snt3 (c20-1 / or
                    :op1 (c20-12 / political-party
                                 :name (c20-8 / name
                                              :op1 "Tory")
                                 :location (c20-13 / country
                                                   :name (c20-10 / name
                                                                 :op1 "Wales")))))

# ::snt Oh dear Kev, did you remember to fart today ?
# ::tokens ["Oh", "dear", "Kev", ",", "did", "you", "remember", "to", "fart", "today", "?"]
# ::lemmas ["oh", "dear", "Kev", ",", "do", "you", "remember", "to", "fart", "today", "?"]
(c21-2 / say-01
       :ARG0 (c21-6 / i)
       :ARG1 (c21-3 / remember-01
                    :ARG0 (c21-5 / person
                                 :name (c21-1 / name
                                              :op1 "Kev"))
                    :ARG1 (c21-0 / fart-01
                                 :ARG0 c21-5
                                 :time (c21-7 / today))
                    :polarity (c21-4 / amr-unknown)
                    :mod (c21-8 / dear))
       :ARG2 c21-5)

# ::snt Probably taking a or just being usual senile self
# ::tokens ["Probably", "taking", "a", "or", "just", "being", "usual", "senile", "self"]
# ::lemmas ["probably", "take", "a", "or", "just", "be", "usual", "senile", "self"]
(c22-2 / probable
       :domain (c22-0 / or
                      :op1 (c22-3 / take-01
                                  :ARG0 (c22-4 / i)
                                  :ARG1 (c22-5 / thing))
                      :op2 (c22-1 / senile
                                  :domain c22-4
                                  :mod (c22-7 / usual)
                                  :mod (c22-6 / just))))

# ::snt Priceless! POS! He was so busy with his ego up in the air he forgot what country he serves!!
# ::tokens ["Priceless", "!", "POS", "!", "He", "was", "so", "busy", "with", "his", "ego", "up", "in", "the", "air", "he", "forgot", "what", "country", "he", "serves", "!", "!"]
# ::lemmas ["priceless", "!", "POS", "!", "he", "be", "so", "busy", "with", "his", "ego", "up", "in", "the", "air", "he", "forget", "what", "country", "he", "serve", "!", "!"]
(c23-3 / multi-sentence
       :snt1 (c23-9 / priceless
                    :mode expressive)
       :snt2 (c23-4 / person
                    :ARG1-of (c23-13 / position-01
                                     :polarity -)
                    :domain (c23-8 / he))
       :snt3 (c23-12 / have-degree-91
                     :ARG1 (c23-7 / he)
                     :ARG2 (c23-2 / busy-01
                                  :ARG1 c23-7
                                  :ARG2 (c23-14 / up-03
                                                :ARG1 (c23-10 / ego
                                                              :poss c23-7)
                                                :ARG2 (c23-6 / air)))
                     :ARG3 (c23-5 / so)
                     :ARG6 (c23-0 / forget-01
                                  :ARG0 c23-7
                                  :ARG1 (c23-11 / country
                                                :ARG1-of (c23-1 / serve-01
                                                                :ARG0 c23-7)))))

# ::snt Someone should nudge all of them to inform them that they are over dressed for an children event.
# ::tokens ["Someone", "should", "nudge", "all", "of", "them", "to", "inform", "them", "that", "they", "are", "over", "dressed", "for", "an", "children", "event", "."]
# ::lemmas ["someone", "should", "nudge", "all", "of", "they", "to", "inform", "they", "that", "they", "be", "over", "dressed", "for", "an", "child", "event", "."]
(c24-3 / recommend-01
       :ARG1 (c24-1 / nudge-01
                    :ARG0 (c24-2 / someone)
                    :ARG1 (c24-6 / they
                                 :mod (c24-8 / all))
                    :purpose (c24-7 / inform-01
                                    :ARG0 c24-2
                                    :ARG1 c24-6
                                    :ARG2 (c24-9 / dress-01
                                                 :ARG1 c24-6
                                                 :ARG2 (c24-4 / event
                                                              :mod (c24-5 / child))
                                                 :mod (c24-0 / over))))
       :ARG2 c24-2)

# ::snt She also has to remind him to zip up his fly all the time.
# ::tokens ["She", "also", "has", "to", "remind", "him", "to", "zip", "up", "his", "fly", "all", "the", "time", "."]
# ::lemmas ["she", "also", "have", "to", "remind", "he", "to", "zip", "up", "his", "you", "all", "the", "time", "."]
(c25-0 / obligate-01
       :ARG1 (c25-2 / she)
       :ARG2 (c25-3 / remind-01
                    :ARG0 c25-2
                    :ARG1 (c25-4 / zip-04
                                 :ARG0 (c25-6 / he)
                                 :ARG1 (c25-1 / fly
                                              :poss c25-6)
                                 :direction (c25-9 / up)
                                 :time (c25-8 / time
                                              :mod (c25-5 / all)))
                    :ARG2 c25-6)
       :mod (c25-7 / also))

# ::snt Sieg Heil was a little off-putting by the Prez of the United States.
# ::tokens ["Sieg", "Heil", "was", "a", "little", "off", "-", "putting", "by", "the", "Prez", "of", "the", "United", "States", "."]
# ::lemmas ["Sieg", "Heil", "be", "a", "little", "off", "-", "putting", "by", "the", "Prez", "of", "the", "United", "States", "."]
(c26-0 / offput-00
       :ARG0 (c26-4 / person
                    :ARG0-of (c26-3 / have-org-role-91
                                    :ARG1 (c26-7 / country
                                                 :name (c26-1 / name
                                                              :op1 "United"
                                                              :op2 "States"))
                                    :ARG2 (c26-2 / president))
                    :ARG1-of c26-0)
       :name (c26-5 / name
                    :op1 "Sieg"
                    :op2 "Heil")
       :degree (c26-6 / little))

# ::snt Sickening
# ::tokens ["Sickening"]
# ::lemmas ["sicken"]
(c27-1 / thing
       :ARG0-of (c27-0 / sick-05))

# ::snt (He'd do most anything to get her to touch him, especially for the cameras)
# ::tokens ["(", "He", "'d", "do", "most", "anything", "to", "get", "her", "to", "touch", "him", ",", "especially", "for", "the", "cameras", ")"]
# ::lemmas ["(", "he", "would", "do", "most", "anything", "to", "get", "she", "to", "touch", "he", ",", "especially", "for", "the", "camera", ")"]
(c28-8 / do-02
       :ARG0 (c28-3 / he)
       :ARG1 (c28-6 / anything
                    :mod (c28-0 / most))
       :purpose (c28-7 / get-04
                       :ARG0 c28-3
                       :ARG1 (c28-5 / touch-01
                                    :ARG0 (c28-1 / she)
                                    :ARG1 c28-3))
       :beneficiary (c28-4 / camera
                           :mod (c28-2 / especially)))

# ::snt So what happened here?
# ::tokens ["So", "what", "happened", "here", "?"]
# ::lemmas ["so", "what", "happen", "here", "?"]
(c30-2 / infer-01
       :ARG1 (c30-0 / event
                    :mod (c30-3 / amr-unknown)
                    :location (c30-1 / here)))

# ::snt I recommend more fiber in your diet
# ::tokens ["I", "recommend", "more", "fiber", "in", "your", "diet"]
# ::lemmas ["i", "recommend", "more", "fiber", "in", "your", "diet"]
(c31-4 / recommend-01
       :ARG0 (c31-5 / i)
       :ARG1 (c31-3 / include-91
                    :ARG1 (c31-0 / fiber
                                 :quant (c31-2 / more))
                    :ARG2 (c31-6 / diet
                                 :poss (c31-1 / you))))

# ::snt He's mind wasn't there maybe. Thinking of how many tomahawks will level North Korea maybe
# ::tokens ["He", "'s", "mind", "was", "n't", "there", "maybe", ".", "Thinking", "of", "how", "many", "tomahawks", "will", "level", "North", "Korea", "maybe"]
# ::lemmas ["he", "'s", "mind", "be", "not", "there", "maybe", ".", "think", "of", "how", "many", "tomahawk", "will", "level", "North", "Korea", "maybe"]
(c32-0 / multi-sentence
       :snt1 (c32-4 / mind-05
                    :ARG0 (c32-6 / he)
                    :location (c32-10 / there
                                      :ARG1-of (c32-5 / possible-01))
                    :polarity -)
       :snt2 (c32-11 / think-01
                     :ARG1 (c32-7 / level-01
                                  :ARG0 (c32-9 / tomahawk
                                               :quant (c32-3 / amr-unknown))
                                  :ARG1 (c32-8 / country
                                               :name (c32-1 / name
                                                            :op1 "North"
                                                            :op2 "Korea"))
                                  :ARG1-of (c32-2 / possible-01))))

# ::snt She's not even American by birth.
# ::tokens ["She", "'s", "not", "even", "American", "by", "birth", "."]
# ::lemmas ["she", "be", "not", "even", "American", "by", "birth", "."]
(c33-4 / person
       :mod (c33-5 / country
                   :name (c33-1 / name
                                :op1 "America"))
       :mod (c33-3 / even)
       :domain (c33-2 / she)
       :time (c33-0 / bear-02
                    :ARG1 c33-2)
       :polarity -)
