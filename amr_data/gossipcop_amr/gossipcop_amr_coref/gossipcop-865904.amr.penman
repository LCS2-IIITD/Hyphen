# ::snt Oh mother muva and brother brotha.
# ::tokens ["Oh", "mother", "muva", "and", "brother", "brotha", "."]
# ::lemmas ["oh", "mother", "muva", "and", "brother", "brotha", "."]
(c1-9 / and
      :op1 (c1-6 / person
                 :name (c1-3 / name
                             :op1 "Muva")
                 :ARG0-of (c1-5 / have-rel-role-91
                                :ARG2 (c1-2 / mother)))
      :op2 (c1-4 / person
                 :name (c1-7 / name
                             :op1 "Brotha")
                 :ARG0-of (c1-8 / have-rel-role-91
                                :ARG2 (c1-1 / brother)))
      :mod (c1-0 / oh
                 :mode expressive))

# ::snt Did she not say same about Khalifa? What at all is wrong with these ex strippers?
# ::tokens ["Did", "she", "not", "say", "same", "about", "Khalifa", "?", "What", "at", "all", "is", "wrong", "with", "these", "ex", "strippers", "?"]
# ::lemmas ["do", "she", "not", "say", "same", "about", "Khalifa", "?", "what", "at", "all", "be", "wrong", "with", "these", "ex", "stripper", "?"]
(c2-1 / multi-sentence
      :snt1 (c2-3 / say-01
                  :ARG0 (c2-0 / she)
                  :ARG1 (c2-14 / same-01)
                  :ARG3 (c2-7 / person
                              :name (c2-2 / name
                                          :op1 "Khalifa"))
                  :polarity (c2-12 / amr-unknown)
                  :polarity -)
      :snt2 (c2-8 / wrong-02
                  :ARG1 (c2-11 / amr-unknown
                               :mod (c2-9 / at-all))
                  :ARG2 (c2-4 / person
                              :ARG0-of (c2-5 / stripe-01
                                             :time (c2-6 / ex))
                              :mod (c2-10 / this))
                  :polarity (c2-13 / amr-unknown)))

# ::snt Good to hear..now go enjoy each other and see ya..
# ::tokens ["Good", "to", "hear", "..", "now", "go", "enjoy", "each", "other", "and", "see", "ya", ".."]
# ::lemmas ["good", "to", "hear", "..", "now", "go", "enjoy", "each", "other", "and", "see", "ya", ".."]
(c3-2 / multi-sentence
      :snt1 (c3-9 / good-02
                  :ARG1 (c3-6 / hear-01))
      :snt2 (c3-7 / go-05
                  :ARG0 (c3-1 / you)
                  :ARG1 (c3-8 / and
                              :op1 (c3-5 / enjoy-01
                                         :ARG0 c3-1
                                         :ARG1 (c3-0 / other
                                                     :mod (c3-10 / each)))
                              :op2 (c3-4 / see-01
                                         :ARG0 c3-1
                                         :ARG1 (c3-11 / you)))
                  :time (c3-3 / now)
                  :mode imperative))

# ::snt Omg...on to the next one on to the next ...who will she perfect with next
# ::tokens ["Omg", "...", "on", "to", "the", "next", "one", "on", "to", "the", "next", "...", "who", "will", "she", "perfect", "with", "next"]
# ::lemmas ["Omg", "...", "on", "to", "the", "next", "one", "on", "to", "the", "next", "...", "who", "will", "she", "perfect", "with", "next"]
(c4-8 / and
      :op1 (c4-1 / on-to
                 :op1 (c4-0 / one
                            :mod (c4-2 / next)))
      :op2 (c4-10 / on-to
                  :op1 (c4-4 / next))
      :op3 (c4-5 / perfect-02
                 :ARG0 (c4-3 / she)
                 :ARG1 (c4-7 / amr-unknown)
                 :time (c4-6 / next))
      :mod (c4-9 / oh-my-god
                 :mode expressive))

# ::snt Eww
# ::tokens ["Eww"]
# ::lemmas ["Eww"]
(c5-0 / ewww
      :mode expressive)

# ::snt Issa Publicity Stunt.
# ::tokens ["Issa", "Publicity", "Stunt", "."]
# ::lemmas ["Issa", "Publicity", "Stunt", "."]
(c6-1 / stunt-01
      :ARG1 (c6-0 / issue-02))

# ::snt Ugh, Gross.Another couple that looks gross together.
# ::tokens ["Ugh", ",", "Gross", ".", "Another", "couple", "that", "looks", "gross", "together", "."]
# ::lemmas ["Ugh", ",", "Gross", ".", "another", "couple", "that", "look", "gross", "together", "."]
(c7-0 / multi-sentence
      :snt1 (c7-6 / gross-05
                  :mod (c7-7 / ugh)
                  :mode expressive)
      :snt2 (c7-2 / couple
                  :mod (c7-5 / another)
                  :ARG0-of (c7-1 / look-02
                                 :ARG1 (c7-4 / gross-05)
                                 :manner (c7-3 / together))))

# ::snt feeling sick about their relationship!!!
# ::tokens ["feeling", "sick", "about", "their", "relationship", "!", "!", "!"]
# ::lemmas ["feel", "sick", "about", "their", "relationship", "!", "!", "!"]
(c8-0 / feel-01
      :ARG1 (c8-1 / sick-04
                  :ARG0 (c8-2 / relation-03
                              :ARG0 (c8-4 / they))
                  :ARG1 (c8-3 / i)))

# ::snt Lolll so true !!!
# ::tokens ["Lolll", "so", "true", "!", "!", "!"]
# ::lemmas ["Lolll", "so", "true", "!", "!", "!"]
(c9-3 / true-01
      :ARG1 (c9-2 / person
                  :name (c9-1 / name
                              :op1 "Lolll"))
      :degree (c9-0 / so)
      :mode expressive)

# ::snt To each their own
# ::tokens ["To", "each", "their", "own"]
# ::lemmas ["to", "each", "their", "own"]
(c11-0 / favor-01
       :ARG0 (c11-3 / they)
       :ARG1 (c11-2 / person
                    :mod (c11-1 / each)))

# ::snt How is this important ?
# ::tokens ["How", "is", "this", "important", "?"]
# ::lemmas ["how", "be", "this", "important", "?"]
(c12-1 / important-01
       :ARG1 (c12-2 / this)
       :manner (c12-0 / amr-unknown))

# ::snt Until they break up
# ::tokens ["Until", "they", "break", "up"]
# ::lemmas ["until", "they", "break", "up"]
(c13-0 / be-temporally-at-91
       :ARG2 (c13-1 / until
                    :op1 (c13-2 / break-up-08
                                :ARG1 (c13-3 / they))))

# ::snt Until next month when she says the same thing with another Hip hop star.
# ::tokens ["Until", "next", "month", "when", "she", "says", "the", "same", "thing", "with", "another", "Hip", "hop", "star", "."]
# ::lemmas ["until", "next", "month", "when", "she", "say", "the", "same", "thing", "with", "another", "Hip", "hop", "star", "."]
(c15-4 / say-01
       :ARG0 (c15-0 / she)
       :ARG1 (c15-7 / thing
                    :ARG1-of (c15-9 / same-01))
       :ARG3 (c15-3 / star
                    :mod (c15-6 / hip)
                    :mod (c15-5 / another))
       :time (c15-8 / until
                    :op1 (c15-1 / month
                                :mod (c15-2 / next))))

# ::snt Ahh yes what's more perfect than a guy who brags about making women eat plan b pills, &amp; having unprotected sex.
# ::tokens ["Ahh", "yes", "what", "'s", "more", "perfect", "than", "a", "guy", "who", "brags", "about", "making", "women", "eat", "plan", "b", "pills", ",", "&", "amp", ";", "having", "unprotected", "sex", "."]
# ::lemmas ["Ahh", "yes", "what", "be", "more", "perfect", "than", "a", "guy", "who", "brag", "about", "make", "woman", "eat", "plan", "b", "pill", ",", "&", "amp", ";", "have", "unprotected", "sex", "."]
(c16-7 / have-degree-91
       :ARG1 (c16-13 / thing)
       :ARG2 (c16-8 / perfect-02
                    :ARG1 c16-13)
       :ARG3 (c16-2 / more)
       :ARG4 (c16-14 / guy
                     :ARG0-of (c16-1 / brag-01
                                     :ARG1 (c16-5 / and
                                                  :op1 (c16-9 / make-02
                                                              :ARG1 (c16-6 / eat-01
                                                                           :ARG0 (c16-10 / woman)
                                                                           :ARG1 (c16-3 / pill
                                                                                        :mod (c16-15 / plan)
                                                                                        :mod (c16-4 / string-entity
                                                                                                    :value "&amp"))))
                                                  :op2 (c16-0 / sex-01
                                                              :ARG0 c16-10
                                                              :ARG1-of (c16-11 / protect-01
                                                                               :polarity -)))))
       :mod (c16-12 / ah
                    :mode expressive))

# ::snt Bet she said that about Wiz Khalifa, or Kanye West. She'll probably say the same about the next rapper.
# ::tokens ["Bet", "she", "said", "that", "about", "Wiz", "Khalifa", ",", "or", "Kanye", "West", ".", "She", "'ll", "probably", "say", "the", "same", "about", "the", "next", "rapper", "."]
# ::lemmas ["Bet", "she", "say", "that", "about", "Wiz", "Khalifa", ",", "or", "Kanye", "West", ".", "she", "'ll", "probably", "say", "the", "same", "about", "the", "next", "rapper", "."]
(c17-3 / multi-sentence
       :snt1 (c17-2 / bet-01
                    :ARG0 (c17-14 / i)
                    :ARG2 (c17-5 / say-01
                                 :ARG0 (c17-0 / she)
                                 :ARG1 (c17-15 / that)
                                 :ARG3 (c17-1 / or
                                              :op1 (c17-11 / person
                                                           :name (c17-4 / name
                                                                        :op1 "Wiz"
                                                                        :op2 "Khalifa"))
                                              :op2 (c17-6 / person
                                                          :name (c17-10 / name
                                                                        :op1 "Kanye"
                                                                        :op2 "West")))))
       :snt2 (c17-16 / probable
                     :domain (c17-17 / say-01
                                     :ARG0 (c17-7 / she)
                                     :ARG1 (c17-9 / same-01)
                                     :ARG3 (c17-13 / person
                                                   :ARG0-of (c17-8 / rap-01)
                                                   :mod (c17-12 / next)))))

# ::snt true that.
# ::tokens ["true", "that", "."]
# ::lemmas ["true", "that", "."]
(c18-1 / true-01
       :ARG1 (c18-0 / that))

# ::snt A joke
# ::tokens ["A", "joke"]
# ::lemmas ["a", "joke"]
(c19-0 / joke-01)

# ::snt Goes without saying tbh
# ::tokens ["Goes", "without", "saying", "tbh"]
# ::lemmas ["go", "without", "say", "tbh"]
(c20-0 / goes
       :ARG1-of (c20-2 / say-01
                       :ARG1-of (c20-1 / honest-01)
                       :polarity -))

# ::snt Not any religion Hit like if you are a human
# ::tokens ["Not", "any", "religion", "Hit", "like", "if", "you", "are", "a", "human"]
# ::lemmas ["not", "any", "religion", "hit", "like", "if", "you", "be", "a", "human"]
(c21-2 / hit-02
       :ARG1 (c21-1 / religion
                    :mod (c21-4 / any)
                    :polarity -)
       :ARG1-of (c21-5 / resemble-01
                       :ARG2 (c21-3 / human
                                    :domain (c21-0 / you))))
