# ::snt , hi, how are you? I am is your fans
# ::tokens [",", "hi", ",", "how", "are", "you", "?", "I", "am", "is", "your", "fans"]
# ::lemmas [",", "hi", ",", "how", "be", "you", "?", "i", "be", "be", "your", "fan"]
(c1-2 / multi-sentence
      :snt1 (c1-3 / say-01
                  :ARG0 (c1-6 / i)
                  :ARG1 (c1-5 / hi)
                  :ARG2 (c1-1 / you))
      :snt2 (c1-0 / fan
                  :domain (c1-4 / i)
                  :poss (c1-7 / you)))

# ::snt God bless you
# ::tokens ["God", "bless", "you"]
# ::lemmas ["God", "bless", "you"]
(c2-1 / bless-01
      :ARG0 (c2-3 / person
                  :name (c2-0 / name
                              :op1 "God"))
      :ARG1 (c2-2 / you))

# ::snt WE BEEN KNEW
# ::tokens ["WE", "BEEN", "KNEW"]
# ::lemmas ["we", "been", "know"]
(c4-1 / know-01
      :ARG0 (c4-0 / we))

# ::snt Who is single
# ::tokens ["Who", "is", "single"]
# ::lemmas ["who", "be", "single"]
(c5-1 / single-03
      :ARG1 (c5-0 / amr-unknown))

# ::snt SAME Niall speaking for himself
# ::tokens ["SAME", "Niall", "speaking", "for", "himself"]
# ::lemmas ["SAME", "Niall", "speak", "for", "himself"]
(c6-3 / same-01
      :ARG1 (c6-0 / speak-01
                  :ARG0 (c6-4 / person
                              :name (c6-2 / name
                                          :op1 "Niall"))
                  :mod (c6-1 / by-oneself)))

# ::snt i could have done without
# ::tokens ["i", "could", "have", "done", "without"]
# ::lemmas ["i", "could", "have", "do", "without"]
(c7-1 / possible-01
      :ARG1 (c7-0 / do-02
                  :ARG0 (c7-2 / i)
                  :manner (c7-3 / without)))

# ::snt It's true.. Louis gave that distinctive One Direction voice..
# ::tokens ["It", "'s", "true", "..", "Louis", "gave", "that", "distinctive", "One", "Direction", "voice", ".."]
# ::lemmas ["it", "be", "true", "..", "Louis", "give", "that", "distinctive", "One", "Direction", "voice", ".."]
(c8-1 / multi-sentence
      :snt1 (c8-7 / true-01
                  :ARG1 (c8-6 / it))
      :snt2 (c8-8 / give-01
                  :ARG0 (c8-5 / person
                              :name (c8-2 / name
                                          :op1 "Louis"))
                  :ARG1 (c8-3 / voice-01
                              :ARG0 (c8-0 / broadcast-program
                                          :name (c8-4 / name
                                                      :op1 "One"
                                                      :op2 "Direction"))
                              :mod (c8-9 / distinctive)
                              :mod (c8-10 / that))))

# ::snt We all know that
# ::tokens ["We", "all", "know", "that"]
# ::lemmas ["we", "all", "know", "that"]
(c9-2 / know-01
      :ARG0 (c9-0 / we
                  :mod (c9-3 / all))
      :ARG1 (c9-1 / that))

# ::snt Why is this news? They were a band all of them were "vital"?
# ::tokens ["Why", "is", "this", "news", "?", "They", "were", "a", "band", "all", "of", "them", "were", "\"", "vital", "\"", "?"]
# ::lemmas ["why", "be", "this", "news", "?", "they", "be", "a", "band", "all", "of", "they", "be", "\"", "vital", "\"", "?"]
(c10-2 / multi-sentence
       :snt1 (c10-5 / cause-01
                    :ARG0 (c10-3 / amr-unknown)
                    :ARG1 (c10-1 / news
                                 :mod (c10-7 / this)))
       :snt2 (c10-0 / band
                    :domain (c10-9 / they))
       :snt3 (c10-4 / Vital
                    :domain (c10-6 / they
                                   :mod (c10-8 / all))
                    :polarity c10-3))

# ::snt This looks like a mug shot.
# ::tokens ["This", "looks", "like", "a", "mug", "shot", "."]
# ::lemmas ["this", "look", "like", "a", "mug", "shot", "."]
(c11-2 / look-02
       :ARG0 (c11-3 / this)
       :ARG1 (c11-0 / shoot-02
                    :ARG2 (c11-1 / mug)))

# ::snt They all were...
# ::tokens ["They", "all", "were", "..."]
# ::lemmas ["you", "all", "be", "..."]
(c12-1 / they
       :mod (c12-0 / all))

# ::snt It does come off 'shitty'.
# ::tokens ["It", "does", "come", "off", "'", "shitty", "'", "."]
# ::lemmas ["it", "do", "come", "off", "'", "shitty", "'", "."]
(c13-0 / come-off-33
       :ARG1 (c13-1 / it)
       :ARG2 (c13-2 / shitty))
