comment,amr
good god no,"# ::snt good god no
(g / god
      :mode expressive
      :ARG1-of (g2 / good-02)
      :mod (n / no))"
The first part is good but the second,"# ::snt The first part is good but the second
(c / contrast-01
      :ARG1 (g / good-02
            :ARG1 (p / part
                  :ord (o / ordinal-entity
                        :value 1)))
      :ARG2 g
      :ARG1 (p2 / part
            :ord (o2 / ordinal-entity
                  :value 2)))"
And I can't forget Springsteen,"# ::snt And I can't forget Springsteen
(a / and
      :op2 (p / possible-01
            :polarity -
            :ARG1 (f / forget-01
                  :ARG0 (ii / i)
                  :ARG1 (p2 / person
                        :name (n / name
                              :op1 ""Springsteen"")))))"
Let me know and I'll buy a copy,"# ::snt Let me know and I'll buy a copy
(a / and
      :op1 (l / let-know-07
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (ii / i))
      :op2 (b / buy-01
            :ARG0 ii
            :ARG1 (t / thing
                  :ARG2-of (c / copy-01))))"
"Definitely. Hopefully in the near future I should be releasing my first solo EP that is inspired by Mayer, Clapton, Bonomassa, and Richards","# ::snt Definitely. Hopefully in the near future I should be releasing my first solo EP that is inspired by Mayer, Clapton, Bonomassa, and Richards
(m / multi-sentence
      :snt1 (d / definite)
      :snt2 (h / hope-01
            :ARG1 (r / release-01
                  :ARG0 (ii / i)
                  :ARG1 (e / EP
                        :poss ii
                        :ord (o / ordinal-entity
                              :value 1)
                        :mod (s / solo)
                        :ARG1-of (ii2 / inspire-01
                              :ARG0 (a / and
                                    :op1 (p / person
                                          :name (n / name
                                                :op1 ""Mayer""))
                                    :op2 (p2 / person
                                          :name (n2 / name
                                                :op1 ""Clapton""))
                                    :op3 (p3 / person
                                          :name (n3 / name
                                                :op1 ""Bonomassa""))
                                    :op4 (p4 / person
                                          :name (n4 / name
                                                :op1 ""Richards"")))))
                  :time (f / future
                        :ARG1-of (n5 / near-02)))))"
"Not selfish! But each album he puts out, he follows a unique direction/inspiration for it. I'd like to see a brand new path for him.","# ::snt Not selfish! But each album he puts out, he follows a unique direction/inspiration for it. I'd like to see a brand new path for him.
(m / multi-sentence
      :snt1 (s / selfish
            :polarity -
            :domain (h / he))
      :snt2 (c / contrast-01
            :ARG2 (f / follow-02
                  :ARG0 (h2 / he)
                  :ARG1 (o / or
                        :op1 (d / direction
                              :ARG1-of (u / unique-01))
                        :op2 (ii / inspire-01
                              :ARG0 h2))
                  :ARG2 (a / album
                        :mod (e / each)
                        :ARG1-of (p / put-out-10
                              :ARG0 h2))))
      :snt3 (l / like-02
            :ARG0 (ii2 / i)
            :ARG1 (s2 / see-01
                  :ARG0 ii2
                  :ARG1 (p2 / path
                        :ARG1-of (n / new-01
                              :mod (b / brand))
                        :beneficiary (h3 / he)))))"
Same,"# ::snt Same
(s / same-01)"
Same,"# ::snt Same
(s / same-01)"
I WANT JATY BAAACK,"# ::snt I WANT JATY BAAACK
(w / want-01
      :ARG0 (ii / i)
      :ARG1 (b / bAAACK
            :mode expressive))"
they are soulmates,"# ::snt they are soulmates
(s / soulmate
      :domain (t / they))"
Same but korlando soo waiting Christmas. .ed sheeran concert. Give me hopes,"# ::snt Same but korlando soo waiting Christmas. .ed sheeran concert. Give me hopes
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (s / same-01)
            :ARG2 (w / wait-01
                  :ARG1 (c2 / city
                        :name (n / name
                              :op1 ""lando""))
                  :ARG2 (f / festival
                        :name (n2 / name
                              :op1 ""Christmas""))))
      :snt2 (c3 / concert
            :mod (s2 / sheer)
            :mod (p / person
                  :name (n3 / name
                        :op1 ""ed""
                        :op2 "" sheeran"")))
      :snt3 (g / give-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (h / hope-01)
            :ARG2 (ii / i)))"
feel u sis,"# ::snt feel u sis
(f / feel-01
      :ARG0 (ii / i)
      :ARG2 (y / you
            :ARG0-of (h / have-rel-role-91
                  :ARG1 ii
                  :ARG2 (s / sister))))"
". And yes, these are the questions I'm thinking about on Wednesday afternoons.","# ::snt . And yes, these are the questions I'm thinking about on Wednesday afternoons.
(a / and
      :op2 (t / think-01
            :ARG0 (ii / i)
            :ARG1 (q / question-01
                  :mod (t2 / this))
            :time (d / date-entity
                  :weekday (w / wednesday)
                  :dayperiod (a2 / afternoon))))"
. ... but are the songs so good because they broke up and that broke John's heart or will the songs get even better if he's happy with her?,"# ::snt . ... but are the songs so good because they broke up and that broke John's heart or will the songs get even better if he's happy with her?
(c / contrast-01
      :ARG2 (a / amr-choice
            :op1 (c2 / cause-01
                  :ARG0 (a2 / and
                        :op1 (b / break-up-08
                              :ARG1 (s / song))
                        :op2 (b2 / break-01
                              :ARG1 (h / heart
                                    :part-of (p / person
                                          :name (n / name
                                                :op1 ""John"")))))
                  :ARG1 (g / good-02
                        :ARG1 s
                        :degree (s2 / so)))
            :op2 (g2 / get-03
                  :ARG1 s
                  :ARG2 (h2 / have-degree-91
                        :ARG1 s
                        :ARG2 g
                        :ARG1 s
                        :mod (e / even))
                  :ARG3 (m / more))
            :condition (h3 / happy-01
                  :ARG0 (s3 / she)
                  :ARG1 p)))"
