comment,amr
I need that power couple in my life,"# ::snt I need that power couple in my life
(n / need-01
      :ARG0 (ii / i)
      :ARG1 (c / couple
            :mod (p / power)
            :mod (t / that))
      :location (l / life
            :poss ii))"
apparently tom holland accidentally let it out that they are. god i hope they are,"# ::snt apparently tom holland accidentally let it out that they are. god i hope they are
(m / multi-sentence
      :snt1 (l / let-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 ""Tom""
                        :op2 ""Holland""))
            :ARG1 (o / out-06
                  :ARG1 (t / they))
            :manner (a / accidental)
            :ARG1-of (a2 / appear-02))
      :snt2 (h / hope-01
            :ARG0 (ii / i)
            :ARG1 (t2 / they))
      :snt3 (p2 / person
            :name (n2 / name
                  :op1 ""God"")))"
Omg are they actually,"# ::snt Omg are they actually
(t / they
      :ARG1-of (a / actual-02)
      :mod (o / oh-my-god
            :mode expressive))"
"A uns dias atrs ela foi vista com aquele cara do SNL, que dizem que o namorado dela, no casamento da cabeleira dela.","# ::snt A uns dias atrs ela foi vista com aquele cara do SNL, que dizem que o namorado dela, no casamento da cabeleira dela.
(m / multi-sentence
      :snt1 (h / have-polarity-91
            :ARG2 -
            :time (a / atrs))
      :snt2 (v / vista-00
            :ARG0 (e / ela)
            :ARG1 (c / cara
                  :mod (a2 / aquele)
                  :ARG1-of (d / do-02
                        :ARG0 (b / broadcast-program
                              :name (n / name
                                    :op1 ""SNL"")))))
      :snt3 (d2 / dizem-01
            :ARG0 (y / you)
            :ARG1 (n2 / namorado
                  :mod (d3 / dela)))
      :snt4 (c2 / casamento
            :polarity -
            :mod (c3 / cabeleira
                  :mod (d4 / dela))))"
,"# ::snt 
(a / amr-empty)"
Oh my goodness,"# ::snt Oh my goodness
(g / goodness
      :mode expressive
      :poss (ii / i))"
,"# ::snt 
(a / amr-empty)"
I hear the theme playing in my head now lol,"# ::snt I hear the theme playing in my head now lol
(h / hear-01
      :ARG0 (ii / i
            :part (h2 / head))
      :ARG1 (p / play-11
            :ARG1 (t / theme)
            :location h2)
      :time (n / now)
      :ARG2-of (l / laugh-01
            :mode expressive
            :ARG0 ii
            :manner (l2 / loud)))"
I really am old!,"# ::snt I really am old!
(o / old
      :domain (ii / i)
      :ARG1-of (r / real-04))"
Dibs on Diane Kruger!,"# ::snt Dibs on Diane Kruger!
(d / dibs-on
      :name (n / name
            :op1 ""Diane""
            :op2 ""Kruger""))"
Jajajja as como as,"# ::snt Jajajja as como as
(p / person
      :name (n / name
            :op1 ""Jajajja"")
      :ARG1-of (r / resemble-01
            :ARG2 (c / como)))"
Mais algumas fotos de Emma no festival ontem!,"# ::snt Mais algumas fotos de Emma no festival ontem!
(f / foto
      :poss (p / person
            :name (n / name
                  :op1 ""Emma""))
      :mod (f2 / festival
            :polarity -)
      :mod (a / as-temporally)
      :mod (a2 / algum))"
Se nota por tu para anterior tuit,"# ::snt Se nota por tu para anterior tuit
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (h / have-polarity-91
            :ARG1 (y / you)
            :ARG2 -
            :ARG1-of (c / cause-01
                  :ARG0 (t / tuit
                        :mod (a / anterior))))
      :ARG2 y)"
No,"# ::snt No
(n / no)"
No has visto easy A,"# ::snt No has visto easy A
(e / easy-05
      :polarity -
      :ARG1 (s / string-entity
            :value ""A""))"
Does that mean Emma will come to London filn festival?!,"# ::snt Does that mean Emma will come to London filn festival?!
(m / mean-01
      :ARG1 (t / that)
      :ARG2 (c / come-01
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Emma""))
            :ARG4 (f / festival
                  :name (n2 / name
                        :op1 ""London""
                        :op2 ""Filn""
                        :op3 ""Festival"")))
      :polarity (a / amr-unknown))"
Not confirmed if Emma will be there,"# ::snt Not confirmed if Emma will be there
(c / confirm-01
      :polarity -
      :ARG1 (t / truth-value
            :polarity-of (e / Emma
                  :location (t2 / there))))"
This is not confirmed?,"# ::snt This is not confirmed?
(c / confirm-01
      :polarity -
      :ARG1 (t / this)
      :polarity (a / amr-unknown))"
"sorry, my bad! it's because in my country it will be th","# ::snt sorry, my bad! it's because in my country it will be th
(m / multi-sentence
      :snt1 (s / sorry-01
            :ARG1 (ii / i)
            :ARG2 (t / thing
                  :ARG1-of (b / bad-07
                        :ARG0 ii)))
      :snt2 (c / cause-01
            :ARG0 (b2 / be-located-at-91
                  :ARG1 (ii2 / it)
                  :ARG2 (c2 / country
                        :poss (ii3 / i)))
            :ARG1 ii2))"
isn't the premiere at the new york film festival on september ?,"# ::snt isn't the premiere at the new york film festival on september ?
(p / premiere-01
      :polarity -
      :ARG2 (f / festival
            :name (n / name
                  :op1 ""New""
                  :op2 ""York""
                  :op3 ""Film""
                  :op4 ""Festival""))
      :time (d / date-entity
            :month 9)
      :ARG1-of (r / request-confirmation-91))"
Ona jest taka pikna,"# ::snt Ona jest taka pikna
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (j / jest)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""Ona""
                  :op2 ""Jest"")))"
Yesss,"# ::snt Yesss
(y / yesss)"
"Actually, yes exactly, but keep telling yourself otherwise.","# ::snt Actually, yes exactly, but keep telling yourself otherwise.
(c / contrast-01
      :ARG1 (y / yes
            :mod (e / exact)
            :ARG1-of (a / actual-02))
      :ARG2 (k / keep-02
            :ARG0 (y2 / you)
            :ARG1 (t / tell-01
                  :ARG0 y2
                  :ARG1 (h / have-polarity-91
                        :ARG2 -)
                  :ARG2 y2)))"
"He's not talented. Y do people think she went FROM Tom him? He has no career, at all, which means that everything gets controlled by HER, entirely how she likes it. Tom was already known&amp;when she figured out that she couldn't control everything, she moved on to her next victim.","# ::snt He's not talented. Y do people think she went FROM Tom him? He has no career, at all, which means that everything gets controlled by HER, entirely how she likes it. Tom was already known&amp;when she figured out that she couldn't control everything, she moved on to her next victim.
(m / multi-sentence
      :snt1 (t / talent
            :polarity -
            :domain (h / he))
      :snt2 (t2 / think-01
            :ARG0 (p / person)
            :ARG1 (g / go-02
                  :ARG0 (s / she)
                  :ARG3 (p2 / person
                        :name (n / name
                              :op1 ""Tom""
                              :op2 ""He"")))
            :polarity (a / amr-unknown))
      :snt3 (h2 / have-03
            :polarity -
            :ARG0 (h3 / he)
            :ARG1 (c / career)
            :degree (a2 / at-all)
            :ARG1-of (m2 / mean-01
                  :ARG2 (c2 / control-01
                        :ARG0 (s2 / she
                              :ARG1 (e / everything)
                              :ARG1-of m2
                              :ARG2 (c3 / control-01
                                    :ARG1 e
                                    :manner (e2 / entire)
                                    :ARG1-of (l / like-01
                                          :ARG0 s2))
                              :ARG0-of c3))))
      :snt4 (a3 / and
            :op1 (k / know-02
                  :ARG1 (p3 / person
                        :name n
                        :op1 ""Tom""))
            :time (a4 / already))
      :op2 (m3 / move-01
            :ARG0 (s3 / she)
            :ARG2 (v / victim
                  :mod (n2 / next)
                  :poss s3)
            :time (f / figure-out-05
                  :ARG0 s3
                  :ARG1 (p4 / possible-01
                        :polarity -
                        :ARG1 (c4 / control-01
                              :ARG0 s3
                              :ARG1 (e3 / everything))))))"
"Joe Alwyn being referred to as Swifts boyfriend when he is a genuinely super talented actor who was the lead of Ang Lees Billy Lynns Long Halftime Walk and is in three high profile films this year, is just ridiculous.","# ::snt Joe Alwyn being referred to as Swifts boyfriend when he is a genuinely super talented actor who was the lead of Ang Lees Billy Lynns Long Halftime Walk and is in three high profile films this year, is just ridiculous.
(r / ridiculous-02
      :ARG1 (r2 / refer-01
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Joe""
                        :op2 ""Alwyn""))
            :ARG2 (p2 / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (o / organization
                              :name (n2 / name
                                    :op1 ""Swifts""))
                        :ARG2 (b / boyfriend)))
            :time (a / and
                  :op1 (p3 / person
                        :ARG0-of (a2 / act-01)
                        :domain p
                        :mod (t / talent
                              :mod (g / genuine)
                              :mod (s / super))
                        :ARG0-of (l / lead-02
                              :ARG1 (w / work-of-art
                                    :name (n3 / name
                                          :op1 ""Ang""
                                          :op2 ""Lees""
                                          :op3 ""Billy""
                                          :op4 ""Lynns""
                                          :op5 ""Long""
                                          :op6 ""Halftime""
                                          :op7 ""Walk""))))
                  :op2 (b2 / be-located-at-91
                        :ARG1 p
                        :ARG2 (f / film
                              :quant 3
                              :mod (p4 / profile
                                    :ARG1-of (h2 / high-02))
                              :time (y / year
                                    :mod (t2 / this))))))
      :mod (j / just))"
They are friends. Emma been in business longer than jen,"# ::snt They are friends. Emma been in business longer than jen
(m / multi-sentence
      :snt1 (h / have-rel-role-91
            :ARG0 (t / they)
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Emma""))
            :ARG2 (f / friend))
      :snt2 (h2 / have-degree-91
            :ARG1 (b / business
                  :poss (p2 / person
                        :name (n2 / name
                              :op1 ""Jen"")))
            :ARG2 (l / long-03
                  :ARG1 (b2 / business
                        :poss p2))
            :ARG3 (m2 / more)
            :ARG4 b2))"
Perch Emma accetta ruoli anche non d spiccata lead cosa che Jen invece...,"# ::snt Perch Emma accetta ruoli anche non d spiccata lead cosa che Jen invece...
(m / multi-sentence
      :snt1 (p / perch-01
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 ""Emma""
                        :op2 ""Accetta"")))
      :snt2 (a / accuse-01
            :ARG0 (p3 / person
                  :name (n2 / name
                        :op1 ""Ruvoli""))
            :ARG1 p3
            :ARG2 (s / spiccata
                  :polarity -
                  :ARG1-of (c / cause-01
                        :ARG0 (l / lead-02)))
            :snt3 (p4 / person
                  :name (n3 / name
                        :op1 ""Jen"")
                  :mod (ii / invece))))"
!,"# ::snt !
(t / thing
      :mode expressive)"
Grit duro en la que sale hablando con Cuarn.,"# ::snt Grit duro en la que sale hablando con Cuarn.
(d / duro
      :mod (c / country
            :name (n / name
                  :op1 ""Grit""))
      :mod (e / en-la-que)
      :ARG1-of (s / sell-01
            :ARG4 (c2 / city
                  :name (n2 / name
                        :op1 ""Cuarn""))
            :ARG1-of (h / hablando-00)))"
"If that were possible they shouldve given it to Jesse Eisenberg, Andrew Garfield and Justin Timberlake for TSN","# ::snt If that were possible they shouldve given it to Jesse Eisenberg, Andrew Garfield and Justin Timberlake for TSN
(r / recommend-01
      :ARG1 (g / give-01
            :ARG0 (t / they)
            :ARG1 (ii / it)
            :ARG2 (a / and
                  :op1 (p / person
                        :name (n / name
                              :op1 ""Jesse""
                              :op2 ""Eisenberg""))
                  :op2 (p2 / person
                        :name (n2 / name
                              :op1 ""Andrew""
                              :op2 ""Garfield""))
                  :op3 (p3 / person
                        :name (n3 / name
                              :op1 ""Justin""
                              :op2 ""Timberlake"")))
            :beneficiary (b / broadcast-program
                  :name (n4 / name
                        :op1 ""TSN"")))
      :condition (p4 / possible-01
            :ARG1 (t2 / that)))"
Lol late night thoughts man,"# ::snt Lol late night thoughts man
(s / say-01
      :ARG1 (t / think-01
            :time (l / late
                  :op1 (n / night))
            :mod (l2 / laugh-01
                  :mode expressive
                  :manner (l3 / loud)))
      :ARG2 (m / man))"
"Few questions. First :36am? seconds was there a giant plate of food after more than a few drinks. And third to answer the questions. Yes cause Emma Stone was always a first rounder that actually panned out. And well, Lindsay was always going to be Ryan Leaf.","# ::snt Few questions. First :36am? seconds was there a giant plate of food after more than a few drinks. And third to answer the questions. Yes cause Emma Stone was always a first rounder that actually panned out. And well, Lindsay was always going to be Ryan Leaf.
(m / multi-sentence
      :snt1 (q / question-01
            :quant (f / few))
      :snt2 (p / plate
            :consist-of (f2 / food)
            :mod (g / giant)
            :time (a / after
                  :op1 (d / drink-01
                        :quant (m2 / more-than
                              :op1 (f3 / few))))
            :ord (o / ordinal-entity
                  :value 1)
            :time (d2 / date-entity
                  :time ""36:00""
                  :polarity (a2 / amr-unknown)))
      :snt3 (a3 / and
            :op2 (a4 / answer-01
                  :li 3
                  :ARG1 (q2 / question-01)))
      :snt4 (c / cause-01
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 ""Emma""
                        :op2 ""Stone"")
                  :mod (r / rounder
                        :ord (o2 / ordinal-entity
                              :value 1)
                        :ARG1-of (a5 / actual-02)))
            :ARG1 (a6 / and
                  :op2 (p3 / person
                        :name (n2 / name
                              :op1 ""Ryan""
                              :op2 ""Leaf"")
                        :domain (p4 / person
                              :name (n3 / name
                                    :op1 ""Lindsay""))
                        :time (a7 / always)))
            :mod (y / yes))
      :snt5 (a8 / and
            :op2 (p5 / person
                  :name (n4 / name
                        :op1 ""Ryan""
                        :op2 ""Leaf"")
                  :time (a9 / always)
                  :mod (w / well))))"
"As a lurker myself, I approve. I knew I stan the right person.","# ::snt As a lurker myself, I approve. I knew I stan the right person.
(m / multi-sentence
      :snt1 (a / approve-01
            :ARG0 (ii / i)
            :ARG1 (l / lurk-01
                  :ARG0 ii))
      :snt2 (k / know-01
            :ARG0 (ii2 / i)
            :ARG1 (s / stan-01
                  :ARG0 ii2
                  :ARG1 (p / person
                        :ARG1-of (r / right-03)))))"
So soft and pale white...,"# ::snt So soft and pale white...
(w / white-03
      :degree (s / so)
      :ARG1-of (s2 / soft-02)
      :ARG1-of (p / pale-03))"
hey not too far off from the actual plot tbh,"# ::snt hey not too far off from the actual plot tbh
(o / off
      :op1 (p / plot
            :ARG1-of (a / actual-02))
      :ARG1-of (h / have-degree-91
            :polarity -
            :ARG2 (f / far)
            :ARG3 (t / too))
      :mod (h2 / hey
            :mode expressive)
      :condition (h3 / honest-01
            :ARG0 (ii / i)))"
"Ne dubito, ha certamente altro a cui pensare.","# ::snt Ne dubito, ha certamente altro a cui pensare.
(a / and
      :op1 (d / dubito
            :mode expressive)
      :op2 (c / certamente
            :domain (a2 / amr-unintelligible
                  :value "" altro""))
      :op3 (p / penare-00
            :ARG1-of (r / request-confirmation-91)))"
"La mia non una domanda, un'affermazione.","# ::snt La mia non una domanda, un'affermazione.
(m / multi-sentence
      :snt1 (u / una
            :polarity -
            :mode expressive
            :domain (d / domanda))
      :snt2 (a / affermazione))"
Well after Emma Stone replaced Emma Watson in La La Land because Em Watson took on Beauty and the Beast then its very likely Em Watson learned from THAT mistake,"# ::snt Well after Emma Stone replaced Emma Watson in La La Land because Em Watson took on Beauty and the Beast then its very likely Em Watson learned from THAT mistake
(l / likely-01
      :ARG1 (l2 / learn-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 ""Emma""
                        :op2 ""Watson""))
            :ARG1 (m / mistake-02
                  :mod (t / that)))
      :degree (v / very)
      :time (a / after
            :op1 (r / replace-01
                  :ARG0 (p2 / person
                        :name (n2 / name
                              :op1 ""Emma""
                              :op2 ""Stone""))
                  :ARG1 p
                  :location (w / work-of-art
                        :name (n3 / name
                              :op1 ""La""
                              :op2 ""La""
                              :op3 ""Land""))
                  :ARG1-of (c / cause-01
                        :ARG0 (t2 / take-on-09
                              :ARG0 p
                              :ARG1 (w2 / work-of-art
                                    :name (n4 / name
                                          :op1 ""Beauty""
                                          :op2 ""and""
                                          :op3 ""the""
                                          :op4 ""Beast""))))))
      :mod (w3 / well))"
"I know, right??","# ::snt I know, right??
(k / know-01
      :ARG0 (ii / i)
      :ARG1-of (r / request-confirmation-91
            :ARG2 ii))"
"Ohh, that would have been so cool!","# ::snt Ohh, that would have been so cool!
(c / cool-04
      :ARG1 (t / that)
      :degree (s / so)
      :mod (o / oh
            :mode expressive))"
Emma left Venice already but Id have loved to see her alongside Lali!,"# ::snt Emma left Venice already but Id have loved to see her alongside Lali!
(l / leave-11
      :ARG0 (p / person
            :name (n / name
                  :op1 ""Emma""))
      :ARG1 (ii / island
            :name (n2 / name
                  :op1 ""Venice""))
      :time (a / already)
      :concession-of (l2 / love-02
            :ARG0 (ii2 / i)
            :ARG1 (s / see-01
                  :ARG0 ii2
                  :ARG1 p
                  :accompanier (p2 / person
                        :name (n3 / name
                              :op1 ""Lali"")))))"
Red Vines are so much better than Twizzlers,"# ::snt Red Vines are so much better than Twizzlers
(h / have-degree-91
      :ARG1 (r / recipe
            :ARG1-of (r2 / red-02))
      :ARG2 (g / good-02
            :ARG1 r)
      :ARG3 (m / more
            :quant (m2 / much
                  :degree (s / so)))
      :ARG4 (p / product
            :name (n / name
                  :op1 ""Twizzlers"")))"
Such great chemistry between these two fab actors!,"# ::snt Such great chemistry between these two fab actors!
(c / chemistry
      :mode expressive
      :mod (g / great
            :degree (s / such))
      :mod (b / between
            :op1 (p / person
                  :quant 2
                  :ARG0-of (a / act-01)
                  :mod (t / this)
                  :mod (f / fab))))"
,"# ::snt 
(a / amr-empty)"
Her sure is special . Just kidding about the BF part ! We all wish he was ours!! A girl can dream,"# ::snt Her sure is special . Just kidding about the BF part ! We all wish he was ours!! A girl can dream
(m / multi-sentence
      :snt1 (s / special-02
            :ARG1 (s2 / she)
            :ARG1-of (s3 / sure-02))
      :snt2 (k / kid-01
            :ARG0 (ii / i)
            :ARG2 (p / part
                  :mod (b / boyfriend))
            :mod (j / just))
      :snt3 (w / wish-01
            :ARG0 (w2 / we
                  :mod (a / all))
            :ARG1 (h / have-rel-role-91
                  :ARG0 b
                  :ARG1 w2))
      :snt4 (p2 / possible-01
            :ARG1 (d / dream-01
                  :ARG0 (g / girl))))"
"Gorgeous redhead girls like her always have the most beautiful, smooth, and flawless pale white thighs","# ::snt Gorgeous redhead girls like her always have the most beautiful, smooth, and flawless pale white thighs
(h / have-03
      :ARG0 (g / girl
            :mod (r / redhead)
            :ARG1-of (b / beautiful-02)
            :ARG1-of (r2 / resemble-01
                  :ARG2 (s / she)))
      :ARG1 (t / thigh
            :ARG1-of (w / white-03)
            :ARG1-of (p / pale-03)
            :ARG1-of (h2 / have-degree-91
                  :ARG2 b
                  :ARG1 t)
            :ARG3 (m / most))
      :time (a / always))"
Those legs are perfect,"# ::snt Those legs are perfect
(p / perfect-02
      :ARG1 (l / leg
            :mod (t / that)))"
"Excelente actriz Marina de Tavira, deseando ya ver Roma","# ::snt Excelente actriz Marina de Tavira, deseando ya ver Roma
(ii / intend-01
      :ARG0 (p / person
            :name (n / name
                  :op1 ""Marina""
                  :op2 ""de""
                  :op3 ""Tavira"")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / company
                        :name (n2 / name
                              :op1 ""Excelente""))
                  :ARG3 (a / actriz)))
      :ARG1 (p2 / prove-01
            :ARG0 p
            :ARG1 (v / ver
                  :op1 (c2 / city
                        :name (n3 / name
                              :op1 ""Roma"")))))"
Lol no its not happening. Ive had it confirmed that a paperback is not being made so I dont know where this info is coming from,"# ::snt Lol no its not happening. Ive had it confirmed that a paperback is not being made so I dont know where this info is coming from
(m / multi-sentence
      :snt1 (h / have-polarity-91
            :ARG1 (ii / it)
            :ARG2 -
            :mod (l / laugh-01
                  :mode expressive
                  :ARG0 (ii2 / i)
                  :manner (l2 / loud)))
      :snt2 (c / confirm-01
            :ARG0 (ii3 / i)
            :ARG1 (m2 / make-01
                  :polarity -
                  :ARG1 (p / paperback))
            :ARG0-of (c2 / cause-01
                  :ARG1 (k / know-01
                        :polarity -
                        :ARG0 ii3
                        :ARG1 (l3 / location
                              :ARG2-of (c3 / come-03
                                    :ARG1 (ii4 / information
                                          :mod (t / this))))))))"
TellurideQ&amp;A,"# ::snt TellurideQ&amp;A
(a / and
      :op1 (p / person
            :name (n / name
                  :op1 ""TellurideQ""))
      :op2 (p2 / person
            :name (n2 / name
                  :op1 ""amp"")))"
