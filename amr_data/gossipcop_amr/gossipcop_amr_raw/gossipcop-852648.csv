comment,amr
I really hope so!,"# ::snt I really hope so!
(h / hope-01
      :mode expressive
      :ARG0 (ii / i)
      :ARG1 (s / so)
      :degree (r / really))"
We need to rewatch it if there are clues,"# ::snt We need to rewatch it if there are clues
(o / obligate-01
      :ARG1 (w / we)
      :ARG2 (r / rewatch-01
            :ARG0 w
            :ARG1 (ii / it)
            :condition (c / clue)))"
He definitely is,"# ::snt He definitely is
(h / he
      :mod (d / definite))"
"Bhan, I'm with Jinay","# ::snt Bhan, I'm with Jinay
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (a / accompany-01
            :ARG0 ii
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Jinay"")))
      :ARG2 (p2 / person
            :name (n2 / name
                  :op1 ""Bhan"")))"
,"# ::snt 
(a / amr-empty)"
I hope he doesn't return if they choose to continue that mess of a revival. The writers &amp; ASP will only ruin his character more.,"# ::snt I hope he doesn't return if they choose to continue that mess of a revival. The writers &amp; ASP will only ruin his character more.
(m / multi-sentence
      :snt1 (h / hope-01
            :ARG0 (ii / i)
            :ARG1 (r / return-01
                  :polarity -
                  :ARG1 (h2 / he)
                  :condition (c / choose-01
                        :ARG0 (t / they)
                        :ARG1 (c2 / continue-01
                              :ARG0 t
                              :ARG1 (m2 / mess
                                    :mod (t2 / that)
                                    :mod (r2 / revive-01)))))
            :snt2 (r3 / ruin-01
                  :ARG0 (a / and
                        :op1 (p / person
                              :ARG0-of (w / write-01))
                        :op2 (p2 / person
                              :name (n / name
                                    :op1 ""amp"")))
                  :ARG1 (c3 / character
                        :poss (h3 / he))
                  :mod (o / only)
                  :ARG1-of (h4 / have-quant-91
                        :ARG3 (m3 / more)))))"
Team Jess all the way,"# ::snt Team Jess all the way
(t / team
      :name (n / name
            :op1 ""Jess"")
      :extent (a / all-the-way))"
Isn't he sexy?!!! !!!! Of course he is!...the father,"# ::snt Isn't he sexy?!!! !!!! Of course he is!...the father
(m / multi-sentence
      :snt1 (s / sexy
            :polarity -
            :domain (h / he)
            :polarity (a / amr-unknown))
      :snt2 (h2 / he
            :mod (o / of-course))
      :snt3 (p / person
            :ARG0-of (h3 / have-rel-role-91
                  :ARG2 (f / father))))"
,"# ::snt 
(a / amr-empty)"
"It's obviously him, that was never really a question, we just wanna know how everything will turn out","# ::snt It's obviously him, that was never really a question, we just wanna know how everything will turn out
(a / and
      :op1 (o / obvious-01
            :ARG1 (h / he))
      :op2 (q / question-01
            :polarity -
            :ARG1 (t / that)
            :time (e / ever)
            :ARG1-of (r / real-04))
      :op3 (w / want-01
            :ARG0 (w2 / we)
            :ARG1 (k / know-01
                  :ARG0 w2
                  :ARG1 (t2 / thing
                        :manner-of (t3 / turn-out-11
                              :ARG1 (e2 / everything))))
            :mod (j / just)))"
We know this,"# ::snt We know this
(k / know-01
      :ARG0 (w / we)
      :ARG1 (t / this))"
I was watching GG yesterday and thinking about this.,"# ::snt I was watching GG yesterday and thinking about this.
(a / and
      :op1 (w / watch-01
            :ARG0 (ii / i)
            :ARG1 (b / broadcast-program
                  :name (n / name
                        :op1 ""GG""))
            :time (y / yesterday))
      :op2 (t / think-01
            :ARG0 ii
            :ARG1 (t2 / this)))"
,"# ::snt 
(a / amr-empty)"
Is this even a question?,"# ::snt Is this even a question?
(q / question-01
      :polarity (a / amr-unknown)
      :ARG1 (t / this)
      :mod (e / even))"
of course he is,"# ::snt of course he is
(h / he
      :mod (o / of-course))"
,"# ::snt 
(a / amr-empty)"
Nive man,"# ::snt Nive man
(m / man
      :mod (n / nive))"
,"# ::snt 
(a / amr-empty)"
