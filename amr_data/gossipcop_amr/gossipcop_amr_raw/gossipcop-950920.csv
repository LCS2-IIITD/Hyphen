comment,amr
Nikki you should just work for E News at this point,"# ::snt Nikki you should just work for E News at this point
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (r / recommend-01
            :ARG1 (w / work-01
                  :ARG0 (p / person
                        :name (n / name
                              :op1 ""Nikki""))
                  :ARG2 (p2 / publication
                        :name (n2 / name
                              :op1 ""E""
                              :op2 ""News""))
                  :mod (j / just)
                  :time (p3 / point
                        :mod (t / this)))
            :ARG2 p)
      :ARG2 p)"
If they don't name a son throw the whole family away,"# ::snt If they don't name a son throw the whole family away
(t / throw-away-07
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / family
            :mod (w / whole))
      :condition (n / name-01
            :polarity -
            :ARG0 y
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (s / son)))))"
Who?,"# ::snt Who?
(a / amr-unknown)"
Lets not care about this.,"# ::snt Lets not care about this.
(c / care-01
      :polarity -
      :mode imperative
      :ARG0 (w / we)
      :ARG1 (t / this))"
another duggar?? yes! there's just not enough of them on this planet!,"# ::snt another duggar?? yes! there's just not enough of them on this planet!
(m / multi-sentence
      :snt1 (d / diggar
            :polarity (a / amr-unknown)
            :mod (a2 / another))
      :snt2 (b / be-located-at-91
            :ARG1 (d2 / diggar
                  :ARG1-of (h / have-quant-91
                        :polarity -
                        :ARG3 (e / enough)))
            :ARG2 (p / planet
                  :mod (t / this))
            :mod (j / just)))"
I love her name,"# ::snt I love her name
(l / love-01
      :ARG0 (ii / i)
      :ARG1 (n / name
            :poss (s / she)))"
Yes Felicity!,"# ::snt Yes Felicity!
(s / say-01
      :ARG1 (y / yes)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""Felicity"")))"
"His name is Jeremy, not mike","# ::snt His name is Jeremy, not mike
(n / name-01
      :ARG1 (h / he)
      :ARG2 (p / person
            :name (n2 / name
                  :op1 ""Jeremy"")
            :ARG1-of (ii / instead-of-91
                  :name n2
                  :op1 ""Mike"")
            :ARG2-of ii))"
