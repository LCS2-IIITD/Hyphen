comment,amr
Yay yay,"# ::snt Yay yay
(y / yay)"
Gizzzzmoduck!!!!,"# ::snt Gizzzzmoduck!!!!
(s / say-01
      :mode expressive
      :ARG0 (ii / i)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""izzzzmoduck"")))"
!!!,"# ::snt !!!
(t / thing
      :mode expressive)"
It looks too streamlined. The original was a bit more clunky and felt alot more appropriate to the style of the show,"# ::snt It looks too streamlined. The original was a bit more clunky and felt alot more appropriate to the style of the show
(m / multi-sentence
      :snt1 (l / look-02
            :ARG0 (ii / it)
            :ARG1 (h / have-degree-91
                  :ARG1 ii
                  :ARG2 (s / streamline-01
                        :ARG1 ii)
                  :ARG3 (t / too)))
      :snt2 (a / and
            :op1 (h2 / have-degree-91
                  :ARG1 (o / original)
                  :ARG2 (c / clunky)
                  :ARG3 (m2 / more
                        :quant (b / bit)))
            :op2 (f / feel-01
                  :ARG1 (a2 / appropriate-02
                        :ARG1 o
                        :ARG2 (s2 / style-01
                              :ARG1 (s3 / show-04))
                        :ARG2-of (h3 / have-degree-91
                              :ARG1 o
                              :ARG3 (m3 / more
                                    :quant (l2 / lot)))))))"
the robot looks familiar...,"# ::snt the robot looks familiar...
(l / look-02
      :ARG0 (r / robot)
      :ARG1 (f / familiarize-01
            :ARG2 r))"
That's a solid character (re)design.,"# ::snt That's a solid character (re)design.
(c / character
      :ARG1-of (s / solid-02)
      :domain (t / that)
      :ARG1-of (d / design-01))"
hmm,"# ::snt hmm
(h / hmm
      :mode expressive)"
one only can dream,"# ::snt one only can dream
(p / possible-01
      :ARG1 (d / dream-01
            :ARG0 (o / one))
      :mod (o2 / only))"
This Cuacks never to spot.,"# ::snt This Cuacks never to spot.
(c / Cuack
      :ARG1-of (s / spot-01
            :polarity -
            :time (e / ever))
      :mod (t / this))"
THIS HAS TO STOP,"# ::snt THIS HAS TO STOP
(o / obligate-01
      :ARG2 (s / stop-01
            :ARG1 (t / this)))"
does than mean we get Darkwing Duck too?,"# ::snt does than mean we get Darkwing Duck too?
(m / mean-01
      :polarity (a / amr-unknown)
      :ARG2 (g / get-01
            :ARG0 (w / we)
            :ARG1 (a2 / animal
                  :name (n / name
                        :op1 ""Darkwing""
                        :op2 ""Duck""))
            :mod (t / too)))"
,"# ::snt 
(a / amr-empty)"
