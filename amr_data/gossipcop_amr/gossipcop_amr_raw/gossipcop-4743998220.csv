comment,amr
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
Beliebers vote reply and RT please we are in this together every step of the way with when it was just a dream to a legend forever and alway,"# ::snt Beliebers vote reply and RT please we are in this together every step of the way with when it was just a dream to a legend forever and alway
(m / multi-sentence
      :snt1 (a / and
            :op1 (v / vote-01
                  :ARG0 (p / person
                        :name (n / name
                              :op1 ""Beliebers""))
                  :ARG1 (r / reply-01))
            :op2 r
            :ARG0 p)
      :polite +
      :snt2 (b / be-located-at-91
            :ARG1 (w / we)
            :ARG2 (t / this)
            :accompanier (a2 / and
                  :op1 (s / step-01
                        :mod (e / every)
                        :part-of (w2 / way))
                  :op2 (d / dream-01
                        :ARG0 (l / legend)
                        :ARG1 (ii / it)
                        :mod (j / just)
                        :duration (f / forever)
                        :mod (a3 / alway)))))"
and have a saying the teamwork make the dream work try to think about this and work on it but never give up Love U,"# ::snt and have a saying the teamwork make the dream work try to think about this and work on it but never give up Love U
(a / and
      :op2 (h / have-03
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (s / say-01
                  :ARG1 (c / contrast-01
                        :ARG1 (m / make-02
                              :ARG0 (t / teamwork)
                              :ARG1 (w / work-01
                                    :ARG1 (d / dream-01)))
                        :ARG2 (t2 / try-01
                              :ARG0 y
                              :ARG1 (a2 / and
                                    :op1 (t3 / think-01
                                          :ARG0 y
                                          :ARG2 (t4 / this))
                                    :op2 (w2 / work-01
                                          :ARG0 y
                                          :ARG1 t4))))
                  :ARG2 (g / give-up-07
                        :polarity -
                        :mode imperative
                        :ARG0 y
                        :ARG1 (l / love-01
                              :ARG0 y)
                        :time (e / ever)))))"
"don't stop supporting him even if you are alone , because at the end winnig or losing you'll not be disappointed because you did your best you did what you had to do as im a but i love JB i actually miss him and i hope he'll be at the BBMAs so fighting","# ::snt don't stop supporting him even if you are alone , because at the end winnig or losing you'll not be disappointed because you did your best you did what you had to do as im a but i love JB i actually miss him and i hope he'll be at the BBMAs so fighting
(s / stop-01
      :mode imperative
      :polarity -
      :ARG0 (y / you)
      :ARG1 (s2 / support-01
            :ARG0 y
            :ARG1 (h / he))
      :concession (e / even-if
            :op1 (a / alone
                  :domain y))
      :ARG1-of (c / cause-01
            :ARG0 (d / disappoint-01
                  :polarity -
                  :ARG0 (d2 / do-02
                        :ARG0 y
                        :ARG1 (t / thing
                              :ARG1-of (h2 / have-degree-91
                                    :ARG2 (g / good-02
                                          :ARG1 t)
                                    :ARG3 (m / most)))
                        :time (e2 / end-01
                              :ARG1 (o / or
                                    :op1 (w / win-01
                                          :ARG0 y)
                                    :op2 (l / lose-03
                                          :ARG0 y)))
                        :ARG1 y
                        :ARG1-of (c2 / cause-01
                              :ARG0 (d3 / do-02
                                    :ARG0 y
                                    :ARG1 (t2 / thing
                                          :ARG1-of (d4 / do-02
                                                :ARG0 y
                                                :ARG2-of (o2 / obligate-01
                                                      :ARG0 y))))))
                  :ARG1-of (c3 / contrast-01
                        :ARG2 (a2 / and
                              :op1 (l2 / love-01
                                    :ARG0 (ii / i)
                                    :ARG1 (p / person
                                          :name (n / name
                                                :op1 ""JB"")))
                              :op2 (m2 / miss-01
                                    :ARG0 ii
                                    :ARG1 p
                                    :ARG1-of (a3 / actual-02))
                              :op3 (h3 / hope-01
                                    :ARG0 ii
                                    :ARG1 (b / be-located-at-91
                                          :ARG1 p
                                          :ARG2 (m3 / military
                                                :name n
                                                :op1 ""British""
                                                :op2 ""Defense""
                                                :op3 ""Army""))
                                    :ARG0-of (f / fight-01)))))))"
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
QUE,"# ::snt QUE
(n / number
      :value ""QUE"")"
You bout to get lucky girl,"# ::snt You bout to get lucky girl
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (b / bout-to
            :op1 (g / get-03
                  :ARG1 (g2 / girl)
                  :ARG2 (l / lucky)))
      :ARG2 g2)"
"he was on the phone with his compa and he stops and goes ""es que aqu estoy con un mujeron y ya me ense sus ojazos y no estan nada mal""","# ::snt he was on the phone with his compa and he stops and goes ""es que aqu estoy con un mujeron y ya me ense sus ojazos y no estan nada mal""
(a / and
      :op1 (p / phone-01
            :ARG0 (h / he)
            :ARG1 (p2 / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 h
                        :ARG2 (c / compa))))
      :op2 (a2 / and
            :op1 (s / stop-01
                  :ARG0 h)
            :op2 (g / go-23
                  :ARG0 h
                  :ARG1 (a3 / and
                        :op1 (o / obligate-01
                              :ARG1 h
                              :ARG2 (c2 / con-03
                                    :ARG0 h
                                    :ARG1 p2
                                    :ARG0-of h2
                                    :ARG1 h
                                    :ARG2 (m / mujeron)))))
            :op2 (e / ense-01
                  :ARG0 (y / you)
                  :ARG1 (o2 / ojazos
                        :poss y))
            :op3 (o3 / obligate-01
                  :polarity -
                  :ARG1 y
                  :ARG2 (n / nada))))"
True true,"# ::snt True true
(t / true-01)"
Y'all he's MEXICAN Y'ALL KNOW HOW ROMANTIC US MEXICANS ARE,"# ::snt Y'all he's MEXICAN Y'ALL KNOW HOW ROMANTIC US MEXICANS ARE
(m / multi-sentence
      :snt1 (p / person
            :mod (c / country
                  :name (n / name
                        :op1 ""Mexico""))
            :domain (h / he))
      :snt2 (k / know-01
            :ARG0 (y / you
                  :mod (a / all))
            :ARG1 (t / thing
                  :degree-of (b / beautiful-02
                        :ARG1 (p2 / person
                              :mod (c2 / country
                                    :name (n2 / name
                                          :op1 ""US"")))))))"
He's taller than I thought,"# ::snt He's taller than I thought
(h / have-degree-91
      :ARG1 (h2 / he)
      :ARG2 (t / tall)
      :ARG3 (m / more)
      :ARG4 (t2 / think-01
            :ARG0 (ii / i)))"
Who is he dating/married too?,"# ::snt Who is he dating/married too?
(s / slash
      :op1 (d / date-02
            :ARG0 (h / he)
            :ARG1 (a / amr-unknown))
      :op2 (m / marry-01
            :ARG1 h
            :ARG2 (a2 / amr-unknown))
      :mod (t / too))"
Is he married to this person named orla?,"# ::snt Is he married to this person named orla?
(m / marry-01
      :ARG1 (h / he)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""Orla"")
            :mod (t / this))
      :polarity (a / amr-unknown))"
Her username is istanaking ?,"# ::snt Her username is istanaking ?
(u / username
      :polarity (a / amr-unknown)
      :poss (s / she)
      :domain (t / tanaking))"
No,"# ::snt No
(n / no)"
This person named orla?,"# ::snt This person named orla?
(p / person
      :polarity (a / amr-unknown)
      :name (n / name
            :op1 ""Orla"")
      :mod (t / this))"
Who?,"# ::snt Who?
(a / amr-unknown)"
Is he married to a person named orla?,"# ::snt Is he married to a person named orla?
(m / marry-01
      :ARG1 (h / he)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""Orla""))
      :polarity (a / amr-unknown))"
What? Lol,"# ::snt What? Lol
(m / multi-sentence
      :snt1 (a / amr-unknown)
      :snt2 (l / laugh-01
            :mode expressive
            :manner (l2 / loud))
      :snt3 (a2 / amr-unknown))"
Is he married to person named orla?,"# ::snt Is he married to person named orla?
(m / marry-01
      :ARG1 (h / he)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""Orla""))
      :polarity (a / amr-unknown))"
Right,"# ::snt Right
(r / right-06)"
He's still the only person I still wanna date only?,"# ::snt He's still the only person I still wanna date only?
(p / person
      :polarity (a / amr-unknown)
      :mod (o / only)
      :domain (h / he)
      :mod (s / still)
      :ARG1-of (d / date-02
            :ARG0 (ii / i)
            :ARG1-of (w / want-01
                  :ARG0 ii
                  :mod (s2 / still))
            :mod (o2 / only)))"
"Dude, if you don't get the sarcasm, keep quiet.","# ::snt Dude, if you don't get the sarcasm, keep quiet.
(s / say-01
      :ARG1 (q / quiet-03
            :mode imperative
            :ARG0 (d / dude)
            :ARG1 d
            :condition (g / get-30
                  :polarity -
                  :ARG0 d
                  :ARG1 (s2 / sarcasm)))
      :ARG2 d)"
please reply,"# ::snt please reply
(r / reply-01
      :polite +
      :ARG0 (y / you))"
It's a sad truth my year old soul still weeps for JB,"# ::snt It's a sad truth my year old soul still weeps for JB
(t / truth
      :ARG0-of (s / sad-02)
      :domain (w / weep-01
            :ARG0 (s2 / soul
                  :poss (ii / i)
                  :age (t2 / temporal-quantity
                        :quant 1
                        :unit (y / year)))
            :mod (s3 / still)
            :beneficiary (p / person
                  :name (n / name
                        :op1 ""JB""))))"
thats crazy,"# ::snt thats crazy
(c / crazy-03
      :ARG1 (t / that))"
is the song btw credits to the owner,"# ::snt is the song btw credits to the owner
(c / credit-01
      :ARG1 (p / person
            :ARG0-of (o / own-01))
      :ARG2 (s / song)
      :mod (b / by-the-way))"
i take offence to this,"# ::snt i take offence to this
(o / offend-01
      :ARG0 (ii / i)
      :ARG1 (t / this))"
Hehe!,"# ::snt Hehe!
(h / hehe
      :mode expressive)"
Wtf hahahaha,"# ::snt Wtf hahahaha
(f / fuck-01
      :mode expressive)"
"Sadly, it seems some people care TOO much though haha","# ::snt Sadly, it seems some people care TOO much though haha
(h / have-concession-91
      :ARG1 (s / seem-01
            :ARG1 (c / care-01
                  :ARG0 (p / person
                        :mod (s2 / some))
                  :quant (m / much))
            :mod (s3 / sad)
            :mod (h2 / haha
                  :mode expressive)))"
"No, Gbenga didn't take Asa to France.","# ::snt No, Gbenga didn't take Asa to France.
(t / take-01
      :polarity -
      :ARG0 (c / company
            :name (n / name
                  :op1 ""Gbenga""))
      :ARG1 (p / person
            :name (n2 / name
                  :op1 ""Asa""))
      :ARG3 (c2 / country
            :name (n3 / name
                  :op1 ""France"")))"
Could have been him and Sam then because he told me there was another guy. One was road manager,"# ::snt Could have been him and Sam then because he told me there was another guy. One was road manager
(m / multi-sentence
      :snt1 (c / cause-01
            :ARG0 (t / tell-01
                  :ARG0 (h / he)
                  :ARG1 (g / guy
                        :mod (a / another))
                  :ARG2 (ii / i)
                  :time (t2 / then))
            :ARG1 (p / possible-01
                  :ARG1 (a2 / and
                        :op1 (h2 / he)
                        :op2 (p2 / person
                              :name (n / name
                                    :op1 ""Sam"")))))
      :snt2 (p3 / person
            :ARG0-of (m2 / manage-01
                  :ARG1 (r / road))
            :domain (o / one)))"
"I believe this is incorrect. Gbenga Shokefun was their manager.. unless It was him and Sam, he's also the guy that took Asa to paris","# ::snt I believe this is incorrect. Gbenga Shokefun was their manager.. unless It was him and Sam, he's also the guy that took Asa to paris
(m / multi-sentence
      :snt1 (b / believe-01
            :ARG0 (ii / i)
            :ARG1 (c / correct-02
                  :polarity -
                  :ARG1 (t / this)))
      :snt2 (p / person
            :ARG0-of (m2 / manage-01
                  :ARG1 (t2 / they))
            :domain (p2 / person
                  :name (n / name
                        :op1 ""Gbenga""
                        :op2 ""Shokefun"")))
      :snt3 (g / guy
            :ARG0-of (t3 / take-01
                  :ARG1 (p3 / person
                        :name (n2 / name
                              :op1 ""Asa""))
                  :ARG3 (p4 / paris))
            :mod (a / also)
            :condition (a2 / and
                  :op1 (h / he)
                  :op2 (p5 / person
                        :name (n3 / name
                              :op1 ""Sam"")))))"
Great music teachers,"# ::snt Great music teachers
(p / person
      :ARG0-of (t / teach-01
            :ARG1 (m / music))
      :mod (g / great))"
Whao!,"# ::snt Whao!
(w / whao
      :mode expressive)"
That escalated quickly,"# ::snt That escalated quickly
(e / escalate-01
      :ARG1 (t / that)
      :ARG1-of (q / quick-02))"
Oh ohhhh,"# ::snt Oh ohhhh
(o / oh-oh
      :mode expressive)"
"Interestingly, there is no hint of any work done related to Naija on his Wikipedia.","# ::snt Interestingly, there is no hint of any work done related to Naija on his Wikipedia.
(h / hint-01
      :polarity -
      :ARG1 (w / work-01
            :ARG1-of (r / relate-01
                  :ARG2 (p / person
                        :name (n / name
                              :op1 ""Naija""))))
      :location (p2 / publication
            :name (n2 / name
                  :op1 ""Wikipedia"")
            :poss p)
      :ARG2-of (ii / interest-01))"
Truth! Dapo Torimiro wrote the smash hit 'Quickly' on John Legend's Album 'Evolver'. Song was a duet by John Legend and Brandy,"# ::snt Truth! Dapo Torimiro wrote the smash hit 'Quickly' on John Legend's Album 'Evolver'. Song was a duet by John Legend and Brandy
(m / multi-sentence
      :snt1 (t / truth
            :mode expressive)
      :snt2 (w / write-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 ""Dapo""
                        :op2 ""Torimiro""))
            :ARG1 (h / hit-11
                  :ARG1 (q / quick-02)
                  :ARG1-of (s / smash-02)
                  :location (a / album
                        :name (n2 / name
                              :op1 ""Evolver"")
                        :poss (p2 / person
                              :name (n3 / name
                                    :op1 ""John""
                                    :op2 ""John""
                                    :op3 ""Legend"")))))
      :snt3 (d / duet-01
            :ARG0 (a2 / and
                  :op1 p2
                  :op2 (p3 / person
                        :name (n4 / name
                              :op1 ""Brandy"")))
            :ARG1 (s2 / song)))"
Yeah. Co-produced.,"# ::snt Yeah. Co-produced.
(m / multi-sentence
      :snt1 (y / yeah)
      :snt2 (p / produce-01
            :ARG1-of (c / co-01)))"
*eventual darn autocorrect,"# ::snt *eventual darn autocorrect
(a / autocorrect
      :mod (e / event)
      :ARG1-of (d / darn-01))"
"Dapo co-produced some songs on the eventually album. It was mostly produced by one Jeffrey ""Mad Jeff"" Taylor.","# ::snt Dapo co-produced some songs on the eventually album. It was mostly produced by one Jeffrey ""Mad Jeff"" Taylor.
(m / multi-sentence
      :snt1 (p / produce-01
            :ARG0 (o / organization
                  :name (n / name
                        :op1 ""Dapo""))
            :ARG1 (s / song
                  :quant (s2 / some))
            :ARG3 (a / album
                  :time (e / eventual))
            :manner (t / together))
      :snt2 (p2 / produce-01
            :ARG0 (o2 / one
                  :name (n2 / name
                        :op1 ""Jeffrey""
                        :op2 ""Mad""
                        :op3 ""Jeff""
                        :op4 ""Taylor""))
            :ARG1 (ii / it)
            :mod (m2 / most)))"
