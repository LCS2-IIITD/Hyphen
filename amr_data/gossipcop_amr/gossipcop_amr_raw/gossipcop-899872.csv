comment,amr
Took the cars long enough,"# ::snt Took the cars long enough
(t / take-10
      :ARG1 (c / car)
      :ARG1-of (h / have-degree-91
            :ARG2 (l / long-03
                  :ARG1 t)
            :ARG3 (e / enough)))"
"Much deserved. And the Moody Blues, long overdue.","# ::snt Much deserved. And the Moody Blues, long overdue.
(m / multi-sentence
      :snt1 (d / deserve-01
            :degree (m2 / much))
      :snt2 (a / and
            :op2 (o / organization
                  :name (n / name
                        :op1 ""Moody's""
                        :op2 ""Blues"")
                  :mod (o2 / overdue
                        :ARG1-of (l / long-03)))))"
Finally Ms. Simone is recognized.,"# ::snt Finally Ms. Simone is recognized.
(r / recognize-01
      :ARG1 (p / person
            :name (n / name
                  :op1 ""Ms.""
                  :op2 ""Simone""))
      :time (f / final))"
Ms Nina should have been in there a long time ago.,"# ::snt Ms Nina should have been in there a long time ago.
(r / recommend-01
      :ARG1 (b / be-located-at-91
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Ms""
                        :op2 ""Nina""))
            :ARG2 (t / there)
            :time (b2 / before
                  :op1 (n2 / now)
                  :quant (t2 / time
                        :ARG1-of (l / long-03)))))"
Some great artist right there.,"# ::snt Some great artist right there.
(a / artist
      :mod (g / great)
      :mod (s / some)
      :location (t / there
            :mod (r / right)))"
Finally... more than deserved.,"# ::snt Finally... more than deserved.
(d / deserve-01
      :time (f / final)
      :ARG2-of (h / have-degree-91
            :ARG3 (m / more)))"
Love Them Both. Congrats &lt;3,"# ::snt Love Them Both. Congrats &lt;3
(m / multi-sentence
      :snt1 (l / love-01
            :ARG1 (t / they
                  :quant (b / both)))
      :snt2 (a / and
            :op1 (c / congratulate-01)
            :op2 (l2 / lt;3)))"
,"# ::snt 
(a / amr-empty)"
"Will that Richie Sambora and Jon Bon Jovi put their differences aside for one night, Harry?","# ::snt Will that Richie Sambora and Jon Bon Jovi put their differences aside for one night, Harry?
(a / ask-01
      :ARG0 (ii / i)
      :ARG1 (p / put-01
            :ARG0 (a2 / and
                  :op1 (p2 / person
                        :name (n / name
                              :op1 ""Richie""
                              :op2 ""Sambora""))
                  :op2 (p3 / person
                        :name (n2 / name
                              :op1 ""Jon""
                              :op2 ""Bon""
                              :op3 ""Jovi"")))
            :ARG1 (d / differ-01
                  :ARG0 p2
                  :ARG1 p3)
            :ARG2 (a3 / aside)
            :duration (n3 / night
                  :quant 1)
            :polarity (a4 / amr-unknown))
      :ARG2 (p4 / person
            :name (n4 / name
                  :op1 ""Harry"")))"
Wonder if hell ride in on a steel horse,"# ::snt Wonder if hell ride in on a steel horse
(w / wonder-01
      :ARG0 (ii / i)
      :ARG1 (r / ride-01
            :ARG0 (h / hell)
            :manner (h2 / horse
                  :consist-of (s / steel))))"
Utterly happy for Bon Jovi,"# ::snt Utterly happy for Bon Jovi
(h / happy-01
      :ARG1 (p / person
            :name (n / name
                  :op1 ""Bon""
                  :op2 ""Jovi""))
      :degree (u / utter))"
Love,"# ::snt Love
(l / love-01)"
I am sooooo in love with him since i am ...!!,"# ::snt I am sooooo in love with him since i am ...!!
(l / love-01
      :ARG0 (ii / i)
      :ARG1 (h / he)
      :degree (s / so)
      :ARG1-of (c / cause-01)
      :ARG0-of c)"
"Eh, he just needs a new destination.","# ::snt Eh, he just needs a new destination.
(n / need-01
      :ARG0 (h / he)
      :ARG1 (d / destination
            :ARG1-of (n2 / new-01))
      :mod (j / just)
      :mod (e / eh
            :mode expressive))"
Yaaay Nina Simone!!,"# ::snt Yaaay Nina Simone!!
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (y / yaaay)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""Nina""
                  :op2 ""Simone"")))"
is in good company.,"# ::snt is in good company.
(b / be-located-at-91
      :ARG2 (c / company
            :ARG1-of (g / good-02)))"
"Can't believe Nina Simone isn't already, I just assumed she was...","# ::snt Can't believe Nina Simone isn't already, I just assumed she was...
(a / and
      :op1 (p / possible-01
            :polarity -
            :ARG1 (b / believe-01
                  :ARG0 (ii / i)
                  :ARG1 (b2 / be-temporally-at-91
                        :polarity -
                        :ARG1 (p2 / person
                              :name (n / name
                                    :op1 ""Nina""
                                    :op2 ""Simone""))
                        :ARG2 (a2 / already))))
      :op2 (a3 / assume-02
            :ARG0 ii
            :ARG1 b2
            :mod (j / just)))"
,"# ::snt 
(a / amr-empty)"
Love Nina Simone!,"# ::snt Love Nina Simone!
(l / love-01
      :ARG1 (p / person
            :name (n / name
                  :op1 ""Nina""
                  :op2 ""Simone"")))"
Congratulations,"# ::snt Congratulations
(c / congratulate-01)"
Congratulations!,"# ::snt Congratulations!
(c / congratulate-01
      :mode expressive)"
,"# ::snt 
(a / amr-empty)"
If you need check it,"# ::snt If you need check it
(c / check-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :condition (n / need-01
            :ARG0 y))"
:But no Warren Zevon,"# ::snt :But no Warren Zevon
(c / contrast-01
      :ARG2 (p / person
            :polarity -
            :name (n / name
                  :op1 ""Warren""
                  :op2 ""Zevon"")))"
Headline should be Sister Rosetta Tharp got in!,"# ::snt Headline should be Sister Rosetta Tharp got in!
(r / recommend-01
      :ARG1 (h / headline-01
            :ARG1 (g / get-05
                  :ARG0 (p / person
                        :name (n / name
                              :op1 ""Rosetta""
                              :op2 ""Tharp"")
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG2 (s / sister)))
                  :ARG1 (ii / inside))))"
Does Bruce Springsteen put him in ?,"# ::snt Does Bruce Springsteen put him in ?
(p / put-01
      :ARG0 (p2 / person
            :name (n / name
                  :op1 ""Bruce""
                  :op2 ""Springsteen""))
      :ARG1 (h / he)
      :polarity (a / amr-unknown))"
