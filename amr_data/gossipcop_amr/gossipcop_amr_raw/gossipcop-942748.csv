comment,amr
Who?,"# ::snt Who?
(a / amr-unknown)"
Again... you forgot to add again,"# ::snt Again... you forgot to add again
(f / forget-01
      :ARG0 (y / you)
      :ARG1 (a / add-01
            :ARG0 y
            :mod (a2 / again)))"
,"# ::snt 
(a / amr-empty)"
Hes got a problem and its not only because hes still got feelings for Sam.,"# ::snt Hes got a problem and its not only because hes still got feelings for Sam.
(a / and
      :op1 (g / get-02
            :ARG0 (h / he)
            :ARG1 (p / problem))
      :op2 (c / cause-01
            :ARG0 (f / feel-01
                  :ARG0 h
                  :ARG1 (t / thing)
                  :ARG2 (p2 / person
                        :name (n / name
                              :op1 ""Sam""))
                  :mod (s / still))
            :ARG1 g
            :mod (o / only
                  :polarity -)))"
So?,"# ::snt So?
(s / so
      :polarity (a / amr-unknown))"
your boy fuckin up lol,"# ::snt your boy fuckin up lol
(b / blow-up-06
      :mode expressive
      :ARG1 (b2 / boy
            :poss (y / you))
      :mod (f / fucking
            :mode expressive)
      :ARG2-of (l / laugh-01
            :ARG0 (ii / i)
            :manner (l2 / loud)))"
It seem like a really good idea to keep putting these people on television and rewarding them for this kind of behavior,"# ::snt It seem like a really good idea to keep putting these people on television and rewarding them for this kind of behavior
(s / seem-01
      :ARG1 (ii / idea
            :ARG1-of (g / good-02
                  :degree (r / really))
            :domain (a / and
                  :op1 (k / keep-02
                        :ARG1 (p / put-01
                              :ARG1 (p2 / person
                                    :mod (t / this))
                              :ARG2 (t2 / television)))
                  :op2 (r2 / reward-01
                        :ARG1 p2
                        :ARG2 (b / behave-01
                              :ARG0 p2
                              :mod (k2 / kind
                                    :mod (t3 / this)))))))"
Two losers,"# ::snt Two losers
(p / person
      :quant 2
      :mod (l / losers))"
,"# ::snt 
(a / amr-empty)"
Rough bunch of people.,"# ::snt Rough bunch of people.
(b / bunch
      :mode expressive
      :consist-of (p / person)
      :ARG1-of (t / tough-02))"
He is still in love with Sam,"# ::snt He is still in love with Sam
(l / love-01
      :ARG0 (h / he)
      :ARG1 (p / person
            :name (n / name
                  :op1 ""Sam""))
      :mod (s / still))"
