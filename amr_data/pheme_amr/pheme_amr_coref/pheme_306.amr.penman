# ::snt Des super hros
# ::tokens ["Des", "super", "hros"]
# ::lemmas ["Des", "super", "hro"]
(c1-0 / hros
      :degree (c1-1 / super)
      :mode expressive)

# ::snt Moment siege ended... : : Police storm hostage-taker at Paris grocer
# ::tokens ["Moment", "siege", "ended", "...", ":", ":", "Police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer"]
# ::lemmas ["moment", "siege", "end", "...", ":", ":", "police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer"]
(c2-1 / multi-sentence
      :snt1 (c2-3 / end-01
                  :ARG1 (c2-9 / siege-01
                              :mod (c2-5 / moment)))
      :snt2 (c2-2 / storm-02
                  :ARG0 (c2-6 / police)
                  :ARG1 (c2-11 / person
                               :ARG0-of (c2-10 / take-01
                                               :ARG1 (c2-0 / hostage)))
                  :location (c2-8 / grocer
                                  :location (c2-7 / city
                                                  :name (c2-4 / name
                                                              :op1 "Paris")))))

# ::snt What a photo. : : Police storm hostage-taker at Paris grocer
# ::tokens ["What", "a", "photo", ".", ":", ":", "Police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer"]
# ::lemmas ["what", "a", "photo", ".", ":", ":", "police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer"]
(c3-1 / multi-sentence
      :snt1 (c3-5 / photo
                  :degree (c3-8 / so))
      :snt2 (c3-3 / storm-02
                  :ARG0 (c3-10 / police)
                  :ARG1 (c3-2 / person
                              :ARG0-of (c3-9 / take-01
                                             :ARG1 (c3-0 / hostage)))
                  :location (c3-7 / grocer
                                  :location (c3-6 / city
                                                  :name (c3-4 / name
                                                              :op1 "Paris")))))

# ::snt : : Police storm hostage-taker at Paris grocer . Exterminated
# ::tokens [":", ":", "Police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer", ".", "Exterminated"]
# ::lemmas [":", ":", "police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer", ".", "exterminate"]
(c4-1 / multi-sentence
      :snt1 (c4-7 / storm-02
                  :ARG0 (c4-3 / police)
                  :ARG1 (c4-9 / person
                              :ARG0-of (c4-8 / take-01
                                             :ARG1 (c4-0 / hostage)))
                  :location (c4-5 / grocer
                                  :location (c4-4 / city
                                                  :name (c4-2 / name
                                                              :op1 "Paris"))))
      :snt2 (c4-6 / terminate-01))

# ::snt Akala ko serendra
# ::tokens ["Akala", "ko", "serendra"]
# ::lemmas ["Akala", "ko", "serendra"]
(c5-0 / ko-srendra
      :mod (c5-1 / Akala))

# ::snt Good!
# ::tokens ["Good", "!"]
# ::lemmas ["good", "!"]
(c6-0 / good-02
      :mode expressive)

# ::snt GOOD JOB, FRANCE! TERRORISTS KILLED! No possibility of OBAMA RELEASING THEM.
# ::tokens ["GOOD", "JOB", ",", "FRANCE", "!", "TERRORISTS", "KILLED", "!", "No", "possibility", "of", "OBAMA", "RELEASING", "THEM", "."]
# ::lemmas ["GOOD", "JOB", ",", "FRANCE", "!", "TERRORISTS", "kill", "!", "no", "possibility", "of", "OBAMA", "RELEASING", "THEM", "."]
(c7-1 / multi-sentence
      :snt1 (c7-9 / say-01
                  :ARG1 (c7-0 / job
                              :ARG1-of (c7-7 / good-02))
                  :ARG2 (c7-6 / country
                              :name (c7-2 / name
                                          :op1 "France")))
      :snt2 (c7-11 / kill-01
                   :ARG1 (c7-10 / terrorist))
      :snt3 (c7-4 / possible-01
                  :ARG1 (c7-5 / release-01
                              :ARG0 (c7-12 / person
                                           :name (c7-3 / name
                                                       :op1 "Obama"))
                              :ARG1 (c7-8 / they))
                  :polarity -))

# ::snt hahaha sa paris yan... wag naman sana mangyari sa
# ::tokens ["hahaha", "sa", "paris", "yan", "...", "wag", "naman", "sana", "mangyari", "sa"]
# ::lemmas ["hahaha", "sa", "paris", "yan", "...", "wag", "naman", "sana", "mangyari", "sa"]
(c8-3 / multi-sentence
      :snt1 (c8-0 / haha
                  :topic (c8-6 / paris
                               :poss (c8-1 / you))
                  :mode expressive)
      :snt2 (c8-2 / wag
                  :ARG1-of (c8-8 / cause-01
                                 :ARG0 (c8-12 / person
                                              :ARG0-of (c8-13 / have-rel-role-91
                                                              :ARG1 (c8-4 / person)
                                                              :ARG2 (c8-10 / sister))))
                  :mode expressive)
      :snt3 (c8-5 / wag
                  :ARG1-of c8-8
                  :ARG0 (c8-11 / person
                               :ARG0-of c8-13
                               :ARG1 (c8-9 / you)
                               :ARG2 (c8-7 / mangyari))
                  :mode expressive))

# ::snt : : Police storm hostage-taker at Paris grocer wow!
# ::tokens [":", ":", "Police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer", "wow", "!"]
# ::lemmas [":", ":", "police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer", "wow", "!"]
(c11-6 / storm-02
       :ARG0 (c11-3 / police)
       :ARG1 (c11-8 / person
                    :ARG0-of (c11-7 / take-01
                                    :ARG1 (c11-0 / hostage)))
       :location (c11-5 / grocer
                        :location (c11-4 / city
                                         :name (c11-2 / name
                                                      :op1 "Paris")))
       :mod (c11-1 / wow
                   :mode expressive)
       :mode expressive)

# ::snt mais Ca a pas explos c juste les balles enfin je sais pas mais a me gave serieux
# ::tokens ["mais", "Ca", "a", "pas", "explos", "c", "juste", "les", "balles", "enfin", "je", "sais", "pas", "mais", "a", "me", "gave", "serieux"]
# ::lemmas ["mais", "Ca", "a", "pas", "explos", "c", "juste", "les", "balle", "enfin", "je", "sais", "pas", "mais", "a", "i", "give", "serieux"]
(c12-2 / multi-sentence
       :snt1 (c12-11 / cause-01
                     :ARG0 (c12-16 / amr-unknown)
                     :ARG1 (c12-9 / possible-01
                                  :ARG1 (c12-5 / explode-01
                                               :ARG1 (c12-3 / ball))))
       :snt2 (c12-10 / cause-01
                     :ARG0 (c12-6 / amr-unknown)
                     :ARG1 (c12-8 / and
                                  :op1 c12-3
                                  :mod (c12-0 / just)
                                  :ARG1-of (c12-4 / enfin-00))
                     :op2 (c12-1 / et-cetera))
       :snt3 (c12-13 / cause-01
                     :ARG0 (c12-14 / amr-unknown)
                     :ARG1 (c12-12 / give-16
                                   :ARG0 (c12-7 / i)
                                   :ARG1 (c12-15 / serieux))))

# ::snt saves cost of a trial
# ::tokens ["saves", "cost", "of", "a", "trial"]
# ::lemmas ["save", "cost", "of", "a", "trial"]
(c14-0 / save-01
       :ARG1 (c14-2 / cost-01
                    :ARG1 (c14-1 / try-02)))

# ::snt : : Police storm hostage-taker at Paris grocer
# ::tokens [":", ":", "Police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer"]
# ::lemmas [":", ":", "police", "storm", "hostage", "-", "taker", "at", "Paris", "grocer"]
(c16-5 / storm-02
       :ARG0 (c16-2 / police)
       :ARG1 (c16-7 / person
                    :ARG0-of (c16-6 / take-01
                                    :ARG1 (c16-0 / hostage)))
       :location (c16-4 / grocer
                        :location (c16-3 / city
                                         :name (c16-1 / name
                                                      :op1 "Paris"))))

# ::snt Hello, I am contacting you from BBC News. Could you tell me the copyright of this image? May we use it?
# ::tokens ["Hello", ",", "I", "am", "contacting", "you", "from", "BBC", "News", ".", "Could", "you", "tell", "me", "the", "copyright", "of", "this", "image", "?", "May", "we", "use", "it", "?"]
# ::lemmas ["hello", ",", "i", "be", "contact", "you", "from", "BBC", "News", ".", "could", "you", "tell", "i", "the", "copyright", "of", "this", "image", "?", "may", "we", "use", "it", "?"]
(c17-0 / multi-sentence
       :snt1 (c17-5 / hello
                    :mode expressive)
       :snt2 (c17-16 / contact-01
                     :ARG0 (c17-12 / i)
                     :ARG1 (c17-15 / you)
                     :source (c17-6 / broadcast-program
                                    :name (c17-7 / name
                                                 :op1 "BBC"
                                                 :op2 "News")))
       :snt3 (c17-1 / possible-01
                    :polarity (c17-4 / amr-unknown)
                    :ARG1 (c17-18 / tell-01
                                  :ARG0 (c17-17 / you)
                                  :ARG1 (c17-2 / copyright-01
                                               :ARG1 (c17-13 / image
                                                             :mod (c17-14 / this)))
                                  :ARG2 c17-12)
                    :polarity (c17-11 / amr-unknown))
       :snt4 (c17-3 / permit-01
                    :ARG1 (c17-10 / use-01
                                  :ARG0 (c17-9 / we)
                                  :ARG1 c17-13)
                    :polarity (c17-8 / amr-unknown)))

# ::snt to bad couldn't take them alive to drag behind some smart cars
# ::tokens ["to", "bad", "could", "n't", "take", "them", "alive", "to", "drag", "behind", "some", "smart", "cars"]
# ::lemmas ["to", "bad", "could", "not", "take", "they", "alive", "to", "drag", "behind", "some", "smart", "car"]
(c18-3 / possible-01
       :ARG1 (c18-9 / take-04
                    :ARG1 (c18-0 / live-01
                                 :ARG0 (c18-7 / they))
                    :purpose (c18-4 / drag-01
                                    :ARG1 c18-7
                                    :ARG2 (c18-1 / behind
                                                 :op1 (c18-5 / car
                                                             :ARG1-of (c18-8 / smart-06)
                                                             :quant (c18-2 / some)))))
       :ARG1-of (c18-6 / bad-07)
       :polarity -)
