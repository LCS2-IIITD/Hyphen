# ::snt !!! : .....for a cover-up to be successful....you must first discredit the victim.....
# ::tokens ["!", "!", "!", ":", ".....", "for", "a", "cover", "-", "up", "to", "be", "successful", "....", "you", "must", "first", "discredit", "the", "victim", "....."]
# ::lemmas ["!", "!", "!", ":", ".....", "for", "a", "cover", "-", "up", "to", "be", "successful", "....", "you", "must", "first", "discredit", "the", "victim", "....."]
(c1-2 / obligate-01
      :ARG1 (c1-0 / you)
      :ARG2 (c1-4 / discredit-01
                  :ARG0 c1-0
                  :ARG1 (c1-3 / victim)
                  :time (c1-1 / first))
      :purpose (c1-6 / succeed-01
                     :ARG1 (c1-5 / cover-up-04)))

# ::snt single time someone dies. If you know about the incident. Get the information out there. Let us all know. I personally have
# ::tokens ["single", "time", "someone", "dies", ".", "If", "you", "know", "about", "the", "incident", ".", "Get", "the", "information", "out", "there", ".", "Let", "us", "all", "know", ".", "I", "personally", "have"]
# ::lemmas ["single", "time", "someone", "die", ".", "if", "you", "know", "about", "the", "incident", ".", "get", "the", "information", "out", "there", ".", "let", "we", "all", "know", ".", "i", "personally", "have"]
(c2-4 / multi-sentence
      :snt1 (c2-11 / die-01
                   :ARG1 (c2-14 / someone)
                   :time (c2-15 / time
                                :ARG1-of (c2-7 / single-02)))
      :snt2 (c2-0 / have-condition-91
                  :ARG1 (c2-12 / get-05
                               :ARG0 (c2-1 / you)
                               :ARG1 (c2-8 / information)
                               :ARG2 (c2-6 / out-there)
                               :mode imperative)
                  :ARG2 (c2-9 / know-01
                              :ARG0 c2-1
                              :ARG1 c2-8))
      :snt3 (c2-3 / let-know-07
                  :ARG0 c2-1
                  :ARG1 (c2-2 / we
                              :mod (c2-16 / all))
                  :mode imperative)
      :snt4 (c2-5 / have-03
                  :ARG0 (c2-13 / i)
                  :ARG1-of (c2-10 / personal-02)))

# ::snt I DO get upset every time someone loses their life. But its not practical to think that I personally can be aware of every
# ::tokens ["I", "DO", "get", "upset", "every", "time", "someone", "loses", "their", "life", ".", "But", "its", "not", "practical", "to", "think", "that", "I", "personally", "can", "be", "aware", "of", "every"]
# ::lemmas ["i", "do", "get", "upset", "every", "time", "someone", "lose", "their", "life", ".", "but", "its", "not", "practical", "to", "think", "that", "i", "personally", "can", "be", "aware", "of", "every"]
(c3-1 / multi-sentence
      :snt1 (c3-2 / upset-01
                  :ARG0 (c3-0 / lose-02
                              :ARG0 (c3-11 / someone)
                              :ARG1 (c3-10 / life
                                           :poss c3-11))
                  :ARG1 (c3-4 / i)
                  :frequency (c3-7 / rate-entity-91
                                   :ARG4 c3-0))
      :snt2 (c3-8 / contrast-01
                  :ARG2 (c3-6 / practical-03
                              :ARG1 (c3-12 / think-01
                                           :ARG0 (c3-9 / i)
                                           :ARG1 (c3-13 / possible-01
                                                        :ARG1 (c3-5 / realize-01
                                                                    :ARG0 c3-9
                                                                    :ARG1 c3-0
                                                                    :ARG1-of (c3-3 / personal-02))))
                              :polarity -)))

# ::snt have dedicated much of work/life to ensure that people have better lives than what is currently going on. So I do care. to
# ::tokens ["have", "dedicated", "much", "of", "work", "/", "life", "to", "ensure", "that", "people", "have", "better", "lives", "than", "what", "is", "currently", "going", "on", ".", "So", "I", "do", "care", ".", "to"]
# ::lemmas ["have", "dedicate", "much", "of", "work", "/", "life", "to", "ensure", "that", "people", "have", "well", "life", "than", "what", "be", "currently", "go", "on", ".", "so", "i", "do", "care", ".", "to"]
(c4-1 / multi-sentence
      :snt1 (c4-3 / dedicate-01
                  :ARG0 (c4-14 / i)
                  :ARG1 (c4-6 / slash
                              :op1 (c4-13 / work-01)
                              :op2 (c4-8 / life)
                              :quant (c4-11 / much))
                  :ARG2 (c4-10 / ensure-01
                               :ARG0 c4-14
                               :ARG1 (c4-18 / live-01
                                            :ARG0 (c4-2 / person)
                                            :ARG1-of (c4-7 / have-degree-91
                                                           :ARG2 (c4-12 / good-02
                                                                        :ARG1 c4-18)
                                                           :ARG3 (c4-9 / more)
                                                           :ARG4 (c4-0 / live-01
                                                                       :ARG1-of (c4-4 / go-on-15
                                                                                      :time (c4-17 / current)))))))
      :snt2 (c4-5 / cause-01
                  :ARG1 (c4-16 / care-01
                               :ARG0 (c4-15 / i))))

# ::snt : .....for a cover-up to be successful....you must first discredit the victim..... RIGHT!!!!
# ::tokens [":", ".....", "for", "a", "cover", "-", "up", "to", "be", "successful", "....", "you", "must", "first", "discredit", "the", "victim", ".....", "RIGHT", "!", "!", "!", "!"]
# ::lemmas [":", ".....", "for", "a", "cover", "-", "up", "to", "be", "successful", "....", "you", "must", "first", "discredit", "the", "victim", ".....", "right", "!", "!", "!", "!"]
(c5-2 / multi-sentence
      :snt1 (c5-3 / obligate-01
                  :ARG2 (c5-5 / discredit-01
                              :ARG0 (c5-0 / you)
                              :ARG1 (c5-4 / victim)
                              :time (c5-1 / first))
                  :purpose (c5-8 / succeed-01
                                 :ARG1 (c5-6 / cover-up-04)))
      :snt2 (c5-7 / right-06
                  :mode expressive))

# ::snt say that I dont because I dont tweet about every single murder is ridiculous. I dont know about each and every one of them
# ::tokens ["say", "that", "I", "do", "nt", "because", "I", "do", "nt", "tweet", "about", "every", "single", "murder", "is", "ridiculous", ".", "I", "do", "nt", "know", "about", "each", "and", "every", "one", "of", "them"]
# ::lemmas ["say", "that", "i", "do", "not", "because", "i", "do", "not", "tweet", "about", "every", "single", "murder", "be", "ridiculous", ".", "i", "do", "not", "know", "about", "each", "and", "every", "one", "of", "they"]
(c6-2 / multi-sentence
      :snt1 (c6-9 / ridiculous-02
                  :ARG1 (c6-13 / say-01
                               :ARG0 (c6-6 / i)
                               :ARG1 (c6-10 / do-02
                                            :ARG0 c6-6
                                            :ARG1-of (c6-11 / cause-01
                                                            :ARG0 (c6-14 / tweet-01
                                                                         :ARG0 c6-6
                                                                         :topic (c6-8 / murder-01
                                                                                      :mod (c6-4 / every)
                                                                                      :ARG1-of (c6-5 / single-02))
                                                                         :polarity -))
                                            :polarity -)))
      :snt2 (c6-7 / know-01
                  :ARG0 (c6-12 / i)
                  :topic (c6-15 / and
                                :op1 (c6-3 / each)
                                :op2 (c6-0 / every)
                                :ARG1-of (c6-1 / include-91
                                               :ARG2 c6-8))
                  :polarity -))

# ::snt u got a link?
# ::tokens ["u", "got", "a", "link", "?"]
# ::lemmas ["u", "get", "a", "link", "?"]
(c7-2 / get-01
      :polarity (c7-3 / amr-unknown)
      :ARG0 (c7-0 / you)
      :ARG1 (c7-1 / link))

# ::snt .....for a cover-up to be successful....you must first discredit the victim.....
# ::tokens [".....", "for", "a", "cover", "-", "up", "to", "be", "successful", "....", "you", "must", "first", "discredit", "the", "victim", "....."]
# ::lemmas [".....", "for", "a", "cover", "-", "up", "to", "be", "successful", "....", "you", "must", "first", "discredit", "the", "victim", "....."]
(c8-2 / obligate-01
      :ARG1 (c8-0 / you)
      :ARG2 (c8-4 / discredit-01
                  :ARG0 c8-0
                  :ARG1 (c8-3 / victim)
                  :ord (c8-1 / ordinal-entity
                             :value 1))
      :purpose (c8-6 / succeed-01
                     :ARG1 (c8-5 / cover-up-04)))

# ::snt thats what it seems like
# ::tokens ["that", "s", "what", "it", "seems", "like"]
# ::lemmas ["that", "s", "what", "it", "seem", "like"]
(c9-0 / seem-01
      :ARG1 (c9-1 / resemble-01
                  :ARG1 (c9-3 / it)
                  :ARG2 (c9-2 / that)))

# ::snt the owner &amp; employees already stated that was NOT the robber, so that robbery story is beyond dead. NEXT!
# ::tokens ["the", "owner", "&", "amp", ";", "employees", "already", "stated", "that", "was", "NOT", "the", "robber", ",", "so", "that", "robbery", "story", "is", "beyond", "dead", ".", "NEXT", "!"]
# ::lemmas ["the", "owner", "&", "amp", ";", "employee", "already", "state", "that", "be", "not", "the", "robber", ",", "so", "that", "robbery", "story", "be", "beyond", "dead", ".", "NEXT", "!"]
(c10-0 / multi-sentence
       :snt1 (c10-4 / state-01
                    :ARG0 (c10-6 / and
                                 :op1 (c10-2 / person
                                             :ARG0-of (c10-15 / own-01))
                                 :op2 (c10-5 / person
                                             :name (c10-11 / name
                                                           :op1 "amp")))
                    :ARG1 (c10-7 / person
                                 :ARG0-of (c10-12 / rob-01)
                                 :domain (c10-13 / person
                                                 :ARG1-of (c10-9 / employ-01))
                                 :polarity -)
                    :time (c10-14 / already)
                    :ARG0-of (c10-17 / cause-01
                                     :ARG1 (c10-3 / die-01
                                                  :ARG1 (c10-10 / story
                                                                :topic (c10-1 / rob-01)
                                                                :mod (c10-18 / that))
                                                  :degree (c10-8 / beyond))))
       :snt2 (c10-16 / next
                     :mode expressive))

# ::snt said Barack Obama
# ::tokens ["said", "Barack", "Obama"]
# ::lemmas ["say", "Barack", "Obama"]
(c11-0 / say-01
       :ARG0 (c11-1 / person
                    :name (c11-2 / name
                                 :op1 "Barack"
                                 :op2 "Obama")))

# ::snt the great part about being American is that I CAN get upset about whatever I want. And I CAN express that anger.
# ::tokens ["the", "great", "part", "about", "being", "American", "is", "that", "I", "CAN", "get", "upset", "about", "whatever", "I", "want", ".", "And", "I", "CAN", "express", "that", "anger", "."]
# ::lemmas ["the", "great", "part", "about", "be", "American", "be", "that", "i", "can", "get", "upset", "about", "whatever", "i", "want", ".", "and", "i", "can", "express", "that", "anger", "."]
(c12-1 / multi-sentence
       :snt1 (c12-9 / part
                    :mod (c12-11 / great)
                    :topic (c12-15 / person
                                   :mod (c12-10 / country
                                                :name (c12-8 / name
                                                             :op1 "America"))
                                   :domain (c12-6 / i))
                    :domain (c12-3 / possible-01
                                   :ARG1 (c12-2 / upset-01
                                                :ARG0 (c12-0 / whatever
                                                             :ARG1-of (c12-7 / want-01
                                                                             :ARG0 c12-6))
                                                :ARG1 c12-6)))
       :snt2 (c12-16 / and
                     :op2 (c12-14 / possible-01
                                  :ARG1 (c12-4 / express-01
                                               :ARG0 (c12-12 / i)
                                               :ARG1 (c12-5 / anger-01
                                                            :ARG0 c12-12
                                                            :mod (c12-13 / that))))))
