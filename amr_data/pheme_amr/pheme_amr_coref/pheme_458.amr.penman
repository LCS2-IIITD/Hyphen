# ::snt Even when there is no Isam in the soup, it is Jonathan. My dear, God will help us.
# ::tokens ["Even", "when", "there", "is", "no", "Isam", "in", "the", "soup", ",", "it", "is", "Jonathan", ".", "My", "dear", ",", "God", "will", "help", "us", "."]
# ::lemmas ["even", "when", "there", "be", "no", "Isam", "in", "the", "soup", ",", "it", "be", "Jonathan", ".", "my", "dear", ",", "God", "will", "help", "we", "."]
(c1-2 / multi-sentence
      :snt1 (c1-9 / person
                  :name (c1-7 / name
                              :op1 "Jonathan")
                  :concession (c1-5 / even-when
                                    :op1 (c1-4 / be-located-at-91
                                               :ARG1 (c1-13 / person
                                                            :name (c1-8 / name
                                                                        :op1 "Isam"))
                                               :ARG2 (c1-12 / soup)
                                               :polarity -)))
      :snt2 (c1-0 / help-01
                  :ARG0 (c1-3 / person
                              :name (c1-10 / name
                                           :op1 "God"))
                  :ARG2 (c1-1 / we)
                  :mod (c1-11 / dear
                              :poss (c1-6 / i))))

# ::snt a sign that many people who appear outwardly and seen as human are likely to be animals within.
# ::tokens ["a", "sign", "that", "many", "people", "who", "appear", "outwardly", "and", "seen", "as", "human", "are", "likely", "to", "be", "animals", "within", "."]
# ::lemmas ["a", "sign", "that", "many", "people", "who", "appear", "outwardly", "and", "see", "as", "human", "be", "likely", "to", "be", "animal", "within", "."]
(c2-8 / signal-07
      :ARG1 (c2-2 / likely-01
                  :ARG1 (c2-9 / animal
                              :location (c2-1 / within)
                              :domain (c2-7 / person
                                            :quant (c2-3 / many)
                                            :ARG1-of (c2-6 / appear-02
                                                           :manner (c2-4 / outward))
                                            :ARG1-of (c2-5 / see-01
                                                           :ARG2 (c2-0 / human))))))

# ::snt Very very emergency situations
# ::tokens ["Very", "very", "emergency", "situations"]
# ::lemmas ["very", "very", "emergency", "situation"]
(c3-0 / situation
      :mod (c3-2 / emergency)
      :degree (c3-1 / very
                    :degree c3-1))

# ::snt Who else if not GEJ..... God will help us.... No salt in my soup at home...it is Jonathan.....
# ::tokens ["Who", "else", "if", "not", "GEJ", ".....", "God", "will", "help", "us", "....", "No", "salt", "in", "my", "soup", "at", "home", "...", "it", "is", "Jonathan", "....."]
# ::lemmas ["who", "else", "if", "not", "GEJ", ".....", "God", "will", "help", "we", "....", "no", "salt", "in", "my", "soup", "at", "home", "...", "it", "be", "Jonathan", "....."]
(c4-2 / multi-sentence
      :snt1 (c4-0 / help-01
                  :ARG0 (c4-8 / person
                              :name (c4-6 / name
                                          :op1 "God"))
                  :ARG1 (c4-1 / we)
                  :condition (c4-11 / person
                                    :name (c4-7 / name
                                                :op1 "GEJ")
                                    :polarity -))
      :snt2 (c4-10 / salt
                   :location (c4-4 / soup
                                   :poss (c4-5 / i)
                                   :location (c4-12 / home))
                   :polarity -)
      :snt3 (c4-3 / person
                  :name (c4-9 / name
                              :op1 "Jonathan")))

# ::snt French government raises security alert to highest level after deadly attack at magazine Charlie Hebdo.
# ::tokens ["French", "government", "raises", "security", "alert", "to", "highest", "level", "after", "deadly", "attack", "at", "magazine", "Charlie", "Hebdo", "."]
# ::lemmas ["French", "government", "raise", "security", "alert", "to", "high", "level", "after", "deadly", "attack", "at", "magazine", "Charlie", "Hebdo", "."]
(c5-8 / raise-01
      :ARG0 (c5-11 / government-organization
                   :ARG0-of (c5-10 / govern-01
                                   :ARG1 (c5-9 / country
                                               :name (c5-5 / name
                                                           :op1 "France"))))
      :ARG1 (c5-16 / alert-01
                   :ARG2 (c5-13 / security))
      :ARG4 (c5-1 / level
                  :ARG1-of (c5-0 / have-degree-91
                                 :ARG2 (c5-2 / high-02)
                                 :ARG3 (c5-3 / most)))
      :time (c5-4 / after
                  :op1 (c5-6 / attack-01
                             :ARG1 (c5-7 / magazine
                                         :name (c5-12 / name
                                                      :op1 "Charlie"
                                                      :op2 "Ch Hebdo"))
                             :ARG0-of (c5-14 / cause-01
                                             :ARG1 (c5-15 / die-01)))))

# ::snt Won't surprise me if they threw weapons &amp; balaclavas away &amp; simply boarded underground railway to the UK!
# ::tokens ["Wo", "n't", "surprise", "me", "if", "they", "threw", "weapons", "&", "amp", ";", "balaclavas", "away", "&", "amp", ";", "simply", "boarded", "underground", "railway", "to", "the", "UK", "!"]
# ::lemmas ["will", "not", "surprise", "i", "if", "they", "throw", "weapon", "&", "amp", ";", "balaclavas", "away", "&", "amp", ";", "simply", "board", "underground", "railway", "to", "the", "UK", "!"]
(c6-12 / surprise-01
       :ARG0 (c6-13 / throw-01
                    :ARG0 (c6-11 / they)
                    :ARG1 (c6-14 / and
                                 :op1 (c6-0 / weapon)
                                 :op2 (c6-4 / amp))
                    :op2 (c6-2 / balaclava
                               :direction (c6-7 / away))
                    :op3 (c6-9 / board-01
                               :ARG0 c6-11
                               :ARG1 (c6-8 / railway
                                           :mod (c6-1 / underground)
                                           :destination (c6-10 / country
                                                               :name (c6-6 / name
                                                                           :op1 "UK")))
                               :ARG1-of (c6-3 / simple-02)))
       :ARG1 (c6-5 / i)
       :polarity -)

# ::snt If it's in Nig., they will blame Jonathan. Ignorant Fellows.
# ::tokens ["If", "it", "'s", "in", "Nig", ".", ",", "they", "will", "blame", "Jonathan", ".", "Ignorant", "Fellows", "."]
# ::lemmas ["if", "it", "be", "in", "Nig", ".", ",", "they", "will", "blame", "Jonathan", ".", "Ignorant", "Fellows", "."]
(c7-0 / multi-sentence
      :snt1 (c7-1 / blame-01
                  :ARG0 (c7-9 / they)
                  :ARG1 (c7-5 / person
                              :name (c7-3 / name
                                          :op1 "Jonathan"))
                  :condition (c7-7 / be-located-at-91
                                   :ARG1 (c7-2 / it)
                                   :ARG2 (c7-8 / country
                                               :name (c7-4 / name
                                                           :op1 "Nigeria"))))
      :snt2 c7-5
      :name (c7-6 / name
                  :op1 "Ignorant"
                  :op2 "Fellows"))
