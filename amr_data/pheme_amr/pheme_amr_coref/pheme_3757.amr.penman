# ::snt : Shout out to for info leading to this discrepancy.
# ::tokens [":", "Shout", "out", "to", "for", "info", "leading", "to", "this", "discrepancy", "."]
# ::lemmas [":", "shout", "out", "to", "for", "info", "lead", "to", "this", "discrepancy", "."]
(c1-4 / shout-out-03
      :ARG0 (c1-0 / you)
      :purpose (c1-2 / information
                     :ARG0-of (c1-1 / lead-03
                                    :ARG2 (c1-3 / discrepancy
                                                :mod (c1-5 / this))))
      :mode imperative)

# ::snt Yeah, I looked.
# ::tokens ["Yeah", ",", "I", "looked", "."]
# ::lemmas ["yeah", ",", "i", "look", "."]
(c2-0 / look-01
      :ARG0 (c2-1 / i))

# ::snt - will not walk, he may limp away with soiled britches, but he is forever tainted. Process Rig!
# ::tokens ["-", "will", "not", "walk", ",", "he", "may", "limp", "away", "with", "soiled", "britches", ",", "but", "he", "is", "forever", "tainted", ".", "Process", "Rig", "!"]
# ::lemmas ["-", "will", "not", "walk", ",", "he", "may", "limp", "away", "with", "soiled", "britche", ",", "but", "he", "be", "forever", "taint", ".", "Process", "Rig", "!"]
(c3-3 / multi-sentence
      :snt1 (c3-9 / contrast-01
                  :ARG1 (c3-1 / walk-01
                              :ARG0 (c3-0 / he)
                              :polarity -)
                  :ARG2 (c3-7 / possible-01
                              :ARG1 (c3-2 / limp-01
                                          :ARG0 c3-0
                                          :direction (c3-13 / away)
                                          :accompanier (c3-6 / britch
                                                             :ARG1-of (c3-10 / soil-01)))))
      :snt2 (c3-11 / taint-01
                   :ARG1 (c3-4 / he)
                   :time (c3-5 / forever))
      :snt3 (c3-8 / rig
                  :mod (c3-12 / process-01)))

# ::snt County dispatches for FPD and at least one other Pd.
# ::tokens ["County", "dispatches", "for", "FPD", "and", "at", "least", "one", "other", "Pd", "."]
# ::lemmas ["county", "dispatch", "for", "FPD", "and", "at", "least", "one", "other", "Pd", "."]
(c4-4 / dispatch-01
      :ARG0 (c4-5 / county)
      :ARG1 (c4-7 / and
                  :op1 (c4-1 / organization
                             :name (c4-3 / name
                                         :op1 "FPD"))
                  :op2 (c4-6 / government-organization
                             :name c4-3
                             :op1 "PDPD")
                  :mod (c4-0 / other)
                  :quant (c4-2 / at-least
                               :op1 1)))

# ::snt plz stop embarrassing yourself. It is county's tape, not ferguson dispatch. Listen all u want on wrong frequency.
# ::tokens ["plz", "stop", "embarrassing", "yourself", ".", "It", "is", "county", "'s", "tape", ",", "not", "ferguson", "dispatch", ".", "Listen", "all", "u", "want", "on", "wrong", "frequency", "."]
# ::lemmas ["plz", "stop", "embarrass", "yourself", ".", "it", "be", "county", "'s", "tape", ",", "not", "ferguson", "dispatch", ".", "listen", "all", "u", "want", "on", "wrong", "frequency", "."]
(c5-3 / multi-sentence
      :snt1 (c5-14 / stop-01
                   :ARG0 (c5-0 / you)
                   :ARG1 (c5-5 / embarrass-01
                               :ARG0 c5-0
                               :ARG1 c5-0)
                   :mode imperative)
      :snt2 (c5-16 / and
                   :op1 (c5-15 / tape
                               :poss (c5-11 / county)
                               :domain (c5-7 / it))
                   :op2 (c5-10 / dispatch-01
                               :ARG2 (c5-12 / incident
                                            :name (c5-9 / name
                                                        :op1 "Ferguson"))
                               :polarity -))
      :snt3 (c5-2 / listen-01
                  :ARG0 (c5-13 / you)
                  :ARG1-of (c5-1 / want-01
                                 :ARG0 c5-13
                                 :mod (c5-6 / all))
                  :manner (c5-4 / frequency
                                :ARG1-of (c5-8 / wrong-04))))

# ::snt Nothing much has changed since Jim Crow in Missouri.
# ::tokens ["Nothing", "much", "has", "changed", "since", "Jim", "Crow", "in", "Missouri", "."]
# ::lemmas ["nothing", "much", "have", "change", "since", "Jim", "Crow", "in", "Missouri", "."]
(c6-6 / change-01
      :ARG1 (c6-3 / nothing
                  :quant (c6-1 / much))
      :time (c6-7 / since
                  :op1 (c6-0 / law
                             :name (c6-4 / name
                                         :op1 "Jim"
                                         :op2 "Crow")
                             :location (c6-2 / state
                                             :name (c6-5 / name
                                                         :op1 "Missouri")))))

# ::snt Anonymous released the entire day and you here them talk to FPD officers. Too many to pull over.
# ::tokens ["Anonymous", "released", "the", "entire", "day", "and", "you", "here", "them", "talk", "to", "FPD", "officers", ".", "Too", "many", "to", "pull", "over", "."]
# ::lemmas ["Anonymous", "release", "the", "entire", "day", "and", "you", "here", "they", "talk", "to", "FPD", "officer", ".", "too", "many", "to", "pull", "over", "."]
(c7-1 / multi-sentence
      :snt1 (c7-7 / and
                  :op1 (c7-12 / release-01
                              :ARG0 (c7-14 / anonymous)
                              :duration (c7-4 / day
                                              :mod (c7-10 / entire)))
                  :op2 (c7-18 / talk-01
                              :ARG0 (c7-15 / you)
                              :ARG1 (c7-3 / person
                                          :ARG0-of (c7-8 / have-org-role-91
                                                         :ARG1 (c7-0 / department
                                                                     :mod (c7-5 / police))
                                                         :ARG2 (c7-16 / officer))
                                          :ARG2-of c7-18)))
      :snt2 (c7-6 / have-quant-91
                  :ARG1 (c7-9 / person
                              :ARG0-of (c7-2 / have-org-role-91
                                             :ARG2 c7-16))
                  :ARG2 (c7-11 / many)
                  :ARG3 (c7-17 / too)
                  :ARG6 (c7-13 / pull-over-05
                               :ARG1 c7-9)))

# ::snt Yep, troll account created to harass Ferguson activists. Look at who it follows.
# ::tokens ["Yep", ",", "troll", "account", "created", "to", "harass", "Ferguson", "activists", ".", "Look", "at", "who", "it", "follows", "."]
# ::lemmas ["Yep", ",", "troll", "account", "create", "to", "harass", "Ferguson", "activist", ".", "look", "at", "who", "it", "follow", "."]
(c8-3 / multi-sentence
      :snt1 (c8-9 / create-01
                  :ARG1 (c8-12 / account
                               :mod (c8-11 / troll))
                  :purpose (c8-0 / harass-01
                                 :ARG0 c8-12
                                 :ARG1 (c8-5 / activist
                                             :mod (c8-8 / city
                                                        :name (c8-6 / name
                                                                    :op1 "Ferguson"))))
                  :mod (c8-1 / yep))
      :snt2 (c8-2 / look-01
                  :ARG0 (c8-10 / you)
                  :ARG1 (c8-7 / person
                              :ARG1-of (c8-4 / follow-02
                                             :ARG0 c8-12))
                  :mode imperative))

# ::snt Shout out to for info leading to this discrepancy.
# ::tokens ["Shout", "out", "to", "for", "info", "leading", "to", "this", "discrepancy", "."]
# ::lemmas ["shout", "out", "to", "for", "info", "lead", "to", "this", "discrepancy", "."]
(c9-3 / shout-out-02
      :ARG1 (c9-1 / information
                  :ARG0-of (c9-0 / lead-03
                                 :ARG2 (c9-2 / discrepancy
                                             :mod (c9-4 / this)))))

# ::snt Prosecutor doesn't want to try the case, no matter the evidence. They are leaking stories to make Brown look guilty.
# ::tokens ["Prosecutor", "does", "n't", "want", "to", "try", "the", "case", ",", "no", "matter", "the", "evidence", ".", "They", "are", "leaking", "stories", "to", "make", "Brown", "look", "guilty", "."]
# ::lemmas ["Prosecutor", "do", "not", "want", "to", "try", "the", "case", ",", "no", "matter", "the", "evidence", ".", "they", "be", "leak", "story", "to", "make", "Brown", "look", "guilty", "."]
(c10-2 / multi-sentence
       :snt1 (c10-0 / want-01
                    :ARG0 (c10-6 / person
                                 :ARG0-of (c10-15 / prosecute-01))
                    :ARG1 (c10-14 / try-02
                                  :ARG0 c10-6
                                  :ARG1 (c10-8 / case-03))
                    :ARG1-of (c10-7 / regardless-91
                                    :ARG2 (c10-4 / evidence-01))
                    :polarity -)
       :snt2 (c10-1 / leak-01
                    :ARG0 (c10-11 / they)
                    :ARG1 (c10-12 / story)
                    :purpose (c10-9 / make-02
                                    :ARG0 c10-11
                                    :ARG1 (c10-10 / look-02
                                                  :ARG0 (c10-3 / person
                                                               :name (c10-5 / name
                                                                            :op1 "Brown"))
                                                  :ARG1 (c10-13 / guilty-01
                                                                :ARG1 c10-3)))))

# ::snt As former dispatch supervisor I listened to the entire tape. Nowhere on it is DW asking for back up.
# ::tokens ["As", "former", "dispatch", "supervisor", "I", "listened", "to", "the", "entire", "tape", ".", "Nowhere", "on", "it", "is", "DW", "asking", "for", "back", "up", "."]
# ::lemmas ["as", "former", "dispatch", "supervisor", "i", "listen", "to", "the", "entire", "tape", ".", "nowhere", "on", "it", "be", "dw", "ask", "for", "back", "up", "."]
(c11-1 / multi-sentence
       :snt1 (c11-0 / listen-01
                    :ARG0 (c11-5 / i
                                 :ARG0-of (c11-11 / supervise-01
                                                  :ARG1 (c11-9 / dispatch-01)
                                                  :time (c11-2 / former)))
                    :ARG1 (c11-12 / tape
                                  :mod (c11-4 / entire)))
       :snt2 (c11-13 / ask-02
                     :ARG0 (c11-8 / person
                                  :name (c11-6 / name
                                               :op1 "DW"))
                     :ARG1 (c11-3 / back-up-04)
                     :location (c11-7 / nowhere
                                      :location (c11-10 / it))))

# ::snt StL Cnty does dispatch for them. You can hear it on the dispatch tape.
# ::tokens ["StL", "Cnty", "does", "dispatch", "for", "them", ".", "You", "can", "hear", "it", "on", "the", "dispatch", "tape", "."]
# ::lemmas ["StL", "Cnty", "do", "dispatch", "for", "they", ".", "you", "can", "hear", "it", "on", "the", "dispatch", "tape", "."]
(c12-3 / multi-sentence
       :snt1 (c12-7 / dispatch-01
                    :ARG0 (c12-6 / person
                                 :name (c12-5 / name
                                              :op1 "StL"
                                              :op2 "Cnty"))
                    :ARG2 (c12-9 / they))
       :snt2 (c12-10 / possible-01
                     :ARG1 (c12-0 / hear-01
                                  :ARG0 (c12-1 / you)
                                  :ARG1 (c12-4 / it)
                                  :medium (c12-8 / tape
                                                 :mod (c12-2 / dispatch-01)))))

# ::snt Holy I pooped my pants batman next thing U know he'll be n da pen.
# ::tokens ["Holy", "I", "pooped", "my", "pants", "batman", "next", "thing", "U", "know", "he", "'ll", "be", "n", "da", "pen", "."]
# ::lemmas ["Holy", "i", "poope", "my", "pant", "batman", "next", "thing", "u", "know", "he", "'ll", "be", "n", "da", "pen", "."]
(c13-7 / poohpooh-01
       :ARG0 (c13-4 / i
                    :part (c13-9 / pant))
       :ARG1 (c13-3 / batman
                    :poss c13-4)
       :mod (c13-0 / holy
                   :mode expressive)
       :time (c13-8 / thing
                    :mod (c13-6 / next)
                    :ARG1-of (c13-5 / know-01
                                    :ARG0 (c13-1 / you))
                    :mod (c13-2 / pen
                                :polarity -)))

# ::snt , now that he's PROVEN he is a liar, when do we arrest him?!!
# ::tokens [",", "now", "that", "he", "'s", "PROVEN", "he", "is", "a", "liar", ",", "when", "do", "we", "arrest", "him", "?", "!", "!"]
# ::lemmas [",", "now", "that", "he", "be", "PROVEN", "he", "be", "a", "liar", ",", "when", "do", "we", "arrest", "he", "?", "!", "!"]
(c14-6 / arrest-01
       :ARG0 (c14-1 / we)
       :ARG1 (c14-0 / he)
       :time (c14-4 / now
                    :time-of (c14-5 / prove-01
                                    :ARG0 c14-0
                                    :ARG1 (c14-2 / lie-08
                                                 :ARG0 c14-0)))
       :time (c14-3 / amr-unknown))

# ::snt that audio was released back in august. No call for back up. Only for crowd control after.
# ::tokens ["that", "audio", "was", "released", "back", "in", "august", ".", "No", "call", "for", "back", "up", ".", "Only", "for", "crowd", "control", "after", "."]
# ::lemmas ["that", "audio", "be", "release", "back", "in", "august", ".", "no", "call", "for", "back", "up", ".", "only", "for", "crowd", "control", "after", "."]
(c15-0 / multi-sentence
       :snt1 (c15-4 / release-01
                    :ARG1 (c15-11 / audio
                                  :mod (c15-10 / that))
                    :time (c15-5 / date-entity
                                 :month 11)
                    :mod (c15-1 / back))
       :snt2 (c15-6 / call-03
                    :ARG1 (c15-7 / back-up-09)
                    :polarity -)
       :snt3 (c15-8 / control-01
                    :ARG1 (c15-9 / crowd)
                    :mod (c15-2 / only)
                    :time (c15-3 / after)))

# ::snt Ferguson PD has their own dispatch, &amp; supposedly he asked them for back up. I want to hear Ferguson PD tapes
# ::tokens ["Ferguson", "PD", "has", "their", "own", "dispatch", ",", "&", "amp", ";", "supposedly", "he", "asked", "them", "for", "back", "up", ".", "I", "want", "to", "hear", "Ferguson", "PD", "tapes"]
# ::lemmas ["Ferguson", "PD", "have", "their", "own", "dispatch", ",", "&", "amp", ";", "supposedly", "he", "ask", "they", "for", "back", "up", ".", "i", "want", "to", "hear", "Ferguson", "PD", "tape"]
(c16-3 / multi-sentence
       :snt1 (c16-0 / have-03
                    :ARG0 (c16-11 / government-organization
                                  :name (c16-8 / name
                                               :op1 "Ferguson"
                                               :op2 "PD"))
                    :ARG1 (c16-14 / and
                                  :op1 (c16-10 / dispatch-01
                                               :ARG0 c16-11)
                                  :op2 (c16-5 / et-cetera)))
       :snt2 (c16-12 / suppose-01
                     :ARG1 (c16-6 / ask-02
                                  :ARG0 (c16-2 / he)
                                  :ARG1 (c16-4 / back-up-04
                                               :ARG0 c16-11)
                                  :ARG2 c16-11))
       :snt3 (c16-1 / want-01
                    :ARG0 (c16-7 / i)
                    :ARG1 (c16-9 / hear-01
                                 :ARG0 c16-7
                                 :ARG1 (c16-13 / tape-02
                                               :ARG0 c16-11))))

# ::snt they do but Ferguson has its own dispatch, I have asked a lot of ppl, also cops when I was in jail at Berkle
# ::tokens ["they", "do", "but", "Ferguson", "has", "its", "own", "dispatch", ",", "I", "have", "asked", "a", "lot", "of", "ppl", ",", "also", "cops", "when", "I", "was", "in", "jail", "at", "Berkle"]
# ::lemmas ["they", "do", "but", "Ferguson", "have", "its", "own", "dispatch", ",", "i", "have", "ask", "a", "lot", "of", "ppl", ",", "also", "cop", "when", "i", "be", "in", "jail", "at", "Berkle"]
(c17-4 / multi-sentence
       :snt1 (c17-11 / contrast-01
                     :ARG1 (c17-10 / do-02
                                   :ARG0 (c17-15 / they))
                     :ARG2 (c17-0 / have-03
                                  :ARG0 (c17-12 / city-district
                                                :name (c17-7 / name
                                                             :op1 "Ferguson"))
                                  :ARG1 (c17-2 / dispatch-01
                                               :ARG0 c17-15)))
       :snt2 (c17-17 / ask-01
                     :ARG0 (c17-6 / i)
                     :ARG2 (c17-9 / person
                                  :quant (c17-3 / lot)
                                  :ARG2-of (c17-13 / include-91
                                                   :ARG1 (c17-16 / person
                                                                 :ARG0-of (c17-14 / cop-02)
                                                                 :mod (c17-5 / also))))
                     :time (c17-1 / jail-01
                                  :ARG1 c17-6
                                  :location c17-12
                                  :name (c17-8 / name
                                               :op1 "Berkle"))))

# ::snt The STLCO PD dispatch, not Ferguson, I want to hear Ferguson. When they say "not reported" STLCO PD
# ::tokens ["The", "STLCO", "PD", "dispatch", ",", "not", "Ferguson", ",", "I", "want", "to", "hear", "Ferguson", ".", "When", "they", "say", "\"", "not", "reported", "\"", "STLCO", "PD"]
# ::lemmas ["the", "STLCO", "pd", "dispatch", ",", "not", "Ferguson", ",", "i", "want", "to", "hear", "Ferguson", ".", "when", "they", "say", "\"", "not", "report", "\"", "STLCO", "PD"]
(c18-2 / multi-sentence
       :snt1 (c18-1 / want-01
                    :ARG0 (c18-4 / i)
                    :ARG1 (c18-0 / hear-01
                                 :ARG0 c18-4
                                 :ARG2 (c18-9 / city
                                              :name (c18-5 / name
                                                           :op1 "Ferguson")))
                    :ARG1-of (c18-8 / cause-01
                                    :ARG0 (c18-10 / dispatch-01
                                                  :ARG0 (c18-11 / government-organization
                                                                :name (c18-6 / name
                                                                             :op1 "STLCO"
                                                                             :op2 "PD"))
                                                  :ARG1-of (c18-12 / instead-of-91
                                                                   :ARG2 c18-9))))
       :snt2 (c18-3 / be-temporally-at-91
                    :ARG1 (c18-13 / report-01
                                  :ARG0 (c18-14 / government-organization
                                                :name (c18-7 / name
                                                             :op1 "STLCO"
                                                             :op2 "PD"))
                                  :polarity -)
                    :ARG2 (c18-16 / say-01
                                  :ARG0 (c18-15 / they)
                                  :ARG1 c18-13)))

# ::snt I don't think he or his friendly leakers can keep his story straight at this point.
# ::tokens ["I", "do", "n't", "think", "he", "or", "his", "friendly", "leakers", "can", "keep", "his", "story", "straight", "at", "this", "point", "."]
# ::lemmas ["i", "do", "not", "think", "he", "or", "his", "friendly", "leaker", "can", "keep", "his", "story", "straight", "at", "this", "point", "."]
(c19-11 / think-01
        :ARG0 (c19-6 / i)
        :ARG1 (c19-8 / possible-01
                     :ARG1 (c19-7 / keep-04
                                  :ARG0 (c19-4 / or
                                               :op1 (c19-0 / he)
                                               :op2 (c19-12 / person
                                                            :ARG0-of (c19-1 / leak-01)
                                                            :ARG1-of (c19-2 / friendly-01)
                                                            :poss c19-0))
                                  :ARG1 (c19-10 / story
                                                :poss c19-0)
                                  :ARG2 (c19-5 / straight)
                                  :time (c19-3 / point
                                               :mod (c19-9 / this))))
        :polarity -)

# ::snt If u don't live in STL, those tapes are STL county PD, &amp; Ferguson in STLCO, but is muni w/own pd etc
# ::tokens ["If", "u", "do", "n't", "live", "in", "STL", ",", "those", "tapes", "are", "STL", "county", "PD", ",", "&", "amp", ";", "Ferguson", "in", "STLCO", ",", "but", "is", "muni", "w", "/", "own", "pd", "etc"]
# ::lemmas ["if", "u", "do", "not", "live", "in", "STL", ",", "those", "tape", "be", "STL", "county", "PD", ",", "&", "amp", ";", "Ferguson", "in", "STLCO", ",", "but", "be", "muni", "w", "/", "own", "pd", "etc"]
(c21-5 / and
       :op1 (c21-11 / and
                    :op1 (c21-10 / government-organization
                                 :name (c21-9 / name
                                              :op1 "STL"
                                              :op2 "County"
                                              :op3 "PD"))
                    :op2 (c21-3 / government-organization
                                :name (c21-14 / name
                                              :op1 "&"
                                              :op2 "amp"))
                    :domain (c21-17 / tape-02
                                    :mod (c21-16 / that)))
       :op2 (c21-15 / contrast-01
                    :ARG1 (c21-7 / be-located-at-91
                                 :ARG1 (c21-2 / person
                                              :name (c21-0 / name
                                                           :op1 "Ferguson"))
                                 :ARG2 (c21-4 / city
                                              :name (c21-1 / name
                                                           :op1 "STLCO")))
                    :ARG2 (c21-12 / be-located-at-91
                                  :ARG1 c21-2
                                  :ARG2 c21-4
                                  :name (c21-18 / name
                                                :op1 "Munich")))
       :op3 (c21-8 / et-cetera)
       :condition (c21-6 / live-01
                         :ARG0 (c21-13 / you)
                         :location c21-4
                         :polarity -))

# ::snt ppl LIE, they're telling u they fear the truth b/c they're guilty of something; otherwise, they wouldn't "LIE".
# ::tokens ["ppl", "LIE", ",", "they", "'re", "telling", "u", "they", "fear", "the", "truth", "b", "/", "c", "they", "'re", "guilty", "of", "something", ";", "otherwise", ",", "they", "would", "n't", "\"", "LIE", "\"", "."]
# ::lemmas ["ppl", "LIE", ",", "they", "be", "tell", "u", "they", "fear", "the", "truth", "b", "/", "c", "they", "be", "guilty", "of", "something", ";", "otherwise", ",", "they", "would", "not", "\"", "lie", "\"", "."]
(c22-12 / and
        :op1 (c22-2 / lie-08
                    :ARG0 (c22-11 / they)
                    :mod (c22-3 / fucking
                                :mode expressive))
        :op2 (c22-9 / tell-01
                    :ARG0 c22-11
                    :ARG1 (c22-4 / fear-01
                                 :ARG0 c22-11
                                 :ARG1 (c22-5 / truth)
                                 :ARG1-of (c22-7 / cause-01
                                                 :ARG0 (c22-8 / guilty-01
                                                              :ARG1 c22-11
                                                              :ARG2 (c22-10 / something))))
                    :ARG2 (c22-1 / you))
        :op3 (c22-6 / lie-08
                    :ARG0 c22-11
                    :condition (c22-0 / have-polarity-91
                                      :ARG1 c22-8
                                      :ARG2 -)
                    :polarity -))

# ::snt sorry if pointing out that you are looking at the wrong transcript and listening to the wrong tape is trolling to you
# ::tokens ["sorry", "if", "pointing", "out", "that", "you", "are", "looking", "at", "the", "wrong", "transcript", "and", "listening", "to", "the", "wrong", "tape", "is", "trolling", "to", "you"]
# ::lemmas ["sorry", "if", "point", "out", "that", "you", "be", "look", "at", "the", "wrong", "transcript", "and", "listen", "to", "the", "wrong", "tape", "be", "troll", "to", "you"]
(c23-7 / sorry-01
       :ARG2 (c23-4 / point-out-02
                    :ARG0 (c23-0 / you)
                    :ARG1 (c23-8 / troll-01
                                 :ARG0 (c23-9 / and
                                              :op1 (c23-2 / look-01
                                                          :ARG0 c23-0
                                                          :ARG1 (c23-6 / thing
                                                                       :ARG1-of (c23-3 / transcribe-01)
                                                                       :ARG1-of (c23-1 / wrong-04
                                                                                       :ARG1 c23-6)))
                                              :op2 (c23-5 / listen-01
                                                          :ARG0 c23-0
                                                          :ARG1 c23-6))
                                 :ARG1 c23-0)))

# ::snt everything PD say is BS but would still like to know facts, details, etc
# ::tokens ["everything", "PD", "say", "is", "BS", "but", "would", "still", "like", "to", "know", "facts", ",", "details", ",", "etc"]
# ::lemmas ["everything", "PD", "say", "be", "BS", "but", "would", "still", "like", "to", "know", "fact", ",", "detail", ",", "etc"]
(c24-8 / contrast-01
       :ARG1 (c24-2 / bullshit-01
                    :ARG1 (c24-4 / everything
                                 :ARG1-of (c24-10 / say-01
                                                  :ARG0 (c24-9 / government-organization
                                                               :name (c24-6 / name
                                                                            :op1 "PD")))))
       :ARG2 (c24-0 / like-02
                    :ARG0 c24-9
                    :ARG1 (c24-11 / know-01
                                  :ARG0 c24-9
                                  :ARG1 (c24-12 / and
                                                :op1 (c24-1 / fact)
                                                :op2 (c24-7 / detail)
                                                :op3 (c24-3 / et-cetera)))
                    :mod (c24-5 / still)))

# ::snt Pretty clear by now that Wilson summarily executed Brown on the street. Equally clear he's gonna walk.
# ::tokens ["Pretty", "clear", "by", "now", "that", "Wilson", "summarily", "executed", "Brown", "on", "the", "street", ".", "Equally", "clear", "he", "'s", "gon", "na", "walk", "."]
# ::lemmas ["pretty", "clear", "by", "now", "that", "Wilson", "summarily", "execute", "Brown", "on", "the", "street", ".", "equally", "clear", "he", "be", "going", "to", "walk", "."]
(c25-2 / multi-sentence
       :snt1 (c25-12 / clear-06
                     :ARG1 (c25-6 / execute-01
                                  :ARG0 (c25-10 / person
                                                :name (c25-8 / name
                                                             :op1 "Wilson"))
                                  :ARG1 (c25-15 / person
                                                :name (c25-9 / name
                                                             :op1 "Brown"))
                                  :location (c25-14 / street)
                                  :manner (c25-7 / summary))
                     :degree (c25-3 / pretty)
                     :time (c25-4 / by
                                  :op1 (c25-11 / now)))
       :snt2 (c25-13 / clear-06
                     :ARG1 (c25-1 / walk-01
                                  :ARG0 (c25-0 / he))
                     :mod (c25-5 / equivalent)))

# ::snt dispatch scripts from county frequency, ferguson has own freq. We need those transcripts so we stop sounding stupid.
# ::tokens ["dispatch", "scripts", "from", "county", "frequency", ",", "ferguson", "has", "own", "freq", ".", "We", "need", "those", "transcripts", "so", "we", "stop", "sounding", "stupid", "."]
# ::lemmas ["dispatch", "script", "from", "county", "frequency", ",", "ferguson", "have", "own", "freq", ".", "we", "need", "those", "transcript", "so", "we", "stop", "sound", "stupid", "."]
(c26-3 / multi-sentence
       :snt1 (c26-16 / and
                     :op1 (c26-14 / script-01
                                  :mod (c26-11 / dispatch-01)
                                  :source (c26-2 / frequency
                                                 :mod (c26-12 / county)))
                     :op2 (c26-0 / have-03
                                 :ARG0 (c26-10 / person
                                               :name (c26-8 / name
                                                            :op1 "Ferguson"))
                                 :ARG1 (c26-7 / freq
                                              :poss c26-10)))
       :snt2 (c26-9 / need-01
                    :ARG0 (c26-1 / we)
                    :ARG1 (c26-15 / transcribe-01
                                  :mod (c26-13 / that))
                    :purpose (c26-6 / stop-01
                                    :ARG0 c26-1
                                    :ARG1 (c26-4 / sound-01
                                                 :ARG1 c26-1
                                                 :ARG2 (c26-5 / stupid)))))

# ::snt u dont know and are only inferring on ferguson radio traffic until you get to hear or read transcripts of IT. Facts.
# ::tokens ["u", "do", "nt", "know", "and", "are", "only", "inferring", "on", "ferguson", "radio", "traffic", "until", "you", "get", "to", "hear", "or", "read", "transcripts", "of", "IT", ".", "Facts", "."]
# ::lemmas ["u", "do", "not", "know", "and", "be", "only", "infer", "on", "ferguson", "radio", "traffic", "until", "you", "get", "to", "hear", "or", "read", "transcript", "of", "IT", ".", "fact", "."]
(c27-1 / multi-sentence
       :snt1 (c27-3 / and
                    :op1 (c27-12 / know-01
                                 :ARG0 (c27-10 / i)
                                 :polarity -)
                    :op2 (c27-11 / infer-01
                                 :ARG0 c27-10
                                 :ARG2 (c27-18 / traffic
                                               :mod (c27-7 / radio)
                                               :mod (c27-16 / city
                                                            :name (c27-6 / name
                                                                         :op1 "Ferguson")))
                                 :mod (c27-15 / only)
                                 :time (c27-9 / until
                                              :op1 (c27-14 / or
                                                           :op1 (c27-8 / get-22
                                                                       :ARG0 (c27-13 / you)
                                                                       :ARG1 (c27-4 / hear-01
                                                                                    :ARG0 c27-13
                                                                                    :ARG1 (c27-17 / transcribe-01
                                                                                                  :ARG1 (c27-0 / it))))
                                                           :op2 (c27-2 / read-01
                                                                       :ARG0 c27-13
                                                                       :ARG1 c27-17)))))
       :snt2 (c27-5 / fact))

# ::snt They were released by anonymous and can be heard on You Tube.
# ::tokens ["They", "were", "released", "by", "anonymous", "and", "can", "be", "heard", "on", "You", "Tube", "."]
# ::lemmas ["they", "be", "release", "by", "anonymous", "and", "can", "be", "hear", "on", "you", "Tube", "."]
(c28-7 / and
       :op1 (c28-4 / release-01
                   :ARG0 (c28-1 / anonymous)
                   :ARG1 (c28-5 / they))
       :op2 (c28-3 / possible-01
                   :ARG1 (c28-0 / hear-01
                                :ARG1 c28-5
                                :medium (c28-6 / publication
                                               :name (c28-2 / name
                                                            :op1 "YouTube")))))

# ::snt in the hell could we let our system come to this?We've got lots of work to do!
# ::tokens ["in", "the", "hell", "could", "we", "let", "our", "system", "come", "to", "this?We've", "got", "lots", "of", "work", "to", "do", "!"]
# ::lemmas ["in", "the", "hell", "could", "we", "let", "our", "system", "come", "to", "this?we've", "get", "lot", "of", "work", "to", "do", "!"]
(c29-5 / possible-01
       :ARG1 (c29-2 / let-01
                    :ARG0 (c29-1 / we)
                    :ARG1 (c29-7 / come-01
                                 :ARG1 (c29-9 / system
                                              :poss c29-1)
                                 :ARG4 (c29-10 / this)))
       :mod (c29-0 / hell
                   :mode expressive)
       :ARG1-of (c29-6 / cause-01
                       :ARG0 (c29-3 / obligate-01
                                    :ARG2 (c29-4 / work-01
                                                 :ARG0 c29-1
                                                 :quant (c29-8 / lot)))))

# ::snt Oh, so stock photo you are one of the Conservative nut jobs/racist trolls.
# ::tokens ["Oh", ",", "so", "stock", "photo", "you", "are", "one", "of", "the", "Conservative", "nut", "jobs", "/", "racist", "trolls", "."]
# ::lemmas ["oh", ",", "so", "stock", "photo", "you", "be", "one", "of", "the", "Conservative", "nut", "job", "/", "racist", "troll", "."]
(c30-3 / infer-01
       :ARG1 (c30-8 / include-91
                    :ARG1 (c30-0 / you)
                    :ARG2 (c30-2 / or
                                 :op1 (c30-4 / nutjob
                                             :mod (c30-5 / person
                                                         :mod (c30-7 / conservative)))
                                 :op2 (c30-10 / troll
                                              :mod (c30-6 / racist))))
       :mod (c30-11 / photo
                    :mod (c30-9 / stock))
       :mod (c30-1 / oh
                   :mode expressive))

# ::snt he lied he never did nor did the store owner call in a robbery
# ::tokens ["he", "lied", "he", "never", "did", "nor", "did", "the", "store", "owner", "call", "in", "a", "robbery"]
# ::lemmas ["he", "lie", "he", "never", "do", "nor", "do", "the", "store", "owner", "call", "in", "a", "robbery"]
(c31-1 / lie-08
       :ARG0 (c31-0 / he)
       :ARG1 (c31-8 / and
                    :op1 (c31-6 / call-02
                                :ARG0 (c31-4 / person
                                             :ARG0-of (c31-2 / own-01
                                                             :ARG1 (c31-7 / store)))
                                :ARG1 (c31-5 / rob-01
                                             :ARG0 c31-4)
                                :time (c31-3 / ever)
                                :op2-of c31-8
                                :polarity -)
                    :ARG0 c31-4
                    :ARG1 c31-5
                    :polarity -))

# ::snt Ferguson has own dispatch, would like to hear those tapes too, but very interesting in this "no record" FPD
# ::tokens ["Ferguson", "has", "own", "dispatch", ",", "would", "like", "to", "hear", "those", "tapes", "too", ",", "but", "very", "interesting", "in", "this", "\"", "no", "record", "\"", "FPD"]
# ::lemmas ["Ferguson", "have", "own", "dispatch", ",", "would", "like", "to", "hear", "those", "tape", "too", ",", "but", "very", "interesting", "in", "this", "\"", "no", "record", "\"", "FPD"]
(c32-15 / and
        :op1 (c32-0 / have-03
                    :ARG0 (c32-7 / person
                                 :name (c32-5 / name
                                              :op1 "Ferguson"))
                    :ARG1 (c32-8 / dispatch-01
                                 :ARG0 c32-7))
        :op2 (c32-1 / like-02
                    :ARG0 c32-7
                    :ARG1 (c32-2 / hear-01
                                 :ARG0 c32-7
                                 :ARG1 (c32-13 / tape-02
                                               :mod (c32-12 / that))
                                 :mod (c32-6 / too)))
        :concession-of (c32-4 / interest-01
                              :ARG2 (c32-14 / publication
                                            :name (c32-9 / name
                                                         :op1 "FPD")
                                            :mod (c32-10 / record
                                                         :polarity -)
                                            :mod (c32-3 / this))
                              :degree (c32-11 / very)))

# ::snt They would have been notified of officer involved shooting. Instead they learned from media reports.
# ::tokens ["They", "would", "have", "been", "notified", "of", "officer", "involved", "shooting", ".", "Instead", "they", "learned", "from", "media", "reports", "."]
# ::lemmas ["they", "would", "have", "be", "notify", "of", "officer", "involve", "shooting", ".", "instead", "they", "learn", "from", "medium", "report", "."]
(c33-1 / multi-sentence
       :snt1 (c33-4 / notify-01
                    :ARG1 (c33-10 / they)
                    :ARG2 (c33-3 / involve-01
                                 :ARG1 (c33-9 / shoot-02
                                              :ARG0 (c33-2 / officer)
                                              :ARG2-of c33-3)
                                 :ARG0 c33-2))
       :snt2 (c33-0 / learn-01
                    :ARG0 (c33-8 / they)
                    :ARG2 (c33-6 / report-01
                                 :ARG0 (c33-5 / media))
                    :ARG1-of (c33-7 / instead-of-91)))

# ::snt He radioed for "crowd control" after the fact. He knew he had F'd up big time.No ambulance, no shots fired call
# ::tokens ["He", "radioed", "for", "\"", "crowd", "control", "\"", "after", "the", "fact", ".", "He", "knew", "he", "had", "F'd", "up", "big", "time", ".", "No", "ambulance", ",", "no", "shots", "fired", "call"]
# ::lemmas ["he", "radio", "for", "\"", "crowd", "control", "\"", "after", "the", "fact", ".", "he", "know", "he", "have", "f'd", "up", "big", "time", ".", "no", "ambulance", ",", "no", "shot", "fire", "call"]
(c34-2 / multi-sentence
       :snt1 (c34-9 / radio-01
                    :ARG0 (c34-0 / he)
                    :ARG1 (c34-10 / control-01
                                  :ARG1 (c34-11 / crowd))
                    :time (c34-15 / after
                                  :op1 (c34-1 / fact)))
       :snt2 (c34-13 / know-01
                     :ARG0 (c34-3 / he)
                     :ARG1 (c34-7 / fuck-up-02
                                  :ARG0 c34-3
                                  :degree (c34-4 / big-time)))
       :snt3 (c34-6 / and
                    :op1 (c34-8 / ambulance
                                :polarity -)
                    :op2 (c34-12 / call-02
                                 :ARG1 (c34-5 / fire-01
                                              :ARG1 (c34-14 / shoot-01))
                                 :polarity -)))

# ::snt Yes, because people smoked up, and already wounded, always charge police!! Makes total sense.
# ::tokens ["Yes", ",", "because", "people", "smoked", "up", ",", "and", "already", "wounded", ",", "always", "charge", "police", "!", "!", "Makes", "total", "sense", "."]
# ::lemmas ["yes", ",", "because", "people", "smoke", "up", ",", "and", "already", "wound", ",", "always", "charge", "police", "!", "!", "make", "total", "sense", "."]
(c35-1 / multi-sentence
       :snt1 (c35-7 / cause-01
                    :ARG0 (c35-11 / and
                                  :op1 (c35-8 / smoke-02
                                              :ARG0 (c35-5 / person))
                                  :op2 (c35-0 / wound-01
                                              :ARG1 c35-5
                                              :time (c35-3 / already)))
                    :ARG1 (c35-6 / charge-05
                                 :ARG1 (c35-10 / police)
                                 :time (c35-4 / always)))
       :snt2 (c35-2 / sense-02
                    :ARG1 c35-6
                    :degree (c35-9 / total)))

# ::snt . He actually claims X that he radioed in. st when he initially saw MB walking. nd in car. BOTH LIES.
# ::tokens [".", "He", "actually", "claims", "X", "that", "he", "radioed", "in", ".", "st", "when", "he", "initially", "saw", "MB", "walking", ".", "nd", "in", "car", ".", "BOTH", "LIES", "."]
# ::lemmas [".", "he", "actually", "claim", "x", "that", "he", "radio", "in", ".", "st", "when", "he", "initially", "see", "MB", "walk", ".", "nd", "in", "car", ".", "both", "lie", "."]
(c36-3 / multi-sentence
       :snt1 (c36-11 / claim-01
                     :ARG0 (c36-0 / he)
                     :ARG1 (c36-10 / radio-01
                                   :ARG0 c36-0
                                   :ARG2 (c36-9 / person
                                                :name (c36-7 / name
                                                             :op1 "X"))
                                   :time (c36-14 / see-01
                                                 :ARG0 c36-0
                                                 :ARG1 (c36-16 / and
                                                               :op1 (c36-1 / walk-01
                                                                           :ARG0 (c36-15 / person
                                                                                         :name (c36-8 / name
                                                                                                      :op1 "MB")))
                                                               :op2 (c36-4 / be-located-at-91
                                                                           :ARG1 c36-15
                                                                           :ARG2 (c36-12 / car)))
                                                 :time (c36-6 / initial)))
                     :ARG1-of (c36-5 / actual-02))
       :snt2 (c36-2 / lie-08
                    :mod (c36-13 / both)))

# ::snt The entire dispatch day is on You Tube, so you don't know. Go listen to it like I did.
# ::tokens ["The", "entire", "dispatch", "day", "is", "on", "You", "Tube", ",", "so", "you", "do", "n't", "know", ".", "Go", "listen", "to", "it", "like", "I", "did", "."]
# ::lemmas ["the", "entire", "dispatch", "day", "be", "on", "You", "Tube", ",", "so", "you", "do", "not", "know", ".", "go", "listen", "to", "it", "like", "i", "do", "."]
(c37-3 / multi-sentence
       :snt1 (c37-10 / cause-01
                     :ARG0 (c37-4 / be-located-at-91
                                  :ARG1 (c37-9 / day
                                               :time-of (c37-1 / dispatch-01)
                                               :mod (c37-5 / entire))
                                  :ARG2 (c37-8 / publication
                                               :name (c37-7 / name
                                                            :op1 "YouTube")))
                     :ARG1 (c37-15 / know-01
                                   :ARG0 (c37-0 / you)
                                   :polarity -))
       :snt2 (c37-11 / go-05
                     :ARG0 c37-0
                     :ARG1 (c37-2 / listen-01
                                  :ARG0 c37-0
                                  :ARG1 (c37-6 / it)
                                  :ARG1-of (c37-12 / resemble-01
                                                   :ARG2 (c37-13 / listen-01
                                                                 :ARG0 (c37-14 / i)
                                                                 :ARG1 c37-6)))
                     :mode imperative))
