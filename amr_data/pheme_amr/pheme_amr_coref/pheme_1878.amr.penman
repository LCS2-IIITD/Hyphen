# ::snt NOW THEY HAVE CONFIRMED IT.. Go for your life!
# ::tokens ["NOW", "THEY", "HAVE", "CONFIRMED", "IT", "..", "Go", "for", "your", "life", "!"]
# ::lemmas ["now", "they", "have", "confirmed", "it", "..", "go", "for", "your", "life", "!"]
(c1-2 / multi-sentence
      :snt1 (c1-5 / confirm-01
                  :ARG0 (c1-7 / they)
                  :ARG1 (c1-3 / it)
                  :time (c1-4 / now))
      :snt2 (c1-6 / go-03
                  :ARG0 (c1-0 / you)
                  :ARG1 (c1-1 / life
                              :poss c1-0)
                  :mode imperative))

# ::snt um I never said u were wrong. I said don't create hysteria until it's confirmed.
# ::tokens ["um", "I", "never", "said", "u", "were", "wrong", ".", "I", "said", "do", "n't", "create", "hysteria", "until", "it", "'s", "confirmed", "."]
# ::lemmas ["um", "i", "never", "say", "u", "be", "wrong", ".", "i", "say", "do", "not", "create", "hysteria", "until", "it", "be", "confirm", "."]
(c2-4 / multi-sentence
      :snt1 (c2-13 / say-01
                   :ARG0 (c2-8 / i)
                   :ARG1 (c2-1 / wrong-04
                               :ARG1 (c2-2 / you))
                   :time (c2-6 / ever)
                   :polarity -)
      :snt2 (c2-7 / say-01
                  :ARG0 (c2-11 / i)
                  :ARG1 (c2-10 / create-01
                               :ARG0 (c2-12 / you)
                               :ARG1 (c2-0 / hysteria)
                               :time (c2-5 / until
                                           :op1 (c2-9 / confirm-01
                                                      :ARG1 (c2-3 / it)))
                               :polarity -
                               :mode imperative)))

# ::snt : Sydney gunman was shot by police and is confirmed dead . EXCELLENT NEWS BEST OUTCOME
# ::tokens [":", "Sydney", "gunman", "was", "shot", "by", "police", "and", "is", "confirmed", "dead", ".", "EXCELLENT", "NEWS", "BEST", "OUTCOME"]
# ::lemmas [":", "Sydney", "gunman", "be", "shoot", "by", "police", "and", "be", "confirm", "dead", ".", "EXCELLENT", "NEWS", "BEST", "OUTCOME"]
(c3-1 / multi-sentence
      :snt1 (c3-12 / and
                   :op1 (c3-10 / shoot-02
                               :ARG0 (c3-4 / police)
                               :ARG1 (c3-7 / gunman
                                           :location (c3-6 / city
                                                           :name (c3-3 / name
                                                                       :op1 "Sydney"))))
                   :op2 (c3-5 / confirm-01
                              :ARG1 (c3-8 / die-01
                                          :ARG1 c3-7)))
      :snt2 (c3-0 / have-degree-91
                  :ARG1 (c3-2 / broadcast-program
                              :name c3-3
                              :op1 "Exchange"
                              :op2 "News"))
      :ARG2 (c3-9 / good-02
                  :ARG1 c3-2)
      :ARG3 (c3-11 / most))

# ::snt im not saying he wasn't. But there's a reason they don't confirm it. Especially if there were remote detonators..
# ::tokens ["i", "m", "not", "saying", "he", "was", "n't", ".", "But", "there", "'s", "a", "reason", "they", "do", "n't", "confirm", "it", ".", "Especially", "if", "there", "were", "remote", "detonators", ".."]
# ::lemmas ["i", "m", "not", "say", "he", "be", "not", ".", "but", "there", "be", "a", "reason", "they", "do", "not", "confirm", "it", ".", "especially", "if", "there", "be", "remote", "detonator", ".."]
(c4-1 / multi-sentence
      :snt1 (c4-10 / say-01
                   :ARG0 (c4-3 / i)
                   :ARG1 (c4-0 / he
                               :polarity -)
                   :polarity -)
      :snt2 (c4-6 / contrast-01
                  :ARG2 (c4-5 / reason
                              :ARG0-of (c4-7 / cause-01
                                             :ARG1 (c4-9 / confirm-01
                                                         :ARG0 (c4-13 / they)
                                                         :ARG1 (c4-8 / it)
                                                         :polarity -))))
      :snt3 (c4-14 / have-condition-91
                   :ARG2 (c4-12 / thing
                                :ARG0-of (c4-11 / detonate-01)
                                :mod (c4-4 / remote))
                   :degree (c4-2 / especially)))

# ::snt Peter why do you waste time on these twits? &lt;-
# ::tokens ["Peter", "why", "do", "you", "waste", "time", "on", "these", "twits", "?", "&", "lt;-"]
# ::lemmas ["Peter", "why", "do", "you", "waste", "time", "on", "these", "twit", "?", "&", "lt;-"]
(c5-8 / ask-01
      :ARG0 (c5-2 / i)
      :ARG1 (c5-0 / waste-01
                  :ARG0 (c5-5 / person
                              :name (c5-3 / name
                                          :op1 "Peter"))
                  :ARG1 (c5-7 / time)
                  :ARG2 (c5-6 / twit
                              :mod (c5-4 / this))
                  :purpose (c5-1 / amr-unknown))
      :ARG2 c5-5)

# ::snt Gunman is dead. Believe it or not, I care not.
# ::tokens ["Gunman", "is", "dead", ".", "Believe", "it", "or", "not", ",", "I", "care", "not", "."]
# ::lemmas ["gunman", "be", "dead", ".", "believe", "it", "or", "not", ",", "i", "care", "not", "."]
(c6-2 / multi-sentence
      :snt1 (c6-5 / die-01
                  :ARG1 (c6-7 / gunman))
      :snt2 (c6-0 / have-concession-91
                  :ARG1 (c6-6 / care-01
                              :ARG0 (c6-4 / i)
                              :polarity -)
                  :ARG2 (c6-3 / believe-01
                              :ARG0 (c6-1 / you)
                              :ARG1 c6-5
                              :mode imperative)))

# ::snt oh I think he is too - but you're just as bad as the bullshit media if u print things without facts.
# ::tokens ["oh", "I", "think", "he", "is", "too", "-", "but", "you", "'re", "just", "as", "bad", "as", "the", "bullshit", "media", "if", "u", "print", "things", "without", "facts", "."]
# ::lemmas ["oh", "i", "think", "he", "be", "too", "-", "but", "you", "be", "just", "as", "bad", "as", "the", "bullshit", "medium", "if", "u", "print", "thing", "without", "fact", "."]
(c7-11 / contrast-01
       :ARG1 (c7-14 / think-01
                    :ARG0 (c7-7 / i)
                    :ARG1 (c7-0 / have-mod-91
                                :ARG1 (c7-15 / he)
                                :mod (c7-13 / too))
                    :mod (c7-5 / oh
                               :mode expressive))
       :ARG2 (c7-8 / have-degree-91
                   :ARG1 (c7-1 / you)
                   :ARG2 (c7-4 / bad-07
                               :ARG1 c7-1)
                   :ARG3 (c7-6 / equal)
                   :ARG4 (c7-3 / media
                               :ARG1-of (c7-12 / bullshit-01))
                   :condition (c7-9 / print-01
                                    :ARG0 c7-1
                                    :ARG1 (c7-10 / thing)
                                    :manner (c7-2 / fact
                                                  :polarity -))))

# ::snt Postei vdeo novo! Podes ver e dizer o que achou?
# ::tokens ["Postei", "vdeo", "novo", "!", "Podes", "ver", "e", "dizer", "o", "que", "achou", "?"]
# ::lemmas ["postei", "vdeo", "novo", "!", "Podes", "ver", "e", "dizer", "o", "que", "achou", "?"]
(c8-0 / multi-sentence
      :snt1 (c8-3 / vdeo-novo
                  :domain (c8-4 / post-01))
      :snt2 (c8-5 / amr-unintelligible
                  :snt3 (c8-1 / que
                              :polarity (c8-2 / amr-unknown))
                  :value "podes ver-deo-novo"))

# ::snt where is your proof?? There's no confirmation of this. Stop spreading bullshit until it's confirmed!
# ::tokens ["where", "is", "your", "proof", "?", "?", "There", "'s", "no", "confirmation", "of", "this", ".", "Stop", "spreading", "bullshit", "until", "it", "'s", "confirmed", "!"]
# ::lemmas ["where", "be", "your", "proof", "?", "?", "there", "be", "no", "confirmation", "of", "this", ".", "stop", "spread", "bullshit", "until", "it", "be", "confirm", "!"]
(c9-1 / multi-sentence
      :snt1 (c9-5 / prove-01
                  :ARG0 (c9-0 / you)
                  :location (c9-10 / amr-unknown))
      :snt2 (c9-7 / confirm-01
                  :ARG1 (c9-9 / this)
                  :polarity -)
      :snt3 (c9-8 / stop-01
                  :ARG0 c9-0
                  :mode imperative)
      :ARG1 (c9-4 / spread-03
                  :ARG0 c9-0
                  :ARG1 (c9-3 / bullshit)
                  :time (c9-2 / until
                              :op1 (c9-6 / confirm-01
                                         :ARG1 c9-9))))

# ::snt That sort have to resort to that...
# ::tokens ["That", "sort", "have", "to", "resort", "to", "that", "..."]
# ::lemmas ["that", "sort", "have", "to", "resort", "to", "that", "..."]
(c10-0 / obligate-01
       :ARG1 (c10-3 / sort
                    :mod (c10-4 / that))
       :ARG2 (c10-1 / resort-01
                    :ARG0 c10-3
                    :ARG1 (c10-2 / that)))

# ::snt Well to be fair to me she jumped into my timeline. Obvioulsy wanted to make a name for herself but failed miserably.
# ::tokens ["Well", "to", "be", "fair", "to", "me", "she", "jumped", "into", "my", "timeline", ".", "Obvioulsy", "wanted", "to", "make", "a", "name", "for", "herself", "but", "failed", "miserably", "."]
# ::lemmas ["well", "to", "be", "fair", "to", "i", "she", "jump", "into", "my", "timeline", ".", "Obvioulsy", "want", "to", "make", "a", "name", "for", "herself", "but", "fail", "miserably", "."]
(c11-3 / multi-sentence
       :snt1 (c11-0 / jump-03
                    :ARG0 (c11-13 / she)
                    :destination (c11-14 / timeline
                                         :poss (c11-5 / i))
                    :ARG1-of (c11-2 / fair-01
                                    :ARG2 (c11-12 / i)
                                    :mod (c11-1 / well)))
       :snt2 (c11-11 / contrast-01
                     :ARG1 (c11-6 / want-01
                                  :ARG0 (c11-9 / person
                                               :name (c11-7 / name
                                                            :op1 "Obvioulsy"))
                                  :ARG1 (c11-10 / make-01
                                                :ARG0 c11-9
                                                :ARG1 c11-7
                                                :poss c11-9)
                                  :ARG2 c11-9))
       :ARG2 (c11-8 / fail-01
                    :ARG1 c11-9
                    :manner (c11-4 / miserable)))

# ::snt Best news of the day/week. Now you can meet up with your virgins, you shithouse.
# ::tokens ["Best", "news", "of", "the", "day", "/", "week", ".", "Now", "you", "can", "meet", "up", "with", "your", "virgins", ",", "you", "shithouse", "."]
# ::lemmas ["good", "news", "of", "the", "day", "/", "week", ".", "now", "you", "can", "meet", "up", "with", "your", "virgin", ",", "you", "shithouse", "."]
(c12-4 / multi-sentence
       :snt1 (c12-8 / news
                    :time (c12-15 / slash
                                  :op1 (c12-11 / day)
                                  :op2 (c12-1 / week))
                    :ARG1-of (c12-0 / have-degree-91
                                    :ARG2 (c12-13 / good-02
                                                  :ARG1 c12-8)
                                    :ARG3 (c12-10 / most)))
       :snt2 (c12-6 / say-01
                    :ARG0 (c12-7 / i)
                    :ARG1 (c12-12 / possible-01
                                  :ARG1 (c12-3 / meet-up-04
                                               :ARG0 (c12-2 / you
                                                            :mod (c12-5 / shithouse))
                                               :ARG1 (c12-9 / virgin
                                                            :poss c12-2)
                                               :time (c12-14 / now)))
                    :ARG2 c12-2))

# ::snt burn in hell!
# ::tokens ["burn", "in", "hell", "!"]
# ::lemmas ["burn", "in", "hell", "!"]
(c13-1 / burn-01
       :location (c13-0 / hell)
       :mode expressive)

# ::snt sadly, the point of my tweet, went over your head &amp; attempting to explain it to u is met with ignorance.
# ::tokens ["sadly", ",", "the", "point", "of", "my", "tweet", ",", "went", "over", "your", "head", "&", "amp", ";", "attempting", "to", "explain", "it", "to", "u", "is", "met", "with", "ignorance", "."]
# ::lemmas ["sadly", ",", "the", "point", "of", "my", "tweet", ",", "go", "over", "your", "head", "&", "amp", ";", "attempt", "to", "explain", "it", "to", "u", "be", "meet", "with", "ignorance", "."]
(c14-13 / and
        :op1 (c14-9 / go-01
                    :ARG1 (c14-8 / point-04
                                 :ARG1 (c14-12 / tweet-01
                                               :ARG0 (c14-6 / i)))
                    :ARG4 (c14-3 / over
                                 :op1 (c14-0 / head
                                             :part-of c14-13
                                             :op1 (c14-1 / you)
                                             :op2 (c14-5 / amp))))
        :ARG1-of (c14-11 / sad-02)
        :op2 (c14-2 / meet-01
                    :ARG1 (c14-7 / attempt-01
                                 :ARG0 c14-1
                                 :ARG1 (c14-4 / explain-01
                                              :ARG0 c14-1
                                              :ARG1 c14-8
                                              :ARG2 c14-1))
                    :ARG2 (c14-10 / ignorance)))

# ::snt that "sort"? You don't even know me.. How can u even make that judgement?
# ::tokens ["that", "\"", "sort", "\"", "?", "You", "do", "n't", "even", "know", "me", "..", "How", "can", "u", "even", "make", "that", "judgement", "?"]
# ::lemmas ["that", "\"", "sort", "\"", "?", "you", "do", "not", "even", "know", "i", "..", "how", "can", "u", "even", "make", "that", "judgement", "?"]
(c15-2 / multi-sentence
       :snt1 (c15-9 / sort-01
                    :ARG1 (c15-11 / that))
       :snt2 (c15-6 / know-02
                    :ARG0 (c15-1 / you)
                    :ARG1 (c15-5 / i)
                    :mod (c15-4 / even)
                    :polarity -)
       :snt3 (c15-7 / possible-01
                    :ARG1 (c15-0 / judge-01
                                 :ARG0 (c15-8 / you)
                                 :ARG1 (c15-10 / that)
                                 :mod (c15-3 / even)
                                 :manner (c15-12 / amr-unknown))))

# ::snt Ok let's simplify things for you. Gunman has shot hostage, police enter, he fires at police, wounds one. You think he's alive?
# ::tokens ["Ok", "let", "'s", "simplify", "things", "for", "you", ".", "Gunman", "has", "shot", "hostage", ",", "police", "enter", ",", "he", "fires", "at", "police", ",", "wounds", "one", ".", "You", "think", "he", "'s", "alive", "?"]
# ::lemmas ["ok", "let", "us", "simplify", "thing", "for", "you", ".", "Gunman", "have", "shoot", "hostage", ",", "police", "enter", ",", "he", "fire", "at", "police", ",", "wound", "one", ".", "you", "think", "he", "be", "alive", "?"]
(c16-0 / multi-sentence
       :snt1 (c16-3 / simplify-01
                    :ARG0 (c16-15 / we)
                    :ARG1 (c16-21 / thing)
                    :beneficiary (c16-18 / you)
                    :ARG1-of (c16-19 / okay-01)
                    :mode imperative)
       :snt2 (c16-5 / and
                    :op1 (c16-11 / shoot-02
                                 :ARG0 (c16-2 / person
                                              :name (c16-13 / name
                                                            :op1 "Gunman"))
                                 :ARG2 (c16-7 / hostage))
                    :op2 (c16-12 / enter-01
                                 :ARG0 (c16-4 / police))
                    :op3 (c16-8 / fire-01
                                :ARG0 c16-2
                                :direction (c16-10 / police))
                    :op4 (c16-1 / wound-01
                                :ARG0 c16-2
                                :ARG1 (c16-14 / person
                                              :quant 1)))
       :snt3 (c16-20 / think-01
                     :polarity (c16-16 / amr-unknown)
                     :ARG0 (c16-17 / you)
                     :ARG1 (c16-9 / live-01
                                  :ARG0 (c16-6 / he))))

# ::snt If this is correct, that is the best outcome IMO. I hope those injured hostages are OK.
# ::tokens ["If", "this", "is", "correct", ",", "that", "is", "the", "best", "outcome", "IMO", ".", "I", "hope", "those", "injured", "hostages", "are", "OK", "."]
# ::lemmas ["if", "this", "be", "correct", ",", "that", "be", "the", "good", "outcome", "IMO", ".", "i", "hope", "those", "injure", "hostage", "be", "ok", "."]
(c17-2 / multi-sentence
       :snt1 (c17-4 / outcome
                    :domain (c17-13 / that)
                    :ARG1-of (c17-1 / opine-01
                                    :ARG0 (c17-5 / i))
                    :condition (c17-8 / correct-02
                                      :ARG1 (c17-11 / this))
                    :ARG1-of (c17-0 / have-degree-91
                                    :ARG2 (c17-9 / good-02
                                                 :ARG1 c17-4)
                                    :ARG3 (c17-7 / most)))
       :snt2 (c17-14 / hope-01
                     :ARG0 (c17-10 / i)
                     :ARG1 (c17-12 / okay-04
                                   :ARG1 (c17-6 / hostage
                                                :ARG1-of (c17-3 / injure-01)
                                                :mod c17-13))))

# ::snt What's it like being an overbearing idiot &amp; proven wrong?
# ::tokens ["What", "'s", "it", "like", "being", "an", "overbearing", "idiot", "&", "amp", ";", "proven", "wrong", "?"]
# ::lemmas ["what", "be", "it", "like", "be", "an", "overbearing", "idiot", "&", "amp", ";", "prove", "wrong", "?"]
(c18-6 / resemble-01
       :ARG1 (c18-3 / it)
       :ARG2 (c18-8 / and
                    :op1 (c18-7 / idiot
                                :mod (c18-1 / overbearing))
                    :op2 (c18-2 / amp)
                    :ARG1-of (c18-5 / prove-01
                                    :ARG2 (c18-0 / wrong-04
                                                 :ARG1 c18-8)))
       :polarity (c18-4 / amr-unknown))
