# ::snt DrPres, Starfall and Daniel Cardlucci on the run, chF tango'd.
# ::tokens ["DrPres", ",", "Starfall", "and", "Daniel", "Cardlucci", "on", "the", "run", ",", "chF", "tango'd", "."]
# ::lemmas ["drpre", ",", "Starfall", "and", "Daniel", "Cardlucci", "on", "the", "run", ",", "chF", "tango'd", "."]
(c1-7 / tango-00
      :ARG0 (c1-9 / and
                  :op1 (c1-3 / person
                             :name (c1-1 / name
                                         :op1 "DrPres"))
                  :op2 (c1-8 / person
                             :name (c1-2 / name
                                         :op1 "Starfall"))
                  :op3 (c1-0 / person
                             :name (c1-4 / name
                                         :op1 "Daniel"
                                         :op2 "Cardlucci"))
                  :ARG1-of (c1-5 / run-13))
      :mod (c1-6 / chF))

# ::snt kill them all
# ::tokens ["kill", "them", "all"]
# ::lemmas ["kill", "they", "all"]
(c2-2 / kill-01
      :ARG0 (c2-1 / you)
      :ARG1 (c2-0 / they
                  :mod (c2-3 / all))
      :mode imperative)

# ::snt dead faggot
# ::tokens ["dead", "faggot"]
# ::lemmas ["dead", "faggot"]
(c3-1 / faggot
      :ARG1-of (c3-0 / die-01))

# ::snt I love that word when dealing with Terrorist- " Dealt With" Not arrested, not on trial BUT DEAD FUCKING DEADIE DEAD
# ::tokens ["I", "love", "that", "word", "when", "dealing", "with", "Terrorist-", "\"", "Dealt", "With", "\"", "Not", "arrested", ",", "not", "on", "trial", "BUT", "DEAD", "FUCKING", "DEADIE", "DEAD"]
# ::lemmas ["i", "love", "that", "word", "when", "deal", "with", "Terrorist-", "\"", "Dealt", "With", "\"", "not", "arrest", ",", "not", "on", "trial", "but", "dead", "fucking", "DEADIE", "DEAD"]
(c4-1 / love-01
      :ARG0 (c4-2 / i)
      :ARG1 (c4-0 / word-01
                  :ARG1 (c4-5 / contrast-01
                              :ARG1 (c4-8 / arrest-01
                                          :ARG1 (c4-7 / terrorist)
                                          :polarity -)
                              :ARG2 (c4-6 / try-02
                                          :ARG1 c4-7
                                          :polarity -))
                  :mod (c4-3 / that))
      :time (c4-4 / deal-01
                  :ARG0 c4-2
                  :ARG1 c4-7))

# ::snt Here we should be able to execute them send them on to their Virginians if we can PROVE Bypassing death ROW,
# ::tokens ["Here", "we", "should", "be", "able", "to", "execute", "them", "send", "them", "on", "to", "their", "Virginians", "if", "we", "can", "PROVE", "Bypassing", "death", "ROW", ","]
# ::lemmas ["here", "we", "should", "be", "able", "to", "execute", "they", "send", "they", "on", "to", "their", "Virginians", "if", "we", "can", "PROVE", "Bypassing", "death", "ROW", ","]
(c5-8 / recommend-01
      :ARG1 (c5-7 / possible-01
                  :ARG1 (c5-14 / and
                               :op1 (c5-4 / execute-01
                                          :ARG0 (c5-1 / we)
                                          :ARG1 (c5-12 / they))
                               :op2 (c5-10 / send-03
                                           :ARG0 c5-1
                                           :ARG1 c5-12
                                           :ARG2 (c5-13 / person
                                                        :mod (c5-5 / state
                                                                   :name (c5-6 / name
                                                                               :op1 "Virginia"))
                                                        :poss c5-12)))
                  :condition (c5-2 / possible-01
                                   :ARG1 (c5-11 / prove-01
                                                :ARG0 c5-1
                                                :ARG1 (c5-3 / pass-03
                                                            :ARG1 (c5-9 / die-01)))))
      :location (c5-0 / here))

# ::snt that'd make two then
# ::tokens ["that", "'d", "make", "two", "then"]
# ::lemmas ["that", "would", "make", "two", "then"]
(c6-2 / make-01
      :ARG0 (c6-0 / that)
      :ARG1 (c6-3 / thing
                  :quant 2)
      :time (c6-1 / then))

# ::snt : BREAKING NEWS: OTTAWA POLICE CONFIRM TO ABC NEWS THEY ARE LOOKING FOR SUSPECTS, ONE HAS BEEN 'DEALT WITH'
# ::tokens [":", "BREAKING", "NEWS", ":", "OTTAWA", "POLICE", "CONFIRM", "TO", "ABC", "NEWS", "THEY", "ARE", "LOOKING", "FOR", "SUSPECTS", ",", "ONE", "HAS", "BEEN", "'", "DEALT", "WITH", "'"]
# ::lemmas [":", "break", "news", ":", "OTTAWA", "police", "confirm", "to", "ABC", "NEWS", "they", "be", "look", "for", "SUSPECTS", ",", "one", "have", "be", "'", "DEALT", "with", "'"]
(c7-1 / multi-sentence
      :snt1 (c7-2 / broadcast-program
                  :name (c7-3 / name
                              :op1 "Breitbart"
                              :op2 "News")
                  :ARG1-of (c7-7 / break-13))
      :snt2 (c7-8 / confirm-01
                  :ARG0 (c7-5 / police
                              :mod (c7-6 / city
                                         :name (c7-4 / name
                                                     :op1 "OTTAWA")))
                  :ARG1 (c7-0 / look-01
                              :ARG0 c7-5
                              :ARG1 (c7-10 / crisis))
                  :ARG2 (c7-11 / broadcast-program
                               :name (c7-9 / name
                                           :op1 "ABC"
                                           :op2 "News"))))

# ::snt allah hu akbar
# ::tokens ["allah", "hu", "akbar"]
# ::lemmas ["allah", "hu", "akbar"]
(c8-0 / hu'a'Allah
      :mode expressive)

# ::snt amen to that brother
# ::tokens ["amen", "to", "that", "brother"]
# ::lemmas ["amen", "to", "that", "brother"]
(c9-4 / amen
      :beneficiary (c9-2 / person
                         :ARG0-of (c9-0 / have-rel-role-91
                                        :ARG2 (c9-1 / brother))
                         :mod (c9-3 / that)))

# ::snt I hope they turn those jihadist cowards into swish cheese.
# ::tokens ["I", "hope", "they", "turn", "those", "jihadist", "cowards", "into", "swish", "cheese", "."]
# ::lemmas ["i", "hope", "they", "turn", "those", "jihadist", "coward", "into", "swish", "cheese", "."]
(c10-0 / hope-01
       :ARG0 (c10-2 / i)
       :ARG1 (c10-8 / turn-02
                    :ARG0 (c10-6 / they)
                    :ARG1 (c10-5 / coward
                                 :mod (c10-1 / jihadist)
                                 :mod (c10-3 / that))
                    :ARG2 (c10-4 / cheese
                                 :mod (c10-7 / swish))))

# ::snt totally just followed you
# ::tokens ["totally", "just", "followed", "you"]
# ::lemmas ["totally", "just", "follow", "you"]
(c11-2 / follow-02
       :ARG1 (c11-1 / you)
       :mod (c11-3 / total)
       :mod (c11-0 / just))
