# ::snt so this is what is sounds like, when doves.cry....
# ::tokens ["so", "this", "is", "what", "is", "sounds", "like", ",", "when", "doves.cry", "...."]
# ::lemmas ["so", "this", "be", "what", "be", "sound", "like", ",", "when", "doves.cry", "...."]
(c1-0 / multi-sentence
      :snt1 (c1-1 / resemble-01
                  :ARG1 (c1-4 / this)
                  :ARG2 (c1-3 / doves))
      :snt2 (c1-2 / cry-02))

# ::snt : LiveNation confirms that Prince will not be performing at Massey Hall tonight. HA!
# ::tokens [":", "LiveNation", "confirms", "that", "Prince", "will", "not", "be", "performing", "at", "Massey", "Hall", "tonight", ".", "HA", "!"]
# ::lemmas [":", "LiveNation", "confirm", "that", "Prince", "will", "not", "be", "perform", "at", "Massey", "Hall", "tonight", ".", "ha", "!"]
(c2-1 / multi-sentence
      :snt1 (c2-7 / confirm-01
                  :ARG0 (c2-2 / broadcast-program
                              :name (c2-3 / name
                                          :op1 "LiveNation"))
                  :ARG1 (c2-5 / perform-01
                              :ARG0 (c2-12 / person
                                           :name (c2-4 / name
                                                       :op1 "Prince"))
                              :location (c2-8 / building
                                              :name (c2-6 / name
                                                          :op1 "Massey"
                                                          :op2 "Hall"))
                              :time (c2-9 / date-entity
                                          :dayperiod (c2-10 / night)
                                          :mod (c2-11 / today))
                              :polarity -))
      :snt2 (c2-0 / ha
                  :mode expressive))

# ::snt : LiveNation confirms that Prince will not be performing at Massey Hall tonight. Sorry !
# ::tokens [":", "LiveNation", "confirms", "that", "Prince", "will", "not", "be", "performing", "at", "Massey", "Hall", "tonight", ".", "Sorry", "!"]
# ::lemmas [":", "LiveNation", "confirm", "that", "Prince", "will", "not", "be", "perform", "at", "Massey", "Hall", "tonight", ".", "sorry", "!"]
(c3-0 / multi-sentence
      :snt1 (c3-6 / confirm-01
                  :ARG0 (c3-1 / broadcast-program
                              :name (c3-2 / name
                                          :op1 "LiveNation"))
                  :ARG1 (c3-4 / perform-01
                              :ARG0 (c3-12 / person
                                           :name (c3-3 / name
                                                       :op1 "Prince"))
                              :location (c3-7 / building
                                              :name (c3-5 / name
                                                          :op1 "Massey"
                                                          :op2 "Hall"))
                              :time (c3-8 / date-entity
                                          :dayperiod (c3-9 / night)
                                          :mod (c3-11 / today))
                              :polarity -))
      :snt2 (c3-10 / sorry-01
                   :mode expressive))

# ::snt this was confirmed along time ago super awesome!
# ::tokens ["this", "was", "confirmed", "along", "time", "ago", "super", "awesome", "!"]
# ::lemmas ["this", "be", "confirm", "along", "time", "ago", "super", "awesome", "!"]
(c4-6 / awesome-02
      :ARG0 (c4-3 / confirm-01
                  :ARG1 (c4-5 / this)
                  :time (c4-0 / before
                              :op1 (c4-2 / now)
                              :quant (c4-1 / along-time)))
      :degree (c4-4 / super)
      :mode expressive)

# ::snt : LiveNation confirms that Prince will not be performing at Massey Hall tonight.
# ::tokens [":", "LiveNation", "confirms", "that", "Prince", "will", "not", "be", "performing", "at", "Massey", "Hall", "tonight", "."]
# ::lemmas [":", "LiveNation", "confirm", "that", "Prince", "will", "not", "be", "perform", "at", "Massey", "Hall", "tonight", "."]
(c5-5 / confirm-01
      :ARG0 (c5-0 / broadcast-program
                  :name (c5-1 / name
                              :op1 "LiveNation"))
      :ARG1 (c5-3 / perform-01
                  :ARG0 (c5-10 / person
                               :name (c5-2 / name
                                           :op1 "Prince"))
                  :location (c5-6 / building
                                  :name (c5-4 / name
                                              :op1 "Massey"
                                              :op2 "Hall"))
                  :time (c5-7 / date-entity
                              :dayperiod (c5-8 / night)
                              :mod (c5-9 / today))
                  :polarity -))

# ::snt Those ppl that waited in line are gonna be pissed.
# ::tokens ["Those", "ppl", "that", "waited", "in", "line", "are", "gon", "na", "be", "pissed", "."]
# ::lemmas ["those", "ppl", "that", "wait", "in", "line", "be", "going", "to", "be", "piss", "."]
(c6-2 / piss-03
      :ARG1 (c6-4 / person
                  :mod (c6-3 / that)
                  :ARG0-of (c6-0 / wait-01
                                 :manner (c6-1 / line-up-02))))

# ::snt ohhh bad decision!!!
# ::tokens ["ohhh", "bad", "decision", "!", "!", "!"]
# ::lemmas ["ohhh", "bad", "decision", "!", "!", "!"]
(c7-2 / thing
      :ARG1-of (c7-1 / decide-01)
      :ARG1-of (c7-3 / bad-07)
      :mod (c7-0 / oh
                 :mode expressive))

# ::snt what the fuck is going on
# ::tokens ["what", "the", "fuck", "is", "going", "on"]
# ::lemmas ["what", "the", "fuck", "be", "go", "on"]
(c8-1 / amr-unknown
      :mod (c8-0 / fuck
                 :mode expressive))

# ::snt and here comes the (purple) rain..
# ::tokens ["and", "here", "comes", "the", "(", "purple", ")", "rain", ".."]
# ::lemmas ["and", "here", "come", "the", "(", "purple", ")", "rain", ".."]
(c9-4 / and
      :op2 (c9-3 / come-01
                 :ARG1 (c9-2 / rain-01
                             :mod (c9-1 / purple))
                 :ARG4 (c9-0 / here)))

# ::snt no way... lol
# ::tokens ["no", "way", "...", "lol"]
# ::lemmas ["no", "way", "...", "lol"]
(c10-0 / way
       :ARG2-of (c10-1 / laugh-01
                       :manner (c10-2 / loud))
       :polarity -)

# ::snt LMAOOOOOOOO
# ::tokens ["LMAOOOOOOOO"]
# ::lemmas ["lmaoooooooo"]
(c13-2 / laugh-01
       :ARG0 (c13-3 / i
                    :part (c13-1 / ass))
       :ARG3 (c13-0 / off
                    :op1 c13-1))
