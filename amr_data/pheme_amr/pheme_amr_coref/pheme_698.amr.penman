# ::snt that was their only sliver of hope. Repercussions need to be huge.
# ::tokens ["that", "was", "their", "only", "sliver", "of", "hope", ".", "Repercussions", "need", "to", "be", "huge", "."]
# ::lemmas ["that", "be", "their", "only", "sliver", "of", "hope", ".", "repercussion", "need", "to", "be", "huge", "."]
(c1-1 / multi-sentence
      :snt1 (c1-6 / sliver
                  :mod (c1-2 / only)
                  :quant-of (c1-0 / hope-01
                                  :ARG0 (c1-7 / they))
                  :domain (c1-5 / that))
      :snt2 (c1-3 / need-01
                  :ARG1 (c1-8 / huge
                              :domain (c1-4 / repercussion))))

# ::snt And, means nothing about whether the violent thug assaulted him.
# ::tokens ["And", ",", "means", "nothing", "about", "whether", "the", "violent", "thug", "assaulted", "him", "."]
# ::lemmas ["and", ",", "mean", "nothing", "about", "whether", "the", "violent", "thug", "assault", "he", "."]
(c2-7 / and
      :op2 (c2-1 / mean-01
                 :ARG2 (c2-3 / nothing
                             :topic (c2-6 / truth-value
                                          :polarity-of (c2-2 / assault-01
                                                             :ARG0 (c2-5 / thug
                                                                         :mod (c2-4 / violent))
                                                             :ARG1 (c2-0 / he))))))

# ::snt it was the MSM that inferred this. what's your point?
# ::tokens ["it", "was", "the", "MSM", "that", "inferred", "this", ".", "what", "'s", "your", "point", "?"]
# ::lemmas ["it", "be", "the", "MSM", "that", "infer", "this", ".", "what", "be", "your", "point", "?"]
(c3-1 / multi-sentence
      :snt1 (c3-2 / infer-01
                  :ARG0 (c3-4 / publication
                              :name (c3-3 / name
                                          :op1 "MSM"))
                  :ARG1 (c3-5 / this))
      :snt2 (c3-6 / point-04
                  :ARG0 (c3-0 / you)
                  :ARG1 (c3-7 / amr-unknown)))

# ::snt damn!
# ::tokens ["damn", "!"]
# ::lemmas ["damn", "!"]
(c4-0 / damn-01
      :mode expressive)

# ::snt how can you be sure its bad? Mike could of freaked out thinking different
# ::tokens ["how", "can", "you", "be", "sure", "its", "bad", "?", "Mike", "could", "of", "freaked", "out", "thinking", "different"]
# ::lemmas ["how", "can", "you", "be", "sure", "its", "bad", "?", "Mike", "could", "of", "freak", "out", "think", "different"]
(c5-2 / multi-sentence
      :snt1 (c5-7 / possible-01
                  :ARG1 (c5-10 / sure-02
                               :ARG0 (c5-0 / you)
                               :ARG1 (c5-4 / bad-07
                                           :ARG1 (c5-5 / it))
                               :manner (c5-13 / amr-unknown)))
      :snt2 (c5-12 / possible-01
                   :ARG1 (c5-1 / freak-out-02
                               :ARG1 (c5-3 / person
                                           :name (c5-6 / name
                                                       :op1 "Mike"))
                               :ARG1-of (c5-9 / cause-01
                                              :ARG0 (c5-11 / think-01
                                                           :ARG0 c5-3
                                                           :ARG1-of (c5-8 / differ-02))))))

# ::snt that's what I'm trying to figure out..
# ::tokens ["that", "'s", "what", "I", "'m", "trying", "to", "figure", "out", ".."]
# ::lemmas ["that", "be", "what", "i", "be", "try", "to", "figure", "out", ".."]
(c6-1 / try-01
      :ARG0 (c6-2 / i)
      :ARG1 (c6-0 / figure-out-05
                  :ARG0 c6-2
                  :ARG1 (c6-3 / that)))

# ::snt they said he confirmed he stole them smh!
# ::tokens ["they", "said", "he", "confirmed", "he", "stole", "them", "smh", "!"]
# ::lemmas ["they", "say", "he", "confirm", "he", "steal", "they", "smh", "!"]
(c7-4 / say-01
      :ARG0 (c7-5 / they)
      :ARG1 (c7-3 / confirm-01
                  :ARG0 (c7-0 / he)
                  :ARG1 (c7-2 / steal-01
                              :ARG0 c7-0
                              :ARG1 c7-5))
      :mod (c7-1 / smh
                 :mode expressive))

# ::snt Why bad? *If* self-defense as Wilson claimed, the prior robbery has nothing to do with it. Cop attacked, cop defends self.
# ::tokens ["Why", "bad", "?", "*", "If", "*", "self", "-", "defense", "as", "Wilson", "claimed", ",", "the", "prior", "robbery", "has", "nothing", "to", "do", "with", "it", ".", "Cop", "attacked", ",", "cop", "defends", "self", "."]
# ::lemmas ["why", "bad", "?", "*", "if", "*", "self", "-", "defense", "as", "Wilson", "claim", ",", "the", "prior", "robbery", "have", "nothing", "to", "do", "with", "it", ".", "Cop", "attack", ",", "cop", "defend", "self", "."]
(c8-2 / multi-sentence
      :snt1 (c8-9 / bad-07
                  :ARG1 (c8-7 / amr-unknown)
                  :ARG1-of (c8-17 / cause-01
                                  :ARG0 (c8-13 / amr-unknown)))
      :snt2 (c8-8 / have-to-do-with-04
                  :ARG0 (c8-12 / rob-01
                               :time (c8-3 / prior))
                  :ARG1 (c8-4 / defend-01
                              :ARG0 (c8-5 / cop
                                          :ARG1-of c8-4))
                  :ARG2 (c8-10 / nothing)
                  :ARG1-of (c8-14 / claim-01
                                  :ARG0 (c8-6 / person
                                              :name (c8-16 / name
                                                           :op1 "Wilson"))))
      :snt3 (c8-11 / and
                   :op1 (c8-18 / attack-01
                               :ARG0 (c8-15 / cop))
                   :op2 (c8-0 / defend-01
                              :ARG0 (c8-1 / cop
                                          :ARG1-of c8-0))))

# ::snt this is disgusting.
# ::tokens ["this", "is", "disgusting", "."]
# ::lemmas ["this", "be", "disgusting", "."]
(c9-0 / disgust-01
      :ARG0 (c9-1 / this))

# ::snt RT : Ferguson PD now admits that Darren Wilson didn't know anything about the store robbery when he stopped Mike Brown!
# ::tokens ["RT", ":", "Ferguson", "PD", "now", "admits", "that", "Darren", "Wilson", "did", "n't", "know", "anything", "about", "the", "store", "robbery", "when", "he", "stopped", "Mike", "Brown", "!"]
# ::lemmas ["rt", ":", "Ferguson", "PD", "now", "admit", "that", "Darren", "Wilson", "do", "not", "know", "anything", "about", "the", "store", "robbery", "when", "he", "stop", "Mike", "Brown", "!"]
(c10-11 / say-01
        :ARG0 (c10-6 / publication
                     :name (c10-4 / name
                                  :op1 "RT"))
        :ARG1 (c10-14 / admit-01
                      :ARG0 (c10-9 / government-organization
                                   :name (c10-5 / name
                                                :op1 "Ferguson"
                                                :op2 "PD"))
                      :ARG1 (c10-12 / know-01
                                    :ARG0 (c10-13 / person
                                                  :name (c10-7 / name
                                                               :op1 "Darren"
                                                               :op2 "Wilson"))
                                    :ARG1 (c10-3 / anything
                                                 :topic (c10-8 / rob-01
                                                               :ARG1 (c10-2 / store)))
                                    :time (c10-0 / stop-01
                                                 :ARG0 c10-13
                                                 :ARG1 (c10-1 / person
                                                              :name (c10-10 / name
                                                                            :op1 "Mike"
                                                                            :op2 "Brown")))
                                    :polarity -)
                      :time (c10-15 / now)))

# ::snt well he has his friend calling radio stations saying he did know lol which is it?
# ::tokens ["well", "he", "has", "his", "friend", "calling", "radio", "stations", "saying", "he", "did", "know", "lol", "which", "is", "it", "?"]
# ::lemmas ["well", "he", "have", "his", "friend", "call", "radio", "station", "say", "he", "do", "know", "lol", "which", "be", "it", "?"]
(c11-0 / have-03
       :ARG0 (c11-13 / he)
       :ARG1 (c11-9 / call-02
                    :ARG0 (c11-7 / person
                                 :ARG0-of (c11-6 / have-rel-role-91
                                                 :ARG1 c11-13
                                                 :ARG2 (c11-2 / friend)))
                    :ARG1 (c11-11 / station
                                  :mod (c11-8 / radio))
                    :manner (c11-4 / say-01
                                   :ARG0 c11-7
                                   :ARG1 (c11-12 / know-01
                                                 :ARG0 c11-7
                                                 :ARG2-of (c11-3 / laugh-01
                                                                 :ARG0 c11-7
                                                                 :manner (c11-10 / loud)))))
       :mod (c11-1 / well)
       :ARG1-of (c11-5 / request-confirmation-91))

# ::snt huh? That makes total sense to me. Spare me....
# ::tokens ["huh", "?", "That", "makes", "total", "sense", "to", "me", ".", "Spare", "me", "...."]
# ::lemmas ["huh", "?", "that", "make", "total", "sense", "to", "i", ".", "spare", "i", "...."]
(c12-1 / multi-sentence
       :snt1 (c12-6 / sense-02
                    :ARG1 (c12-7 / that)
                    :ARG2 (c12-3 / i)
                    :degree (c12-5 / total)
                    :polarity (c12-8 / amr-unknown))
       :snt2 (c12-2 / scare-01
                    :ARG0 (c12-0 / you)
                    :ARG1 (c12-4 / i)
                    :mode imperative))

# ::snt what he did? No he didn''t. If he knew he had done something wrong, then prob figured that is why the cop was after him..
# ::tokens ["what", "he", "did", "?", "No", "he", "didn''t", ".", "If", "he", "knew", "he", "had", "done", "something", "wrong", ",", "then", "prob", "figured", "that", "is", "why", "the", "cop", "was", "after", "him", ".."]
# ::lemmas ["what", "he", "do", "?", "no", "he", "didn''t", ".", "if", "he", "know", "he", "have", "do", "something", "wrong", ",", "then", "prob", "figure", "that", "be", "why", "the", "cop", "be", "after", "he", ".."]
(c13-4 / multi-sentence
       :snt1 (c13-9 / do-02
                    :ARG0 (c13-0 / he)
                    :ARG1 (c13-15 / amr-unknown)
                    :polarity -)
       :snt2 (c13-2 / do-02
                    :ARG0 (c13-3 / he)
                    :ARG1 (c13-6 / amr-unknown)
                    :polarity -)
       :snt3 (c13-8 / have-condition-91
                    :ARG1 (c13-5 / figure-01
                                 :ARG1 (c13-10 / cause-01
                                               :ARG0 (c13-14 / that)
                                               :ARG1 (c13-11 / go-03
                                                             :ARG0 (c13-12 / cop)
                                                             :ARG1 c13-3)))
                    :ARG2 (c13-7 / know-01
                                 :ARG0 c13-3
                                 :ARG1 (c13-16 / do-02
                                               :ARG0 c13-3
                                               :ARG1 (c13-13 / something
                                                             :ARG1-of (c13-1 / wrong-02))))))

# ::snt No it's not bad. You have to rethink this. Did after allegedly just "robbing" a store know the cop didn't know ..
# ::tokens ["No", "it", "'s", "not", "bad", ".", "You", "have", "to", "rethink", "this", ".", "Did", "after", "allegedly", "just", "\"", "robbing", "\"", "a", "store", "know", "the", "cop", "did", "n't", "know", ".."]
# ::lemmas ["no", "it", "be", "not", "bad", ".", "you", "have", "to", "rethink", "this", ".", "do", "after", "allegedly", "just", "\"", "rob", "\"", "a", "store", "know", "the", "cop", "do", "not", "know", ".."]
(c14-2 / multi-sentence
       :snt1 (c14-3 / bad-07
                    :ARG1 (c14-6 / it)
                    :polarity -)
       :snt2 (c14-4 / obligate-01
                    :ARG1 (c14-1 / you)
                    :ARG2 (c14-9 / rethink-01
                                 :ARG0 c14-1
                                 :ARG1 (c14-12 / this)))
       :snt3 (c14-7 / know-01
                    :ARG0 (c14-10 / cop)
                    :time (c14-13 / after
                                  :op1 (c14-8 / rob-01
                                              :ARG0 c14-10
                                              :ARG1 (c14-11 / store)
                                              :manner (c14-5 / allege-01)
                                              :mod (c14-0 / just)))
                    :polarity -))

# ::snt he pick his location those lame ass press didn't even ask the right question which is why they shoot a kid hands up
# ::tokens ["he", "pick", "his", "location", "those", "lame", "ass", "press", "did", "n't", "even", "ask", "the", "right", "question", "which", "is", "why", "they", "shoot", "a", "kid", "hands", "up"]
# ::lemmas ["he", "pick", "his", "location", "those", "lame", "ass", "press", "do", "not", "even", "ask", "the", "right", "question", "which", "be", "why", "they", "shoot", "a", "kid", "hand", "up"]
(c15-8 / pick-01
       :ARG0 (c15-0 / he)
       :ARG1 (c15-1 / location
                    :poss c15-0)
       :ARG1-of (c15-10 / cause-01
                        :ARG0 (c15-16 / ask-01
                                      :ARG0 (c15-15 / press
                                                    :mod (c15-6 / ass
                                                                :mod (c15-12 / lame))
                                                    :mod (c15-14 / that))
                                      :ARG1 (c15-5 / question
                                                   :ARG1-of (c15-9 / right-02))
                                      :mod (c15-4 / even)
                                      :ARG1-of (c15-11 / cause-01
                                                       :ARG0 (c15-13 / shoot-02
                                                                     :ARG0 c15-15
                                                                     :ARG1 (c15-2 / hand
                                                                                  :part-of (c15-7 / kid))
                                                                     :direction (c15-3 / up)))
                                      :polarity -)))
