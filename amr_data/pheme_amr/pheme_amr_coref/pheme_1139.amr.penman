# ::snt what took him so long to arrive?
# ::tokens ["what", "took", "him", "so", "long", "to", "arrive", "?"]
# ::lemmas ["what", "take", "he", "so", "long", "to", "arrive", "?"]
(c1-4 / take-10
      :ARG0 (c1-5 / arrive-01
                  :ARG1 (c1-0 / he))
      :ARG1 (c1-1 / long-03
                  :ARG1 c1-5
                  :degree (c1-3 / so))
      :ARG2 (c1-2 / amr-unknown))

# ::snt he is a racebaiter extraordinaire.
# ::tokens ["he", "is", "a", "racebaiter", "extraordinaire", "."]
# ::lemmas ["he", "be", "a", "racebaiter", "extraordinaire", "."]
(c2-2 / person
      :ARG0-of (c2-4 / coach-01
                     :ARG2 (c2-3 / race))
      :mod (c2-1 / extraordinaire)
      :domain (c2-0 / he))

# ::snt With all due respect where was he when the dogs showed up in &amp; things escalated from there? I thot so.
# ::tokens ["With", "all", "due", "respect", "where", "was", "he", "when", "the", "dogs", "showed", "up", "in", "&", "amp", ";", "things", "escalated", "from", "there", "?", "I", "thot", "so", "."]
# ::lemmas ["with", "all", "due", "respect", "where", "be", "he", "when", "the", "dog", "show", "up", "in", "&", "amp", ";", "thing", "escalate", "from", "there", "?", "i", "thot", "so", "."]
(c3-2 / multi-sentence
      :snt1 (c3-3 / be-located-at-91
                  :ARG1 (c3-0 / he)
                  :ARG2 (c3-15 / amr-unknown)
                  :time (c3-12 / show-up-02
                               :ARG1 (c3-10 / dog)
                               :location (c3-6 / and
                                               :op1 (c3-8 / apartment)
                                               :op2 (c3-9 / pad)))
                  :concession (c3-11 / respect-01
                                     :mod (c3-1 / due)
                                     :mod (c3-13 / all)))
      :snt2 (c3-4 / escalate-01
                  :ARG1 (c3-14 / thing)
                  :source c3-6)
      :snt3 (c3-5 / so
                  :domain (c3-7 / i)))

# ::snt the Google sign
# ::tokens ["the", "Google", "sign"]
# ::lemmas ["the", "Google", "sign"]
(c4-0 / sign
      :mod (c4-2 / company
                 :name (c4-1 / name
                             :op1 "Google")))

# ::snt God Bless Jesse Jackson. Please return to East Palo Alto when you can.
# ::tokens ["God", "Bless", "Jesse", "Jackson", ".", "Please", "return", "to", "East", "Palo", "Alto", "when", "you", "can", "."]
# ::lemmas ["God", "Bless", "Jesse", "Jackson", ".", "please", "return", "to", "East", "Palo", "Alto", "when", "you", "can", "."]
(c6-1 / multi-sentence
      :snt1 (c6-3 / bless-01
                  :ARG0 (c6-6 / person
                              :name (c6-4 / name
                                          :op1 "God"))
                  :ARG1 (c6-10 / person
                               :name (c6-5 / name
                                           :op1 "Jesse"
                                           :op2 "Jackson")))
      :snt2 (c6-7 / return-01
                  :ARG1 (c6-0 / you)
                  :ARG4 (c6-8 / city-district
                              :name (c6-9 / name
                                          :op1 "East"
                                          :op2 "Palo"
                                          :op3 "Alto"))
                  :time (c6-2 / possible-01)
                  :mode imperative
                  :polite +))

# ::snt many times press does not show until they do. not in this time, but it has been the case. not cool to diss the old heads.
# ::tokens ["many", "times", "press", "does", "not", "show", "until", "they", "do", ".", "not", "in", "this", "time", ",", "but", "it", "has", "been", "the", "case", ".", "not", "cool", "to", "diss", "the", "old", "heads", "."]
# ::lemmas ["many", "time", "press", "do", "not", "show", "until", "they", "do", ".", "not", "in", "this", "time", ",", "but", "it", "have", "be", "the", "case", ".", "not", "cool", "to", "diss", "the", "old", "head", "."]
(c7-2 / multi-sentence
      :snt1 (c7-12 / show-01
                   :ARG0 (c7-6 / press)
                   :time (c7-3 / until
                               :op1 (c7-5 / show-01
                                          :ARG0 c7-6))
                   :frequency (c7-7 / many)
                   :polarity -)
      :snt2 (c7-8 / contrast-01
                  :ARG1 (c7-1 / show-01
                              :time (c7-13 / this)
                              :polarity -)
                  :ARG2 (c7-9 / case-04
                              :ARG1 c7-1))
      :snt3 (c7-11 / cool-04
                   :ARG1 (c7-10 / diss-01
                                :ARG1 (c7-0 / head
                                            :mod (c7-4 / old)))
                   :polarity -))

# ::snt Just turn your camera off, then he'll leave!
# ::tokens ["Just", "turn", "your", "camera", "off", ",", "then", "he", "'ll", "leave", "!"]
# ::lemmas ["just", "turn", "your", "camera", "off", ",", "then", "he", "'ll", "leave", "!"]
(c8-0 / have-condition-91
      :ARG1 (c8-3 / leave-11
                  :ARG0 (c8-7 / he)
                  :time (c8-6 / then))
      :ARG2 (c8-5 / turn-off-07
                  :ARG0 (c8-1 / you)
                  :ARG1 (c8-4 / camera
                              :poss c8-1)
                  :mod (c8-2 / just)
                  :mode imperative))

# ::snt Oh, it's not hate but they always show up and suck up all the energy and momentum of the masses then leave.
# ::tokens ["Oh", ",", "it", "'s", "not", "hate", "but", "they", "always", "show", "up", "and", "suck", "up", "all", "the", "energy", "and", "momentum", "of", "the", "masses", "then", "leave", "."]
# ::lemmas ["oh", ",", "it", "be", "not", "hate", "but", "they", "always", "show", "up", "and", "suck", "up", "all", "the", "energy", "and", "momentum", "of", "the", "masse", "then", "leave", "."]
(c9-11 / contrast-01
       :ARG1 (c9-0 / hate-01
                   :domain (c9-8 / it)
                   :polarity -)
       :ARG2 (c9-15 / and
                    :op1 (c9-12 / show-up-02
                                :ARG1 (c9-14 / they)
                                :time (c9-7 / always))
                    :op2 (c9-5 / suck-up-04
                               :ARG0 c9-14
                               :ARG1 (c9-9 / and
                                           :op1 (c9-6 / energy
                                                      :poss (c9-2 / mass)
                                                      :mod (c9-13 / all))
                                           :op2 (c9-10 / momentum
                                                       :poss c9-2
                                                       :mod (c9-4 / all))))
                    :op3 (c9-1 / leave-11
                               :ARG0 c9-14
                               :time c9-7))
       :mod (c9-3 / oh
                  :mode expressive))

# ::snt Jesse Jackson needs to go home. Name one thing he made better??
# ::tokens ["Jesse", "Jackson", "needs", "to", "go", "home", ".", "Name", "one", "thing", "he", "made", "better", "?", "?"]
# ::lemmas ["Jesse", "Jackson", "need", "to", "go", "home", ".", "name", "one", "thing", "he", "make", "well", "?", "?"]
(c10-1 / multi-sentence
       :snt1 (c10-4 / need-01
                    :ARG0 (c10-6 / person
                                 :name (c10-5 / name
                                              :op1 "Jesse"
                                              :op2 "Jackson"))
                    :ARG1 (c10-9 / go-02
                                 :ARG0 c10-6
                                 :ARG4 (c10-0 / home)))
       :snt2 (c10-7 / name-01
                    :ARG0 (c10-3 / i)
                    :ARG1 (c10-11 / thing
                                  :ARG1-of (c10-2 / better-01)
                                  :ARG1-of (c10-8 / make-02
                                                  :ARG0 (c10-12 / he))
                                  :quant 1)
                    :polarity (c10-10 / amr-unknown)))

# ::snt Is Jesse Jackson being in a wrong place at right time or the other way around? Volatile time will tell.
# ::tokens ["Is", "Jesse", "Jackson", "being", "in", "a", "wrong", "place", "at", "right", "time", "or", "the", "other", "way", "around", "?", "Volatile", "time", "will", "tell", "."]
# ::lemmas ["be", "Jesse", "Jackson", "be", "in", "a", "wrong", "place", "at", "right", "time", "or", "the", "other", "way", "around", "?", "volatile", "time", "will", "tell", "."]
(c11-2 / multi-sentence
       :snt1 (c11-4 / or
                    :op1 (c11-3 / be-located-at-91
                                :ARG1 (c11-9 / person
                                             :name (c11-7 / name
                                                          :op1 "Jesse"
                                                          :op2 "Jackson"))
                                :ARG2 (c11-14 / place
                                              :ARG1-of (c11-0 / wrong-04))
                                :time (c11-13 / time
                                              :ARG1-of (c11-10 / right-06)))
                    :op2 (c11-6 / way
                                :mod (c11-1 / other)
                                :mod (c11-15 / around))
                    :polarity (c11-5 / amr-unknown))
       :snt2 (c11-12 / tell-01
                     :ARG0 (c11-8 / time
                                  :mod (c11-11 / volatile))
                     :ARG2 c11-9))

# ::snt oh puke! Honestly can't believe it took him this long not to be center stage!
# ::tokens ["oh", "puke", "!", "Honestly", "ca", "n't", "believe", "it", "took", "him", "this", "long", "not", "to", "be", "center", "stage", "!"]
# ::lemmas ["oh", "puke", "!", "honestly", "can", "not", "believe", "it", "take", "he", "this", "long", "not", "to", "be", "center", "stage", "!"]
(c12-2 / multi-sentence
       :snt1 (c12-6 / puke-01
                    :mod (c12-4 / oh)
                    :mode expressive)
       :snt2 (c12-12 / possible-01
                     :ARG1 (c12-3 / believe-01
                                  :ARG0 (c12-5 / i)
                                  :ARG1 (c12-11 / take-10
                                                :ARG0 (c12-7 / be-located-at-91
                                                             :ARG1 (c12-0 / he)
                                                             :ARG2 (c12-10 / stage
                                                                           :mod (c12-8 / center))
                                                             :polarity -)
                                                :ARG1 (c12-1 / long-03
                                                             :ARG1 c12-7
                                                             :degree (c12-9 / this))))
                     :ARG1-of (c12-13 / honest-01)
                     :polarity -))

# ::snt everybody say Jesus! Cuz RevJackson has come to save you!
# ::tokens ["everybody", "say", "Jesus", "!", "Cuz", "RevJackson", "has", "come", "to", "save", "you", "!"]
# ::lemmas ["everybody", "say", "Jesus", "!", "cuz", "RevJackson", "have", "come", "to", "save", "you", "!"]
(c13-2 / multi-sentence
       :snt1 (c13-11 / say-01
                     :ARG0 (c13-3 / everybody)
                     :ARG1 (c13-7 / person
                                  :name (c13-5 / name
                                               :op1 "Jesus")))
       :snt2 (c13-9 / cause-01
                    :ARG0 (c13-8 / come-01
                                 :ARG1 (c13-12 / person
                                               :name (c13-6 / name
                                                            :op1 "Jackson")
                                               :ARG0-of (c13-0 / have-org-role-91
                                                               :ARG2 (c13-10 / reverend)))
                                 :purpose (c13-4 / save-02
                                                 :ARG0 c13-12
                                                 :ARG1 (c13-1 / you)))))

# ::snt the family invited sharpton. we don't know about anyone else. and jackson was on the front lines before you were born.
# ::tokens ["the", "family", "invited", "sharpton", ".", "we", "do", "n't", "know", "about", "anyone", "else", ".", "and", "jackson", "was", "on", "the", "front", "lines", "before", "you", "were", "born", "."]
# ::lemmas ["the", "family", "invite", "sharpton", ".", "we", "do", "not", "know", "about", "anyone", "else", ".", "and", "jackson", "be", "on", "the", "front", "line", "before", "you", "be", "bear", "."]
(c14-3 / multi-sentence
       :snt1 (c14-8 / invite-01
                    :ARG0 (c14-2 / family)
                    :ARG1 (c14-12 / person
                                  :name (c14-10 / name
                                                :op1 "Sharpton")))
       :snt2 (c14-17 / and
                     :op1 (c14-15 / know-01
                                  :ARG0 (c14-0 / we)
                                  :ARG1 (c14-7 / anyone
                                               :mod (c14-6 / else))
                                  :polarity -)
                     :op2 (c14-5 / be-located-at-91
                                 :ARG1 (c14-16 / person
                                               :name (c14-11 / name
                                                             :op1 "Jackson"))
                                 :ARG2 (c14-4 / line
                                              :mod (c14-9 / front))
                                 :time (c14-13 / before
                                               :op1 (c14-14 / bear-02
                                                            :ARG1 (c14-1 / you))))))

# ::snt Of course he is. There are cameras around.
# ::tokens ["Of", "course", "he", "is", ".", "There", "are", "cameras", "around", "."]
# ::lemmas ["of", "course", "he", "be", ".", "there", "be", "camera", "around", "."]
(c15-1 / multi-sentence
       :snt1 (c15-3 / event
                    :mod (c15-0 / he)
                    :mod (c15-2 / of-course))
       :snt2 (c15-4 / camera
                    :location (c15-5 / around)))

# ::snt oh great, the great instigator. Where is
# ::tokens ["oh", "great", ",", "the", "great", "instigator", ".", "Where", "is"]
# ::lemmas ["oh", "great", ",", "the", "great", "instigator", ".", "where", "be"]
(c16-0 / multi-sentence
       :snt1 (c16-4 / person
                    :ARG0-of (c16-3 / instigate-01)
                    :mod (c16-5 / great
                                :mod (c16-2 / oh)))
       :snt2 (c16-1 / be-located-at-91
                    :ARG1 (c16-6 / amr-unknown)))

# ::snt He shows up to EVERY protest in the black community and ain't found a solution yet, I'm starting to think he's the problem LMFAO!
# ::tokens ["He", "shows", "up", "to", "EVERY", "protest", "in", "the", "black", "community", "and", "ai", "n't", "found", "a", "solution", "yet", ",", "I", "'m", "starting", "to", "think", "he", "'s", "the", "problem", "LMFAO", "!"]
# ::lemmas ["he", "show", "up", "to", "every", "protest", "in", "the", "black", "community", "and", "be", "not", "find", "a", "solution", "yet", ",", "i", "be", "start", "to", "think", "he", "be", "the", "problem", "lmfao", "!"]
(c17-0 / multi-sentence
       :snt1 (c17-5 / and
                    :op1 (c17-2 / show-up-02
                                :ARG1 (c17-6 / he)
                                :location (c17-1 / protest-01
                                                 :ARG0 (c17-17 / community
                                                               :ARG1-of (c17-9 / black-05))
                                                 :mod (c17-11 / every)))
                    :op2 (c17-7 / find-01
                                :ARG0 c17-6
                                :ARG1 (c17-19 / thing
                                              :ARG2-of (c17-12 / solve-01))
                                :time (c17-15 / yet)
                                :polarity -))
       :snt2 (c17-16 / say-01
                     :ARG0 (c17-14 / i)
                     :ARG1 (c17-10 / start-01
                                   :ARG0 c17-14
                                   :ARG1 (c17-18 / think-01
                                                 :ARG0 c17-14
                                                 :ARG1 (c17-3 / problem
                                                              :domain (c17-4 / he))))
                     :ARG2 (c17-8 / person
                                  :name (c17-13 / name
                                                :op1 "LMFAO"))))

# ::snt " Jesse Jackson leading a small group in prayer at the scene of 's death. "
# ::tokens ["\"", "Jesse", "Jackson", "leading", "a", "small", "group", "in", "prayer", "at", "the", "scene", "of", "'s", "death", ".", "\""]
# ::lemmas ["\"", "Jesse", "Jackson", "lead", "a", "small", "group", "in", "prayer", "at", "the", "scene", "of", "'s", "death", ".", "\""]
(c18-0 / lead-02
       :ARG0 (c18-4 / person
                    :name (c18-3 / name
                                 :op1 "Jesse"
                                 :op2 "Jackson"))
       :ARG1 (c18-6 / group
                    :mod (c18-7 / small))
       :manner (c18-8 / pray-01
                      :ARG0 c18-4)
       :location (c18-2 / scene
                        :location-of (c18-5 / die-01
                                            :ARG1 (c18-1 / person))))

# ::snt dick gregory is here as well. have you ever been beaten or gone to jail for the cause of justice. they all have. know history
# ::tokens ["dick", "gregory", "is", "here", "as", "well", ".", "have", "you", "ever", "been", "beaten", "or", "gone", "to", "jail", "for", "the", "cause", "of", "justice", ".", "they", "all", "have", ".", "know", "history"]
# ::lemmas ["dick", "gregory", "be", "here", "as", "well", ".", "have", "you", "ever", "be", "beat", "or", "go", "to", "jail", "for", "the", "cause", "of", "justice", ".", "you", "all", "have", ".", "know", "history"]
(c19-1 / multi-sentence
       :snt1 (c19-8 / be-located-at-91
                    :ARG1 (c19-11 / government-organization
                                  :name (c19-10 / name
                                                :op1 "Gregory")
                                  :mod (c19-2 / dick))
                    :ARG2 (c19-7 / here)
                    :mod (c19-6 / as-well))
       :snt2 (c19-16 / or
                     :op1 (c19-13 / beat-01
                                  :ARG1 (c19-15 / you)
                                  :time (c19-9 / ever)
                                  :purpose (c19-17 / cause
                                                   :mod (c19-0 / justice)))
                     :op2 (c19-3 / go-02
                                 :ARG0 c19-15
                                 :ARG4 (c19-4 / jail)
                                 :purpose c19-17))
       :snt3 (c19-14 / know-01
                     :ARG0 (c19-18 / they
                                   :mod (c19-12 / all))
                     :ARG1 (c19-5 / history)))

# ::snt Pretty sure justice was served there. Bad example.
# ::tokens ["Pretty", "sure", "justice", "was", "served", "there", ".", "Bad", "example", "."]
# ::lemmas ["pretty", "sure", "justice", "be", "serve", "there", ".", "bad", "example", "."]
(c20-1 / multi-sentence
       :snt1 (c20-6 / sure-02
                    :ARG1 (c20-3 / serve-01
                                 :ARG1 (c20-0 / justice)
                                 :location (c20-7 / there))
                    :degree (c20-5 / pretty))
       :snt2 (c20-4 / exemplify-01
                    :ARG1-of (c20-2 / bad-07)))

# ::snt A criminal was killed there!
# ::tokens ["A", "criminal", "was", "killed", "there", "!"]
# ::lemmas ["a", "criminal", "be", "kill", "there", "!"]
(c21-3 / kill-01
       :ARG1 (c21-1 / person
                    :ARG2-of (c21-2 / criminal-03))
       :location (c21-0 / there))

# ::snt I AM DOOONNNEEEEE eonirwouwbourbourgobugroubrg ! Forever crying!
# ::tokens ["I", "AM", "DOOONNNEEEEE", "eonirwouwbourbourgobugroubrg", "!", "Forever", "crying", "!"]
# ::lemmas ["i", "be", "DOOONNNEEEEE", "eonirwouwbourbourgobugroubrg", "!", "forever", "cry", "!"]
(c22-1 / multi-sentence
       :snt1 (c22-2 / be-done-08
                    :ARG0 (c22-3 / i)
                    :mode imperative)
       :snt2 (c22-4 / cry-02
                    :duration (c22-0 / forever)
                    :mode expressive))

# ::snt too bad you are too young to know how much he did and how many he helped. sad people don't know our history.
# ::tokens ["too", "bad", "you", "are", "too", "young", "to", "know", "how", "much", "he", "did", "and", "how", "many", "he", "helped", ".", "sad", "people", "do", "n't", "know", "our", "history", "."]
# ::lemmas ["too", "bad", "you", "be", "too", "young", "to", "know", "how", "much", "he", "do", "and", "how", "many", "he", "help", ".", "sad", "people", "do", "not", "know", "our", "history", "."]
(c23-4 / multi-sentence
       :snt1 (c23-0 / have-degree-91
                    :ARG1 (c23-1 / you)
                    :ARG2 (c23-5 / bad-07
                                 :ARG1 c23-1)
                    :ARG3 (c23-15 / too)
                    :ARG6 (c23-8 / know-01
                                 :ARG0 c23-1
                                 :ARG1 (c23-16 / and
                                               :op1 (c23-13 / thing
                                                            :quant-of (c23-11 / do-02
                                                                              :ARG0 (c23-3 / he)))
                                               :op2 (c23-9 / thing
                                                           :quant-of (c23-10 / help-01
                                                                             :ARG0 c23-3)))
                                 :polarity -))
       :snt2 (c23-7 / know-01
                    :ARG0 (c23-12 / person
                                  :ARG1-of (c23-14 / sad-02))
                    :ARG1 (c23-6 / history
                                 :poss (c23-2 / we))))

# ::snt "Hymie town?"
# ::tokens ["\"", "Hymie", "town", "?", "\""]
# ::lemmas ["\"", "Hymie", "town", "?", "\""]
(c24-1 / town
       :polarity (c24-2 / amr-unknown)
       :mod (c24-0 / hippie))

# ::snt THIS IS A FED-RUN DHS PSYCHOLOGICAL OPERATION. BETTER WAKE UP, IGNORANT PEOPLE.
# ::tokens ["THIS", "IS", "A", "FED", "-", "RUN", "DHS", "PSYCHOLOGICAL", "OPERATION", ".", "BETTER", "WAKE", "UP", ",", "IGNORANT", "PEOPLE", "."]
# ::lemmas ["this", "be", "a", "FED", "-", "RUN", "DHS", "PSYCHOLOGICAL", "OPERATION", ".", "BETTER", "WAKE", "UP", ",", "IGNORANT", "people", "."]
(c25-3 / multi-sentence
       :snt1 (c25-4 / operate-01
                    :ARG0 (c25-10 / government-organization
                                  :name (c25-6 / name
                                               :op1 "DHS"))
                    :mod (c25-7 / politics)
                    :domain (c25-11 / this)
                    :mod (c25-2 / federal))
       :snt2 (c25-1 / wake-up-02
                    :ARG0 (c25-12 / person
                                  :ARG0-of (c25-5 / IGNore-01))
                    :ARG1-of (c25-0 / have-degree-91
                                    :ARG2 (c25-8 / good-02
                                                 :ARG1 c25-1)
                                    :ARG3 (c25-9 / more))
                    :mode imperative))

# ::snt C'mon now, if he starts that "go home &amp; let the police do their jobs" BS, we gone get 'em DAFUQ OUTTA HERE!!~
# ::tokens ["C'm", "on", "now", ",", "if", "he", "starts", "that", "\"", "go", "home", "&", "amp", ";", "let", "the", "police", "do", "their", "jobs", "\"", "BS", ",", "we", "gone", "get", "'em", "DAFUQ", "OUTTA", "HERE!!~"]
# ::lemmas ["come", "on", "now", ",", "if", "he", "start", "that", "\"", "go", "home", "&", "amp", ";", "let", "the", "police", "do", "their", "job", "\"", "BS", ",", "we", "go", "get", "'em", "dafuq", "outta", "HERE!!~"]
(c26-10 / come-on-25
        :ARG1 (c26-1 / you)
        :time (c26-7 / now)
        :condition (c26-13 / start-01
                           :ARG0 (c26-0 / he)
                           :ARG1 (c26-5 / bullshit-01
                                        :ARG1 (c26-14 / and
                                                      :op1 (c26-11 / go-02
                                                                   :ARG0 c26-1
                                                                   :ARG4 (c26-3 / home)
                                                                   :mode imperative)
                                                      :op2 (c26-9 / go-02
                                                                  :ARG0 c26-1
                                                                  :ARG4 (c26-6 / amp)
                                                                  :mode imperative)
                                                      :op3 (c26-4 / let-01
                                                                  :ARG0 c26-1
                                                                  :ARG1 (c26-12 / do-02
                                                                                :ARG0 (c26-8 / police)
                                                                                :ARG1 (c26-2 / job
                                                                                             :poss c26-8))
                                                                  :mode imperative))))
        :mode imperative)

# ::snt activist Dick Gregory has also joined the protest. thanked "white media" for being there and getting arrested.
# ::tokens ["activist", "Dick", "Gregory", "has", "also", "joined", "the", "protest", ".", "thanked", "\"", "white", "media", "\"", "for", "being", "there", "and", "getting", "arrested", "."]
# ::lemmas ["activist", "Dick", "Gregory", "have", "also", "join", "the", "protest", ".", "thank", "\"", "white", "medium", "\"", "for", "be", "there", "and", "getting", "arrest", "."]
(c28-2 / multi-sentence
       :snt1 (c28-0 / join-04
                    :ARG0 (c28-8 / person
                                 :name (c28-6 / name
                                              :op1 "Dick"
                                              :op2 "Gregory")
                                 :ARG0-of (c28-14 / act-02))
                    :ARG1 (c28-13 / protest-01)
                    :mod (c28-4 / also))
       :snt2 (c28-12 / thank-01
                     :ARG0 (c28-5 / i)
                     :ARG1 (c28-9 / media
                                  :ARG1-of (c28-1 / white-02))
                     :ARG2 (c28-7 / and
                                  :op1 (c28-3 / be-located-at-91
                                              :ARG1 c28-9
                                              :ARG2 (c28-10 / there))
                                  :op2 (c28-11 / arrest-01
                                               :ARG1 c28-9))))

# ::snt Jesse Jackson leading a small group in prayer at the scene of 's death.
# ::tokens ["Jesse", "Jackson", "leading", "a", "small", "group", "in", "prayer", "at", "the", "scene", "of", "'s", "death", "."]
# ::lemmas ["Jesse", "Jackson", "lead", "a", "small", "group", "in", "prayer", "at", "the", "scene", "of", "'s", "death", "."]
(c29-0 / lead-02
       :ARG0 (c29-4 / person
                    :name (c29-3 / name
                                 :op1 "Jesse"
                                 :op2 "Jackson"))
       :ARG1 (c29-6 / group
                    :mod (c29-7 / small))
       :manner (c29-8 / pray-01
                      :ARG0 c29-4)
       :location (c29-2 / scene
                        :location-of (c29-5 / die-01
                                            :ARG1 (c29-1 / person))))

# ::snt You got me all wrong I but I also know history enough to know &amp; tend to be rather self-serv'n
# ::tokens ["You", "got", "me", "all", "wrong", "I", "but", "I", "also", "know", "history", "enough", "to", "know", "&", "amp", ";", "tend", "to", "be", "rather", "self", "-", "serv'n"]
# ::lemmas ["you", "get", "i", "all", "wrong", "i", "but", "i", "also", "know", "history", "enough", "to", "know", "&", "amp", ";", "tend", "to", "be", "rather", "self", "-", "serv'n"]
(c30-0 / multi-sentence
       :snt1 (c30-16 / contrast-01
                     :ARG1 (c30-8 / get-04
                                  :ARG0 (c30-15 / you)
                                  :ARG1 (c30-9 / wrong-04
                                               :ARG1 (c30-12 / i)
                                               :degree (c30-3 / all))
                                  :ARG2 c30-12)
                     :ARG2 (c30-14 / know-01
                                   :ARG0 c30-12
                                   :ARG1 (c30-4 / history)
                                   :mod (c30-11 / also)
                                   :ARG1-of (c30-2 / have-quant-91
                                                   :ARG3 (c30-5 / enough)
                                                   :ARG6 (c30-10 / know-01
                                                                 :ARG0 c30-12
                                                                 :ARG1 (c30-6 / and
                                                                              :op1 c30-4)
                                                                 :op2 (c30-17 / amp)))))
       :snt2 (c30-18 / tend-02
                     :ARG1 (c30-13 / i)
                     :ARG2 (c30-1 / serve-01
                                  :ARG0 c30-13
                                  :ARG2 c30-13
                                  :degree (c30-7 / rather))))

# ::snt is that a cameraman or a Sonic Car Hop?
# ::tokens ["is", "that", "a", "cameraman", "or", "a", "Sonic", "Car", "Hop", "?"]
# ::lemmas ["be", "that", "a", "cameraman", "or", "a", "sonic", "car", "Hop", "?"]
(c32-4 / amr-choice
       :op1 (c32-2 / cameraman)
       :op2 (c32-0 / event
                   :name (c32-1 / name
                                :op1 "Sonic"
                                :op2 "Car"
                                :op3 "Hop"))
       :domain (c32-3 / that))

# ::snt Damn, SpiderMan has really let himself go.
# ::tokens ["Damn", ",", "SpiderMan", "has", "really", "let", "himself", "go", "."]
# ::lemmas ["Damn", ",", "SpiderMan", "have", "really", "let", "himself", "go", "."]
(c33-0 / let-01
       :ARG0 (c33-2 / person
                    :name (c33-1 / name
                                 :op1 "SpiderMan"))
       :ARG1 (c33-5 / go-01
                    :ARG1 c33-2)
       :ARG1-of (c33-3 / real-04)
       :mod (c33-4 / damn
                   :mode expressive))

# ::snt Here he go
# ::tokens ["Here", "he", "go"]
# ::lemmas ["here", "he", "go"]
(c34-1 / go-01
       :ARG1 (c34-0 / he)
       :ARG4 (c34-2 / here))

# ::snt Knew that race baiting bigot would show up.
# ::tokens ["Knew", "that", "race", "baiting", "bigot", "would", "show", "up", "."]
# ::lemmas ["know", "that", "race", "baiting", "bigot", "would", "show", "up", "."]
(c35-5 / know-01
       :ARG0 (c35-1 / i)
       :ARG1 (c35-4 / show-up-02
                    :ARG1 (c35-0 / bigot
                                 :ARG0-of (c35-3 / bait-01
                                                 :ARG2 (c35-2 / race)))))

# ::snt really can't believe you are jumping on the hate Jackson train. did you dis Sharpton too?
# ::tokens ["really", "ca", "n't", "believe", "you", "are", "jumping", "on", "the", "hate", "Jackson", "train", ".", "did", "you", "dis", "Sharpton", "too", "?"]
# ::lemmas ["really", "can", "not", "believe", "you", "be", "jump", "on", "the", "hate", "Jackson", "train", ".", "do", "you", "dis", "Sharpton", "too", "?"]
(c36-3 / multi-sentence
       :snt1 (c36-8 / possible-01
                    :ARG1 (c36-5 / believe-01
                                 :ARG0 (c36-1 / you)
                                 :ARG1 (c36-0 / jump-on-bandwagon-09
                                              :ARG0 c36-1
                                              :ARG1 (c36-13 / train
                                                            :topic (c36-2 / hate-01
                                                                          :ARG1 (c36-14 / person
                                                                                        :name (c36-6 / name
                                                                                                     :op1 "Jackson")))))
                                 :ARG1-of (c36-9 / real-04))
                    :polarity -)
       :snt2 (c36-10 / displease-01
                     :ARG0 (c36-11 / you)
                     :ARG1 (c36-4 / person
                                  :name (c36-7 / name
                                               :op1 "Sharpton"))
                     :polarity (c36-15 / amr-unknown)
                     :mod (c36-12 / too)))

# ::snt Gross.
# ::tokens ["Gross", "."]
# ::lemmas ["Gross", "."]
(c37-0 / gross-03)
