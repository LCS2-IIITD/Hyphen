# ::snt , how many you suspect are in line?
# ::tokens [",", "how", "many", "you", "suspect", "are", "in", "line", "?"]
# ::lemmas [",", "how", "many", "you", "suspect", "be", "in", "line", "?"]
(c1-3 / suspect-01
      :ARG0 (c1-0 / you)
      :ARG1 (c1-1 / line-up-02
                  :ARG1 (c1-2 / person
                              :quant (c1-4 / amr-unknown))))

# ::snt thank you!
# ::tokens ["thank", "you", "!"]
# ::lemmas ["thank", "you", "!"]
(c2-1 / thank-01
      :ARG1 (c2-0 / you)
      :mode expressive)

# ::snt . Boy are they gonna be pissed when it turns out to be Prince Fielder talkin' baseball and singing show tunes..
# ::tokens [".", "Boy", "are", "they", "gon", "na", "be", "pissed", "when", "it", "turns", "out", "to", "be", "Prince", "Fielder", "talkin", "'", "baseball", "and", "singing", "show", "tunes", ".."]
# ::lemmas [".", "boy", "be", "they", "going", "to", "be", "piss", "when", "it", "turn", "out", "to", "be", "Prince", "Fielder", "talkin", "'", "baseball", "and", "singing", "show", "tune", ".."]
(c3-5 / piss-03
      :ARG0 (c3-9 / turn-out-11
                  :ARG1 (c3-10 / person
                               :name (c3-3 / name
                                           :op1 "Prince"
                                           :op2 "Fielder")
                               :ARG0-of (c3-7 / talk-01
                                              :ARG1 (c3-0 / baseball))
                               :ARG0-of (c3-8 / sing-01
                                              :ARG1 (c3-4 / tune
                                                          :mod (c3-1 / show-04)))))
      :ARG1 (c3-2 / they)
      :mod (c3-6 / boy
                 :mode expressive))

# ::snt I'm brutal at crowd estimates. maybe?
# ::tokens ["I", "'m", "brutal", "at", "crowd", "estimates", ".", "maybe", "?"]
# ::lemmas ["i", "be", "brutal", "at", "crowd", "estimate", ".", "maybe", "?"]
(c4-0 / multi-sentence
      :snt1 (c4-1 / brutal-02
                  :ARG0 (c4-3 / i)
                  :ARG1 (c4-2 / estimate-01
                              :ARG1 (c4-5 / crowd)))
      :snt2 (c4-4 / possible-01
                  :polarity (c4-6 / amr-unknown)))

# ::snt Former Clamshell Quintet anchor in good position for tkts! : Line for at Massey Hall.
# ::tokens ["Former", "Clamshell", "Quintet", "anchor", "in", "good", "position", "for", "tkts", "!", ":", "Line", "for", "at", "Massey", "Hall", "."]
# ::lemmas ["former", "Clamshell", "Quintet", "anchor", "in", "good", "position", "for", "tkts", "!", ":", "line", "for", "at", "Massey", "Hall", "."]
(c5-1 / multi-sentence
      :snt1 (c5-3 / be-located-at-91
                  :ARG1 (c5-12 / anchor
                               :mod (c5-8 / broadcast-program
                                          :name (c5-4 / name
                                                      :op1 "Clamshell"
                                                      :op2 "Quintet"))
                               :time (c5-0 / former))
                  :ARG2 (c5-6 / position
                              :ARG1-of (c5-9 / good-02)
                              :beneficiary (c5-11 / publication
                                                  :name (c5-5 / name
                                                              :op1 "TS"))))
      :snt2 (c5-2 / line
                  :location (c5-10 / building
                                   :name (c5-7 / name
                                               :op1 "Massey"
                                               :op2 "Hall"))))

# ::snt - Ummmmm....excuse me...he's in Toronto and TICKETMASTER DIDN'T SEND ME AN ALERT!?!?!?
# ::tokens ["-", "Ummmmm", "....", "excuse", "me", "...", "he", "'s", "in", "Toronto", "and", "TICKETMASTER", "DIDN'T", "SEND", "ME", "AN", "ALERT", "!", "?", "!", "?", "!", "?"]
# ::lemmas ["-", "Ummmmm", "....", "excuse", "i", "...", "he", "be", "in", "Toronto", "and", "TICKETMASTER", "DIDN'T", "send", "ME", "AN", "ALERT", "!", "?", "!", "?", "!", "?"]
(c6-2 / multi-sentence
      :snt1 (c6-6 / excuse-01
                  :ARG0 (c6-1 / you)
                  :ARG1 (c6-8 / i)
                  :mod (c6-3 / ummmmm
                             :mode expressive)
                  :mode imperative)
      :snt2 (c6-15 / and
                   :op1 (c6-4 / be-located-at-91
                              :ARG1 (c6-0 / he)
                              :ARG2 (c6-12 / city
                                           :name (c6-9 / name
                                                       :op1 "Toronto")))
                   :op2 (c6-14 / send-01
                               :ARG0 (c6-5 / organization
                                           :name (c6-10 / name
                                                        :op1 "TICKET"
                                                        :op2 "MASTER"))
                               :ARG1 (c6-7 / alert-01)
                               :ARG2 (c6-13 / i)
                               :polarity -)
                   :polarity (c6-11 / amr-unknown)))

# ::snt I see FOH being all FOH. : The line for at Massey Hall extends to back of building.
# ::tokens ["I", "see", "FOH", "being", "all", "FOH", ".", ":", "The", "line", "for", "at", "Massey", "Hall", "extends", "to", "back", "of", "building", "."]
# ::lemmas ["i", "see", "FOH", "be", "all", "FOH", ".", ":", "the", "line", "for", "at", "Massey", "Hall", "extend", "to", "back", "of", "building", "."]
(c7-2 / multi-sentence
      :snt1 (c7-10 / see-01
                   :ARG0 (c7-6 / i)
                   :ARG1 (c7-0 / have-mod-91
                               :ARG1 (c7-1 / food)
                               :ARG2 (c7-7 / food
                                           :mod (c7-11 / all))))
      :snt2 (c7-5 / extend-01
                  :ARG1 (c7-3 / line
                              :location (c7-4 / building
                                              :name (c7-8 / name
                                                          :op1 "Massey"
                                                          :op2 "Hall")))
                  :ARG4 (c7-9 / back
                              :part-of c7-4)))

# ::snt , thanks. I just worry that there's no point in getting down there now thinking the line is long enough
# ::tokens [",", "thanks", ".", "I", "just", "worry", "that", "there", "'s", "no", "point", "in", "getting", "down", "there", "now", "thinking", "the", "line", "is", "long", "enough"]
# ::lemmas [",", "thank", ".", "i", "just", "worry", "that", "there", "be", "no", "point", "in", "get", "down", "there", "now", "think", "the", "line", "be", "long", "enough"]
(c8-4 / multi-sentence
      :snt1 (c8-12 / thank-01
                   :ARG0 (c8-7 / i)
                   :ARG1 (c8-1 / you))
      :snt2 (c8-2 / worry-01
                  :ARG0 (c8-11 / think-01
                               :ARG0 (c8-10 / i)
                               :ARG1 (c8-0 / have-degree-91
                                           :ARG1 (c8-3 / line)
                                           :ARG2 (c8-9 / long-03
                                                       :ARG1 c8-3)
                                           :ARG3 (c8-6 / enough)))
                  :ARG1 c8-10
                  :mod (c8-5 / just)
                  :time (c8-8 / now)))

# ::snt hahaha. Love your tweets. For the record!
# ::tokens ["hahaha", ".", "Love", "your", "tweets", ".", "For", "the", "record", "!"]
# ::lemmas ["hahaha", ".", "love", "your", "tweet", ".", "for", "the", "record", "!"]
(c9-3 / multi-sentence
      :snt1 (c9-0 / haha
                  :mode expressive)
      :snt2 (c9-2 / love-01
                  :ARG1 (c9-5 / tweet-01
                              :ARG0 (c9-1 / you)))
      :snt3 (c9-4 / record-01))

# ::snt DANG. If I knew about that, I'd head down there.
# ::tokens ["DANG", ".", "If", "I", "knew", "about", "that", ",", "I", "'d", "head", "down", "there", "."]
# ::lemmas ["dang", ".", "if", "i", "know", "about", "that", ",", "i", "would", "head", "down", "there", "."]
(c10-1 / multi-sentence
       :snt1 (c10-7 / ANG
                    :mode expressive)
       :snt2 (c10-0 / head-02
                    :ARG0 (c10-2 / i)
                    :ARG1 (c10-6 / there)
                    :direction (c10-4 / down)
                    :condition (c10-3 / know-01
                                      :ARG0 c10-2
                                      :ARG1 (c10-5 / that))))

# ::snt a There is only one !
# ::tokens ["a", "There", "is", "only", "one", "!"]
# ::lemmas ["a", "there", "be", "only", "one", "!"]
(c11-0 / one
       :mod (c11-1 / only)
       :mode expressive)
