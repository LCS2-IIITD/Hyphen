# ::snt its a business not a charity. maybe police cld give rides free- they r paid by citizens
# ::tokens ["its", "a", "business", "not", "a", "charity", ".", "maybe", "police", "cld", "give", "rides", "free-", "they", "r", "paid", "by", "citizens"]
# ::lemmas ["its", "a", "business", "not", "a", "charity", ".", "maybe", "police", "cld", "give", "ride", "free-", "they", "r", "pay", "by", "citizen"]
(c1-1 / multi-sentence
      :snt1 (c1-3 / business
                  :domain (c1-4 / it)
                  :ARG1-of (c1-7 / contrast-01
                                 :ARG2 (c1-6 / charity
                                             :domain (c1-8 / it)
                                             :polarity -)))
      :snt2 (c1-5 / possible-01
                  :ARG1 (c1-9 / give-01
                              :ARG0 (c1-12 / police)
                              :ARG1 (c1-10 / ride-01
                                           :ARG1-of (c1-0 / free-03))
                              :ARG2 c1-12)
                  :ARG1-of (c1-11 / cause-01
                                  :ARG0 (c1-2 / pay-01
                                              :ARG0 (c1-13 / citizen)
                                              :ARG2 c1-12))))

# ::snt it's probably the only way they can get drivers to work- I dont blame them for a second.
# ::tokens ["it", "'s", "probably", "the", "only", "way", "they", "can", "get", "drivers", "to", "work-", "I", "do", "nt", "blame", "them", "for", "a", "second", "."]
# ::lemmas ["it", "be", "probably", "the", "only", "way", "they", "can", "get", "driver", "to", "work-", "i", "do", "not", "blame", "they", "for", "a", "second", "."]
(c2-13 / and
       :op1 (c2-0 / way
                  :mod (c2-2 / only)
                  :manner-of (c2-7 / get-05
                                   :ARG0 (c2-11 / they)
                                   :ARG1 (c2-5 / person
                                               :ARG0-of (c2-6 / drive-01))
                                   :ARG2 (c2-4 / work-01
                                               :ARG0 c2-5))
                  :domain (c2-3 / it)
                  :mod (c2-12 / probable))
       :op2 (c2-1 / blame-01
                  :ARG0 (c2-8 / i)
                  :ARG1 c2-5
                  :duration (c2-9 / temporal-quantity
                                  :unit (c2-10 / second)
                                  :quant 1)
                  :polarity -))

# ::snt Boooo : Uber Is Allegedly Charging Passengers $100 Minimum During Sydney Siege via
# ::tokens ["Boooo", ":", "Uber", "Is", "Allegedly", "Charging", "Passengers", "$", "100", "Minimum", "During", "Sydney", "Siege", "via"]
# ::lemmas ["boooo", ":", "Uber", "be", "allegedly", "charge", "passenger", "$", "100", "Minimum", "during", "Sydney", "Siege", "via"]
(c3-1 / multi-sentence
      :snt1 (c3-2 / boooo
                  :mode expressive)
      :snt2 (c3-13 / allege-01
                   :ARG1 (c3-7 / charge-01
                               :ARG0 (c3-6 / company
                                           :name (c3-3 / name
                                                       :op1 " Uber"))
                               :ARG1 (c3-5 / minimum
                                           :mod (c3-0 / monetary-quantity
                                                      :unit (c3-8 / dollar)
                                                      :quant 100))
                               :ARG2 (c3-9 / person
                                           :ARG0-of (c3-12 / travel-01))
                               :time (c3-11 / Siege
                                            :location (c3-10 / city
                                                             :name (c3-4 / name
                                                                         :op1 "Sydney"))))))

# ::snt how about free rides to get people home safely? Come on, guys. Use some common sense.
# ::tokens ["how", "about", "free", "rides", "to", "get", "people", "home", "safely", "?", "Come", "on", ",", "guys", ".", "Use", "some", "common", "sense", "."]
# ::lemmas ["how", "about", "free", "ride", "to", "get", "people", "home", "safely", "?", "come", "on", ",", "guy", ".", "use", "some", "common", "sense", "."]
(c4-3 / multi-sentence
      :snt1 (c4-14 / amr-unknown
                   :topic (c4-8 / ride-01
                                :ARG1-of (c4-2 / free-03)
                                :purpose (c4-10 / get-05
                                                :ARG1 (c4-7 / person)
                                                :ARG2 (c4-0 / home)
                                                :ARG0-of (c4-13 / safe-01))))
      :snt2 (c4-9 / come-on-25
                  :ARG1 (c4-11 / guy)
                  :mode imperative)
      :snt3 (c4-4 / use-01
                  :ARG0 (c4-1 / you)
                  :ARG1 (c4-6 / sense-02
                              :mod (c4-12 / common)
                              :mod (c4-5 / some))
                  :mode imperative))

# ::snt Most places have laws about price gouging in a crisis situation no matter the cause. Criminals.
# ::tokens ["Most", "places", "have", "laws", "about", "price", "gouging", "in", "a", "crisis", "situation", "no", "matter", "the", "cause", ".", "Criminals", "."]
# ::lemmas ["most", "place", "have", "law", "about", "price", "gouging", "in", "a", "crisis", "situation", "no", "matter", "the", "cause", ".", "criminal", "."]
(c5-2 / multi-sentence
      :snt1 (c5-0 / have-03
                  :ARG0 (c5-4 / place
                              :quant (c5-5 / most))
                  :ARG1 (c5-1 / law
                              :topic (c5-7 / gouge-02
                                           :ARG1 (c5-12 / price)
                                           :time (c5-10 / situation
                                                        :mod (c5-6 / crisis))))
                  :ARG1-of (c5-8 / regardless-91
                                 :ARG2 (c5-9 / cause-01
                                             :ARG1 c5-7)))
      :snt2 (c5-3 / person
                  :ARG2-of (c5-11 / criminal-03)))

# ::snt again, do you hear that?
# ::tokens ["again", ",", "do", "you", "hear", "that", "?"]
# ::lemmas ["again", ",", "do", "you", "hear", "that", "?"]
(c6-0 / hear-01
      :polarity (c6-4 / amr-unknown)
      :ARG0 (c6-1 / you)
      :ARG1 (c6-3 / that)
      :mod (c6-2 / again))

# ::snt RT : Uber Is Allegedly Charging Passengers $100 Minimum During Sydney Siege via
# ::tokens ["RT", ":", "Uber", "Is", "Allegedly", "Charging", "Passengers", "$", "100", "Minimum", "During", "Sydney", "Siege", "via"]
# ::lemmas ["RT", ":", "Uber", "Is", "Allegedly", "Charging", "Passengers", "$", "100", "Minimum", "during", "Sydney", "Siege", "via"]
(c7-10 / say-01
       :ARG0 (c7-4 / publication
                   :name (c7-2 / name
                               :op1 "RT"))
       :ARG1 (c7-14 / allege-01
                    :ARG1 (c7-6 / charge-01
                                :ARG0 (c7-5 / company
                                            :name (c7-3 / name
                                                        :op1 "Uber"))
                                :ARG1 (c7-0 / minimum
                                            :op1 (c7-7 / monetary-quantity
                                                       :unit (c7-8 / dollar)
                                                       :quant 100))
                                :ARG2 (c7-13 / person
                                             :ARG0-of (c7-12 / travel-01))
                                :time (c7-1 / Siege
                                            :location (c7-9 / city
                                                            :name (c7-11 / name
                                                                         :op1 "Sydney"))))))

# ::snt . The pricing is a computer-controlled algorithm that just looks at supply/demand.
# ::tokens [".", "The", "pricing", "is", "a", "computer", "-", "controlled", "algorithm", "that", "just", "looks", "at", "supply", "/", "demand", "."]
# ::lemmas [".", "the", "pricing", "be", "a", "computer", "-", "control", "algorithm", "that", "just", "look", "at", "supply", "/", "demand", "."]
(c8-8 / algorithm
      :ARG1-of (c8-5 / control-01
                     :ARG0 (c8-4 / computer))
      :ARG0-of (c8-1 / look-01
                     :ARG1 (c8-7 / slash
                                 :op1 (c8-2 / supply-01)
                                 :op2 (c8-6 / demand-01))
                     :mod (c8-0 / just))
      :domain (c8-3 / price-01))

# ::snt In the future, texbooks for PR classes will have a whole chapter on Uber
# ::tokens ["In", "the", "future", ",", "texbooks", "for", "PR", "classes", "will", "have", "a", "whole", "chapter", "on", "Uber"]
# ::lemmas ["in", "the", "future", ",", "texbook", "for", "pr", "class", "will", "have", "a", "whole", "chapter", "on", "Uber"]
(c9-0 / have-03
      :ARG0 (c9-7 / class
                  :mod (c9-5 / publication
                             :name (c9-3 / name
                                         :op1 "Texas"))
                  :purpose (c9-10 / publication
                                  :name (c9-4 / name
                                              :op1 "PR")))
      :ARG1 (c9-6 / chapter
                  :topic (c9-9 / company
                               :name (c9-8 / name
                                           :op1 "Uber"))
                  :mod (c9-1 / whole))
      :time (c9-2 / future))

# ::snt allegedly &amp; no true source . Bull Id say . Effort to discredit .
# ::tokens ["allegedly", "&", "amp", ";", "no", "true", "source", ".", "Bull", "I", "d", "say", ".", "Effort", "to", "discredit", "."]
# ::lemmas ["allegedly", "&", "amp", ";", "no", "true", "source", ".", "Bull", "I", "d", "say", ".", "effort", "to", "discredit", "."]
(c10-0 / multi-sentence
       :snt1 (c10-11 / and
                     :op1 (c10-4 / allege-01)
                     :op2 (c10-7 / person
                                 :name (c10-6 / name
                                              :op1 "amp"))
                     :op3 (c10-9 / source
                                 :ARG1-of (c10-10 / true-01)
                                 :polarity -))
       :snt2 (c10-2 / say-01
                    :ARG0 (c10-5 / i)
                    :ARG1 (c10-1 / bullshit))
       :snt3 (c10-3 / effort-01
                    :ARG1 (c10-8 / discredit-01)))

# ::snt . The computer doesn't know or care why demand spiked and supply failed to rise to meet it.
# ::tokens [".", "The", "computer", "does", "n't", "know", "or", "care", "why", "demand", "spiked", "and", "supply", "failed", "to", "rise", "to", "meet", "it", "."]
# ::lemmas [".", "the", "computer", "do", "not", "know", "or", "care", "why", "demand", "spiked", "and", "supply", "fail", "to", "rise", "to", "meet", "it", "."]
(c11-2 / or
       :op1 (c11-4 / know-01
                   :ARG0 (c11-6 / computer)
                   :ARG1 (c11-11 / thing
                                 :ARG0-of (c11-5 / cause-01
                                                 :ARG1 (c11-12 / and
                                                               :op1 (c11-10 / spike-04
                                                                            :ARG1 (c11-7 / demand-01))
                                                               :op2 (c11-0 / fail-01
                                                                           :ARG1 (c11-3 / supply-01)
                                                                           :ARG2 (c11-8 / rise-01
                                                                                        :ARG1 c11-3)
                                                                           :purpose (c11-1 / meet-01
                                                                                           :ARG0 c11-3
                                                                                           :ARG1 c11-7)))))
                   :polarity -)
       :op2 (c11-9 / care-01
                   :ARG0 c11-6
                   :ARG1 c11-11
                   :polarity -))

# ::snt : Uber Is Allegedly Charging Passengers $100 Minimum During Sydney Siege via
# ::tokens [":", "Uber", "Is", "Allegedly", "Charging", "Passengers", "$", "100", "Minimum", "During", "Sydney", "Siege", "via"]
# ::lemmas [":", "uber", "be", "allegedly", "charge", "passenger", "$", "100", "Minimum", "during", "Sydney", "Siege", "via"]
(c12-12 / allege-01
        :ARG1 (c12-5 / charge-01
                     :ARG0 (c12-4 / company
                                  :name (c12-1 / name
                                               :op1 " Uber"))
                     :ARG1 (c12-0 / minimum
                                  :op1 (c12-3 / monetary-quantity
                                              :unit (c12-6 / dollar)
                                              :quant 100))
                     :ARG2 (c12-7 / person
                                  :ARG0-of (c12-11 / travel-01))
                     :time (c12-9 / Siege
                                  :location (c12-8 / city
                                                   :name (c12-2 / name
                                                                :op1 "Sydney"))))
        :medium (c12-10 / thing))

# ::snt Does any one need sny more excuses not to use ? Apart from safety that is!
# ::tokens ["Does", "any", "one", "need", "sny", "more", "excuses", "not", "to", "use", "?", "Apart", "from", "safety", "that", "is", "!"]
# ::lemmas ["do", "any", "one", "need", "sny", "more", "excuse", "not", "to", "use", "?", "apart", "from", "safety", "that", "be", "!"]
(c13-0 / multi-sentence
       :snt1 (c13-6 / need-01
                    :polarity (c13-10 / amr-unknown)
                    :ARG0 (c13-5 / anyone)
                    :ARG1 (c13-3 / excuse-02
                                 :ARG1 (c13-1 / use-01
                                              :polarity -)
                                 :quant (c13-7 / more
                                               :mod (c13-8 / sny))))
       :snt2 (c13-2 / except-01
                    :ARG1 (c13-4 / safe-01)
                    :ARG2 (c13-9 / that)))

# ::snt that's the Australia tax lol
# ::tokens ["that", "'s", "the", "Australia", "tax", "lol"]
# ::lemmas ["that", "be", "the", "Australia", "tax", "lol"]
(c14-6 / tax-01
       :ARG0 (c14-4 / country
                    :name (c14-2 / name
                                 :op1 "Australia"))
       :domain (c14-5 / that)
       :ARG2-of (c14-0 / laugh-01
                       :ARG0 (c14-1 / i)
                       :manner (c14-3 / loud)
                       :mode expressive))
