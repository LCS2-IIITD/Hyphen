# ::snt ?
# ::tokens ["?"]
# ::lemmas ["?"]
(c2-0 / request-confirmation-91)

# ::snt QUOI? ENCORE UN? BORDEL JE PART H EN COURS ET C'EST LE BORDEL
# ::tokens ["QUOI", "?", "ENCORE", "UN", "?", "BORDEL", "JE", "PART", "H", "EN", "COURS", "ET", "C'EST", "LE", "BORDEL"]
# ::lemmas ["QUOI", "?", "ENCORE", "UN", "?", "BORDEL", "JE", "PART", "H", "EN", "COURS", "ET", "C'EST", "LE", "BORDEL"]
(c3-1 / multi-sentence
      :snt1 (c3-8 / country
                  :name (c3-4 / name
                              :op1 "QuoI"))
      :snt2 (c3-2 / organization
                  :name (c3-5 / name
                              :op1 "ENCORE"
                              :op2 "UN")
                  :polarity (c3-10 / amr-unknown))
      :snt3 (c3-0 / joint-01
                  :ARG1 (c3-7 / country
                              :name (c3-6 / name
                                          :op1 "BORDEL"))
                  :ARG2 (c3-9 / part)
                  :manner (c3-3 / amr-unintelligible
                                :value "C'EST"
                                :op3 "Le"
                                :op4 "BORDEL")))

# ::snt c du bidon regarde le tweet que jnaibrt
# ::tokens ["c", "du", "bidon", "regarde", "le", "tweet", "que", "jnaibrt"]
# ::lemmas ["c", "du", "bidon", "regarde", "le", "tweet", "que", "jnaibrt"]
(c4-1 / multi-sentence
      :snt1 (c4-3 / amr-unintelligible
                  :value "c du bidon regarde-le")
      :snt2 (c4-2 / amr-unintelligible
                  :value "c du bidon regarde-le")
      :snt3 (c4-0 / amr-unintelligible
                  :value "jnaibrt"))

# ::snt ah ouais :/
# ::tokens ["ah", "ouais", ":/"]
# ::lemmas ["ah", "ouais", ":/"]
(c5-0 / ouais
      :mod (c5-1 / ah))

# ::snt scared for my country
# ::tokens ["scared", "for", "my", "country"]
# ::lemmas ["scared", "for", "my", "country"]
(c6-0 / scare-01
      :ARG1 (c6-1 / country
                  :poss (c6-2 / i)))

# ::snt you
# ::tokens ["you"]
# ::lemmas ["you"]
(c7-0 / you)

# ::snt c'est juste une rumeur, ce n'est pas confirm. Seulement des touristes auraient vu l'homme arme.
# ::tokens ["c'est", "juste", "une", "rumeur", ",", "ce", "n'est", "pas", "confirm", ".", "Seulement", "des", "touristes", "auraient", "vu", "l'homme", "arme", "."]
# ::lemmas ["c'", "juste", "une", "rumeur", ",", "ce", "n'est", "pa", "confirm", ".", "seulement", "des", "touriste", "auraient", "vu", "l'homme", "arme", "."]
(c8-1 / multi-sentence
      :snt1 (c8-0 / have-concession-91
                  :ARG1 (c8-9 / sense-01
                              :ARG1 (c8-6 / rumeur)
                              :polarity -)
                  :ARG2 c8-0
                  :ARG1 (c8-2 / sense-01
                              :ARG1 (c8-7 / confirm-01)
                              :polarity -)
                  :ARG2 (c8-12 / amr-unknown))
      :snt2 (c8-3 / auraient
                  :mod (c8-8 / des
                             :op1 (c8-5 / person
                                        :ARG0-of (c8-11 / tour-01)))
                  :mod (c8-4 / au-naturel
                             :mod-of c8-3))
      :mod (c8-10 / arme))

# ::snt i think we're gonna have a shitty year as well cause we'll hardly get over this...
# ::tokens ["i", "think", "we", "'re", "gon", "na", "have", "a", "shitty", "year", "as", "well", "cause", "we", "'ll", "hardly", "get", "over", "this", "..."]
# ::lemmas ["i", "think", "we", "be", "going", "to", "have", "a", "shitty", "year", "as", "well", "cause", "we", "'ll", "hardly", "get", "over", "this", "..."]
(c9-9 / think-01
      :ARG0 (c9-5 / i)
      :ARG1 (c9-0 / have-03
                  :ARG0 (c9-1 / we)
                  :ARG1 (c9-2 / year
                              :mod (c9-8 / shitty))
                  :mod (c9-10 / as-well)
                  :ARG1-of (c9-6 / cause-01
                                 :ARG0 (c9-4 / over-02
                                             :ARG1 c9-1
                                             :ARG2 (c9-7 / this)
                                             :degree (c9-3 / hardly)))))

# ::snt whatsup
# ::tokens ["whatsup"]
# ::lemmas ["whatsup"]
(c10-0 / whatsup)

# ::snt and scared
# ::tokens ["and", "scared"]
# ::lemmas ["and", "scare"]
(c11-1 / and
       :op2 (c11-0 / scare-01))

# ::snt me too..
# ::tokens ["me", "too", ".."]
# ::lemmas ["i", "too", ".."]
(c12-1 / i
       :mod (c12-0 / too))

# ::snt Thank for your support
# ::tokens ["Thank", "for", "your", "support"]
# ::lemmas ["thank", "for", "your", "support"]
(c13-2 / thank-01
       :ARG1 (c13-1 / you)
       :ARG2 (c13-0 / support-01
                    :ARG0 c13-1))

# ::snt Y a un homme arme
# ::tokens ["Y", "a", "un", "homme", "arme"]
# ::lemmas ["Y", "a", "un", "homme", "arme"]
(c14-0 / homme
       :domain (c14-1 / you)
       :polarity -)

# ::snt :/
# ::tokens [":/"]
# ::lemmas [":/"]
(c15-0 / amr-empty)

# ::snt AH OUF PSK Y A DEJA BC COMME SA QUOI..
# ::tokens ["AH", "OUF", "PSK", "Y", "A", "DEJA", "BC", "COMME", "SA", "QUOI", ".."]
# ::lemmas ["AH", "OUF", "PSK", "Y", "A", "DEJA", "BC", "COMME", "SA", "QUOI", ".."]
(c16-6 / and
       :op1 (c16-0 / hey
                   :mode expressive)
       :op2 (c16-5 / come-01
                   :ARG1 (c16-1 / you)
                   :ARG4 (c16-4 / province
                                :name (c16-3 / name
                                             :op1 "Bangladesh"))
                   :op3-of c16-6
                   :mode imperative)
       :ARG1 c16-1
       :ARG4 (c16-2 / quo)
       :mode imperative)

# ::snt i lovw
# ::tokens ["i", "lovw"]
# ::lemmas ["i", "lovw"]
(c17-0 / love-01
       :ARG0 (c17-1 / i))

# ::snt TROCADRO ? ???
# ::tokens ["TROCADRO", "?", "?", "?", "?"]
# ::lemmas ["trocadro", "?", "?", "?", "?"]
(c18-1 / person
       :polarity (c18-2 / amr-unknown)
       :name (c18-0 / name
                    :op1 "TROCADRO"))

# ::snt yeah me too.. We are all sad
# ::tokens ["yeah", "me", "too", "..", "We", "are", "all", "sad"]
# ::lemmas ["yeah", "i", "too", "..", "we", "be", "all", "sad"]
(c19-2 / multi-sentence
       :snt1 (c19-0 / yeah
                    :mod (c19-4 / too)
                    :mode expressive)
       :snt2 (c19-3 / sad-02
                    :ARG1 (c19-1 / we
                                 :mod (c19-5 / all))))

# ::snt I'm afraid ....
# ::tokens ["I", "'m", "afraid", "...."]
# ::lemmas ["i", "be", "afraid", "...."]
(c20-0 / fear-01
       :ARG0 (c20-1 / i))

# ::snt hi
# ::tokens ["hi"]
# ::lemmas ["hi"]
(c21-0 / hi)

# ::snt y'a quoi au Trocadro ?
# ::tokens ["y'a", "quoi", "au", "Trocadro", "?"]
# ::lemmas ["y'a", "quoi", "au", "Trocadro", "?"]
(c22-1 / au-Trocadro
       :polarity (c22-0 / amr-unknown))

# ::snt Shut up, be respectful please.
# ::tokens ["Shut", "up", ",", "be", "respectful", "please", "."]
# ::lemmas ["Shut", "up", ",", "be", "respectful", "please", "."]
(c23-3 / and
       :op1 (c23-0 / shut-up-06
                   :ARG0 (c23-1 / you
                                :ARG1-of c23-0)
                   :mode imperative
                   :polite +)
       :op2 (c23-2 / respect-01
                   :ARG0 c23-1
                   :mode imperative
                   :polite +))

# ::snt it's so sad i'm in France..
# ::tokens ["it", "'s", "so", "sad", "i", "'m", "in", "France", ".."]
# ::lemmas ["it", "be", "so", "sad", "i", "be", "in", "France", ".."]
(c24-5 / sad-02
       :ARG0 (c24-0 / be-located-at-91
                    :ARG1 (c24-2 / i)
                    :ARG2 (c24-4 / country
                                 :name (c24-3 / name
                                              :op1 "France")))
       :degree (c24-1 / so))

# ::snt Follow me
# ::tokens ["Follow", "me"]
# ::lemmas ["follow", "i"]
(c25-1 / follow-02
       :ARG0 (c25-0 / you)
       :ARG1 (c25-2 / i)
       :mode imperative)

# ::snt NON C UNE FAISSE ALERTE
# ::tokens ["NON", "C", "UNE", "FAISSE", "ALERTE"]
# ::lemmas ["NON", "C", "UNE", "FAISSE", "ALERTE"]
(c26-0 / no-one
       :name (c26-1 / name
                    :op1 "NON"
                    :op2 "CUNE"
                    :op3 "FAISSE"
                    :op4 "AlerTE"))

# ::snt thank for your support ,France love you
# ::tokens ["thank", "for", "your", "support", ",", "France", "love", "you"]
# ::lemmas ["thank", "for", "your", "support", ",", "France", "love", "you"]
(c27-6 / and
       :op1 (c27-5 / thank-01
                   :ARG1 (c27-0 / you)
                   :ARG2 (c27-4 / support-01
                                :ARG0 c27-0))
       :op2 (c27-1 / love-01
                   :ARG0 (c27-3 / country
                                :name (c27-2 / name
                                             :op1 "France"))
                   :ARG1 c27-0))

# ::snt Terrorists are in my city: O
# ::tokens ["Terrorists", "are", "in", "my", "city", ":", "O"]
# ::lemmas ["terrorist", "be", "in", "my", "city", ":", "o"]
(c28-0 / be-located-at-91
       :ARG1 (c28-4 / terrorist)
       :ARG2 (c28-3 / city
                    :poss (c28-2 / i))
       :mod (c28-1 / emoticon
                   :value "O"))

# ::snt il y a un homme arm la bas
# ::tokens ["il", "y", "a", "un", "homme", "arm", "la", "bas"]
# ::lemmas ["il", "y", "a", "un", "homme", "arm", "la", "bas"]
(c29-3 / arm-01
       :ARG0 (c29-1 / you)
       :ARG1 (c29-2 / amr-unintelligible
                    :value "il")
       :mod (c29-0 / hmm
                   :mode expressive))

# ::snt it's live on tv
# ::tokens ["it", "'s", "live", "on", "tv"]
# ::lemmas ["it", "be", "live", "on", "tv"]
(c30-3 / broadcast-program
       :name (c30-0 / name
                    :op1 "Sky")
       :medium-of (c30-2 / it)
       :manner (c30-1 / live))

# ::snt me too omg that's horrible
# ::tokens ["me", "too", "omg", "that", "'s", "horrible"]
# ::lemmas ["i", "too", "omg", "that", "be", "horrible"]
(c31-0 / horrible
       :domain (c31-1 / that)
       :degree (c31-3 / too)
       :mod (c31-2 / oh-my-god
                   :mode expressive))

# ::snt .....
# ::tokens ["....."]
# ::lemmas ["....."]
(c32-0 / amr-empty)
