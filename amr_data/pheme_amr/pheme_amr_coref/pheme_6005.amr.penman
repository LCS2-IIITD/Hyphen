# ::snt NEGATIVE I VETO UR WAY OF LIFE
# ::tokens ["NEGATIVE", "I", "VETO", "UR", "WAY", "OF", "LIFE"]
# ::lemmas ["NEGATIVE", "i", "veto", "ur", "WAY", "of", "life"]
(c1-4 / value-02
      :ARG0 (c1-3 / i)
      :ARG1 (c1-0 / way
                  :manner-of (c1-2 / live-01)
                  :poss (c1-1 / you)))

# ::snt To The Middle Ages...
# ::tokens ["To", "The", "Middle", "Ages", "..."]
# ::lemmas ["to", "The", "Middle", "Ages", "..."]
(c2-1 / go-back-19
      :ARG2 (c2-2 / age
                  :mod (c2-0 / middle)))

# ::snt u want to say just print the cartoons
# ::tokens ["u", "want", "to", "say", "just", "print", "the", "cartoons"]
# ::lemmas ["u", "want", "to", "say", "just", "print", "the", "cartoon"]
(c3-1 / want-01
      :ARG0 (c3-2 / you)
      :ARG1 (c3-5 / say-01
                  :ARG0 c3-2
                  :ARG1 (c3-3 / print-01
                              :ARG0 c3-2
                              :ARG1 (c3-4 / cartoon)
                              :mod (c3-0 / just)
                              :mode imperative)))

# ::snt right lol
# ::tokens ["right", "lol"]
# ::lemmas ["right", "lol"]
(c4-0 / right-06
      :ARG2-of (c4-1 / laugh-01
                     :manner (c4-2 / loud)))

# ::snt Maybe they intend return their homelands, but just have hang-out in the EU while their homes R being remodeled.srcsm
# ::tokens ["Maybe", "they", "intend", "return", "their", "homelands", ",", "but", "just", "have", "hang", "-", "out", "in", "the", "EU", "while", "their", "homes", "R", "being", "remodeled.srcsm"]
# ::lemmas ["maybe", "they", "intend", "return", "their", "homeland", ",", "but", "just", "have", "hang", "-", "out", "in", "the", "EU", "while", "their", "home", "r", "be", "remodeled.srcsm"]
(c5-9 / contrast-01
      :ARG1 (c5-7 / possible-01
                  :ARG1 (c5-3 / intend-01
                              :ARG0 (c5-10 / they)
                              :ARG1 (c5-8 / return-02
                                          :ARG0 c5-10
                                          :ARG1 (c5-0 / homeland
                                                      :poss c5-10))))
      :ARG2 (c5-11 / hang-out-06
                   :ARG1 c5-10
                   :ARG2 (c5-2 / organization
                               :name (c5-5 / name
                                           :op1 "EU"))
                   :time (c5-4 / remodel-01
                               :ARG1 (c5-6 / home
                                           :poss c5-10))
                   :mod (c5-1 / just)))

# ::snt is a global disgrace.
# ::tokens ["is", "a", "global", "disgrace", "."]
# ::lemmas ["be", "a", "global", "disgrace", "."]
(c6-0 / disgrace-01
      :mod (c6-1 / globe))

# ::snt They see themselves as the advance scouting parties for the return of the Ottoman Empire.
# ::tokens ["They", "see", "themselves", "as", "the", "advance", "scouting", "parties", "for", "the", "return", "of", "the", "Ottoman", "Empire", "."]
# ::lemmas ["they", "see", "themselves", "as", "the", "advance", "scout", "party", "for", "the", "return", "of", "the", "Ottoman", "Empire", "."]
(c7-5 / see-01
      :ARG0 (c7-6 / they
                  :ARG1-of c7-5)
      :ARG2 (c7-3 / party
                  :ARG0-of (c7-0 / scout-01)
                  :ARG1-of (c7-7 / advance-01)
                  :purpose (c7-4 / return-01
                                 :ARG1 (c7-1 / empire
                                             :name (c7-2 / name
                                                         :op1 "Ottoman"
                                                         :op2 "Empire")))))

# ::snt Finally someone says what everyone is thinking but afraid to say.
# ::tokens ["Finally", "someone", "says", "what", "everyone", "is", "thinking", "but", "afraid", "to", "say", "."]
# ::lemmas ["finally", "someone", "say", "what", "everyone", "be", "think", "but", "afraid", "to", "say", "."]
(c8-7 / say-01
      :ARG0 (c8-2 / someone)
      :ARG1 (c8-8 / thing
                  :ARG1-of (c8-6 / think-01
                                 :ARG0 (c8-3 / everyone)
                                 :ARG1-of (c8-5 / contrast-01
                                                :ARG2 (c8-0 / fear-01
                                                            :ARG0 c8-3
                                                            :ARG1 (c8-1 / say-01
                                                                        :ARG0 c8-3)))))
      :time (c8-4 / final))

# ::snt I don't see anything hateful about this. Its actually logical. You don't relocate to a place you know ur gonna hate! !
# ::tokens ["I", "do", "n't", "see", "anything", "hateful", "about", "this", ".", "Its", "actually", "logical", ".", "You", "do", "n't", "relocate", "to", "a", "place", "you", "know", "ur", "gon", "na", "hate", "!", "!"]
# ::lemmas ["i", "do", "not", "see", "anything", "hateful", "about", "this", ".", "its", "actually", "logical", ".", "you", "do", "not", "relocate", "to", "a", "place", "you", "know", "ur", "going", "to", "hate", "!", "!"]
(c9-3 / multi-sentence
      :snt1 (c9-11 / see-01
                   :ARG0 (c9-6 / i)
                   :ARG1 (c9-13 / anything
                                :ARG0-of (c9-0 / hate-01)
                                :topic (c9-12 / this))
                   :polarity -)
      :snt2 (c9-2 / logical
                  :domain (c9-10 / it)
                  :ARG1-of (c9-5 / actual-02))
      :snt3 (c9-9 / relocate-01
                  :ARG1 (c9-1 / you)
                  :ARG2 (c9-8 / place
                              :ARG1-of (c9-4 / hate-01
                                             :ARG0 c9-1
                                             :ARG1-of (c9-7 / know-01
                                                            :ARG0 c9-1)))
                  :polarity -))

# ::snt A swift kick up the Al'arse and Abdul is on his way, back to sand surfing.
# ::tokens ["A", "swift", "kick", "up", "the", "Al'arse", "and", "Abdul", "is", "on", "his", "way", ",", "back", "to", "sand", "surfing", "."]
# ::lemmas ["a", "swift", "kick", "up", "the", "al'arse", "and", "Abdul", "be", "on", "his", "way", ",", "back", "to", "sand", "surfing", "."]
(c10-11 / and
        :op1 (c10-10 / kick-01
                     :ARG1 (c10-4 / aircraft-type
                                  :name (c10-5 / name
                                               :op1 "Al'arse"))
                     :manner (c10-9 / swift)
                     :direction (c10-1 / up))
        :op2 (c10-8 / go-02
                    :ARG0 (c10-7 / person
                                 :name (c10-6 / name
                                              :op1 "Abdul"))
                    :ARG4 (c10-3 / surf-01
                                 :ARG0 c10-7
                                 :ARG1 (c10-0 / sand))
                    :direction (c10-2 / back)))

# ::snt And don't let the door hit you in the ass.
# ::tokens ["And", "do", "n't", "let", "the", "door", "hit", "you", "in", "the", "ass", "."]
# ::lemmas ["and", "do", "not", "let", "the", "door", "hit", "you", "in", "the", "ass", "."]
(c11-5 / and
       :op2 (c11-2 / let-01
                   :ARG0 (c11-1 / you
                                :part (c11-3 / ass))
                   :ARG1 (c11-0 / hit-01
                                :ARG0 (c11-4 / door)
                                :ARG1 c11-1
                                :ARG2 c11-3)
                   :polarity -
                   :mode imperative))

# ::snt HEATHEN JUDGES
# ::tokens ["HEATHEN", "JUDGES"]
# ::lemmas ["heathen", "JUDGES"]
(c12-0 / verdict
       :ARG2-of (c12-1 / die-01))

# ::snt ..Respect and honor our way of life, or get lost..!!..
# ::tokens ["..", "Respect", "and", "honor", "our", "way", "of", "life", ",", "or", "get", "lost", "..", "!", "!", ".."]
# ::lemmas ["..", "respect", "and", "honor", "our", "way", "of", "life", ",", "or", "get", "lose", "..", "!", "!", ".."]
(c13-3 / or
       :op1 (c13-8 / and
                   :op1 (c13-5 / respect-01
                               :ARG0 (c13-1 / we)
                               :ARG1 (c13-4 / way
                                            :manner-of (c13-2 / live-01
                                                              :ARG0 c13-1)
                                            :poss c13-1))
                   :op2 (c13-0 / honor-01
                               :ARG0 c13-1
                               :ARG1 c13-4))
       :op2 (c13-6 / get-03
                   :ARG1 c13-1
                   :ARG2 (c13-7 / lost-02
                                :ARG1 c13-1)))

# ::snt world need to pull together stop feeding the monster bits of . stop crippling
# ::tokens ["world", "need", "to", "pull", "together", "stop", "feeding", "the", "monster", "bits", "of", ".", "stop", "crippling"]
# ::lemmas ["world", "need", "to", "pull", "together", "stop", "feed", "the", "monster", "bit", "of", ".", "stop", "cripple"]
(c14-3 / multi-sentence
       :snt1 (c14-7 / need-01
                    :ARG0 (c14-0 / world)
                    :ARG1 (c14-8 / pull-06
                                 :ARG0 c14-0
                                 :ARG1 (c14-13 / together)))
       :snt2 (c14-12 / stop-01
                     :ARG0 (c14-1 / you)
                     :ARG1 (c14-2 / feed-01
                                  :ARG0 c14-1
                                  :ARG2 (c14-4 / bit
                                               :mod (c14-9 / monster)
                                               :part-of (c14-11 / you))
                                  :mode imperative)
                     :mode imperative)
       :snt3 (c14-6 / stop-01
                    :ARG0 (c14-5 / you)
                    :ARG1 (c14-10 / cripple-01
                                  :ARG1 c14-5)
                    :mode imperative))

# ::snt - respect is always suppose to work both ways. Right?!
# ::tokens ["-", "respect", "is", "always", "suppose", "to", "work", "both", "ways", ".", "Right", "?", "!"]
# ::lemmas ["-", "respect", "be", "always", "suppose", "to", "work", "both", "way", ".", "right", "?", "!"]
(c15-1 / multi-sentence
       :snt1 (c15-6 / suppose-02
                    :ARG1 (c15-5 / respect-01)
                    :ARG2 (c15-0 / work-09
                                 :ARG1 c15-5
                                 :manner (c15-3 / way
                                                :mod (c15-2 / both)))
                    :time (c15-7 / always))
       :snt2 (c15-4 / request-confirmation-91))

# ::snt awesome
# ::tokens ["awesome"]
# ::lemmas ["awesome"]
(c16-0 / awesome-02)

# ::snt If they want to live under Sharia, Why the Hell are they living in Europe? Move back to Pakistan.
# ::tokens ["If", "they", "want", "to", "live", "under", "Sharia", ",", "Why", "the", "Hell", "are", "they", "living", "in", "Europe", "?", "Move", "back", "to", "Pakistan", "."]
# ::lemmas ["if", "they", "want", "to", "live", "under", "Sharia", ",", "why", "the", "hell", "be", "they", "live", "in", "Europe", "?", "move", "back", "to", "Pakistan", "."]
(c17-4 / multi-sentence
       :snt1 (c17-11 / cause-01
                     :ARG0 (c17-16 / amr-unknown)
                     :ARG1 (c17-3 / live-01
                                  :ARG0 (c17-15 / they)
                                  :location (c17-10 / continent
                                                    :name (c17-7 / name
                                                                 :op1 "Europe"))
                                  :mod (c17-0 / hell
                                              :mode expressive))
                     :condition (c17-1 / want-01
                                       :ARG0 c17-15
                                       :ARG1 (c17-13 / live-01
                                                     :ARG0 c17-15
                                                     :manner (c17-2 / law
                                                                    :name (c17-8 / name
                                                                                 :op1 "Sharia")))))
       :snt2 (c17-9 / move-01
                    :ARG0 (c17-5 / you)
                    :ARG2 (c17-14 / country
                                  :name (c17-12 / name
                                                :op1 "Pakistan"))
                    :direction (c17-6 / back)
                    :mode imperative))

# ::snt PAST TIME.
# ::tokens ["PAST", "TIME", "."]
# ::lemmas ["past", "TIME", "."]
(c18-1 / pass-03
       :ARG0 (c18-0 / you)
       :ARG1 (c18-2 / time)
       :mode imperative)

# ::snt : Time for every Western Countries stand up &amp; say.....
# ::tokens [":", "Time", "for", "every", "Western", "Countries", "stand", "up", "&", "amp", ";", "say", "....."]
# ::lemmas [":", "time", "for", "every", "Western", "Countries", "stand", "up", "&", "amp", ";", "say", "....."]
(c19-5 / recommend-01
       :ARG1 (c19-8 / and
                    :op1 (c19-7 / stand-up-07
                                :ARG1 (c19-6 / country
                                             :mod (c19-1 / every)
                                             :location (c19-0 / world-region
                                                              :name (c19-4 / name
                                                                           :op1 "West"))))
                    :op2 (c19-3 / amp)
                    :ARG1-of (c19-2 / say-01)))
