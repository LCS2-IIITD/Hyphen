# ::snt Exactly. And was going to take his girl out tonight.
# ::tokens ["Exactly", ".", "And", "was", "going", "to", "take", "his", "girl", "out", "tonight", "."]
# ::lemmas ["exactly", ".", "and", "be", "go", "to", "take", "his", "girl", "out", "tonight", "."]
(c1-1 / multi-sentence
      :snt1 (c1-2 / exact)
      :snt2 (c1-8 / and
                  :op2 (c1-7 / take-out-11
                             :ARG0 (c1-0 / he)
                             :ARG1 (c1-5 / girl
                                         :poss c1-0)
                             :time (c1-4 / date-entity
                                         :dayperiod (c1-3 / night)
                                         :mod (c1-6 / today)))))

# ::snt Count on it. RT : they'll talk about how large and strong he was too. So scary and dangerous...
# ::tokens ["Count", "on", "it", ".", "RT", ":", "they", "'ll", "talk", "about", "how", "large", "and", "strong", "he", "was", "too", ".", "So", "scary", "and", "dangerous", "..."]
# ::lemmas ["count", "on", "it", ".", "RT", ":", "they", "'ll", "talk", "about", "how", "large", "and", "strong", "he", "be", "too", ".", "so", "scary", "and", "dangerous", "..."]
(c2-0 / multi-sentence
      :snt1 (c2-16 / count-03
                   :ARG0 (c2-14 / you)
                   :ARG1 (c2-12 / it)
                   :mode imperative)
      :snt2 (c2-3 / say-01
                  :ARG0 (c2-1 / publication
                              :name (c2-10 / name
                                           :op1 "RT"))
                  :ARG1 (c2-18 / talk-01
                               :ARG0 (c2-17 / they)
                               :ARG1 (c2-5 / and
                                           :op1 (c2-7 / large
                                                      :domain (c2-6 / he))
                                           :op2 (c2-9 / strong-02
                                                      :ARG1 c2-6)
                                           :degree (c2-15 / so))))
      :snt3 (c2-11 / and
                   :op1 (c2-8 / scary-03
                              :ARG0 (c2-4 / he))
                   :op2 (c2-2 / dangerous
                              :degree (c2-13 / so))))

# ::snt TRUTH!!!!!!!!!!!!!!!!!!
# ::tokens ["TRUTH", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"]
# ::lemmas ["TRUTH", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"]
(c3-0 / true-01)

# ::snt You know it's true. If it hasn't even been proven that he was shoplifting, they will look for a reason to make him a "bad kid."
# ::tokens ["You", "know", "it", "'s", "true", ".", "If", "it", "has", "n't", "even", "been", "proven", "that", "he", "was", "shoplifting", ",", "they", "will", "look", "for", "a", "reason", "to", "make", "him", "a", "\"", "bad", "kid", ".", "\""]
# ::lemmas ["you", "know", "it", "be", "true", ".", "if", "it", "have", "not", "even", "be", "prove", "that", "he", "be", "shoplift", ",", "they", "will", "look", "for", "a", "reason", "to", "make", "he", "a", "\"", "bad", "kid", ".", "\""]
(c4-3 / multi-sentence
      :snt1 (c4-8 / know-01
                  :ARG0 (c4-1 / you)
                  :ARG1 (c4-15 / true-01
                               :ARG1 (c4-7 / it)))
      :snt2 (c4-2 / look-01
                  :ARG0 (c4-13 / they)
                  :ARG1 (c4-10 / reason
                               :ARG0-of (c4-11 / cause-01
                                               :ARG1 (c4-9 / make-02
                                                           :ARG0 c4-13
                                                           :ARG1 (c4-5 / kid
                                                                       :ARG1-of (c4-4 / bad-07)
                                                                       :domain (c4-0 / he)))))
                  :condition (c4-12 / prove-01
                                    :ARG1 (c4-14 / shoplift-01
                                                 :ARG0 c4-0)
                                    :mod (c4-6 / even)
                                    :polarity -)))

# ::snt they'll talk about how large and strong he was too. So scary and dangerous...
# ::tokens ["they", "'ll", "talk", "about", "how", "large", "and", "strong", "he", "was", "too", ".", "So", "scary", "and", "dangerous", "..."]
# ::lemmas ["they", "'ll", "talk", "about", "how", "large", "and", "strong", "he", "be", "too", ".", "so", "scary", "and", "dangerous", "..."]
(c5-2 / multi-sentence
      :snt1 (c5-11 / talk-01
                   :ARG0 (c5-9 / they)
                   :ARG1 (c5-12 / and
                                :op1 (c5-1 / large
                                           :domain (c5-0 / he))
                                :op2 (c5-10 / strong-02
                                            :ARG1 c5-0)
                                :degree (c5-6 / so)))
      :snt2 (c5-8 / and
                  :op1 (c5-3 / scary-03
                             :ARG0 (c5-4 / he))
                  :op2 (c5-7 / endanger-01
                             :ARG0 c5-4)
                  :degree (c5-5 / so)))

# ::snt Yes. They will trash his entire life in an effort to justify his murder.
# ::tokens ["Yes", ".", "They", "will", "trash", "his", "entire", "life", "in", "an", "effort", "to", "justify", "his", "murder", "."]
# ::lemmas ["yes", ".", "they", "will", "trash", "his", "entire", "life", "in", "an", "effort", "to", "justify", "his", "murder", "."]
(c6-7 / trash-01
      :ARG0 (c6-6 / they)
      :ARG1 (c6-2 / life
                  :poss (c6-0 / he)
                  :mod (c6-5 / entire))
      :purpose (c6-4 / effort-01
                     :ARG0 c6-6
                     :ARG1 (c6-1 / justify-01
                                 :ARG0 c6-6
                                 :ARG1 (c6-3 / murder-01
                                             :ARG0 c6-0))))

# ::snt bad kid that was suppose to start college next week.
# ::tokens ["bad", "kid", "that", "was", "suppose", "to", "start", "college", "next", "week", "."]
# ::lemmas ["bad", "kid", "that", "be", "suppose", "to", "start", "college", "next", "week", "."]
(c7-6 / kid
      :ARG1-of (c7-1 / bad-07)
      :ARG1-of (c7-5 / suppose-02
                     :ARG2 (c7-2 / start-01
                                 :ARG0 c7-6
                                 :ARG1 (c7-4 / college)
                                 :time (c7-0 / week
                                             :mod (c7-3 / next)))))

# ::snt Not to mention they'll find a celeb pic to replace his pic w/..just to keep "their" narrative going
# ::tokens ["Not", "to", "mention", "they", "'ll", "find", "a", "celeb", "pic", "to", "replace", "his", "pic", "w/", "..", "just", "to", "keep", "\"", "their", "\"", "narrative", "going"]
# ::lemmas ["not", "to", "mention", "they", "'ll", "find", "a", "celeb", "pic", "to", "replace", "his", "pic", "w/", "..", "just", "to", "keep", "\"", "their", "\"", "narrative", "go"]
(c8-3 / mention-01
      :ARG1 (c8-2 / find-01
                  :ARG0 (c8-10 / they)
                  :ARG1 (c8-6 / pic
                              :mod (c8-8 / celebrity)
                              :ARG2-of (c8-7 / replace-01
                                             :ARG1 (c8-11 / pic
                                                          :poss (c8-0 / he))))
                  :purpose (c8-4 / keep-02
                                 :ARG0 c8-10
                                 :ARG1 (c8-9 / go-01
                                             :ARG1 (c8-5 / narrate-01
                                                         :ARG0 c8-10))
                                 :mod (c8-1 / just)))
      :polarity -)

# ::snt :Thank You!EACE
# ::tokens [":", "Thank", "You!EACE"]
# ::lemmas [":", "thank", "you!eace"]
(c9-1 / thank-01
      :ARG0 (c9-2 / i)
      :ARG1 (c9-0 / you)
      :mode expressive)

# ::snt I can't!!!
# ::tokens ["I", "ca", "n't", "!", "!", "!"]
# ::lemmas ["i", "can", "not", "!", "!", "!"]
(c10-0 / possible-01
       :ARG1 (c10-1 / event
                    :mod (c10-2 / i))
       :polarity -)

# ::snt Amen, sister. You know it's coming in ...2...1
# ::tokens ["Amen", ",", "sister", ".", "You", "know", "it", "'s", "coming", "in", "...", "2", "...", "1"]
# ::lemmas ["amen", ",", "sister", ".", "you", "know", "it", "be", "come", "in", "...", "2", "...", "1"]
(c11-2 / multi-sentence
       :snt1 (c11-8 / say-01
                    :ARG1 (c11-10 / amen)
                    :ARG2 (c11-6 / person
                                 :ARG0-of (c11-0 / have-rel-role-91
                                                 :ARG2 (c11-3 / sister))))
       :snt2 (c11-9 / know-01
                    :ARG0 (c11-1 / you)
                    :ARG1 (c11-7 / come-03
                                 :ARG1 (c11-5 / it)))
       :snt3 (c11-4 / and
                    :op1 2
                    :op2 1))

# ::snt Favorite this now: In the next week, we will hear about EVERY transgression has ever had since soiling his diapers.
# ::tokens ["Favorite", "this", "now", ":", "In", "the", "next", "week", ",", "we", "will", "hear", "about", "EVERY", "transgression", "has", "ever", "had", "since", "soiling", "his", "diapers", "."]
# ::lemmas ["favorite", "this", "now", ":", "in", "the", "next", "week", ",", "we", "will", "hear", "about", "every", "transgression", "have", "ever", "have", "since", "soil", "his", "diaper", "."]
(c12-2 / Favorite-01
       :ARG1 (c12-0 / hear-01
                    :ARG0 (c12-1 / we)
                    :ARG1 (c12-12 / transgress-01
                                  :mod (c12-4 / every)
                                  :ARG1-of (c12-13 / have-06
                                                   :ARG0 (c12-8 / he)
                                                   :time (c12-3 / ever)
                                                   :time (c12-11 / since
                                                                 :op1 (c12-5 / soil-01
                                                                             :ARG1 (c12-10 / diaper
                                                                                           :poss c12-8)))))
                    :time (c12-6 / week
                                 :mod (c12-7 / next)))
       :time (c12-9 / now))

# ::snt Dehumanization MT In the next week, we will hear about EVERY transgression ever had since soiling his diapers.
# ::tokens ["Dehumanization", "MT", "In", "the", "next", "week", ",", "we", "will", "hear", "about", "EVERY", "transgression", "ever", "had", "since", "soiling", "his", "diapers", "."]
# ::lemmas ["dehumanization", "MT", "in", "the", "next", "week", ",", "we", "will", "hear", "about", "every", "transgression", "ever", "have", "since", "soil", "his", "diaper", "."]
(c13-13 / and
        :op1 (c13-9 / dehumanize-01)
        :op2 (c13-0 / hear-01
                    :ARG0 (c13-1 / we)
                    :ARG1 (c13-12 / transgress-01
                                  :mod (c13-5 / every)
                                  :ARG1-of (c13-10 / transgress-01
                                                   :time (c13-4 / ever)
                                                   :time (c13-11 / since
                                                                 :op1 (c13-6 / soil-01
                                                                             :ARG1 (c13-2 / diaper
                                                                                          :poss (c13-3 / he))))))
                    :time (c13-7 / week
                                 :mod (c13-8 / next))))

# ::snt Yuup. They're going to soil his memory. Smh
# ::tokens ["Yuup", ".", "They", "'re", "going", "to", "soil", "his", "memory", ".", "Smh"]
# ::lemmas ["Yuup", ".", "they", "be", "go", "to", "soil", "his", "memory", ".", "smh"]
(c14-2 / multi-sentence
       :snt1 (c14-1 / yup)
       :snt2 (c14-5 / soil-01
                    :ARG0 (c14-6 / they)
                    :ARG1 (c14-4 / memory
                                 :poss (c14-0 / he)))
       :snt3 (c14-3 / smh
                    :mode expressive))

# ::snt and how those transgressions were reflective of his culture (read:blackness).
# ::tokens ["and", "how", "those", "transgressions", "were", "reflective", "of", "his", "culture", "(", "read", ":", "blackness", ")", "."]
# ::lemmas ["and", "how", "those", "transgression", "be", "reflective", "of", "his", "culture", "(", "read", ":", "blackness", ")", "."]
(c15-7 / and
       :op2 (c15-3 / reflect-01
                   :ARG1 (c15-6 / transgress-01
                                :mod (c15-5 / that))
                   :ARG2 (c15-4 / culture
                                :poss (c15-0 / he))
                   :ARG1-of (c15-1 / mean-01
                                   :ARG2 (c15-2 / black-05))))

# ::snt Confident the victim-shaming fact checker is already hard at work at SLPD.
# ::tokens ["Confident", "the", "victim", "-", "shaming", "fact", "checker", "is", "already", "hard", "at", "work", "at", "SLPD", "."]
# ::lemmas ["confident", "the", "victim", "-", "shame", "fact", "checker", "be", "already", "hard", "at", "work", "at", "SLPD", "."]
(c16-7 / confident-01
       :ARG2 (c16-0 / hard-02
                    :ARG1 (c16-1 / work-01
                                 :ARG0 (c16-5 / person
                                              :ARG0-of (c16-6 / check-01
                                                              :ARG1 (c16-2 / fact)
                                                              :ARG0-of (c16-9 / shame-01
                                                                              :ARG1 (c16-4 / victim))))
                                 :ARG2 (c16-8 / department
                                              :name (c16-3 / name
                                                           :op1 "SLPD")))
                    :time (c16-10 / already)))

# ::snt Look to seeing you at the
# ::tokens ["Look", "to", "seeing", "you", "at", "the"]
# ::lemmas ["look", "to", "see", "you", "at", "the"]
(c17-2 / look-04
       :ARG1 (c17-0 / see-01
                    :ARG1 (c17-1 / you)
                    :location (c17-3 / amr-unknown)))

# ::snt I shoplifted at . I got grounded and community service. I am just baffled as to how this will be justified.
# ::tokens ["I", "shoplifted", "at", ".", "I", "got", "grounded", "and", "community", "service", ".", "I", "am", "just", "baffled", "as", "to", "how", "this", "will", "be", "justified", "."]
# ::lemmas ["i", "shoplift", "at", ".", "i", "got", "ground", "and", "community", "service", ".", "i", "be", "just", "baffle", "as", "to", "how", "this", "will", "be", "justify", "."]
(c18-2 / multi-sentence
       :snt1 (c18-11 / shoplift-01
                     :ARG0 (c18-6 / i)
                     :ARG2 (c18-3 / university))
       :snt2 (c18-14 / and
                     :op1 (c18-8 / ground-01
                                 :ARG1 (c18-9 / i))
                     :op2 (c18-5 / serve-01
                                 :ARG0 c18-9
                                 :mod (c18-7 / community)))
       :snt3 (c18-4 / baffle-01
                    :ARG0 (c18-12 / thing
                                  :manner-of (c18-0 / justify-01
                                                    :ARG1 (c18-10 / this)))
                    :ARG1 (c18-1 / i)
                    :mod (c18-13 / just)))

# ::snt smh
# ::tokens ["smh"]
# ::lemmas ["smh"]
(c19-0 / smh
       :mode expressive)
