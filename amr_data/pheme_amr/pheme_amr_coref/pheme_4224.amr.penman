# ::snt Stuntman audition?
# ::tokens ["Stuntman", "audition", "?"]
# ::lemmas ["Stuntman", "audition", "?"]
(c1-3 / audition-01
      :polarity (c1-2 / amr-unknown)
      :ARG0 (c1-1 / person
                  :name (c1-0 / name
                              :op1 "Stuntman")))

# ::snt us
# ::tokens ["us"]
# ::lemmas ["we"]
(c2-1 / person
      :name (c2-0 / name
                  :op1 "us"))

# ::snt if first attempt didn't kill ya, then smoking sure will!
# ::tokens ["if", "first", "attempt", "did", "n't", "kill", "ya", ",", "then", "smoking", "sure", "will", "!"]
# ::lemmas ["if", "first", "attempt", "do", "not", "kill", "ya", ",", "then", "smoke", "sure", "will", "!"]
(c3-5 / kill-01
      :ARG0 (c3-4 / smoke-02)
      :ARG1 (c3-0 / you)
      :ARG1-of (c3-2 / sure-02)
      :condition (c3-3 / kill-01
                       :ARG0 (c3-6 / attempt-01
                                   :ord (c3-1 / ordinal-entity
                                              :value 1))
                       :ARG1 c3-0
                       :polarity -))

# ::snt Talk about lazy.....just cause the elevators out
# ::tokens ["Talk", "about", "lazy", ".....", "just", "cause", "the", "elevators", "out"]
# ::lemmas ["talk", "about", "lazy", ".....", "just", "cause", "the", "elevator", "out"]
(c4-6 / contrast-01
      :ARG1 (c4-7 / talk-01
                  :ARG0 (c4-1 / you)
                  :ARG1 (c4-2 / lazy)
                  :mode imperative)
      :ARG2 (c4-5 / cause-01
                  :ARG0 c4-1
                  :ARG1 (c4-3 / out-06
                              :ARG1 (c4-4 / elevator))
                  :mod (c4-0 / just)
                  :mode imperative))

# ::snt throw a guy floors off a building and he doesn't die pretty much means someone has problems. Would you let that go? Probably not
# ::tokens ["throw", "a", "guy", "floors", "off", "a", "building", "and", "he", "does", "n't", "die", "pretty", "much", "means", "someone", "has", "problems", ".", "Would", "you", "let", "that", "go", "?", "Probably", "not"]
# ::lemmas ["throw", "a", "guy", "floor", "off", "a", "building", "and", "he", "do", "not", "die", "pretty", "much", "mean", "someone", "have", "problem", ".", "would", "you", "let", "that", "go", "?", "probably", "not"]
(c5-3 / multi-sentence
      :snt1 (c5-17 / and
                   :op1 (c5-15 / throw-01
                               :ARG0 (c5-1 / you)
                               :ARG1 (c5-2 / floor)
                               :ARG2 (c5-5 / building)
                               :mode imperative)
                   :op2 (c5-8 / die-01
                              :ARG1 (c5-10 / guy)
                              :polarity -)
                   :ARG1-of (c5-7 / mean-01
                                  :ARG2 (c5-0 / have-03
                                              :ARG0 (c5-13 / someone)
                                              :ARG1 (c5-9 / problem))
                                  :degree (c5-16 / pretty-much)))
      :snt2 (c5-4 / let-01
                  :polarity (c5-6 / amr-unknown)
                  :ARG0 (c5-12 / you)
                  :ARG1 (c5-11 / go-01
                               :ARG1 (c5-14 / that))
                  :polarity c5-6))

# ::snt no fucks given,
# ::tokens ["no", "fucks", "given", ","]
# ::lemmas ["no", "fuck", "give", ","]
(c6-1 / give-01
      :ARG1 (c6-0 / fuck
                  :polarity -))

# ::snt was it Ricky from ??
# ::tokens ["was", "it", "Ricky", "from", "?", "?"]
# ::lemmas ["be", "it", "ricky", "from", "?", "?"]
(c7-1 / person
      :name (c7-0 / name
                  :op1 "Ricky")
      :source (c7-2 / amr-unknown))

# ::snt no big deal, bro.
# ::tokens ["no", "big", "deal", ",", "bro", "."]
# ::lemmas ["no", "big", "deal", ",", "bro", "."]
(c8-4 / say-01
      :ARG0 (c8-1 / i)
      :ARG1 (c8-2 / deal-03
                  :mod (c8-0 / big
                             :polarity -))
      :ARG2 (c8-3 / bro))

# ::snt foook
# ::tokens ["foook"]
# ::lemmas ["foook"]
(c9-1 / thing
      :name (c9-0 / name
                  :op1 "foook"))

# ::snt Also doesn't he know smoking kills? Time to stop that shit.
# ::tokens ["Also", "does", "n't", "he", "know", "smoking", "kills", "?", "Time", "to", "stop", "that", "shit", "."]
# ::lemmas ["also", "do", "not", "he", "know", "smoking", "kill", "?", "time", "to", "stop", "that", "shit", "."]
(c10-2 / multi-sentence
       :snt1 (c10-8 / know-01
                    :ARG0 (c10-0 / he)
                    :ARG1 (c10-3 / kill-01
                                 :ARG0 (c10-6 / smoke-02))
                    :mod (c10-9 / also)
                    :polarity -)
       :snt2 (c10-7 / time
                    :time-of (c10-4 / stop-01
                                    :ARG1 (c10-1 / shit
                                                 :mod (c10-5 / that)))))

# ::snt No fucks given
# ::tokens ["No", "fucks", "given"]
# ::lemmas ["no", "fuck", "give"]
(c11-1 / give-01
       :ARG1 (c11-0 / fuck
                    :polarity -))

# ::snt Smoking can kill you!!
# ::tokens ["Smoking", "can", "kill", "you", "!", "!"]
# ::lemmas ["smoking", "can", "kill", "you", "!", "!"]
(c12-2 / possible-01
       :ARG1 (c12-3 / kill-01
                    :ARG0 (c12-0 / smoke-02)
                    :ARG1 (c12-1 / you)))

# ::snt Hahaha!! Landing like damn boss!
# ::tokens ["Hahaha", "!", "!", "Landing", "like", "damn", "boss", "!"]
# ::lemmas ["Hahaha", "!", "!", "land", "like", "damn", "boss", "!"]
(c13-2 / multi-sentence
       :snt1 (c13-0 / haha
                    :mode expressive)
       :snt2 (c13-1 / land-01
                    :manner (c13-4 / resemble-01
                                   :ARG2 (c13-3 / boss
                                                :ARG1-of (c13-5 / damn-01)))))

# ::snt somebody apparently partied harder than you did
# ::tokens ["somebody", "apparently", "partied", "harder", "than", "you", "did"]
# ::lemmas ["somebody", "apparently", "partie", "hard", "than", "you", "do"]
(c14-3 / participate-01
       :ARG0 (c14-4 / somebody)
       :ARG1-of (c14-5 / appear-02)
       :ARG1-of (c14-0 / have-degree-91
                       :ARG2 (c14-7 / hard-02)
                       :ARG3 (c14-2 / more)
                       :ARG4 (c14-6 / participate-01
                                    :ARG0 (c14-1 / you))))

# ::snt nice friends merry Christmas down you go!
# ::tokens ["nice", "friends", "merry", "Christmas", "down", "you", "go", "!"]
# ::lemmas ["nice", "friend", "merry", "Christmas", "down", "you", "go", "!"]
(c15-9 / go-02
       :ARG0 (c15-7 / person
                    :ARG0-of (c15-0 / have-rel-role-91
                                    :ARG1 (c15-1 / you)
                                    :ARG2 (c15-2 / friend))
                    :ARG1-of (c15-5 / nice-01))
       :ARG1 (c15-4 / festival
                    :name (c15-6 / name
                                 :op1 "Christmas")
                    :mod (c15-3 / merry))
       :direction (c15-8 / down)
       :mode imperative)

# ::snt hard as fuck brah
# ::tokens ["hard", "as", "fuck", "brah"]
# ::lemmas ["hard", "as", "fuck", "brah"]
(c16-0 / say-01
       :ARG1 (c16-1 / hard-02
                    :degree (c16-2 / as-hell))
       :ARG2 (c16-3 / brah))

# ::snt atta boy
# ::tokens ["atta", "boy"]
# ::lemmas ["atta", "boy"]
(c17-1 / person
       :name (c17-0 / name
                    :op1 "atta"
                    :op2 "boy"))

# ::snt Let me know if he was smoking it the whole way down, then we have a story.
# ::tokens ["Let", "me", "know", "if", "he", "was", "smoking", "it", "the", "whole", "way", "down", ",", "then", "we", "have", "a", "story", "."]
# ::lemmas ["let", "i", "know", "if", "he", "be", "smoke", "it", "the", "whole", "way", "down", ",", "then", "we", "have", "a", "story", "."]
(c18-0 / have-03
       :ARG0 (c18-1 / we)
       :ARG1 (c18-10 / story)
       :condition (c18-3 / let-know-07
                         :ARG0 (c18-2 / you)
                         :ARG1 (c18-6 / i)
                         :ARG2 (c18-5 / smoke-02
                                      :ARG0 (c18-12 / he)
                                      :ARG1 (c18-9 / it)
                                      :duration (c18-7 / way
                                                       :mod (c18-4 / whole)
                                                       :direction (c18-8 / down)))
                         :mode imperative)
       :time (c18-11 / then))
