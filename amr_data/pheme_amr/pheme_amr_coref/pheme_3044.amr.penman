# ::snt Just praying for the people's safety in France!! world global news
# ::tokens ["Just", "praying", "for", "the", "people", "'s", "safety", "in", "France", "!", "!", "world", "global", "news"]
# ::lemmas ["just", "pray", "for", "the", "people", "'s", "safety", "in", "France", "!", "!", "world", "global", "news"]
(c1-2 / multi-sentence
      :snt1 (c1-6 / pray-01
                  :ARG0 (c1-3 / i)
                  :ARG1 (c1-9 / safe-01
                              :ARG1 (c1-10 / person)
                              :location (c1-7 / country
                                              :name (c1-4 / name
                                                          :op1 "France")))
                  :mod (c1-0 / just)
                  :mode expressive)
      :snt2 (c1-5 / news
                  :mod (c1-8 / globe)
                  :mod (c1-1 / world)))

# ::snt Vive Uderzo!
# ::tokens ["Vive", "Uderzo", "!"]
# ::lemmas ["Vive", "Uderzo", "!"]
(c2-1 / person
      :name (c2-0 / name
                  :op1 "Vive"
                  :op2 "Uderzo")
      :mode expressive)

# ::snt : y.o French cartoonist Uderzo, creator of Asterix, comes out of retirement for
# ::tokens [":", "y.o", "French", "cartoonist", "Uderzo", ",", "creator", "of", "Asterix", ",", "comes", "out", "of", "retirement", "for"]
# ::lemmas [":", "y.o", "French", "cartoonist", "Uderzo", ",", "creator", "of", "Asterix", ",", "come", "out", "of", "retirement", "for"]
(c3-4 / come-out-09
      :ARG0 (c3-2 / person
                  :name (c3-0 / name
                              :op1 "Uderzo")
                  :mod (c3-3 / cartoon)
                  :mod (c3-7 / country
                             :name (c3-1 / name
                                         :op1 "France"))
                  :ARG0-of (c3-9 / create-01
                                 :ARG1 (c3-8 / product
                                             :name (c3-5 / name
                                                         :op1 "Asterix"))))
      :ARG1 (c3-6 / retire-01
                  :ARG0 c3-2))

# ::snt Where is Gosciny?
# ::tokens ["Where", "is", "Gosciny", "?"]
# ::lemmas ["where", "be", "gosciny", "?"]
(c4-1 / person
      :name (c4-0 / name
                  :op1 "Gosciny")
      :location (c4-2 / amr-unknown))

# ::snt : y.o French cartoonist Uderzo comes out of retirement for (H/T )
# ::tokens [":", "y.o", "French", "cartoonist", "Uderzo", "comes", "out", "of", "retirement", "for", "(", "H", "/", "T", ")"]
# ::lemmas [":", "y.o", "French", "cartoonist", "Uderzo", "come", "out", "of", "retirement", "for", "(", "H", "/", "T", ")"]
(c5-4 / come-out-09
      :ARG0 (c5-3 / cartoonist
                  :name (c5-0 / name
                              :op1 "Uderzo")
                  :mod (c5-7 / country
                             :name (c5-1 / name
                                         :op1 "France")))
      :ARG1 (c5-5 / retire-01
                  :ARG0 c5-3)
      :ARG1-of (c5-8 / cause-01
                     :ARG0 (c5-2 / publication
                                 :name (c5-6 / name
                                             :op1 "H/T"))))

# ::snt :Brilliant!
# ::tokens [":", "Brilliant", "!"]
# ::lemmas [":", "brilliant", "!"]
(c6-0 / brilliant-01)

# ::snt That Asterix!
# ::tokens ["That", "Asterix", "!"]
# ::lemmas ["that", "Asterix", "!"]
(c7-0 / say-01
      :ARG1 (c7-2 / that)
      :ARG2 (c7-1 / person
                  :name (c7-3 / name
                              :op1 "Asterix")))

# ::snt NOW WE ARE TALKING!
# ::tokens ["NOW", "WE", "ARE", "TALKING", "!"]
# ::lemmas ["now", "we", "be", "talk", "!"]
(c8-2 / talk-01
      :ARG0 (c8-1 / we)
      :time (c8-0 / now)
      :mode expressive)

# ::snt dead AFAIK.
# ::tokens ["dead", "AFAIK", "."]
# ::lemmas ["dead", "AFAIK", "."]
(c9-1 / person
      :name (c9-0 / name
                  :op1 "AFAIK")
      :ARG1-of (c9-2 / die-01))

# ::snt Asterix r0x
# ::tokens ["Asterix", "r0x"]
# ::lemmas ["asterix", "r0x"]
(c10-1 / person
       :name (c10-0 / name
                    :op1 "Asterix"
                    :op2 "r0x"))

# ::snt I don't see mohammed. Therefore he isn't Charlie.
# ::tokens ["I", "do", "n't", "see", "mohammed", ".", "Therefore", "he", "is", "n't", "Charlie", "."]
# ::lemmas ["i", "do", "not", "see", "mohammed", ".", "therefore", "he", "be", "not", "Charlie", "."]
(c12-1 / multi-sentence
       :snt1 (c12-7 / see-01
                    :ARG0 (c12-2 / i)
                    :ARG1 (c12-5 / person
                                 :name (c12-3 / name
                                              :op1 "Mohammed"))
                    :polarity -)
       :snt2 (c12-6 / cause-01
                    :ARG1 c12-5
                    :name (c12-4 / name
                                 :op1 "Charlie")
                    :domain (c12-0 / he)
                    :polarity -))

# ::snt : Cartoonist Uderzo, , creator of Asterix, comes out of retirement to say I'm Charlie too
# ::tokens [":", "Cartoonist", "Uderzo", ",", ",", "creator", "of", "Asterix", ",", "comes", "out", "of", "retirement", "to", "say", "I", "'m", "Charlie", "too"]
# ::lemmas [":", "Cartoonist", "Uderzo", ",", ",", "creator", "of", "Asterix", ",", "come", "out", "of", "retirement", "to", "say", "i", "be", "Charlie", "too"]
(c13-6 / come-out-09
       :ARG0 (c13-4 / person
                    :name (c13-2 / name
                                 :op1 "Uderzo")
                    :ARG0-of (c13-5 / create-01
                                    :ARG1 (c13-11 / product
                                                  :name (c13-3 / name
                                                               :op1 "Asterix"))))
       :ARG1 (c13-7 / retire-01
                    :ARG0 c13-4)
       :purpose (c13-9 / say-01
                       :ARG0 c13-4
                       :ARG1 (c13-0 / person
                                    :name (c13-8 / name
                                                 :op1 "Charlie")
                                    :domain (c13-1 / i)
                                    :mod (c13-10 / too))))

# ::snt I'm not sure who that character is, but he's like a Roman/Greek version of Yosemite Sam.
# ::tokens ["I", "'m", "not", "sure", "who", "that", "character", "is", ",", "but", "he", "'s", "like", "a", "Roman", "/", "Greek", "version", "of", "Yosemite", "Sam", "."]
# ::lemmas ["i", "be", "not", "sure", "who", "that", "character", "be", ",", "but", "he", "be", "like", "a", "Roman", "/", "greek", "version", "of", "Yosemite", "Sam", "."]
(c14-6 / contrast-01
       :ARG1 (c14-10 / sure-02
                     :ARG0 (c14-1 / i)
                     :ARG1 (c14-5 / character
                                  :mod (c14-12 / that))
                     :polarity -)
       :ARG2 (c14-7 / resemble-01
                    :ARG1 c14-5
                    :ARG2 (c14-3 / version
                                 :mod (c14-0 / slash
                                             :op1 (c14-9 / country
                                                         :name (c14-2 / name
                                                                      :op1 "Romania"))
                                             :op2 (c14-13 / country
                                                          :name (c14-4 / name
                                                                       :op1 "Greece")))
                                 :mod (c14-8 / park
                                             :name (c14-11 / name
                                                           :op1 "Yosemite"
                                                           :op2 "Sam")))))

# ::snt bless him! All decent hearts are with Free France now! Vive liberte!
# ::tokens ["bless", "him", "!", "All", "decent", "hearts", "are", "with", "Free", "France", "now", "!", "Vive", "liberte", "!"]
# ::lemmas ["bless", "he", "!", "all", "decent", "heart", "be", "with", "Free", "France", "now", "!", "Vive", "liberte", "!"]
(c15-2 / multi-sentence
       :snt1 (c15-4 / bless-01
                    :ARG1 (c15-0 / he))
       :snt2 (c15-9 / be-with-10
                    :ARG0 (c15-13 / heart
                                  :mod (c15-8 / decent)
                                  :mod (c15-12 / all))
                    :ARG1 (c15-10 / country
                                  :name (c15-5 / name
                                               :op1 "France")
                                  :ARG1-of (c15-1 / free-04))
                    :time (c15-6 / now))
       :snt3 (c15-7 / vive-01
                    :ARG1 (c15-11 / person
                                  :ARG1-of (c15-3 / liberal-02))
                    :mode expressive))

# ::snt Loved these books so much when I was a child. Vive France.
# ::tokens ["Loved", "these", "books", "so", "much", "when", "I", "was", "a", "child", ".", "Vive", "France", "."]
# ::lemmas ["love", "these", "book", "so", "much", "when", "i", "be", "a", "child", ".", "Vive", "France", "."]
(c16-3 / multi-sentence
       :snt1 (c16-2 / love-01
                    :ARG0 (c16-5 / i)
                    :ARG1 (c16-4 / book
                                 :mod (c16-10 / this))
                    :time (c16-8 / child
                                 :domain c16-5)
                    :ARG1-of (c16-0 / have-quant-91
                                    :ARG2 (c16-7 / much)
                                    :ARG3 (c16-9 / so)))
       :snt2 (c16-1 / work-of-art
                    :name (c16-6 / name
                                 :op1 "Vive"
                                 :op2 "France")))

# ::snt so the reaction should be both Gaulist and violent?
# ::tokens ["so", "the", "reaction", "should", "be", "both", "Gaulist", "and", "violent", "?"]
# ::lemmas ["so", "the", "reaction", "should", "be", "both", "Gaulist", "and", "violent", "?"]
(c17-3 / infer-01
       :ARG1 (c17-8 / recommend-01
                    :ARG1 (c17-4 / react-01
                                 :ARG2 (c17-10 / and
                                               :op1 (c17-7 / person
                                                           :mod (c17-9 / political-party
                                                                       :name (c17-5 / name
                                                                                    :op1 "G Gaulism")))
                                               :op2 (c17-0 / person
                                                           :mod (c17-6 / violent))
                                               :mod (c17-1 / both)))
                    :polarity (c17-2 / amr-unknown)))

# ::snt les babouches, c'est pour signifier que c'est un arabe ?
# ::tokens ["les", "babouches", ",", "c'est", "pour", "signifier", "que", "c'est", "un", "arabe", "?"]
# ::lemmas ["les", "babouche", ",", "c'est", "pour", "signifi", "que", "c'est", "un", "arabe", "?"]
(c18-9 / ask-01
       :ARG0 (c18-3 / i)
       :ARG1 (c18-5 / pour-02
                    :ARG1 (c18-8 / person
                                 :ARG0-of (c18-7 / sign-01
                                                 :ARG1 (c18-2 / amr-unknown)
                                                 :ARG0-of (c18-6 / cause-01
                                                                 :ARG1 (c18-0 / have-mod-91
                                                                              :ARG1 c18-8
                                                                              :ARG2 (c18-4 / arabe)
                                                                              :polarity -))))
                    :ARG3 (c18-1 / babouch)
                    :polarity c18-2)
       :ARG2 c18-1)

# ::snt it's ok. Astrix and Obelix live in all our childhoods.
# ::tokens ["it", "'s", "ok", ".", "Astrix", "and", "Obelix", "live", "in", "all", "our", "childhoods", "."]
# ::lemmas ["it", "be", "ok", ".", "Astrix", "and", "Obelix", "live", "in", "all", "our", "childhood", "."]
(c19-2 / multi-sentence
       :snt1 (c19-3 / okay-04
                    :ARG1 (c19-5 / it))
       :snt2 (c19-1 / live-01
                    :ARG0 (c19-11 / and
                                  :op1 (c19-8 / person
                                              :name (c19-6 / name
                                                           :op1 "Astrix"))
                                  :op2 (c19-10 / person
                                               :name (c19-7 / name
                                                            :op1 "Obelix")))
                    :time (c19-9 / childhood
                                 :mod (c19-4 / all)
                                 :poss (c19-0 / we))))
