# ::snt that's not religion
# ::tokens ["that", "'s", "not", "religion"]
# ::lemmas ["that", "be", "not", "religion"]
(c1-0 / religion
      :domain (c1-1 / that)
      :polarity -)

# ::snt Merci.
# ::tokens ["Merci", "."]
# ::lemmas ["merci", "."]
(c2-1 / person
      :name (c2-0 / name
                  :op1 "Merci")
      :mode expressive)

# ::snt Mais que devient la libert d'expression ? a me rvulse.
# ::tokens ["Mais", "que", "devient", "la", "libert", "d'expression", "?", "a", "me", "rvulse", "."]
# ::lemmas ["Mais", "que", "devient", "la", "libert", "d'expression", "?", "a", "me", "rvulse", "."]
(c3-3 / request-confirmation-91
      :ARG1 (c3-2 / devient
                  :mod (c3-0 / la)
                  :mod (c3-1 / express-01)
                  :domain (c3-4 / amr-unintelligible
                                :value "rvulse")))

# ::snt les ignorants et les monstres n'ont pas de religion...
# ::tokens ["les", "ignorants", "et", "les", "monstres", "n'ont", "pas", "de", "religion", "..."]
# ::lemmas ["les", "ignorant", "et", "les", "monstre", "n'ont", "pas", "de", "religion", "..."]
(c4-3 / n'polarity
      :ARG1 (c4-1 / et-cetera
                  :op1 (c4-4 / person
                             :ARG0-of (c4-2 / ignor-01))
                  :op2 (c4-0 / monstre))
      :ARG2 (c4-5 / religion))

# ::snt i'm just devastated ans still cannot believe it
# ::tokens ["i", "'m", "just", "devastated", "ans", "still", "can", "not", "believe", "it"]
# ::lemmas ["i", "be", "just", "devastate", "an", "still", "can", "not", "believe", "it"]
(c5-6 / and
      :op1 (c5-4 / devastate-01
                 :ARG1 (c5-2 / i)
                 :mod (c5-0 / just))
      :op2 (c5-3 / possible-01
                 :ARG1 (c5-1 / believe-01
                             :ARG0 c5-2
                             :ARG1 c5-4)
                 :mod (c5-5 / still)
                 :polarity -))

# ::snt just heard about this. The world needs to stop fighting each other.
# ::tokens ["just", "heard", "about", "this", ".", "The", "world", "needs", "to", "stop", "fighting", "each", "other", "."]
# ::lemmas ["just", "hear", "about", "this", ".", "the", "world", "need", "to", "stop", "fight", "each", "other", "."]
(c6-4 / multi-sentence
      :snt1 (c6-0 / hear-01
                  :ARG1 (c6-7 / this)
                  :time (c6-1 / just))
      :snt2 (c6-5 / need-01
                  :ARG0 (c6-2 / world)
                  :ARG1 (c6-6 / stop-01
                              :ARG0 c6-2
                              :ARG1 (c6-3 / fight-01
                                          :ARG0 c6-2
                                          :ARG1 c6-2))))

# ::snt i just heard the news in Australia. So sad. Scary what this world is coming to...
# ::tokens ["i", "just", "heard", "the", "news", "in", "Australia", ".", "So", "sad", ".", "Scary", "what", "this", "world", "is", "coming", "to", "..."]
# ::lemmas ["i", "just", "hear", "the", "news", "in", "Australia", ".", "so", "sad", ".", "scary", "what", "this", "world", "be", "come", "to", "..."]
(c7-4 / multi-sentence
      :snt1 (c7-0 / hear-01
                  :ARG0 (c7-6 / i)
                  :ARG1 (c7-7 / news)
                  :location (c7-10 / country
                                   :name (c7-8 / name
                                               :op1 "Australia"))
                  :time (c7-1 / just))
      :snt2 (c7-11 / sad-02
                   :degree (c7-5 / so))
      :snt3 (c7-3 / scary-03
                  :ARG1 (c7-2 / world
                              :mod (c7-12 / this)
                              :ARG1-of (c7-9 / come-04))))

# ::snt I want to say thank you for all simple plan has done for me
# ::tokens ["I", "want", "to", "say", "thank", "you", "for", "all", "simple", "plan", "has", "done", "for", "me"]
# ::lemmas ["i", "want", "to", "say", "thank", "you", "for", "all", "simple", "plan", "have", "do", "for", "i"]
(c8-0 / want-01
      :ARG0 (c8-3 / i)
      :ARG1 (c8-6 / say-01
                  :ARG0 c8-3
                  :ARG1 (c8-7 / thank-01
                              :ARG0 c8-3
                              :ARG1 (c8-1 / you)
                              :ARG2 (c8-5 / do-02
                                          :ARG0 (c8-4 / plan
                                                      :ARG1-of (c8-2 / simple-02)
                                                      :mod (c8-8 / all))
                                          :ARG2 c8-3))))

# ::snt hi, I dreamed of you tonight. i love you, so much... come to Brazil! Brazil misses you
# ::tokens ["hi", ",", "I", "dreamed", "of", "you", "tonight", ".", "i", "love", "you", ",", "so", "much", "...", "come", "to", "Brazil", "!", "Brazil", "misses", "you"]
# ::lemmas ["hi", ",", "i", "dream", "of", "you", "tonight", ".", "i", "love", "you", ",", "so", "much", "...", "come", "to", "Brazil", "!", "Brazil", "miss", "you"]
(c9-1 / multi-sentence
      :snt1 (c9-6 / and
                  :op1 (c9-7 / hi)
                  :op2 (c9-3 / dream-01
                             :ARG0 (c9-12 / i)
                             :ARG1 (c9-14 / you)
                             :time (c9-0 / date-entity
                                         :dayperiod (c9-10 / night)
                                         :mod (c9-18 / today))))
      :snt2 (c9-8 / love-01
                  :ARG0 (c9-13 / i)
                  :ARG1 (c9-17 / you)
                  :degree (c9-11 / much
                                 :degree (c9-5 / so)))
      :snt3 (c9-16 / come-01
                   :ARG1 (c9-2 / you)
                   :ARG4 (c9-4 / country
                               :name (c9-15 / name
                                            :op1 "Brazil"))
                   :mode imperative)
      :snt4 (c9-9 / miss-01
                  :ARG0 c9-4
                  :ARG1 c9-2))

# ::snt palhaada ne jeff
# ::tokens ["palhaada", "ne", "jeff"]
# ::lemmas ["palhaada", "ne", "jeff"]
(c10-2 / person
       :name (c10-0 / name
                    :op1 "Palhaada")
       :mod (c10-1 / jeff))

# ::snt hello Jeff
# ::tokens ["hello", "Jeff"]
# ::lemmas ["hello", "Jeff"]
(c11-0 / say-01
       :ARG1 (c11-1 / hello)
       :ARG2 (c11-2 / person
                    :name (c11-3 / name
                                 :op1 "Jeff")))

# ::snt we have to be careful in Paris today..
# ::tokens ["we", "have", "to", "be", "careful", "in", "Paris", "today", ".."]
# ::lemmas ["we", "have", "to", "be", "careful", "in", "Paris", "today", ".."]
(c12-1 / obligate-01
       :ARG1 (c12-0 / we)
       :ARG2 (c12-4 / care-04
                    :ARG0 c12-0
                    :location (c12-3 / city
                                     :name (c12-2 / name
                                                  :op1 "Paris"))
                    :time (c12-5 / today)))

# ::snt Je suis triste
# ::tokens ["Je", "suis", "triste"]
# ::lemmas ["Je", "suis", "triste"]
(c13-0 / Je)

# ::snt merci jeff pour tes mots. La france est en deuil en ce moment et choque
# ::tokens ["merci", "jeff", "pour", "tes", "mots", ".", "La", "france", "est", "en", "deuil", "en", "ce", "moment", "et", "choque"]
# ::lemmas ["merci", "jeff", "pour", "te", "mot", ".", "La", "france", "est", "en", "deuil", "en", "ce", "moment", "et", "choque"]
(c14-1 / multi-sentence
       :snt1 (c14-5 / pour-03
                    :ARG1 (c14-10 / person
                                  :name (c14-3 / name
                                               :op1 "merci"
                                               :op2 " jeff"))
                    :ARG2 (c14-6 / mots))
       :snt2 (c14-2 / est-01
                    :ARG1 (c14-7 / country
                                 :name (c14-4 / name
                                              :op1 "France"))
                    :ARG2 (c14-8 / deuil-01
                                 :ARG1 c14-7)
                    :location (c14-11 / and
                                      :op1 (c14-0 / moment)
                                      :op2 (c14-9 / choque))))

# ::snt Merci pour tes mots Jeff. Ca fait peur de savoir que des malades se baladent dans Paris quand tu as de la famille l-bas.
# ::tokens ["Merci", "pour", "tes", "mots", "Jeff", ".", "Ca", "fait", "peur", "de", "savoir", "que", "des", "malades", "se", "baladent", "dans", "Paris", "quand", "tu", "as", "de", "la", "famille", "l", "-", "bas", "."]
# ::lemmas ["merci", "pour", "te", "mot", "Jeff", ".", "can", "fait", "peur", "de", "savoir", "que", "des", "malade", "se", "baladent", "dan", "Paris", "quand", "tu", "as", "de", "la", "famille", "l", "-", "bas", "."]
(c15-0 / multi-sentence
       :snt1 (c15-2 / pour-02
                    :ARG1 (c15-5 / person
                                 :name (c15-16 / name
                                               :op1 "Merci"))
                    :ARG2 (c15-9 / person
                                 :name (c15-21 / name
                                               :op1 "Jeff")))
       :snt2 (c15-7 / have-concession-91
                    :ARG1 (c15-18 / possible-01
                                  :ARG1 c15-2
                                  :ARG1 (c15-12 / person
                                                :ARG0-of (c15-4 / savoir-01))
                                  :ARG2 (c15-10 / baladent
                                                :domain (c15-3 / des
                                                               :op1 (c15-17 / malades))
                                                :location (c15-22 / city
                                                                  :name (c15-1 / name
                                                                               :op1 "Paris")))))
       :ARG2 (c15-6 / and
                    :op1 (c15-13 / et-cetera
                                 :op1 (c15-11 / et-cetera)
                                 :op2 (c15-20 / et-cetera
                                              :op1 (c15-14 / et-cetera)
                                              :op2 (c15-15 / et-cetera
                                                           :op1 (c15-8 / famille
                                                                       :poss (c15-19 / amr-unknown)))))))

# ::snt Yeah, its so horrible.. No words for this
# ::tokens ["Yeah", ",", "its", "so", "horrible", "..", "No", "words", "for", "this"]
# ::lemmas ["yeah", ",", "its", "so", "horrible", "..", "no", "word", "for", "this"]
(c16-3 / multi-sentence
       :snt1 (c16-0 / horrible
                    :domain (c16-4 / it)
                    :degree (c16-5 / so)
                    :mod (c16-1 / yeah))
       :snt2 (c16-2 / word-01
                    :ARG1 (c16-6 / this)
                    :polarity -))

# ::snt C'est absolument horrible. Pense aux familles de ces pauvres innocents.. Comment on peut abattre des innocents de sang froid?
# ::tokens ["C'est", "absolument", "horrible", ".", "Pense", "aux", "familles", "de", "ces", "pauvres", "innocents", "..", "Comment", "on", "peut", "abattre", "des", "innocents", "de", "sang", "froid", "?"]
# ::lemmas ["c'est", "absolument", "horrible", ".", "Pense", "aux", "famille", "de", "ce", "pauvre", "innocent", "..", "comment", "on", "peut", "abattre", "des", "innocent", "de", "sing", "froid", "?"]
(c17-1 / multi-sentence
       :snt1 (c17-6 / absurd
                    :domain (c17-19 / this)
                    :ARG2-of (c17-7 / have-degree-91
                                    :ARG1 c17-19
                                    :ARG3 (c17-12 / most)))
       :snt2 (c17-18 / contrast-01
                     :ARG1 (c17-2 / pense-01
                                  :ARG2 (c17-8 / familles
                                               :mod (c17-5 / person
                                                           :ARG1-of (c17-15 / innocent-01))))
                     :ARG2 (c17-9 / person
                                  :ARG1-of (c17-16 / innocent-01)
                                  :mod (c17-13 / pauvres)))
       :snt3 (c17-3 / comment-01
                    :ARG3 (c17-10 / person
                                  :ARG1-of (c17-0 / innocent-01)
                                  :mod (c17-4 / peut
                                              :mod (c17-14 / abattre-de
                                                           :ARG1-of (c17-17 / innocent-01))))
                    :polarity (c17-11 / amr-unknown)))

# ::snt this is so sad )
# ::tokens ["this", "is", "so", "sad", ")"]
# ::lemmas ["this", "be", "so", "sad", ")"]
(c18-0 / sad-02
       :ARG0 (c18-2 / this)
       :degree (c18-1 / so))

# ::snt :En tant que franaise (et fan de ) merci beaucoup Jeff de parler de cet vnement horrible !
# ::tokens [":", "En", "tant", "que", "franaise", "(", "et", "fan", "de", ")", "merci", "beaucoup", "Jeff", "de", "parler", "de", "cet", "vnement", "horrible", "!"]
# ::lemmas [":", "en", "tant", "que", "franaise", "(", "et", "fan", "de", ")", "merci", "beaucoup", "Jeff", "de", "parler", "de", "cet", "vnement", "horrible", "!"]
(c19-2 / multi-sentence
       :snt1 (c19-4 / et-cetera
                    :mod (c19-3 / en-cetera)
                    :mode expressive)
       :snt2 (c19-7 / merci-01
                    :ARG1 (c19-6 / person
                                 :name (c19-5 / name
                                              :op1 "Jeff"
                                              :op2 "de"
                                              :op3 "Parler")
                                 :mod (c19-0 / horrible))
                    :mod (c19-1 / et-cetera)
                    :mode expressive))
