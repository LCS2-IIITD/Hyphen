# ::snt Yes!! RT : Hostage-taker in supermarket siege killed, reports say.
# ::tokens ["Yes", "!", "!", "RT", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas ["yes", "!", "!", "RT", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c1-3 / multi-sentence
      :snt1 (c1-1 / yes
                  :mode expressive)
      :snt2 (c1-8 / say-01
                  :ARG0 (c1-6 / report-01)
                  :ARG1 (c1-9 / kill-01
                              :ARG1 (c1-5 / person
                                          :ARG0-of (c1-7 / manage-01
                                                         :ARG1 (c1-0 / hostage))
                                          :time (c1-4 / siege-01
                                                      :ARG1 (c1-2 / supermarket))))))

# ::snt I thought there was two hostage takers?
# ::tokens ["I", "thought", "there", "was", "two", "hostage", "takers", "?"]
# ::lemmas ["i", "think", "there", "be", "two", "hostage", "taker", "?"]
(c2-4 / think-01
      :polarity (c2-5 / amr-unknown)
      :ARG0 (c2-1 / i)
      :ARG1 (c2-2 / person
                  :ARG0-of (c2-3 / take-01
                                 :ARG1 (c2-0 / hostage))
                  :quant 2))

# ::snt good work
# ::tokens ["good", "work"]
# ::lemmas ["good", "work"]
(c4-0 / work-01
      :ARG1-of (c4-1 / good-02))

# ::snt yeah it's terrible. Sounds like hostages died in the supermarket.
# ::tokens ["yeah", "it", "'s", "terrible", ".", "Sounds", "like", "hostages", "died", "in", "the", "supermarket", "."]
# ::lemmas ["yeah", "it", "be", "terrible", ".", "sound", "like", "hostage", "die", "in", "the", "supermarket", "."]
(c5-1 / multi-sentence
      :snt1 (c5-6 / terrible-01
                  :ARG1 (c5-3 / it))
      :snt2 (c5-5 / sound-01
                  :ARG1 (c5-4 / die-01
                              :ARG1 (c5-0 / hostage)
                              :location (c5-2 / supermarket))))

# ::snt hope he died in agony ....
# ::tokens ["hope", "he", "died", "in", "agony", "...."]
# ::lemmas ["hope", "he", "die", "in", "agony", "...."]
(c6-0 / hope-01
      :ARG1 (c6-2 / die-01
                  :ARG1 (c6-3 / he)
                  :manner (c6-1 / agonize-01
                                :ARG1 c6-3)))

# ::snt looks like civilians in the latest photo
# ::tokens ["looks", "like", "civilians", "in", "the", "latest", "photo"]
# ::lemmas ["look", "like", "civilian", "in", "the", "late", "photo"]
(c7-1 / look-02
      :ARG1 (c7-2 / civilian)
      :location (c7-0 / photo
                      :mod (c7-3 / last)))

# ::snt Wake up world to who terrorists are : Hostage-taker in supermarket siege killed,
# ::tokens ["Wake", "up", "world", "to", "who", "terrorists", "are", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ","]
# ::lemmas ["wake", "up", "world", "to", "who", "terrorist", "be", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ","]
(c8-1 / wake-up-02
      :ARG0 (c8-2 / you)
      :ARG1 (c8-4 / world)
      :ARG2 (c8-10 / terrorist
                   :domain c8-2)
      :ARG1-of (c8-7 / cause-01
                     :ARG0 (c8-5 / kill-01
                                 :ARG1 (c8-6 / person
                                             :ARG0-of (c8-8 / take-01
                                                            :ARG1 (c8-0 / hostage))
                                             :time (c8-9 / siege-01
                                                         :ARG1 (c8-3 / supermarket)))))
      :mode imperative)

# ::snt - ": Hostage-taker in supermarket siege killed, reports say.
# ::tokens ["-", "\"", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas ["-", "\"", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c9-6 / say-01
      :ARG0 (c9-5 / report-01)
      :ARG1 (c9-7 / kill-01
                  :ARG1 (c9-4 / person
                              :ARG0-of (c9-2 / manage-01
                                             :ARG1 (c9-0 / hostage))
                              :time (c9-3 / siege-01
                                          :ARG1 (c9-1 / supermarket)))))

# ::snt : Hostage-taker in supermarket siege killed, reports say.
# ::tokens [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c11-5 / say-01
       :ARG0 (c11-4 / report-01)
       :ARG1 (c11-7 / kill-01
                    :ARG1 (c11-3 / person
                                 :ARG0-of (c11-6 / take-01
                                                 :ARG1 (c11-0 / hostage)
                                                 :time (c11-2 / siege-01
                                                              :ARG1 (c11-1 / supermarket))))))

# ::snt What about his girlfriend wanted by police ?
# ::tokens ["What", "about", "his", "girlfriend", "wanted", "by", "police", "?"]
# ::lemmas ["what", "about", "his", "girlfriend", "want", "by", "police", "?"]
(c12-4 / amr-unknown
       :topic (c12-2 / person
                     :ARG0-of (c12-0 / have-rel-role-91
                                     :ARG1 (c12-6 / he)
                                     :ARG2 (c12-3 / girlfriend))
                     :ARG1-of (c12-1 / want-01
                                     :ARG0 (c12-5 / police))))

# ::snt : Hostage-taker in supermarket siege killed, reports say.
# ::tokens [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c13-5 / say-01
       :ARG0 (c13-4 / report-01)
       :ARG1 (c13-7 / kill-01
                    :ARG1 (c13-3 / person
                                 :ARG0-of (c13-6 / take-01
                                                 :ARG1 (c13-0 / hostage)
                                                 :time (c13-2 / siege-01
                                                              :ARG1 (c13-1 / supermarket))))))

# ::snt : Hostage-taker in supermarket siege killed, reports say.
# ::tokens [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c15-5 / say-01
       :ARG0 (c15-4 / report-01)
       :ARG1 (c15-7 / kill-01
                    :ARG1 (c15-3 / person
                                 :ARG0-of (c15-6 / take-01
                                                 :ARG1 (c15-0 / hostage)
                                                 :time (c15-2 / siege-01
                                                              :ARG1 (c15-1 / supermarket))))))

# ::snt fucking hell, that's awful
# ::tokens ["fucking", "hell", ",", "that", "'s", "awful"]
# ::lemmas ["fucking", "hell", ",", "that", "be", "awful"]
(c16-3 / awful
       :domain (c16-2 / that)
       :mod (c16-0 / hell
                   :mod (c16-1 / fucking
                               :mode expressive)))

# ::snt Good
# ::tokens ["Good"]
# ::lemmas ["good"]
(c17-0 / good-02)

# ::snt cheers, mental just mental
# ::tokens ["cheers", ",", "mental", "just", "mental"]
# ::lemmas ["cheer", ",", "mental", "just", "mental"]
(c18-4 / and
       :op1 (c18-3 / cheers)
       :op2 (c18-1 / mental
                   :mod (c18-0 / just)
                   :domain (c18-2 / mental)))

# ::snt All in the name of religion again. So fucking pointless.
# ::tokens ["All", "in", "the", "name", "of", "religion", "again", ".", "So", "fucking", "pointless", "."]
# ::lemmas ["all", "in", "the", "name", "of", "religion", "again", ".", "so", "fucking", "pointless", "."]
(c20-1 / multi-sentence
       :snt1 (c20-7 / all
                    :prep-in (c20-3 / name
                                    :poss (c20-5 / religion))
                    :mod (c20-2 / again))
       :snt2 (c20-4 / point-03
                    :degree (c20-6 / so)
                    :mod (c20-0 / fucking)
                    :polarity -))
