# ::snt very cool
# ::tokens ["very", "cool"]
# ::lemmas ["very", "cool"]
(c1-1 / cool-04
      :degree (c1-0 / very))

# ::snt it's my Birthday ohhhh I would love to see my all time fav please get me in!
# ::tokens ["it", "'s", "my", "Birthday", "ohhhh", "I", "would", "love", "to", "see", "my", "all", "time", "fav", "please", "get", "me", "in", "!"]
# ::lemmas ["it", "be", "my", "Birthday", "ohhhh", "i", "would", "love", "to", "see", "you", "all", "time", "fav", "please", "get", "i", "in", "!"]
(c2-2 / multi-sentence
      :snt1 (c2-5 / birthday
                  :poss (c2-6 / i)
                  :domain (c2-8 / it))
      :snt2 (c2-1 / love-02
                  :ARG0 (c2-3 / i)
                  :ARG1 (c2-10 / see-01
                               :ARG0 c2-3
                               :ARG1 (c2-7 / person
                                           :ARG0-of (c2-4 / favor-01
                                                          :ARG1 c2-3)
                                           :time (c2-11 / time
                                                        :mod (c2-12 / all))))
                  :mode expressive)
      :snt3 (c2-9 / get-05
                  :ARG0 (c2-0 / you)
                  :ARG1 c2-3
                  :mode imperative
                  :polite +))

# ::snt aha , wondering how long will be the show , have a good time Peter
# ::tokens ["aha", ",", "wondering", "how", "long", "will", "be", "the", "show", ",", "have", "a", "good", "time", "Peter"]
# ::lemmas ["aha", ",", "wonder", "how", "long", "will", "be", "the", "show", ",", "have", "a", "good", "time", "Peter"]
(c3-9 / say-01
      :ARG0 (c3-4 / i)
      :ARG1 (c3-11 / and
                   :op1 (c3-1 / wonder-01
                              :ARG0 c3-4
                              :ARG1 (c3-10 / temporal-quantity
                                           :duration-of (c3-3 / show-04)))
                   :op2 (c3-0 / have-03
                              :ARG0 (c3-6 / person
                                          :name (c3-5 / name
                                                      :op1 "Peter"))
                              :ARG1 (c3-8 / time
                                          :ARG1-of (c3-7 / good-02))
                              :mode imperative))
      :ARG2 c3-6
      :mod (c3-2 / haha
                 :mode expressive))

# ::snt thinking is worth to wait anyway
# ::tokens ["thinking", "is", "worth", "to", "wait", "anyway"]
# ::lemmas ["thinking", "be", "worth", "to", "wait", "anyway"]
(c4-0 / worth-02
      :ARG1 (c4-1 / think-01)
      :ARG2 (c4-3 / wait-01)
      :mod (c4-2 / anyway))

# ::snt Not such a surprise anymore, is it?
# ::tokens ["Not", "such", "a", "surprise", "anymore", ",", "is", "it", "?"]
# ::lemmas ["not", "such", "a", "surprise", "anymore", ",", "be", "it", "?"]
(c5-0 / surprise-01
      :mod (c5-1 / such)
      :time (c5-3 / anymore)
      :ARG1-of (c5-2 / request-confirmation-91)
      :polarity -)

# ::snt damn. I gotta work at to .. That sucks. But prince ain't going to pay my bills
# ::tokens ["damn", ".", "I", "got", "ta", "work", "at", "to", "..", "That", "sucks", ".", "But", "prince", "ai", "n't", "going", "to", "pay", "my", "bills"]
# ::lemmas ["damn", ".", "i", "got", "to", "work", "at", "to", "..", "that", "suck", ".", "but", "prince", "be", "not", "go", "to", "pay", "my", "bill"]
(c6-1 / multi-sentence
      :snt1 (c6-6 / damn-01
                  :mode expressive)
      :snt2 (c6-3 / obligate-01
                  :ARG1 (c6-4 / i)
                  :ARG2 (c6-0 / work-01
                              :ARG0 c6-4))
      :snt3 (c6-9 / suck-03
                  :ARG0 (c6-10 / that))
      :snt4 (c6-7 / contrast-01
                  :ARG2 (c6-5 / pay-01
                              :ARG0 (c6-11 / prince)
                              :ARG3 (c6-2 / bill
                                          :poss (c6-8 / i))
                              :polarity -)))

# ::snt Uh. I guess it isn't a surprise show any more.
# ::tokens ["Uh", ".", "I", "guess", "it", "is", "n't", "a", "surprise", "show", "any", "more", "."]
# ::lemmas ["uh", ".", "i", "guess", "it", "be", "not", "a", "surprise", "show", "any", "more", "."]
(c7-4 / guess-01
      :ARG0 (c7-2 / i)
      :ARG1 (c7-5 / show-04
                  :ARG1 (c7-1 / surprise-01)
                  :domain (c7-3 / it)
                  :time (c7-6 / anymore)
                  :polarity -)
      :mod (c7-0 / uh
                 :mode expressive))
