# ::snt What's up? Want to know how to get more done? Look at this
# ::tokens ["What", "'s", "up", "?", "Want", "to", "know", "how", "to", "get", "more", "done", "?", "Look", "at", "this"]
# ::lemmas ["what", "be", "up", "?", "want", "to", "know", "how", "to", "get", "more", "do", "?", "look", "at", "this"]
(c1-3 / multi-sentence
      :snt1 (c1-4 / event
                  :mod (c1-13 / amr-unknown))
      :snt2 (c1-0 / want-01
                  :ARG0 (c1-1 / you)
                  :ARG1 (c1-12 / know-01
                               :ARG0 c1-1
                               :ARG1 (c1-10 / thing
                                            :manner-of (c1-8 / get-04
                                                             :ARG0 c1-1
                                                             :ARG1 (c1-7 / do-02
                                                                         :ARG0 c1-1
                                                                         :ARG1 (c1-6 / more)))))
                  :polarity (c1-5 / amr-unknown))
      :snt3 (c1-2 / look-01
                  :ARG0 (c1-9 / you)
                  :ARG1 (c1-11 / this)
                  :mode imperative))

# ::snt :What's up? Want to get more done in less time? Check this out
# ::tokens [":", "What", "'s", "up", "?", "Want", "to", "get", "more", "done", "in", "less", "time", "?", "Check", "this", "out"]
# ::lemmas [":", "what", "be", "up", "?", "want", "to", "get", "more", "do", "in", "less", "time", "?", "check", "this", "out"]
(c2-3 / multi-sentence
      :snt1 (c2-4 / event
                  :mod (c2-13 / amr-unknown))
      :snt2 (c2-0 / want-01
                  :ARG0 (c2-1 / you)
                  :ARG1 (c2-9 / do-02
                              :ARG0 c2-1
                              :ARG1 (c2-8 / more)
                              :time (c2-5 / after
                                          :op1 (c2-6 / now)
                                          :quant (c2-12 / time
                                                        :quant (c2-2 / less))))
                  :polarity (c2-7 / amr-unknown))
      :snt3 (c2-10 / check-out-05
                   :ARG0 c2-1
                   :ARG1 (c2-11 / this)
                   :mode imperative))

# ::snt :Beautifully said.
# ::tokens [":", "Beautifully", "said", "."]
# ::lemmas [":", "Beautifully", "say", "."]
(c3-0 / say-01
      :manner (c3-1 / beautiful-02))

# ::snt K. Brb
# ::tokens ["K.", "Brb"]
# ::lemmas ["K.", "Brb"]
(c4-1 / person
      :name (c4-0 / name
                  :op1 "K."
                  :op2 "Brb"))

# ::snt Great one! love this Thanks.
# ::tokens ["Great", "one", "!", "love", "this", "Thanks", "."]
# ::lemmas ["great", "one", "!", "love", "this", "thank", "."]
(c5-2 / multi-sentence
      :snt1 (c5-3 / one
                  :mod (c5-5 / great))
      :snt2 (c5-1 / love-01
                  :ARG0 (c5-4 / i)
                  :ARG1 (c5-7 / this))
      :snt3 (c5-6 / thank-01
                  :ARG0 c5-4
                  :ARG1 (c5-0 / you)))

# ::snt vola va ali della liberta' va
# ::tokens ["vola", "va", "ali", "della", "liberta", "'", "va"]
# ::lemmas ["vola", "va", "ali", "della", "liberta", "'", "va"]
(c6-4 / and
      :op1 (c6-2 / vola
                 :op2-of c6-4
                 :mode expressive)
      :op3 (c6-1 / vila
                 :mod (c6-3 / della
                            :op1 (c6-0 / liberta))
                 :mode expressive)
      :mode expressive)
