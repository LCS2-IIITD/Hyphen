# ::snt What's so great about Charlie: it seems to be an equal opportunities offender. How fair is that?
# ::tokens ["What", "'s", "so", "great", "about", "Charlie", ":", "it", "seems", "to", "be", "an", "equal", "opportunities", "offender", ".", "How", "fair", "is", "that", "?"]
# ::lemmas ["what", "be", "so", "great", "about", "Charlie", ":", "it", "seem", "to", "be", "an", "equal", "opportunity", "offender", ".", "how", "fair", "be", "that", "?"]
(c1-1 / multi-sentence
      :snt1 (c1-9 / great
                  :topic (c1-8 / person
                               :name (c1-7 / name
                                           :op1 "Charlie"))
                  :degree (c1-10 / so))
      :snt2 (c1-4 / seem-01
                  :ARG1 (c1-12 / person
                               :ARG0-of (c1-3 / offend-01
                                              :ARG1-of (c1-5 / equal-01
                                                             :ARG3 (c1-0 / opportunity)))
                               :domain (c1-6 / it)))
      :snt3 (c1-2 / fair-01
                  :ARG1 (c1-11 / that)
                  :manner (c1-13 / amr-unknown)))

# ::snt every front page of every newspaper should run the headline "Je Suis Charlie" tomorrow or Saturday
# ::tokens ["every", "front", "page", "of", "every", "newspaper", "should", "run", "the", "headline", "\"", "Je", "Suis", "Charlie", "\"", "tomorrow", "or", "Saturday"]
# ::lemmas ["every", "front", "page", "of", "every", "newspaper", "should", "run", "the", "headline", "\"", "Je", "Suis", "Charlie", "\"", "tomorrow", "or", "Saturday"]
(c3-8 / recommend-01
      :ARG1 (c3-5 / run-09
                  :ARG0 (c3-7 / page
                              :mod (c3-1 / front)
                              :part-of (c3-6 / newspaper
                                             :mod (c3-3 / every)))
                  :ARG1 (c3-0 / headline-01
                              :ARG2 (c3-10 / string-entity
                                           :value "Je Suis Charlie"))
                  :time (c3-2 / or
                              :op1 (c3-11 / tomorrow)
                              :op2 (c3-9 / date-entity
                                         :weekday (c3-4 / saturday)))))
