# ::snt because of islam is everlasting religion......so I request you don't worship creation worship the creator.........
# ::tokens ["because", "of", "islam", "is", "everlasting", "religion", "......", "so", "I", "request", "you", "do", "n't", "worship", "creation", "worship", "the", "creator", "........."]
# ::lemmas ["because", "of", "islam", "be", "everlaste", "religion", "......", "so", "i", "request", "you", "do", "not", "worship", "creation", "worship", "the", "creator", "........."]
(c4-10 / cause-01
       :ARG0 (c4-9 / religion
                   :duration (c4-2 / forever)
                   :domain (c4-5 / religious-group
                                 :name (c4-6 / name
                                             :op1 "Islam")))
       :ARG1 (c4-3 / request-01
                   :ARG0 (c4-4 / i)
                   :ARG1 (c4-0 / worship-01
                               :ARG0 (c4-1 / you)
                               :ARG1 (c4-11 / create-01)
                               :polarity -)
                   :ARG2 (c4-7 / worship-01
                               :ARG0 c4-1
                               :ARG1 (c4-8 / person
                                           :ARG0-of c4-11))))

# ::snt dear hasil, the truth is simple.God is the creator. He entered into every atom of it. He is our caretaker.
# ::tokens ["dear", "hasil", ",", "the", "truth", "is", "simple", ".", "God", "is", "the", "creator", ".", "He", "entered", "into", "every", "atom", "of", "it", ".", "He", "is", "our", "caretaker", "."]
# ::lemmas ["dear", "hasil", ",", "the", "truth", "be", "simple", ".", "God", "be", "the", "creator", ".", "he", "enter", "into", "every", "atom", "of", "it", ".", "he", "be", "our", "caretaker", "."]
(c5-2 / multi-sentence
      :snt1 (c5-0 / have-concession-91
                  :ARG1 (c5-12 / simple-02
                               :ARG1 (c5-14 / true-01))
                  :ARG2 (c5-16 / have-03
                               :ARG1 c5-14))
      :snt2 (c5-9 / person
                  :ARG0-of (c5-11 / create-01)
                  :domain (c5-15 / person
                                 :name (c5-7 / name
                                             :op1 "God")))
      :snt3 (c5-5 / enter-01
                  :ARG0 (c5-8 / he)
                  :ARG1 (c5-13 / atom
                               :mod (c5-3 / every)
                               :part-of (c5-6 / it)))
      :snt4 (c5-10 / care-03
                   :ARG0 (c5-4 / he)
                   :ARG1 (c5-1 / we)))

# ::snt What you are saying please don't make statement unless you know truth
# ::tokens ["What", "you", "are", "saying", "please", "do", "n't", "make", "statement", "unless", "you", "know", "truth"]
# ::lemmas ["what", "you", "be", "say", "please", "do", "not", "make", "statement", "unless", "you", "know", "truth"]
(c6-3 / say-01
      :ARG0 (c6-0 / you)
      :ARG1 (c6-1 / state-01
                  :ARG0 c6-0
                  :condition (c6-2 / know-01
                                   :ARG0 c6-0
                                   :ARG1 (c6-4 / truth)
                                   :polarity -)
                  :polarity -
                  :mode imperative)
      :polite +)

# ::snt But why kill innocents?
# ::tokens ["But", "why", "kill", "innocents", "?"]
# ::lemmas ["but", "why", "kill", "innocent", "?"]
(c7-2 / contrast-01
      :ARG2 (c7-3 / kill-01
                  :ARG1 (c7-1 / person
                              :ARG1-of (c7-0 / innocent-01))
                  :purpose (c7-4 / amr-unknown)))

# ::snt When the creator and created becomes one, then it is called anafi.
# ::tokens ["When", "the", "creator", "and", "created", "becomes", "one", ",", "then", "it", "is", "called", "anafi", "."]
# ::lemmas ["when", "the", "creator", "and", "create", "become", "one", ",", "then", "it", "be", "call", "anafi", "."]
(c8-6 / call-01
      :ARG1 (c8-3 / it)
      :ARG2 (c8-9 / anafi)
      :time (c8-0 / become-01
                  :ARG1 (c8-2 / and
                              :op1 (c8-4 / person
                                         :ARG0-of (c8-5 / create-01))
                              :op2 (c8-8 / person
                                         :ARG1-of (c8-7 / create-01)))
                  :ARG2 (c8-1 / one)))
