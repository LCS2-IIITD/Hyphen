# ::snt looks like a nice guy..
# ::tokens ["looks", "like", "a", "nice", "guy", ".."]
# ::lemmas ["look", "like", "a", "nice", "guy", ".."]
(c1-1 / look-02
      :ARG1 (c1-2 / guy
                  :ARG1-of (c1-0 / nice-01)))

# ::snt please Anyone who knows how to pray say a prayer for the poor hostages in that cafe in Sydney What evil this is
# ::tokens ["please", "Anyone", "who", "knows", "how", "to", "pray", "say", "a", "prayer", "for", "the", "poor", "hostages", "in", "that", "cafe", "in", "Sydney", "What", "evil", "this", "is"]
# ::lemmas ["please", "anyone", "who", "know", "how", "to", "pray", "say", "a", "prayer", "for", "the", "poor", "hostage", "in", "that", "cafe", "in", "Sydney", "what", "evil", "this", "be"]
(c2-7 / say-01
      :ARG0 (c2-11 / anyone
                   :ARG0-of (c2-9 / know-03
                                  :ARG1 (c2-4 / pray-01)))
      :ARG1 (c2-10 / pray-01
                   :ARG0 c2-11
                   :beneficiary (c2-0 / hostage
                                      :mod (c2-2 / poor)
                                      :location (c2-6 / cafe
                                                      :mod (c2-8 / that)
                                                      :location (c2-5 / city
                                                                      :name (c2-3 / name
                                                                                  :op1 "Sydney")))))
      :ARG2-of (c2-1 / please-01)
      :polite +)

# ::snt where are your snipers? take the muslim out ASAP!
# ::tokens ["where", "are", "your", "snipers", "?", "take", "the", "muslim", "out", "ASAP", "!"]
# ::lemmas ["where", "be", "your", "sniper", "?", "take", "the", "muslim", "out", "asap", "!"]
(c3-1 / multi-sentence
      :snt1 (c3-2 / be-located-at-91
                  :ARG1 (c3-7 / sniper
                              :poss (c3-0 / you))
                  :ARG2 (c3-9 / amr-unknown))
      :snt2 (c3-8 / take-out-11
                  :ARG0 c3-0
                  :ARG1 (c3-5 / person
                              :mod (c3-6 / religious-group
                                         :name (c3-4 / name
                                                     :op1 "Muslim")))
                  :time (c3-3 / ASAP)
                  :mode imperative))

# ::snt :Gunman Haron Monis,on bail over murder of ex-wife
# ::tokens [":", "Gunman", "Haron", "Monis", ",", "on", "bail", "over", "murder", "of", "ex", "-", "wife"]
# ::lemmas [":", "Gunman", "Haron", "Monis", ",", "on", "bail", "over", "murder", "of", "ex", "-", "wife"]
(c4-3 / bail-out-02
      :ARG1 (c4-6 / person
                  :name (c4-5 / name
                              :op1 "Haron"
                              :op2 "Monis")
                  :ARG0-of (c4-0 / have-org-role-91
                                 :ARG2 (c4-7 / gunman)))
      :ARG2 (c4-2 / murder-01
                  :ARG0 c4-6
                  :ARG1 (c4-8 / person
                              :ARG0-of (c4-9 / have-rel-role-91
                                             :ARG2 (c4-1 / wife)
                                             :time (c4-4 / ex)))))

# ::snt and more at
# ::tokens ["and", "more", "at"]
# ::lemmas ["and", "more", "at"]
(c5-1 / and
      :op2 (c5-0 / more))

# ::snt so true.
# ::tokens ["so", "true", "."]
# ::lemmas ["so", "true", "."]
(c6-1 / true-01
      :degree (c6-0 / so))

# ::snt mentally sick person
# ::tokens ["mentally", "sick", "person"]
# ::lemmas ["mentally", "sick", "person"]
(c7-1 / person
      :ARG1-of (c7-0 / sick-05
                     :mod (c7-2 / mental)))

# ::snt God help us all
# ::tokens ["God", "help", "us", "all"]
# ::lemmas ["God", "help", "we", "all"]
(c8-0 / help-01
      :ARG0 (c8-3 / person
                  :name (c8-2 / name
                              :op1 "God"))
      :ARG2 (c8-1 / we
                  :mod (c8-4 / all)))

# ::snt Hope he's dead the mug
# ::tokens ["Hope", "he", "'s", "dead", "the", "mug"]
# ::lemmas ["hope", "he", "be", "dead", "the", "mug"]
(c9-0 / hope-01
      :ARG0 (c9-2 / i)
      :ARG1 (c9-3 / die-01
                  :ARG1 (c9-5 / he))
      :ARG1-of (c9-4 / cause-01
                     :ARG0 (c9-1 / mug)))

# ::snt For legal reasons.
# ::tokens ["For", "legal", "reasons", "."]
# ::lemmas ["for", "legal", "reason", "."]
(c10-1 / cause-01
       :ARG0 (c10-0 / reason
                    :ARG1-of (c10-2 / legal-02)))

# ::snt UGLY FUCKER like all his race and creed.
# ::tokens ["UGLY", "FUCKER", "like", "all", "his", "race", "and", "creed", "."]
# ::lemmas ["UGLY", "FUCKER", "like", "all", "his", "race", "and", "creed", "."]
(c11-5 / resemble-01
       :ARG1 (c11-0 / he)
       :ARG2 (c11-7 / and
                    :op1 (c11-4 / race)
                    :op2 (c11-6 / creed)
                    :mod (c11-3 / all)
                    :poss c11-0)
       :mod (c11-1 / fucking
                   :degree (c11-2 / big)
                   :mode expressive))

# ::snt How can you be on bail for Murder....words fail me.
# ::tokens ["How", "can", "you", "be", "on", "bail", "for", "Murder", "....", "words", "fail", "me", "."]
# ::lemmas ["how", "can", "you", "be", "on", "bail", "for", "Murder", "....", "word", "fail", "i", "."]
(c12-3 / multi-sentence
       :snt1 (c12-6 / possible-01
                    :ARG1 (c12-4 / bail-out-02
                                 :ARG1 (c12-0 / you)
                                 :ARG1-of (c12-8 / cause-01
                                                 :ARG0 (c12-7 / murder-01
                                                              :ARG0 c12-0))
                                 :manner (c12-9 / amr-unknown)))
       :snt2 (c12-2 / fail-01
                    :ARG1 (c12-1 / word)
                    :ARG2 (c12-5 / i)))

# ::snt Isnt it strange how one cant retweet some things
# ::tokens ["Is", "nt", "it", "strange", "how", "one", "ca", "nt", "retweet", "some", "things"]
# ::lemmas ["be", "not", "it", "strange", "how", "one", "can", "not", "retweet", "some", "thing"]
(c13-4 / strange
       :polarity (c13-6 / amr-unknown)
       :domain (c13-2 / possible-01
                      :ARG1 (c13-3 / retweet-01
                                   :ARG0 (c13-0 / one)
                                   :ARG1 (c13-5 / thing
                                                :quant (c13-1 / some)))
                      :polarity -))

# ::snt Why not?
# ::tokens ["Why", "not", "?"]
# ::lemmas ["why", "not", "?"]
(c14-0 / cause-01
       :ARG0 (c14-1 / amr-unknown)
       :polarity -)

# ::snt Charged for murder and out on bail?????
# ::tokens ["Charged", "for", "murder", "and", "out", "on", "bail", "?", "?", "?", "?", "?"]
# ::lemmas ["charge", "for", "murder", "and", "out", "on", "bail", "?", "?", "?", "?", "?"]
(c15-4 / and
       :polarity (c15-2 / amr-unknown)
       :op1 (c15-3 / charge-05
                   :ARG2 (c15-0 / murder-01))
       :op2 (c15-1 / bail-out-02
                   :ARG1 c15-3))

# ::snt Why wasn't he deported after initial criminal offenses. Leniency does not pay!
# ::tokens ["Why", "was", "n't", "he", "deported", "after", "initial", "criminal", "offenses", ".", "Leniency", "does", "not", "pay", "!"]
# ::lemmas ["why", "be", "not", "he", "deport", "after", "initial", "criminal", "offense", ".", "leniency", "do", "not", "pay", "!"]
(c16-2 / multi-sentence
       :snt1 (c16-7 / deport-01
                    :ARG1 (c16-0 / he)
                    :time (c16-10 / after
                                  :op1 (c16-3 / offend-03
                                              :ARG1-of (c16-8 / criminal-03)
                                              :mod (c16-5 / initial)))
                    :ARG1-of (c16-9 / cause-01
                                    :ARG0 (c16-4 / amr-unknown))
                    :polarity -)
       :snt2 (c16-6 / pay-01
                    :ARG0 (c16-1 / leniency)
                    :polarity -))

# ::snt : Gunman Haron Monis, on bail over murder of ex-wife
# ::tokens [":", "Gunman", "Haron", "Monis", ",", "on", "bail", "over", "murder", "of", "ex", "-", "wife"]
# ::lemmas [":", "Gunman", "Haron", "Monis", ",", "on", "bail", "over", "murder", "of", "ex", "-", "wife"]
(c17-3 / bail-out-02
       :ARG1 (c17-6 / person
                    :name (c17-5 / name
                                 :op1 "Haron"
                                 :op2 "Monis")
                    :mod (c17-2 / man))
       :ARG2 (c17-7 / murder-01
                    :ARG0 c17-6
                    :ARG1 (c17-8 / person
                                 :ARG0-of (c17-0 / have-rel-role-91
                                                 :ARG1 c17-6
                                                 :ARG2 (c17-1 / wife)
                                                 :time (c17-4 / ex)))))

# ::snt Why post this?
# ::tokens ["Why", "post", "this", "?"]
# ::lemmas ["why", "post", "this", "?"]
(c19-1 / post-01
       :ARG0 (c19-0 / you)
       :ARG1 (c19-2 / this)
       :purpose (c19-3 / amr-unknown))

# ::snt why he is on bail after murdering someone is beyond me, this is a failure of so many systems in australia
# ::tokens ["why", "he", "is", "on", "bail", "after", "murdering", "someone", "is", "beyond", "me", ",", "this", "is", "a", "failure", "of", "so", "many", "systems", "in", "australia"]
# ::lemmas ["why", "he", "be", "on", "bail", "after", "murder", "someone", "be", "beyond", "i", ",", "this", "be", "a", "failure", "of", "so", "many", "system", "in", "australia"]
(c20-17 / and
        :op1 (c20-5 / beyond
                    :op1 (c20-8 / i)
                    :domain (c20-16 / thing
                                    :ARG0-of (c20-12 / cause-01
                                                     :ARG1 (c20-13 / bail-out-02
                                                                   :ARG1 (c20-0 / he)
                                                                   :time (c20-7 / after
                                                                                :op1 (c20-2 / murder-01
                                                                                            :ARG0 c20-0
                                                                                            :ARG1 (c20-15 / someone)))))))
        :op2 (c20-1 / fail-01
                    :ARG1 (c20-6 / system
                                 :location (c20-11 / country
                                                   :name (c20-9 / name
                                                                :op1 "Australia"))
                                 :ARG1-of (c20-3 / have-quant-91
                                                 :ARG2 (c20-10 / many)
                                                 :ARG3 (c20-4 / so)))
                    :ARG2 (c20-14 / this)))

# ::snt Got it in one.
# ::tokens ["Got", "it", "in", "one", "."]
# ::lemmas ["got", "it", "in", "one", "."]
(c21-1 / get-01
       :ARG1 (c21-2 / it)
       :location (c21-0 / one))
