# ::snt About strokes in at the th hole, last I heard.
# ::tokens ["About", "strokes", "in", "at", "the", "th", "hole", ",", "last", "I", "heard", "."]
# ::lemmas ["about", "stroke", "in", "at", "the", "th", "hole", ",", "last", "i", "hear", "."]
(c1-0 / hear-01
      :ARG0 (c1-2 / i)
      :ARG1 (c1-4 / about
                  :op1 (c1-3 / stroke-01
                             :location (c1-5 / hole
                                             :ord (c1-1 / ordinal-entity)))))

# ::snt Wow RT : Free Coffee to all journalists spreading awareness on movement
# ::tokens ["Wow", "RT", ":", "Free", "Coffee", "to", "all", "journalists", "spreading", "awareness", "on", "movement"]
# ::lemmas ["wow", "RT", ":", "Free", "Coffee", "to", "all", "journalist", "spread", "awareness", "on", "movement"]
(c2-9 / say-01
      :ARG0 (c2-7 / publication
                  :name (c2-6 / name
                              :op1 "RT"))
      :ARG1 (c2-8 / coffee
                  :ARG1-of (c2-2 / free-03)
                  :beneficiary (c2-0 / journalist
                                     :mod (c2-10 / all)
                                     :ARG0-of (c2-4 / spread-01
                                                    :ARG1 (c2-5 / awareness
                                                                :topic (c2-3 / movement-07)))
                                     :ARG2-of c2-9))
      :mod (c2-1 / wow
                 :mode expressive))

# ::snt Smart move. /thumbs up
# ::tokens ["Smart", "move", ".", "/thumbs", "up"]
# ::lemmas ["smart", "move", ".", "/thumbs", "up"]
(c3-2 / multi-sentence
      :snt1 (c3-1 / move-02
                  :ARG1-of (c3-0 / smart-06))
      :snt2 (c3-3 / umbs-up-00))

# ::snt Free Coffee to all journalists spreading awareness on movement
# ::tokens ["Free", "Coffee", "to", "all", "journalists", "spreading", "awareness", "on", "movement"]
# ::lemmas ["Free", "Coffee", "to", "all", "journalist", "spread", "awareness", "on", "movement"]
(c4-3 / offer-01
      :ARG1 (c4-5 / coffee
                  :ARG1-of (c4-1 / free-03))
      :ARG3 (c4-0 / journalist
                  :mod (c4-7 / all)
                  :ARG0-of (c4-6 / spread-01
                                 :ARG1 (c4-4 / awareness
                                             :topic (c4-2 / movement-07)))))

# ::snt You will be my coffee provide of choice when I am at
# ::tokens ["You", "will", "be", "my", "coffee", "provide", "of", "choice", "when", "I", "am", "at"]
# ::lemmas ["you", "will", "be", "my", "coffee", "provide", "of", "choice", "when", "i", "be", "at"]
(c5-3 / provide-01
      :ARG0 (c5-5 / coffee
                  :poss (c5-2 / i))
      :ARG2 (c5-0 / you)
      :ARG1-of (c5-4 / choose-01
                     :ARG0 c5-2)
      :time (c5-1 / be-located-at-91
                  :ARG1 c5-2))

# ::snt Where's O? Well, probably trying to make sure he's at the ready for swat needs.
# ::tokens ["Where", "'s", "O", "?", "Well", ",", "probably", "trying", "to", "make", "sure", "he", "'s", "at", "the", "ready", "for", "swat", "needs", "."]
# ::lemmas ["where", "be", "o", "?", "well", ",", "probably", "try", "to", "make", "sure", "he", "be", "at", "the", "ready", "for", "swat", "need", "."]
(c7-2 / multi-sentence
      :snt1 (c7-3 / be-located-at-91
                  :ARG1 (c7-7 / person
                              :name (c7-5 / name
                                          :op1 "O"))
                  :ARG2 (c7-12 / amr-unknown))
      :snt2 (c7-10 / try-01
                   :ARG1 (c7-4 / ensure-01
                               :ARG1 (c7-8 / ready-02
                                           :ARG1 (c7-0 / he)
                                           :ARG2 (c7-6 / need-01
                                                       :ARG1 (c7-9 / swat-01))))
                   :mod (c7-11 / probable)
                   :mod (c7-1 / well)))

# ::snt Now THAT tells something. This is like Watts, LA et al never happened. Where is Obama?
# ::tokens ["Now", "THAT", "tells", "something", ".", "This", "is", "like", "Watts", ",", "LA", "et", "al", "never", "happened", ".", "Where", "is", "Obama", "?"]
# ::lemmas ["now", "that", "tell", "something", ".", "this", "be", "like", "Watts", ",", "LA", "et", "al", "never", "happen", ".", "where", "be", "Obama", "?"]
(c8-0 / multi-sentence
      :snt1 (c8-18 / tell-01
                   :ARG0 (c8-17 / that)
                   :ARG1 (c8-4 / something)
                   :time (c8-10 / now))
      :snt2 (c8-11 / resemble-01
                   :ARG1 (c8-14 / this)
                   :ARG2 (c8-6 / and
                               :op1 (c8-3 / person
                                          :name (c8-16 / name
                                                       :op1 "Watts"))
                               :op2 (c8-5 / person
                                          :name (c8-1 / name
                                                      :op1 "LA"))
                               :op3 (c8-7 / person
                                          :mod (c8-15 / other))
                               :time (c8-9 / ever)))
      :snt3 (c8-8 / be-located-at-91
                  :ARG1 (c8-12 / person
                               :name (c8-2 / name
                                           :op1 "Obama"))
                  :ARG2 (c8-13 / amr-unknown)))

# ::snt beware the controlled reptile 'news media'
# ::tokens ["beware", "the", "controlled", "reptile", "'", "news", "media", "'"]
# ::lemmas ["beware", "the", "control", "reptile", "'", "news", "medium", "'"]
(c9-2 / beware-01
      :ARG0 (c9-0 / you)
      :ARG1 (c9-1 / media
                  :mod (c9-3 / news)
                  :ARG1-of (c9-5 / control-01)
                  :mod (c9-4 / reptile))
      :mode imperative)

# ::snt And the ambiance looks way nicer than Mickey D's.
# ::tokens ["And", "the", "ambiance", "looks", "way", "nicer", "than", "Mickey", "D", "'s", "."]
# ::lemmas ["and", "the", "ambiance", "look", "way", "nicer", "than", "Mickey", "D", "'s", "."]
(c10-6 / and
       :op2 (c10-1 / look-02
                   :ARG0 (c10-2 / ambiance)
                   :ARG1 (c10-3 / nice-01
                                :ARG1 c10-2
                                :degree (c10-0 / way))
                   :ARG2 (c10-5 / company
                                :name (c10-4 / name
                                             :op1 "Mickey"
                                             :op2 "D's"))))

# ::snt Congrats on your tweet!
# ::tokens ["Congrats", "on", "your", "tweet", "!"]
# ::lemmas ["congrat", "on", "your", "tweet", "!"]
(c11-2 / congratulate-01
       :ARG1 (c11-1 / you)
       :ARG2 (c11-0 / tweet-01
                    :ARG0 c11-1))

# ::snt Free Coffee to all journalists spreading awareness on movement
# ::tokens ["Free", "Coffee", "to", "all", "journalists", "spreading", "awareness", "on", "movement"]
# ::lemmas ["Free", "Coffee", "to", "all", "journalist", "spread", "awareness", "on", "movement"]
(c12-3 / offer-01
       :ARG1 (c12-5 / coffee
                    :ARG1-of (c12-1 / free-03))
       :ARG3 (c12-0 / journalist
                    :mod (c12-7 / all)
                    :ARG0-of (c12-6 / spread-01
                                    :ARG1 (c12-4 / awareness
                                                 :topic (c12-2 / movement-07)))))

# ::snt THANK YOU. If I am ever in St. Louis you will have my business. from this journo.
# ::tokens ["THANK", "YOU", ".", "If", "I", "am", "ever", "in", "St.", "Louis", "you", "will", "have", "my", "business", ".", "from", "this", "journo", "."]
# ::lemmas ["thank", "you", ".", "if", "i", "be", "ever", "in", "St.", "Louis", "you", "will", "have", "my", "business", ".", "from", "this", "journo", "."]
(c13-3 / multi-sentence
       :snt1 (c13-13 / thank-01
                     :ARG0 (c13-6 / i)
                     :ARG1 (c13-1 / you))
       :snt2 (c13-0 / have-03
                    :ARG0 (c13-11 / you)
                    :ARG1 (c13-4 / business
                                 :poss (c13-9 / i)
                                 :source (c13-2 / journo
                                                :mod (c13-12 / this)))
                    :condition (c13-8 / be-located-at-91
                                      :ARG1 c13-9
                                      :ARG2 (c13-10 / city
                                                    :name (c13-7 / name
                                                                 :op1 "St."
                                                                 :op2 "Louis"))
                                      :time (c13-5 / ever))))
