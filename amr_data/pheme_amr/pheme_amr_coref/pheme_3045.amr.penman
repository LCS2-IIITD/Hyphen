# ::snt The usual knee-jerk Politicians-how about blaming it on Iran&ampyria the Islamic Orthodox Church-our favoured suspects
# ::tokens ["The", "usual", "knee", "-", "jerk", "Politicians", "-", "how", "about", "blaming", "it", "on", "Iran&ampyria", "the", "Islamic", "Orthodox", "Church", "-", "our", "favoured", "suspects"]
# ::lemmas ["the", "usual", "knee", "-", "jerk", "Politicians", "-", "how", "about", "blame", "it", "on", "iran&ampyria", "the", "Islamic", "Orthodox", "Church", "-", "our", "favour", "suspect"]
(c1-13 / amr-unknown
       :topic (c1-3 / blame-01
                    :ARG1 (c1-5 / and
                                :op1 (c1-10 / country
                                            :name (c1-6 / name
                                                        :op1 "Iran")
                                            :op2-of c1-5)
                                :name (c1-7 / name
                                            :op1 "Palestine"))
                    :op3 (c1-4 / organization
                               :name (c1-8 / name
                                           :op1 "Islamic"
                                           :op2 "Orthodox"
                                           :op3 "Church")))
       :ARG2-of (c1-11 / suspect-01)
       :ARG1-of (c1-1 / favor-01
                      :ARG0 (c1-0 / we))
       :mod (c1-9 / politician
                  :mod (c1-2 / usual)
                  :mod (c1-12 / kneejerk)))

# ::snt Two hands on controls, to override autopilot ?
# ::tokens ["Two", "hands", "on", "controls", ",", "to", "override", "autopilot", "?"]
# ::lemmas ["Two", "hand", "on", "control", ",", "to", "override", "autopilot", "?"]
(c2-0 / hand
      :polarity (c2-4 / amr-unknown)
      :instrument-of (c2-3 / control-01)
      :purpose (c2-1 / override-01
                     :ARG1 (c2-2 / autopilot))
      :quant 2)

# ::snt Pentagon must be happy now -they'll make it mandatory that all Crafts be fitted w/an Override remote control at Manufacturers base
# ::tokens ["Pentagon", "must", "be", "happy", "now", "-they'll", "make", "it", "mandatory", "that", "all", "Crafts", "be", "fitted", "w", "/", "an", "Override", "remote", "control", "at", "Manufacturers", "base"]
# ::lemmas ["Pentagon", "must", "be", "happy", "now", "-they'll", "make", "it", "mandatory", "that", "all", "Crafts", "be", "fit", "w", "/", "an", "Override", "remote", "control", "at", "Manufacturers", "base"]
(c3-6 / obligate-01
      :ARG1 (c3-12 / government-organization
                   :name (c3-7 / name
                               :op1 "Pentagon"))
      :ARG2 (c3-0 / happy-01
                  :ARG1 c3-12
                  :time (c3-8 / now))
      :ARG1-of (c3-11 / cause-01
                      :ARG0 (c3-2 / make-02
                                  :ARG0 c3-12
                                  :ARG1 (c3-9 / mandate-01
                                              :ARG1 (c3-1 / fit-01
                                                          :ARG1 (c3-10 / craft
                                                                       :mod (c3-15 / all))
                                                          :ARG2 (c3-14 / control-01
                                                                       :mod (c3-13 / remote)
                                                                       :mod (c3-3 / override))
                                                          :location (c3-5 / base
                                                                          :poss (c3-16 / company
                                                                                       :ARG0-of (c3-4 / manufacture-01))))))))

# ::snt AIR FORCE WOULD HAVE PARACHUTES DONT TELL TONES HA HA
# ::tokens ["AIR", "FORCE", "WOULD", "HAVE", "PARACHUTES", "DONT", "TELL", "TONES", "HA", "HA"]
# ::lemmas ["AIR", "FORCE", "would", "have", "parachute", "dont", "tell", "TONES", "ha", "HA"]
(c4-7 / and
      :op1 (c4-0 / have-03
                 :ARG0 (c4-3 / air)
                 :ARG1 (c4-5 / classroom))
      :op2 (c4-6 / tell-01
                 :ARG0 (c4-2 / broadcast-program
                             :name (c4-4 / name
                                         :op1 "Pan"
                                         :op2 "American"
                                         :op3 "Television"))
                 :ARG1 (c4-1 / hand)
                 :ARG2 c4-2
                 :polarity -))

# ::snt : Tony Abbott seeks advice about cockpit rules in wake of Germanwings crash
# ::tokens [":", "Tony", "Abbott", "seeks", "advice", "about", "cockpit", "rules", "in", "wake", "of", "Germanwings", "crash"]
# ::lemmas [":", "Tony", "Abbott", "seek", "advice", "about", "cockpit", "rule", "in", "wake", "of", "Germanwings", "crash"]
(c5-8 / seek-01
      :ARG0 (c5-4 / person
                  :name (c5-2 / name
                              :op1 "Tony"
                              :op2 "Abbott"))
      :ARG1 (c5-9 / advise-01
                  :ARG0 c5-4
                  :ARG2 (c5-5 / rule-01
                              :ARG1 (c5-6 / cockpit)))
      :time (c5-0 / wake
                  :op1 (c5-7 / crash-01
                             :ARG1 (c5-1 / aircraft-type
                                         :name (c5-3 / name
                                                     :op1 "Germanwings")))))

# ::snt TONES WILL WANT UPGRADE OF HIS PLANE LIKE HIS $700'000 CAR
# ::tokens ["TONES", "WILL", "WANT", "UPGRADE", "OF", "HIS", "PLANE", "LIKE", "HIS", "$", "700'000", "CAR"]
# ::lemmas ["TONES", "will", "want", "upgrade", "of", "his", "plane", "like", "his", "$", "700'000", "CAR"]
(c7-1 / want-01
      :ARG0 (c7-5 / person
                  :name (c7-4 / name
                              :op1 "TONES"))
      :ARG1 (c7-2 / make-01
                  :ARG1 (c7-10 / PLANE
                               :poss (c7-0 / he))
                  :ARG2 (c7-3 / product
                              :ARG1-of (c7-6 / resemble-01
                                             :ARG2 (c7-7 / car
                                                         :poss c7-0
                                                         :mod (c7-8 / monetary-quantity
                                                                    :unit (c7-9 / dollar)
                                                                    :quant 700000))))))
