# ::snt je suis Charlie RIp
# ::tokens ["je", "suis", "Charlie", "RIp"]
# ::lemmas ["je", "suis", "Charlie", "RIp"]
(c1-1 / person
      :name (c1-0 / name
                  :op1 "Charlie"
                  :op2 "Riot")
      :ARG0-of (c1-2 / have-org-role-91
                     :ARG2 (c1-3 / suis)))

# ::snt but water boarding is bad. Right?
# ::tokens ["but", "water", "boarding", "is", "bad", ".", "Right", "?"]
# ::lemmas ["but", "water", "boarding", "be", "bad", ".", "right", "?"]
(c2-1 / multi-sentence
      :snt1 (c2-5 / contrast-01
                  :ARG2 (c2-2 / bad-07
                              :ARG1 (c2-4 / board-03
                                          :instrument (c2-0 / water))))
      :snt2 (c2-3 / request-confirmation-91))

# ::snt how have they got away in a C3? City centre as well! Where's all the CCTV when it's needed? Just doesn't add up!
# ::tokens ["how", "have", "they", "got", "away", "in", "a", "C3", "?", "City", "centre", "as", "well", "!", "Where", "'s", "all", "the", "CCTV", "when", "it", "'s", "needed", "?", "Just", "does", "n't", "add", "up", "!"]
# ::lemmas ["how", "have", "they", "get", "away", "in", "a", "C3", "?", "city", "centre", "as", "well", "!", "where", "be", "all", "the", "CCTV", "when", "it", "be", "need", "?", "just", "do", "not", "add", "up", "!"]
(c3-1 / multi-sentence
      :snt1 (c3-11 / get-away-08
                   :ARG0 (c3-15 / they)
                   :manner (c3-16 / amr-unknown)
                   :location (c3-10 / car-make
                                    :name (c3-6 / name
                                                :op1 "C3")))
      :snt2 (c3-9 / center
                  :mod (c3-13 / city)
                  :mod (c3-5 / as-well)
                  :location (c3-7 / amr-unknown))
      :snt3 (c3-2 / be-located-at-91
                  :ARG1 (c3-8 / publication
                              :name c3-6
                              :op1 "CCTV")
                  :mod (c3-14 / all))
      :ARG2 (c3-4 / amr-unknown)
      :time (c3-12 / need-01
                   :ARG1 c3-8)
      :snt4 (c3-3 / add-up-04
                  :ARG1 (c3-0 / just)
                  :polarity -))

# ::snt *three terrorists. Call them what they are.
# ::tokens ["*", "three", "terrorists", ".", "Call", "them", "what", "they", "are", "."]
# ::lemmas ["*", "three", "terrorist", ".", "call", "they", "what", "they", "be", "."]
(c4-1 / multi-sentence
      :snt1 (c4-5 / terrorist
                  :quant 3)
      :snt2 (c4-3 / call-01
                  :ARG0 (c4-0 / you)
                  :ARG1 (c4-4 / they)
                  :ARG2 (c4-2 / thing)
                  :mode imperative))

# ::snt casually just getting about in their C3, it must be a turbo
# ::tokens ["casually", "just", "getting", "about", "in", "their", "C3", ",", "it", "must", "be", "a", "turbo"]
# ::lemmas ["casually", "just", "get", "about", "in", "their", "C3", ",", "it", "must", "be", "a", "turbo"]
(c5-5 / get-05
      :ARG2 (c5-8 / about)
      :mod (c5-4 / casual)
      :mod (c5-0 / just)
      :location (c5-3 / car-make
                      :name (c5-2 / name
                                  :op1 "C3")
                      :poss (c5-7 / they))
      :ARG1-of (c5-1 / infer-01
                     :ARG0 (c5-6 / turbo)))

# ::snt Paris shooting
# ::tokens ["Paris", "shooting"]
# ::lemmas ["Paris", "shooting"]
(c6-0 / shoot-02
      :location (c6-2 / city
                      :name (c6-1 / name
                                  :op1 "Paris")))

# ::snt Yes. How stupid are you?
# ::tokens ["Yes", ".", "How", "stupid", "are", "you", "?"]
# ::lemmas ["yes", ".", "how", "stupid", "be", "you", "?"]
(c7-0 / stupid
      :domain (c7-1 / you)
      :degree (c7-2 / amr-unknown))

# ::snt I can't believe they were able to just walk out.
# ::tokens ["I", "ca", "n't", "believe", "they", "were", "able", "to", "just", "walk", "out", "."]
# ::lemmas ["i", "can", "not", "believe", "they", "be", "able", "to", "just", "walk", "out", "."]
(c8-5 / possible-01
      :ARG1 (c8-2 / believe-01
                  :ARG0 (c8-4 / i)
                  :ARG1 (c8-7 / possible-01
                              :ARG1 (c8-1 / walk-01
                                          :ARG0 (c8-6 / they)
                                          :ARG2 (c8-3 / out)
                                          :mod (c8-0 / just))))
      :polarity -)

# ::snt You spelled terrorist attack incorrectly.
# ::tokens ["You", "spelled", "terrorist", "attack", "incorrectly", "."]
# ::lemmas ["you", "spell", "terrorist", "attack", "incorrectly", "."]
(c9-2 / spell-01
      :ARG0 (c9-0 / you)
      :ARG1 (c9-4 / attack-01
                  :mod (c9-3 / terrorist))
      :ARG1-of (c9-1 / correct-02
                     :polarity -))

# ::snt :Three attackers being hunted for assault on French magazine , French interior minister says
# ::tokens [":", "Three", "attackers", "being", "hunted", "for", "assault", "on", "French", "magazine", ",", "French", "interior", "minister", "says"]
# ::lemmas [":", "Three", "attacker", "be", "hunt", "for", "assault", "on", "French", "magazine", ",", "French", "interior", "minister", "say"]
(c10-8 / say-01
       :ARG0 (c10-5 / person
                    :ARG0-of (c10-0 / have-org-role-91
                                    :ARG1 (c10-7 / country
                                                 :name (c10-4 / name
                                                              :op1 "France"))
                                    :ARG2 (c10-1 / minister
                                                 :topic (c10-3 / interior))))
       :ARG1 (c10-10 / hunt-01
                     :ARG1 c10-5
                     :ARG0-of (c10-9 / attack-01)
                     :quant 3)
       :ARG3 (c10-2 / assault-01
                    :ARG0 c10-5
                    :ARG1 (c10-6 / magazine
                                 :mod c10-7)))

# ::snt Kill on sight, I hope. We don't want then living like Lee Rigby's killers.
# ::tokens ["Kill", "on", "sight", ",", "I", "hope", ".", "We", "do", "n't", "want", "then", "living", "like", "Lee", "Rigby", "'s", "killers", "."]
# ::lemmas ["kill", "on", "sight", ",", "i", "hope", ".", "we", "do", "not", "want", "then", "live", "like", "Lee", "Rigby", "'s", "killer", "."]
(c11-3 / multi-sentence
       :snt1 (c11-0 / hope-01
                    :ARG0 (c11-5 / i)
                    :ARG1 (c11-11 / kill-01
                                  :location (c11-10 / sight)))
       :snt2 (c11-1 / want-01
                    :ARG0 (c11-6 / we)
                    :ARG1 (c11-2 / live-01
                                 :ARG1-of (c11-9 / resemble-01
                                                 :ARG1 (c11-8 / person
                                                              :ARG0-of (c11-4 / kill-01
                                                                              :ARG1 (c11-12 / person
                                                                                            :name (c11-7 / name
                                                                                                         :op1 "Lee"
                                                                                                         :op2 "Rigby"))))
                                                 :ARG2 c11-2))
                    :polarity -))

# ::snt the innocent is all people like that know how to do. Going to the source of their hatred would lead them to a mirror
# ::tokens ["the", "innocent", "is", "all", "people", "like", "that", "know", "how", "to", "do", ".", "Going", "to", "the", "source", "of", "their", "hatred", "would", "lead", "them", "to", "a", "mirror"]
# ::lemmas ["the", "innocent", "be", "all", "people", "like", "that", "know", "how", "to", "do", ".", "go", "to", "the", "source", "of", "their", "hatred", "would", "lead", "they", "to", "a", "mirror"]
(c12-2 / multi-sentence
       :snt1 (c12-11 / know-01
                     :ARG0 (c12-4 / person
                                  :mod (c12-13 / all)
                                  :ARG1-of (c12-5 / resemble-01
                                                  :ARG2 (c12-10 / that)))
                     :ARG1 (c12-6 / do-02
                                  :ARG0 c12-4
                                  :ARG1 (c12-9 / thing)))
       :snt2 (c12-1 / lead-03
                    :ARG0 (c12-7 / go-02
                                 :ARG0 (c12-3 / they)
                                 :ARG4 c12-9
                                 :ARG0-of (c12-12 / source-02
                                                  :ARG1 (c12-0 / hate-01
                                                               :ARG0 c12-3))))
       :ARG4 (c12-8 / mirror))

# ::snt So sad. My thoughts and prayers for the families of the victims.
# ::tokens ["So", "sad", ".", "My", "thoughts", "and", "prayers", "for", "the", "families", "of", "the", "victims", "."]
# ::lemmas ["so", "sad", ".", "my", "thought", "and", "prayer", "for", "the", "family", "of", "the", "victim", "."]
(c14-2 / multi-sentence
       :snt1 (c14-8 / sad-02
                    :degree (c14-3 / so))
       :snt2 (c14-10 / and
                     :op1 (c14-9 / think-01
                                 :ARG0 (c14-4 / i)
                                 :ARG2 (c14-1 / family
                                              :ARG1-of (c14-0 / have-rel-role-91
                                                              :ARG0 (c14-5 / victim)
                                                              :ARG2 (c14-6 / member))))
                     :op2 (c14-7 / pray-01
                                 :ARG0 c14-4
                                 :ARG2 c14-1)))

# ::snt come over here and make me disappear... You're country has been coopted by Islamists. Britain is a bin of pussies.
# ::tokens ["come", "over", "here", "and", "make", "me", "disappear", "...", "You", "'re", "country", "has", "been", "coopted", "by", "Islamists", ".", "Britain", "is", "a", "bin", "of", "pussies", "."]
# ::lemmas ["come", "over", "here", "and", "make", "i", "disappear", "...", "you", "be", "country", "have", "be", "coopte", "by", "Islamists", ".", "Britain", "be", "a", "bin", "of", "pussy", "."]
(c15-2 / multi-sentence
       :snt1 (c15-16 / and
                     :op1 (c15-9 / come-01
                                 :ARG1 (c15-1 / you)
                                 :ARG4 (c15-0 / here)
                                 :mode imperative)
                     :op2 (c15-7 / make-02
                                 :ARG0 c15-1
                                 :ARG1 (c15-8 / disappear-01
                                              :ARG1 (c15-4 / i))
                                 :mode imperative))
       :snt2 (c15-10 / coopt-01
                     :ARG0 (c15-11 / person
                                   :mod (c15-12 / religious-group
                                                :name (c15-5 / name
                                                             :op1 "Islamism")))
                     :ARG1 (c15-13 / country
                                   :poss (c15-17 / you)))
       :snt3 (c15-3 / bin
                    :consist-of (c15-15 / pussy)
                    :domain (c15-14 / country
                                    :name (c15-6 / name
                                                 :op1 "Britain"))))

# ::snt smart enough to know a shitbag like you when I see one.
# ::tokens ["smart", "enough", "to", "know", "a", "shitbag", "like", "you", "when", "I", "see", "one", "."]
# ::lemmas ["smart", "enough", "to", "know", "a", "shitbag", "like", "you", "when", "i", "see", "one", "."]
(c16-0 / have-degree-91
       :ARG2 (c16-8 / smart-06
                    :ARG1 (c16-6 / i))
       :ARG3 (c16-4 / enough)
       :ARG6 (c16-9 / know-04
                    :ARG0 c16-6
                    :ARG1 (c16-5 / shitbag
                                 :ARG1-of (c16-7 / resemble-01
                                                 :ARG2 (c16-1 / you)))
                    :time (c16-2 / see-01
                                 :ARG0 c16-6
                                 :ARG1 (c16-3 / shitbag))))

# ::snt , so why are all the media saying
# ::tokens [",", "so", "why", "are", "all", "the", "media", "saying"]
# ::lemmas [",", "so", "why", "be", "all", "the", "medium", "say"]
(c17-3 / say-01
       :ARG0 (c17-0 / media
                    :mod (c17-4 / all))
       :ARG1-of (c17-2 / cause-01
                       :ARG0 (c17-1 / amr-unknown)))

# ::snt They'll catch them &amp; then what? they'll be counselled &amp; given "Integration to French Society " course? RIP
# ::tokens ["They", "'ll", "catch", "them", "&", "amp", ";", "then", "what", "?", "they", "'ll", "be", "counselled", "&", "amp", ";", "given", "\"", "Integration", "to", "French", "Society", "\"", "course", "?", "RIP"]
# ::lemmas ["they", "'ll", "catch", "they", "&", "amp", ";", "then", "what", "?", "they", "'ll", "be", "counsel", "&", "amp", ";", "give", "\"", "Integration", "to", "French", "Society", "\"", "course", "?", "RIP"]
(c18-0 / multi-sentence
       :snt1 (c18-16 / catch-01
                     :ARG0 (c18-18 / they)
                     :ARG1 (c18-5 / and
                                  :op1 (c18-17 / they)
                                  :op2 (c18-1 / person
                                              :name (c18-6 / name
                                                           :op1 "amp"))))
       :snt2 (c18-9 / and
                    :op1 (c18-2 / counsel-01
                                :ARG1 (c18-11 / they))
                    :op2 (c18-8 / give-01
                                :ARG1 (c18-12 / course
                                              :topic (c18-10 / integrate-01
                                                             :ARG1 c18-11
                                                             :ARG2 (c18-3 / society
                                                                          :mod (c18-13 / country
                                                                                       :name (c18-15 / name
                                                                                                     :op1 "France")))))))
       :snt3 (c18-7 / rest-01
                    :ARG1 (c18-14 / you)
                    :manner (c18-4 / peace)
                    :mode imperative))

# ::snt french ministre did mistake. Only terrorists
# ::tokens ["french", "ministre", "did", "mistake", ".", "Only", "terrorists"]
# ::lemmas ["french", "ministre", "do", "mistake", ".", "only", "terrorist"]
(c19-1 / multi-sentence
       :snt1 (c19-3 / mistake-02
                    :ARG0 (c19-0 / ministre
                                 :mod (c19-4 / rench)))
       :snt2 (c19-5 / terrorist
                    :mod (c19-2 / only)))
