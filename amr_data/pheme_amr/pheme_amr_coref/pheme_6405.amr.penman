# ::snt Glad you have the guts to post the truth and leave it. Not one who deletes after they say it. Kudos
# ::tokens ["Glad", "you", "have", "the", "guts", "to", "post", "the", "truth", "and", "leave", "it", ".", "Not", "one", "who", "deletes", "after", "they", "say", "it", ".", "Kudos"]
# ::lemmas ["glad", "you", "have", "the", "gut", "to", "post", "the", "truth", "and", "leave", "it", ".", "not", "one", "who", "delete", "after", "they", "say", "it", ".", "Kudos"]
(c1-3 / multi-sentence
      :snt1 (c1-11 / glad-02
                   :ARG0 (c1-0 / have-03
                               :ARG0 (c1-1 / you)
                               :ARG1 (c1-9 / gut)
                               :purpose (c1-14 / and
                                               :op1 (c1-8 / post-01
                                                          :ARG0 c1-1
                                                          :ARG1 (c1-13 / truth))
                                               :op2 (c1-2 / leave-15
                                                          :ARG0 c1-1
                                                          :ARG1 c1-13)))
                   :ARG1 (c1-6 / i))
      :snt2 (c1-10 / delete-01
                   :ARG0 (c1-4 / one)
                   :time (c1-5 / after
                               :op1 (c1-12 / say-01
                                           :ARG0 c1-4
                                           :ARG1 c1-13))
                   :polarity -)
      :snt3 (c1-7 / kudos))

# ::snt Well one person already is collecting, a second almost collected, and it's only Wednesday...
# ::tokens ["Well", "one", "person", "already", "is", "collecting", ",", "a", "second", "almost", "collected", ",", "and", "it", "'s", "only", "Wednesday", "..."]
# ::lemmas ["well", "one", "person", "already", "be", "collect", ",", "a", "second", "almost", "collect", ",", "and", "it", "be", "only", "Wednesday", "..."]
(c2-11 / and
       :op1 (c2-8 / collect-01
                  :ARG0 (c2-6 / person
                              :quant 1)
                  :time (c2-3 / already))
       :op2 (c2-7 / collect-01
                  :ARG0 (c2-10 / person
                               :ord (c2-2 / ordinal-entity
                                          :value 2)
                               :quant 2)
                  :mod (c2-5 / almost))
       :op3 (c2-9 / date-entity
                  :weekday (c2-0 / wednesday
                                 :mod (c2-1 / only)))
       :mod (c2-4 / well))

# ::snt Sh*t! RT : Swat team in have state mandated 'murder insurance' to protect them from lawsuits if they kill anyone.
# ::tokens ["Sh*t", "!", "RT", ":", "Swat", "team", "in", "have", "state", "mandated", "'", "murder", "insurance", "'", "to", "protect", "them", "from", "lawsuits", "if", "they", "kill", "anyone", "."]
# ::lemmas ["Sh*t", "!", "RT", ":", "Swat", "team", "in", "have", "state", "mandate", "'", "murder", "insurance", "'", "to", "protect", "they", "from", "lawsuit", "if", "they", "kill", "anyone", "."]
(c3-2 / multi-sentence
      :snt1 (c3-11 / shit
                   :mode expressive)
      :snt2 (c3-5 / say-01
                  :ARG0 (c3-9 / publication
                              :name (c3-8 / name
                                          :op1 "RT"))
                  :ARG1 (c3-6 / insure-02
                              :ARG1 (c3-10 / murder-01)
                              :ARG3 (c3-12 / team
                                           :mod (c3-1 / swat))
                              :ARG1-of (c3-3 / mandate-01
                                             :ARG0 (c3-4 / state))
                              :purpose (c3-13 / protect-01
                                              :ARG0 c3-12
                                              :ARG1 c3-12
                                              :ARG2 (c3-0 / sue-02
                                                          :ARG2 (c3-7 / kill-01
                                                                      :ARG0 c3-12
                                                                      :ARG1 (c3-14 / anyone)
                                                                      :condition-of c3-13))))))

# ::snt dear Max why did u block She's quite baffled! What's happened she wonder?
# ::tokens ["dear", "Max", "why", "did", "u", "block", "She", "'s", "quite", "baffled", "!", "What", "'s", "happened", "she", "wonder", "?"]
# ::lemmas ["dear", "Max", "why", "do", "u", "block", "she", "be", "quite", "baffled", "!", "what", "be", "happen", "she", "wonder", "?"]
(c4-2 / multi-sentence
      :snt1 (c4-15 / say-01
                   :ARG0 (c4-8 / i)
                   :ARG1 (c4-3 / block-01
                               :ARG0 (c4-10 / person
                                            :name (c4-9 / name
                                                        :op1 "Max")
                                            :mod (c4-11 / dear))
                               :ARG1-of (c4-12 / cause-01
                                               :ARG0 (c4-16 / amr-unknown)))
                   :ARG2 c4-10)
      :snt2 (c4-13 / baffle-01
                   :ARG1 (c4-4 / she)
                   :degree (c4-5 / quite)
                   :ARG1-of (c4-14 / cause-01
                                   :ARG0 (c4-7 / amr-unknown)))
      :snt3 (c4-0 / wonder-01
                  :ARG0 (c4-1 / she)
                  :ARG1 (c4-6 / event)))

# ::snt source?
# ::tokens ["source", "?"]
# ::lemmas ["source", "?"]
(c5-0 / source
      :polarity (c5-1 / amr-unknown))

# ::snt i thought America was a place you could protest without hindrence or fear. So much for your land of the free.
# ::tokens ["i", "thought", "America", "was", "a", "place", "you", "could", "protest", "without", "hindrence", "or", "fear", ".", "So", "much", "for", "your", "land", "of", "the", "free", "."]
# ::lemmas ["i", "think", "America", "be", "a", "place", "you", "could", "protest", "without", "hindrence", "or", "fear", ".", "so", "much", "for", "your", "land", "of", "the", "free", "."]
(c6-3 / multi-sentence
      :snt1 (c6-16 / think-01
                   :ARG0 (c6-7 / i)
                   :ARG1 (c6-10 / place
                                :domain (c6-12 / country
                                               :name (c6-9 / name
                                                           :op1 "America"))
                                :ARG1-of (c6-17 / protest-01
                                                :ARG0 (c6-1 / you)
                                                :ARG1-of (c6-5 / possible-01)
                                                :manner (c6-6 / or
                                                              :op1 (c6-0 / hinder-01
                                                                         :ARG0 c6-1
                                                                         :polarity -)
                                                              :op2 (c6-2 / fear-01
                                                                         :ARG0 c6-1
                                                                         :polarity -)))))
      :snt2 (c6-11 / much
                   :degree (c6-14 / so)
                   :topic (c6-4 / land
                                :poss (c6-13 / you)
                                :poss (c6-15 / person
                                             :ARG1-of (c6-8 / free-04)))))

# ::snt I don't think he meant too, I think he went to scare the kid and just couldn't correct at the last
# ::tokens ["I", "do", "n't", "think", "he", "meant", "too", ",", "I", "think", "he", "went", "to", "scare", "the", "kid", "and", "just", "could", "n't", "correct", "at", "the", "last"]
# ::lemmas ["i", "do", "not", "think", "he", "mean", "too", ",", "i", "think", "he", "go", "to", "scare", "the", "kid", "and", "just", "could", "not", "correct", "at", "the", "last"]
(c7-14 / and
       :op1 (c7-13 / think-01
                   :ARG0 (c7-4 / i)
                   :ARG1 (c7-2 / mean-02
                               :ARG0 (c7-0 / he)
                               :mod (c7-11 / too))
                   :polarity -)
       :op2 (c7-6 / think-01
                  :ARG0 c7-4
                  :ARG1 (c7-3 / and
                              :op1 (c7-10 / go-02
                                          :ARG0 c7-0
                                          :purpose (c7-12 / scare-01
                                                          :ARG0 c7-0
                                                          :ARG1 (c7-5 / kid)))
                              :op2 (c7-7 / possible-01
                                         :ARG1 (c7-9 / correct-01
                                                     :ARG0 c7-0
                                                     :time (c7-8 / at-last))
                                         :mod (c7-1 / just)
                                         :polarity -))))

# ::snt minute. Still doesn't look good for him. Not with his temper on and off track. I loath that man!
# ::tokens ["minute", ".", "Still", "does", "n't", "look", "good", "for", "him", ".", "Not", "with", "his", "temper", "on", "and", "off", "track", ".", "I", "loath", "that", "man", "!"]
# ::lemmas ["minute", ".", "still", "do", "not", "look", "good", "for", "he", ".", "not", "with", "his", "temper", "on", "and", "off", "track", ".", "i", "loath", "that", "man", "!"]
(c8-2 / multi-sentence
      :snt1 (c8-13 / temporal-quantity
                   :unit (c8-7 / minute)
                   :quant 1)
      :snt2 (c8-1 / look-02
                  :ARG1 (c8-10 / good-02)
                  :ARG2 (c8-0 / he)
                  :mod (c8-12 / still)
                  :polarity -)
      :snt3 (c8-14 / have-polarity-91
                   :ARG1 (c8-11 / temper
                                :poss (c8-6 / he)
                                :mod (c8-8 / track
                                           :polarity -))
                   :ARG2 -)
      :snt4 (c8-9 / loathe-01
                  :ARG0 (c8-5 / i)
                  :ARG1 (c8-3 / man
                              :mod (c8-4 / that))))

# ::snt Thank you
# ::tokens ["Thank", "you"]
# ::lemmas ["thank", "you"]
(c9-1 / thank-01
      :ARG0 (c9-2 / i)
      :ARG1 (c9-0 / you))

# ::snt Illegal to insure illegality! MT : Swat team in have state mandated 'murder insurance' fr lawsuits if they kill anyone.
# ::tokens ["Illegal", "to", "insure", "illegality", "!", "MT", ":", "Swat", "team", "in", "have", "state", "mandated", "'", "murder", "insurance", "'", "fr", "lawsuits", "if", "they", "kill", "anyone", "."]
# ::lemmas ["illegal", "to", "insure", "illegality", "!", "MT", ":", "Swat", "team", "in", "have", "state", "mandate", "'", "murder", "insurance", "'", "fr", "lawsuit", "if", "they", "kill", "anyone", "."]
(c10-2 / multi-sentence
       :snt1 (c10-1 / legal-02
                    :ARG1 (c10-7 / insure-02)
                    :polarity -)
       :snt2 (c10-13 / say-01
                     :ARG0 (c10-12 / i)
                     :ARG1 (c10-0 / have-03
                                  :ARG0 (c10-14 / team
                                                :mod (c10-6 / swamp))
                                  :ARG1 (c10-3 / insure-02
                                               :ARG1 (c10-10 / murder-01)
                                               :ARG1-of (c10-4 / mandate-01
                                                               :ARG0 (c10-5 / state)))
                                  :condition (c10-8 / kill-01
                                                    :ARG0 c10-14
                                                    :ARG1 (c10-15 / anyone)))
                     :ARG2 (c10-11 / publication
                                   :name (c10-9 / name
                                                :op1 "MT"))))

# ::snt Wow : Swat team in have state mandated 'murder insurance' to protect them from lawsuits if they kill anyone.
# ::tokens ["Wow", ":", "Swat", "team", "in", "have", "state", "mandated", "'", "murder", "insurance", "'", "to", "protect", "them", "from", "lawsuits", "if", "they", "kill", "anyone", "."]
# ::lemmas ["wow", ":", "Swat", "team", "in", "have", "state", "mandate", "'", "murder", "insurance", "'", "to", "protect", "they", "from", "lawsuit", "if", "they", "kill", "anyone", "."]
(c11-0 / have-03
       :ARG0 (c11-10 / team
                     :mod (c11-9 / swamp)
                     :location (c11-4 / state))
       :ARG1 (c11-5 / insure-02
                    :ARG1 (c11-3 / murder-01)
                    :ARG3 c11-10
                    :ARG1-of (c11-7 / mandate-01
                                    :ARG0 c11-4))
       :purpose (c11-8 / protect-01
                       :ARG0 c11-10
                       :ARG1 c11-10
                       :ARG2 (c11-2 / sue-02
                                    :ARG2 c11-10)
                       :condition (c11-6 / kill-01
                                         :ARG0 c11-10
                                         :ARG1 (c11-11 / anyone)))
       :mod (c11-1 / wow
                   :mode expressive))

# ::snt Of course they'll go bankrupt, only to be bailed out. Rinse. Repeat.
# ::tokens ["Of", "course", "they", "'ll", "go", "bankrupt", ",", "only", "to", "be", "bailed", "out", ".", "Rinse", ".", "Repeat", "."]
# ::lemmas ["of", "course", "they", "'ll", "go", "bankrupt", ",", "only", "to", "be", "bail", "out", ".", "rinse", ".", "repeat", "."]
(c12-1 / multi-sentence
       :snt1 (c12-2 / bankrupt-01
                    :ARG1 (c12-8 / they)
                    :mod (c12-3 / of-course)
                    :ARG0-of (c12-6 / cause-01
                                    :ARG1 (c12-7 / bail-out-02
                                                 :ARG1 c12-8
                                                 :mod (c12-0 / only))))
       :snt2 (c12-5 / Rinse-01)
       :snt3 (c12-4 / repeat-01))

# ::snt WHAT
# ::tokens ["WHAT"]
# ::lemmas ["what"]
(c13-0 / amr-unknown)

# ::snt same as that asshole who can kill someone and still enjoy life. Rich above the rules
# ::tokens ["same", "as", "that", "asshole", "who", "can", "kill", "someone", "and", "still", "enjoy", "life", ".", "Rich", "above", "the", "rules"]
# ::lemmas ["same", "as", "that", "asshole", "who", "can", "kill", "someone", "and", "still", "enjoy", "life", ".", "rich", "above", "the", "rule"]
(c14-1 / multi-sentence
       :snt1 (c14-10 / same-01
                     :ARG2 (c14-12 / asshole
                                   :mod (c14-11 / that)
                                   :ARG0-of (c14-6 / kill-01
                                                   :ARG1 (c14-3 / someone)
                                                   :ARG1-of (c14-8 / possible-01))
                                   :ARG0-of (c14-4 / enjoy-01
                                                   :ARG1 (c14-0 / life)
                                                   :mod (c14-2 / still))))
       :snt2 (c14-9 / rich
                    :manner (c14-5 / above
                                   :op1 (c14-7 / rule))))

# ::snt I'd call that "Pre-meditation"...
# ::tokens ["I", "'d", "call", "that", "\"", "Pre", "-", "meditation", "\"", "..."]
# ::lemmas ["i", "would", "call", "that", "\"", "pre", "-", "meditation", "\"", "..."]
(c15-2 / call-01
       :ARG0 (c15-3 / i)
       :ARG1 (c15-0 / that)
       :ARG2 (c15-1 / prevent-01))

# ::snt Swat team in have state mandated 'murder insurance' to protect them from lawsuits if they kill anyone.
# ::tokens ["Swat", "team", "in", "have", "state", "mandated", "'", "murder", "insurance", "'", "to", "protect", "them", "from", "lawsuits", "if", "they", "kill", "anyone", "."]
# ::lemmas ["Swat", "team", "in", "have", "state", "mandate", "'", "murder", "insurance", "'", "to", "protect", "they", "from", "lawsuit", "if", "they", "kill", "anyone", "."]
(c16-0 / have-03
       :ARG0 (c16-10 / team
                     :mod (c16-9 / sport)
                     :location (c16-4 / state))
       :ARG1 (c16-5 / insure-02
                    :ARG1 (c16-2 / murder-01)
                    :ARG3 c16-10
                    :ARG1-of (c16-7 / mandate-01
                                    :ARG0 (c16-1 / state))
                    :purpose (c16-8 / protect-01
                                    :ARG0 c16-10
                                    :ARG1 c16-10
                                    :ARG2 (c16-3 / sue-02
                                                 :ARG2 (c16-6 / kill-01
                                                              :ARG0 c16-10
                                                              :ARG1 (c16-11 / anyone))))))

# ::snt (I do, sadly, expect you can)
# ::tokens ["(", "I", "do", ",", "sadly", ",", "expect", "you", "can", ")"]
# ::lemmas ["(", "i", "do", ",", "sadly", ",", "expect", "you", "can", ")"]
(c17-1 / expect-01
       :ARG0 (c17-2 / i)
       :ARG1 (c17-3 / possible-01
                    :ARG1 (c17-4 / do-02
                                 :ARG0 (c17-0 / you)))
       :ARG0-of (c17-5 / sad-02))

# ::snt Speechless.
# ::tokens ["Speechless", "."]
# ::lemmas ["Speechless", "."]
(c18-0 / speak-01
       :polarity -)

# ::snt shit! You replied! Nice.Can see a change though. Those that said "get your tin-foil hat on" for years now going to same milliners
# ::tokens ["shit", "!", "You", "replied", "!", "Nice", ".", "Can", "see", "a", "change", "though", ".", "Those", "that", "said", "\"", "get", "your", "tin", "-", "foil", "hat", "on", "\"", "for", "years", "now", "going", "to", "same", "milliners"]
# ::lemmas ["shit", "!", "you", "reply", "!", "nice", ".", "can", "see", "a", "change", "though", ".", "those", "that", "say", "\"", "get", "your", "tin", "-", "foil", "hat", "on", "\"", "for", "years", "now", "go", "to", "same", "milliner"]
(c19-0 / multi-sentence
       :snt1 (c19-6 / and
                    :op1 (c19-3 / shit-01)
                    :op2 (c19-14 / reply-01
                                 :ARG0 (c19-18 / you)))
       :snt2 (c19-12 / nice-01)
       :snt3 (c19-7 / have-concession-91
                    :ARG1 (c19-2 / possible-01
                                 :ARG1 (c19-11 / see-01
                                               :ARG1 (c19-21 / change-01))))
       :snt4 (c19-15 / go-10
                     :ARG1 (c19-4 / person
                                  :ARG0-of (c19-13 / milliner-01)
                                  :ARG1-of (c19-19 / same-01))
                     :ARG2 (c19-9 / person
                                  :ARG0-of (c19-10 / say-01
                                                   :ARG1 (c19-16 / put-on-08
                                                                 :ARG0 (c19-22 / you)
                                                                 :ARG1 (c19-5 / hat
                                                                              :consist-of (c19-23 / tin-foil)
                                                                              :poss c19-22))))
                     :duration (c19-8 / multiple
                                      :op1 (c19-17 / temporal-quantity
                                                   :unit (c19-1 / year)
                                                   :quant 1))
                     :time (c19-20 / now)))

# ::snt Murder insurance? Its not like getting away with murder wasn't enough already, now police have murder insurance?!?!?!?
# ::tokens ["Murder", "insurance", "?", "Its", "not", "like", "getting", "away", "with", "murder", "was", "n't", "enough", "already", ",", "now", "police", "have", "murder", "insurance", "?", "!", "?", "!", "?", "!", "?"]
# ::lemmas ["murder", "insurance", "?", "its", "not", "like", "get", "away", "with", "murder", "be", "not", "enough", "already", ",", "now", "police", "have", "murder", "insurance", "?", "!", "?", "!", "?", "!", "?"]
(c20-2 / multi-sentence
       :snt1 (c20-7 / insure-02
                    :ARG1 (c20-10 / murder-01)
                    :polarity (c20-17 / amr-unknown))
       :snt2 (c20-11 / resemble-01
                     :ARG1 (c20-13 / it)
                     :ARG2 (c20-6 / and
                                  :op1 (c20-14 / get-away-08
                                               :ARG1 (c20-1 / murder-01)
                                               :ARG1-of (c20-0 / have-quant-91
                                                               :ARG3 (c20-5 / enough)
                                                               :time (c20-9 / already)
                                                               :polarity -))
                                  :op2 (c20-3 / have-03
                                              :ARG0 (c20-12 / police)
                                              :ARG1 (c20-4 / insure-02
                                                           :ARG1 (c20-15 / murder-01))
                                              :time (c20-8 / now)
                                              :polarity (c20-16 / amr-unknown)))
                     :polarity -))

# ::snt serious? As in provable? (As in, ain't no one gonna believe this unless you do!) x
# ::tokens ["serious", "?", "As", "in", "provable", "?", "(", "As", "in", ",", "ai", "n't", "no", "one", "gon", "na", "believe", "this", "unless", "you", "do", "!", ")", "x"]
# ::lemmas ["serious", "?", "as", "in", "provable", "?", "(", "as", "in", ",", "be", "not", "no", "one", "going", "to", "believe", "this", "unless", "you", "do", "!", ")", "x"]
(c21-1 / multi-sentence
       :snt1 (c21-8 / serious-01
                    :polarity (c21-10 / amr-unknown))
       :snt2 (c21-6 / resemble-01
                    :ARG2 (c21-5 / possible-01
                                 :polarity (c21-3 / amr-unknown)
                                 :ARG1 (c21-2 / believe-01
                                              :ARG0 (c21-4 / no-one)
                                              :ARG1 (c21-9 / this))
                                 :condition (c21-7 / believe-01
                                                   :ARG0 (c21-0 / you)
                                                   :ARG1 c21-9
                                                   :polarity -))))

# ::snt Swat "murder insurance? Doesn't that make every1 wonder how often they'v been knowingly murdering ppl?
# ::tokens ["Swat", "\"", "murder", "insurance", "?", "Does", "n't", "that", "make", "every1", "wonder", "how", "often", "they'v", "been", "knowingly", "murdering", "ppl", "?"]
# ::lemmas ["Swat", "\"", "murder", "insurance", "?", "do", "not", "that", "make", "every1", "wonder", "how", "often", "they'v", "been", "knowingly", "murder", "ppl", "?"]
(c22-2 / multi-sentence
       :snt1 (c22-13 / swat
                     :topic (c22-5 / insure-02
                                   :ARG3 (c22-8 / murder-01))
                     :polarity (c22-15 / amr-unknown))
       :snt2 (c22-1 / make-02
                    :ARG0 (c22-14 / that)
                    :ARG1 (c22-0 / wonder-01
                                 :ARG0 (c22-3 / every
                                              :ARG1-of (c22-11 / include-91
                                                               :ARG2 (c22-12 / they)))
                                 :ARG1 (c22-7 / thing
                                              :frequency-of (c22-9 / murder-01
                                                                   :ARG0 c22-12
                                                                   :ARG1 (c22-10 / person
                                                                                 :quant 1)
                                                                   :manner (c22-6 / know-01
                                                                                  :ARG0 c22-12)))
                                 :polarity (c22-4 / amr-unknown))))

# ::snt surely they're going to bankrupt the insurance company. They love killing!
# ::tokens ["surely", "they", "'re", "going", "to", "bankrupt", "the", "insurance", "company", ".", "They", "love", "killing", "!"]
# ::lemmas ["surely", "they", "be", "go", "to", "bankrupt", "the", "insurance", "company", ".", "they", "love", "kill", "!"]
(c23-1 / multi-sentence
       :snt1 (c23-2 / bankrupt-01
                    :ARG0 (c23-8 / they)
                    :ARG1 (c23-5 / company
                                 :ARG0-of (c23-3 / insure-02))
                    :ARG1-of (c23-7 / sure-02))
       :snt2 (c23-0 / love-01
                    :ARG0 (c23-6 / they)
                    :ARG1 (c23-4 / kill-01
                                 :ARG0 c23-6)))
