# ::snt As was expected. The French method neither mess about or waste money when facts clear moto when trouble kicks off, leave the area
# ::tokens ["As", "was", "expected", ".", "The", "French", "method", "neither", "mess", "about", "or", "waste", "money", "when", "facts", "clear", "moto", "when", "trouble", "kicks", "off", ",", "leave", "the", "area"]
# ::lemmas ["as", "be", "expect", ".", "the", "French", "method", "neither", "mess", "about", "or", "waste", "money", "when", "fact", "clear", "moto", "when", "trouble", "kick", "off", ",", "leave", "the", "area"]
(c1-2 / multi-sentence
      :snt1 (c1-9 / resemble-01
                  :ARG2 (c1-6 / expect-01))
      :snt2 (c1-5 / or
                  :op1 (c1-8 / mess-01
                             :ARG0 (c1-1 / method
                                         :mod (c1-10 / country
                                                     :name (c1-7 / name
                                                                 :op1 "France")))
                             :ARG1 (c1-11 / money)
                             :polarity -)
                  :op2 (c1-0 / waste-01
                             :ARG0 c1-1
                             :ARG1 c1-11
                             :polarity -)
                  :time (c1-12 / clear-01
                               :ARG0 (c1-3 / fact)
                               :ARG1 (c1-13 / moto)
                               :time (c1-15 / kick-off-04
                                            :ARG1 (c1-14 / trouble-05)))
                  :op3 (c1-4 / leave-11
                             :ARG0 c1-1
                             :ARG1 (c1-16 / area)
                             :polarity -)))

# ::snt Bravo to the French Police!
# ::tokens ["Bravo", "to", "the", "French", "Police", "!"]
# ::lemmas ["Bravo", "to", "the", "French", "Police", "!"]
(c3-3 / bravo
      :beneficiary (c3-1 / police
                         :mod (c3-2 / country
                                    :name (c3-0 / name
                                                :op1 "France")))
      :mode expressive)

# ::snt conspiracy +dead+ case close .. christian and muslim wil knw be fighting. i just knew something like a JFK thing might happen here
# ::tokens ["conspiracy", "+", "dead+", "case", "close", "..", "christian", "and", "muslim", "wil", "knw", "be", "fighting", ".", "i", "just", "knew", "something", "like", "a", "JFK", "thing", "might", "happen", "here"]
# ::lemmas ["conspiracy", "+", "dead+", "case", "close", "..", "christian", "and", "muslim", "wil", "knw", "be", "fight", ".", "i", "just", "know", "something", "like", "a", "JFK", "thing", "might", "happen", "here"]
(c4-1 / multi-sentence
      :snt1 (c4-21 / close-03
                   :ARG1 (c4-5 / case-03
                               :ARG1 (c4-8 / and
                                           :op1 (c4-17 / conspire-01)
                                           :op2 (c4-6 / die-01))))
      :snt2 (c4-10 / fight-01
                   :ARG0 (c4-15 / and
                                :op1 (c4-14 / religious-group
                                            :name (c4-13 / name
                                                         :op1 "Christian"))
                                :op2 (c4-2 / religious-group
                                           :name (c4-20 / name
                                                        :op1 "Islam")))
                   :ARG1-of (c4-19 / cause-01
                                   :ARG0 (c4-4 / possible-01
                                               :ARG1 c4-10)))
      :snt3 (c4-18 / know-01
                   :ARG0 (c4-16 / i)
                   :ARG1 (c4-7 / possible-01
                               :ARG1 (c4-12 / event
                                            :mod (c4-11 / person
                                                        :name (c4-3 / name
                                                                    :op1 "JFK"))
                                            :location (c4-9 / here)))
                   :mod (c4-0 / just)))

# ::snt thts gud
# ::tokens ["thts", "gud"]
# ::lemmas ["tht", "gud"]
(c5-1 / gud
      :poss (c5-0 / they))

# ::snt ": Charlie Hebdo: appears that Charlie Hebdo suspects have been killed! " Finally
# ::tokens ["\"", ":", "Charlie", "Hebdo", ":", "appears", "that", "Charlie", "Hebdo", "suspects", "have", "been", "killed", "!", "\"", "Finally"]
# ::lemmas ["\"", ":", "Charlie", "Hebdo", ":", "appear", "that", "Charlie", "Hebdo", "suspect", "have", "be", "kill", "!", "\"", "finally"]
(c6-1 / multi-sentence
      :snt1 (c6-3 / publication
                  :name (c6-2 / name
                              :op1 "Charlie"
                              :op2 " Hebdo"))
      :snt2 (c6-7 / appear-02
                  :ARG1 (c6-5 / kill-01
                              :ARG1 (c6-6 / person
                                          :ARG2-of (c6-4 / suspect-01
                                                         :ARG1 c6-3))))
      :snt3 (c6-0 / final))

# ::snt Damn RT : Charlie Hebdo: appears that Charlie Hebdo suspects have been killed live updates
# ::tokens ["Damn", "RT", ":", "Charlie", "Hebdo", ":", "appears", "that", "Charlie", "Hebdo", "suspects", "have", "been", "killed", "live", "updates"]
# ::lemmas ["damn", "RT", ":", "Charlie", "Hebdo", ":", "appear", "that", "Charlie", "Hebdo", "suspect", "have", "be", "kill", "live", "update"]
(c7-11 / and
       :op1 (c7-6 / publication
                  :name (c7-4 / name
                              :op1 "RT")
                  :mod (c7-7 / damn
                             :mode expressive))
       :op2 (c7-3 / appear-02
                  :ARG1 (c7-9 / kill-01
                              :ARG1 (c7-10 / person
                                           :ARG2-of (c7-8 / suspect-01
                                                          :ARG1 (c7-1 / magazine
                                                                      :name (c7-5 / name
                                                                                  :op1 "Charlie"
                                                                                  :op2 "Chi Hebdo"))))
                              :manner (c7-2 / update-02
                                            :manner (c7-0 / live)))))

# ::snt is it just me wonderin why in past yrs all suspects involved in Islamic attack:Boston,Sydney r never captured alive?
# ::tokens ["is", "it", "just", "me", "wonderin", "why", "in", "past", "yrs", "all", "suspects", "involved", "in", "Islamic", "attack", ":", "Boston", ",", "Sydney", "r", "never", "captured", "alive", "?"]
# ::lemmas ["be", "it", "just", "i", "wonderin", "why", "in", "past", "you", "all", "suspect", "involve", "in", "Islamic", "attack", ":", "Boston", ",", "Sydney", "r", "never", "capture", "alive", "?"]
(c8-11 / wonder-01
       :ARG0 (c8-13 / i)
       :ARG1 (c8-20 / thing
                    :ARG0-of (c8-18 / cause-01
                                    :ARG1 (c8-3 / capture-01
                                                :ARG1 (c8-2 / person
                                                            :ARG2-of (c8-4 / suspect-01)
                                                            :mod (c8-5 / all)
                                                            :ARG1-of (c8-14 / involve-01
                                                                            :ARG2 (c8-12 / attack-01
                                                                                         :ARG0 (c8-10 / religious-group
                                                                                                      :name (c8-8 / name
                                                                                                                  :op1 "Islam"))))
                                                            :example (c8-9 / and
                                                                           :op1 (c8-15 / city
                                                                                       :name (c8-17 / name
                                                                                                    :op1 "Boston"))
                                                                           :op2 (c8-16 / city
                                                                                       :name (c8-1 / name
                                                                                                   :op1 "Sydney"))))
                                                :time (c8-7 / ever)
                                                :manner (c8-6 / live-01
                                                              :ARG0 c8-2)
                                                :polarity -)))
       :polarity (c8-19 / amr-unknown)
       :mod (c8-0 / just))
