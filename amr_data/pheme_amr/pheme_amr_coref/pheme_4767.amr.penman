# ::snt I found your tweet subtly imprudent and irritating,must you mention muslim which should uncalled for.
# ::tokens ["I", "found", "your", "tweet", "subtly", "imprudent", "and", "irritating", ",", "must", "you", "mention", "muslim", "which", "should", "uncalled", "for", "."]
# ::lemmas ["i", "find", "your", "tweet", "subtly", "imprudent", "and", "irritate", ",", "must", "you", "mention", "muslim", "which", "should", "uncalled", "for", "."]
(c1-2 / multi-sentence
      :snt1 (c1-1 / find-02
                  :ARG0 (c1-5 / i)
                  :ARG1 (c1-16 / and
                               :op1 (c1-11 / imprudent
                                           :domain (c1-15 / tweet-01
                                                          :ARG0 (c1-0 / you))
                                           :manner (c1-14 / subtle))
                               :op2 (c1-3 / irritate-01
                                          :ARG0 c1-15)))
      :snt2 (c1-4 / obligate-01
                  :ARG1 (c1-13 / you)
                  :ARG2 (c1-8 / mention-01
                              :ARG0 c1-13
                              :ARG1 (c1-9 / person
                                          :mod (c1-10 / religious-group
                                                      :name (c1-7 / name
                                                                  :op1 "Islam"))
                                          :ARG1-of (c1-12 / call-01
                                                          :ARG1-of (c1-6 / recommend-01)
                                                          :polarity -)))))

# ::snt what's prudent? Abductions, terror tunnels and beheadings?
# ::tokens ["what", "'s", "prudent", "?", "Abductions", ",", "terror", "tunnels", "and", "beheadings", "?"]
# ::lemmas ["what", "be", "prudent", "?", "abduction", ",", "terror", "tunnel", "and", "beheading", "?"]
(c2-0 / multi-sentence
      :snt1 (c2-4 / prudent
                  :domain (c2-7 / amr-unknown))
      :snt2 (c2-2 / and
                  :op1 (c2-3 / abduct-01)
                  :op2 (c2-6 / tunnel
                             :purpose (c2-5 / terror-02))
                  :op3 (c2-1 / behead-01)))

# ::snt why dont you call that 'called' to an 'is'
# ::tokens ["why", "do", "nt", "you", "call", "that", "'", "called", "'", "to", "an", "'", "is", "'"]
# ::lemmas ["why", "do", "not", "you", "call", "that", "'", "call", "'", "to", "an", "'", "be", "'"]
(c3-2 / call-01
      :ARG0 (c3-0 / you)
      :ARG1 (c3-4 / that)
      :ARG2 (c3-3 / string-entity
                  :value "is")
      :ARG1-of (c3-1 / cause-01
                     :ARG0 (c3-5 / amr-unknown))
      :polarity -)

# ::snt Sercastically xtian promote peace,who is kiling ppl in Iraq,Syria by bomb MUSLIM?End of the Discusion.
# ::tokens ["Sercastically", "xtian", "promote", "peace", ",", "who", "is", "kiling", "ppl", "in", "Iraq", ",", "Syria", "by", "bomb", "MUSLIM?End", "of", "the", "Discusion", "."]
# ::lemmas ["sercastically", "xtian", "promote", "peace", ",", "who", "be", "kile", "ppl", "in", "Iraq", ",", "Syria", "by", "bomb", "MUSLIM?End", "of", "the", "Discusion", "."]
(c4-0 / multi-sentence
      :snt1 (c4-3 / promote-02
                  :ARG0 (c4-7 / person
                              :mod (c4-20 / country
                                          :name (c4-13 / name
                                                       :op1 "Asia")))
                  :ARG1 (c4-9 / peace)
                  :manner (c4-6 / superficial))
      :snt2 (c4-17 / iling-03
                   :ARG0 (c4-15 / person
                                :mod (c4-14 / religious-group
                                            :name (c4-19 / name
                                                         :op1 "Islam")))
                   :ARG1 (c4-11 / person
                                :location (c4-8 / and
                                                :op1 (c4-4 / country
                                                           :name (c4-1 / name
                                                                       :op1 "Iraq"))
                                                :op2 (c4-18 / country
                                                            :name (c4-2 / name
                                                                        :op1 "Syria"))))
                   :manner (c4-10 / bomb-01))
      :snt3 (c4-12 / end-01
                   :ARG1 (c4-5 / divide-02))
      :polarity (c4-16 / amr-unknown))

# ::snt Come in every shape size true character of humanity at it's very finest when others need them most Thank God for courage&gt;&gt;&gt;
# ::tokens ["Come", "in", "every", "shape", "size", "true", "character", "of", "humanity", "at", "it", "'s", "very", "finest", "when", "others", "need", "them", "most", "Thank", "God", "for", "courage&gt;&gt;&gt", ";"]
# ::lemmas ["come", "in", "every", "shape", "size", "true", "character", "of", "humanity", "at", "it", "be", "very", "fine", "when", "other", "need", "they", "most", "thank", "God", "for", "courage&gt;&gt;&gt", ";"]
(c5-0 / multi-sentence
      :snt1 (c5-17 / come-01
                   :ARG1 (c5-3 / character
                               :poss (c5-7 / humanity)
                               :ARG1-of (c5-19 / true-01)
                               :mod (c5-5 / size
                                          :mod (c5-10 / every))))
      :snt2 (c5-6 / have-degree-91
                  :ARG1 c5-3
                  :ARG2 (c5-8 / fine-03
                              :ARG1 c5-3
                              :time (c5-11 / need-01
                                           :ARG0 (c5-15 / other)
                                           :ARG1 c5-3
                                           :ARG2-of (c5-1 / have-degree-91
                                                          :ARG1 c5-3
                                                          :ARG3 (c5-12 / most))))
                  :ARG3 (c5-9 / most
                              :degree (c5-2 / very)))
      :snt3 (c5-18 / thank-01
                   :ARG0 (c5-13 / i)
                   :ARG1 (c5-4 / person
                               :name (c5-16 / name
                                            :op1 "God"))
                   :ARG2 (c5-14 / courage)))

# ::snt What a hero!!! Salute! Sir
# ::tokens ["What", "a", "hero", "!", "!", "!", "Salute", "!", "Sir"]
# ::lemmas ["what", "a", "hero", "!", "!", "!", "salute", "!", "Sir"]
(c6-2 / multi-sentence
      :snt1 (c6-0 / hero
                  :degree (c6-4 / so))
      :snt2 (c6-3 / salute-01)
      :snt3 (c6-1 / sir))

# ::snt Here he is Canada's Hero.
# ::tokens ["Here", "he", "is", "Canada", "'s", "Hero", "."]
# ::lemmas ["here", "he", "be", "Canada", "'s", "Hero", "."]
(c7-0 / hero
      :domain (c7-4 / he)
      :location (c7-2 / here)
      :mod (c7-3 / country
                 :name (c7-1 / name
                             :op1 "Canada")))

# ::snt lol. Under stress and hit your target and not innocents? Damn tough.
# ::tokens ["lol", ".", "Under", "stress", "and", "hit", "your", "target", "and", "not", "innocents", "?", "Damn", "tough", "."]
# ::lemmas ["lol", ".", "under", "stress", "and", "hit", "your", "target", "and", "not", "innocent", "?", "damn", "tough", "."]
(c8-2 / multi-sentence
      :snt1 (c8-12 / and
                   :op1 (c8-10 / stress-02
                               :ARG1 (c8-1 / you))
                   :op2 (c8-0 / hit-01
                              :ARG0 c8-1
                              :ARG1 (c8-11 / target
                                           :poss c8-1
                                           :ARG1-of (c8-4 / instead-of-91
                                                          :ARG2 (c8-6 / person
                                                                      :ARG1-of (c8-8 / innocent-01)))))
                   :polarity (c8-3 / amr-unknown))
      :snt2 (c8-9 / tough-02
                  :degree (c8-7 / damn)
                  :polarity (c8-5 / amr-unknown)))

# ::snt stupid comment
# ::tokens ["stupid", "comment"]
# ::lemmas ["stupid", "comment"]
(c9-1 / comment-01
      :mod (c9-0 / stupid))

# ::snt a true hero
# ::tokens ["a", "true", "hero"]
# ::lemmas ["a", "true", "hero"]
(c10-0 / hero
       :ARG1-of (c10-1 / true-01))

# ::snt top bloke!
# ::tokens ["top", "bloke", "!"]
# ::lemmas ["top", "bloke", "!"]
(c11-1 / bloke
       :mod (c11-0 / top)
       :mode expressive)

# ::snt Guess who could it be . The religion of peace , seculars will now shout
# ::tokens ["Guess", "who", "could", "it", "be", ".", "The", "religion", "of", "peace", ",", "seculars", "will", "now", "shout"]
# ::lemmas ["guess", "who", "could", "it", "be", ".", "the", "religion", "of", "peace", ",", "secular", "will", "now", "shout"]
(c12-1 / multi-sentence
       :snt1 (c12-7 / guess-01
                    :ARG0 (c12-0 / you)
                    :ARG1 (c12-5 / person
                                 :ARG1-of (c12-9 / possible-01
                                                 :ARG1 c12-9))
                    :mode imperative)
       :snt2 (c12-8 / shout-01
                    :ARG0 (c12-6 / religion
                                 :topic (c12-2 / peace))
                    :time (c12-4 / now)
                    :mod (c12-3 / secular)))

# ::snt Britain has to be on alert. Too many muslims in the country
# ::tokens ["Britain", "has", "to", "be", "on", "alert", ".", "Too", "many", "muslims", "in", "the", "country"]
# ::lemmas ["Britain", "have", "to", "be", "on", "alert", ".", "too", "many", "muslims", "in", "the", "country"]
(c13-1 / multi-sentence
       :snt1 (c13-3 / obligate-01
                    :ARG2 (c13-12 / alert-01
                                  :ARG1 (c13-8 / country
                                               :name (c13-4 / name
                                                            :op1 "Britain"))))
       :snt2 (c13-2 / be-located-at-91
                    :ARG1 (c13-6 / person
                                 :mod (c13-7 / religious-group
                                             :name (c13-5 / name
                                                          :op1 "Islam"))
                                 :ARG1-of (c13-0 / have-quant-91
                                                 :ARG2 (c13-9 / many)
                                                 :ARG3 (c13-11 / too)))
                    :ARG2 (c13-10 / country)))

# ::snt Idiot. Very hard to do knowing you could take someone's life. All credit to him.
# ::tokens ["Idiot", ".", "Very", "hard", "to", "do", "knowing", "you", "could", "take", "someone", "'s", "life", ".", "All", "credit", "to", "him", "."]
# ::lemmas ["Idiot", ".", "very", "hard", "to", "do", "know", "you", "could", "take", "someone", "'s", "life", ".", "all", "credit", "to", "he", "."]
(c14-3 / multi-sentence
       :snt1 (c14-4 / idiot)
       :snt2 (c14-0 / hard-02
                    :ARG1 (c14-7 / do-02
                                 :ARG1 (c14-11 / know-01
                                               :ARG0 (c14-1 / you)
                                               :ARG1 (c14-6 / possible-01
                                                            :ARG1 (c14-9 / take-01
                                                                         :ARG0 c14-1
                                                                         :ARG1 (c14-2 / life
                                                                                      :poss (c14-12 / someone))))))
                    :degree (c14-5 / very))
       :snt3 (c14-8 / credit-01
                    :ARG1 (c14-13 / he)
                    :mod (c14-10 / all)))

# ::snt That's for sure! He should be given a raise in his pension for this one.
# ::tokens ["That", "'s", "for", "sure", "!", "He", "should", "be", "given", "a", "raise", "in", "his", "pension", "for", "this", "one", "."]
# ::lemmas ["that", "be", "for", "sure", "!", "he", "should", "be", "give", "a", "raise", "in", "his", "pension", "for", "this", "one", "."]
(c15-1 / multi-sentence
       :snt1 (c15-9 / sure-02
                    :ARG1 (c15-10 / that))
       :snt2 (c15-5 / recommend-01
                    :ARG1 (c15-7 / give-01
                                 :ARG1 (c15-3 / raise-01
                                              :ARG1 (c15-4 / pension
                                                           :poss (c15-0 / he
                                                                        :ARG2-of c15-7)))
                                 :ARG1-of (c15-6 / cause-01
                                                 :ARG0 (c15-2 / one
                                                              :mod (c15-8 / this))))))

# ::snt You guys are not ready for what's happening in the world. How do you let a gunman reach your Parliament?
# ::tokens ["You", "guys", "are", "not", "ready", "for", "what", "'s", "happening", "in", "the", "world", ".", "How", "do", "you", "let", "a", "gunman", "reach", "your", "Parliament", "?"]
# ::lemmas ["you", "guy", "be", "not", "ready", "for", "what", "be", "happen", "in", "the", "world", ".", "how", "do", "you", "let", "a", "gunman", "reach", "your", "Parliament", "?"]
(c16-3 / multi-sentence
       :snt1 (c16-8 / ready-02
                    :ARG1 (c16-10 / guy
                                  :mod (c16-0 / you))
                    :ARG2 (c16-4 / event
                                 :location (c16-1 / world))
                    :polarity -)
       :snt2 (c16-2 / let-01
                    :ARG0 (c16-11 / you)
                    :ARG1 (c16-5 / reach-01
                                 :ARG0 (c16-9 / gunman)
                                 :ARG1 (c16-6 / government-organization
                                              :name (c16-7 / name
                                                           :op1 "Parliament")
                                              :poss c16-11))
                    :manner (c16-12 / amr-unknown)))

# ::snt Just like that.
# ::tokens ["Just", "like", "that", "."]
# ::lemmas ["just", "like", "that", "."]
(c17-1 / resemble-01
       :ARG2 (c17-2 / that)
       :mod (c17-0 / just))

# ::snt well done. Good thing he had a gun &amp; knew how to use it properly.
# ::tokens ["well", "done", ".", "Good", "thing", "he", "had", "a", "gun", "&", "amp", ";", "knew", "how", "to", "use", "it", "properly", "."]
# ::lemmas ["well", "do", ".", "good", "thing", "he", "have", "a", "gun", "&", "amp", ";", "know", "how", "to", "use", "it", "properly", "."]
(c18-3 / multi-sentence
       :snt1 (c18-7 / do-02
                    :ARG1-of (c18-1 / well-09))
       :snt2 (c18-10 / and
                     :op1 (c18-0 / have-03
                                 :ARG0 (c18-2 / he)
                                 :ARG1 c18-10
                                 :op1 (c18-8 / gun)
                                 :op2 (c18-5 / amp)))
       :op2 (c18-9 / know-03
                   :ARG0 c18-2
                   :ARG1 (c18-4 / use-01
                                :ARG0 c18-2
                                :ARG1 c18-10
                                :manner (c18-6 / proper))))
