# ::snt Where is your master ?!
# ::tokens ["Where", "is", "your", "master", "?", "!"]
# ::lemmas ["where", "be", "your", "master", "?", "!"]
(c1-2 / be-located-at-91
      :ARG1 (c1-3 / person
                  :ARG0-of (c1-1 / master-01
                                 :ARG1 (c1-0 / you)))
      :ARG2 (c1-4 / amr-unknown))

# ::snt oh my god a talking lake.
# ::tokens ["oh", "my", "god", "a", "talking", "lake", "."]
# ::lemmas ["oh", "my", "god", "a", "talking", "lake", "."]
(c2-1 / lake
      :ARG0-of (c2-2 / talk-01)
      :mod (c2-0 / oh-my-god
                 :mode expressive))

# ::snt You won't understand cause you always have been porked from your meat hole
# ::tokens ["You", "wo", "n't", "understand", "cause", "you", "always", "have", "been", "porked", "from", "your", "meat", "hole"]
# ::lemmas ["you", "will", "not", "understand", "cause", "you", "always", "have", "be", "porke", "from", "your", "meat", "hole"]
(c3-5 / cause-01
      :ARG0 (c3-4 / pork-00
                  :ARG1 (c3-1 / you)
                  :source (c3-0 / hole
                                :mod (c3-2 / meat)
                                :poss c3-1)
                  :time (c3-6 / always))
      :ARG1 (c3-3 / understand-01
                  :ARG0 c3-1
                  :polarity -))

# ::snt I blocked that POS, I worked out that he's probably , certainly mentally if not in years.
# ::tokens ["I", "blocked", "that", "POS", ",", "I", "worked", "out", "that", "he", "'s", "probably", ",", "certainly", "mentally", "if", "not", "in", "years", "."]
# ::lemmas ["i", "block", "that", "POS", ",", "i", "work", "out", "that", "he", "be", "probably", ",", "certainly", "mentally", "if", "not", "in", "years", "."]
(c4-13 / and
       :op1 (c4-4 / block-01
                  :ARG0 (c4-6 / i)
                  :ARG1 (c4-7 / person
                              :ARG0-of (c4-12 / post-01
                                              :manner (c4-5 / original))
                              :mod (c4-11 / that)))
       :op2 (c4-0 / work-out-02
                  :ARG0 c4-6
                  :ARG1 (c4-3 / probable
                              :domain (c4-2 / mental
                                            :condition (c4-9 / be-temporally-at-91
                                                             :ARG1 c4-7
                                                             :ARG2 (c4-8 / multiple
                                                                         :op1 (c4-10 / temporal-quantity
                                                                                     :unit (c4-1 / year)
                                                                                     :quant 1))
                                                             :polarity -)))))

# ::snt Dog's ranting
# ::tokens ["Dog", "'s", "ranting"]
# ::lemmas ["Dog", "'s", "ranting"]
(c5-2 / rant-01
      :ARG0 (c5-1 / person
                  :name (c5-0 / name
                              :op1 "Dog")))

# ::snt even goats have standards
# ::tokens ["even", "goats", "have", "standards"]
# ::lemmas ["even", "goat", "have", "standard"]
(c6-0 / have-03
      :ARG0 (c6-2 / goat
                  :mod (c6-1 / even))
      :ARG1 (c6-3 / standard))

# ::snt he's busy lubing the dildo
# ::tokens ["he", "'s", "busy", "lubing", "the", "dildo"]
# ::lemmas ["he", "be", "busy", "lube", "the", "dildo"]
(c7-3 / busy-01
      :ARG1 (c7-0 / he)
      :ARG2 (c7-1 / lub-01
                  :ARG0 c7-0
                  :ARG1 (c7-2 / dildo)))

# ::snt when you vomit
# ::tokens ["when", "you", "vomit"]
# ::lemmas ["when", "you", "vomit"]
(c8-2 / be-temporally-at-91
      :ARG2 (c8-0 / vomit-01
                  :ARG0 (c8-1 / you)))

# ::snt only if you ask nicely
# ::tokens ["only", "if", "you", "ask", "nicely"]
# ::lemmas ["only", "if", "you", "ask", "nicely"]
(c9-0 / have-condition-91
      :ARG2 (c9-4 / ask-01
                  :ARG0 (c9-1 / you)
                  :ARG1-of (c9-3 / nice-01)
                  :mod (c9-2 / only)))

# ::snt may his soul rest in peace sympathies to his family
# ::tokens ["may", "his", "soul", "rest", "in", "peace", "sympathies", "to", "his", "family"]
# ::lemmas ["may", "his", "soul", "rest", "in", "peace", "sympathy", "to", "his", "family"]
(c10-9 / and
       :op1 (c10-1 / wish-01
                   :ARG1 (c10-7 / rest-01
                                :ARG1 (c10-8 / soul
                                             :part-of (c10-0 / he))
                                :manner (c10-6 / peace)))
       :op2 (c10-5 / sympathize-01
                   :ARG1 (c10-2 / family
                                :ARG1-of (c10-3 / have-org-role-91
                                                :ARG0 c10-0
                                                :ARG2 (c10-4 / member)))))

# ::snt Then die and go to Hell
# ::tokens ["Then", "die", "and", "go", "to", "Hell"]
# ::lemmas ["then", "die", "and", "go", "to", "hell"]
(c11-5 / and
       :op1 (c11-2 / die-01
                   :ARG1 (c11-1 / you))
       :op2 (c11-3 / go-02
                   :ARG0 c11-1
                   :ARG4 (c11-0 / hell))
       :time (c11-4 / then))

# ::snt RIP
# ::tokens ["RIP"]
# ::lemmas ["RIP"]
(c12-2 / rest-01
       :ARG1 (c12-0 / you)
       :manner (c12-1 / peace))

# ::snt But a Gay hasn't
# ::tokens ["But", "a", "Gay", "has", "n't"]
# ::lemmas ["but", "a", "Gay", "have", "not"]
(c13-2 / contrast-01
       :ARG2 (c13-0 / have-06
                    :ARG0 (c13-1 / person
                                 :ARG1-of (c13-3 / gay-01))
                    :polarity -))

# ::snt well briefly they are murdering religious nutters
# ::tokens ["well", "briefly", "they", "are", "murdering", "religious", "nutters"]
# ::lemmas ["well", "briefly", "they", "be", "murder", "religious", "nutter"]
(c14-1 / murder-01
       :ARG0 (c14-5 / they)
       :ARG1 (c14-3 / nutter
                    :mod (c14-4 / religious))
       :duration (c14-2 / brief)
       :mod (c14-0 / well
                   :mode expressive))

# ::snt rip
# ::tokens ["rip"]
# ::lemmas ["rip"]
(c15-0 / rip)

# ::snt I (almost) died of boredom reading your bullshit. Cunt
# ::tokens ["I", "(", "almost", ")", "died", "of", "boredom", "reading", "your", "bullshit", ".", "Cunt"]
# ::lemmas ["i", "(", "almost", ")", "die", "of", "boredom", "read", "your", "bullshit", ".", "cunt"]
(c16-9 / say-01
       :ARG0 (c16-2 / i)
       :ARG1 (c16-5 / die-01
                    :ARG1 c16-2
                    :ARG1-of (c16-6 / cause-01
                                    :ARG0 (c16-1 / bore-02
                                                 :ARG0 c16-2
                                                 :ARG1 (c16-7 / read-01
                                                              :ARG0 c16-2
                                                              :ARG1 (c16-8 / bullshit-01
                                                                           :ARG0 (c16-0 / you)))))
                    :mod (c16-10 / almost))
       :ARG2 (c16-4 / person
                    :name (c16-3 / name
                                 :op1 "Cunt")))

# ::snt Please stop sending tweets still I am vomiting
# ::tokens ["Please", "stop", "sending", "tweets", "still", "I", "am", "vomiting"]
# ::lemmas ["please", "stop", "send", "tweet", "still", "i", "be", "vomit"]
(c17-6 / stop-01
       :ARG0 (c17-0 / you)
       :ARG1 (c17-2 / send-01
                    :ARG0 c17-0
                    :ARG1 (c17-7 / tweet-01))
       :mod (c17-1 / still)
       :ARG1-of (c17-5 / cause-01
                       :ARG0 (c17-4 / vomit-01
                                    :ARG0 (c17-3 / i)))
       :mode imperative
       :polite +)

# ::snt If he is Canadian and Christian he is retarded but if he is Muslim he is terrorist
# ::tokens ["If", "he", "is", "Canadian", "and", "Christian", "he", "is", "retarded", "but", "if", "he", "is", "Muslim", "he", "is", "terrorist"]
# ::lemmas ["if", "he", "be", "Canadian", "and", "Christian", "he", "be", "retarded", "but", "if", "he", "be", "Muslim", "he", "be", "terrorist"]
(c18-5 / retard-01
       :ARG1 (c18-0 / he)
       :condition (c18-6 / contrast-01
                         :ARG1 (c18-10 / and
                                       :op1 (c18-4 / person
                                                   :mod (c18-7 / country
                                                               :name (c18-2 / name
                                                                            :op1 "Canada")))
                                       :op2 (c18-9 / person
                                                   :mod (c18-1 / religious-group
                                                               :name (c18-3 / name
                                                                            :op1 "Christianity")))
                                       :domain c18-0)
                         :ARG2 (c18-8 / terrorist
                                      :domain c18-0
                                      :condition c18-10
                                      :op1 c18-4
                                      :op2 c18-9)))

# ::snt haha!
# ::tokens ["haha", "!"]
# ::lemmas ["haha", "!"]
(c19-0 / haha
       :mode expressive)

# ::snt you need to grow up sonny, you are the retard. Have some respect, you disgusting piece of sub human filth.
# ::tokens ["you", "need", "to", "grow", "up", "sonny", ",", "you", "are", "the", "retard", ".", "Have", "some", "respect", ",", "you", "disgusting", "piece", "of", "sub", "human", "filth", "."]
# ::lemmas ["you", "need", "to", "grow", "up", "sonny", ",", "you", "be", "the", "retard", ".", "have", "some", "respect", ",", "you", "disgusting", "piece", "of", "sub", "human", "filth", "."]
(c20-2 / multi-sentence
       :snt1 (c20-15 / say-01
                     :ARG0 (c20-6 / i)
                     :ARG1 (c20-8 / need-01
                                  :ARG0 (c20-5 / sonny)
                                  :ARG1 (c20-12 / grow-up-04
                                                :ARG1 c20-5)
                                  :ARG1-of (c20-11 / cause-01
                                                   :ARG0 (c20-10 / retard-01
                                                                 :ARG1 c20-5)))
                     :ARG2 c20-5)
       :snt2 (c20-7 / respect-01
                    :ARG0 (c20-0 / you)
                    :ARG1 (c20-14 / you
                                  :mod (c20-9 / piece
                                              :consist-of (c20-1 / filth
                                                                 :mod (c20-3 / sub)
                                                                 :ARG0-of (c20-13 / disgust-01))))
                    :mod (c20-4 / some)
                    :mode imperative))

# ::snt Funny .. I have to listen to dogs about ethics
# ::tokens ["Funny", "..", "I", "have", "to", "listen", "to", "dogs", "about", "ethics"]
# ::lemmas ["funny", "..", "i", "have", "to", "listen", "to", "dog", "about", "ethic"]
(c21-0 / funny-02
       :ARG1 (c21-2 / obligate-01
                    :ARG1 (c21-4 / i)
                    :ARG2 (c21-1 / listen-01
                                 :ARG0 c21-4
                                 :ARG1 (c21-5 / dog)
                                 :topic (c21-3 / ethics))))

# ::snt why would anyone want to marry you?
# ::tokens ["why", "would", "anyone", "want", "to", "marry", "you", "?"]
# ::lemmas ["why", "would", "anyone", "want", "to", "marry", "you", "?"]
(c22-0 / want-01
       :ARG0 (c22-5 / anyone)
       :ARG1 (c22-2 / marry-01
                    :ARG0 c22-5
                    :ARG1 (c22-1 / you))
       :ARG1-of (c22-4 / cause-01
                       :ARG0 (c22-3 / amr-unknown)))

# ::snt : Canadian media identify the soldier killed in Ottawa, Thoughts are with his family! &lt;3
# ::tokens [":", "Canadian", "media", "identify", "the", "soldier", "killed", "in", "Ottawa", ",", "Thoughts", "are", "with", "his", "family", "!", "&", "lt;3"]
# ::lemmas [":", "Canadian", "medium", "identify", "the", "soldier", "kill", "in", "Ottawa", ",", "thought", "be", "with", "his", "family", "!", "&", "lt;3"]
(c23-2 / multi-sentence
       :snt1 (c23-3 / identify-01
                    :ARG0 (c23-6 / media
                                 :mod (c23-8 / country
                                             :name (c23-4 / name
                                                          :op1 "Canada")))
                    :ARG1 (c23-10 / soldier
                                  :ARG1-of (c23-12 / kill-01
                                                   :location (c23-7 / city
                                                                    :name (c23-5 / name
                                                                                 :op1 "Ottawa")))))
       :snt2 (c23-11 / think-01
                     :ARG0 (c23-9 / person
                                  :ARG0-of (c23-0 / have-rel-role-91
                                                  :ARG1 c23-10
                                                  :ARG2 (c23-1 / family)))))

# ::snt it's still murder
# ::tokens ["it", "'s", "still", "murder"]
# ::lemmas ["it", "be", "still", "murder"]
(c24-1 / murder-01
       :mod (c24-0 / still)
       :domain (c24-2 / it))

# ::snt how awful to hear the solider has died. What is wrong with people?
# ::tokens ["how", "awful", "to", "hear", "the", "solider", "has", "died", ".", "What", "is", "wrong", "with", "people", "?"]
# ::lemmas ["how", "awful", "to", "hear", "the", "solider", "have", "die", ".", "what", "be", "wrong", "with", "people", "?"]
(c25-2 / multi-sentence
       :snt1 (c25-8 / awful
                    :degree (c25-6 / so)
                    :domain (c25-0 / hear-01
                                   :ARG1 (c25-5 / die-01
                                                :ARG1 (c25-4 / person))))
       :snt2 (c25-1 / wrong-02
                    :ARG1 (c25-3 / amr-unknown)
                    :ARG2 (c25-7 / person)))

# ::snt is that paddy McGinty's goat or is that racist
# ::tokens ["is", "that", "paddy", "McGinty", "'s", "goat", "or", "is", "that", "racist"]
# ::lemmas ["be", "that", "paddy", "McGinty", "'s", "goat", "or", "be", "that", "racist"]
(c26-6 / amr-choice
       :op1 (c26-3 / goat
                   :poss (c26-1 / person
                                :name (c26-0 / name
                                             :op1 "Paddy"
                                             :op2 "McGinty"))
                   :mod (c26-5 / that))
       :op2 (c26-2 / racist
                   :domain (c26-4 / that)))

# ::snt Please don't bark my kids are sleeping
# ::tokens ["Please", "do", "n't", "bark", "my", "kids", "are", "sleeping"]
# ::lemmas ["please", "do", "not", "bark", "my", "kid", "be", "sleep"]
(c27-2 / bark-01
       :ARG0 (c27-1 / you)
       :time (c27-5 / sleep-01
                    :ARG0 (c27-4 / person
                                 :ARG0-of (c27-0 / have-rel-role-91
                                                 :ARG1 (c27-3 / i)
                                                 :ARG2 (c27-6 / kid))))
       :mode imperative
       :polite +)

# ::snt more like his wife is years old
# ::tokens ["more", "like", "his", "wife", "is", "years", "old"]
# ::lemmas ["more", "like", "his", "wife", "be", "years", "old"]
(c28-5 / resemble-01
       :ARG2 (c28-7 / age-01
                    :ARG1 (c28-4 / person
                                 :ARG0-of (c28-0 / have-rel-role-91
                                                 :ARG1 (c28-9 / he)
                                                 :ARG2 (c28-1 / wife)))
                    :ARG2 (c28-3 / multiple
                                 :op1 (c28-8 / temporal-quantity
                                             :unit (c28-2 / year)
                                             :quant 1)))
       :mod (c28-6 / more))

# ::snt Disgusting .... I have vomited after seeing your profile pic
# ::tokens ["Disgusting", "....", "I", "have", "vomited", "after", "seeing", "your", "profile", "pic"]
# ::lemmas ["disgusting", "....", "i", "have", "vomit", "after", "see", "your", "profile", "pic"]
(c29-3 / disgust-01
       :ARG0 (c29-4 / see-01
                    :ARG0 (c29-1 / i)
                    :ARG1 (c29-2 / profile-01
                                 :ARG0 (c29-0 / you))))

# ::snt next time make sure you are lying on your back
# ::tokens ["next", "time", "make", "sure", "you", "are", "lying", "on", "your", "back"]
# ::lemmas ["next", "time", "make", "sure", "you", "be", "lie", "on", "your", "back"]
(c30-3 / ensure-01
       :ARG0 (c30-0 / you
                    :part (c30-2 / back))
       :ARG1 (c30-1 / lie-07
                    :ARG1 c30-0
                    :ARG2 c30-2)
       :time (c30-5 / time
                    :mod (c30-4 / next)))

# ::snt no he's a retard as well don't feel left out
# ::tokens ["no", "he", "'s", "a", "retard", "as", "well", "do", "n't", "feel", "left", "out"]
# ::lemmas ["no", "he", "be", "a", "retard", "as", "well", "do", "not", "feel", "leave", "out"]
(c31-6 / and
       :op1 (c31-5 / retard-01
                   :ARG1 (c31-0 / he))
       :op2 (c31-1 / feel-01
                   :ARG0 (c31-4 / i)
                   :ARG1 (c31-2 / left-out-03
                                :ARG1 c31-4)
                   :mod (c31-3 / as-well)
                   :polarity -))

# ::snt : Canadian media identify the soldier killed in Ottawa as Nathan Cirillo,
# ::tokens [":", "Canadian", "media", "identify", "the", "soldier", "killed", "in", "Ottawa", "as", "Nathan", "Cirillo", ","]
# ::lemmas [":", "Canadian", "medium", "identify", "the", "soldier", "kill", "in", "Ottawa", "as", "Nathan", "Cirillo", ","]
(c32-1 / identify-01
       :ARG0 (c32-0 / media
                    :mod (c32-6 / country
                                :name (c32-2 / name
                                             :op1 "Canada")))
       :ARG1 (c32-8 / soldier
                    :ARG1-of (c32-9 / kill-01
                                    :location (c32-5 / city
                                                     :name (c32-3 / name
                                                                  :op1 "Ottawa"))))
       :ARG2 (c32-4 / person
                    :name (c32-7 / name
                                 :op1 "Nathan"
                                 :op2 "Cirillo")))

# ::snt : Canadian media identify the soldier killed in Ottawa as Nathan Cirillo, RIP
# ::tokens [":", "Canadian", "media", "identify", "the", "soldier", "killed", "in", "Ottawa", "as", "Nathan", "Cirillo", ",", "RIP"]
# ::lemmas [":", "Canadian", "medium", "identify", "the", "soldier", "kill", "in", "Ottawa", "as", "Nathan", "Cirillo", ",", "RIP"]
(c33-1 / identify-01
       :ARG0 (c33-0 / media
                    :mod (c33-6 / country
                                :name (c33-2 / name
                                             :op1 "Canada")))
       :ARG1 (c33-9 / soldier
                    :ARG1-of (c33-10 / kill-01
                                     :location (c33-5 / city
                                                      :name (c33-3 / name
                                                                   :op1 "Ottawa"))))
       :ARG2 (c33-4 / person
                    :name (c33-7 / name
                                 :op1 "Nathan"
                                 :op2 "Cirillo")
                    :ARG1-of (c33-8 / rest-01)))

# ::snt He's probably married to a Goat.
# ::tokens ["He", "'s", "probably", "married", "to", "a", "Goat", "."]
# ::lemmas ["he", "be", "probably", "married", "to", "a", "Goat", "."]
(c34-1 / probable
       :domain (c34-2 / marry-01
                      :ARG1 (c34-0 / he)
                      :ARG2 (c34-3 / goat)))

# ::snt don't you mean read?
# ::tokens ["do", "n't", "you", "mean", "read", "?"]
# ::lemmas ["do", "not", "you", "mean", "read", "?"]
(c35-2 / mean-01
       :polarity (c35-3 / amr-unknown)
       :ARG0 (c35-0 / you)
       :ARG2 (c35-1 / read-01
                    :ARG0 c35-0
                    :mode imperative))

# ::snt a wife and a string of hookers?
# ::tokens ["a", "wife", "and", "a", "string", "of", "hookers", "?"]
# ::lemmas ["a", "wife", "and", "a", "string", "of", "hooker", "?"]
(c36-7 / and
       :polarity (c36-3 / amr-unknown)
       :op1 (c36-4 / person
                   :ARG0-of (c36-0 / have-rel-role-91
                                   :ARG2 (c36-1 / wife)))
       :op2 (c36-6 / person
                   :ARG0-of (c36-2 / hook-03)
                   :quant (c36-5 / string)))

# ::snt Sorry I am married
# ::tokens ["Sorry", "I", "am", "married"]
# ::lemmas ["sorry", "i", "be", "marry"]
(c37-0 / sorry-01
       :ARG1 (c37-2 / i)
       :ARG2 (c37-1 / marry-01
                    :ARG1 c37-2))

# ::snt is that a lake? I thought it was a urine sample
# ::tokens ["is", "that", "a", "lake", "?", "I", "thought", "it", "was", "a", "urine", "sample"]
# ::lemmas ["be", "that", "a", "lake", "?", "i", "think", "it", "be", "a", "urine", "sample"]
(c38-1 / multi-sentence
       :snt1 (c38-0 / lake
                    :domain (c38-6 / that)
                    :polarity (c38-7 / amr-unknown))
       :snt2 (c38-4 / think-01
                    :ARG0 (c38-3 / i)
                    :ARG1 (c38-5 / sample-01
                                 :ARG1 (c38-2 / urine)
                                 :ARG2 c38-0)))

# ::snt Mins Video Of Kuala Lumpur "Rain T...: via
# ::tokens ["Mins", "Video", "Of", "Kuala", "Lumpur", "\"", "Rain", "T", "...", ":", "via"]
# ::lemmas ["Mins", "Video", "of", "Kuala", "Lumpur", "\"", "Rain", "T", "...", ":", "via"]
(c39-1 / video
       :mod (c39-2 / rain-01)
       :source (c39-3 / city
                      :name (c39-0 / name
                                   :op1 "Kuala"
                                   :op2 "Lumpur")))
