# ::snt Hard to believe this guy assaulted a cop.
# ::tokens ["Hard", "to", "believe", "this", "guy", "assaulted", "a", "cop", "."]
# ::lemmas ["hard", "to", "believe", "this", "guy", "assault", "a", "cop", "."]
(c1-0 / hard-02
      :ARG1 (c1-1 / believe-01
                  :ARG1 (c1-5 / assault-01
                              :ARG0 (c1-3 / guy
                                          :mod (c1-4 / this))
                              :ARG1 (c1-2 / cop))))

# ::snt Looks like he should be on the school football team instead of bullying little store clerks. They gotto be proud of him.
# ::tokens ["Looks", "like", "he", "should", "be", "on", "the", "school", "football", "team", "instead", "of", "bullying", "little", "store", "clerks", ".", "They", "gotto", "be", "proud", "of", "him", "."]
# ::lemmas ["look", "like", "he", "should", "be", "on", "the", "school", "football", "team", "instead", "of", "bully", "little", "store", "clerk", ".", "they", "gotto", "be", "proud", "of", "he", "."]
(c2-2 / multi-sentence
      :snt1 (c2-1 / look-02
                  :ARG1 (c2-9 / recommend-01
                              :ARG1 (c2-0 / have-org-role-91
                                          :ARG0 (c2-16 / he)
                                          :ARG1 (c2-14 / team
                                                       :mod (c2-3 / football)
                                                       :mod (c2-12 / school))
                                          :ARG1-of (c2-6 / instead-of-91
                                                         :ARG2 (c2-4 / bully-01
                                                                     :ARG0 c2-16
                                                                     :ARG1 (c2-8 / person
                                                                                 :ARG0-of (c2-10 / clerk-01
                                                                                                 :ARG1 (c2-5 / store))
                                                                                 :mod (c2-11 / little)))))))
      :snt2 (c2-15 / pride-01
                   :ARG0 (c2-13 / they)
                   :ARG1 (c2-7 / he)))

# ::snt who would ever think
# ::tokens ["who", "would", "ever", "think"]
# ::lemmas ["who", "would", "ever", "think"]
(c3-1 / think-01
      :ARG0 (c3-2 / amr-unknown)
      :time (c3-0 / ever))

# ::snt demack1 you ma'am are a complete maroon.
# ::tokens ["demack1", "you", "ma'am", "are", "a", "complete", "maroon", "."]
# ::lemmas ["demack1", "you", "ma'am", "be", "a", "complete", "maroon", "."]
(c4-6 / say-01
      :ARG0 (c4-3 / i)
      :ARG1 (c4-2 / maroon
                  :ARG1-of (c4-5 / complete-02)
                  :domain (c4-1 / you
                                :ARG0-of (c4-0 / have-rel-role-91
                                               :ARG2 (c4-4 / ma'am))
                                :ARG2-of c4-6)))

# ::snt Seems he and a friend were shot by a black cop after he told them to stop walking down the middle of the street.
# ::tokens ["Seems", "he", "and", "a", "friend", "were", "shot", "by", "a", "black", "cop", "after", "he", "told", "them", "to", "stop", "walking", "down", "the", "middle", "of", "the", "street", "."]
# ::lemmas ["seem", "he", "and", "a", "friend", "be", "shoot", "by", "a", "black", "cop", "after", "he", "tell", "they", "to", "stop", "walk", "down", "the", "middle", "of", "the", "street", "."]
(c5-13 / seem-01
       :ARG1 (c5-8 / shoot-02
                   :ARG0 (c5-12 / cop
                                :ARG1-of (c5-6 / black-05))
                   :ARG1 (c5-15 / and
                                :op1 (c5-0 / he)
                                :op2 (c5-10 / person
                                            :ARG0-of (c5-2 / have-rel-role-91
                                                           :ARG1 c5-0
                                                           :ARG2 (c5-3 / friend))))
                   :time (c5-9 / after
                               :op1 (c5-14 / tell-01
                                           :ARG0 c5-12
                                           :ARG1 (c5-4 / stop-01
                                                       :ARG0 c5-15
                                                       :ARG1 (c5-1 / walk-01
                                                                   :ARG0 c5-15
                                                                   :direction (c5-11 / down
                                                                                     :op1 (c5-5 / middle
                                                                                                :part-of (c5-7 / street)))))
                                           :ARG2 c5-15))))

# ::snt Kids can be pretty brave thinking they can't be touched..No respect for the law..
# ::tokens ["Kids", "can", "be", "pretty", "brave", "thinking", "they", "ca", "n't", "be", "touched", "..", "No", "respect", "for", "the", "law", ".."]
# ::lemmas ["kid", "can", "be", "pretty", "brave", "thinking", "they", "can", "not", "be", "touch", "..", "no", "respect", "for", "the", "law", ".."]
(c6-1 / multi-sentence
      :snt1 (c6-4 / possible-01
                  :ARG1 (c6-3 / brave-02
                              :ARG0 (c6-8 / kid)
                              :degree (c6-9 / pretty)
                              :manner (c6-7 / think-01
                                            :ARG0 c6-8
                                            :ARG1 (c6-2 / possible-01
                                                        :ARG1 (c6-6 / touch-01
                                                                    :ARG1 c6-8)
                                                        :polarity -))))
      :snt2 (c6-5 / respect-01
                  :ARG1 (c6-0 / law)
                  :polarity -))

# ::snt Happens all the time, just ask Drew Peterson.
# ::tokens ["Happens", "all", "the", "time", ",", "just", "ask", "Drew", "Peterson", "."]
# ::lemmas ["happen", "all", "the", "time", ",", "just", "ask", "Drew", "Peterson", "."]
(c7-3 / multi-sentence
      :snt1 (c7-0 / have-frequency-91
                  :ARG2 (c7-7 / time
                              :mod (c7-8 / all)))
      :snt2 (c7-4 / ask-01
                  :ARG0 (c7-1 / you)
                  :ARG2 (c7-6 / person
                              :name (c7-5 / name
                                          :op1 "Drew"
                                          :op2 "Peterson"))
                  :mod (c7-2 / just)
                  :mode imperative))

# ::snt I know... What a nice guy he seems like.
# ::tokens ["I", "know", "...", "What", "a", "nice", "guy", "he", "seems", "like", "."]
# ::lemmas ["i", "know", "...", "what", "a", "nice", "guy", "he", "seem", "like", "."]
(c8-1 / multi-sentence
      :snt1 (c8-7 / know-01
                  :ARG0 (c8-2 / i))
      :snt2 (c8-5 / guy
                  :ARG1-of (c8-3 / nice-01
                                 :degree (c8-6 / so))
                  :ARG1-of (c8-4 / resemble-01
                                 :ARG2 (c8-0 / he))))

# ::snt Looks like it.
# ::tokens ["Looks", "like", "it", "."]
# ::lemmas ["look", "like", "it", "."]
(c9-0 / look-02
      :ARG1 (c9-1 / it))

# ::snt Yup, I'll grab my Ebonics dictionary. Thx for the advice.
# ::tokens ["Yup", ",", "I", "'ll", "grab", "my", "Ebonics", "dictionary", ".", "Thx", "for", "the", "advice", "."]
# ::lemmas ["yup", ",", "i", "'ll", "grab", "my", "ebonic", "dictionary", ".", "thx", "for", "the", "advice", "."]
(c10-1 / multi-sentence
       :snt1 (c10-7 / grab-01
                    :ARG0 (c10-2 / i)
                    :ARG1 (c10-6 / dictionary
                                 :mod (c10-5 / product
                                             :name (c10-3 / name
                                                          :op1 "Ebonics"))
                                 :poss c10-2)
                    :mod (c10-0 / yup))
       :snt2 (c10-9 / thank-01
                    :ARG0 (c10-8 / i)
                    :ARG1 (c10-10 / person
                                  :name (c10-4 / name
                                               :op1 "Thx"))
                    :ARG2 (c10-11 / advise-01
                                  :ARG0 c10-10)))

# ::snt Last week I suggested they are the same person. Neither denied.
# ::tokens ["Last", "week", "I", "suggested", "they", "are", "the", "same", "person", ".", "Neither", "denied", "."]
# ::lemmas ["Last", "week", "i", "suggest", "they", "be", "the", "same", "person", ".", "neither", "deny", "."]
(c11-2 / multi-sentence
       :snt1 (c11-8 / suggest-01
                    :ARG0 (c11-5 / i)
                    :ARG1 (c11-3 / same-01
                                 :ARG1 (c11-9 / they)
                                 :ARG2 (c11-6 / person))
                    :time (c11-0 / week
                                 :mod (c11-1 / last)))
       :snt2 (c11-7 / deny-01
                    :ARG0 (c11-4 / either)
                    :polarity -))

# ::snt . Honestly there is no one on twitter I love more than you and
# ::tokens [".", "Honestly", "there", "is", "no", "one", "on", "twitter", "I", "love", "more", "than", "you", "and"]
# ::lemmas [".", "honestly", "there", "be", "no", "one", "on", "twitter", "i", "love", "more", "than", "you", "and"]
(c12-9 / and
       :op1 (c12-6 / no-one
                   :medium (c12-8 / publication
                                  :name (c12-7 / name
                                               :op1 "Twitter"))
                   :ARG1-of (c12-2 / love-01
                                   :ARG0 (c12-5 / i)
                                   :ARG2-of (c12-0 / have-degree-91
                                                   :ARG1 c12-5
                                                   :ARG3 (c12-3 / more)
                                                   :ARG4 (c12-1 / you))))
       :op2 (c12-4 / honest-01
                   :ARG0 c12-5))

# ::snt THATS THE "THUG" MINDSET
# ::tokens ["THATS", "THE", "\"", "THUG", "\"", "MINDSET"]
# ::lemmas ["THATS", "the", "\"", "thug", "\"", "mindset"]
(c13-0 / string-entity
       :domain (c13-1 / that)
       :value "THUG")

# ::snt Thank you Rachel!
# ::tokens ["Thank", "you", "Rachel", "!"]
# ::lemmas ["thank", "you", "Rachel", "!"]
(c14-3 / say-01
       :ARG0 (c14-0 / i)
       :ARG1 (c14-4 / thank-01
                    :ARG0 c14-0
                    :ARG1 (c14-2 / person
                                 :name (c14-1 / name
                                              :op1 "Rachel")
                                 :ARG2-of c14-3)))

# ::snt This was just a photo-op for his application to Harvard.
# ::tokens ["This", "was", "just", "a", "photo", "-", "op", "for", "his", "application", "to", "Harvard", "."]
# ::lemmas ["this", "be", "just", "a", "photo", "-", "op", "for", "his", "application", "to", "Harvard", "."]
(c16-4 / photoop
       :domain (c16-5 / this)
       :purpose (c16-6 / apply-01
                       :ARG0 (c16-0 / he)
                       :ARG2 (c16-2 / university
                                    :name (c16-3 / name
                                                 :op1 "Harvard")))
       :mod (c16-1 / just))

# ::snt You always have the guts to say what others are thinking.
# ::tokens ["You", "always", "have", "the", "guts", "to", "say", "what", "others", "are", "thinking", "."]
# ::lemmas ["you", "always", "have", "the", "gut", "to", "say", "what", "other", "be", "think", "."]
(c17-0 / have-03
       :ARG0 (c17-1 / you)
       :ARG1 (c17-4 / gut)
       :time (c17-8 / always)
       :purpose (c17-6 / say-01
                       :ARG0 c17-1
                       :ARG1 (c17-7 / thing
                                    :ARG1-of (c17-5 / think-01
                                                    :ARG0 (c17-3 / person
                                                                 :mod (c17-2 / other))))))

# ::snt Awwww, but he looks so sweet and innocent.
# ::tokens ["Awwww", ",", "but", "he", "looks", "so", "sweet", "and", "innocent", "."]
# ::lemmas ["Awwww", ",", "but", "he", "look", "so", "sweet", "and", "innocent", "."]
(c18-5 / contrast-01
       :ARG2 (c18-1 / look-02
                    :ARG0 (c18-0 / he)
                    :ARG1 (c18-7 / and
                                 :op1 (c18-6 / sweet-03
                                             :ARG1 c18-0)
                                 :op2 (c18-4 / innocent-01
                                             :ARG1 c18-0)
                                 :degree (c18-2 / so)))
       :mod (c18-3 / aw
                   :mode expressive))

# ::snt Right..
# ::tokens ["Right", ".."]
# ::lemmas ["right", ".."]
(c19-0 / right-06)

# ::snt Where's the Indian outrage over the strong arming of the clerk?
# ::tokens ["Where", "'s", "the", "Indian", "outrage", "over", "the", "strong", "arming", "of", "the", "clerk", "?"]
# ::lemmas ["where", "be", "the", "Indian", "outrage", "over", "the", "strong", "arming", "of", "the", "clerk", "?"]
(c20-0 / outrage-01
       :ARG0 (c20-6 / arm-01
                    :ARG1 (c20-4 / clerk)
                    :ARG1-of (c20-5 / strong-02))
       :ARG1 (c20-3 / country
                    :name (c20-2 / name
                                 :op1 "India"))
       :location (c20-1 / amr-unknown))

# ::snt he did? How could that happen? They say he would never hurt a fly. They didn't mislead us did they?
# ::tokens ["he", "did", "?", "How", "could", "that", "happen", "?", "They", "say", "he", "would", "never", "hurt", "a", "fly", ".", "They", "did", "n't", "mislead", "us", "did", "they", "?"]
# ::lemmas ["he", "do", "?", "how", "could", "that", "happen", "?", "they", "say", "he", "would", "never", "hurt", "a", "fly", ".", "they", "do", "not", "mislead", "we", "do", "they", "?"]
(c21-3 / multi-sentence
       :snt1 (c21-8 / do-02
                    :ARG0 (c21-0 / he))
       :snt2 (c21-7 / possible-01
                    :ARG1 (c21-14 / that)
                    :manner (c21-15 / amr-unknown))
       :snt3 (c21-13 / say-01
                     :ARG0 (c21-12 / they)
                     :ARG1 (c21-2 / hurt-01
                                  :ARG0 (c21-6 / he)
                                  :ARG1 (c21-4 / fly)
                                  :time (c21-5 / ever)
                                  :polarity -))
       :snt4 (c21-9 / mislead-01
                    :ARG0 (c21-10 / they)
                    :ARG1 (c21-1 / we)
                    :ARG1-of (c21-11 / request-confirmation-91)
                    :polarity -))

# ::snt Fems is a robot I created. ; )
# ::tokens ["Fems", "is", "a", "robot", "I", "created", ".", ";", ")"]
# ::lemmas ["Fems", "be", "a", "robot", "i", "create", ".", ";", ")"]
(c22-3 / robot
       :ARG1-of (c22-4 / create-01
                       :ARG0 (c22-0 / i))
       :domain (c22-2 / person
                      :name (c22-1 / name
                                   :op1 "Fems")))

# ::snt Thanks, and yes it does. LOL
# ::tokens ["Thanks", ",", "and", "yes", "it", "does", ".", "LOL"]
# ::lemmas ["thank", ",", "and", "yes", "it", "do", ".", "LOL"]
(c23-8 / and
       :op1 (c23-7 / thank-01
                   :ARG0 (c23-2 / i)
                   :ARG1 (c23-0 / you))
       :op2 (c23-3 / do-02
                   :ARG0 (c23-5 / it)
                   :mod (c23-6 / yes)
                   :ARG2-of (c23-1 / laugh-01
                                   :ARG0 c23-2
                                   :manner (c23-4 / loud)
                                   :mode expressive)))

# ::snt Thanks! : )
# ::tokens ["Thanks", "!", ":", ")"]
# ::lemmas ["thank", "!", ":", ")"]
(c24-2 / thank-01
       :ARG1 (c24-0 / you)
       :mod (c24-1 / emoticon
                   :value ":)")
       :mode expressive)

# ::snt Good to have you back, Plugs. Your job must suck.
# ::tokens ["Good", "to", "have", "you", "back", ",", "Plugs", ".", "Your", "job", "must", "suck", "."]
# ::lemmas ["good", "to", "have", "you", "back", ",", "Plugs", ".", "your", "job", "must", "suck", "."]
(c25-3 / multi-sentence
       :snt1 (c25-8 / good-02
                    :ARG1 (c25-0 / have-03
                                 :ARG1 (c25-7 / person
                                              :name (c25-6 / name
                                                           :op1 "Plugs"))
                                 :mod (c25-4 / back)))
       :snt2 (c25-5 / infer-01
                    :ARG1 (c25-9 / suck-03
                                 :ARG0 (c25-1 / job
                                              :poss (c25-2 / you)))))
