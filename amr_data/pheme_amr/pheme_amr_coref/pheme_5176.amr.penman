# ::snt Implicit reference to Dostoyevsky's Grand Inquisitor tale.
# ::tokens ["Implicit", "reference", "to", "Dostoyevsky", "'s", "Grand", "Inquisitor", "tale", "."]
# ::lemmas ["implicit", "reference", "to", "Dostoyevsky", "'s", "Grand", "Inquisitor", "tale", "."]
(c1-4 / reference-04
      :ARG1 (c1-5 / tale
                  :name (c1-1 / name
                              :op1 "Grand"
                              :op2 "Editorial")
                  :poss (c1-3 / person
                              :name (c1-2 / name
                                          :op1 "Dostoyevsky")))
      :manner (c1-0 / implicit))

# ::snt Post Everywhere!
# ::tokens ["Post", "Everywhere", "!"]
# ::lemmas ["Post", "Everywhere", "!"]
(c2-1 / post-01
      :ARG0 (c2-0 / you)
      :location (c2-2 / everywhere)
      :mode imperative)

# ::snt No prob
# ::tokens ["No", "prob"]
# ::lemmas ["no", "prob"]
(c3-0 / prob
      :polarity -)

# ::snt please make cartoon of idiots
# ::tokens ["please", "make", "cartoon", "of", "idiots"]
# ::lemmas ["please", "make", "cartoon", "of", "idiot"]
(c4-2 / make-01
      :ARG0 (c4-0 / you)
      :ARG1 (c4-1 / cartoon
                  :topic (c4-3 / idiot))
      :mode imperative
      :polite +)

# ::snt Et le mot retenir sur cette page c'est "ABRUTI"
# ::tokens ["Et", "le", "mot", "retenir", "sur", "cette", "page", "c'est", "\"", "ABRUTI", "\""]
# ::lemmas ["et", "le", "mot", "retenir", "sur", "cette", "page", "c'est", "\"", "ABRUTI", "\""]
(c5-2 / multi-sentence
      :snt1 (c5-4 / et-cetera
                  :polarity (c5-11 / amr-unknown))
      :snt2 (c5-3 / et-cetera
                  :op1 (c5-1 / et-cetera)
                  :location (c5-9 / sur
                                  :op1 (c5-8 / page
                                             :mod (c5-5 / ette))))
      :snt3 (c5-0 / have-mod-91
                  :ARG1 (c5-10 / publication
                               :name (c5-7 / name
                                           :op1 "ABRUTI"))
                  :ARG2 (c5-6 / amr-unknown)))

# ::snt Mohammed was ISIS
# ::tokens ["Mohammed", "was", "ISIS"]
# ::lemmas ["Mohammed", "be", "ISIS"]
(c7-1 / person
      :name (c7-0 / name
                  :op1 "Mohammed")
      :mod (c7-2 / criminal-organization
                 :name (c7-3 / name
                             :op1 "ISIS")))

# ::snt No excuse for killing innocent people exercising their right to free speech.no matter the cartoon's subject
# ::tokens ["No", "excuse", "for", "killing", "innocent", "people", "exercising", "their", "right", "to", "free", "speech.no", "matter", "the", "cartoon", "'s", "subject"]
# ::lemmas ["no", "excuse", "for", "kill", "innocent", "people", "exercise", "their", "right", "to", "free", "speech.no", "matter", "the", "cartoon", "'s", "subject"]
(c8-2 / excuse-02
      :ARG2 (c8-10 / kill-01
                   :ARG1 (c8-6 / person
                               :ARG1-of (c8-4 / innocent-01)
                               :ARG0-of (c8-1 / exercise-01
                                              :ARG1 (c8-7 / right-05
                                                          :ARG1 c8-6
                                                          :ARG2 (c8-9 / speak-01
                                                                      :ARG1-of (c8-0 / free-04))))))
      :ARG1-of (c8-5 / regardless-91
                     :ARG2 (c8-3 / subject
                                 :poss (c8-8 / cartoon)))
      :polarity -)

# ::snt Exact ! ABRUTIS LCHES !!
# ::tokens ["Exact", "!", "ABRUTIS", "LCHES", "!", "!"]
# ::lemmas ["exact", "!", "ABRUTIS", "LCHES", "!", "!"]
(c9-2 / absurd
      :domain (c9-1 / person
                    :name (c9-0 / name
                                :op1 "Abrandis"
                                :op2 "Lech"))
      :mode expressive)

# ::snt Must be funnier in French
# ::tokens ["Must", "be", "funnier", "in", "French"]
# ::lemmas ["must", "be", "funny", "in", "French"]
(c10-4 / infer-01
       :ARG1 (c10-0 / have-degree-91
                    :ARG2 (c10-1 / funny-02
                                 :ARG1 (c10-2 / language
                                              :name (c10-5 / name
                                                           :op1 "French")))
                    :ARG3 (c10-3 / more)))

# ::snt . Come on. These need to be tweeted and retweeted.
# ::tokens [".", "Come", "on", ".", "These", "need", "to", "be", "tweeted", "and", "retweeted", "."]
# ::lemmas [".", "come", "on", ".", "these", "need", "to", "be", "tweet", "and", "retweete", "."]
(c11-1 / multi-sentence
       :snt1 (c11-4 / come-on-25
                    :ARG1 (c11-0 / you)
                    :mode imperative)
       :snt2 (c11-2 / obligate-01
                    :ARG2 (c11-7 / and
                                 :op1 (c11-6 / tweet-01
                                             :ARG1 (c11-5 / this))
                                 :op2 (c11-3 / retweet-01
                                             :ARG1 c11-5))))

# ::snt The Future must not belong Islamic Murderers who silence freedom with violence.
# ::tokens ["The", "Future", "must", "not", "belong", "Islamic", "Murderers", "who", "silence", "freedom", "with", "violence", "."]
# ::lemmas ["the", "Future", "must", "not", "belong", "Islamic", "Murderers", "who", "silence", "freedom", "with", "violence", "."]
(c14-3 / obligate-01
       :ARG2 (c14-2 / belong-01
                    :ARG0 (c14-0 / future)
                    :ARG1 (c14-7 / person
                                 :ARG0-of (c14-1 / murder-01)
                                 :mod (c14-8 / religious-group
                                             :name (c14-5 / name
                                                          :op1 "Islam"))
                                 :ARG0-of (c14-9 / silence-01
                                                 :ARG1 (c14-4 / free-04)
                                                 :manner (c14-6 / violence)))
                    :polarity -))
