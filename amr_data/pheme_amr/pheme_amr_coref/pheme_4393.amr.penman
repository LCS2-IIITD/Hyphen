# ::snt Yeah, exactly what do u mean by "that is all"?
# ::tokens ["Yeah", ",", "exactly", "what", "do", "u", "mean", "by", "\"", "that", "is", "all", "\"", "?"]
# ::lemmas ["yeah", ",", "exactly", "what", "do", "u", "mean", "by", "\"", "that", "be", "all", "\"", "?"]
(c1-1 / mean-01
      :ARG0 (c1-0 / you)
      :ARG1 (c1-4 / that)
      :ARG2 (c1-5 / amr-unknown
                  :mod (c1-2 / exact))
      :mod (c1-3 / yeah
                 :mode expressive))

# ::snt Thanks. I love political cartoons.
# ::tokens ["Thanks", ".", "I", "love", "political", "cartoons", "."]
# ::lemmas ["thank", ".", "i", "love", "political", "cartoon", "."]
(c2-2 / multi-sentence
      :snt1 (c2-7 / thank-01
                  :ARG0 (c2-3 / i)
                  :ARG1 (c2-0 / you))
      :snt2 (c2-1 / love-01
                  :ARG0 (c2-6 / i)
                  :ARG1 (c2-5 / cartoon
                              :mod (c2-4 / politics))))

# ::snt perhaps as a Eulogy to the victims/reading too much into a tweet, just mark it as a tragic event
# ::tokens ["perhaps", "as", "a", "Eulogy", "to", "the", "victims", "/", "reading", "too", "much", "into", "a", "tweet", ",", "just", "mark", "it", "as", "a", "tragic", "event"]
# ::lemmas ["perhaps", "as", "a", "eulogy", "to", "the", "victim", "/", "read", "too", "much", "into", "a", "tweet", ",", "just", "mark", "it", "as", "a", "tragic", "event"]
(c3-3 / mark-01
      :ARG0 (c3-1 / you)
      :ARG1 (c3-7 / it)
      :ARG2 (c3-6 / event
                  :mod (c3-15 / tragic))
      :mod (c3-0 / just)
      :ARG1-of (c3-9 / possible-01)
      :ARG1-of (c3-11 / cause-01
                      :ARG0 (c3-5 / or
                                  :op1 (c3-4 / eulogy
                                             :beneficiary (c3-8 / victim))
                                  :op2 (c3-10 / read-01
                                              :ARG1 c3-7
                                              :ARG3 (c3-14 / tweet-01)
                                              :ARG1-of (c3-2 / have-quant-91
                                                             :ARG2 (c3-12 / much)
                                                             :ARG3 (c3-13 / too)))))
      :mode imperative)

# ::snt What point are you trying to make there? That it was deserved?
# ::tokens ["What", "point", "are", "you", "trying", "to", "make", "there", "?", "That", "it", "was", "deserved", "?"]
# ::lemmas ["what", "point", "be", "you", "try", "to", "make", "there", "?", "that", "it", "be", "deserve", "?"]
(c4-1 / multi-sentence
      :snt1 (c4-6 / try-01
                  :ARG0 (c4-0 / you)
                  :ARG1 (c4-3 / point-04
                              :ARG0 c4-0
                              :ARG1 (c4-7 / amr-unknown)
                              :location (c4-5 / there)))
      :snt2 (c4-4 / deserve-01
                  :ARG1 (c4-2 / it)))

# ::snt are you saying they deserved it?
# ::tokens ["are", "you", "saying", "they", "deserved", "it", "?"]
# ::lemmas ["be", "you", "say", "they", "deserve", "it", "?"]
(c5-3 / say-01
      :polarity (c5-5 / amr-unknown)
      :ARG0 (c5-0 / you)
      :ARG1 (c5-2 / deserve-01
                  :ARG0 (c5-4 / they)
                  :ARG1 (c5-1 / it)))

# ::snt espero que eso no sea todo. Si no esos animales habrn ganado
# ::tokens ["espero", "que", "eso", "no", "sea", "todo", ".", "Si", "no", "esos", "animales", "habrn", "ganado"]
# ::lemmas ["espero", "que", "eso", "no", "sea", "todo", ".", "Si", "no", "esos", "animale", "habrn", "ganado"]
(c6-1 / multi-sentence
      :snt1 (c6-2 / espero
                  :domain (c6-6 / sea-to-do))
      :snt2 (c6-0 / have-concession-91
                  :ARG1 (c6-5 / ganado
                              :domain (c6-4 / person
                                            :ARG0-of (c6-8 / have-rel-role-91
                                                           :ARG2 (c6-7 / animal))
                                            :polarity -))
                  :ARG2 (c6-3 / have-polarity-91
                              :ARG1 c6-2)
                  :ARG2 -))

# ::snt I suppose the intent is to say that's all folks and calling a sad "The End" to
# ::tokens ["I", "suppose", "the", "intent", "is", "to", "say", "that", "'s", "all", "folks", "and", "calling", "a", "sad", "\"", "The", "End", "\"", "to"]
# ::lemmas ["i", "suppose", "the", "intent", "be", "to", "say", "that", "be", "all", "folk", "and", "call", "a", "sad", "\"", "The", "End", "\"", "to"]
(c7-8 / suppose-01
      :ARG0 (c7-5 / i)
      :ARG1 (c7-7 / intend-01
                  :ARG1 (c7-10 / and
                               :op1 (c7-2 / say-01
                                          :ARG1 (c7-0 / folk
                                                      :domain (c7-9 / that)
                                                      :mod (c7-4 / all)))
                               :op2 (c7-6 / call-01
                                          :ARG1 (c7-3 / end-01)
                                          :ARG2 (c7-1 / sad-02)))))

# ::snt Its of no use if you don't understand it.
# ::tokens ["Its", "of", "no", "use", "if", "you", "do", "n't", "understand", "it", "."]
# ::lemmas ["its", "of", "no", "use", "if", "you", "do", "not", "understand", "it", "."]
(c8-1 / use-01
      :ARG1 (c8-2 / it)
      :condition (c8-0 / understand-01
                       :ARG0 (c8-3 / you)
                       :ARG1 c8-2
                       :polarity -)
      :polarity -)

# ::snt Covers : . That is all.
# ::tokens ["Covers", ":", ".", "That", "is", "all", "."]
# ::lemmas ["cover", ":", ".", "that", "be", "all", "."]
(c9-3 / say-01
      :ARG0 (c9-2 / person
                  :name (c9-1 / name
                              :op1 "Covers"))
      :ARG1 (c9-0 / be-it-08
                  :ARG1 (c9-4 / that)))

# ::snt . That is all. ()
# ::tokens [".", "That", "is", "all", ".", "(", ")"]
# ::lemmas [".", "that", "be", "all", ".", "(", ")"]
(c10-1 / be-it-08
       :ARG1 (c10-0 / that))

# ::snt : . That is all. equal opportunity offender!
# ::tokens [":", ".", "That", "is", "all", ".", "equal", "opportunity", "offender", "!"]
# ::lemmas [":", ".", "that", "be", "all", ".", "equal", "opportunity", "offender", "!"]
(c11-1 / multi-sentence
       :snt1 (c11-6 / all
                    :domain (c11-5 / that))
       :snt2 (c11-4 / person
                    :ARG0-of (c11-2 / offend-01
                                    :mod (c11-0 / opportunity
                                                :ARG1-of (c11-3 / equal-01)))))

# ::snt Whatever dont let any bastard get you down. Stand up too bullies.
# ::tokens ["Whatever", "do", "nt", "let", "any", "bastard", "get", "you", "down", ".", "Stand", "up", "too", "bullies", "."]
# ::lemmas ["whatever", "do", "not", "let", "any", "bastard", "get", "you", "down", ".", "stand", "up", "too", "bully", "."]
(c12-3 / multi-sentence
       :snt1 (c12-2 / let-01
                    :ARG0 (c12-0 / you)
                    :ARG1 (c12-6 / get-down-23
                                 :ARG0 (c12-4 / bastard
                                              :mod (c12-10 / any))
                                 :ARG1 c12-0)
                    :mod (c12-1 / whatever)
                    :polarity -
                    :mode imperative)
       :snt2 (c12-8 / stand-up-07
                    :ARG0 (c12-7 / you
                                 :ARG0-of (c12-5 / bully-01)
                                 :mod (c12-9 / too))
                    :mode imperative))

# ::snt My hero
# ::tokens ["My", "hero"]
# ::lemmas ["my", "hero"]
(c13-0 / hero
       :poss (c13-1 / i))

# ::snt This will not be the end of Charlie Hebdo. Anyone who suggests that is a coward.
# ::tokens ["This", "will", "not", "be", "the", "end", "of", "Charlie", "Hebdo", ".", "Anyone", "who", "suggests", "that", "is", "a", "coward", "."]
# ::lemmas ["this", "will", "not", "be", "the", "end", "of", "Charlie", "Hebdo", ".", "anyone", "who", "suggest", "that", "be", "a", "coward", "."]
(c14-0 / multi-sentence
       :snt1 (c14-1 / end-01
                    :ARG0 (c14-7 / this)
                    :ARG1 (c14-3 / magazine
                                 :name (c14-2 / name
                                              :op1 "Charlie"
                                              :op2 "Ch Hebdo"))
                    :polarity -)
       :snt2 (c14-4 / coward
                    :domain (c14-8 / anyone
                                   :ARG0-of (c14-6 / suggest-01
                                                   :ARG1 (c14-5 / that)))))

# ::snt . That is all. Via
# ::tokens [".", "That", "is", "all", ".", "Via"]
# ::lemmas [".", "that", "be", "all", ".", "Via"]
(c15-2 / multi-sentence
       :snt1 (c15-3 / be-it-08
                    :ARG1 (c15-0 / that))
       :snt2 (c15-1 / Via))

# ::snt i trust&amp;hope is publishing 's satirical covers in solidarity
# ::tokens ["i", "trust&amp;hope", "is", "publishing", "'s", "satirical", "covers", "in", "solidarity"]
# ::lemmas ["i", "trust&amp;hope", "be", "publish", "'s", "satirical", "cover", "in", "solidarity"]
(c16-2 / publish-01
       :ARG0 (c16-4 / company
                    :name (c16-1 / name
                                 :op1 "i"
                                 :op2 "&"
                                 :op3 "amp;hope"))
       :ARG1 (c16-3 / cover
                    :poss (c16-5 / satire))
       :purpose (c16-0 / solidarity))

# ::snt What do you mean by 'That is all'?
# ::tokens ["What", "do", "you", "mean", "by", "'", "That", "is", "all", "'", "?"]
# ::lemmas ["what", "do", "you", "mean", "by", "'", "that", "be", "all", "'", "?"]
(c17-1 / mean-01
       :ARG0 (c17-0 / you)
       :ARG1 (c17-3 / that
                    :mod (c17-4 / all))
       :ARG2 (c17-2 / amr-unknown))
