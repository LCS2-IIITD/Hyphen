# ::snt don't trust the pigs never trust the pigs Won't trust the pigs
# ::tokens ["do", "n't", "trust", "the", "pigs", "never", "trust", "the", "pigs", "Wo", "n't", "trust", "the", "pigs"]
# ::lemmas ["do", "not", "trust", "the", "pig", "never", "trust", "the", "pig", "will", "not", "trust", "the", "pig"]
(c1-3 / contrast-01
      :ARG1 (c1-5 / trust-02
                  :ARG0 (c1-0 / you)
                  :ARG1 (c1-2 / pig)
                  :time (c1-1 / ever)
                  :polarity -
                  :mode imperative)
      :ARG2 (c1-4 / trust-02
                  :ARG0 c1-0
                  :ARG1 c1-2
                  :time c1-1
                  :mode imperative
                  :polarity -))

# ::snt this is shocking
# ::tokens ["this", "is", "shocking"]
# ::lemmas ["this", "be", "shocking"]
(c2-0 / shock-01
      :ARG0 (c2-1 / this))

# ::snt I know this a pretty fucked up but thats some g shit bruh
# ::tokens ["I", "know", "this", "a", "pretty", "fucked", "up", "but", "that", "s", "some", "g", "shit", "bruh"]
# ::lemmas ["i", "know", "this", "a", "pretty", "fuck", "up", "but", "that", "s", "some", "g", "shit", "bruh"]
(c3-6 / contrast-01
      :ARG1 (c3-3 / know-01
                  :ARG0 (c3-2 / i)
                  :ARG1 (c3-0 / fuck-up-02
                              :ARG1 (c3-8 / this)
                              :degree (c3-5 / pretty)))
      :ARG2 (c3-7 / say-01
                  :ARG0 c3-2
                  :ARG1 c3-0
                  :ARG2 (c3-9 / person
                              :name (c3-4 / name
                                          :op1 "bitch"
                                          :op2 "bruh")
                              :mod (c3-1 / some))))

# ::snt That's just disgusting action by the police .Like to see that play out in court !!
# ::tokens ["That", "'s", "just", "disgusting", "action", "by", "the", "police", ".Like", "to", "see", "that", "play", "out", "in", "court", "!", "!"]
# ::lemmas ["that", "be", "just", "disgusting", "action", "by", "the", "police", ".like", "to", "see", "that", "play", "out", "in", "court", "!", "!"]
(c4-4 / act-02
      :ARG0 (c4-1 / police)
      :ARG0-of (c4-2 / disgust-01)
      :mod (c4-0 / just)
      :domain (c4-3 / that))

# ::snt hey post that pic of your boy stealing those cigars it's been real quite since new evidence came out
# ::tokens ["hey", "post", "that", "pic", "of", "your", "boy", "stealing", "those", "cigars", "it", "'s", "been", "real", "quite", "since", "new", "evidence", "came", "out"]
# ::lemmas ["hey", "post", "that", "pic", "of", "your", "boy", "steal", "those", "cigar", "it", "be", "be", "real", "quite", "since", "new", "evidence", "come", "out"]
(c5-7 / post-01
      :ARG0 (c5-1 / you)
      :ARG1 (c5-13 / picture-01
                   :ARG1 (c5-11 / steal-01
                                :ARG0 (c5-2 / boy
                                            :poss c5-1)
                                :ARG1 (c5-9 / cigar
                                            :mod (c5-12 / that))))
      :mod (c5-0 / hey
                 :mode expressive)
      :ARG1-of (c5-8 / real-04
                     :degree (c5-4 / quite)
                     :time (c5-3 / since
                                 :op1 (c5-10 / come-out-09
                                             :ARG1 (c5-5 / evidence-01
                                                         :ARG1-of (c5-6 / new-01)))))
      :mode imperative)

# ::snt thats so fucked man, someone needs to police the police. This is getting out of hand
# ::tokens ["that", "s", "so", "fucked", "man", ",", "someone", "needs", "to", "police", "the", "police", ".", "This", "is", "getting", "out", "of", "hand"]
# ::lemmas ["that", "s", "so", "fuck", "man", ",", "someone", "need", "to", "police", "the", "police", ".", "this", "be", "get", "out", "of", "hand"]
(c6-1 / multi-sentence
      :snt1 (c6-10 / say-01
                   :ARG1 (c6-0 / fuck-01
                               :ARG1 (c6-11 / that)
                               :degree (c6-4 / so))
                   :ARG2 (c6-6 / man))
      :snt2 (c6-5 / need-01
                  :ARG0 (c6-2 / someone)
                  :ARG1 (c6-7 / police-01
                              :ARG0 c6-2
                              :ARG1 c6-6))
      :snt3 (c6-8 / get-03
                  :ARG1 (c6-9 / this)
                  :ARG2 (c6-3 / out-of-hand-10
                              :ARG1 c6-9)))

# ::snt what the fuck.
# ::tokens ["what", "the", "fuck", "."]
# ::lemmas ["what", "the", "fuck", "."]
(c7-1 / amr-unknown
      :mod (c7-0 / fuck))

# ::snt Outrageous.
# ::tokens ["Outrageous", "."]
# ::lemmas ["outrageous", "."]
(c8-0 / outrage-01)

# ::snt right is this like the collage kid?
# ::tokens ["right", "is", "this", "like", "the", "collage", "kid", "?"]
# ::lemmas ["right", "be", "this", "like", "the", "collage", "kid", "?"]
(c9-2 / request-confirmation-91
      :ARG1 (c9-1 / resemble-01
                  :ARG1 (c9-4 / this)
                  :ARG2 (c9-0 / kid
                              :mod (c9-3 / college))))

# ::snt Without knowing anything more than in this article, I must say THAT IS/WAS 'ucking FOUL!
# ::tokens ["Without", "knowing", "anything", "more", "than", "in", "this", "article", ",", "I", "must", "say", "THAT", "IS", "/", "WAS", "'", "ucking", "FOUL", "!"]
# ::lemmas ["without", "know", "anything", "more", "than", "in", "this", "article", ",", "i", "must", "say", "that", "be", "/", "be", "'", "ucke", "FOUL", "!"]
(c10-3 / obligate-01
       :ARG1 (c10-6 / i)
       :ARG2 (c10-10 / say-01
                     :ARG0 c10-6
                     :ARG1 (c10-4 / slash
                                  :op1 (c10-1 / fucking
                                              :domain (c10-11 / that))
                                  :op2 (c10-7 / fucking
                                              :domain c10-11)))
       :manner (c10-8 / know-01
                      :ARG0 c10-6
                      :ARG1 (c10-12 / anything
                                    :ARG1-of (c10-0 / have-quant-91
                                                    :ARG3 (c10-2 / more)
                                                    :ARG4 (c10-5 / article
                                                                 :mod (c10-9 / this))))
                      :polarity -))

# ::snt No words RT : cops beat a man and charged him with getting his blood on their uniforms
# ::tokens ["No", "words", "RT", ":", "cops", "beat", "a", "man", "and", "charged", "him", "with", "getting", "his", "blood", "on", "their", "uniforms"]
# ::lemmas ["no", "word", "RT", ":", "cop", "beat", "a", "man", "and", "charge", "he", "with", "get", "his", "blood", "on", "their", "uniform"]
(c11-0 / word-01
       :ARG1 (c11-11 / and
                     :op1 (c11-3 / beat-01
                                 :ARG0 (c11-7 / cop)
                                 :ARG1 (c11-1 / man))
                     :op2 (c11-6 / charge-05
                                 :ARG0 c11-7
                                 :ARG1 c11-1
                                 :ARG2 (c11-8 / get-01
                                              :ARG0 c11-7
                                              :ARG1 (c11-9 / blood
                                                           :poss c11-1)
                                              :location (c11-2 / uniform
                                                               :poss c11-7))))
       :ARG1-of (c11-10 / say-01
                        :ARG0 (c11-5 / publication
                                     :name (c11-4 / name
                                                  :op1 "RT")))
       :polarity -)

# ::snt but go head and cry Thays all you want to do one day all of America will catch on then it's game over
# ::tokens ["but", "go", "head", "and", "cry", "Thays", "all", "you", "want", "to", "do", "one", "day", "all", "of", "America", "will", "catch", "on", "then", "it", "'s", "game", "over"]
# ::lemmas ["but", "go", "head", "and", "cry", "Thays", "all", "you", "want", "to", "do", "one", "you", "all", "of", "America", "will", "catch", "on", "then", "it", "be", "game", "over"]
(c12-17 / contrast-01
        :ARG2 (c12-5 / and
                     :op1 (c12-9 / go-06
                                 :ARG0 (c12-14 / you)
                                 :ARG1 (c12-6 / head)
                                 :mode imperative)
                     :op2 (c12-2 / cry-02
                                 :ARG0 c12-14
                                 :mode imperative)
                     :ARG1-of (c12-12 / cause-01
                                      :ARG0 (c12-10 / want-01
                                                    :ARG0 c12-14
                                                    :ARG1 (c12-3 / do-02
                                                                 :ARG0 c12-14
                                                                 :ARG1 (c12-11 / all))
                                                    :time (c12-0 / day
                                                                 :mod (c12-16 / one))))
                     :ARG1-of (c12-13 / cause-01
                                      :ARG0 (c12-1 / catch-on-04
                                                   :ARG1 (c12-7 / broadcast-program
                                                                :name (c12-8 / name
                                                                             :op1 "All"
                                                                             :op2 "America"))
                                                   :time (c12-18 / then
                                                                 :op1 (c12-15 / over-01
                                                                              :ARG1 (c12-4 / game)))))))

# ::snt omg
# ::tokens ["omg"]
# ::lemmas ["omg"]
(c13-0 / oh-my-god
       :mode expressive)

# ::snt DONT TRUST A PIG AND THEIR BODY CAM AND HERE'S PROOF!
# ::tokens ["DONT", "TRUST", "A", "PIG", "AND", "THEIR", "BODY", "CAM", "AND", "HERE", "'S", "PROOF", "!"]
# ::lemmas ["DONT", "TRUST", "a", "pig", "and", "their", "body", "CAM", "and", "here", "'s", "PROOF", "!"]
(c14-8 / and
       :op1 (c14-2 / force-01
                   :ARG0 (c14-1 / you)
                   :ARG2 (c14-4 / and
                                :op1 (c14-5 / pig)
                                :op2 (c14-6 / camera
                                            :mod (c14-3 / body)
                                            :poss c14-5))
                   :polarity -
                   :mode imperative)
       :op2 (c14-7 / prove-01
                   :location (c14-0 / here)
                   :mode expressive))

# ::snt What in the actual fuck is wrong with 'murica ? Have these people lost the plot completely?
# ::tokens ["What", "in", "the", "actual", "fuck", "is", "wrong", "with", "'", "murica", "?", "Have", "these", "people", "lost", "the", "plot", "completely", "?"]
# ::lemmas ["what", "in", "the", "actual", "fuck", "be", "wrong", "with", "'", "murica", "?", "have", "these", "people", "lose", "the", "plot", "completely", "?"]
(c15-2 / multi-sentence
       :snt1 (c15-0 / wrong-02
                    :ARG1 (c15-11 / amr-unknown
                                  :mod (c15-1 / fuck
                                              :ARG1-of (c15-4 / actual-02)))
                    :ARG2 (c15-6 / murder-01))
       :snt2 (c15-3 / lose-02
                    :ARG0 (c15-7 / person
                                 :mod (c15-9 / this))
                    :ARG1 (c15-10 / plot)
                    :ARG1-of (c15-8 / complete-02)
                    :polarity (c15-5 / amr-unknown)))

# ::snt un-be-lie-va-ble
# ::tokens ["un", "-", "be", "-", "lie", "-", "va", "-", "ble"]
# ::lemmas ["un", "-", "be", "-", "lie", "-", "va", "-", "ble"]
(c16-0 / string-entity
       :value "un-be-lie-va-ble")

# ::snt Front if his head looks like the back of George Zimmermans head doesn't it.
# ::tokens ["Front", "if", "his", "head", "looks", "like", "the", "back", "of", "George", "Zimmermans", "head", "does", "n't", "it", "."]
# ::lemmas ["front", "if", "his", "head", "look", "like", "the", "back", "of", "George", "Zimmermans", "head", "do", "not", "it", "."]
(c17-0 / have-condition-91
       :ARG1 (c17-1 / front)
       :ARG2 (c17-2 / look-02
                    :ARG0 (c17-9 / head
                                 :part-of (c17-5 / he))
                    :ARG1 (c17-3 / back
                                 :part-of (c17-8 / head
                                                 :part-of (c17-6 / person
                                                                 :name (c17-4 / name
                                                                              :op1 "George"
                                                                              :op2 "Zimmermans"))))
                    :ARG1-of (c17-7 / request-confirmation-91)))

# ::snt Horrible! Is that how he was treated?? Ferguson is supposedly in the USA, isn't it??
# ::tokens ["Horrible", "!", "Is", "that", "how", "he", "was", "treated", "?", "?", "Ferguson", "is", "supposedly", "in", "the", "USA", ",", "is", "n't", "it", "?", "?"]
# ::lemmas ["horrible", "!", "be", "that", "how", "he", "be", "treat", "?", "?", "Ferguson", "be", "supposedly", "in", "the", "USA", ",", "be", "not", "it", "?", "?"]
(c18-1 / multi-sentence
       :snt1 (c18-0 / horrible
                    :domain (c18-9 / treat-01
                                   :ARG1 (c18-10 / he)
                                   :ARG2 (c18-7 / that))
                    :mode expressive)
       :snt2 (c18-8 / suppose-02
                    :ARG1 (c18-4 / person
                                 :name (c18-2 / name
                                              :op1 "Ferguson"))
                    :location (c18-6 / country
                                     :name (c18-3 / name
                                                  :op1 "USA"))
                    :ARG1-of (c18-5 / request-confirmation-91)))

# ::snt arrested with intent to bleed. He should bleed insanity
# ::tokens ["arrested", "with", "intent", "to", "bleed", ".", "He", "should", "bleed", "insanity"]
# ::lemmas ["arrest", "with", "intent", "to", "bleed", ".", "he", "should", "bleed", "insanity"]
(c19-2 / multi-sentence
       :snt1 (c19-8 / arrest-01
                    :ARG1 (c19-0 / he)
                    :ARG2 (c19-4 / intend-01
                                 :ARG0 c19-0
                                 :ARG1 (c19-3 / bleed-01
                                              :ARG1 c19-0)))
       :snt2 (c19-5 / recommend-01
                    :ARG1 (c19-6 / bleed-01
                                 :ARG0 (c19-1 / he)
                                 :ARG1 (c19-7 / insanity))))

# ::snt Sad to see this still! Cops need some education in giving solutions! Not making problems and injustice!
# ::tokens ["Sad", "to", "see", "this", "still", "!", "Cops", "need", "some", "education", "in", "giving", "solutions", "!", "Not", "making", "problems", "and", "injustice", "!"]
# ::lemmas ["sad", "to", "see", "this", "still", "!", "cop", "need", "some", "education", "in", "give", "solution", "!", "not", "make", "problem", "and", "injustice", "!"]
(c20-3 / multi-sentence
       :snt1 (c20-12 / sad-02
                     :ARG0 (c20-5 / see-01
                                  :ARG1 (c20-13 / this)
                                  :time (c20-2 / still)))
       :snt2 (c20-7 / need-01
                    :ARG0 (c20-10 / cop)
                    :ARG1 (c20-6 / educate-01
                                 :ARG1 c20-10
                                 :ARG2 (c20-11 / give-01
                                               :ARG0 c20-10
                                               :ARG1 (c20-4 / solution))
                                 :mod (c20-0 / some)))
       :snt3 (c20-8 / make-01
                    :ARG0 c20-10
                    :ARG1 (c20-14 / and
                                  :op1 (c20-9 / problem)
                                  :op2 (c20-1 / justice
                                              :polarity -))
                    :polarity -))

# ::snt No words.
# ::tokens ["No", "words", "."]
# ::lemmas ["no", "word", "."]
(c21-0 / word
       :polarity -)

# ::snt soooooooo messed up
# ::tokens ["soooooooo", "messed", "up"]
# ::lemmas ["soooooooo", "mess", "up"]
(c22-1 / mess-up-02
       :degree (c22-0 / so))

# ::snt stfu
# ::tokens ["stfu"]
# ::lemmas ["stfu"]
(c23-1 / thing
       :name (c23-0 / name
                    :op1 "stfu"))
