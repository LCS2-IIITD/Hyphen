# ::snt ThatDepends~NoDiaper~WhetherI.AM.Invited?OhWhatWouldIWear?KarlIsNotHere...IHaven'tSleptInTooManyHoursSoHowBeeIBeginANapNow?
# ::tokens ["ThatDepends", "~", "NoDiaper", "~", "WhetherI.AM.Invited?OhWhatWouldIWear?KarlIsNotHere", "...", "IHaven'tSleptInTooManyHoursSoHowBeeIBeginANapNow", "?"]
# ::lemmas ["ThatDepends", "~", "NoDiaper", "~", "whetheri.am.invited?ohwhatwouldiwear?karlisnothere", "...", "IHaven'tSleptInTooManyHoursSoHowBeeIBeginANapNow", "?"]
(c1-4 / depend-01
      :ARG0 (c1-19 / that)
      :ARG1 (c1-15 / or
                   :op1 (c1-12 / thing
                               :name (c1-7 / name
                                           :op1 "NoDiaper")
                               :polarity -)
                   :op2 (c1-10 / thing
                               :name (c1-17 / name
                                            :op1 "WhetherI.AM.")
                               :polarity -)
                   :op3 (c1-16 / thing
                               :ARG1-of (c1-9 / invite-01)
                               :polarity -)
                   :op4 (c1-18 / thing
                               :ARG1-of (c1-8 / wear-01
                                              :ARG0 (c1-11 / i))
                               :mod (c1-13 / oh
                                           :mode expressive))
                   :op5 (c1-3 / person
                              :name (c1-1 / name
                                          :op1 "Karl"
                                          :op2 "Is"
                                          :op3 "Not"
                                          :op4 "Here"))
                   :op6 (c1-6 / have-06
                              :ARG0 c1-11
                              :ARG1 (c1-5 / hour
                                          :ARG1-of (c1-2 / have-quant-91
                                                         :ARG2 (c1-0 / many)
                                                         :ARG3 (c1-14 / too)))
                              :polarity -)))

# ::snt OHLetMeTakeLongNapI.AM.LooKINg4WHO?2BRiNGWHAT?UhOH!'TCHAThinkUKNOW?LedgeOutSide
# ::tokens ["OHLetMeTakeLongNapI.AM.LooKINg4WHO?2BRiNGWHAT?UhOH!'TCHAThinkUKNOW?LedgeOutSide"]
# ::lemmas ["ohletmetakelongnapi.am.looking4who?2bringwhat?uhoh!'tchathinkuknow?ledgeoutside"]
(c2-2 / multi-sentence
      :snt1 (c2-3 / oh-my-god)
      :snt2 (c2-1 / let-01
                  :ARG0 (c2-0 / you)
                  :ARG1 (c2-6 / take-01
                              :ARG0 (c2-4 / i)
                              :ARG1 (c2-5 / Nap-01
                                          :ARG0 c2-4))
                  :mode imperative)
      :snt3 (c2-7 / amr-unintelligible
                  :value "LooKINg4WHO?2BRiNGWHAT?Uhoh!' :snt4 ( amr-unintelligible :value "))

# ::snt IWon'tFitMyClothesYeahNeverAgainPlayingNoFrumpyCharactersGonnaTake3Mths2TakeOFF30LbsAgainYeahWeLLTheROLERequiredROLLSMUFFIN
# ::tokens ["IWon'tFitMyClothesYeahNeverAgainPlayingNoFrumpyCharactersGonnaTake3Mths2TakeOFF30LbsAgainYeahWeLLTheROLERequiredROLLSMUFFIN"]
# ::lemmas ["iwon'tfitmyclothesyeahneveragainplayingnofrumpycharactersgonnatake3mths2takeoff30lbsagainyeahwelltherolerequiredrollsmuffin"]
(c3-14 / and
       :op1 (c3-0 / fit-06
                  :ARG1 (c3-4 / i)
                  :ARG2 (c3-10 / clothes
                               :poss c3-4)
                  :polarity -)
       :op2 (c3-8 / play-01
                  :ARG0 c3-4
                  :ARG1 (c3-9 / character
                              :mod (c3-5 / frumpy))
                  :mod (c3-3 / again
                             :mod (c3-1 / ever))
                  :polarity -)
       :op3 (c3-13 / take-01
                   :ARG0 c3-4
                   :ARG1 (c3-12 / thing
                                :unit (c3-7 / thread)
                                :quant 3)
                   :mod c3-3)
       :op4 (c3-2 / take-01
                  :ARG0 c3-4
                  :ARG1 (c3-6 / thing
                              :name (c3-11 / name
                                           :op1 "TakeOFF30LbsAgain")
                              :quant 2)
                  :mod c3-3))

# ::snt That's the Q needs an A. right? If anyone can figure it out, its !
# ::tokens ["That", "'s", "the", "Q", "needs", "an", "A.", "right", "?", "If", "anyone", "can", "figure", "it", "out", ",", "its", "!"]
# ::lemmas ["that", "be", "the", "Q", "need", "an", "a.", "right", "?", "if", "anyone", "can", "figure", "it", "out", ",", "its", "!"]
(c4-2 / multi-sentence
      :snt1 (c4-4 / need-01
                  :ARG0 (c4-7 / string-entity
                              :value "A.")
                  :domain (c4-8 / that)
                  :ARG1-of (c4-6 / request-confirmation-91))
      :snt2 (c4-0 / have-condition-91
                  :ARG1 (c4-3 / it)
                  :ARG2 (c4-5 / possible-01
                              :ARG1 (c4-1 / figure-out-05
                                          :ARG0 (c4-9 / anyone)
                                          :ARG1 c4-3))))
