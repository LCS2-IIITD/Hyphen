# ::snt that's letting her off way too easy!
# ::tokens ["that", "'s", "letting", "her", "off", "way", "too", "easy", "!"]
# ::lemmas ["that", "be", "let", "she", "off", "way", "too", "easy", "!"]
(c1-2 / let-01
      :ARG0 (c1-7 / that)
      :ARG1 (c1-4 / get-off-23
                  :ARG1 (c1-6 / she)
                  :ARG1-of (c1-3 / easy-05
                                 :ARG2-of (c1-0 / have-degree-91
                                                :ARG1 c1-2
                                                :ARG3 (c1-5 / too
                                                            :quant (c1-1 / way))))))

# ::snt Exactly!
# ::tokens ["Exactly", "!"]
# ::lemmas ["exactly", "!"]
(c2-0 / exact)

# ::snt Guess the gunman wasn't listening to her. Then again, we should empathize with him, according to Hilary.
# ::tokens ["Guess", "the", "gunman", "was", "n't", "listening", "to", "her", ".", "Then", "again", ",", "we", "should", "empathize", "with", "him", ",", "according", "to", "Hilary", "."]
# ::lemmas ["guess", "the", "gunman", "be", "not", "listen", "to", "she", ".", "then", "again", ",", "we", "should", "empathize", "with", "he", ",", "accord", "to", "Hilary", "."]
(c3-2 / multi-sentence
      :snt1 (c3-9 / guess-01
                  :ARG1 (c3-1 / listen-01
                              :ARG0 (c3-7 / gunman)
                              :ARG1 (c3-10 / she)
                              :polarity -))
      :snt2 (c3-3 / say-01
                  :ARG0 (c3-6 / person
                              :name (c3-5 / name
                                          :op1 "Hilary"))
                  :ARG1 (c3-8 / recommend-01
                              :ARG1 (c3-4 / empathize-01
                                          :ARG0 (c3-0 / we)
                                          :ARG1 c3-7)
                              :mod (c3-12 / again
                                          :mod (c3-11 / then)))))

# ::snt GO HOME!!!!
# ::tokens ["GO", "HOME", "!", "!", "!", "!"]
# ::lemmas ["GO", "HOME", "!", "!", "!", "!"]
(c4-2 / go-02
      :ARG0 (c4-1 / you)
      :ARG4 (c4-0 / home)
      :mode imperative)

# ::snt in original country they r discrete, bt here they provoke.
# ::tokens ["in", "original", "country", "they", "r", "discrete", ",", "bt", "here", "they", "provoke", "."]
# ::lemmas ["in", "original", "country", "they", "r", "discrete", ",", "bt", "here", "they", "provoke", "."]
(c5-6 / and
      :op1 (c5-3 / discrete
                 :domain (c5-5 / they)
                 :location (c5-4 / country
                                 :mod (c5-1 / original))
                 :polarity -)
      :op2 (c5-2 / provoke-01
                 :ARG0 c5-5
                 :location (c5-0 / here)))

# ::snt We all know is an utter incompetent fool that is totally out of touch w/ the real world Feinstein
# ::tokens ["We", "all", "know", "is", "an", "utter", "incompetent", "fool", "that", "is", "totally", "out", "of", "touch", "w/", "the", "real", "world", "Feinstein"]
# ::lemmas ["we", "all", "know", "be", "an", "utter", "incompetent", "fool", "that", "be", "totally", "out", "of", "touch", "w/", "the", "real", "world", "Feinstein"]
(c6-10 / know-01
       :ARG0 (c6-0 / we
                   :mod (c6-11 / all))
       :ARG1 (c6-1 / fool
                   :ARG1-of (c6-8 / competent-01
                                  :mod (c6-2 / utter)
                                  :polarity -)
                   :ARG1-of (c6-3 / in-touch-11
                                  :ARG2 (c6-4 / world
                                              :ARG1-of (c6-7 / real-04))
                                  :degree (c6-9 / total)
                                  :polarity -)
                   :domain (c6-6 / person
                                 :name (c6-5 / name
                                             :op1 "Feinstein"))))

# ::snt they r blocking the road where is the police?
# ::tokens ["they", "r", "blocking", "the", "road", "where", "is", "the", "police", "?"]
# ::lemmas ["they", "r", "block", "the", "road", "where", "be", "the", "police", "?"]
(c7-3 / block-01
      :ARG0 (c7-1 / they)
      :ARG1 (c7-0 / road)
      :location (c7-2 / amr-unknown))

# ::snt Now David you KNOW I can't RT that!
# ::tokens ["Now", "David", "you", "KNOW", "I", "ca", "n't", "RT", "that", "!"]
# ::lemmas ["now", "David", "you", "know", "i", "can", "not", "rt", "that", "!"]
(c8-5 / say-01
      :ARG0 (c8-0 / i)
      :ARG1 (c8-7 / know-01
                  :ARG0 (c8-3 / person
                              :name (c8-1 / name
                                          :op1 "David"))
                  :ARG1 (c8-8 / possible-01
                              :ARG1 (c8-4 / RT-01
                                          :ARG0 c8-0
                                          :ARG1 (c8-6 / that))
                              :polarity -)
                  :time (c8-2 / now))
      :ARG2 c8-3)

# ::snt Well she should prolly B put down like the rabid dog she is,but I feel charitable day
# ::tokens ["Well", "she", "should", "prolly", "B", "put", "down", "like", "the", "rabid", "dog", "she", "is", ",", "but", "I", "feel", "charitable", "day"]
# ::lemmas ["well", "she", "should", "prolly", "b", "put", "down", "like", "the", "rabid", "dog", "she", "be", ",", "but", "i", "feel", "charitable", "day"]
(c9-8 / contrast-01
      :ARG1 (c9-7 / recommend-01
                  :ARG1 (c9-6 / put-down-15
                              :ARG0 (c9-11 / she)
                              :ARG1-of (c9-5 / resemble-01
                                             :ARG2 (c9-12 / put-down-15
                                                          :ARG0 c9-11
                                                          :ARG1 (c9-9 / dog
                                                                      :mod (c9-3 / rabies)
                                                                      :domain c9-11))))
                  :mod (c9-0 / well))
      :ARG2 (c9-2 / feel-01
                  :ARG0 (c9-4 / i)
                  :ARG1 (c9-1 / day
                              :mod (c9-10 / charitable))))

# ::snt Lololol very Feinsteinian of you, so selfless and brave
# ::tokens ["Lololol", "very", "Feinsteinian", "of", "you", ",", "so", "selfless", "and", "brave"]
# ::lemmas ["lololol", "very", "Feinsteinian", "of", "you", ",", "so", "selfless", "and", "brave"]
(c11-12 / say-01
        :ARG1 (c11-6 / ian
                     :mod (c11-9 / person
                                 :name (c11-7 / name
                                              :op1 "Feinstein"))
                     :degree (c11-8 / very)
                     :domain (c11-0 / you)
                     :ARG1-of (c11-10 / cause-01
                                      :ARG0 (c11-13 / and
                                                    :op1 (c11-5 / selfless
                                                                :degree (c11-1 / so))
                                                    :op2 (c11-3 / brave-02
                                                                :degree (c11-4 / so))))
                     :mod (c11-2 / laugh-01
                                 :manner (c11-11 / loud)
                                 :mode expressive))
        :ARG2 c11-0)

# ::snt Too bad the person filming this didn't have an AR-15.
# ::tokens ["Too", "bad", "the", "person", "filming", "this", "did", "n't", "have", "an", "AR-15", "."]
# ::lemmas ["too", "bad", "the", "person", "film", "this", "do", "not", "have", "an", "AR-15", "."]
(c12-2 / bad-07
       :ARG1 (c12-0 / have-03
                    :ARG0 (c12-4 / person
                                 :ARG0-of (c12-1 / film-01
                                                 :ARG1 (c12-6 / this)))
                    :ARG1 (c12-7 / product
                                 :name (c12-3 / name
                                              :op1 "AR-15"))
                    :polarity -)
       :ARG2-of (c12-8 / have-degree-91
                       :ARG1 c12-0
                       :ARG3 (c12-5 / too)))

# ::snt Dianne, I mean this sincerely, GO AND FUCK YOURSELF!
# ::tokens ["Dianne", ",", "I", "mean", "this", "sincerely", ",", "GO", "AND", "FUCK", "YOURSELF", "!"]
# ::lemmas ["Dianne", ",", "i", "mean", "this", "sincerely", ",", "GO", "and", "fuck", "yourself", "!"]
(c13-6 / say-01
       :ARG0 (c13-2 / i)
       :ARG1 (c13-7 / and
                    :op1 (c13-5 / go-02
                                :ARG0 (c13-4 / person
                                             :name (c13-3 / name
                                                          :op1 "Dianne"))
                                :mode imperative)
                    :op2 (c13-0 / fuck-01
                                :ARG0 c13-4
                                :ARG1 c13-4
                                :mode imperative))
       :ARG2 c13-4
       :manner (c13-1 / sincere))

# ::snt Couldn't have said it better! That tweet is now on my
# ::tokens ["Could", "n't", "have", "said", "it", "better", "!", "That", "tweet", "is", "now", "on", "my"]
# ::lemmas ["could", "not", "have", "say", "it", "well", "!", "that", "tweet", "be", "now", "on", "my"]
(c14-2 / multi-sentence
       :snt1 (c14-8 / possible-01
                    :ARG1 (c14-13 / say-01
                                  :ARG0 (c14-5 / i)
                                  :ARG1 (c14-10 / it)
                                  :ARG1-of (c14-0 / have-degree-91
                                                  :ARG2 (c14-11 / good-02
                                                                :ARG1 c14-13)
                                                  :ARG3 (c14-9 / more)))
                    :polarity -)
       :snt2 (c14-3 / be-located-at-91
                    :ARG1 (c14-14 / thing
                                  :ARG1-of (c14-12 / tweet-01
                                                   :ARG0 (c14-1 / i))
                                  :mod (c14-7 / that))
                    :ARG2 (c14-4 / i)
                    :time (c14-6 / now)))

# ::snt poor ole Dianne...she never was known to use her brain before her mouth
# ::tokens ["poor", "ole", "Dianne", "...", "she", "never", "was", "known", "to", "use", "her", "brain", "before", "her", "mouth"]
# ::lemmas ["poor", "ole", "Dianne", "...", "she", "never", "be", "know", "to", "use", "her", "brain", "before", "her", "mouth"]
(c15-7 / say-01
       :ARG1 (c15-8 / know-01
                    :ARG1 (c15-1 / use-01
                                 :ARG0 (c15-5 / person
                                              :part (c15-2 / brain)
                                              :name (c15-4 / name
                                                           :op1 "Dianne")
                                              :part (c15-0 / mouth))
                                 :ARG1 c15-2
                                 :time (c15-3 / ever)
                                 :location (c15-6 / before
                                                  :op1 c15-0))
                    :polarity -)
       :ARG2 c15-5
       :mod (c15-9 / poor))

# ::snt Feinstein is a pathetic excuse for human flesh. She should be heavily medicated and put away...
# ::tokens ["Feinstein", "is", "a", "pathetic", "excuse", "for", "human", "flesh", ".", "She", "should", "be", "heavily", "medicated", "and", "put", "away", "..."]
# ::lemmas ["Feinstein", "be", "a", "pathetic", "excuse", "for", "human", "flesh", ".", "she", "should", "be", "heavily", "medicate", "and", "put", "away", "..."]
(c16-2 / multi-sentence
       :snt1 (c16-5 / excuse-02
                    :ARG1 (c16-1 / flesh
                                 :part-of (c16-0 / human))
                    :ARG2 (c16-8 / person
                                 :name (c16-7 / name
                                              :op1 "Feinstein"))
                    :mod (c16-12 / pathetic))
       :snt2 (c16-9 / recommend-01
                    :ARG1 (c16-13 / and
                                  :op1 (c16-10 / medicate-01
                                               :ARG1 (c16-11 / she)
                                               :manner (c16-3 / heavy))
                                  :op2 (c16-4 / put-01
                                              :ARG1 c16-11
                                              :ARG2 (c16-6 / away)))))

# ::snt . Rule , never bring a whistle to a gun fight!
# ::tokens [".", "Rule", ",", "never", "bring", "a", "whistle", "to", "a", "gun", "fight", "!"]
# ::lemmas [".", "rule", ",", "never", "bring", "a", "whistle", "to", "a", "gun", "fight", "!"]
(c18-5 / rule-01
       :ARG1 (c18-3 / bring-01
                    :ARG0 (c18-1 / you)
                    :ARG1 (c18-0 / whistle)
                    :ARG2 (c18-2 / fight-01
                                 :instrument (c18-6 / gun))
                    :time (c18-4 / ever)
                    :polarity -
                    :mode imperative))

# ::snt . Unarmed French police arriving on bicycles, with ISLAMIC NoGo Zones in the city. Brilliant! Strong case for
# ::tokens [".", "Unarmed", "French", "police", "arriving", "on", "bicycles", ",", "with", "ISLAMIC", "NoGo", "Zones", "in", "the", "city", ".", "Brilliant", "!", "Strong", "case", "for"]
# ::lemmas [".", "unarmed", "French", "police", "arrive", "on", "bicycle", ",", "with", "ISLAMIC", "NoGo", "Zones", "in", "the", "city", ".", "brilliant", "!", "strong", "case", "for"]
(c19-0 / multi-sentence
       :snt1 (c19-14 / arrive-01
                     :ARG1 (c19-7 / police
                                  :mod (c19-9 / country
                                              :name (c19-5 / name
                                                           :op1 "France"))
                                  :ARG1-of (c19-4 / arm-01
                                                  :polarity -))
                     :manner (c19-2 / bicycle)
                     :accompanier (c19-1 / zone
                                         :name (c19-6 / name
                                                      :op1 "NoGo"
                                                      :op2 "Zones")
                                         :mod (c19-3 / organization
                                                     :name (c19-8 / name
                                                                  :op1 "ISA"))
                                         :location (c19-10 / city)))
       :snt2 (c19-11 / brilliant-01)
       :snt3 (c19-12 / case-03
                     :ARG1-of (c19-13 / strong-02)))

# ::snt FARLEFT LOGIC&ampLICY": said this awhile back. Unbelievably ignorant.
# ::tokens ["FARLEFT", "LOGIC&ampLICY", "\"", ":", "said", "this", "awhile", "back", ".", "Unbelievably", "ignorant", "."]
# ::lemmas ["FARLEFT", "LOGIC&ampLICY", "\"", ":", "say", "this", "awhile", "back", ".", "unbelievably", "ignorant", "."]
(c20-1 / multi-sentence
       :snt1 (c20-7 / say-01
                    :ARG0 (c20-3 / i)
                    :ARG1 (c20-8 / this)
                    :time (c20-2 / before
                                 :quant (c20-0 / while)))
       :snt2 (c20-6 / ignorant-02
                    :ARG1-of (c20-5 / believe-01
                                    :ARG1-of (c20-4 / possible-01
                                                    :polarity -))))

# ::snt . Same Prayers in streets are BURDENING New York &amp; cities in the Western World
# ::tokens [".", "Same", "Prayers", "in", "streets", "are", "BURDENING", "New", "York", "&", "amp", ";", "cities", "in", "the", "Western", "World"]
# ::lemmas [".", "Same", "Prayers", "in", "street", "be", "BURDENING", "New", "York", "&", "amp", ";", "city", "in", "the", "Western", "World"]
(c21-11 / and
        :op1 (c21-1 / bury-01
                    :ARG1 (c21-5 / person
                                 :ARG0-of (c21-10 / pray-01)
                                 :ARG1-of (c21-9 / same-01)
                                 :location (c21-2 / street))
                    :location (c21-7 / city
                                     :name (c21-3 / name
                                                  :op1 "New"
                                                  :op2 "York")))
        :op2 (c21-8 / bury-01
                    :ARG1 c21-5
                    :location (c21-6 / city
                                     :location (c21-0 / world-region
                                                      :name (c21-4 / name
                                                                   :op1 "West")))))
