# ::snt People get mad when they are made to look like morons. Lol.
# ::tokens ["People", "get", "mad", "when", "they", "are", "made", "to", "look", "like", "morons", ".", "Lol", "."]
# ::lemmas ["people", "get", "mad", "when", "they", "be", "make", "to", "look", "like", "moron", ".", "Lol", "."]
(c1-2 / multi-sentence
      :snt1 (c1-7 / get-03
                  :ARG1 (c1-4 / person)
                  :ARG2 (c1-5 / mad-04
                              :ARG0 (c1-1 / make-02
                                          :ARG1 (c1-3 / look-02
                                                      :ARG0 c1-4
                                                      :ARG1 (c1-6 / moron)))
                              :ARG1 c1-4))
      :snt2 (c1-8 / laugh-01
                  :manner (c1-0 / loud)
                  :mode expressive))

# ::snt : Community asks Nixon, "why was your response delayed to our community?"
# ::tokens [":", "Community", "asks", "Nixon", ",", "\"", "why", "was", "your", "response", "delayed", "to", "our", "community", "?", "\""]
# ::lemmas [":", "community", "ask", "Nixon", ",", "\"", "why", "be", "your", "response", "delay", "to", "our", "community", "?", "\""]
(c2-8 / ask-01
      :ARG0 (c2-5 / community)
      :ARG1 (c2-4 / delay-01
                  :ARG1 (c2-3 / respond-01
                              :ARG0 (c2-2 / person
                                          :name (c2-1 / name
                                                      :op1 "Nixon"))
                              :ARG2 (c2-6 / community
                                          :poss c2-5))
                  :ARG1-of (c2-7 / cause-01
                                 :ARG0 (c2-0 / amr-unknown)))
      :ARG2 c2-2)

# ::snt Nixon is dying up there
# ::tokens ["Nixon", "is", "dying", "up", "there"]
# ::lemmas ["Nixon", "be", "die", "up", "there"]
(c3-3 / die-01
      :ARG1 (c3-2 / person
                  :name (c3-1 / name
                              :op1 "Nixon"))
      :location (c3-4 / there
                      :direction (c3-0 / up)))

# ::snt Fox2 just started cutting away, interrupting a woman asking a question
# ::tokens ["Fox2", "just", "started", "cutting", "away", ",", "interrupting", "a", "woman", "asking", "a", "question"]
# ::lemmas ["Fox2", "just", "start", "cut", "away", ",", "interrupt", "a", "woman", "ask", "a", "question"]
(c4-8 / start-01
      :ARG0 (c4-2 / broadcast-program
                  :name (c4-6 / name
                              :op1 "Fox2"))
      :ARG1 (c4-9 / and
                  :op1 (c4-7 / cut-away-04
                             :ARG0 c4-2)
                  :op2 (c4-5 / interrupt-01
                             :ARG0 c4-2
                             :ARG1 (c4-1 / woman
                                         :ARG0-of (c4-4 / ask-01
                                                        :ARG1 (c4-3 / question-01
                                                                    :ARG0 c4-1)))))
      :time (c4-0 / just))

# ::snt They had to come up with a great excuse. If the Officer knew of the robbery why weren't "suspects" arrested?
# ::tokens ["They", "had", "to", "come", "up", "with", "a", "great", "excuse", ".", "If", "the", "Officer", "knew", "of", "the", "robbery", "why", "were", "n't", "\"", "suspects", "\"", "arrested", "?"]
# ::lemmas ["they", "have", "to", "come", "up", "with", "a", "great", "excuse", ".", "if", "the", "Officer", "know", "of", "the", "robbery", "why", "be", "not", "\"", "suspect", "\"", "arrest", "?"]
(c5-1 / multi-sentence
      :snt1 (c5-2 / obligate-01
                  :ARG1 (c5-12 / they)
                  :ARG2 (c5-8 / come-up-11
                              :ARG0 c5-12
                              :ARG1 (c5-3 / excuse-02
                                          :ARG0 c5-12
                                          :mod (c5-9 / great))))
      :snt2 (c5-13 / arrest-01
                   :ARG1 (c5-6 / person
                               :ARG2-of (c5-11 / suspect-01))
                   :ARG1-of (c5-7 / cause-01
                                  :ARG0 (c5-4 / amr-unknown))
                   :condition (c5-5 / know-01
                                    :ARG0 (c5-0 / officer)
                                    :ARG1 (c5-10 / rob-01))
                   :polarity -))

# ::snt Where is Lacy Clay? These are also his people. Suit shopping?
# ::tokens ["Where", "is", "Lacy", "Clay", "?", "These", "are", "also", "his", "people", ".", "Suit", "shopping", "?"]
# ::lemmas ["where", "be", "Lacy", "Clay", "?", "these", "be", "also", "his", "people", ".", "suit", "shop", "?"]
(c6-1 / multi-sentence
      :snt1 (c6-6 / person
                  :name (c6-4 / name
                              :op1 "Lacy"
                              :op2 "Clay")
                  :location (c6-10 / amr-unknown))
      :snt2 (c6-9 / person
                  :mod (c6-8 / this)
                  :poss (c6-0 / he)
                  :mod (c6-3 / also))
      :snt3 (c6-7 / shop-01
                  :ARG1 (c6-2 / suit)
                  :polarity (c6-5 / amr-unknown)))

# ::snt Tough questions. Emotional time.
# ::tokens ["Tough", "questions", ".", "Emotional", "time", "."]
# ::lemmas ["tough", "question", ".", "emotional", "time", "."]
(c7-0 / multi-sentence
      :snt1 (c7-2 / question-01
                  :ARG1-of (c7-4 / tough-02))
      :snt2 (c7-3 / time
                  :mod (c7-1 / emotion)))

# ::snt check out the from
# ::tokens ["check", "out", "the", "from"]
# ::lemmas ["check", "out", "the", "from"]
(c8-2 / check-out-05
      :ARG0 (c8-1 / you)
      :ARG1 (c8-0 / thing
                  :source (c8-3 / amr-unknown))
      :mode imperative)

# ::snt Community asks Nixon, "why was your response delayed to our community?"
# ::tokens ["Community", "asks", "Nixon", ",", "\"", "why", "was", "your", "response", "delayed", "to", "our", "community", "?", "\""]
# ::lemmas ["community", "ask", "Nixon", ",", "\"", "why", "be", "your", "response", "delay", "to", "our", "community", "?", "\""]
(c9-9 / ask-01
      :ARG0 (c9-6 / community)
      :ARG1 (c9-5 / delay-01
                  :ARG1 (c9-4 / respond-01
                              :ARG0 (c9-3 / person
                                          :name (c9-2 / name
                                                      :op1 "Nixon"))
                              :ARG2 (c9-7 / community
                                          :poss (c9-0 / we)))
                  :ARG1-of (c9-8 / cause-01
                                 :ARG0 (c9-1 / amr-unknown)))
      :ARG2 c9-3)

# ::snt humor is that they ask the white governor this that changed. The black president they praised, did zilch
# ::tokens ["humor", "is", "that", "they", "ask", "the", "white", "governor", "this", "that", "changed", ".", "The", "black", "president", "they", "praised", ",", "did", "zilch"]
# ::lemmas ["humor", "be", "that", "they", "ask", "the", "white", "governor", "this", "that", "change", ".", "the", "black", "president", "they", "praise", ",", "do", "zilch"]
(c10-3 / multi-sentence
       :snt1 (c10-0 / humor
                    :domain (c10-16 / ask-01
                                    :ARG0 (c10-14 / they)
                                    :ARG1 (c10-12 / this
                                                  :ARG1-of (c10-10 / change-01))
                                    :ARG2 (c10-8 / person
                                                 :ARG0-of (c10-2 / have-org-role-91
                                                                 :ARG2 (c10-11 / governor))
                                                 :ARG1-of (c10-1 / white-02))))
       :snt2 (c10-4 / zilch-00
                    :ARG0 (c10-15 / person
                                  :ARG1-of (c10-5 / praise-01
                                                  :ARG0 (c10-7 / they))
                                  :ARG1-of (c10-6 / black-05)
                                  :ARG0-of (c10-9 / have-org-role-91
                                                  :ARG2 (c10-13 / president)))))

# ::snt Dismisses the question about tasers as though irrelevant trivia
# ::tokens ["Dismisses", "the", "question", "about", "tasers", "as", "though", "irrelevant", "trivia"]
# ::lemmas ["dismisse", "the", "question", "about", "taser", "as", "though", "irrelevant", "trivium"]
(c11-2 / dismiss-01
       :ARG0 (c11-1 / person)
       :ARG1 (c11-0 / question-01
                    :ARG1 (c11-5 / taser))
       :ARG2 (c11-4 / trivia
                    :ARG1-of (c11-3 / relevant-01
                                    :polarity -)))

# ::snt "we couldn't just make up EVERYTHING, you know? we needed some loose thread to jump on"
# ::tokens ["\"", "we", "could", "n't", "just", "make", "up", "EVERYTHING", ",", "you", "know", "?", "we", "needed", "some", "loose", "thread", "to", "jump", "on", "\""]
# ::lemmas ["\"", "we", "could", "not", "just", "make", "up", "everything", ",", "you", "know", "?", "we", "need", "some", "loose", "thread", "to", "jump", "on", "\""]
(c12-7 / possible-01
       :ARG1 (c12-4 / make-up-10
                    :ARG0 (c12-1 / we)
                    :ARG1 (c12-5 / everything)
                    :mod (c12-0 / just))
       :ARG1-of (c12-11 / know-01
                        :ARG0 (c12-2 / you)
                        :polarity (c12-13 / amr-unknown))
       :ARG1-of (c12-8 / cause-01
                       :ARG0 (c12-6 / need-01
                                    :ARG0 c12-1
                                    :ARG1 (c12-10 / thread
                                                  :ARG1-of (c12-3 / loose-04)
                                                  :mod (c12-12 / some)
                                                  :ARG2-of (c12-9 / jump-on-04
                                                                  :ARG0 c12-1))))
       :polarity -)
