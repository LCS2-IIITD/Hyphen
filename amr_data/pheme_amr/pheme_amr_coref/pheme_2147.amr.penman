# ::snt "All Muslims are the same" is like saying that every snowflake is exactly alike
# ::tokens ["\"", "All", "Muslims", "are", "the", "same", "\"", "is", "like", "saying", "that", "every", "snowflake", "is", "exactly", "alike"]
# ::lemmas ["\"", "all", "Muslims", "be", "the", "same", "\"", "be", "like", "say", "that", "every", "snowflake", "be", "exactly", "alike"]
(c1-8 / resemble-01
      :ARG1 (c1-9 / same-01
                  :ARG1 (c1-7 / person
                              :mod (c1-5 / religious-group
                                         :name (c1-6 / name
                                                     :op1 "Islam"))
                              :mod (c1-10 / all)))
      :ARG2 (c1-2 / say-01
                  :ARG1 (c1-4 / alike-05
                              :ARG1 (c1-0 / snowflake
                                          :mod (c1-3 / every))
                              :mod (c1-1 / exact))))

# ::snt Thus is another one, wtf
# ::tokens ["Thus", "is", "another", "one", ",", "wtf"]
# ::lemmas ["thus", "be", "another", "one", ",", "wtf"]
(c2-2 / cause-01
      :ARG1 (c2-0 / one
                  :mod (c2-3 / another)
                  :mod (c2-1 / fuck
                             :mode expressive)))

# ::snt ^
# ::tokens ["^"]
# ::lemmas ["^"]
(c3-0 / amr-empty)

# ::snt apparently there's another man near the Eiffel Tower with a gun as well..
# ::tokens ["apparently", "there", "'s", "another", "man", "near", "the", "Eiffel", "Tower", "with", "a", "gun", "as", "well", ".."]
# ::lemmas ["apparently", "there", "be", "another", "man", "near", "the", "Eiffel", "Tower", "with", "a", "gun", "as", "well", ".."]
(c4-3 / near-02
      :ARG1 (c4-1 / man
                  :mod (c4-8 / another)
                  :ARG0-of (c4-0 / have-03
                                 :ARG1 (c4-6 / gun)))
      :ARG2 (c4-7 / tower
                  :name (c4-4 / name
                              :op1 "Eiffel"
                              :op2 "Tower"))
      :mod (c4-2 / as-well)
      :ARG1-of (c4-5 / appear-02))

# ::snt *this
# ::tokens ["*", "this"]
# ::lemmas ["*", "this"]
(c5-0 / this)

# ::snt So all of the Muslims peacefully living in America practice this. Every single one of them
# ::tokens ["So", "all", "of", "the", "Muslims", "peacefully", "living", "in", "America", "practice", "this", ".", "Every", "single", "one", "of", "them"]
# ::lemmas ["so", "all", "of", "the", "Muslims", "peacefully", "live", "in", "America", "practice", "this", ".", "every", "single", "one", "of", "they"]
(c6-1 / multi-sentence
      :snt1 (c6-7 / practice-01
                  :ARG0 (c6-13 / person
                               :mod (c6-8 / religious-group
                                          :name (c6-5 / name
                                                      :op1 "Islam"))
                               :mod (c6-14 / all)
                               :ARG0-of (c6-0 / live-01
                                              :location (c6-9 / country
                                                              :name (c6-6 / name
                                                                          :op1 "America"))
                                              :manner (c6-2 / peaceful)))
                  :ARG1 (c6-12 / this))
      :snt2 (c6-4 / include-91
                  :ARG1 (c6-3 / everyone
                              :ARG1-of (c6-11 / single-02))
                  :ARG2 (c6-10 / they)))

# ::snt Now confirmed as a false alarm thankfully.
# ::tokens ["Now", "confirmed", "as", "a", "false", "alarm", "thankfully", "."]
# ::lemmas ["now", "confirm", "as", "a", "false", "alarm", "thankfully", "."]
(c7-2 / confirm-01
      :ARG1 (c7-4 / alarm-01
                  :mod (c7-0 / false))
      :ARG2-of (c7-3 / thankful-02)
      :time (c7-1 / now))

# ::snt check this one
# ::tokens ["check", "this", "one"]
# ::lemmas ["check", "this", "one"]
(c8-3 / check-01
      :ARG0 (c8-1 / you)
      :ARG1 (c8-0 / one
                  :mod (c8-2 / this))
      :mode imperative)

# ::snt looking like a false alarm
# ::tokens ["looking", "like", "a", "false", "alarm"]
# ::lemmas ["look", "like", "a", "false", "alarm"]
(c9-0 / look-02
      :ARG1 (c9-2 / alarm-01
                  :mod (c9-1 / false)))

# ::snt You're saying that no matter who they are or where they were raised, they all act the exact same
# ::tokens ["You", "'re", "saying", "that", "no", "matter", "who", "they", "are", "or", "where", "they", "were", "raised", ",", "they", "all", "act", "the", "exact", "same"]
# ::lemmas ["you", "be", "say", "that", "no", "matter", "who", "they", "be", "or", "where", "they", "be", "raise", ",", "you", "all", "act", "the", "exact", "same"]
(c10-9 / say-01
       :ARG0 (c10-0 / you)
       :ARG1 (c10-11 / act-01
                     :ARG0 (c10-10 / they
                                   :mod (c10-5 / all))
                     :ARG1 (c10-3 / same-01
                                  :mod (c10-4 / exact))
                     :ARG1-of (c10-8 / regardless-91
                                     :ARG2 (c10-2 / or
                                                  :op1 (c10-7 / person
                                                              :domain c10-10)
                                                  :op2 (c10-1 / location
                                                              :ARG2-of (c10-6 / raise-03
                                                                              :ARG1 c10-10))))))

# ::snt .
# ::tokens ["."]
# ::lemmas ["."]
(c11-0 / amr-empty)

# ::snt this is just getting crazy
# ::tokens ["this", "is", "just", "getting", "crazy"]
# ::lemmas ["this", "be", "just", "get", "crazy"]
(c12-3 / get-03
       :ARG1 (c12-2 / this)
       :ARG2 (c12-1 / crazy-03
                    :ARG1 c12-2)
       :mod (c12-0 / just))

# ::snt WTF
# ::tokens ["WTF"]
# ::lemmas ["WTF"]
(c13-1 / amr-unknown
       :mod (c13-0 / fuck
                   :mode expressive))

# ::snt mate I KNOW WTAF
# ::tokens ["mate", "I", "KNOW", "WTAF"]
# ::lemmas ["mate", "i", "know", "WTAF"]
(c14-6 / know-01
       :ARG0 (c14-3 / i)
       :ARG1 (c14-2 / organization
                    :name (c14-4 / name
                                 :op1 "WTAF"))
       :ARG2 (c14-5 / person
                    :ARG0-of (c14-0 / have-rel-role-91
                                    :ARG2 (c14-1 / mate))))

# ::snt no news about what he did or is doing though It's all very vague atm
# ::tokens ["no", "news", "about", "what", "he", "did", "or", "is", "doing", "though", "It", "'s", "all", "very", "vague", "atm"]
# ::lemmas ["no", "news", "about", "what", "he", "do", "or", "be", "do", "though", "it", "be", "all", "very", "vague", "atm"]
(c15-0 / have-concession-91
       :ARG1 (c15-5 / news
                    :topic (c15-2 / or
                                  :op1 (c15-10 / thing
                                               :ARG1-of (c15-7 / do-02
                                                               :ARG0 (c15-11 / he)))
                                  :op2 (c15-8 / thing
                                              :ARG1-of (c15-1 / do-02
                                                              :ARG0 c15-11)))
                    :polarity -)
       :ARG2 (c15-6 / vague
                    :domain (c15-4 / it
                                   :mod (c15-9 / all))
                    :degree (c15-3 / very)))

# ::snt WTF? : There are reports of an armed incident at the Trocadero near the Eiffel Tower. "
# ::tokens ["WTF", "?", ":", "There", "are", "reports", "of", "an", "armed", "incident", "at", "the", "Trocadero", "near", "the", "Eiffel", "Tower", ".", "\""]
# ::lemmas ["WTF", "?", ":", "there", "be", "report", "of", "an", "armed", "incident", "at", "the", "Trocadero", "near", "the", "Eiffel", "Tower", ".", "\""]
(c17-6 / report-01
       :ARG1 (c17-1 / incident
                    :ARG1-of (c17-8 / arm-01)
                    :location (c17-0 / facility
                                     :name (c17-3 / name
                                                  :op1 "Trocadero")
                                     :ARG1-of (c17-4 / near-02
                                                     :ARG2 (c17-7 / tower
                                                                  :name (c17-5 / name
                                                                               :op1 "Eiffel"
                                                                               :op2 "Tower")))))
       :mod (c17-2 / fuck
                   :mode expressive))

# ::snt Bruv everyone just needs to stay at home
# ::tokens ["Bruv", "everyone", "just", "needs", "to", "stay", "at", "home"]
# ::lemmas ["Bruv", "everyone", "just", "need", "to", "stay", "at", "home"]
(c18-6 / tough-02
       :ARG1 (c18-2 / everyone)
       :ARG0-of (c18-4 / cause-01
                       :ARG1 (c18-3 / need-01
                                    :ARG0 c18-2
                                    :ARG1 (c18-5 / stay-01
                                                 :ARG1 c18-2
                                                 :location (c18-0 / home))
                                    :mod (c18-1 / just))))

# ::snt unconfirmed. Lets keep our hats on for a moment.
# ::tokens ["unconfirmed", ".", "Lets", "keep", "our", "hats", "on", "for", "a", "moment", "."]
# ::lemmas ["unconfirmed", ".", "let", "keep", "our", "hat", "on", "for", "a", "moment", "."]
(c19-2 / multi-sentence
       :snt1 (c19-4 / confirm-01
                    :polarity -)
       :snt2 (c19-5 / keep-on-08
                    :ARG0 (c19-1 / we)
                    :ARG1 (c19-0 / hat
                                 :poss c19-1)
                    :duration (c19-3 / moment)
                    :mode imperative))

# ::snt "They" don't all murder people. Stop generalising.
# ::tokens ["\"", "They", "\"", "do", "n't", "all", "murder", "people", ".", "Stop", "generalising", "."]
# ::lemmas ["\"", "they", "\"", "do", "not", "all", "murder", "people", ".", "stop", "generalise", "."]
(c20-1 / multi-sentence
       :snt1 (c20-2 / murder-01
                    :ARG0 (c20-6 / they
                                 :mod (c20-7 / all))
                    :ARG1 (c20-3 / person)
                    :polarity -)
       :snt2 (c20-5 / stop-01
                    :ARG0 (c20-0 / you)
                    :ARG1 (c20-4 / generalize-01
                                 :ARG0 c20-0)
                    :mode imperative))
