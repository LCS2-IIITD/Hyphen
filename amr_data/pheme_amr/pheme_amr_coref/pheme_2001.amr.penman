# ::snt All stereotypes evolve from a kernel of truth. It's sad but it's still true
# ::tokens ["All", "stereotypes", "evolve", "from", "a", "kernel", "of", "truth", ".", "It", "'s", "sad", "but", "it", "'s", "still", "true"]
# ::lemmas ["all", "stereotype", "evolve", "from", "a", "kernel", "of", "truth", ".", "it", "be", "sad", "but", "it", "be", "still", "true"]
(c1-1 / multi-sentence
      :snt1 (c1-2 / evolve-01
                  :ARG1 (c1-7 / stereotype-01
                              :mod (c1-10 / all))
                  :ARG2 (c1-9 / kernel
                              :mod (c1-8 / true-01)))
      :snt2 (c1-5 / contrast-01
                  :ARG1 (c1-3 / sad-02
                              :ARG1 (c1-4 / it))
                  :ARG2 (c1-6 / true-01
                              :ARG1 c1-4
                              :mod (c1-0 / still))))

# ::snt so that means the ukip racist stereotype is true ?
# ::tokens ["so", "that", "means", "the", "ukip", "racist", "stereotype", "is", "true", "?"]
# ::lemmas ["so", "that", "mean", "the", "ukip", "racist", "stereotype", "be", "true", "?"]
(c2-2 / infer-01
      :polarity (c2-7 / amr-unknown)
      :ARG1 (c2-0 / mean-01
                  :ARG1 (c2-6 / that)
                  :ARG2 (c2-4 / true-01
                              :ARG1 (c2-5 / stereotype-01
                                          :ARG2 (c2-3 / racist)
                                          :mod (c2-1 / ukip)))))

# ::snt I cannot recall calling ukip terrorists . Are u having wet dreams ?
# ::tokens ["I", "can", "not", "recall", "calling", "ukip", "terrorists", ".", "Are", "u", "having", "wet", "dreams", "?"]
# ::lemmas ["i", "can", "not", "recall", "call", "ukip", "terrorist", ".", "be", "u", "have", "wet", "dream", "?"]
(c3-2 / multi-sentence
      :snt1 (c3-5 / possible-01
                  :ARG1 (c3-6 / recall-02
                              :ARG0 (c3-3 / i)
                              :ARG1 (c3-7 / call-01
                                          :ARG1 (c3-0 / you)
                                          :ARG2 (c3-11 / terrorist
                                                       :mod (c3-8 / country
                                                                  :name (c3-4 / name
                                                                              :op1 "Ukip")))))
                  :polarity -)
      :snt2 (c3-9 / dream-01
                  :polarity (c3-12 / amr-unknown)
                  :ARG0 (c3-10 / you)
                  :ARG1-of (c3-1 / wet-01)))

# ::snt go back and read the thread again . Then apply for a place at school
# ::tokens ["go", "back", "and", "read", "the", "thread", "again", ".", "Then", "apply", "for", "a", "place", "at", "school"]
# ::lemmas ["go", "back", "and", "read", "the", "thread", "again", ".", "then", "apply", "for", "a", "place", "at", "school"]
(c4-1 / multi-sentence
      :snt1 (c4-10 / and
                   :op1 (c4-6 / go-back-19
                              :ARG1 (c4-0 / you)
                              :mode imperative)
                   :op2 (c4-5 / read-01
                              :ARG0 c4-0
                              :ARG1 (c4-9 / thread)
                              :mod (c4-2 / again)
                              :mode imperative))
      :snt2 (c4-3 / apply-01
                  :ARG0 c4-0
                  :ARG1 (c4-4 / place
                              :location (c4-8 / school))
                  :time (c4-7 / then)))

# ::snt I wager they'll somehow manage to blame Farage &amp; ukip
# ::tokens ["I", "wager", "they", "'ll", "somehow", "manage", "to", "blame", "Farage", "&", "amp", ";", "ukip"]
# ::lemmas ["i", "wager", "they", "'ll", "somehow", "manage", "to", "blame", "Farage", "&", "amp", ";", "ukip"]
(c5-0 / wager-01
      :ARG0 (c5-4 / i)
      :ARG2 (c5-1 / manage-02
                  :ARG0 (c5-9 / they)
                  :ARG1 (c5-3 / blame-01
                              :ARG0 c5-9
                              :ARG1 (c5-11 / and
                                           :op1 (c5-7 / person
                                                      :name (c5-5 / name
                                                                  :op1 "Farage"))
                                           :op2 (c5-10 / person
                                                       :name (c5-6 / name
                                                                   :op1 "amp"))))
                  :manner (c5-8 / somehow))
      :mod (c5-2 / ukip))

# ::snt There are useful idiots and then there's people like that! On another scale entirely
# ::tokens ["There", "are", "useful", "idiots", "and", "then", "there", "'s", "people", "like", "that", "!", "On", "another", "scale", "entirely"]
# ::lemmas ["there", "be", "useful", "idiot", "and", "then", "there", "be", "people", "like", "that", "!", "on", "another", "scale", "entirely"]
(c6-0 / multi-sentence
      :snt1 (c6-10 / and
                   :op1 (c6-4 / idiot
                              :ARG1-of (c6-1 / useful-05))
                   :op2 (c6-5 / person
                              :ARG1-of (c6-6 / resemble-01
                                             :ARG2 (c6-9 / that))
                              :time (c6-7 / then)))
      :snt2 (c6-8 / scale
                  :mod (c6-3 / another)
                  :degree (c6-2 / entire)))

# ::snt indeed, but saying "UKIP types" would be gleeful at loss of life. Is a new low!
# ::tokens ["indeed", ",", "but", "saying", "\"", "UKIP", "types", "\"", "would", "be", "gleeful", "at", "loss", "of", "life", ".", "Is", "a", "new", "low", "!"]
# ::lemmas ["indeed", ",", "but", "say", "\"", "UKIP", "type", "\"", "would", "be", "gleeful", "at", "loss", "of", "life", ".", "be", "a", "new", "low", "!"]
(c7-2 / multi-sentence
      :snt1 (c7-8 / contrast-01
                  :ARG2 (c7-11 / say-01
                               :ARG1 (c7-9 / gleeful
                                           :domain (c7-6 / person
                                                         :mod (c7-13 / type
                                                                     :mod (c7-14 / political-party
                                                                                 :name (c7-4 / name
                                                                                             :op1 "UKIP"))))
                                           :ARG1-of (c7-7 / cause-01
                                                          :ARG0 (c7-1 / lose-02
                                                                      :ARG0 c7-6
                                                                      :ARG1 (c7-10 / life)))))
                  :mod (c7-3 / indeed))
      :snt2 (c7-0 / low-04
                  :ARG1-of (c7-5 / new-01)
                  :domain (c7-12 / this)))

# ::snt it's called stereotyping . Just like the Muslims are painted .No ?
# ::tokens ["it", "'s", "called", "stereotyping", ".", "Just", "like", "the", "Muslims", "are", "painted", ".No", "?"]
# ::lemmas ["it", "be", "call", "stereotype", ".", "just", "like", "the", "Muslims", "be", "paint", ".no", "?"]
(c8-0 / multi-sentence
      :snt1 (c8-6 / call-01
                  :ARG1 (c8-1 / it)
                  :ARG2 (c8-7 / stereotyping))
      :snt2 (c8-5 / resemble-01
                  :ARG2 (c8-4 / paint-03
                              :ARG1 (c8-8 / person
                                          :mod (c8-2 / religious-group
                                                     :name (c8-3 / name
                                                                 :op1 "Muslim"))))
                  :polarity (c8-9 / amr-unknown)))

# ::snt Maybe the will show "Life of Brian" to show how fearless they are in the face of intimidation!
# ::tokens ["Maybe", "the", "will", "show", "\"", "Life", "of", "Brian", "\"", "to", "show", "how", "fearless", "they", "are", "in", "the", "face", "of", "intimidation", "!"]
# ::lemmas ["maybe", "the", "will", "show", "\"", "Life", "of", "Brian", "\"", "to", "show", "how", "fearless", "they", "be", "in", "the", "face", "of", "intimidation", "!"]
(c9-6 / possible-01
      :ARG1 (c9-8 / show-01
                  :ARG0 (c9-1 / broadcast-program
                              :name (c9-5 / name
                                          :op1 "Life"
                                          :op2 "of"
                                          :op3 "Brian"))
                  :ARG1 (c9-2 / show-01
                              :ARG0 c9-1
                              :ARG1 (c9-9 / thing
                                          :degree-of (c9-0 / fear-01
                                                           :ARG0 (c9-7 / they)
                                                           :condition (c9-4 / face-01
                                                                            :ARG0 c9-7
                                                                            :ARG1 (c9-3 / intimidate-01
                                                                                        :ARG1 c9-7))
                                                           :polarity -)))))

# ::snt If you could remind me of the list of UKIP terrorist attacks I'd be obliged
# ::tokens ["If", "you", "could", "remind", "me", "of", "the", "list", "of", "UKIP", "terrorist", "attacks", "I", "'d", "be", "obliged"]
# ::lemmas ["if", "you", "could", "remind", "i", "of", "the", "list", "of", "UKIP", "terrorist", "attack", "i", "would", "be", "oblige"]
(c10-2 / oblige-01
       :ARG1 (c10-3 / i)
       :condition (c10-5 / possible-01
                         :ARG1 (c10-6 / remind-01
                                      :ARG0 (c10-0 / you)
                                      :ARG1 (c10-1 / list-01
                                                   :ARG1 (c10-9 / attack-01
                                                                :ARG0 (c10-7 / terrorist)
                                                                :mod (c10-8 / political-party
                                                                            :name (c10-4 / name
                                                                                         :op1 "UKIP"))))
                                      :ARG2 c10-3)))

# ::snt When the lowest form of wit flies so far over your head it's time to worry
# ::tokens ["When", "the", "lowest", "form", "of", "wit", "flies", "so", "far", "over", "your", "head", "it", "'s", "time", "to", "worry"]
# ::lemmas ["when", "the", "low", "form", "of", "wit", "fly", "so", "far", "over", "your", "head", "it", "be", "time", "to", "worry"]
(c11-6 / be-temporally-at-91
       :ARG1 (c11-1 / worry-01
                    :ARG0 (c11-3 / fly-01
                                 :ARG1 (c11-9 / form
                                              :mod (c11-10 / wit)
                                              :ARG1-of (c11-0 / have-degree-91
                                                              :ARG2 (c11-4 / low-04
                                                                           :ARG1 c11-9)
                                                              :ARG3 (c11-5 / most)))
                                 :path (c11-7 / over
                                              :op1 (c11-13 / head
                                                           :part-of (c11-2 / you))
                                              :ARG1-of (c11-11 / have-degree-91
                                                               :ARG2 (c11-8 / far)
                                                               :ARG3 (c11-12 / so)))
                                 :ARG2-of c11-6)))

# ::snt Read &amp; understood it all thanks.You can place your advice where sun don't shine
# ::tokens ["Read", "&", "amp", ";", "understood", "it", "all", "thanks", ".", "You", "can", "place", "your", "advice", "where", "sun", "do", "n't", "shine"]
# ::lemmas ["Read", "&", "amp", ";", "understand", "it", "all", "thank", ".", "you", "can", "place", "your", "advice", "where", "sun", "do", "not", "shine"]
(c12-1 / multi-sentence
       :snt1 (c12-5 / and
                    :op1 (c12-10 / read-01
                                 :ARG0 (c12-13 / i))
                    :op2 (c12-2 / person
                                :name (c12-8 / name
                                             :op1 "amp")))
       :snt2 (c12-11 / understand-01
                     :ARG0 (c12-14 / i)
                     :ARG1 (c12-0 / it
                                  :mod (c12-12 / all))
                     :ARG2-of (c12-18 / thank-01
                                      :ARG0 c12-14
                                      :ARG1 (c12-16 / you)))
       :snt3 (c12-4 / possible-01
                    :ARG1 (c12-6 / place-01
                                 :ARG0 (c12-17 / you)
                                 :ARG1 (c12-15 / thing
                                               :ARG2-of (c12-9 / advise-01
                                                               :ARG0 c12-17))
                                 :ARG2 (c12-3 / shine-01
                                              :ARG1 (c12-7 / sun)
                                              :polarity -))))

# ::snt Unfortunately these types can't tell the difference between Europe &amp; the EU
# ::tokens ["Unfortunately", "these", "types", "ca", "n't", "tell", "the", "difference", "between", "Europe", "&", "amp", ";", "the", "EU"]
# ::lemmas ["unfortunately", "these", "type", "can", "not", "tell", "the", "difference", "between", "Europe", "&", "amp", ";", "the", "EU"]
(c13-0 / fortunate-01
       :ARG2 (c13-6 / capable-01
                    :ARG1 (c13-9 / type
                                 :mod (c13-8 / this))
                    :ARG2 (c13-3 / tell-01
                                 :ARG0 c13-9
                                 :ARG1 (c13-5 / differ-02
                                              :ARG1 (c13-7 / continent
                                                           :name (c13-2 / name
                                                                        :op1 "Europe"))
                                              :ARG2 (c13-1 / organization
                                                           :name (c13-4 / name
                                                                        :op1 "EU"))))
                    :polarity -)
       :polarity -)

# ::snt . Yes. Just wait until that famous teller of truth to power Russell Howard gets hold of this.
# ::tokens [".", "Yes", ".", "Just", "wait", "until", "that", "famous", "teller", "of", "truth", "to", "power", "Russell", "Howard", "gets", "hold", "of", "this", "."]
# ::lemmas [".", "yes", ".", "just", "wait", "until", "that", "famous", "teller", "of", "truth", "to", "power", "Russell", "Howard", "get", "hold", "of", "this", "."]
(c14-1 / wait-01
       :ARG1 (c14-2 / you)
       :mod (c14-0 / just)
       :time (c14-5 / until
                    :op1 (c14-10 / get-01
                                 :ARG0 (c14-9 / person
                                              :name (c14-7 / name
                                                           :op1 "Russell"
                                                           :op2 "Howard")
                                              :ARG0-of (c14-12 / tell-01
                                                               :ARG1 (c14-11 / truth)
                                                               :ARG2 (c14-13 / power))
                                              :ARG1-of (c14-3 / fame-01)
                                              :mod (c14-8 / that))
                                 :ARG1 (c14-4 / hold-01
                                              :ARG0 c14-9
                                              :ARG1 (c14-6 / this))))
       :mod (c14-14 / yes)
       :mode imperative)

# ::snt but ukip is pulling all the racists and xenophobes as they wouldn't know what to talk about other than hate for foreigners
# ::tokens ["but", "ukip", "is", "pulling", "all", "the", "racists", "and", "xenophobes", "as", "they", "would", "n't", "know", "what", "to", "talk", "about", "other", "than", "hate", "for", "foreigners"]
# ::lemmas ["but", "ukip", "be", "pull", "all", "the", "racist", "and", "xenophobe", "as", "they", "would", "not", "know", "what", "to", "talk", "about", "other", "than", "hate", "for", "foreigner"]
(c15-8 / contrast-01
       :ARG2 (c15-6 / pull-06
                    :ARG0 (c15-7 / company
                                 :name (c15-5 / name
                                              :op1 "Ukip"))
                    :ARG1 (c15-15 / and
                                  :op1 (c15-9 / racist)
                                  :op2 (c15-3 / xenophobe)
                                  :mod (c15-4 / all))
                    :ARG1-of (c15-11 / cause-01
                                     :ARG0 (c15-13 / know-01
                                                   :ARG0 c15-15
                                                   :ARG1 (c15-12 / thing
                                                                 :ARG1-of (c15-10 / talk-01
                                                                                  :ARG0 c15-15)
                                                                 :ARG2-of (c15-2 / except-01
                                                                                 :ARG1 (c15-0 / hate-01
                                                                                              :ARG0 c15-15
                                                                                              :ARG1 (c15-14 / person
                                                                                                            :mod (c15-1 / foreign)))))
                                                   :polarity -))))

# ::snt Russell brand thinks it's Americas fault
# ::tokens ["Russell", "brand", "thinks", "it", "'s", "Americas", "fault"]
# ::lemmas ["Russell", "brand", "think", "it", "be", "Americas", "fault"]
(c16-6 / think-01
       :ARG0 (c16-1 / brand
                    :name (c16-3 / name
                                 :op1 "Russell"
                                 :op2 "Brand"))
       :ARG1 (c16-0 / fault-01
                    :ARG1 (c16-5 / country
                                 :name (c16-4 / name
                                              :op1 "Americas"))
                    :ARG2 (c16-2 / it)))

# ::snt BBC has been practising Dhimmitude since -11: old hands at it now.
# ::tokens ["BBC", "has", "been", "practising", "Dhimmitude", "since", "-11", ":", "old", "hands", "at", "it", "now", "."]
# ::lemmas ["BBC", "have", "be", "practise", "Dhimmitude", "since", "-11", ":", "old", "hand", "at", "it", "now", "."]
(c17-5 / practice-01
       :ARG0 (c17-10 / publication
                     :name (c17-3 / name
                                  :op1 "BBC"))
       :ARG1 (c17-9 / thing
                    :name c17-3
                    :op1 "Dhimmitude")
       :time (c17-8 / since
                    :op1 (c17-6 / date-entity
                                :year 2011
                                :month 11))
       :ARG0-of (c17-1 / mean-01
                       :ARG1 (c17-0 / hand
                                    :mod (c17-2 / old)
                                    :ARG0-of (c17-7 / grasp-01
                                                    :ARG1 c17-9
                                                    :time (c17-4 / now)))))

# ::snt Naturally, we're allies...
# ::tokens ["Naturally", ",", "we", "'re", "allies", "..."]
# ::lemmas ["naturally", ",", "we", "be", "ally", "..."]
(c18-2 / ally-01
       :ARG1 (c18-1 / we)
       :ARG1-of (c18-0 / natural-02))

# ::snt 'UKIP types' gleeful at dead. Outrageous comment!
# ::tokens ["'", "UKIP", "types", "'", "gleeful", "at", "dead", ".", "Outrageous", "comment", "!"]
# ::lemmas ["'", "UKIP", "type", "'", "gleeful", "at", "dead", ".", "outrageous", "comment", "!"]
(c19-0 / multi-sentence
       :snt1 (c19-6 / gleeful
                    :topic (c19-3 / person
                                  :ARG1-of (c19-4 / die-01))
                    :domain (c19-7 / type
                                   :mod (c19-8 / political-party
                                               :name (c19-2 / name
                                                            :op1 "UKIP"))))
       :snt2 (c19-5 / comment-01
                    :ARG0-of (c19-1 / outrage-01)))

# ::snt the real problem is politics in the UK is increasingly beyond satire due to being both dull and beyond a joke
# ::tokens ["the", "real", "problem", "is", "politics", "in", "the", "UK", "is", "increasingly", "beyond", "satire", "due", "to", "being", "both", "dull", "and", "beyond", "a", "joke"]
# ::lemmas ["the", "real", "problem", "be", "politic", "in", "the", "UK", "be", "increasingly", "beyond", "satire", "due", "to", "be", "both", "dull", "and", "beyond", "a", "joke"]
(c20-4 / problem
       :ARG1-of (c20-5 / real-04)
       :domain (c20-1 / beyond
                      :op1 (c20-10 / satire)
                      :domain (c20-11 / politics
                                      :location (c20-6 / country
                                                       :name (c20-3 / name
                                                                    :op1 "UK")))
                      :ARG1-of (c20-2 / increase-01)
                      :ARG1-of (c20-7 / cause-01
                                      :ARG0 (c20-12 / and
                                                    :op1 (c20-8 / dull-04
                                                                :ARG1 c20-11)
                                                    :op2 c20-1
                                                    :op1 (c20-0 / joke-01
                                                                :ARG2 c20-11))
                                      :mod (c20-9 / both))))

# ::snt see no evil hear no evil speak no evil did i say see I see nothing.
# ::tokens ["see", "no", "evil", "hear", "no", "evil", "speak", "no", "evil", "did", "i", "say", "see", "I", "see", "nothing", "."]
# ::lemmas ["see", "no", "evil", "hear", "no", "evil", "speak", "no", "evil", "do", "i", "say", "see", "i", "see", "nothing", "."]
(c21-12 / and
        :op1 (c21-11 / see-01
                     :ARG0 (c21-1 / you)
                     :ARG1 (c21-6 / evil)
                     :polarity -)
        :op2 (c21-0 / hear-01
                    :ARG0 c21-1
                    :ARG1 (c21-4 / evil)
                    :polarity -)
        :op3 (c21-7 / speak-01
                    :ARG0 (c21-2 / evil)
                    :ARG1 (c21-8 / evil)
                    :polarity -)
        :op4 (c21-3 / see-01
                    :ARG0 (c21-9 / i)
                    :ARG1 (c21-10 / nothing)
                    :polarity -)
        :ARG1-of (c21-5 / say-01
                        :ARG0 c21-9))

# ::snt I don't give a toss what he thinks about anything
# ::tokens ["I", "do", "n't", "give", "a", "toss", "what", "he", "thinks", "about", "anything"]
# ::lemmas ["i", "do", "not", "give", "a", "toss", "what", "he", "think", "about", "anything"]
(c22-4 / toss-01
       :ARG0 (c22-1 / i)
       :ARG1 (c22-3 / thing
                    :ARG1-of (c22-2 / think-01
                                    :ARG0 (c22-0 / he)
                                    :ARG2 (c22-5 / anything)))
       :polarity -)

# ::snt what! Kippers stereotypically get enjoyment out of others deaths?!
# ::tokens ["what", "!", "Kippers", "stereotypically", "get", "enjoyment", "out", "of", "others", "deaths", "?", "!"]
# ::lemmas ["what", "!", "Kippers", "stereotypically", "get", "enjoyment", "out", "of", "other", "death", "?", "!"]
(c23-0 / multi-sentence
       :snt1 (c23-7 / amr-unknown
                    :mode expressive)
       :snt2 (c23-2 / enjoy-01
                    :ARG0 (c23-6 / kippers)
                    :ARG1 (c23-4 / die-01
                                 :ARG1 (c23-3 / person
                                              :mod (c23-1 / other)))
                    :manner (c23-5 / stereotypic)))

# ::snt What I want to know is what does Russell Brand think on the matter
# ::tokens ["What", "I", "want", "to", "know", "is", "what", "does", "Russell", "Brand", "think", "on", "the", "matter"]
# ::lemmas ["what", "i", "want", "to", "know", "be", "what", "do", "Russell", "Brand", "think", "on", "the", "matter"]
(c24-0 / want-01
       :ARG0 (c24-2 / i)
       :ARG1 (c24-3 / know-01
                    :ARG0 c24-2
                    :ARG1 (c24-6 / think-01
                                 :ARG0 (c24-5 / person
                                              :name (c24-4 / name
                                                           :op1 "Russell"
                                                           :op2 "Brand"))
                                 :ARG1 (c24-7 / amr-unknown)
                                 :ARG2 (c24-1 / matter))))

# ::snt Piss off with your mindless media indoctrinated bullshitHad it up to here, if can't think for yourself I have no time for you
# ::tokens ["Piss", "off", "with", "your", "mindless", "media", "indoctrinated", "bullshitHad", "it", "up", "to", "here", ",", "if", "ca", "n't", "think", "for", "yourself", "I", "have", "no", "time", "for", "you"]
# ::lemmas ["piss", "off", "with", "your", "mindless", "medium", "indoctrinate", "bullshithad", "it", "up", "to", "here", ",", "if", "can", "not", "think", "for", "yourself", "i", "have", "no", "time", "for", "you"]
(c25-5 / piss-off-02
       :ARG0 (c25-1 / you)
       :ARG2 (c25-3 / bullshit
                    :ARG1-of (c25-4 / indoctrinate-01
                                    :ARG0 (c25-2 / media))
                    :mod (c25-6 / mindless)
                    :poss c25-1)
       :ARG1-of (c25-7 / cause-01
                       :ARG0 (c25-0 / have-03
                                    :ARG0 (c25-8 / i)
                                    :ARG1 (c25-11 / time
                                                  :purpose c25-1)
                                    :condition (c25-12 / possible-01
                                                       :ARG1 (c25-10 / think-01
                                                                     :ARG0 c25-8
                                                                     :mod (c25-9 / by-oneself))
                                                       :polarity -)
                                    :polarity -))
       :mode imperative)

# ::snt the blame game in NI is the only one worth its salt eh
# ::tokens ["the", "blame", "game", "in", "NI", "is", "the", "only", "one", "worth", "its", "salt", "eh"]
# ::lemmas ["the", "blame", "game", "in", "NI", "be", "the", "only", "one", "worth", "its", "salt", "eh"]
(c26-0 / worth-02
       :ARG1 (c26-6 / game
                    :ARG0-of (c26-1 / blame-01)
                    :location (c26-5 / country
                                     :name (c26-3 / name
                                                  :op1 "NI"))
                    :mod (c26-2 / only))
       :ARG2 (c26-7 / salt)
       :ARG1-of (c26-4 / request-confirmation-91))

# ::snt BBC gets Millions from the EU so will do nothing to upset the EU.
# ::tokens ["BBC", "gets", "Millions", "from", "the", "EU", "so", "will", "do", "nothing", "to", "upset", "the", "EU", "."]
# ::lemmas ["BBC", "get", "Millions", "from", "the", "EU", "so", "will", "do", "nothing", "to", "upset", "the", "EU", "."]
(c27-8 / get-01
       :ARG0 (c27-5 / publication
                    :name (c27-3 / name
                                 :op1 "BBC"))
       :ARG1 (c27-0 / multiple
                    :op1 (c27-6 / monetary-quantity
                                :unit (c27-7 / dollar)
                                :quant 10000000))
       :ARG2 (c27-2 / organization
                    :name (c27-4 / name
                                 :op1 "EU"))
       :ARG0-of (c27-9 / cause-01
                       :ARG1 (c27-1 / upset-01
                                    :ARG0 c27-5
                                    :ARG1 c27-2
                                    :mod (c27-10 / nothing))))

# ::snt even Wipe went soft on in its year end review
# ::tokens ["even", "Wipe", "went", "soft", "on", "in", "its", "year", "end", "review"]
# ::lemmas ["even", "wipe", "go", "soft", "on", "in", "its", "year", "end", "review"]
(c28-6 / go-08
       :ARG1 (c28-3 / newspaper
                    :name (c28-4 / name
                                 :op1 "Wipe")
                    :mod (c28-2 / even))
       :ARG2 (c28-7 / soft-02)
       :subevent-of (c28-5 / review-01
                           :ARG0 c28-3
                           :time (c28-1 / end-01
                                        :ARG1 (c28-0 / year))))

# ::snt Touch! Nice comeback, all parties have nutters just because media doesn't report on them all doesn't mean they don't exist!
# ::tokens ["Touch", "!", "Nice", "comeback", ",", "all", "parties", "have", "nutters", "just", "because", "media", "does", "n't", "report", "on", "them", "all", "does", "n't", "mean", "they", "do", "n't", "exist", "!"]
# ::lemmas ["touch", "!", "nice", "comeback", ",", "all", "party", "have", "nutter", "just", "because", "medium", "do", "not", "report", "on", "they", "all", "do", "not", "mean", "they", "do", "not", "exist", "!"]
(c29-3 / multi-sentence
       :snt1 (c29-14 / touch-01)
       :snt2 (c29-10 / comeback-01
                     :ARG1-of (c29-6 / nice-01))
       :snt3 (c29-0 / have-03
                    :ARG0 (c29-8 / party
                                 :mod (c29-15 / all))
                    :ARG1 (c29-7 / nutter)
                    :ARG1-of (c29-9 / cause-01
                                    :ARG0 (c29-11 / report-01
                                                  :ARG0 (c29-12 / media)
                                                  :ARG1 c29-8
                                                  :ARG1-of (c29-13 / cause-01
                                                                   :ARG0 (c29-2 / mean-01
                                                                                :ARG1 (c29-5 / report-01
                                                                                             :ARG0 c29-12
                                                                                             :ARG1 (c29-4 / exist-01
                                                                                                          :ARG1 c29-7
                                                                                                          :polarity -))
                                                                                :polarity -)
                                                                   :mod (c29-1 / just))
                                                  :polarity -))))

# ::snt He'll probably side with Kofi-Annan.
# ::tokens ["He", "'ll", "probably", "side", "with", "Kofi", "-", "Annan", "."]
# ::lemmas ["he", "'ll", "probably", "side", "with", "Kofi", "-", "Annan", "."]
(c30-3 / side-01
       :ARG0 (c30-0 / he)
       :ARG1 (c30-2 / person
                    :name (c30-1 / name
                                 :op1 "Kofi-Annan"))
       :mod (c30-4 / probable))

# ::snt They'll just focus on the Church of England &amp; UK's drivers. Both are totally supine &amp; safe targets.
# ::tokens ["They", "'ll", "just", "focus", "on", "the", "Church", "of", "England", "&", "amp", ";", "UK", "'s", "drivers", ".", "Both", "are", "totally", "supine", "&", "amp", ";", "safe", "targets", "."]
# ::lemmas ["they", "'ll", "just", "focus", "on", "the", "Church", "of", "England", "&", "amp", ";", "UK", "'s", "driver", ".", "both", "be", "totally", "supine", "&", "amp", ";", "safe", "target", "."]
(c31-2 / multi-sentence
       :snt1 (c31-1 / focus-01
                    :ARG0 (c31-15 / they)
                    :ARG2 (c31-16 / and
                                  :op1 (c31-4 / organization
                                              :name (c31-7 / name
                                                           :op1 "Church"
                                                           :op2 "of"
                                                           :op3 "England"))
                                  :op2 (c31-11 / company
                                               :name (c31-8 / name
                                                            :op1 "UK")
                                               :ARG0-of (c31-10 / drive-01)))
                    :mod (c31-0 / just))
       :snt2 (c31-6 / and
                    :op1 (c31-14 / supine
                                 :degree (c31-13 / total))
                    :op2 (c31-9 / target
                                :ARG0-of (c31-5 / safe-01))
                    :domain (c31-12 / and
                                    :op1 (c31-3 / both))))
