# ::snt really come on your sayin anything
# ::tokens ["really", "come", "on", "your", "sayin", "anything"]
# ::lemmas ["really", "come", "on", "your", "sayin", "anything"]
(c1-2 / come-on-25
      :ARG1 (c1-0 / you)
      :ARG2 (c1-3 / say-01
                  :ARG0 c1-0
                  :ARG1 (c1-4 / anything))
      :ARG1-of (c1-1 / real-04)
      :mode imperative)

# ::snt FOLLOW ME..ILL FOLLOW BACK ASAP.. (not spam)!
# ::tokens ["FOLLOW", "ME", "..", "ILL", "FOLLOW", "BACK", "ASAP", "..", "(", "not", "spam", ")", "!"]
# ::lemmas ["FOLLOW", "ME", "..", "ILL", "follow", "back", "asap", "..", "(", "not", "spam", ")", "!"]
(c2-8 / and
      :op1 (c2-1 / follow-02
                 :ARG0 (c2-0 / you)
                 :ARG1 (c2-5 / i)
                 :mode imperative)
      :op2 (c2-6 / follow-02
                 :ARG0 c2-0
                 :ARG1 c2-5
                 :direction (c2-3 / back)
                 :time (c2-4 / ASAP)
                 :ARG1-of (c2-2 / mean-01
                                :ARG2 (c2-7 / spam-01
                                            :polarity -))
                 :mode imperative))

# ::snt wowwwwww.
# ::tokens ["wowwwwww", "."]
# ::lemmas ["wowwwwww", "."]
(c3-0 / wow
      :mode expressive)

# ::snt But the police chief said this sort of thing never happens in Guess he's wrong again.
# ::tokens ["But", "the", "police", "chief", "said", "this", "sort", "of", "thing", "never", "happens", "in", "Guess", "he", "'s", "wrong", "again", "."]
# ::lemmas ["but", "the", "police", "chief", "say", "this", "sort", "of", "thing", "never", "happen", "in", "Guess", "he", "be", "wrong", "again", "."]
(c4-6 / contrast-01
      :ARG2 (c4-9 / say-01
                  :ARG0 (c4-4 / person
                              :ARG0-of (c4-0 / have-org-role-91
                                             :ARG1 (c4-11 / police)
                                             :ARG2 (c4-5 / chief)))
                  :ARG1 (c4-10 / thing
                               :mod (c4-2 / sort
                                          :mod (c4-8 / this))
                               :time (c4-3 / ever))
                  :ARG0-of (c4-7 / guess-01
                                 :ARG1 (c4-1 / wrong-04
                                             :ARG1 c4-4
                                             :mod (c4-12 / again)))))
