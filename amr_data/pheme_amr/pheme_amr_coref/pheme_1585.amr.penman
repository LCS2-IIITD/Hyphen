# ::snt first reaction , but rip to the people
# ::tokens ["first", "reaction", ",", "but", "rip", "to", "the", "people"]
# ::lemmas ["first", "reaction", ",", "but", "rip", "to", "the", "people"]
(c1-5 / contrast-01
      :ARG1 (c1-4 / react-01
                  :ord (c1-1 / ordinal-entity
                             :value 1))
      :ARG2 (c1-2 / rip-01
                  :ARG0 (c1-0 / you)
                  :ARG1 (c1-3 / person)
                  :mode imperative))

# ::snt I can understand that feeling but honestly Pat Robertson is an idiotic old man! No one should care what he has to say.
# ::tokens ["I", "can", "understand", "that", "feeling", "but", "honestly", "Pat", "Robertson", "is", "an", "idiotic", "old", "man", "!", "No", "one", "should", "care", "what", "he", "has", "to", "say", "."]
# ::lemmas ["i", "can", "understand", "that", "feeling", "but", "honestly", "Pat", "Robertson", "be", "an", "idiotic", "old", "man", "!", "no", "one", "should", "care", "what", "he", "have", "to", "say", "."]
(c2-2 / multi-sentence
      :snt1 (c2-10 / contrast-01
                   :ARG1 (c2-8 / possible-01
                               :ARG1 (c2-3 / understand-01
                                           :ARG0 (c2-5 / i)
                                           :ARG1 (c2-1 / feel-01
                                                       :ARG1 (c2-16 / that))))
                   :ARG2 (c2-9 / man
                               :mod (c2-11 / idiot)
                               :mod (c2-4 / old)
                               :domain (c2-17 / person
                                              :name (c2-6 / name
                                                          :op1 "Pat"
                                                          :op2 "Robertson"))
                               :ARG1-of (c2-0 / honest-01)))
      :snt2 (c2-12 / recommend-01
                   :ARG1 (c2-13 / care-01
                                :ARG0 (c2-7 / no-one)
                                :ARG1 (c2-15 / thing
                                             :ARG1-of (c2-14 / say-01
                                                             :ARG0 c2-17)))))

# ::snt Pat Robertson is an old bat. No one listens to him
# ::tokens ["Pat", "Robertson", "is", "an", "old", "bat", ".", "No", "one", "listens", "to", "him"]
# ::lemmas ["Pat", "Robertson", "be", "an", "old", "bat", ".", "no", "one", "listen", "to", "he"]
(c3-1 / multi-sentence
      :snt1 (c3-2 / bat
                  :mod (c3-3 / old)
                  :domain (c3-6 / person
                                :name (c3-4 / name
                                            :op1 "Pat"
                                            :op2 "Robertson")))
      :snt2 (c3-0 / listen-01
                  :ARG0 (c3-5 / no-one)
                  :ARG1 c3-6))

# ::snt why does it matter if he was or wasn't he is a murder that's all it is has nothing to do with his faith
# ::tokens ["why", "does", "it", "matter", "if", "he", "was", "or", "was", "n't", "he", "is", "a", "murder", "that", "'s", "all", "it", "is", "has", "nothing", "to", "do", "with", "his", "faith"]
# ::lemmas ["why", "do", "it", "matter", "if", "he", "be", "or", "be", "not", "he", "be", "a", "murder", "that", "be", "all", "it", "be", "have", "nothing", "to", "do", "with", "his", "faith"]
(c4-11 / and
       :op1 (c4-2 / matter-01
                  :ARG1 (c4-5 / or
                              :op1 (c4-9 / murder-01
                                         :ARG0 (c4-0 / he))
                              :op2 (c4-1 / murder-01
                                         :ARG0 c4-0
                                         :polarity -))
                  :polarity (c4-6 / amr-unknown)
                  :ARG1-of (c4-10 / cause-01
                                  :ARG0 (c4-8 / amr-unknown)))
       :op2 (c4-3 / have-to-do-with-04
                  :ARG0 c4-9
                  :ARG1 (c4-4 / faith
                              :poss c4-0)
                  :ARG2 (c4-7 / nothing)))

# ::snt smh... Typical though
# ::tokens ["smh", "...", "Typical", "though"]
# ::lemmas ["smh", "...", "typical", "though"]
(c5-2 / multi-sentence
      :snt1 (c5-0 / smh
                  :mode expressive)
      :snt2 (c5-1 / typical-02))

# ::snt Pat Robertson's still ALIVE?
# ::tokens ["Pat", "Robertson", "'s", "still", "ALIVE", "?"]
# ::lemmas ["Pat", "Robertson", "'s", "still", "alive", "?"]
(c6-0 / live-01
      :ARG1 (c6-2 / person
                  :name (c6-1 / name
                              :op1 "Pat"
                              :op2 "Robertson"))
      :polarity (c6-4 / amr-unknown)
      :mod (c6-3 / still))

# ::snt How about "clinging to a mortal coil out of coalesced spite?"
# ::tokens ["How", "about", "\"", "clinging", "to", "a", "mortal", "coil", "out", "of", "coalesced", "spite", "?", "\""]
# ::lemmas ["how", "about", "\"", "cling", "to", "a", "mortal", "coil", "out", "of", "coalesced", "spite", "?", "\""]
(c7-5 / amr-unknown
      :topic (c7-2 / cling-01
                   :ARG1 (c7-1 / coil
                               :mod (c7-0 / mortal))
                   :ARG1-of (c7-3 / cause-01
                                  :ARG0 (c7-4 / spite
                                              :ARG1-of (c7-6 / coalesce-01)))))

# ::snt You can't expect nuance (or even curiosity) when there's something so EASY to fall back on, can you?
# ::tokens ["You", "ca", "n't", "expect", "nuance", "(", "or", "even", "curiosity", ")", "when", "there", "'s", "something", "so", "EASY", "to", "fall", "back", "on", ",", "can", "you", "?"]
# ::lemmas ["you", "can", "not", "expect", "nuance", "(", "or", "even", "curiosity", ")", "when", "there", "be", "something", "so", "easy", "to", "fall", "back", "on", ",", "can", "you", "?"]
(c8-8 / possible-01
      :ARG1 (c8-5 / expect-01
                  :ARG0 (c8-0 / you)
                  :ARG1 (c8-4 / or
                              :op1 (c8-7 / nuance)
                              :op2 (c8-10 / curiosity
                                          :mod (c8-3 / even)))
                  :time (c8-2 / fall-back-03
                              :ARG1 (c8-11 / something
                                           :ARG1-of (c8-1 / easy-05
                                                          :degree (c8-6 / so)))))
      :ARG1-of (c8-9 / request-confirmation-91)
      :polarity -)

# ::snt disgraceful for a supposed journalist to try and veer the conversation on tragedy into something so insulting
# ::tokens ["disgraceful", "for", "a", "supposed", "journalist", "to", "try", "and", "veer", "the", "conversation", "on", "tragedy", "into", "something", "so", "insulting"]
# ::lemmas ["disgraceful", "for", "a", "suppose", "journalist", "to", "try", "and", "veer", "the", "conversation", "on", "tragedy", "into", "something", "so", "insulting"]
(c9-5 / disgrace-01
      :ARG0 (c9-9 / try-01
                  :ARG0 (c9-0 / journalist
                              :ARG1-of (c9-8 / suppose-01))
                  :ARG1 (c9-4 / veer-01
                              :ARG0 c9-0
                              :ARG1 (c9-6 / converse-01
                                          :ARG1 (c9-7 / tragedy))
                              :ARG3 (c9-2 / something
                                          :ARG0-of (c9-3 / insult-01
                                                         :degree (c9-1 / so))))))

# ::snt That picture speaks a words!
# ::tokens ["That", "picture", "speaks", "a", "words", "!"]
# ::lemmas ["that", "picture", "speak", "a", "word", "!"]
(c10-0 / speak-01
       :ARG0 (c10-2 / picture
                    :mod (c10-3 / that))
       :ARG1 (c10-1 / word))

# ::snt there is no evidence he was MUSLIM
# ::tokens ["there", "is", "no", "evidence", "he", "was", "MUSLIM"]
# ::lemmas ["there", "be", "no", "evidence", "he", "be", "MUSLIM"]
(c11-1 / evidence-01
       :ARG1 (c11-3 / person
                    :mod (c11-4 / religious-group
                                :name (c11-2 / name
                                             :op1 "Muslim"))
                    :domain (c11-0 / he))
       :polarity -)

# ::snt well, I wouldn't call it "living."
# ::tokens ["well", ",", "I", "would", "n't", "call", "it", "\"", "living", ".", "\""]
# ::lemmas ["well", ",", "i", "would", "not", "call", "it", "\"", "live", ".", "\""]
(c12-1 / call-01
       :ARG0 (c12-3 / i)
       :ARG1 (c12-2 / it)
       :ARG2 (c12-0 / live-01)
       :polarity -)

# ::snt lol exactly.
# ::tokens ["lol", "exactly", "."]
# ::lemmas ["lol", "exactly", "."]
(c13-0 / exact-01
       :ARG2-of (c13-1 / laugh-01
                       :manner (c13-2 / loud)
                       :mode expressive))

# ::snt Robertson has been a caricature of himself for decades
# ::tokens ["Robertson", "has", "been", "a", "caricature", "of", "himself", "for", "decades"]
# ::lemmas ["Robertson", "have", "be", "a", "caricature", "of", "himself", "for", "decades"]
(c14-4 / caricature
       :domain (c14-2 / person
                      :name (c14-1 / name
                                   :op1 "Robertson"))
       :duration (c14-0 / multiple
                        :op1 (c14-5 / temporal-quantity
                                    :unit (c14-3 / decade)
                                    :quant 1)))

# ::snt lol he wasn't
# ::tokens ["lol", "he", "was", "n't"]
# ::lemmas ["lol", "he", "be", "not"]
(c15-0 / have-polarity-91
       :ARG1 (c15-4 / he)
       :manner (c15-1 / laugh-01
                      :ARG0 (c15-2 / i)
                      :manner (c15-3 / loud)
                      :mode expressive)
       :ARG2 -)

# ::snt allah told him to do it.
# ::tokens ["allah", "told", "him", "to", "do", "it", "."]
# ::lemmas ["allah", "tell", "he", "to", "do", "it", "."]
(c16-5 / tell-01
       :ARG0 (c16-3 / person
                    :name (c16-2 / name
                                 :op1 "allah"))
       :ARG1 (c16-4 / do-02
                    :ARG0 (c16-0 / he)
                    :ARG1 (c16-1 / it))
       :ARG2 c16-0)

# ::snt This man (Robertson) is a buffoon.
# ::tokens ["This", "man", "(", "Robertson", ")", "is", "a", "buffoon", "."]
# ::lemmas ["this", "man", "(", "Robertson", ")", "be", "a", "buffoon", "."]
(c17-3 / buffoon
       :domain (c17-2 / man
                      :name (c17-0 / name
                                   :op1 "Robertson")
                      :mod (c17-1 / this)))

# ::snt lmao
# ::tokens ["lmao"]
# ::lemmas ["lmao"]
(c18-2 / laugh-01
       :ARG0 (c18-3 / i
                    :part (c18-1 / ass))
       :ARG3 (c18-0 / off
                    :op1 c18-1))

# ::snt Maybe the pilot was so excited, he forgot to yell, "ALLAHU AKBAR !"
# ::tokens ["Maybe", "the", "pilot", "was", "so", "excited", ",", "he", "forgot", "to", "yell", ",", "\"", "ALLAHU", "AKBAR", "!", "\""]
# ::lemmas ["maybe", "the", "pilot", "be", "so", "excited", ",", "he", "forget", "to", "yell", ",", "\"", "ALLAHU", "AKBAR", "!", "\""]
(c19-6 / possible-01
       :ARG1 (c19-4 / excite-01
                    :ARG1 (c19-8 / person
                                 :ARG0-of (c19-3 / pilot-01))
                    :ARG2-of (c19-0 / have-degree-91
                                    :ARG1 c19-8
                                    :ARG3 (c19-7 / so)
                                    :ARG6 (c19-2 / forget-01
                                                 :ARG0 c19-8
                                                 :ARG1 (c19-1 / yell-01
                                                              :ARG0 c19-8
                                                              :ARG1 (c19-9 / allahu
                                                                           :mode expressive)
                                                              :ARG2 (c19-5 / arab))))))

# ::snt Alive, yes, but do not mistake for an intelligent life form
# ::tokens ["Alive", ",", "yes", ",", "but", "do", "not", "mistake", "for", "an", "intelligent", "life", "form"]
# ::lemmas ["alive", ",", "yes", ",", "but", "do", "not", "mistake", "for", "an", "intelligent", "life", "form"]
(c20-7 / contrast-01
       :ARG1 (c20-6 / possible-01
                    :ARG1 (c20-4 / event))
       :ARG2 (c20-2 / mistake-02
                    :ARG0 (c20-0 / you)
                    :ARG1 (c20-1 / form
                                 :mod (c20-3 / life)
                                 :ARG1-of (c20-5 / intelligent-01))
                    :polarity -
                    :mode imperative))
