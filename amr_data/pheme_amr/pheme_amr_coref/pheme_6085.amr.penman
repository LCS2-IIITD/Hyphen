# ::snt MSM is pushing 'mental illness' covered up by pilot!
# ::tokens ["MSM", "is", "pushing", "'", "mental", "illness", "'", "covered", "up", "by", "pilot", "!"]
# ::lemmas ["MSM", "be", "push", "'", "mental", "illness", "'", "cover", "up", "by", "pilot", "!"]
(c1-4 / push-04
      :ARG0 (c1-7 / program
                  :name (c1-3 / name
                              :op1 "MSM"))
      :ARG2 (c1-2 / ill-01
                  :ARG2 (c1-0 / mental)
                  :ARG1-of (c1-5 / cover-up-04
                                 :ARG0 (c1-1 / person
                                             :ARG0-of (c1-6 / pilot-01))))
      :mode expressive)

# ::snt I wondered: jihad or Prozac? Both?
# ::tokens ["I", "wondered", ":", "jihad", "or", "Prozac", "?", "Both", "?"]
# ::lemmas ["i", "wonder", ":", "jihad", "or", "Prozac", "?", "both", "?"]
(c2-1 / wonder-01
      :ARG0 (c2-2 / i)
      :ARG1 (c2-4 / amr-choice
                  :op1 (c2-0 / jihad)
                  :op2 (c2-3 / prozac)))

# ::snt SHOCKER.
# ::tokens ["SHOCKER", "."]
# ::lemmas ["SHOCKER", "."]
(c3-0 / shock-01)

# ::snt We all were just waiting that shoe drop. Didn't have B psychic/detective
# ::tokens ["We", "all", "were", "just", "waiting", "that", "shoe", "drop", ".", "Did", "n't", "have", "B", "psychic", "/", "detective"]
# ::lemmas ["we", "all", "be", "just", "wait", "that", "shoe", "drop", ".", "do", "not", "have", "B", "psychic", "/", "detective"]
(c4-3 / multi-sentence
      :snt1 (c4-1 / wait-01
                  :ARG1 (c4-6 / we
                              :mod (c4-13 / all))
                  :ARG2 (c4-10 / drop-01
                               :ARG1 (c4-11 / shoe))
                  :mod (c4-0 / just))
      :snt2 (c4-2 / have-03
                  :ARG1 (c4-4 / slash
                              :op1 (c4-9 / psychic)
                              :op2 (c4-12 / person
                                          :ARG0-of (c4-5 / investigate-01))
                              :mod (c4-8 / variable
                                         :name (c4-7 / name
                                                     :op1 "B")))
                  :polarity -))

# ::snt Surprise surprise
# ::tokens ["Surprise", "surprise"]
# ::lemmas ["surprise", "surprise"]
(c5-0 / surprise-01
      :mod c5-0)

# ::snt I do not believe any media will.
# ::tokens ["I", "do", "not", "believe", "any", "media", "will", "."]
# ::lemmas ["i", "do", "not", "believe", "any", "medium", "will", "."]
(c6-2 / believe-01
      :ARG0 (c6-3 / i)
      :ARG1 (c6-0 / will
                  :mod (c6-1 / media
                             :mod (c6-4 / any)))
      :polarity -)

# ::snt Breivik-Christian terrorist(by liberal logic) .Rest all cases "Terrorist hv no religion"
# ::tokens ["Breivik", "-", "Christian", "terrorist(by", "liberal", "logic", ")", ".Rest", "all", "cases", "\"", "Terrorist", "hv", "no", "religion", "\""]
# ::lemmas ["Breivik", "-", "Christian", "terrorist(by", "liberal", "logic", ")", ".rest", "all", "case", "\"", "terrorist", "hv", "no", "religion", "\""]
(c7-2 / multi-sentence
      :snt1 (c7-11 / terrorist
                   :mod (c7-7 / religious-group
                              :name (c7-5 / name
                                          :op1 "Breivik"))
                   :mod (c7-4 / religious-group
                              :name (c7-6 / name
                                          :op1 "Christian"))
                   :manner (c7-1 / logic
                                 :ARG1-of (c7-9 / liberal-02)))
      :snt2 (c7-3 / rest-01
                  :ARG1 (c7-8 / case-04
                              :ARG1 (c7-10 / terrorist)
                              :mod (c7-12 / all))
                  :ARG2 (c7-0 / religion
                              :polarity -)))

# ::snt Hm, wonder how many other crashes have been?
# ::tokens ["Hm", ",", "wonder", "how", "many", "other", "crashes", "have", "been", "?"]
# ::lemmas ["hm", ",", "wonder", "how", "many", "other", "crash", "have", "be", "?"]
(c8-1 / wonder-01
      :ARG1 (c8-4 / thing
                  :quant-of (c8-3 / crash-01
                                  :mod (c8-2 / other)
                                  :quant-of c8-4))
      :mod (c8-0 / hmm
                 :mode expressive)
      :mode expressive)

# ::snt love that meme my friend. Mind if I use it?
# ::tokens ["love", "that", "meme", "my", "friend", ".", "Mind", "if", "I", "use", "it", "?"]
# ::lemmas ["love", "that", "meme", "my", "friend", ".", "mind", "if", "i", "use", "it", "?"]
(c9-3 / multi-sentence
      :snt1 (c9-12 / say-01
                   :ARG1 (c9-2 / love-01
                               :ARG0 (c9-7 / i)
                               :ARG1 (c9-8 / meme
                                           :mod (c9-13 / that)))
                   :ARG2 (c9-9 / person
                               :ARG0-of (c9-0 / have-rel-role-91
                                              :ARG1 c9-7
                                              :ARG2 (c9-4 / friend))))
      :snt2 (c9-5 / mind-03
                  :ARG0 (c9-1 / you)
                  :ARG1 (c9-11 / truth-value
                               :polarity-of (c9-6 / use-01
                                                  :ARG0 (c9-10 / i)
                                                  :ARG1 c9-8))
                  :mode imperative))

# ::snt lol
# ::tokens ["lol"]
# ::lemmas ["lol"]
(c10-0 / laugh-01
       :manner (c10-1 / loud)
       :mode expressive)

# ::snt Shock not! They are out to get us.
# ::tokens ["Shock", "not", "!", "They", "are", "out", "to", "get", "us", "."]
# ::lemmas ["shock", "not", "!", "they", "be", "out", "to", "get", "we", "."]
(c11-1 / multi-sentence
       :snt1 (c11-5 / shock-01
                    :polarity -)
       :snt2 (c11-2 / be-located-at-91
                    :ARG1 (c11-6 / they)
                    :ARG2 (c11-3 / out)
                    :purpose (c11-4 / get-01
                                    :ARG0 c11-6
                                    :ARG1 (c11-0 / we))))

# ::snt I saw this same article yesterday but other medias not confirming this - yet
# ::tokens ["I", "saw", "this", "same", "article", "yesterday", "but", "other", "medias", "not", "confirming", "this", "-", "yet"]
# ::lemmas ["i", "see", "this", "same", "article", "yesterday", "but", "other", "media", "not", "confirm", "this", "-", "yet"]
(c12-6 / contrast-01
       :ARG1 (c12-8 / see-01
                    :ARG0 (c12-4 / i)
                    :ARG1 (c12-10 / article
                                  :ARG1-of (c12-3 / same-01)
                                  :mod (c12-9 / this))
                    :time (c12-0 / yesterday))
       :ARG2 (c12-5 / confirm-01
                    :ARG0 (c12-1 / medicias
                                 :mod (c12-2 / other))
                    :ARG1 (c12-7 / this)
                    :time (c12-11 / yet)
                    :polarity -))

# ::snt I puspected as much.
# ::tokens ["I", "puspected", "as", "much", "."]
# ::lemmas ["i", "puspecte", "as", "much", "."]
(c13-1 / puspected-01
       :ARG0 (c13-3 / i)
       :ARG1 (c13-2 / much
                    :degree (c13-0 / this)))

# ::snt Imagine that.. And he even had a Job..Oh well, I guess it's Bushes fault..
# ::tokens ["Imagine", "that", "..", "And", "he", "even", "had", "a", "Job", "..", "Oh", "well", ",", "I", "guess", "it", "'s", "Bushes", "fault", ".."]
# ::lemmas ["imagine", "that", "..", "and", "he", "even", "have", "a", "Job", "..", "oh", "well", ",", "i", "guess", "it", "be", "Bushes", "fault", ".."]
(c14-4 / multi-sentence
       :snt1 (c14-9 / imagine-01
                    :ARG0 (c14-1 / you)
                    :ARG1 (c14-14 / that)
                    :mode imperative)
       :snt2 (c14-15 / and
                     :op2 (c14-0 / have-03
                                 :ARG0 (c14-3 / he)
                                 :ARG1 (c14-2 / job)
                                 :mod (c14-8 / even)))
       :snt3 (c14-12 / guess-01
                     :ARG0 (c14-13 / i)
                     :ARG1 (c14-5 / fault-01
                                  :ARG1 (c14-11 / person
                                                :name (c14-10 / name
                                                              :op1 "Bush"))
                                  :ARG2 (c14-6 / it))
                     :mod (c14-7 / oh-well
                                 :mode expressive)))

# ::snt I'm shocked!
# ::tokens ["I", "'m", "shocked", "!"]
# ::lemmas ["i", "be", "shocked", "!"]
(c15-0 / shock-01
       :ARG1 (c15-1 / i))

# ::snt Most media are publishing the mental illness theory. Well see..
# ::tokens ["Most", "media", "are", "publishing", "the", "mental", "illness", "theory", ".", "Well", "see", ".."]
# ::lemmas ["most", "medium", "be", "publish", "the", "mental", "illness", "theory", ".", "well", "see", ".."]
(c16-3 / multi-sentence
       :snt1 (c16-5 / publish-01
                    :ARG0 (c16-6 / media
                                 :mod (c16-2 / most))
                    :ARG1 (c16-9 / theory
                                 :topic (c16-4 / ill-01
                                               :ARG2 (c16-7 / mind))))
       :snt2 (c16-8 / see-01
                    :ARG0 (c16-0 / you)
                    :mod (c16-1 / well)
                    :mode imperative))

# ::snt Well, well, well!
# ::tokens ["Well", ",", "well", ",", "well", "!"]
# ::lemmas ["well", ",", "well", ",", "well", "!"]
(c17-0 / well
       :mode expressive)

# ::snt That's almost too clean isn't it? Who was on the passenger list? There is something more to this.
# ::tokens ["That", "'s", "almost", "too", "clean", "is", "n't", "it", "?", "Who", "was", "on", "the", "passenger", "list", "?", "There", "is", "something", "more", "to", "this", "."]
# ::lemmas ["that", "be", "almost", "too", "clean", "be", "not", "it", "?", "who", "be", "on", "the", "passenger", "list", "?", "there", "be", "something", "more", "to", "this", "."]
(c18-1 / multi-sentence
       :snt1 (c18-5 / clean-04
                    :ARG1 (c18-9 / that)
                    :mod (c18-10 / almost)
                    :ARG1-of (c18-4 / request-confirmation-91))
       :snt2 (c18-0 / list-01
                    :ARG1 (c18-2 / amr-unknown)
                    :ARG2 (c18-3 / passenger))
       :snt3 (c18-8 / something
                    :mod (c18-6 / more)
                    :prep-to (c18-7 / this)))

# ::snt if true we now know why state dept immediately claimed his religion was not germane
# ::tokens ["if", "true", "we", "now", "know", "why", "state", "dept", "immediately", "claimed", "his", "religion", "was", "not", "germane"]
# ::lemmas ["if", "true", "we", "now", "know", "why", "state", "dept", "immediately", "claim", "his", "religion", "be", "not", "germane"]
(c19-3 / know-01
       :ARG0 (c19-1 / we)
       :ARG1 (c19-12 / thing
                     :ARG0-of (c19-6 / cause-01
                                     :ARG1 (c19-5 / claim-01
                                                  :ARG0 (c19-7 / department
                                                               :mod (c19-10 / state))
                                                  :ARG1 (c19-8 / germane
                                                               :domain (c19-9 / religion
                                                                              :poss (c19-0 / he))
                                                               :polarity -)
                                                  :time (c19-2 / immediate))))
       :condition (c19-11 / true-01
                          :ARG1 c19-5)
       :time (c19-4 / now))

# ::snt Probably driven to crash that aircraft by those evil Christians and Crusades BO will say.
# ::tokens ["Probably", "driven", "to", "crash", "that", "aircraft", "by", "those", "evil", "Christians", "and", "Crusades", "BO", "will", "say", "."]
# ::lemmas ["probably", "drive", "to", "crash", "that", "aircraft", "by", "those", "evil", "Christians", "and", "Crusades", "BO", "will", "say", "."]
(c20-10 / say-01
        :ARG0 (c20-5 / person
                     :name (c20-3 / name
                                  :op1 "Boom"))
        :ARG1 (c20-13 / probable
                      :domain (c20-6 / drive-02
                                     :ARG0 (c20-14 / and
                                                   :op1 (c20-0 / person
                                                               :mod (c20-7 / religious-group
                                                                           :name (c20-4 / name
                                                                                        :op1 "Christian"))
                                                               :mod (c20-1 / evil))
                                                   :op2 (c20-12 / person
                                                                :mod c20-7
                                                                :name (c20-8 / name
                                                                             :op1 "Crusade"))))
                      :ARG1 (c20-9 / crash-01
                                   :ARG0 c20-14
                                   :ARG1 (c20-2 / aircraft
                                                :mod (c20-11 / that)))))

# ::snt and spent time at mosque in Bremen
# ::tokens ["and", "spent", "time", "at", "mosque", "in", "Bremen"]
# ::lemmas ["and", "spend", "time", "at", "mosque", "in", "Bremen"]
(c21-6 / and
       :op2 (c21-4 / spend-02
                   :ARG1 (c21-5 / time)
                   :ARG2 (c21-1 / be-located-at-91
                                :ARG1 c21-5
                                :ARG2 (c21-0 / mosque
                                             :location (c21-3 / city
                                                              :name (c21-2 / name
                                                                           :op1 "Bremen"))))))

# ::snt Now expect Global libbies join Chorus "Terrorists have no religion" except the act is by Kafir
# ::tokens ["Now", "expect", "Global", "libbies", "join", "Chorus", "\"", "Terrorists", "have", "no", "religion", "\"", "except", "the", "act", "is", "by", "Kafir"]
# ::lemmas ["now", "expect", "global", "libby", "join", "Chorus", "\"", "Terrorists", "have", "no", "religion", "\"", "except", "the", "act", "be", "by", "Kafir"]
(c22-6 / expect-01
       :ARG0 (c22-1 / you)
       :ARG1 (c22-0 / join-04
                    :ARG0 (c22-9 / person
                                 :ARG1-of (c22-3 / liberal-02)
                                 :mod (c22-12 / globe))
                    :ARG1 (c22-4 / music
                                 :name (c22-7 / name
                                              :op1 "Chorus")
                                 :topic (c22-2 / have-03
                                               :ARG0 (c22-13 / terrorist)
                                               :ARG1 (c22-10 / religion)
                                               :polarity -)
                                 :ARG2-of (c22-5 / except-01
                                                 :ARG1 (c22-15 / act-02
                                                               :ARG0 (c22-14 / person
                                                                             :name (c22-8 / name
                                                                                          :op1 "Kafir"))))))
       :time (c22-11 / now)
       :mode imperative)

# ::snt I freakin' knew it!
# ::tokens ["I", "freakin", "'", "knew", "it", "!"]
# ::lemmas ["i", "freakin", "'", "know", "it", "!"]
(c23-1 / know-01
       :ARG0 (c23-3 / i)
       :ARG1 (c23-2 / it)
       :ARG1-of (c23-0 / freak-01))

# ::snt I, too, am shocked...Shocked!
# ::tokens ["I", ",", "too", ",", "am", "shocked", "...", "Shocked", "!"]
# ::lemmas ["i", ",", "too", ",", "be", "shock", "...", "shock", "!"]
(c24-0 / shock-01
       :ARG1 (c24-2 / i
                    :mod (c24-1 / too)))

# ::snt Bets off.. I won...
# ::tokens ["Bets", "off", "..", "I", "won", "..."]
# ::lemmas ["bet", "off", "..", "i", "win", "..."]
(c25-2 / and
       :op1 (c25-3 / bets-off-00)
       :op2 (c25-0 / win-01
                   :ARG0 (c25-1 / i)))

# ::snt You just KNEW this was coming.
# ::tokens ["You", "just", "KNEW", "this", "was", "coming", "."]
# ::lemmas ["you", "just", "know", "this", "be", "come", "."]
(c26-2 / know-01
       :ARG0 (c26-1 / you)
       :ARG1 (c26-3 / come-03
                    :ARG1 (c26-4 / this))
       :mod (c26-0 / just))
