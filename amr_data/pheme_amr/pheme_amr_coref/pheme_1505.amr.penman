# ::snt And the day after tomorrow WAR, because stupid fucks won't stop illustrating Muhammad.
# ::tokens ["And", "the", "day", "after", "tomorrow", "WAR", ",", "because", "stupid", "fucks", "wo", "n't", "stop", "illustrating", "Muhammad", "."]
# ::lemmas ["and", "the", "day", "after", "tomorrow", "WAR", ",", "because", "stupid", "fuck", "will", "not", "stop", "illustrate", "Muhammad", "."]
(c1-13 / and
       :op2 (c1-8 / cause-01
                  :ARG0 (c1-10 / stop-01
                               :ARG0 (c1-6 / person
                                           :mod (c1-2 / stupid)
                                           :mod (c1-1 / fuck))
                               :ARG1 (c1-4 / illustrate-01
                                           :ARG0 c1-6
                                           :ARG1 (c1-12 / person
                                                        :name (c1-5 / name
                                                                    :op1 "Muhammad")))
                               :polarity -)
                  :ARG1 (c1-0 / war
                              :time (c1-3 / after
                                          :op1 (c1-11 / tomorrow)
                                          :quant (c1-9 / temporal-quantity
                                                       :unit (c1-7 / day)
                                                       :quant 1)))))

# ::snt offending someone is never a reason to kill.
# ::tokens ["offending", "someone", "is", "never", "a", "reason", "to", "kill", "."]
# ::lemmas ["offend", "someone", "be", "never", "a", "reason", "to", "kill", "."]
(c2-2 / reason
      :ARG0-of (c2-3 / cause-01
                     :ARG1 (c2-5 / kill-01))
      :domain (c2-0 / offend-03
                    :ARG1 (c2-4 / someone))
      :time (c2-1 / ever)
      :polarity -)

# ::snt so sad for my country
# ::tokens ["so", "sad", "for", "my", "country"]
# ::lemmas ["so", "sad", "for", "my", "country"]
(c3-0 / sad-02
      :ARG1 (c3-2 / country
                  :poss (c3-3 / i))
      :degree (c3-1 / so))

# ::snt Thanks so much Jessica...It's means a lot for us!
# ::tokens ["Thanks", "so", "much", "Jessica", "...", "It", "'s", "means", "a", "lot", "for", "us", "!"]
# ::lemmas ["thank", "so", "much", "Jessica", "...", "it", "be", "mean", "a", "lot", "for", "we", "!"]
(c5-9 / say-01
      :ARG0 (c5-4 / i)
      :ARG1 (c5-10 / thank-01
                   :ARG0 c5-4
                   :ARG1 (c5-6 / person
                               :name (c5-5 / name
                                           :op1 "Jessica"))
                   :degree (c5-2 / much
                                 :degree (c5-3 / so)))
      :ARG2 c5-6
      :topic (c5-7 / mean-01
                   :ARG1 (c5-8 / it)
                   :ARG2 (c5-1 / lot)
                   :ARG3 (c5-0 / we)))

# ::snt Join my hand
# ::tokens ["Join", "my", "hand"]
# ::lemmas ["join", "my", "hand"]
(c6-0 / join-04
      :ARG0 (c6-1 / you)
      :ARG1 (c6-2 / hand
                  :part-of (c6-3 / i))
      :mode imperative)

# ::snt eSuisCharlie all becos u think u have freedom of speech but with dat freedom who have u tied up for ur freedom
# ::tokens ["eSuisCharlie", "all", "becos", "u", "think", "u", "have", "freedom", "of", "speech", "but", "with", "dat", "freedom", "who", "have", "u", "tied", "up", "for", "ur", "freedom"]
# ::lemmas ["esuischarlie", "all", "beco", "u", "think", "u", "have", "freedom", "of", "speech", "but", "with", "dat", "freedom", "who", "have", "u", "tie", "up", "for", "ur", "freedom"]
(c7-10 / say-01
       :ARG0 (c7-4 / i)
       :ARG1 (c7-9 / cause-01
                   :ARG0 (c7-11 / think-01
                                :ARG0 (c7-7 / person
                                            :name (c7-6 / name
                                                        :op1 "eSuisCharlie")
                                            :mod (c7-12 / all))
                                :ARG1 (c7-8 / contrast-01
                                            :ARG1 (c7-0 / have-03
                                                        :ARG0 c7-7
                                                        :ARG1 (c7-1 / free-04
                                                                    :ARG1 c7-7
                                                                    :ARG3 (c7-3 / speak-01)))
                                            :ARG2 (c7-2 / have-03
                                                        :ARG0 c7-7
                                                        :ARG1 (c7-5 / free-04
                                                                    :ARG1 c7-7))))
                   :ARG1 c7-7))

# ::snt true dat there is neva a reason to kill but peeps do it for much less and freedom of speech giv u the right to offend
# ::tokens ["true", "dat", "there", "is", "neva", "a", "reason", "to", "kill", "but", "peeps", "do", "it", "for", "much", "less", "and", "freedom", "of", "speech", "giv", "u", "the", "right", "to", "offend"]
# ::lemmas ["true", "dat", "there", "be", "neva", "a", "reason", "to", "kill", "but", "peep", "do", "it", "for", "much", "less", "and", "freedom", "of", "speech", "giv", "u", "the", "right", "to", "offend"]
(c8-12 / true-01
       :ARG1 (c8-0 / have-concession-91
                   :ARG1 (c8-8 / do-02
                               :ARG0 (c8-7 / peep)
                               :ARG1 (c8-4 / it)
                               :purpose (c8-13 / and
                                               :op1 (c8-2 / free-04
                                                          :ARG3 (c8-11 / speak-01))
                                               :op2 (c8-9 / right-05
                                                          :ARG1 (c8-1 / you)
                                                          :ARG2 (c8-3 / offend-01
                                                                      :ARG0 c8-1))))
                   :ARG2 c8-12
                   :ARG1 (c8-5 / reason
                               :ARG0-of (c8-10 / cause-01
                                               :ARG1 (c8-6 / kill-01))
                               :polarity -)))

# ::snt Yesterday, today, tomorrow RT
# ::tokens ["Yesterday", ",", "today", ",", "tomorrow", "RT"]
# ::lemmas ["Yesterday", ",", "today", ",", "tomorrow", "rt"]
(c9-6 / and
      :op1 (c9-0 / yesterday)
      :op2 (c9-5 / today)
      :op3 (c9-4 / tomorrow)
      :ARG1-of (c9-2 / tell-01
                     :ARG2 (c9-3 / person
                                 :name (c9-1 / name
                                             :op1 "RT"))))

# ::snt thanks Jessica ! Thank you for your support for us French.
# ::tokens ["thanks", "Jessica", "!", "Thank", "you", "for", "your", "support", "for", "us", "French", "."]
# ::lemmas ["thank", "Jessica", "!", "thank", "you", "for", "your", "support", "for", "we", "French", "."]
(c10-7 / thank-01
       :ARG1 (c10-3 / person
                    :name (c10-1 / name
                                 :op1 "Jessica"))
       :ARG2 (c10-5 / thank-01
                    :ARG1 c10-3
                    :ARG2 (c10-6 / support-01
                                 :ARG0 c10-3
                                 :ARG1 (c10-0 / we
                                              :mod (c10-4 / country
                                                          :name (c10-2 / name
                                                                       :op1 "France"))))))

# ::snt : Yesterday, today, tomorrow it
# ::tokens [":", "Yesterday", ",", "today", ",", "tomorrow", "it"]
# ::lemmas [":", "Yesterday", ",", "today", ",", "tomorrow", "it"]
(c11-2 / and
       :op1 (c11-0 / yesterday)
       :op2 (c11-1 / today)
       :op3 (c11-3 / tomorrow))
