# ::snt CAFE, not 'care'. Idiots -and you get paid to write these typos!
# ::tokens ["CAFE", ",", "not", "'", "care", "'", ".", "Idiots", "-and", "you", "get", "paid", "to", "write", "these", "typos", "!"]
# ::lemmas ["CAFE", ",", "not", "'", "care", "'", ".", "idiot", "-and", "you", "get", "pay", "to", "write", "these", "typo", "!"]
(c1-2 / multi-sentence
      :snt1 (c1-7 / care-01
                  :ARG0 (c1-9 / treaty
                              :name (c1-4 / name
                                          :op1 "CAFE"))
                  :polarity -)
      :snt2 (c1-10 / and
                   :op1 (c1-3 / idiot)
                   :op2 (c1-6 / pay-01
                              :ARG2 (c1-0 / you)
                              :ARG3 (c1-1 / write-01
                                          :ARG0 c1-3
                                          :ARG1 (c1-8 / typo
                                                      :mod (c1-5 / this))))))

# ::snt cafe *
# ::tokens ["cafe", "*"]
# ::lemmas ["cafe", "*"]
(c2-0 / safe-01)

# ::snt Aaron Iranian monies who kidnap hostages in Sydney
# ::tokens ["Aaron", "Iranian", "monies", "who", "kidnap", "hostages", "in", "Sydney"]
# ::lemmas ["Aaron", "Iranian", "monie", "who", "kidnap", "hostage", "in", "Sydney"]
(c3-1 / money
      :source (c3-7 / country
                    :name (c3-3 / name
                                :op1 "Iran"))
      :ARG0-of (c3-10 / kidnap-01
                      :ARG1 (c3-0 / hostage)
                      :location (c3-6 / city
                                      :name (c3-4 / name
                                                  :op1 "Sydney")))
      :quant (c3-5 / multiple
                   :op1 1000000)
      :ARG2-of (c3-2 / include-91
                     :ARG1 (c3-8 / person
                                 :name (c3-9 / name
                                             :op1 "Aaron"))))

# ::snt where are the snipers?
# ::tokens ["where", "are", "the", "snipers", "?"]
# ::lemmas ["where", "be", "the", "sniper", "?"]
(c4-0 / sniper
      :location (c4-1 / amr-unknown))

# ::snt : : Police confirm that is over. A bomb robot is to enter the front door of the care shortly.
# ::tokens [":", ":", "Police", "confirm", "that", "is", "over", ".", "A", "bomb", "robot", "is", "to", "enter", "the", "front", "door", "of", "the", "care", "shortly", "."]
# ::lemmas [":", ":", "police", "confirm", "that", "be", "over", ".", "a", "bomb", "robot", "be", "to", "enter", "the", "front", "door", "of", "the", "care", "shortly", "."]
(c5-1 / multi-sentence
      :snt1 (c5-7 / confirm-01
                  :ARG0 (c5-5 / police)
                  :ARG1 (c5-3 / over-01
                              :ARG1 (c5-11 / that)))
      :snt2 (c5-4 / enter-01
                  :ARG0 (c5-6 / robot
                              :mod (c5-2 / bomb))
                  :ARG1 (c5-8 / door
                              :mod (c5-0 / front)
                              :part-of (c5-9 / care-03))
                  :time (c5-10 / short-07)))

# ::snt Yes!!! : : Police confirm that is over. A bomb robot is to enter the front door of the care shortly.
# ::tokens ["Yes", "!", "!", "!", ":", ":", "Police", "confirm", "that", "is", "over", ".", "A", "bomb", "robot", "is", "to", "enter", "the", "front", "door", "of", "the", "care", "shortly", "."]
# ::lemmas ["yes", "!", "!", "!", ":", ":", "police", "confirm", "that", "be", "over", ".", "a", "bomb", "robot", "be", "to", "enter", "the", "front", "door", "of", "the", "care", "shortly", "."]
(c6-2 / multi-sentence
      :snt1 (c6-0 / yes
                  :mode expressive)
      :snt2 (c6-8 / confirm-01
                  :ARG0 (c6-6 / police)
                  :ARG1 (c6-4 / over-01
                              :ARG1 (c6-12 / that)))
      :snt3 (c6-5 / enter-01
                  :ARG0 (c6-7 / robot
                              :mod (c6-3 / bomb))
                  :ARG1 (c6-9 / door
                              :mod (c6-1 / front)
                              :part-of (c6-10 / care-03))
                  :time (c6-11 / short-07)))
