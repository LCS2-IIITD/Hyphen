# ::snt this is going to cause a group to endanger his family -- violence doesn't solve violence.
# ::tokens ["this", "is", "going", "to", "cause", "a", "group", "to", "endanger", "his", "family", "--", "violence", "does", "n't", "solve", "violence", "."]
# ::lemmas ["this", "be", "go", "to", "cause", "a", "group", "to", "endanger", "his", "family", "--", "violence", "do", "not", "solve", "violence", "."]
(c1-0 / multi-sentence
      :snt1 (c1-4 / cause-01
                  :ARG0 (c1-7 / this)
                  :ARG1 (c1-2 / endanger-01
                              :ARG0 c1-7
                              :ARG1 (c1-5 / group)))
      :snt2 (c1-6 / solve-01
                  :ARG0 (c1-3 / violence)
                  :ARG1 (c1-1 / violence)
                  :polarity -))

# ::snt it's about time
# ::tokens ["it", "'s", "about", "time"]
# ::lemmas ["it", "be", "about", "time"]
(c2-0 / time
      :mod (c2-1 / about))

# ::snt chief says the name of the officer that shot will be released this morning
# ::tokens ["chief", "says", "the", "name", "of", "the", "officer", "that", "shot", "will", "be", "released", "this", "morning"]
# ::lemmas ["chief", "say", "the", "name", "of", "the", "officer", "that", "shot", "will", "be", "release", "this", "morning"]
(c3-10 / say-01
       :ARG0 (c3-5 / person
                   :ARG0-of (c3-0 / have-org-role-91
                                  :ARG2 (c3-7 / chief)))
       :ARG1 (c3-6 / release-01
                   :ARG1 (c3-11 / thing
                                :ARG2-of (c3-3 / name-01
                                               :ARG1 (c3-12 / person
                                                            :ARG0-of (c3-2 / shoot-02)
                                                            :mod (c3-9 / that))))
                   :time (c3-8 / date-entity
                               :dayperiod (c3-1 / morning)
                               :mod (c3-4 / today))))

# ::snt How the hell do you work some where and dont know the people hate your ass? lies SMDH
# ::tokens ["How", "the", "hell", "do", "you", "work", "some", "where", "and", "do", "nt", "know", "the", "people", "hate", "your", "ass", "?", "lies", "SMDH"]
# ::lemmas ["how", "the", "hell", "do", "you", "work", "some", "where", "and", "do", "not", "know", "the", "people", "hate", "your", "ass", "?", "lie", "SMDH"]
(c4-4 / multi-sentence
      :snt1 (c4-15 / and
                   :op1 (c4-1 / work-01
                              :ARG0 (c4-10 / person
                                           :name (c4-8 / name
                                                       :op1 "SMDH"))
                              :manner (c4-6 / amr-unknown
                                            :mod (c4-0 / hell
                                                       :mode expressive))
                              :location (c4-11 / somewhere))
                   :op2 (c4-13 / know-01
                               :ARG0 c4-10
                               :ARG1 (c4-3 / hate-01
                                           :ARG0 (c4-14 / person)
                                           :ARG1 (c4-9 / ass
                                                       :part-of (c4-2 / you)))
                               :polarity -)
                   :polarity (c4-12 / amr-unknown))
      :snt2 (c4-5 / lie-08
                  :ARG0 (c4-7 / i)))

# ::snt all these post -mortem and clean up.. is it possible to bring back??
# ::tokens ["all", "these", "post", "-mortem", "and", "clean", "up", "..", "is", "it", "possible", "to", "bring", "back", "?", "?"]
# ::lemmas ["all", "these", "post", "-mortem", "and", "clean", "up", "..", "be", "it", "possible", "to", "bring", "back", "?", "?"]
(c5-3 / possible-01
      :ARG1 (c5-0 / bring-01
                  :ARG1 (c5-8 / and
                              :op1 (c5-1 / autopsy-01)
                              :op2 (c5-4 / clean-up-02)
                              :mod (c5-7 / this)
                              :mod (c5-2 / all))
                  :direction (c5-5 / back))
      :polarity (c5-6 / amr-unknown))

# ::snt he looks exactly how I imagine that entire police force looks: fat, white and completely incompetent.
# ::tokens ["he", "looks", "exactly", "how", "I", "imagine", "that", "entire", "police", "force", "looks", ":", "fat", ",", "white", "and", "completely", "incompetent", "."]
# ::lemmas ["he", "look", "exactly", "how", "i", "imagine", "that", "entire", "police", "force", "look", ":", "fat", ",", "white", "and", "completely", "incompetent", "."]
(c6-2 / look-02
      :ARG0 (c6-0 / he)
      :ARG1 (c6-13 / thing
                   :manner-of (c6-6 / imagine-01
                                    :ARG0 (c6-11 / i)
                                    :ARG1 (c6-12 / look-02
                                                 :ARG0 (c6-3 / force
                                                             :mod (c6-8 / police)
                                                             :mod (c6-5 / entire))
                                                 :ARG1 (c6-14 / and
                                                              :op1 (c6-7 / fat-03
                                                                         :ARG1 c6-3)
                                                              :op2 (c6-1 / white-02
                                                                         :ARG1 c6-3)
                                                              :op3 (c6-10 / competent-01
                                                                          :ARG1 c6-3
                                                                          :ARG1-of (c6-9 / complete-02)
                                                                          :polarity -))))
                   :mod (c6-4 / exact)))

# ::snt we already know his name. Bryan P Willman. Thanks to
# ::tokens ["we", "already", "know", "his", "name", ".", "Bryan", "P", "Willman", ".", "Thanks", "to"]
# ::lemmas ["we", "already", "know", "his", "name", ".", "Bryan", "P", "Willman", ".", "thank", "to"]
(c7-2 / multi-sentence
      :snt1 (c7-6 / know-01
                  :ARG0 (c7-0 / we)
                  :ARG1 (c7-4 / name
                              :op1 "Bryan"
                              :op2 "P"
                              :op3 "Willman")
                  :time (c7-7 / already))
      :snt2 (c7-5 / thank-01
                  :ARG0 (c7-3 / i)
                  :ARG1 (c7-1 / you)))

# ::snt No, that guess was wrong. It's Darren Wilson.
# ::tokens ["No", ",", "that", "guess", "was", "wrong", ".", "It", "'s", "Darren", "Wilson", "."]
# ::lemmas ["no", ",", "that", "guess", "be", "wrong", ".", "it", "be", "Darren", "Wilson", "."]
(c8-1 / multi-sentence
      :snt1 (c8-0 / wrong-04
                  :ARG2 (c8-4 / guess-01
                              :mod (c8-5 / that)))
      :snt2 (c8-3 / person
                  :name (c8-2 / name
                              :op1 "Darren"
                              :op2 "Wilson")))

# ::snt it's too late we already know who he is
# ::tokens ["it", "'s", "too", "late", "we", "already", "know", "who", "he", "is"]
# ::lemmas ["it", "be", "too", "late", "we", "already", "know", "who", "he", "be"]
(c9-6 / know-01
      :ARG0 (c9-1 / we)
      :ARG1 (c9-4 / person
                  :domain (c9-0 / he))
      :time (c9-7 / already)
      :ARG1-of (c9-2 / have-degree-91
                     :ARG2 (c9-3 / late)
                     :ARG3 (c9-5 / too)))

# ::snt He said that mornings ago.
# ::tokens ["He", "said", "that", "mornings", "ago", "."]
# ::lemmas ["he", "say", "that", "morning", "ago", "."]
(c10-4 / say-01
       :ARG0 (c10-0 / he)
       :ARG1 (c10-5 / that)
       :time (c10-2 / before
                    :op1 (c10-3 / now)
                    :dayperiod (c10-1 / morning)))

# ::snt that was my mistake. Bryan Willman was the man standing over him.
# ::tokens ["that", "was", "my", "mistake", ".", "Bryan", "Willman", "was", "the", "man", "standing", "over", "him", "."]
# ::lemmas ["that", "be", "my", "mistake", ".", "Bryan", "Willman", "be", "the", "man", "stand", "over", "he", "."]
(c11-2 / multi-sentence
       :snt1 (c11-6 / mistake-02
                    :ARG0 (c11-4 / i)
                    :ARG1 (c11-9 / that))
       :snt2 (c11-1 / man
                    :ARG0-of (c11-8 / stand-01
                                    :ARG2 (c11-3 / over
                                                 :op1 (c11-0 / he)))
                    :domain (c11-7 / person
                                   :name (c11-5 / name
                                                :op1 "Bryan"
                                                :op2 "Willman"))))

# ::snt days later? Ok.
# ::tokens ["days", "later", "?", "Ok", "."]
# ::lemmas ["days", "later", "?", "ok", "."]
(c12-1 / okay-04
       :polarity (c12-5 / amr-unknown)
       :time (c12-2 / after
                    :quant (c12-0 / multiple
                                  :op1 (c12-4 / temporal-quantity
                                              :unit (c12-3 / day)
                                              :quant 1))))

# ::snt we wait with baited breath.
# ::tokens ["we", "wait", "with", "baited", "breath", "."]
# ::lemmas ["we", "wait", "with", "bait", "breath", "."]
(c13-1 / wait-01
       :ARG1 (c13-3 / we)
       :manner (c13-2 / abate-01
                      :ARG1 (c13-0 / breathe-01
                                   :ARG0 c13-3)))

# ::snt this is going to be a scarring day for the family. Our support and concerns goes to the family.
# ::tokens ["this", "is", "going", "to", "be", "a", "scarring", "day", "for", "the", "family", ".", "Our", "support", "and", "concerns", "goes", "to", "the", "family", "."]
# ::lemmas ["this", "be", "go", "to", "be", "a", "scar", "day", "for", "the", "family", ".", "our", "support", "and", "concern", "go", "to", "the", "family", "."]
(c14-2 / multi-sentence
       :snt1 (c14-4 / day
                    :ARG0-of (c14-7 / scar-01
                                    :ARG1 (c14-1 / family))
                    :domain (c14-8 / this))
       :snt2 (c14-6 / go-10
                    :ARG1 (c14-9 / and
                                 :op1 (c14-3 / support-01
                                             :ARG0 (c14-0 / we))
                                 :op2 (c14-5 / concern-01
                                             :ARG1 c14-0))
                    :ARG2 c14-1))

# ::snt : RT chief says the name of the officer that shot will be released this morning
# ::tokens [":", "RT", "chief", "says", "the", "name", "of", "the", "officer", "that", "shot", "will", "be", "released", "this", "morning"]
# ::lemmas [":", "RT", "chief", "say", "the", "name", "of", "the", "officer", "that", "shot", "will", "be", "release", "this", "morning"]
(c15-12 / say-01
        :ARG0 (c15-6 / person
                     :ARG0-of (c15-0 / have-org-role-91
                                     :ARG1 (c15-14 / publication
                                                   :name (c15-4 / name
                                                                :op1 "RT"))
                                     :ARG2 (c15-8 / chief)))
        :ARG1 (c15-7 / release-01
                     :ARG1 (c15-13 / thing
                                   :ARG2-of (c15-5 / name-01
                                                   :ARG1 (c15-2 / officer
                                                                :ARG0-of (c15-3 / shoot-01)
                                                                :mod (c15-11 / that))))
                     :time (c15-9 / date-entity
                                  :dayperiod (c15-1 / morning)
                                  :mod (c15-10 / today))))

# ::snt 'bout time, too many secrets in this situation
# ::tokens ["'bout", "time", ",", "too", "many", "secrets", "in", "this", "situation"]
# ::lemmas ["'bout", "time", ",", "too", "many", "secret", "in", "this", "situation"]
(c16-4 / secret
       :time (c16-2 / situation
                    :mod (c16-5 / this))
       :ARG1-of (c16-0 / have-quant-91
                       :ARG2 (c16-1 / many)
                       :ARG3 (c16-3 / too)))

# ::snt corrupt police in this situation
# ::tokens ["corrupt", "police", "in", "this", "situation"]
# ::lemmas ["corrupt", "police", "in", "this", "situation"]
(c17-1 / police
       :ARG1-of (c17-3 / corrupt-01)
       :condition (c17-0 / situation
                         :mod (c17-2 / this)))

# ::snt chief says the name of the officer that shot will be released this morning
# ::tokens ["chief", "says", "the", "name", "of", "the", "officer", "that", "shot", "will", "be", "released", "this", "morning"]
# ::lemmas ["chief", "say", "the", "name", "of", "the", "officer", "that", "shot", "will", "be", "release", "this", "morning"]
(c18-10 / say-01
        :ARG0 (c18-5 / person
                     :ARG0-of (c18-0 / have-org-role-91
                                     :ARG2 (c18-7 / chief)))
        :ARG1 (c18-6 / release-01
                     :ARG1 (c18-11 / thing
                                   :ARG2-of (c18-3 / name-01
                                                   :ARG1 (c18-12 / person
                                                                 :ARG0-of (c18-2 / shoot-02)
                                                                 :mod (c18-9 / that))))
                     :time (c18-8 / date-entity
                                  :dayperiod (c18-1 / morning)
                                  :mod (c18-4 / today))))

# ::snt funny how they are releasing after only after ANYONOMOUS already hacked and tweeted the real name of the officer
# ::tokens ["funny", "how", "they", "are", "releasing", "after", "only", "after", "ANYONOMOUS", "already", "hacked", "and", "tweeted", "the", "real", "name", "of", "the", "officer"]
# ::lemmas ["funny", "how", "they", "be", "release", "after", "only", "after", "anyonomous", "already", "hack", "and", "tweet", "the", "real", "name", "of", "the", "officer"]
(c19-1 / funny
       :domain (c19-9 / release-01
                      :ARG0 (c19-12 / they)
                      :time (c19-13 / after
                                    :op1 (c19-4 / and
                                                :op1 (c19-0 / hack-04
                                                            :ARG0 (c19-7 / anyone)
                                                            :time (c19-11 / already))
                                                :op2 (c19-10 / tweet-02
                                                             :ARG0 c19-7
                                                             :ARG1 (c19-8 / thing
                                                                          :ARG2-of (c19-6 / name-01
                                                                                          :ARG1 (c19-3 / officer))
                                                                          :ARG1-of (c19-5 / real-04))))
                                    :mod (c19-2 / only))))
