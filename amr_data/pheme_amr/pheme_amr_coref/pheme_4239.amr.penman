# ::snt Amazing, so how many died in Syria today?
# ::tokens ["Amazing", ",", "so", "how", "many", "died", "in", "Syria", "today", "?"]
# ::lemmas ["amazing", ",", "so", "how", "many", "die", "in", "Syria", "today", "?"]
(c1-6 / amaze-01
      :ARG0 (c1-3 / die-01
                  :ARG1 (c1-2 / person
                              :quant (c1-0 / amr-unknown))
                  :location (c1-4 / country
                                  :name (c1-1 / name
                                              :op1 "Syria"))
                  :time (c1-5 / today)))

# ::snt don't thank god. Thank the medical staff!
# ::tokens ["do", "n't", "thank", "god", ".", "Thank", "the", "medical", "staff", "!"]
# ::lemmas ["do", "not", "thank", "god", ".", "thank", "the", "medical", "staff", "!"]
(c2-1 / multi-sentence
      :snt1 (c2-7 / thank-01
                  :ARG0 (c2-0 / you)
                  :ARG1 (c2-3 / person
                              :name (c2-2 / name
                                          :op1 "God"))
                  :polarity -
                  :mode imperative)
      :snt2 (c2-5 / thank-01
                  :ARG0 (c2-9 / you)
                  :ARG1 (c2-8 / person
                              :ARG2-of (c2-6 / staff-01)
                              :mod (c2-4 / medicine))
                  :mode imperative))

# ::snt normally a little bit shit in the soldiering sense but suprise is worth a lot
# ::tokens ["normally", "a", "little", "bit", "shit", "in", "the", "soldiering", "sense", "but", "suprise", "is", "worth", "a", "lot"]
# ::lemmas ["normally", "a", "little", "bit", "shit", "in", "the", "soldiering", "sense", "but", "suprise", "be", "worth", "a", "lot"]
(c3-7 / contrast-01
      :ARG1 (c3-9 / shit
                  :mod (c3-3 / bit
                             :mod (c3-1 / little))
                  :manner (c3-5 / sense
                                :mod (c3-2 / soldier-01))
                  :ARG1-of (c3-6 / normal-02))
      :ARG2 (c3-0 / worth-01
                  :ARG1 (c3-4 / surprise-01)
                  :ARG2 (c3-8 / lot)))

# ::snt A nonce was beaten to death in Milton Keynes, the World needs to know.
# ::tokens ["A", "nonce", "was", "beaten", "to", "death", "in", "Milton", "Keynes", ",", "the", "World", "needs", "to", "know", "."]
# ::lemmas ["a", "nonce", "be", "beat", "to", "death", "in", "Milton", "Keynes", ",", "the", "World", "need", "to", "know", "."]
(c4-2 / need-01
      :ARG0 (c4-0 / world)
      :ARG1 (c4-8 / know-01
                  :ARG0 c4-0
                  :ARG1 (c4-1 / beat-01
                              :ARG1 (c4-4 / person
                                          :name (c4-3 / name
                                                      :op1 "Nce"))
                              :ARG2 (c4-5 / die-01
                                          :ARG1 c4-4)
                              :location (c4-6 / city
                                              :name (c4-7 / name
                                                          :op1 "Milton"
                                                          :op2 "Keynes")))))

# ::snt UFCE POSSU PROJETOS DE MAQUINAS PURIFICADORAS DE AGUAS SALOBRA E POLUIDA Q PODEM SER USADAS NO RIO TIET-SP
# ::tokens ["UFCE", "POSSU", "PROJETOS", "DE", "MAQUINAS", "PURIFICADORAS", "DE", "AGUAS", "SALOBRA", "E", "POLUIDA", "Q", "PODEM", "SER", "USADAS", "NO", "RIO", "TIET", "-", "SP"]
# ::lemmas ["UFCE", "POSSU", "PROJETOS", "DE", "MAQUINAS", "PURIFICADORAS", "DE", "AGUAS", "SALOBRA", "E", "POLUIDA", "Q", "PODEM", "SER", "USADAS", "no", "RIO", "TIET", "-", "SP"]
(c5-11 / and
       :op1 (c5-5 / publication
                  :name (c5-3 / name
                              :op1 "UFC"))
       :op2 (c5-10 / publication
                   :name (c5-4 / name
                               :op1 "ProJETOS"))
       :op3 (c5-1 / publication
                  :name (c5-6 / name
                              :op1 "Agua"
                              :op2 "Soltas"
                              :op3 "Salobra"))
       :op4 (c5-9 / publication
                  :name (c5-7 / name
                              :op1 "PolUIDa"))
       :op5 (c5-2 / publication
                  :name (c5-12 / name
                               :op1 "Q"
                               :op2 "PODEM"))
       :op6 (c5-8 / publication
                  :name (c5-0 / name
                              :op1 "Rio"
                              :op2 "Tet-SP")))

# ::snt Terrorism has no boundaries.
# ::tokens ["Terrorism", "has", "no", "boundaries", "."]
# ::lemmas ["Terrorism", "have", "no", "boundary", "."]
(c6-1 / boundary
      :domain (c6-0 / terrorism)
      :polarity -)

# ::snt you upset because the world isn't focused on the Middle East for one day?
# ::tokens ["you", "upset", "because", "the", "world", "is", "n't", "focused", "on", "the", "Middle", "East", "for", "one", "day", "?"]
# ::lemmas ["you", "upset", "because", "the", "world", "be", "not", "focus", "on", "the", "Middle", "East", "for", "one", "day", "?"]
(c7-3 / upset-01
      :polarity (c7-8 / amr-unknown)
      :ARG0 (c7-2 / focus-01
                  :ARG1 (c7-0 / world)
                  :ARG2 (c7-4 / world-region
                              :name (c7-5 / name
                                          :op1 "Middle"
                                          :op2 "East"))
                  :duration (c7-7 / temporal-quantity
                                  :unit (c7-6 / day)
                                  :quant 1)
                  :polarity -)
      :ARG1 (c7-1 / you))

# ::snt good
# ::tokens ["good"]
# ::lemmas ["good"]
(c8-0 / good-02)

# ::snt :lol ok first I thank God then I also thank the medical staff for the good job well done
# ::tokens [":", "lol", "ok", "first", "I", "thank", "God", "then", "I", "also", "thank", "the", "medical", "staff", "for", "the", "good", "job", "well", "done"]
# ::lemmas [":", "lol", "ok", "first", "i", "thank", "God", "then", "i", "also", "thank", "the", "medical", "staff", "for", "the", "good", "job", "well", "do"]
(c9-17 / and
       :op1 (c9-15 / thank-01
                   :ARG0 (c9-6 / i)
                   :ARG1 (c9-9 / person
                               :name (c9-7 / name
                                           :op1 "God"))
                   :time (c9-2 / first))
       :op2 (c9-13 / thank-01
                   :ARG0 c9-6
                   :ARG1 (c9-16 / person
                                :ARG2-of (c9-14 / staff-01
                                                :ARG1 (c9-3 / medicine)))
                   :ARG2 (c9-0 / job
                               :ARG1-of (c9-12 / good-02)
                               :ARG1-of (c9-10 / do-02
                                               :ARG1-of (c9-1 / well-09)))
                   :mod (c9-5 / also)
                   :time (c9-8 / then))
       :mod (c9-4 / laugh-01
                  :manner (c9-11 / loud)
                  :mode expressive))

# ::snt Biggest German TV (Program Frontal21) showing how corrupt is WHO to fight . here the video
# ::tokens ["Biggest", "German", "TV", "(", "Program", "Frontal21", ")", "showing", "how", "corrupt", "is", "WHO", "to", "fight", ".", "here", "the", "video"]
# ::lemmas ["big", "german", "tv", "(", "Program", "Frontal21", ")", "show", "how", "corrupt", "be", "who", "to", "fight", ".", "here", "the", "video"]
(c10-2 / multi-sentence
       :snt1 (c10-13 / show-01
                     :ARG0 (c10-4 / broadcast-program
                                  :name (c10-6 / name
                                               :op1 "German"
                                               :op2 "TV")
                                  :ARG1-of (c10-8 / mean-01
                                                  :ARG2 (c10-10 / broadcast-program
                                                                :name (c10-7 / name
                                                                             :op1 "Program"
                                                                             :op2 "Frontal21")))
                                  :ARG1-of (c10-0 / have-degree-91
                                                  :ARG2 (c10-14 / big)
                                                  :ARG3 (c10-1 / most)))
                     :ARG1 (c10-9 / person
                                  :ARG0-of (c10-3 / fight-01
                                                  :manner (c10-11 / corrupt-01
                                                                  :degree (c10-5 / so)))))
       :snt2 (c10-16 / be-located-at-91
                     :ARG1 (c10-12 / video)
                     :ARG2 (c10-15 / here)))

# ::snt :thought canada was nice to live
# ::tokens [":", "thought", "canada", "was", "nice", "to", "live"]
# ::lemmas [":", "think", "canada", "be", "nice", "to", "live"]
(c11-4 / think-01
       :ARG1 (c11-1 / nice-01
                    :ARG1 (c11-0 / live-01
                                 :ARG1 (c11-3 / country
                                              :name (c11-2 / name
                                                           :op1 "Canada")))))

# ::snt Great News Excellent work &amp; Response today from the government, If turns out to be ISLAMIST terrorist RESPOND HARSHLY
# ::tokens ["Great", "News", "Excellent", "work", "&", "amp", ";", "Response", "today", "from", "the", "government", ",", "If", "turns", "out", "to", "be", "ISLAMIST", "terrorist", "RESPOND", "HARSHLY"]
# ::lemmas ["Great", "News", "Excellent", "work", "&", "amp", ";", "Response", "today", "from", "the", "government", ",", "if", "turn", "out", "to", "be", "islamist", "terrorist", "RESPOND", "HARSHLY"]
(c12-1 / multi-sentence
       :snt1 (c12-14 / and
                     :op1 (c12-3 / excellent-02
                                 :ARG1 (c12-2 / broadcast-program
                                              :name (c12-6 / name
                                                           :op1 "Great"
                                                           :op2 "News")))
                     :op2 (c12-0 / work-01
                                 :ARG1-of c12-3))
       :op3 (c12-4 / amp)
       :snt2 (c12-9 / respond-01
                    :ARG0 (c12-11 / government-organization
                                  :ARG0-of (c12-10 / govern-01))
                    :ARG2 (c12-13 / turn-out-11
                                  :ARG1 (c12-12 / terrorist
                                                :mod (c12-5 / religious-group
                                                            :name (c12-7 / name
                                                                         :op1 "Islamism"))))
                    :time (c12-8 / today)))

# ::snt so the three r the soldier that died, the gunmen that was shot, n a parliament security guard that was shot n survived right?
# ::tokens ["so", "the", "three", "r", "the", "soldier", "that", "died", ",", "the", "gunmen", "that", "was", "shot", ",", "n", "a", "parliament", "security", "guard", "that", "was", "shot", "n", "survived", "right", "?"]
# ::lemmas ["so", "the", "three", "r", "the", "soldier", "that", "die", ",", "the", "gunman", "that", "be", "shoot", ",", "n", "a", "parliament", "security", "guard", "that", "be", "shoot", "n", "survive", "right", "?"]
(c13-7 / cause-01
       :ARG1 (c13-11 / survive-01
                     :ARG0 (c13-12 / and
                                   :op1 (c13-3 / soldier
                                               :ARG1-of (c13-6 / die-01))
                                   :op2 (c13-8 / gunman
                                               :ARG1-of (c13-1 / shoot-02))
                                   :op3 (c13-9 / guard
                                               :mod (c13-2 / security)
                                               :mod (c13-4 / government-organization
                                                           :name (c13-5 / name
                                                                        :op1 "Parliament"))
                                               :ARG1-of (c13-0 / shoot-02)))
                     :ARG1-of (c13-10 / request-confirmation-91)))

# ::snt terror is the key word
# ::tokens ["terror", "is", "the", "key", "word"]
# ::lemmas ["terror", "be", "the", "key", "word"]
(c15-1 / word
       :ARG1-of (c15-2 / key-02)
       :domain (c15-0 / terror))

# ::snt thank god happy to hear this
# ::tokens ["thank", "god", "happy", "to", "hear", "this"]
# ::lemmas ["thank", "god", "happy", "to", "hear", "this"]
(c16-4 / thank-01
       :ARG1 (c16-2 / person
                    :name (c16-1 / name
                                 :op1 "God"))
       :ARG2 (c16-0 / happy-01
                    :ARG0 (c16-5 / hear-01
                                 :ARG1 (c16-3 / this))
                    :ARG1 c16-2))
