# ::snt Apparently you're not one of those, though, b/c you took the time to read it and respond.
# ::tokens ["Apparently", "you", "'re", "not", "one", "of", "those", ",", "though", ",", "b", "/", "c", "you", "took", "the", "time", "to", "read", "it", "and", "respond", "."]
# ::lemmas ["apparently", "you", "be", "not", "one", "of", "those", ",", "though", ",", "b", "/", "c", "you", "take", "the", "time", "to", "read", "it", "and", "respond", "."]
(c1-6 / cause-01
      :ARG0 (c1-9 / take-01
                  :ARG0 (c1-0 / you)
                  :ARG1 (c1-8 / time)
                  :purpose (c1-10 / and
                                  :op1 (c1-5 / read-01
                                             :ARG0 c1-0
                                             :ARG1 (c1-2 / it))
                                  :op2 (c1-3 / respond-01
                                             :ARG0 c1-0
                                             :ARG1 c1-2)))
      :ARG1 (c1-1 / appear-02
                  :ARG1 (c1-7 / include-91
                              :ARG1 c1-0
                              :ARG2 (c1-4 / that)
                              :polarity -)))

# ::snt See also this tweet mins before ones advising passengers its free &lt;- Ayn Rand still alive runs
# ::tokens ["See", "also", "this", "tweet", "mins", "before", "ones", "advising", "passengers", "its", "free", "&", "lt;-", "Ayn", "Rand", "still", "alive", "runs"]
# ::lemmas ["see", "also", "this", "tweet", "min", "before", "one", "advise", "passenger", "its", "free", "&", "lt;-", "Ayn", "Rand", "still", "alive", "run"]
(c2-0 / multi-sentence
      :snt1 (c2-2 / see-01
                  :ARG0 (c2-18 / you)
                  :ARG1 (c2-21 / tweet-01
                               :mod (c2-20 / this)
                               :time (c2-8 / before
                                           :op1 (c2-4 / advise-01
                                                      :ARG0 (c2-19 / one)
                                                      :ARG1 (c2-1 / passenger)
                                                      :ARG2 (c2-14 / and
                                                                   :op1 (c2-5 / free-04
                                                                              :ARG1 (c2-15 / it))
                                                                   :op2 (c2-6 / lt)))
                                           :quant (c2-12 / multiple
                                                         :op1 (c2-16 / temporal-quantity
                                                                     :unit (c2-7 / minute)
                                                                     :quant 1)))
                               :mod (c2-11 / also))
                  :mode imperative)
      :snt2 (c2-13 / run-02
                   :ARG0 (c2-3 / person
                               :name (c2-10 / name
                                            :op1 "Ayn"
                                            :op2 "Rand"))
                   :mod (c2-9 / still)
                   :ARG1-of (c2-17 / live-01)))

# ::snt Uber is shady af
# ::tokens ["Uber", "is", "shady", "af"]
# ::lemmas ["Uber", "be", "shady", "af"]
(c3-0 / shady
      :domain (c3-2 / company
                    :name (c3-1 / name
                                :op1 "Uber")))

# ::snt Yeah, I saw that one too. So disgusting.
# ::tokens ["Yeah", ",", "I", "saw", "that", "one", "too", ".", "So", "disgusting", "."]
# ::lemmas ["yeah", ",", "i", "see", "that", "one", "too", ".", "so", "disgusting", "."]
(c4-1 / multi-sentence
      :snt1 (c4-7 / see-01
                  :ARG0 (c4-4 / i)
                  :ARG1 (c4-2 / one
                              :mod (c4-8 / that))
                  :mod (c4-6 / too)
                  :mod (c4-0 / yeah))
      :snt2 (c4-5 / disgust-01
                  :degree (c4-3 / so)))

# ::snt Yes. yrs ago. Quit to follow the Dead. : You drove a cab, once, right? Like a real cab? Licensed etc?
# ::tokens ["Yes", ".", "yrs", "ago", ".", "Quit", "to", "follow", "the", "Dead", ".", ":", "You", "drove", "a", "cab", ",", "once", ",", "right", "?", "Like", "a", "real", "cab", "?", "Licensed", "etc", "?"]
# ::lemmas ["yes", ".", "yrs", "ago", ".", "quit", "to", "follow", "the", "Dead", ".", ":", "you", "drive", "a", "cab", ",", "once", ",", "right", "?", "like", "a", "real", "cab", "?", "license", "etc", "?"]
(c5-1 / multi-sentence
      :snt1 (c5-17 / yes)
      :snt2 (c5-12 / quit-01
                   :ARG0 (c5-19 / you)
                   :ARG1 (c5-8 / follow-02
                               :ARG0 c5-19
                               :ARG1 (c5-4 / person
                                           :ARG1-of (c5-5 / die-01)))
                   :time (c5-10 / before
                                :op1 (c5-14 / now)
                                :quant (c5-20 / temporal-quantity
                                              :unit (c5-2 / year)
                                              :quant 1))
                   :mode imperative)
      :snt3 (c5-0 / drive-01
                  :ARG0 (c5-16 / you)
                  :ARG1 (c5-18 / cab)
                  :ARG1-of (c5-15 / request-confirmation-91)
                  :frequency 1)
      :snt4 (c5-3 / resemble-01
                  :ARG1 (c5-6 / cab
                              :ARG1-of (c5-13 / real-04))
                  :polarity (c5-7 / amr-unknown))
      :snt5 (c5-9 / license-01
                  :ARG1 (c5-11 / et-cetera)))

# ::snt I never understood why some of my friends swore by Uber in NYC. There are less expensive cabs everywhere.
# ::tokens ["I", "never", "understood", "why", "some", "of", "my", "friends", "swore", "by", "Uber", "in", "NYC", ".", "There", "are", "less", "expensive", "cabs", "everywhere", "."]
# ::lemmas ["i", "never", "understand", "why", "some", "of", "my", "friend", "swear", "by", "Uber", "in", "NYC", ".", "there", "be", "less", "expensive", "cab", "everywhere", "."]
(c6-0 / multi-sentence
      :snt1 (c6-12 / understand-01
                   :ARG0 (c6-13 / i)
                   :ARG1 (c6-19 / thing
                                :ARG0-of (c6-18 / cause-01
                                                :ARG1 (c6-3 / swear-02
                                                            :ARG0 (c6-1 / person
                                                                        :ARG0-of (c6-5 / have-rel-role-91
                                                                                       :ARG1 c6-13
                                                                                       :ARG2 (c6-6 / friend))
                                                                        :quant (c6-9 / some))
                                                            :ARG1 (c6-2 / company
                                                                        :name (c6-11 / name
                                                                                     :op1 "Uber"))
                                                            :location (c6-14 / city
                                                                             :name (c6-17 / name
                                                                                          :op1 "NYC")))))
                   :time (c6-10 / ever)
                   :polarity -)
      :snt2 (c6-15 / cab
                   :location (c6-8 / everywhere)
                   :ARG1-of (c6-4 / have-degree-91
                                  :ARG2 (c6-16 / expensive)
                                  :ARG3 (c6-7 / less))))

# ::snt True that.
# ::tokens ["True", "that", "."]
# ::lemmas ["true", "that", "."]
(c7-0 / true-01
      :ARG1 (c7-1 / that))

# ::snt I rarely ride in taxis and I've never ridden an Uber or Lyft or a limo. I have a yearly TriMet pass for Portland
# ::tokens ["I", "rarely", "ride", "in", "taxis", "and", "I", "'ve", "never", "ridden", "an", "Uber", "or", "Lyft", "or", "a", "limo", ".", "I", "have", "a", "yearly", "TriMet", "pass", "for", "Portland"]
# ::lemmas ["i", "rarely", "ride", "in", "taxi", "and", "i", "'ve", "never", "ride", "an", "uber", "or", "Lyft", "or", "a", "limo", ".", "i", "have", "a", "yearly", "TriMet", "pass", "for", "Portland"]
(c8-0 / multi-sentence
      :snt1 (c8-5 / and
                  :op1 (c8-11 / ride-01
                              :ARG0 (c8-13 / i)
                              :ARG1 (c8-22 / taxi)
                              :ARG1-of (c8-1 / rare-02))
                  :op2 (c8-9 / ride-01
                             :ARG0 c8-13
                             :ARG1 (c8-18 / or
                                          :op1 (c8-20 / company
                                                      :name (c8-10 / name
                                                                   :op1 "Uber"))
                                          :op2 (c8-4 / company
                                                     :name (c8-19 / name
                                                                  :op1 "Lyft"))
                                          :op3 (c8-7 / limo))
                             :time (c8-8 / ever)
                             :polarity -))
      :snt2 (c8-6 / have-03
                  :ARG0 (c8-15 / i)
                  :ARG1 (c8-3 / pass
                              :mod (c8-21 / triMet)
                              :frequency (c8-12 / rate-entity-91
                                                :ARG3 (c8-14 / temporal-quantity
                                                             :unit (c8-17 / year)
                                                             :quant 1))
                              :beneficiary (c8-16 / city
                                                  :name (c8-2 / name
                                                              :op1 "Portland")))))

# ::snt What city? Me, Boston. Quit for required internship, not nearly as justifiable as GD
# ::tokens ["What", "city", "?", "Me", ",", "Boston", ".", "Quit", "for", "required", "internship", ",", "not", "nearly", "as", "justifiable", "as", "GD"]
# ::lemmas ["what", "city", "?", "i", ",", "Boston", ".", "Quit", "for", "require", "internship", ",", "not", "nearly", "as", "justifiable", "as", "GD"]
(c9-3 / multi-sentence
      :snt1 (c9-11 / city
                   :name (c9-7 / name
                               :op1 "Boston")
                   :domain (c9-6 / i))
      :snt2 (c9-5 / quit-01
                  :ARG0 (c9-12 / i)
                  :ARG1 (c9-2 / internship
                              :ARG1-of (c9-10 / require-01))
                  :ARG1-of (c9-0 / justify-01
                                 :ARG1-of (c9-8 / near-02)
                                 :ARG2-of (c9-1 / have-degree-91
                                                :ARG1 c9-5
                                                :ARG3 (c9-4 / equal)
                                                :ARG4 (c9-9 / person
                                                            :name (c9-13 / name
                                                                         :op1 "GOD")))
                                 :polarity -)))

# ::snt Whats the big deal? Isnt this one of the rules of acquisition?
# ::tokens ["What", "s", "the", "big", "deal", "?", "Is", "nt", "this", "one", "of", "the", "rules", "of", "acquisition", "?"]
# ::lemmas ["what", "s", "the", "big", "deal", "?", "be", "not", "this", "one", "of", "the", "rule", "of", "acquisition", "?"]
(c10-0 / multi-sentence
       :snt1 (c10-5 / deal
                    :mod (c10-1 / big)
                    :domain (c10-8 / amr-unknown))
       :snt2 (c10-3 / include-91
                    :ARG1 (c10-7 / this)
                    :ARG2 (c10-6 / rule-01
                                 :ARG1 (c10-2 / acquire-01))
                    :polarity (c10-4 / amr-unknown)))

# ::snt Dunno, but I can.
# ::tokens ["Dunno", ",", "but", "I", "can", "."]
# ::lemmas ["Dunno", ",", "but", "i", "can", "."]
(c11-2 / contrast-01
       :ARG1 (c11-0 / have-polarity-91
                    :ARG2 -)
       :ARG2 (c11-1 / capable-01
                    :ARG1 (c11-3 / i)))

# ::snt That's nice. Millions of other folks don't give a crap.
# ::tokens ["That", "'s", "nice", ".", "Millions", "of", "other", "folks", "do", "n't", "give", "a", "crap", "."]
# ::lemmas ["that", "be", "nice", ".", "Millions", "of", "other", "folk", "do", "not", "give", "a", "crap", "."]
(c12-1 / multi-sentence
       :snt1 (c12-3 / nice-01
                    :ARG1 (c12-7 / that))
       :snt2 (c12-6 / give-16
                    :ARG0 (c12-0 / folk
                                 :quant (c12-4 / multiple
                                               :op1 1000000)
                                 :mod (c12-2 / other))
                    :ARG1 (c12-5 / crap-01)
                    :polarity -))

# ::snt yea, dumb, but that's probably an automated system adjusting rates based on demand their AI failed them in this case
# ::tokens ["yea", ",", "dumb", ",", "but", "that", "'s", "probably", "an", "automated", "system", "adjusting", "rates", "based", "on", "demand", "their", "AI", "failed", "them", "in", "this", "case"]
# ::lemmas ["yea", ",", "dumb", ",", "but", "that", "be", "probably", "an", "automate", "system", "adjust", "rate", "base", "on", "demand", "their", "AI", "fail", "they", "in", "this", "case"]
(c13-8 / contrast-01
       :ARG1 (c13-7 / dumb)
       :ARG2 (c13-6 / probable
                    :domain (c13-12 / system
                                    :ARG0-of (c13-14 / adjust-01
                                                     :ARG1 (c13-9 / rate)
                                                     :ARG1-of (c13-2 / base-02
                                                                     :ARG2 (c13-0 / demand-01)))
                                    :ARG0-of (c13-1 / fail-01
                                                    :ARG1 (c13-4 / intelligent-01
                                                                 :mod (c13-3 / artificial))
                                                    :ARG2 (c13-13 / they)
                                                    :time (c13-10 / case-04
                                                                  :ARG1 (c13-11 / this)))
                                    :ARG1-of (c13-5 / automate-01))))

# ::snt I won't even charge tolls.
# ::tokens ["I", "wo", "n't", "even", "charge", "tolls", "."]
# ::lemmas ["i", "will", "not", "even", "charge", "toll", "."]
(c14-2 / charge-01
       :ARG0 (c14-3 / i)
       :ARG3 (c14-0 / toll)
       :mod (c14-1 / even)
       :polarity -)

# ::snt Parents are still talking Seth... Reaching Gonna write another book?
# ::tokens ["Parents", "are", "still", "talking", "Seth", "...", "Reaching", "Gon", "na", "write", "another", "book", "?"]
# ::lemmas ["parent", "be", "still", "talk", "Seth", "...", "Reaching", "Gon", "to", "write", "another", "book", "?"]
(c15-12 / ask-01
        :ARG0 (c15-5 / i)
        :ARG1 (c15-10 / talk-01
                      :ARG0 (c15-8 / person
                                   :ARG0-of (c15-0 / have-rel-role-91
                                                   :ARG2 (c15-11 / parent)))
                      :mod (c15-9 / still))
        :ARG2 (c15-1 / write-01
                     :ARG0 (c15-2 / person
                                  :name (c15-6 / name
                                               :op1 "Seth"))
                     :ARG1 (c15-3 / book
                                  :mod (c15-4 / another))
                     :polarity (c15-7 / amr-unknown)))

# ::snt best decision you ever made
# ::tokens ["best", "decision", "you", "ever", "made"]
# ::lemmas ["good", "decision", "you", "ever", "make"]
(c16-4 / decide-01
       :ARG0 (c16-1 / you)
       :ARG1 (c16-6 / thing
                    :ARG1-of (c16-0 / have-degree-91
                                    :ARG2 (c16-5 / good-02
                                                 :ARG1 c16-6)
                                    :ARG3 (c16-2 / most)))
       :time (c16-3 / ever))

# ::snt . They tweeted about it as it was happening, saying it was about getting more drivers working. Not at all automated
# ::tokens [".", "They", "tweeted", "about", "it", "as", "it", "was", "happening", ",", "saying", "it", "was", "about", "getting", "more", "drivers", "working", ".", "Not", "at", "all", "automated"]
# ::lemmas [".", "they", "tweet", "about", "it", "as", "it", "be", "happen", ",", "say", "it", "be", "about", "get", "more", "driver", "work", ".", "not", "at", "all", "automate"]
(c17-1 / multi-sentence
       :snt1 (c17-12 / tweet-01
                     :ARG0 (c17-9 / they)
                     :time (c17-3 / it)
                     :manner (c17-10 / say-01
                                     :ARG0 c17-9
                                     :ARG1 (c17-6 / concern-02
                                                  :ARG0 c17-3
                                                  :ARG1 (c17-7 / get-04
                                                               :ARG0 c17-3
                                                               :ARG1 (c17-0 / work-09
                                                                            :ARG1 (c17-4 / person
                                                                                         :ARG0-of (c17-5 / drive-01)
                                                                                         :quant (c17-8 / more)))))))
       :snt2 (c17-13 / automate-01
                     :ARG1 (c17-11 / it)
                     :degree (c17-2 / at-all)
                     :polarity -))

# ::snt But I think it's a losing battle. Uber's behavior won't change until they stop making their numbers.
# ::tokens ["But", "I", "think", "it", "'s", "a", "losing", "battle", ".", "Uber", "'s", "behavior", "wo", "n't", "change", "until", "they", "stop", "making", "their", "numbers", "."]
# ::lemmas ["but", "i", "think", "it", "be", "a", "losing", "battle", ".", "Uber", "'s", "behavior", "will", "not", "change", "until", "they", "stop", "make", "their", "number", "."]
(c18-1 / multi-sentence
       :snt1 (c18-9 / contrast-01
                    :ARG2 (c18-12 / think-01
                                  :ARG0 (c18-4 / i)
                                  :ARG1 (c18-3 / battle-01
                                               :ARG1-of (c18-0 / lose-03))))
       :snt2 (c18-8 / change-01
                    :ARG1 (c18-10 / behave-01
                                  :ARG0 (c18-11 / company
                                                :name (c18-5 / name
                                                             :op1 "Uber")))
                    :time (c18-2 / until
                                 :op1 (c18-13 / stop-01
                                              :ARG0 c18-11
                                              :ARG1 (c18-7 / make-01
                                                           :ARG0 c18-11
                                                           :ARG1 (c18-6 / number
                                                                        :poss c18-11))))
                    :polarity -))

# ::snt yep agree, i just find it hard to believe someone is sitting at a computer and thought "this is a good idea" who knows
# ::tokens ["yep", "agree", ",", "i", "just", "find", "it", "hard", "to", "believe", "someone", "is", "sitting", "at", "a", "computer", "and", "thought", "\"", "this", "is", "a", "good", "idea", "\"", "who", "knows"]
# ::lemmas ["yep", "agree", ",", "i", "just", "find", "it", "hard", "to", "believe", "someone", "be", "sit", "at", "a", "computer", "and", "think", "\"", "this", "be", "a", "good", "idea", "\"", "who", "know"]
(c19-17 / and
        :op1 (c19-6 / agree-01
                    :ARG0 (c19-7 / i)
                    :mod (c19-1 / yep))
        :op2 (c19-3 / find-02
                    :ARG0 c19-7
                    :ARG1 (c19-0 / hard-02
                                 :ARG1 (c19-4 / believe-01
                                              :ARG1 (c19-9 / and
                                                           :op1 (c19-14 / sit-01
                                                                        :ARG1 (c19-5 / someone)
                                                                        :ARG2 (c19-10 / computer))
                                                           :op2 (c19-16 / think-01
                                                                        :ARG0 c19-5
                                                                        :ARG1 (c19-11 / idea
                                                                                      :ARG1-of (c19-12 / good-02)
                                                                                      :domain (c19-13 / this))))))
                    :mod (c19-2 / just)
                    :ARG1-of (c19-8 / know-01
                                    :ARG0 (c19-15 / amr-unknown))))

# ::snt Nick! Come visit in Boston!
# ::tokens ["Nick", "!", "Come", "visit", "in", "Boston", "!"]
# ::lemmas ["Nick", "!", "come", "visit", "in", "Boston", "!"]
(c20-1 / multi-sentence
       :snt1 (c20-4 / person
                    :name (c20-2 / name
                                 :op1 "Nick"))
       :snt2 (c20-6 / come-01
                    :ARG1 (c20-0 / you)
                    :ARG4 (c20-5 / city
                                 :name (c20-3 / name
                                              :op1 "Boston"))
                    :mode imperative))

# ::snt I live near Portland and I support the city's efforts to hold Uber to municipal laws.
# ::tokens ["I", "live", "near", "Portland", "and", "I", "support", "the", "city", "'s", "efforts", "to", "hold", "Uber", "to", "municipal", "laws", "."]
# ::lemmas ["i", "live", "near", "Portland", "and", "i", "support", "the", "city", "'s", "effort", "to", "hold", "Uber", "to", "municipal", "law", "."]
(c21-12 / and
        :op1 (c21-1 / live-01
                    :ARG0 (c21-3 / i)
                    :ARG1-of (c21-4 / near-02
                                    :ARG2 (c21-8 / city
                                                 :name (c21-5 / name
                                                              :op1 "Portland"))))
        :op2 (c21-11 / support-01
                     :ARG0 c21-3
                     :ARG1 (c21-2 / effort-01
                                  :ARG0 (c21-7 / city)
                                  :ARG1 (c21-0 / hold-01
                                               :ARG0 c21-7
                                               :ARG1 (c21-10 / company
                                                             :name (c21-6 / name
                                                                          :op1 "Uber"))
                                               :ARG2 (c21-9 / law
                                                            :mod (c21-13 / city))))))

# ::snt ? The rape wasn't enough for you? Well gee; thanks for the warning.cc
# ::tokens ["?", "The", "rape", "was", "n't", "enough", "for", "you", "?", "Well", "gee", ";", "thanks", "for", "the", "warning.cc"]
# ::lemmas ["?", "the", "rape", "be", "not", "enough", "for", "you", "?", "well", "gee", ";", "thank", "for", "the", "warning.cc"]
(c22-3 / multi-sentence
       :snt1 (c22-0 / have-quant-91
                    :ARG1 (c22-8 / rape-01)
                    :ARG3 (c22-4 / enough)
                    :ARG6 (c22-1 / you)
                    :polarity (c22-12 / amr-unknown)
                    :polarity -)
       :snt2 (c22-11 / thank-01
                     :ARG0 (c22-6 / i)
                     :ARG1 (c22-10 / you
                                   :mod (c22-9 / gee
                                               :mode expressive))
                     :ARG2 (c22-2 / warn-01
                                  :ARG0 c22-10)
                     :mod (c22-7 / well))
       :snt3 (c22-5 / amr-unintelligible
                    :value "cc"))

# ::snt :You drove a cab, once, right? Like a real cab? Licensed etc?
# ::tokens [":", "You", "drove", "a", "cab", ",", "once", ",", "right", "?", "Like", "a", "real", "cab", "?", "Licensed", "etc", "?"]
# ::lemmas [":", "you", "drive", "a", "cab", ",", "once", ",", "right", "?", "like", "a", "real", "cab", "?", "license", "etc", "?"]
(c23-2 / multi-sentence
       :snt1 (c23-6 / drive-01
                    :ARG0 (c23-0 / you)
                    :ARG1 (c23-7 / cab)
                    :ARG1-of (c23-8 / request-confirmation-91)
                    :frequency 1)
       :snt2 (c23-5 / resemble-01
                    :ARG2 (c23-9 / cab
                                 :ARG1-of (c23-4 / real-04)))
       :snt3 (c23-1 / license-01
                    :polarity (c23-10 / amr-unknown))
       :snt4 (c23-3 / et-cetera))

# ::snt Fair pt - but if were concerned about being decent as much as they are w/stalking journalists or being louts, wouldn't happen.
# ::tokens ["Fair", "pt", "-", "but", "if", "were", "concerned", "about", "being", "decent", "as", "much", "as", "they", "are", "w", "/", "stalking", "journalists", "or", "being", "louts", ",", "would", "n't", "happen", "."]
# ::lemmas ["fair", "pt", "-", "but", "if", "be", "concern", "about", "be", "decent", "as", "much", "as", "they", "be", "w", "/", "stalk", "journalist", "or", "be", "lout", ",", "would", "not", "happen", "."]
(c24-9 / contrast-01
       :ARG1 (c24-0 / have-polarity-91
                    :condition (c24-8 / concern-01
                                      :ARG0 (c24-10 / decent
                                                    :domain (c24-11 / they
                                                                    :ARG1-of c24-8))
                                      :concession (c24-5 / or
                                                         :op1 (c24-1 / walk-01
                                                                     :ARG0 c24-11
                                                                     :ARG2 (c24-2 / journalist))
                                                         :op2 (c24-3 / lout
                                                                     :domain c24-11)))
                    :ARG2 -)
       :ARG2 (c24-7 / person
                    :name (c24-6 / name
                                 :op1 " pt")
                    :ARG1-of (c24-4 / fair-01)))
