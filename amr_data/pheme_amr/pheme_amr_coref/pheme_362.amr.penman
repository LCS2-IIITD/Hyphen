# ::snt : Paris supermarket hostage-taker 'neutralised' in a successful attack by Police security
# ::tokens [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", "in", "a", "successful", "attack", "by", "Police", "security"]
# ::lemmas [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", "in", "a", "successful", "attack", "by", "police", "security"]
(c1-3 / neutralize-01
      :ARG0 (c1-7 / security
                  :mod (c1-5 / police))
      :ARG1 (c1-9 / person
                  :ARG0-of (c1-8 / take-01
                                 :ARG1 (c1-0 / hostage))
                  :ARG0-of (c1-10 / have-org-role-91
                                  :ARG1 (c1-2 / supermarket
                                              :location (c1-6 / city
                                                              :name (c1-4 / name
                                                                          :op1 "Paris")))))
      :ARG1-of (c1-1 / succeed-01))

# ::snt obvious reasons if caught they can interrogate &amp; find the structure But that Doesn't satisfy ur appetite blood right?
# ::tokens ["obvious", "reasons", "if", "caught", "they", "can", "interrogate", "&", "amp", ";", "find", "the", "structure", "But", "that", "Does", "n't", "satisfy", "ur", "appetite", "blood", "right", "?"]
# ::lemmas ["obvious", "reason", "if", "catch", "they", "can", "interrogate", "&", "amp", ";", "find", "the", "structure", "but", "that", "do", "not", "satisfy", "ur", "appetite", "blood", "right", "?"]
(c2-17 / and
       :op1 (c2-9 / possible-01
                  :ARG1 (c2-5 / and
                              :op1 (c2-6 / interrogate-01
                                         :ARG0 (c2-16 / they)
                                         :ARG2 (c2-8 / and
                                                     :op1 (c2-14 / thing)
                                                     :op2 (c2-10 / thing
                                                                 :name (c2-7 / name
                                                                             :op1 "amp"))))
                              :op2 (c2-1 / find-01
                                         :ARG0 c2-16
                                         :ARG1 (c2-15 / structure)))
                  :condition (c2-11 / catch-02
                                    :ARG1 c2-16)
                  :ARG1-of (c2-3 / obvious-01))
       :op2 (c2-12 / contrast-01
                   :ARG2 (c2-4 / satisfy-01
                               :ARG0 c2-5
                               :ARG1 (c2-2 / blood
                                           :poss (c2-0 / you))
                               :ARG1-of (c2-13 / request-confirmation-91)
                               :polarity -)))

# ::snt language expresses the truth when used right. an important news agency like afp should have done so. got it now?
# ::tokens ["language", "expresses", "the", "truth", "when", "used", "right", ".", "an", "important", "news", "agency", "like", "afp", "should", "have", "done", "so", ".", "got", "it", "now", "?"]
# ::lemmas ["language", "express", "the", "truth", "when", "use", "right", ".", "an", "important", "news", "agency", "like", "afp", "should", "have", "do", "so", ".", "get", "it", "now", "?"]
(c3-1 / multi-sentence
      :snt1 (c3-3 / express-01
                  :ARG0 (c3-0 / language)
                  :ARG1 (c3-16 / truth)
                  :condition (c3-2 / use-01
                                   :ARG1 c3-0
                                   :ARG1-of (c3-10 / right-02)))
      :snt2 (c3-6 / recommend-01
                  :ARG1 (c3-11 / do-02
                               :ARG0 (c3-17 / agency
                                            :mod (c3-7 / news)
                                            :ARG1-of (c3-5 / important-01)
                                            :example (c3-12 / company
                                                            :name (c3-8 / name
                                                                        :op1 " afP")))
                               :ARG1 (c3-15 / so))
                  :polarity (c3-4 / amr-unknown))
      :snt3 (c3-13 / get-01
                   :ARG1 (c3-14 / it)
                   :time (c3-9 / now)))

# ::snt I do rather enjoy the usage of the term "neutralised"
# ::tokens ["I", "do", "rather", "enjoy", "the", "usage", "of", "the", "term", "\"", "neutralised", "\""]
# ::lemmas ["i", "do", "rather", "enjoy", "the", "usage", "of", "the", "term", "\"", "neutralised", "\""]
(c4-1 / enjoy-01
      :ARG0 (c4-2 / i)
      :ARG1 (c4-0 / use-01
                  :ARG1 (c4-5 / term-01
                              :ARG1 (c4-3 / neutralize-01)))
      :ARG1-of (c4-4 / prefer-01
                     :ARG0 c4-2))

# ::snt : Paris supermarket hostage-taker 'neutralised': security source nuff said.
# ::tokens [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source", "nuff", "said", "."]
# ::lemmas [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source", "nuff", "say", "."]
(c5-8 / say-01
      :ARG0 (c5-3 / source
                  :mod (c5-1 / security))
      :ARG1 (c5-4 / neutralize-01
                  :ARG1 (c5-6 / person
                              :ARG0-of (c5-9 / take-01
                                             :ARG1 (c5-0 / hostage)
                                             :ARG2 (c5-2 / supermarket
                                                         :location (c5-7 / city
                                                                         :name (c5-5 / name
                                                                                     :op1 "Paris")))))))

# ::snt : : Paris supermarket hostage-taker 'neutralised': security source
# ::tokens [":", ":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
# ::lemmas [":", ":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
(c6-4 / neutralize-01
      :ARG1 (c6-6 / person
                  :ARG0-of (c6-9 / take-01
                                 :ARG1 (c6-0 / hostage)
                                 :ARG2 (c6-8 / supermarket
                                             :location (c6-7 / city
                                                             :name (c6-5 / name
                                                                         :op1 "Paris")))))
      :ARG1-of (c6-3 / say-01
                     :ARG0 (c6-1 / source
                                 :mod (c6-2 / security))))

# ::snt I have critisized the language they use IDIOT!
# ::tokens ["I", "have", "critisized", "the", "language", "they", "use", "IDIOT", "!"]
# ::lemmas ["i", "have", "critisize", "the", "language", "they", "use", "IDIOT", "!"]
(c7-4 / critisize-01
      :ARG0 (c7-2 / i)
      :ARG1 (c7-0 / language
                  :ARG3-of (c7-1 / use-01
                                 :ARG0 (c7-6 / they)
                                 :ARG1 (c7-5 / thing
                                             :name (c7-3 / name
                                                         :op1 "IDIOT")))))

# ::snt stand with frace!
# ::tokens ["stand", "with", "frace", "!"]
# ::lemmas ["stand", "with", "frace", "!"]
(c8-0 / stand-11
      :ARG0 (c8-1 / you)
      :accompanier (c8-2 / frace)
      :mode imperative)

# ::snt Kosher Grocery Store, not Supermarket. The hostages &amp; victims were specifically picked because they were Jews.
# ::tokens ["Kosher", "Grocery", "Store", ",", "not", "Supermarket", ".", "The", "hostages", "&", "amp", ";", "victims", "were", "specifically", "picked", "because", "they", "were", "Jews", "."]
# ::lemmas ["Kosher", "Grocery", "Store", ",", "not", "Supermarket", ".", "the", "hostage", "&", "amp", ";", "victim", "be", "specifically", "pick", "because", "they", "be", "Jews", "."]
(c9-2 / multi-sentence
      :snt1 (c9-14 / and
                   :op1 (c9-12 / store
                               :name (c9-5 / name
                                           :op1 "Kosher"
                                           :op2 "Grocery"
                                           :op3 "Store"))
                   :op2 (c9-3 / store
                              :name (c9-6 / name
                                          :op1 "Supermarket")
                              :polarity -))
      :snt2 (c9-7 / pick-01
                  :ARG1 (c9-4 / and
                              :op1 (c9-0 / hostage)
                              :op2 (c9-8 / amp))
                  :ARG1-of (c9-1 / specific-02)
                  :ARG1-of (c9-9 / cause-01
                                 :ARG0 (c9-13 / person
                                              :mod (c9-10 / religious-group
                                                          :name (c9-11 / name
                                                                       :op1 "Jew"))
                                              :domain c9-4))))

# ::snt : Paris supermarket hostage-taker 'neutralised': security source
# ::tokens [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
# ::lemmas [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
(c10-4 / neutralize-01
       :ARG1 (c10-6 / person
                    :ARG0-of (c10-9 / take-01
                                    :ARG1 (c10-0 / hostage)
                                    :ARG2 (c10-8 / supermarket
                                                 :location (c10-7 / city
                                                                  :name (c10-5 / name
                                                                               :op1 "Paris")))))
       :ARG1-of (c10-3 / say-01
                       :ARG0 (c10-1 / source
                                    :mod (c10-2 / security))))

# ::snt I have no appetite for blood fyi.
# ::tokens ["I", "have", "no", "appetite", "for", "blood", "fyi", "."]
# ::lemmas ["i", "have", "no", "appetite", "for", "blood", "fyi", "."]
(c11-0 / have-03
       :ARG0 (c11-2 / i)
       :ARG1 (c11-4 / appetite
                    :purpose (c11-1 / blood))
       :purpose (c11-3 / inform-01
                       :ARG1 c11-2)
       :polarity -)

# ::snt : Paris supermarket hostage-taker 'neutralised': security source
# ::tokens [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
# ::lemmas [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
(c12-4 / neutralize-01
       :ARG1 (c12-6 / person
                    :ARG0-of (c12-9 / take-01
                                    :ARG1 (c12-0 / hostage)
                                    :ARG2 (c12-8 / supermarket
                                                 :location (c12-7 / city
                                                                  :name (c12-5 / name
                                                                               :op1 "Paris")))))
       :ARG1-of (c12-3 / say-01
                       :ARG0 (c12-1 / source
                                    :mod (c12-2 / security))))

# ::snt : : Paris supermarket hostage-taker 'neutralised': security source
# ::tokens [":", ":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
# ::lemmas [":", ":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
(c13-4 / neutralize-01
       :ARG1 (c13-6 / person
                    :ARG0-of (c13-9 / take-01
                                    :ARG1 (c13-0 / hostage)
                                    :ARG2 (c13-8 / supermarket
                                                 :location (c13-7 / city
                                                                  :name (c13-5 / name
                                                                               :op1 "Paris")))))
       :ARG1-of (c13-3 / say-01
                       :ARG0 (c13-1 / source
                                    :mod (c13-2 / security))))

# ::snt why 'neutralised' instead of 'killed'?
# ::tokens ["why", "'", "neutralised", "'", "instead", "of", "'", "killed", "'", "?"]
# ::lemmas ["why", "'", "neutralise", "'", "instead", "of", "'", "kill", "'", "?"]
(c14-2 / cause-01
       :ARG0 (c14-4 / amr-unknown)
       :ARG1 (c14-1 / neutralize-01
                    :ARG1-of (c14-0 / instead-of-91
                                    :ARG2 (c14-3 / kill-01))))

# ::snt Never underestimate the French!!!
# ::tokens ["Never", "underestimate", "the", "French", "!", "!", "!"]
# ::lemmas ["never", "underestimate", "the", "French", "!", "!", "!"]
(c15-1 / underestimate-01
       :ARG0 (c15-0 / you)
       :ARG1 (c15-4 / person
                    :mod (c15-5 / country
                                :name (c15-3 / name
                                             :op1 "France")))
       :time (c15-2 / ever)
       :mode imperative
       :polarity -)

# ::snt : Paris supermarket hostage-taker 'neutralised': security source
# ::tokens [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
# ::lemmas [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
(c16-4 / neutralize-01
       :ARG1 (c16-6 / person
                    :ARG0-of (c16-9 / take-01
                                    :ARG1 (c16-0 / hostage)
                                    :ARG2 (c16-8 / supermarket
                                                 :location (c16-7 / city
                                                                  :name (c16-5 / name
                                                                               :op1 "Paris")))))
       :ARG1-of (c16-3 / say-01
                       :ARG0 (c16-1 / source
                                    :mod (c16-2 / security))))

# ::snt right, I got that,my point stands. U might want to be a little critical of your own language (idiot) lol
# ::tokens ["right", ",", "I", "got", "that", ",", "my", "point", "stands", ".", "U", "might", "want", "to", "be", "a", "little", "critical", "of", "your", "own", "language", "(", "idiot", ")", "lol"]
# ::lemmas ["right", ",", "i", "get", "that", ",", "my", "point", "stand", ".", "U", "might", "want", "to", "be", "a", "little", "critical", "of", "your", "own", "language", "(", "idiot", ")", "lol"]
(c17-2 / multi-sentence
       :snt1 (c17-10 / get-01
                     :ARG0 (c17-12 / i)
                     :ARG1 (c17-19 / that)
                     :ARG2-of (c17-9 / right-06))
       :snt2 (c17-4 / stand-04
                    :ARG0 (c17-3 / point-04
                                 :ARG0 (c17-14 / i)))
       :snt3 (c17-5 / possible-01
                    :ARG1 (c17-11 / want-01
                                  :ARG0 (c17-15 / you)
                                  :ARG1 (c17-17 / criticize-01
                                                :ARG0 (c17-18 / you)
                                                :ARG1 (c17-7 / language
                                                             :poss c17-18)
                                                :degree (c17-13 / little))
                                  :ARG1-of (c17-8 / mean-01
                                                  :ARG2 (c17-1 / idiot)))
                    :ARG2-of (c17-0 / laugh-01
                                    :ARG0 (c17-16 / i)
                                    :manner (c17-6 / loud))))

# ::snt : Paris supermarket hostage-taker 'neutralised': security source
# ::tokens [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
# ::lemmas [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
(c18-4 / neutralize-01
       :ARG1 (c18-6 / person
                    :ARG0-of (c18-9 / take-01
                                    :ARG1 (c18-0 / hostage)
                                    :ARG2 (c18-8 / supermarket
                                                 :location (c18-7 / city
                                                                  :name (c18-5 / name
                                                                               :op1 "Paris")))))
       :ARG1-of (c18-3 / say-01
                       :ARG0 (c18-1 / source
                                    :mod (c18-2 / security))))

# ::snt welcome finally French People have showed doors to these cowards.
# ::tokens ["welcome", "finally", "French", "People", "have", "showed", "doors", "to", "these", "cowards", "."]
# ::lemmas ["welcome", "finally", "French", "people", "have", "show", "door", "to", "these", "coward", "."]
(c19-0 / welcome-01
       :ARG1 (c19-7 / show-01
                    :ARG0 (c19-3 / person
                                 :mod (c19-5 / country
                                             :name (c19-2 / name
                                                          :op1 "France")))
                    :ARG1 (c19-4 / door)
                    :ARG2 (c19-6 / coward
                                 :mod (c19-8 / this)))
       :time (c19-1 / final))

# ::snt : Paris supermarket hostage-taker 'neutralised': security source
# ::tokens [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
# ::lemmas [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
(c20-4 / neutralize-01
       :ARG1 (c20-6 / person
                    :ARG0-of (c20-9 / take-01
                                    :ARG1 (c20-0 / hostage)
                                    :ARG2 (c20-8 / supermarket
                                                 :location (c20-7 / city
                                                                  :name (c20-5 / name
                                                                               :op1 "Paris")))))
       :ARG1-of (c20-3 / say-01
                       :ARG0 (c20-1 / source
                                    :mod (c20-2 / security))))

# ::snt : Paris supermarket hostage-taker 'neutralised': security source
# ::tokens [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
# ::lemmas [":", "Paris", "supermarket", "hostage", "-", "taker", "'", "neutralised", "'", ":", "security", "source"]
(c21-4 / neutralize-01
       :ARG1 (c21-6 / person
                    :ARG0-of (c21-9 / take-01
                                    :ARG1 (c21-0 / hostage)
                                    :ARG2 (c21-8 / supermarket
                                                 :location (c21-7 / city
                                                                  :name (c21-5 / name
                                                                               :op1 "Paris")))))
       :ARG1-of (c21-3 / say-01
                       :ARG0 (c21-1 / source
                                    :mod (c21-2 / security))))
