# ::snt same here - may be rank amateurs, may be pros...
# ::tokens ["same", "here", "-", "may", "be", "rank", "amateurs", ",", "may", "be", "pros", "..."]
# ::lemmas ["same", "here", "-", "may", "be", "rank", "amateur", ",", "may", "be", "pro", "..."]
(c1-1 / multi-sentence
      :snt1 (c1-6 / same-01
                  :location (c1-0 / here))
      :snt2 (c1-8 / and
                  :op1 (c1-4 / possible-01
                             :ARG1 (c1-3 / amateur
                                         :mod (c1-5 / rank)))
                  :op2 (c1-7 / possible-01
                             :ARG1 (c1-2 / professional))))

# ::snt praying this ends well and is not a diverse.
# ::tokens ["praying", "this", "ends", "well", "and", "is", "not", "a", "diverse", "."]
# ::lemmas ["pray", "this", "end", "well", "and", "be", "not", "a", "diverse", "."]
(c2-5 / and
      :op1 (c2-0 / hope-01
                 :ARG1 (c2-2 / end-01
                             :ARG1 (c2-4 / this)
                             :manner (c2-1 / well-09)))
      :op2 (c2-3 / diverse
                 :domain c2-4
                 :polarity -))

# ::snt Binary events...
# ::tokens ["Binary", "events", "..."]
# ::lemmas ["binary", "event", "..."]
(c3-0 / event
      :mod (c3-1 / inary))

# ::snt if my geography right, Lindt quite close to Commonwealth UK Governor General compound; but seems one incident
# ::tokens ["if", "my", "geography", "right", ",", "Lindt", "quite", "close", "to", "Commonwealth", "UK", "Governor", "General", "compound", ";", "but", "seems", "one", "incident"]
# ::lemmas ["if", "my", "geography", "right", ",", "Lindt", "quite", "close", "to", "Commonwealth", "UK", "Governor", "General", "compound", ";", "but", "seem", "one", "incident"]
(c4-7 / close-10
      :ARG1 (c4-5 / person
                  :name (c4-3 / name
                              :op1 "Lindt"))
      :ARG2 (c4-6 / compound
                  :poss (c4-0 / organization
                              :name (c4-4 / name
                                          :op1 "Commonwealth"
                                          :op2 "UK"
                                          :op3 "Governor"
                                          :op4 "General"
                                          :op5 "Affairs")))
      :degree (c4-1 / quite)
      :concession-of (c4-11 / seem-01
                            :ARG1 (c4-2 / incident
                                        :quant 1))
      :condition (c4-8 / right-06
                       :ARG1 (c4-9 / geography
                                   :poss (c4-10 / i))))

# ::snt Thats what I was wondering
# ::tokens ["That", "s", "what", "I", "was", "wondering"]
# ::lemmas ["that", "s", "what", "i", "be", "wonder"]
(c5-0 / wonder-01
      :ARG0 (c5-2 / i)
      :ARG1 (c5-1 / that))

# ::snt you bet. Lots of friends in CBD at this prime Christmas shopping time!
# ::tokens ["you", "bet", ".", "Lots", "of", "friends", "in", "CBD", "at", "this", "prime", "Christmas", "shopping", "time", "!"]
# ::lemmas ["you", "bet", ".", "lot", "of", "friend", "in", "CBD", "at", "this", "prime", "Christmas", "shopping", "time", "!"]
(c6-2 / multi-sentence
      :snt1 (c6-4 / bet-01
                  :ARG0 (c6-0 / you))
      :snt2 (c6-9 / be-located-at-91
                  :ARG1 (c6-1 / friend
                              :quant (c6-3 / lot))
                  :ARG2 (c6-10 / city-district
                               :name (c6-6 / name
                                           :op1 "CBD"))
                  :time (c6-11 / shop-01
                               :mod (c6-5 / festival
                                          :name (c6-7 / name
                                                      :op1 "Christmas"))
                               :mod (c6-8 / prime)
                               :mod (c6-12 / this))))

# ::snt Lindt cafe may be rank amateurs, may be trained pros...we have no idea at this stage
# ::tokens ["Lindt", "cafe", "may", "be", "rank", "amateurs", ",", "may", "be", "trained", "pros", "...", "we", "have", "no", "idea", "at", "this", "stage"]
# ::lemmas ["Lindt", "cafe", "may", "be", "rank", "amateur", ",", "may", "be", "train", "pro", "...", "we", "have", "no", "idea", "at", "this", "stage"]
(c7-2 / multi-sentence
      :snt1 (c7-6 / possible-01
                  :ARG1 (c7-13 / amateur
                               :mod (c7-7 / rank)
                               :domain (c7-12 / person
                                              :name (c7-5 / name
                                                          :op1 "Lindt"
                                                          :op2 " cafe"))))
      :snt2 (c7-3 / possible-01
                  :ARG1 (c7-11 / train-01
                               :ARG1 (c7-10 / professional)
                               :ARG2 c7-12))
      :snt3 (c7-0 / have-03
                  :ARG0 (c7-1 / we)
                  :ARG1 (c7-4 / idea)
                  :time (c7-9 / stage
                              :mod (c7-8 / this))
                  :polarity -))

# ::snt yes. Stay out of cbd completely.
# ::tokens ["yes", ".", "Stay", "out", "of", "cbd", "completely", "."]
# ::lemmas ["yes", ".", "stay", "out", "of", "cbd", "completely", "."]
(c8-1 / multi-sentence
      :snt1 (c8-0 / yes)
      :snt2 (c8-7 / stay-01
                  :ARG1 (c8-6 / you)
                  :ARG3 (c8-2 / out-06
                              :ARG1 c8-6
                              :ARG2 (c8-4 / publication
                                          :name (c8-3 / name
                                                      :op1 "CBD"))
                              :ARG1-of (c8-5 / complete-02))))

# ::snt no suspect is waiting for all to see the flag.
# ::tokens ["no", "suspect", "is", "waiting", "for", "all", "to", "see", "the", "flag", "."]
# ::lemmas ["no", "suspect", "be", "wait", "for", "all", "to", "see", "the", "flag", "."]
(c9-0 / wait-01
      :ARG1 (c9-3 / person
                  :ARG2-of (c9-4 / suspect-01))
      :ARG2 (c9-2 / see-01
                  :ARG0 (c9-5 / all)
                  :ARG1 (c9-1 / flag))
      :polarity -)

# ::snt If it is he's done now
# ::tokens ["If", "it", "is", "he", "'s", "done", "now"]
# ::lemmas ["if", "it", "be", "he", "be", "do", "now"]
(c10-3 / be-done-08
       :ARG0 (c10-0 / he)
       :time (c10-1 / now)
       :condition (c10-2 / it))

# ::snt Ping me with further...
# ::tokens ["Ping", "me", "with", "further", "..."]
# ::lemmas ["ping", "i", "with", "far", "..."]
(c11-1 / ping-01
       :ARG0 (c11-0 / you)
       :ARG1 (c11-3 / i)
       :ARG2 (c11-2 / further)
       :mode imperative)
