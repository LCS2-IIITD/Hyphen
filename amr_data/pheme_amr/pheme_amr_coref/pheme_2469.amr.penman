# ::snt see Tennessee v Garner.
# ::tokens ["see", "Tennessee", "v", "Garner", "."]
# ::lemmas ["see", "Tennessee", "v", "Garner", "."]
(c1-0 / see-01
      :ARG0 (c1-1 / you)
      :ARG1 (c1-3 / court-decision
                  :name (c1-2 / name
                              :op1 "Tennessee"
                              :op2 "v"
                              :op3 "Garner"))
      :mode imperative)

# ::snt shut up
# ::tokens ["shut", "up"]
# ::lemmas ["shut", "up"]
(c2-0 / shut-up-06
      :ARG0 (c2-1 / you
                  :ARG1-of c2-0)
      :mode imperative)

# ::snt Ferguson is just one statistical number: % black. Detroit? % black...and so on and so on...
# ::tokens ["Ferguson", "is", "just", "one", "statistical", "number", ":", "%", "black", ".", "Detroit", "?", "%", "black", "...", "and", "so", "on", "and", "so", "on", "..."]
# ::lemmas ["Ferguson", "be", "just", "one", "statistical", "number", ":", "%", "black", ".", "Detroit", "?", "%", "black", "...", "and", "so", "on", "and", "so", "on", "..."]
(c3-6 / number
      :mod (c3-10 / statistical)
      :ARG1-of (c3-0 / mean-01
                     :ARG2 (c3-12 / and
                                  :op1 (c3-8 / percentage-entity
                                             :ARG1-of (c3-2 / black-05)
                                             :value 100)
                                  :op2 (c3-11 / percentage-entity
                                              :ARG1-of (c3-9 / black-05)
                                              :value 100)
                                  :op3 (c3-4 / et-cetera
                                             :polarity (c3-5 / amr-unknown))
                                  :op4 (c3-3 / et-cetera)))
      :domain (c3-1 / person
                    :name (c3-7 / name
                                :op1 "Ferguson"))
      :quant 1)

# ::snt no other people you really don't know much about anything that happen
# ::tokens ["no", "other", "people", "you", "really", "do", "n't", "know", "much", "about", "anything", "that", "happen"]
# ::lemmas ["no", "other", "people", "you", "really", "do", "not", "know", "much", "about", "anything", "that", "happen"]
(c4-6 / know-01
      :ARG0 (c4-1 / you)
      :ARG1 (c4-2 / much
                  :topic (c4-7 / anything
                               :ARG1-of (c4-0 / happen-02)))
      :ARG2 (c4-4 / person
                  :mod (c4-3 / other
                             :polarity -))
      :ARG1-of (c4-5 / real-04)
      :polarity -)

# ::snt don't forget he stole some cigars.
# ::tokens ["do", "n't", "forget", "he", "stole", "some", "cigars", "."]
# ::lemmas ["do", "not", "forget", "he", "steal", "some", "cigar", "."]
(c5-2 / forget-01
      :ARG0 (c5-1 / you)
      :ARG1 (c5-5 / steal-01
                  :ARG0 (c5-0 / he)
                  :ARG1 (c5-4 / cigar
                              :quant (c5-3 / some)))
      :polarity -
      :mode imperative)

# ::snt . no, but being killed as the result of attempting to wrestle an Officer's gun can get you killed - rightfully so!
# ::tokens [".", "no", ",", "but", "being", "killed", "as", "the", "result", "of", "attempting", "to", "wrestle", "an", "Officer", "'s", "gun", "can", "get", "you", "killed", "-", "rightfully", "so", "!"]
# ::lemmas [".", "no", ",", "but", "be", "kill", "as", "the", "result", "of", "attempt", "to", "wrestle", "an", "officer", "'s", "gun", "can", "get", "you", "kill", "-", "rightfully", "so", "!"]
(c6-8 / contrast-01
      :ARG2 (c6-6 / possible-01
                  :ARG1 (c6-9 / get-04
                              :ARG0 (c6-11 / kill-01
                                           :ARG1-of (c6-7 / result-01
                                                          :ARG2 (c6-13 / attempt-01
                                                                       :ARG0 (c6-1 / you)
                                                                       :ARG1 (c6-2 / wrestle-01
                                                                                   :ARG0 c6-1
                                                                                   :ARG1 (c6-10 / gun
                                                                                                :poss (c6-12 / person
                                                                                                             :ARG0-of (c6-0 / have-org-role-91
                                                                                                                            :ARG2 (c6-3 / officer))))))))
                              :ARG1 (c6-4 / kill-01
                                          :ARG1 c6-1)
                              :ARG2-of (c6-5 / right-05))))

# ::snt i kno shopliftin is a crime but he doesn't deserve to die. They hav to stop usin the lame self defence excuse.
# ::tokens ["i", "kno", "shopliftin", "is", "a", "crime", "but", "he", "does", "n't", "deserve", "to", "die", ".", "They", "hav", "to", "stop", "usin", "the", "lame", "self", "defence", "excuse", "."]
# ::lemmas ["i", "kno", "shopliftin", "be", "a", "crime", "but", "he", "do", "not", "deserve", "to", "die", ".", "they", "hav", "to", "stop", "usin", "the", "lame", "self", "defence", "excuse", "."]
(c7-4 / multi-sentence
      :snt1 (c7-0 / have-concession-91
                  :ARG1 (c7-9 / deserve-01
                              :ARG0 (c7-13 / he)
                              :ARG1 (c7-2 / die-01
                                          :ARG1 c7-13)
                              :polarity -)
                  :ARG2 (c7-10 / crime-02
                               :ARG1 (c7-11 / shoplift-01
                                            :ARG0 c7-13)))
      :snt2 (c7-6 / obligate-01
                  :ARG1 (c7-12 / they)
                  :ARG2 (c7-7 / stop-01
                              :ARG0 c7-12
                              :ARG1 (c7-1 / we)
                              :ARG2 (c7-8 / excuse-02
                                          :ARG1 c7-1
                                          :ARG2 (c7-14 / defend-01
                                                       :ARG0 c7-1
                                                       :ARG1 c7-1
                                                       :ARG3 (c7-3 / self))
                                          :mod (c7-5 / lame)))))

# ::snt they should have used the tried &amp; true "we suspected that he was responsible for recent gang related activity"
# ::tokens ["they", "should", "have", "used", "the", "tried", "&", "amp", ";", "true", "\"", "we", "suspected", "that", "he", "was", "responsible", "for", "recent", "gang", "related", "activity", "\""]
# ::lemmas ["they", "should", "have", "use", "the", "tried", "&", "amp", ";", "true", "\"", "we", "suspect", "that", "he", "be", "responsible", "for", "recent", "gang", "relate", "activity", "\""]
(c8-3 / multi-sentence
      :snt1 (c8-10 / recommend-01
                   :ARG1 (c8-4 / use-01
                               :ARG0 (c8-14 / they)
                               :ARG1 (c8-15 / and
                                            :op1 (c8-12 / try-02)
                                            :op2 (c8-6 / amp))))
      :snt2 (c8-8 / true-01
                  :ARG1 (c8-13 / suspect-01
                               :ARG0 (c8-1 / we)
                               :ARG1 (c8-7 / responsible-01
                                           :ARG0 (c8-0 / he)
                                           :ARG1 (c8-9 / activity-06
                                                       :ARG1-of (c8-5 / relate-01
                                                                      :ARG2 (c8-11 / gang))
                                                       :time (c8-2 / recent))))))

# ::snt It's almost like they watched the Zimmerman trial...
# ::tokens ["It", "'s", "almost", "like", "they", "watched", "the", "Zimmerman", "trial", "..."]
# ::lemmas ["it", "be", "almost", "like", "they", "watch", "the", "Zimmerman", "trial", "..."]
(c9-4 / resemble-01
      :ARG1 (c9-1 / it)
      :ARG2 (c9-0 / watch-01
                  :ARG0 (c9-6 / they)
                  :ARG1 (c9-5 / try-02
                              :ARG1 (c9-3 / person
                                          :name (c9-2 / name
                                                      :op1 "Zimmerman"))))
      :mod (c9-7 / almost))

# ::snt it's not him did he lose to lbs from robbery to shooting ?
# ::tokens ["it", "'s", "not", "him", "did", "he", "lose", "to", "lbs", "from", "robbery", "to", "shooting", "?"]
# ::lemmas ["it", "be", "not", "he", "do", "he", "lose", "to", "lbs", "from", "robbery", "to", "shoot", "?"]
(c10-1 / lose-02
       :ARG0 (c10-0 / he)
       :ARG1 (c10-2 / mass-quantity
                    :unit (c10-3 / pound)
                    :quant 1)
       :ARG3 (c10-4 / rob-01)
       :ARG4 (c10-5 / shoot-02)
       :polarity (c10-6 / amr-unknown)
       :polarity -)

# ::snt Especially when you're dressed nothing like the suspect in the stills. Yep. .
# ::tokens ["Especially", "when", "you", "'re", "dressed", "nothing", "like", "the", "suspect", "in", "the", "stills", ".", "Yep", ".", "."]
# ::lemmas ["especially", "when", "you", "be", "dress", "nothing", "like", "the", "suspect", "in", "the", "still", ".", "yep", ".", "."]
(c11-3 / multi-sentence
       :snt1 (c11-0 / have-condition-91
                    :ARG2 (c11-7 / dress-01
                                 :ARG1 (c11-1 / you)
                                 :ARG2 (c11-11 / thing
                                               :ARG1-of (c11-8 / resemble-01
                                                               :ARG2 (c11-2 / dress-01
                                                                            :ARG1 (c11-6 / person
                                                                                         :ARG2-of (c11-10 / suspect-01))
                                                                            :location (c11-4 / still))
                                                               :polarity -))
                                 :mod (c11-5 / especially)))
       :snt2 (c11-9 / yep
                    :mode expressive))

# ::snt tomorrow he'll be a rapist and the day after tomorrow a Taliban terrorist. Versions have changed so many times...
# ::tokens ["tomorrow", "he", "'ll", "be", "a", "rapist", "and", "the", "day", "after", "tomorrow", "a", "Taliban", "terrorist", ".", "Versions", "have", "changed", "so", "many", "times", "..."]
# ::lemmas ["tomorrow", "he", "'ll", "be", "a", "rapist", "and", "the", "day", "after", "tomorrow", "a", "Taliban", "terrorist", ".", "version", "have", "change", "so", "many", "time", "..."]
(c12-1 / multi-sentence
       :snt1 (c12-16 / and
                     :op1 (c12-8 / rape-01
                                 :ARG0 (c12-0 / he)
                                 :time (c12-14 / tomorrow))
                     :op2 (c12-12 / terrorist
                                  :mod (c12-9 / criminal-organization
                                              :name (c12-5 / name
                                                           :op1 "Taliban"))
                                  :time (c12-3 / after
                                               :op1 (c12-6 / tomorrow)
                                               :quant (c12-2 / temporal-quantity
                                                             :unit (c12-10 / day)
                                                             :quant 1))))
       :snt2 (c12-11 / change-01
                     :ARG1 (c12-4 / thing
                                  :ARG1-of (c12-7 / Version-01))
                     :frequency (c12-13 / many
                                        :degree (c12-15 / so))))

# ::snt u don't know that all the facts aren't even out yet
# ::tokens ["u", "do", "n't", "know", "that", "all", "the", "facts", "are", "n't", "even", "out", "yet"]
# ::lemmas ["u", "do", "not", "know", "that", "all", "the", "fact", "be", "not", "even", "out", "yet"]
(c13-5 / know-01
       :ARG0 (c13-0 / you)
       :ARG1 (c13-2 / out-03
                    :ARG1 (c13-1 / fact
                                 :mod (c13-6 / all))
                    :mod (c13-3 / even)
                    :time (c13-4 / yet)
                    :polarity -)
       :polarity -)

# ::snt I know and u do
# ::tokens ["I", "know", "and", "u", "do"]
# ::lemmas ["i", "know", "and", "u", "do"]
(c14-4 / and
       :op1 (c14-3 / know-01
                   :ARG0 (c14-2 / i))
       :op2 (c14-1 / know-01
                   :ARG0 (c14-0 / you)))

# ::snt they lied about it
# ::tokens ["they", "lied", "about", "it"]
# ::lemmas ["they", "lie", "about", "it"]
(c15-0 / lie-08
       :ARG0 (c15-1 / they)
       :ARG3 (c15-2 / it))

# ::snt a robber who had a weapon, the cop had reason.to be worried about.violence
# ::tokens ["a", "robber", "who", "had", "a", "weapon", ",", "the", "cop", "had", "reason.to", "be", "worried", "about.violence"]
# ::lemmas ["a", "robber", "who", "have", "a", "weapon", ",", "the", "cop", "have", "reason.to", "be", "worry", "about.violence"]
(c16-2 / multi-sentence
       :snt1 (c16-0 / have-03
                    :ARG0 (c16-6 / person
                                 :ARG0-of (c16-7 / rob-01)
                                 :ARG0-of (c16-10 / have-03
                                                  :ARG1 (c16-1 / weapon))))
       :snt2 (c16-5 / have-03
                    :ARG0 (c16-8 / cop)
                    :ARG1 (c16-3 / reason
                                 :ARG0-of (c16-9 / cause-01
                                                 :ARG1 (c16-4 / worry-01
                                                              :ARG1 c16-8)))))

# ::snt i haven't seen the video. is it that obvious?
# ::tokens ["i", "have", "n't", "seen", "the", "video", ".", "is", "it", "that", "obvious", "?"]
# ::lemmas ["i", "have", "not", "see", "the", "video", ".", "be", "it", "that", "obvious", "?"]
(c17-0 / multi-sentence
       :snt1 (c17-5 / see-01
                    :ARG0 (c17-2 / i)
                    :ARG1 (c17-3 / video)
                    :polarity -)
       :snt2 (c17-1 / obvious-01
                    :ARG1 (c17-4 / it)
                    :degree (c17-6 / that)
                    :polarity (c17-7 / amr-unknown)))

# ::snt how about fighting a police officer and reaching for his gun
# ::tokens ["how", "about", "fighting", "a", "police", "officer", "and", "reaching", "for", "his", "gun"]
# ::lemmas ["how", "about", "fight", "a", "police", "officer", "and", "reach", "for", "his", "gun"]
(c18-6 / amr-unknown
       :topic (c18-2 / and
                     :op1 (c18-0 / fight-01
                                 :ARG1 (c18-1 / officer
                                              :mod (c18-3 / police)))
                     :op2 (c18-4 / reach-03
                                 :ARG1 (c18-5 / gun
                                              :poss c18-1))))

# ::snt Oh, a suspect in a robbery? That changes everything. Everyone knows summary execution is the penalty for suspicion of robbery
# ::tokens ["Oh", ",", "a", "suspect", "in", "a", "robbery", "?", "That", "changes", "everything", ".", "Everyone", "knows", "summary", "execution", "is", "the", "penalty", "for", "suspicion", "of", "robbery"]
# ::lemmas ["oh", ",", "a", "suspect", "in", "a", "robbery", "?", "that", "change", "everything", ".", "everyone", "know", "summary", "execution", "be", "the", "penalty", "for", "suspicion", "of", "robbery"]
(c19-1 / multi-sentence
       :snt1 (c19-11 / suspect-01
                     :ARG2 (c19-8 / rob-01)
                     :polarity (c19-13 / amr-unknown)
                     :mod (c19-3 / oh
                                 :mode expressive))
       :snt2 (c19-9 / change-01
                    :ARG0 (c19-12 / that)
                    :ARG1 (c19-4 / everything))
       :snt3 (c19-6 / know-01
                    :ARG0 (c19-2 / everyone)
                    :ARG1 (c19-0 / execute-01
                                 :manner (c19-5 / summary)
                                 :ARG0-of (c19-10 / cause-01
                                                  :ARG1 c19-11
                                                  :ARG1 (c19-7 / rob-01)))))

# ::snt Also, we don't call ambulances for the summarily executed.
# ::tokens ["Also", ",", "we", "do", "n't", "call", "ambulances", "for", "the", "summarily", "executed", "."]
# ::lemmas ["also", ",", "we", "do", "not", "call", "ambulance", "for", "the", "summarily", "execute", "."]
(c20-4 / call-01
       :ARG0 (c20-0 / we)
       :ARG1 (c20-6 / ambulance)
       :ARG2 (c20-3 / person
                    :ARG1-of (c20-1 / execute-01
                                    :manner (c20-5 / summary)))
       :mod (c20-2 / also)
       :polarity -)

# ::snt The Message Remains The Same
# ::tokens ["The", "Message", "Remains", "The", "Same"]
# ::lemmas ["The", "Message", "Remains", "The", "Same"]
(c21-2 / remain-01
       :ARG1 (c21-3 / thing
                    :ARG1-of (c21-1 / message-01))
       :ARG3 (c21-0 / same-01))

# ::snt yes, unarmed robbery in which a person stole some cigars, true menace to society
# ::tokens ["yes", ",", "unarmed", "robbery", "in", "which", "a", "person", "stole", "some", "cigars", ",", "true", "menace", "to", "society"]
# ::lemmas ["yes", ",", "unarmed", "robbery", "in", "which", "a", "person", "steal", "some", "cigar", ",", "true", "menace", "to", "society"]
(c22-1 / menace-01
       :ARG0 (c22-4 / rob-01
                    :ARG1-of (c22-8 / arm-01
                                    :polarity -)
                    :time-of (c22-6 / steal-01
                                    :ARG0 (c22-3 / person)
                                    :ARG1 (c22-5 / cigar
                                                 :quant (c22-2 / some))))
       :ARG1 (c22-0 / society)
       :ARG1-of (c22-7 / true-01))

# ::snt Don't start with an excuse.....the excuse follows.
# ::tokens ["Do", "n't", "start", "with", "an", "excuse", ".....", "the", "excuse", "follows", "."]
# ::lemmas ["do", "not", "start", "with", "an", "excuse", ".....", "the", "excuse", "follow", "."]
(c23-4 / contrast-01
       :ARG1 (c23-5 / start-01
                    :ARG0 (c23-0 / you)
                    :ARG2 (c23-3 / excuse-02)
                    :polarity -
                    :mode imperative)
       :ARG2 (c23-1 / follow-01
                    :ARG1 (c23-2 / excuse-02)))

# ::snt Agree. BUT ... does help to have a full understanding of situation.
# ::tokens ["Agree", ".", "BUT", "...", "does", "help", "to", "have", "a", "full", "understanding", "of", "situation", "."]
# ::lemmas ["agree", ".", "but", "...", "do", "help", "to", "have", "a", "full", "understanding", "of", "situation", "."]
(c24-2 / multi-sentence
       :snt1 (c24-8 / agree-01
                    :ARG0 (c24-4 / i))
       :snt2 (c24-5 / contrast-01
                    :ARG2 (c24-0 / help-01
                                 :ARG0 (c24-6 / it)
                                 :ARG1 (c24-3 / understand-01
                                              :ARG1 (c24-7 / situation)
                                              :degree (c24-1 / full)))))

# ::snt Totally agree, no excuse for deadly force; but it explains why officer confronted in first place.
# ::tokens ["Totally", "agree", ",", "no", "excuse", "for", "deadly", "force", ";", "but", "it", "explains", "why", "officer", "confronted", "in", "first", "place", "."]
# ::lemmas ["totally", "agree", ",", "no", "excuse", "for", "deadly", "force", ";", "but", "it", "explain", "why", "officer", "confront", "in", "first", "place", "."]
(c25-7 / contrast-01
       :ARG1 (c25-13 / agree-01
                     :ARG0 (c25-5 / i)
                     :ARG1 (c25-4 / excuse-01
                                  :ARG2 (c25-0 / force-04
                                               :ARG0-of (c25-12 / kill-01))
                                  :polarity -)
                     :degree (c25-10 / total))
       :ARG2 (c25-2 / explain-01
                    :ARG0 (c25-8 / it)
                    :ARG1 (c25-9 / thing
                                 :ARG0-of (c25-6 / cause-01
                                                 :ARG1 (c25-11 / confront-01
                                                               :ARG0 (c25-3 / officer)
                                                               :mod (c25-1 / in-the-first-place))))))

# ::snt yeah his friends if my friend was shot im not going to make him look bad
# ::tokens ["yeah", "his", "friends", "if", "my", "friend", "was", "shot", "i", "m", "not", "going", "to", "make", "him", "look", "bad"]
# ::lemmas ["yeah", "his", "friend", "if", "my", "friend", "be", "shoot", "i", "m", "not", "go", "to", "make", "he", "look", "bad"]
(c26-3 / make-02
       :ARG0 (c26-6 / i)
       :ARG1 (c26-2 / look-02
                    :ARG0 (c26-7 / person
                                 :ARG0-of (c26-0 / have-rel-role-91
                                                 :ARG1 (c26-9 / person
                                                              :ARG0-of (c26-10 / have-rel-role-91
                                                                               :ARG1 c26-6
                                                                               :ARG2 (c26-4 / friend
                                                                                            :ARG2-of c26-0))))))
       :ARG1 (c26-5 / bad-07
                    :ARG1 c26-9)
       :condition (c26-8 / shoot-02
                         :ARG1 c26-9)
       :mod (c26-1 / yeah
                   :mode expressive)
       :polarity -)

# ::snt everybody knows all the eyewitness say the same story
# ::tokens ["everybody", "knows", "all", "the", "eyewitness", "say", "the", "same", "story"]
# ::lemmas ["everybody", "know", "all", "the", "eyewitness", "say", "the", "same", "story"]
(c27-5 / know-01
       :ARG0 (c27-2 / everybody)
       :ARG1 (c27-4 / say-01
                    :ARG0 (c27-1 / eyewitness
                                 :mod (c27-6 / all))
                    :ARG1 (c27-3 / story
                                 :ARG1-of (c27-0 / same-01))))

# ::snt yes it is
# ::tokens ["yes", "it", "is"]
# ::lemmas ["yes", "it", "be"]
(c28-0 / yes)

# ::snt He obviously was asking for it.SMH
# ::tokens ["He", "obviously", "was", "asking", "for", "it", ".", "SMH"]
# ::lemmas ["he", "obviously", "be", "ask", "for", "it", ".", "smh"]
(c29-1 / obvious-01
       :ARG1 (c29-3 / ask-02
                    :ARG0 (c29-0 / he)
                    :ARG1 (c29-2 / it))
       :mod (c29-4 / hmm
                   :mode expressive))
