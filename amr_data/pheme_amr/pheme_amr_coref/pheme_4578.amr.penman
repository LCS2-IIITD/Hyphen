# ::snt thanks guys. Never thought this day would come.
# ::tokens ["thanks", "guys", ".", "Never", "thought", "this", "day", "would", "come", "."]
# ::lemmas ["thank", "guy", ".", "never", "think", "this", "day", "would", "come", "."]
(c1-0 / multi-sentence
      :snt1 (c1-8 / thank-01
                  :ARG1 (c1-6 / guy))
      :snt2 (c1-7 / think-01
                  :ARG0 (c1-2 / i)
                  :ARG1 (c1-5 / come-03
                              :ARG1 (c1-4 / day
                                          :mod (c1-3 / this)))
                  :time (c1-1 / ever)
                  :polarity -))

# ::snt you mean no hostages hurt, kill the rest
# ::tokens ["you", "mean", "no", "hostages", "hurt", ",", "kill", "the", "rest"]
# ::lemmas ["you", "mean", "no", "hostage", "hurt", ",", "kill", "the", "rest"]
(c2-2 / mean-01
      :ARG0 (c2-1 / you)
      :ARG2 (c2-4 / and
                  :op1 (c2-0 / hurt-01
                             :ARG1 (c2-6 / hostage)
                             :polarity -)
                  :op2 (c2-5 / kill-01
                             :ARG1 (c2-3 / rest))))

# ::snt Except for the terrorist. He can die a slow painful death from a gut shot.
# ::tokens ["Except", "for", "the", "terrorist", ".", "He", "can", "die", "a", "slow", "painful", "death", "from", "a", "gut", "shot", "."]
# ::lemmas ["except", "for", "the", "terrorist", ".", "he", "can", "die", "a", "slow", "painful", "death", "from", "a", "gut", "shot", "."]
(c3-1 / multi-sentence
      :snt1 (c3-2 / except-01
                  :ARG1 (c3-9 / terrorist))
      :snt2 (c3-4 / possible-01
                  :ARG1 (c3-5 / die-01
                              :ARG1 (c3-0 / he)
                              :ARG1-of (c3-8 / slow-05)
                              :ARG0-of (c3-10 / pain-01)
                              :ARG1-of (c3-6 / cause-01
                                             :ARG0 (c3-3 / shoot-01
                                                         :ARG2 (c3-7 / gut))))))

# ::snt here's to hoping everyone makes it through this tragedy safely
# ::tokens ["here", "'s", "to", "hoping", "everyone", "makes", "it", "through", "this", "tragedy", "safely"]
# ::lemmas ["here", "be", "to", "hope", "everyone", "make", "it", "through", "this", "tragedy", "safely"]
(c4-0 / hope-01
      :ARG1 (c4-1 / make-18
                  :ARG0 (c4-2 / everyone)
                  :ARG1 (c4-6 / through
                              :op1 (c4-4 / tragedy
                                         :mod (c4-3 / this)))
                  :ARG0-of (c4-5 / safe-01))
      :location (c4-7 / here))

# ::snt Amen God bless you!
# ::tokens ["Amen", "God", "bless", "you", "!"]
# ::lemmas ["amen", "God", "bless", "you", "!"]
(c5-1 / bless-01
      :ARG0 (c5-3 / person
                  :name (c5-2 / name
                              :op1 "God"))
      :ARG1 (c5-0 / you)
      :mod (c5-4 / amen
                 :mode expressive)
      :mode expressive)

# ::snt amen ...
# ::tokens ["amen", "..."]
# ::lemmas ["amen", "..."]
(c6-0 / amen
      :mode expressive)

# ::snt , wants to send you a Bitcoin tip for tragedy (2,855 bits/$1.00)! Collect
# ::tokens [",", "wants", "to", "send", "you", "a", "Bitcoin", "tip", "for", "tragedy", "(", "2,855", "bits/$1.00", ")", "!", "Collect"]
# ::lemmas [",", "want", "to", "send", "you", "a", "Bitcoin", "tip", "for", "tragedy", "(", "2,855", "bits/$1.00", ")", "!", "collect"]
(c7-3 / multi-sentence
      :snt1 (c7-0 / want-01
                  :ARG1 (c7-13 / send-01
                               :ARG1 (c7-14 / tip-05
                                            :ARG1 (c7-12 / tragedy)
                                            :ARG2 (c7-7 / monetary-quantity
                                                        :unit (c7-8 / pound)
                                                        :ARG1-of (c7-2 / mean-01
                                                                       :ARG2 (c7-9 / monetary-quantity
                                                                                   :unit (c7-15 / pound)
                                                                                   :ARG1-of c7-2
                                                                                   :ARG2 (c7-10 / monetary-quantity
                                                                                                :unit (c7-4 / pound)
                                                                                                :quant 1.00)
                                                                                   :quant 999999))
                                                        :quant 22400))
                               :mod (c7-6 / monetary-quantity
                                          :name (c7-5 / name
                                                      :op1 "Bitcoin")))
                  :ARG2 (c7-1 / you))
      :snt2 (c7-11 / collect-01))
