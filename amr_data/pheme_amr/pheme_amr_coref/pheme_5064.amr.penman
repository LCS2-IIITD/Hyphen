# ::snt LOOK AT THIS
# ::tokens ["LOOK", "AT", "THIS"]
# ::lemmas ["look", "at", "this"]
(c1-1 / look-01
      :ARG0 (c1-0 / you)
      :ARG1 (c1-2 / this)
      :mode imperative)

# ::snt EXACTLY. MT : Look at his arrive time on the report. Exlplain this.
# ::tokens ["EXACTLY", ".", "MT", ":", "Look", "at", "his", "arrive", "time", "on", "the", "report", ".", "Exlplain", "this", "."]
# ::lemmas ["exactly", ".", "MT", ":", "look", "at", "his", "arrive", "time", "on", "the", "report", ".", "exlplain", "this", "."]
(c2-3 / multi-sentence
      :snt1 (c2-5 / exact)
      :snt2 (c2-2 / look-01
                  :ARG0 (c2-7 / person
                              :name (c2-6 / name
                                          :op1 "MT"))
                  :ARG1 (c2-10 / time
                               :time-of (c2-11 / arrive-01
                                               :ARG1 (c2-0 / he))
                               :location (c2-8 / report-01))
                  :mode imperative)
      :snt3 (c2-4 / explain-01
                  :ARG0 (c2-1 / you)
                  :ARG1 (c2-9 / this)
                  :mode imperative))

# ::snt Look at his arrive time on the report. This man was still in the store. Exlplain this.
# ::tokens ["Look", "at", "his", "arrive", "time", "on", "the", "report", ".", "This", "man", "was", "still", "in", "the", "store", ".", "Exlplain", "this", "."]
# ::lemmas ["look", "at", "his", "arrive", "time", "on", "the", "report", ".", "this", "man", "be", "still", "in", "the", "store", ".", "exlplain", "this", "."]
(c3-2 / multi-sentence
      :snt1 (c3-1 / look-01
                  :ARG0 (c3-0 / you)
                  :ARG1 (c3-12 / time
                               :time-of (c3-13 / arrive-01
                                               :ARG1 (c3-8 / man
                                                           :mod (c3-10 / this))))
                  :source (c3-9 / report-01)
                  :mode imperative)
      :snt2 (c3-3 / be-located-at-91
                  :ARG1 c3-8
                  :mod (c3-7 / this))
      :ARG2 (c3-11 / store)
      :mod (c3-4 / still)
      :snt3 (c3-5 / explain-01
                  :ARG0 c3-0
                  :ARG1 (c3-6 / this)
                  :mode imperative))

# ::snt Dorian Johnson told FBI that they did take cigarellos, but stopped them for J walking!
# ::tokens ["Dorian", "Johnson", "told", "FBI", "that", "they", "did", "take", "cigarellos", ",", "but", "stopped", "them", "for", "J", "walking", "!"]
# ::lemmas ["Dorian", "Johnson", "tell", "FBI", "that", "they", "do", "take", "cigarello", ",", "but", "stop", "they", "for", "J", "walk", "!"]
(c4-10 / tell-01
       :ARG0 (c4-3 / person
                   :name (c4-1 / name
                               :op1 "Dorian"
                               :op2 "Johnson"))
       :ARG1 (c4-8 / take-01
                   :ARG0 (c4-2 / they)
                   :ARG1 (c4-5 / cigarello)
                   :concession-of (c4-9 / stop-01
                                        :ARG0 c4-2
                                        :ARG1 c4-2
                                        :purpose (c4-0 / walk-01
                                                       :ARG0 (c4-11 / person
                                                                    :name (c4-4 / name
                                                                                :op1 "J")))))
       :ARG2 (c4-6 / government-organization
                   :name (c4-7 / name
                               :op1 "FBI")))

# ::snt This post helps to prove an admission of guilt and revenge
# ::tokens ["This", "post", "helps", "to", "prove", "an", "admission", "of", "guilt", "and", "revenge"]
# ::lemmas ["this", "post", "help", "to", "prove", "an", "admission", "of", "guilt", "and", "revenge"]
(c6-0 / help-01
      :ARG0 (c6-6 / thing
                  :ARG1-of (c6-2 / post-01)
                  :mod (c6-5 / this))
      :ARG1 (c6-7 / prove-01
                  :ARG0 c6-6
                  :ARG1 (c6-8 / admit-01
                              :ARG1 (c6-1 / and
                                          :op1 (c6-4 / guilty-01)
                                          :op2 (c6-3 / revenge)))))

# ::snt : Look at his arrive time on the report. This man was still in the store. Exlplain this. !!!
# ::tokens [":", "Look", "at", "his", "arrive", "time", "on", "the", "report", ".", "This", "man", "was", "still", "in", "the", "store", ".", "Exlplain", "this", ".", "!", "!", "!"]
# ::lemmas [":", "look", "at", "his", "arrive", "time", "on", "the", "report", ".", "this", "man", "be", "still", "in", "the", "store", ".", "exlplain", "this", ".", "!", "!", "!"]
(c7-2 / multi-sentence
      :snt1 (c7-1 / look-01
                  :ARG0 (c7-0 / you)
                  :ARG1 (c7-12 / time
                               :time-of (c7-13 / arrive-01
                                               :ARG1 (c7-8 / man
                                                           :mod (c7-10 / this))))
                  :source (c7-9 / report-01)
                  :mode imperative)
      :snt2 (c7-3 / be-located-at-91
                  :ARG1 c7-8
                  :mod (c7-7 / this))
      :ARG2 (c7-11 / store)
      :mod (c7-4 / still)
      :snt3 (c7-5 / explain-01
                  :ARG0 c7-0
                  :ARG1 (c7-6 / this)
                  :mode imperative))

# ::snt : you can bet your ass this will be looked into. Good info, especially if times are correct.
# ::tokens [":", "you", "can", "bet", "your", "ass", "this", "will", "be", "looked", "into", ".", "Good", "info", ",", "especially", "if", "times", "are", "correct", "."]
# ::lemmas [":", "you", "can", "bet", "your", "ass", "this", "will", "be", "look", "into", ".", "good", "info", ",", "especially", "if", "time", "be", "correct", "."]
(c8-2 / multi-sentence
      :snt1 (c8-6 / possible-01
                  :ARG1 (c8-3 / bet-01
                              :ARG0 (c8-0 / you)
                              :ARG1 (c8-11 / ass
                                           :part-of c8-0)
                              :ARG2 (c8-1 / look-into-11
                                          :ARG1 (c8-10 / this))))
      :snt2 (c8-5 / information
                  :ARG1-of (c8-8 / good-02)
                  :condition (c8-7 / correct-02
                                   :ARG1 (c8-9 / time)
                                   :degree (c8-4 / especially))))

# ::snt : THIS. This, this, this, this, this. Thank you.
# ::tokens [":", "THIS", ".", "This", ",", "this", ",", "this", ",", "this", ",", "this", ".", "Thank", "you", "."]
# ::lemmas [":", "this", ".", "this", ",", "this", ",", "this", ",", "this", ",", "this", ".", "thank", "you", "."]
(c9-1 / multi-sentence
      :snt1 (c9-6 / this)
      :snt2 (c9-5 / this)
      :snt3 (c9-4 / this)
      :snt4 (c9-2 / thank-01
                  :ARG0 (c9-3 / i)
                  :ARG1 (c9-0 / you)))

# ::snt damn fine policing by the police to identify, broadcast and apprehend the suspect in minutes
# ::tokens ["damn", "fine", "policing", "by", "the", "police", "to", "identify", ",", "broadcast", "and", "apprehend", "the", "suspect", "in", "minutes"]
# ::lemmas ["damn", "fine", "policing", "by", "the", "police", "to", "identify", ",", "broadcast", "and", "apprehend", "the", "suspect", "in", "minutes"]
(c10-5 / damn-01
       :ARG1 (c10-4 / police
                    :ARG0-of (c10-3 / identify-01
                                    :ARG1 (c10-9 / person
                                                 :ARG2-of (c10-7 / suspect-01)))
                    :ARG0-of (c10-2 / broadcast-01
                                    :ARG1 c10-9)
                    :ARG0-of (c10-10 / apprehend-01
                                     :ARG1 c10-9)
                    :duration (c10-1 / multiple
                                     :op1 (c10-8 / temporal-quantity
                                                 :unit (c10-6 / minute)
                                                 :quant 1))
                    :ARG0-of (c10-0 / fine-04)))

# ::snt way to go
# ::tokens ["way", "to", "go"]
# ::lemmas ["way", "to", "go"]
(c11-0 / way
       :manner-of (c11-1 / go-06))

# ::snt THIS. This, this, this, this, this. Thank you.
# ::tokens ["THIS", ".", "This", ",", "this", ",", "this", ",", "this", ",", "this", ".", "Thank", "you", "."]
# ::lemmas ["this", ".", "this", ",", "this", ",", "this", ",", "this", ",", "this", ".", "thank", "you", "."]
(c12-1 / multi-sentence
       :snt1 (c12-6 / this)
       :snt2 (c12-5 / this)
       :snt3 (c12-4 / this)
       :snt4 (c12-2 / thank-01
                    :ARG0 (c12-3 / i)
                    :ARG1 (c12-0 / you)))

# ::snt : BINGO!!!!!
# ::tokens [":", "BINGO", "!", "!", "!", "!", "!"]
# ::lemmas [":", "BINGO", "!", "!", "!", "!", "!"]
(c13-0 / bingo
       :mode expressive)

# ::snt you can bet your ass this will be looked into. Good info, especially if times are correct.
# ::tokens ["you", "can", "bet", "your", "ass", "this", "will", "be", "looked", "into", ".", "Good", "info", ",", "especially", "if", "times", "are", "correct", "."]
# ::lemmas ["you", "can", "bet", "your", "ass", "this", "will", "be", "look", "into", ".", "good", "info", ",", "especially", "if", "time", "be", "correct", "."]
(c14-3 / multi-sentence
       :snt1 (c14-7 / possible-01
                    :ARG1 (c14-4 / bet-01
                                 :ARG0 (c14-1 / you)
                                 :ARG1 (c14-12 / ass
                                               :part-of c14-1)
                                 :ARG2 (c14-2 / look-into-11
                                              :ARG1 (c14-11 / this))))
       :snt2 (c14-6 / information
                    :ARG1-of (c14-9 / good-02)
                    :ARG1-of (c14-0 / have-condition-91
                                    :ARG2 (c14-8 / correct-02
                                                 :ARG1 (c14-10 / time))
                                    :degree (c14-5 / especially))))

# ::snt please view and RT original tweet
# ::tokens ["please", "view", "and", "RT", "original", "tweet"]
# ::lemmas ["please", "view", "and", "RT", "original", "tweet"]
(c15-5 / and
       :op1 (c15-2 / view-01
                   :ARG0 (c15-0 / you)
                   :ARG1 (c15-4 / tweet-01
                                :ARG0 c15-0
                                :mod (c15-1 / original))
                   :mode imperative
                   :polite +)
       :op2 (c15-3 / RT-01
                   :ARG0 c15-0
                   :ARG1 c15-4
                   :mode imperative
                   :polite +))

# ::snt something aint right here
# ::tokens ["something", "ai", "nt", "right", "here"]
# ::lemmas ["something", "be", "not", "right", "here"]
(c16-0 / something
       :location (c16-1 / here
                        :mod (c16-2 / right))
       :ARG1-of (c16-3 / request-confirmation-91))

# ::snt ..against Black or Latino Americans and it must be stopped! America must Repent n turn from Racism and hatred.
# ::tokens ["..", "against", "Black", "or", "Latino", "Americans", "and", "it", "must", "be", "stopped", "!", "America", "must", "Repent", "n", "turn", "from", "Racism", "and", "hatred", "."]
# ::lemmas ["..", "against", "Black", "or", "Latino", "Americans", "and", "it", "must", "be", "stop", "!", "America", "must", "repent", "n", "turn", "from", "racism", "and", "hatred", "."]
(c17-0 / multi-sentence
       :snt1 (c17-7 / and
                    :op1 (c17-20 / oppose-01
                                 :ARG1 (c17-19 / or
                                               :op1 (c17-4 / person
                                                           :mod (c17-10 / ethnic-group
                                                                        :name (c17-11 / name
                                                                                      :op1 "Black")))
                                               :op2 (c17-6 / person
                                                           :mod (c17-9 / ethnic-group
                                                                       :name (c17-21 / name
                                                                                     :op1 "Latino")))
                                               :mod (c17-22 / country
                                                            :name (c17-2 / name
                                                                         :op1 "America")))
                                 :ARG1-of (c17-15 / obligate-01))
                    :op2 (c17-14 / obligate-01
                                 :ARG1 c17-22
                                 :ARG2 (c17-5 / stop-01
                                              :ARG1 (c17-18 / it))))
       :snt2 (c17-16 / obligate-01
                     :ARG1 c17-22
                     :name (c17-3 / name
                                  :op1 "America"))
       :ARG2 (c17-17 / and
                     :op1 (c17-13 / repent-01)
                     :op2 (c17-23 / turn-02)
                     :source (c17-12 / and
                                     :op1 (c17-1 / racism)
                                     :op2 (c17-8 / hate-01))))

# ::snt this shit says they arrived at :54....and DEPARTED AT :54??
# ::tokens ["this", "shit", "says", "they", "arrived", "at", ":", "54", "....", "and", "DEPARTED", "AT", ":", "54", "?", "?"]
# ::lemmas ["this", "shit", "say", "they", "arrive", "at", ":", "54", "....", "and", "depart", "AT", ":", "54", "?", "?"]
(c18-1 / multi-sentence
       :snt1 (c18-7 / say-01
                    :ARG0 (c18-2 / shit
                                 :mod (c18-8 / this))
                    :ARG1 (c18-9 / arrive-01
                                 :ARG1 (c18-6 / they)
                                 :ARG4 (c18-4 / temperature-quantity
                                              :scale (c18-5 / celsius)
                                              :quant 54)))
       :snt2 (c18-0 / segregate-01
                    :polarity (c18-3 / amr-unknown)
                    :location c18-4))

# ::snt : this shit says they arrived at :54....and DEPARTED AT :54??something don't add up
# ::tokens [":", "this", "shit", "says", "they", "arrived", "at", ":", "54", "....", "and", "DEPARTED", "AT", ":", "54??something", "do", "n't", "add", "up"]
# ::lemmas [":", "this", "shit", "say", "they", "arrive", "at", ":", "54", "....", "and", "depart", "AT", ":", "54??something", "do", "not", "add", "up"]
(c19-1 / multi-sentence
       :snt1 (c19-9 / say-01
                    :ARG0 (c19-3 / shit
                                 :mod (c19-11 / this))
                    :ARG1 (c19-12 / and
                                  :op1 (c19-4 / arrive-01
                                              :ARG1 (c19-8 / they)
                                              :ARG4 (c19-7 / date-entity
                                                           :time "54"))
                                  :op2 (c19-6 / prepare-02
                                              :ARG1 c19-8
                                              :ARG2 c19-7))
                    :polarity (c19-5 / amr-unknown))
       :snt2 (c19-10 / add-up-04
                     :ARG1 (c19-0 / something)
                     :polarity (c19-2 / amr-unknown)
                     :polarity -))

# ::snt A racist and a murderer will both lie to cover their crimes...
# ::tokens ["A", "racist", "and", "a", "murderer", "will", "both", "lie", "to", "cover", "their", "crimes", "..."]
# ::lemmas ["a", "racist", "and", "a", "murderer", "will", "both", "lie", "to", "cover", "their", "crime", "..."]
(c20-0 / lie-08
       :ARG0 (c20-7 / and
                    :op1 (c20-4 / racist)
                    :op2 (c20-3 / person
                                :ARG0-of (c20-1 / murder-01))
                    :mod (c20-2 / both))
       :purpose (c20-5 / cover-01
                       :ARG0 c20-7
                       :ARG1 (c20-6 / crime-02
                                    :ARG0 c20-7)))

# ::snt Receipt evidence?
# ::tokens ["Receipt", "evidence", "?"]
# ::lemmas ["receipt", "evidence", "?"]
(c21-0 / evidence-01
       :polarity (c21-2 / amr-unknown)
       :ARG1-of (c21-1 / receive-01))

# ::snt look at the date
# ::tokens ["look", "at", "the", "date"]
# ::lemmas ["look", "at", "the", "date"]
(c22-2 / look-01
       :ARG0 (c22-1 / you)
       :ARG1 (c22-0 / date)
       :mode imperative)

# ::snt this piece of shit makes zero sense who stays on a call for + hours? GTFOH w/this fabricated filth!
# ::tokens ["this", "piece", "of", "shit", "makes", "zero", "sense", "who", "stays", "on", "a", "call", "for", "+", "hours", "?", "GTFOH", "w", "/", "this", "fabricated", "filth", "!"]
# ::lemmas ["this", "piece", "of", "shit", "make", "zero", "sense", "who", "stay", "on", "a", "call", "for", "+", "hour", "?", "GTFOH", "w", "/", "this", "fabricate", "filth", "!"]
(c23-3 / multi-sentence
       :snt1 (c23-14 / sense-02
                     :ARG1 (c23-9 / piece
                                  :mod (c23-6 / shit)
                                  :mod (c23-15 / this))
                     :ARG2 (c23-16 / amr-unknown
                                   :ARG1-of (c23-2 / stay-01
                                                   :ARG3 (c23-11 / call-02)
                                                   :duration (c23-10 / more-than
                                                                     :op1 (c23-13 / temporal-quantity
                                                                                  :unit (c23-0 / hour)
                                                                                  :quant 1))))
                     :polarity -)
       :snt2 (c23-12 / go-out-17
                     :ARG0 (c23-1 / you)
                     :ARG1 (c23-4 / filth
                                  :ARG1-of (c23-7 / fabricate-01)
                                  :mod (c23-8 / this))
                     :mod (c23-5 / fuck
                                 :mode expressive)
                     :mode expressive))

# ::snt please view &amp; RT original tweet
# ::tokens ["please", "view", "&", "amp", ";", "RT", "original", "tweet"]
# ::lemmas ["please", "view", "&", "amp", ";", "RT", "original", "tweet"]
(c24-1 / multi-sentence
       :snt1 (c24-4 / view-01
                    :ARG0 (c24-0 / you)
                    :mode imperative
                    :polite +)
       :snt2 (c24-5 / reply-01
                    :ARG0 (c24-6 / you)
                    :ARG2 (c24-7 / tweet-01
                                 :ARG0 (c24-2 / you)
                                 :mod (c24-3 / original))
                    :mode imperative
                    :polite +))

# ::snt I was just bout to tweet that according to receive time &amp; CCTV time, Michael Brown hadn't even entered the store yet...
# ::tokens ["I", "was", "just", "bout", "to", "tweet", "that", "according", "to", "receive", "time", "&", "amp", ";", "CCTV", "time", ",", "Michael", "Brown", "had", "n't", "even", "entered", "the", "store", "yet", "..."]
# ::lemmas ["i", "be", "just", "bout", "to", "tweet", "that", "accord", "to", "receive", "time", "&", "amp", ";", "CCTV", "time", ",", "Michael", "Brown", "have", "not", "even", "enter", "the", "store", "yet", "..."]
(c25-12 / tweet-02
        :ARG0 (c25-6 / i)
        :ARG1 (c25-3 / enter-01
                     :ARG0 (c25-8 / person
                                  :name (c25-7 / name
                                               :op1 "Michael"
                                               :op2 "Brown"))
                     :ARG1 (c25-11 / store)
                     :mod (c25-2 / even)
                     :ARG1-of (c25-4 / say-01
                                     :ARG0 (c25-9 / receive-01
                                                  :ARG1 (c25-13 / and
                                                                :op1 (c25-10 / time)
                                                                :op2 (c25-5 / amp))))
                     :polarity -)
        :time (c25-1 / yet)
        :mod (c25-0 / just))

# ::snt Holy Crap. So he was still in the store when he was getting shot? Is this right?
# ::tokens ["Holy", "Crap", ".", "So", "he", "was", "still", "in", "the", "store", "when", "he", "was", "getting", "shot", "?", "Is", "this", "right", "?"]
# ::lemmas ["Holy", "Crap", ".", "so", "he", "be", "still", "in", "the", "store", "when", "he", "be", "getting", "shoot", "?", "be", "this", "right", "?"]
(c26-2 / multi-sentence
       :snt1 (c26-8 / crap-01
                    :mod (c26-0 / holy)
                    :mode expressive)
       :snt2 (c26-6 / infer-01
                    :ARG1 (c26-3 / be-located-at-91
                                 :ARG1 (c26-13 / he)
                                 :ARG2 (c26-10 / store)
                                 :mod (c26-4 / still)
                                 :time (c26-9 / get-03
                                              :ARG1 c26-13
                                              :ARG2 (c26-1 / shoot-02
                                                           :ARG1 c26-13)))
                    :polarity (c26-11 / amr-unknown))
       :snt3 (c26-7 / right-02
                    :ARG1 (c26-12 / this)
                    :polarity (c26-5 / amr-unknown)))

# ::snt those are often off in surveillance tapes
# ::tokens ["those", "are", "often", "off", "in", "surveillance", "tapes"]
# ::lemmas ["those", "be", "often", "off", "in", "surveillance", "tape"]
(c27-1 / off
       :domain (c27-4 / that)
       :frequency (c27-0 / often)
       :location (c27-2 / tape
                        :ARG0-of (c27-3 / surveil-01)))

# ::snt BINGO!!!!!
# ::tokens ["BINGO", "!", "!", "!", "!", "!"]
# ::lemmas ["BINGO", "!", "!", "!", "!", "!"]
(c28-0 / bingo
       :mode expressive)

# ::snt depart time is when the call gets closed. After the shooting all focus went there. Prob closed later
# ::tokens ["depart", "time", "is", "when", "the", "call", "gets", "closed", ".", "After", "the", "shooting", "all", "focus", "went", "there", ".", "Prob", "closed", "later"]
# ::lemmas ["depart", "time", "be", "when", "the", "call", "gets", "closed", ".", "after", "the", "shooting", "all", "focus", "go", "there", ".", "Prob", "close", "later"]
(c29-1 / multi-sentence
       :snt1 (c29-2 / be-temporally-at-91
                    :ARG1 (c29-6 / close-01
                                 :ARG1 (c29-5 / call-02))
                    :ARG2 (c29-7 / depart-01))
       :snt2 (c29-8 / go-01
                    :ARG1 (c29-0 / focus-01
                                 :mod (c29-12 / all))
                    :ARG4 (c29-11 / there)
                    :time (c29-3 / after
                                 :op1 (c29-10 / shoot-02)))
       :snt3 (c29-9 / close-01
                    :ARG1 (c29-4 / prob)
                    :time c29-3
                    :op1 c29-10))
