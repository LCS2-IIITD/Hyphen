# ::snt Ferguson Missouri, obvs.
# ::tokens ["Ferguson", "Missouri", ",", "obvs", "."]
# ::lemmas ["Ferguson", "Missouri", ",", "obvs", "."]
(c1-4 / say-01
      :ARG0 (c1-1 / i)
      :ARG1 (c1-3 / incident
                  :name (c1-2 / name
                              :op1 "Ferguson"
                              :op2 "Missouri"))
      :ARG2 (c1-0 / obvs))

# ::snt I said the exact same thing! Lady told me officer was prob. checking in. HAHAHAHAHAHAHAHAHA!
# ::tokens ["I", "said", "the", "exact", "same", "thing", "!", "Lady", "told", "me", "officer", "was", "prob", ".", "checking", "in", ".", "HAHAHAHAHAHAHAHAHA", "!"]
# ::lemmas ["i", "say", "the", "exact", "same", "thing", "!", "Lady", "tell", "i", "officer", "be", "prob", ".", "check", "in", ".", "HAHAHAHAHAHAHAHAHA", "!"]
(c2-1 / multi-sentence
      :snt1 (c2-11 / say-01
                   :ARG0 (c2-5 / i)
                   :ARG1 (c2-12 / thing
                                :ARG1-of (c2-3 / same-01
                                               :mod (c2-4 / exact))))
      :snt2 (c2-10 / tell-01
                   :ARG0 (c2-7 / person
                               :name (c2-6 / name
                                           :op1 "Lady"))
                   :ARG1 (c2-8 / check-in-02
                               :ARG0 (c2-13 / person
                                            :ARG0-of (c2-0 / have-org-role-91
                                                           :ARG2 (c2-2 / officer)))
                               :ARG1 c2-5)
                   :ARG2 (c2-9 / i))
      :snt3 (c2-14 / ha
                   :mode expressive))

# ::snt One in which you've already decided to let them get away with it. He's on paid vaca.
# ::tokens ["One", "in", "which", "you", "'ve", "already", "decided", "to", "let", "them", "get", "away", "with", "it", ".", "He", "'s", "on", "paid", "vaca", "."]
# ::lemmas ["One", "in", "which", "you", "'ve", "already", "decide", "to", "let", "they", "get", "away", "with", "it", ".", "he", "be", "on", "pay", "vaca", "."]
(c3-3 / multi-sentence
      :snt1 (c3-7 / decide-01
                  :ARG0 (c3-1 / you)
                  :ARG1 (c3-2 / let-01
                              :ARG0 c3-1
                              :ARG1 (c3-8 / get-away-08
                                          :ARG0 (c3-9 / they)
                                          :ARG1 (c3-4 / it)))
                  :time (c3-10 / already))
      :snt2 (c3-5 / vacate-01
                  :ARG0 (c3-0 / he)
                  :ARG1-of (c3-6 / pay-01)))

# ::snt I think you know the answer to that one.
# ::tokens ["I", "think", "you", "know", "the", "answer", "to", "that", "one", "."]
# ::lemmas ["i", "think", "you", "know", "the", "answer", "to", "that", "one", "."]
(c4-5 / think-01
      :ARG0 (c4-2 / i)
      :ARG1 (c4-3 / know-01
                  :ARG0 (c4-0 / you)
                  :ARG1 (c4-6 / answer-01
                              :ARG1 (c4-1 / one
                                          :mod (c4-4 / that)))))

# ::snt . this goes against everything i have seen on law and order!!!! MY FAITH IN THE WHOLE SYSTEM IS SHAKEN NOW!
# ::tokens [".", "this", "goes", "against", "everything", "i", "have", "seen", "on", "law", "and", "order", "!", "!", "!", "!", "MY", "FAITH", "IN", "THE", "WHOLE", "SYSTEM", "IS", "SHAKEN", "NOW", "!"]
# ::lemmas [".", "this", "go", "against", "everything", "i", "have", "see", "on", "law", "and", "order", "!", "!", "!", "!", "my", "faith", "in", "the", "whole", "system", "be", "SHAKEN", "now", "!"]
(c5-2 / multi-sentence
      :snt1 (c5-9 / go-06
                  :ARG0 (c5-14 / this)
                  :ARG1 (c5-15 / against
                               :op1 (c5-4 / everything
                                          :ARG1-of (c5-12 / see-01
                                                          :ARG0 (c5-7 / i)
                                                          :topic (c5-6 / and
                                                                       :op1 (c5-1 / law)
                                                                       :op2 (c5-3 / order))))))
      :snt2 (c5-11 / lock-01
                   :ARG1 (c5-13 / truth
                                :poss (c5-10 / i)
                                :location (c5-5 / system
                                                :mod (c5-0 / whole)))
                   :time (c5-8 / now)))

# ::snt : New Hashtag
# ::tokens [":", "New", "Hashtag"]
# ::lemmas [":", "New", "Hashtag"]
(c6-0 / hashtag
      :ARG1-of (c6-1 / new-01))

# ::snt My column: FERGUSON: OBAMA KICKS NIXON IN THE ASS
# ::tokens ["My", "column", ":", "FERGUSON", ":", "OBAMA", "KICKS", "NIXON", "IN", "THE", "ASS"]
# ::lemmas ["my", "column", ":", "FERGUSON", ":", "OBAMA", "KICKS", "NIXON", "in", "the", "ASS"]
(c7-9 / and
      :op1 (c7-6 / column
                 :poss (c7-1 / i)
                 :mod (c7-4 / person
                            :name (c7-2 / name
                                        :op1 "Ferguson")))
      :op2 (c7-7 / kick-01
                 :ARG0 (c7-8 / person
                             :name (c7-3 / name
                                         :op1 "Obama"))
                 :ARG1 (c7-5 / nickel)
                 :location (c7-0 / ass)))

# ::snt :Brilliant! Lets arrest the entire police force for aiding and abetting.
# ::tokens [":", "Brilliant", "!", "Lets", "arrest", "the", "entire", "police", "force", "for", "aiding", "and", "abetting", "."]
# ::lemmas [":", "brilliant", "!", "let", "arrest", "the", "entire", "police", "force", "for", "aid", "and", "abet", "."]
(c8-2 / multi-sentence
      :snt1 (c8-3 / brilliant-01)
      :snt2 (c8-9 / arrest-01
                  :ARG0 (c8-0 / we)
                  :ARG1 (c8-1 / force-01
                              :ARG0 (c8-7 / police)
                              :mod (c8-4 / entire))
                  :ARG2 (c8-5 / and
                              :op1 (c8-6 / aid-01
                                         :ARG0 c8-1)
                              :op2 (c8-8 / abet-01
                                         :ARG0 c8-1))
                  :mode imperative))

# ::snt Well maybe a world where you know where he lives &amp;works. Same world where ppl RIOT over a man who was shot after a robbery
# ::tokens ["Well", "maybe", "a", "world", "where", "you", "know", "where", "he", "lives", "&", "amp;works", ".", "Same", "world", "where", "ppl", "RIOT", "over", "a", "man", "who", "was", "shot", "after", "a", "robbery"]
# ::lemmas ["well", "maybe", "a", "world", "where", "you", "know", "where", "he", "live", "&", "amp;work", ".", "same", "world", "where", "ppl", "RIOT", "over", "a", "man", "who", "be", "shoot", "after", "a", "robbery"]
(c9-4 / multi-sentence
      :snt1 (c9-11 / possible-01
                   :ARG1 (c9-1 / world
                               :location-of (c9-15 / know-01
                                                   :ARG0 (c9-2 / you)
                                                   :ARG1 (c9-17 / and
                                                                :op1 (c9-3 / live-01
                                                                           :ARG0 (c9-0 / he))
                                                                :op2 (c9-8 / work-01
                                                                           :ARG0 c9-0))))
                   :mod (c9-5 / well))
      :snt2 (c9-14 / same-01
                   :ARG1 (c9-9 / world
                               :location-of (c9-6 / shoot-02
                                                  :ARG0 (c9-16 / person
                                                               :name (c9-10 / name
                                                                            :op1 "Pat"
                                                                            :op2 "Riot"))
                                                  :ARG1 (c9-12 / man
                                                               :time (c9-7 / after
                                                                           :op1 (c9-13 / rob-01
                                                                                       :ARG0 c9-16)))
                                                  :ARG1 c9-12))))

# ::snt In a world where you have to convince everyone where the community is comprised of crazed animals and unsafe.
# ::tokens ["In", "a", "world", "where", "you", "have", "to", "convince", "everyone", "where", "the", "community", "is", "comprised", "of", "crazed", "animals", "and", "unsafe", "."]
# ::lemmas ["in", "a", "world", "where", "you", "have", "to", "convince", "everyone", "where", "the", "community", "be", "comprise", "of", "craze", "animal", "and", "unsafe", "."]
(c10-3 / be-located-at-91
       :ARG2 (c10-0 / world
                    :location-of (c10-4 / obligate-01
                                        :ARG1 (c10-1 / you)
                                        :ARG2 (c10-8 / convince-01
                                                     :ARG0 c10-1
                                                     :ARG1 (c10-5 / everyone)
                                                     :ARG2 (c10-2 / location
                                                                  :location-of (c10-7 / comprise-01
                                                                                      :ARG1 (c10-9 / community)
                                                                                      :ARG2 (c10-11 / and
                                                                                                    :op1 (c10-6 / animal
                                                                                                                :ARG1-of (c10-12 / crazy-03))
                                                                                                    :op2 (c10-10 / safe-01
                                                                                                                 :polarity -))))))))

# ::snt In what world do you let a cop who killed someone leave town?
# ::tokens ["In", "what", "world", "do", "you", "let", "a", "cop", "who", "killed", "someone", "leave", "town", "?"]
# ::lemmas ["in", "what", "world", "do", "you", "let", "a", "cop", "who", "kill", "someone", "leave", "town", "?"]
(c11-2 / let-01
       :ARG0 (c11-0 / you)
       :ARG1 (c11-4 / leave-11
                    :ARG0 (c11-3 / cop
                                 :ARG0-of (c11-7 / kill-01
                                                 :ARG1 (c11-5 / someone)))
                    :ARG1 (c11-6 / town))
       :location (c11-8 / amr-unknown
                        :mod (c11-1 / world)))

# ::snt She has a valid concern. You offer a grossly exaggerated red herring in order too...?
# ::tokens ["She", "has", "a", "valid", "concern", ".", "You", "offer", "a", "grossly", "exaggerated", "red", "herring", "in", "order", "too", "...", "?"]
# ::lemmas ["she", "have", "a", "valid", "concern", ".", "you", "offer", "a", "grossly", "exaggerated", "red", "herring", "in", "order", "too", "...", "?"]
(c12-3 / multi-sentence
       :snt1 (c12-8 / concern-01
                    :ARG1 (c12-10 / she)
                    :ARG1-of (c12-6 / valid-02))
       :snt2 (c12-4 / offer-01
                    :ARG0 (c12-1 / you)
                    :ARG1 (c12-0 / herring
                                 :ARG1-of (c12-7 / red-02)
                                 :ARG1-of (c12-5 / exaggerate-01
                                                 :ARG1-of (c12-9 / gross-06)))
                    :polarity (c12-12 / amr-unknown)
                    :purpose (c12-2 / order-03
                                    :ARG0 c12-1
                                    :ARG1 c12-0)
                    :mod (c12-11 / too)))

# ::snt same one where ppl r Rioting and that are making death threats to him
# ::tokens ["same", "one", "where", "ppl", "r", "Rioting", "and", "that", "are", "making", "death", "threats", "to", "him"]
# ::lemmas ["same", "one", "where", "ppl", "r", "Rioting", "and", "that", "be", "make", "death", "threat", "to", "he"]
(c13-0 / one
       :ARG1-of (c13-4 / same-01)
       :location-of (c13-6 / and
                           :op1 (c13-2 / riot-01
                                       :ARG0 (c13-1 / person))
                           :op2 (c13-5 / threaten-01
                                       :ARG0 c13-1
                                       :ARG1 (c13-3 / die-01)
                                       :ARG2 c13-1)))

# ::snt in Egypt, they killed 's and still free
# ::tokens ["in", "Egypt", ",", "they", "killed", "'s", "and", "still", "free"]
# ::lemmas ["in", "Egypt", ",", "they", "kill", "'s", "and", "still", "free"]
(c14-7 / and
       :op1 (c14-1 / kill-01
                   :ARG0 (c14-6 / they)
                   :ARG1 (c14-3 / person
                                :ARG1-of (c14-0 / free-04
                                                :mod (c14-5 / still)))
                   :location (c14-4 / country
                                    :name (c14-2 / name
                                                 :op1 "Egypt")))
       :op2 c14-0)

# ::snt Vacationing on the Bundy Ranch, Id imagine.
# ::tokens ["Vacationing", "on", "the", "Bundy", "Ranch", ",", "I", "d", "imagine", "."]
# ::lemmas ["vacation", "on", "the", "Bundy", "Ranch", ",", "I", "d", "imagine", "."]
(c15-0 / imagine-01
       :ARG0 (c15-4 / i)
       :ARG1 (c15-2 / vacation-01
                    :ARG0 c15-4
                    :ARG1 (c15-3 / ranch
                                 :name (c15-1 / name
                                              :op1 "Bundy"
                                              :op2 "Ranch"))))

# ::snt A. In a white privilege world
# ::tokens ["A.", "In", "a", "white", "privilege", "world"]
# ::lemmas ["A.", "in", "a", "white", "privilege", "world"]
(c16-1 / be-located-at-91
       :ARG2 (c16-0 / world
                    :ARG2-of (c16-3 / privilege-01
                                    :ARG1 (c16-4 / person
                                                 :ARG1-of (c16-2 / white-02))))
       :li "A")

# ::snt . In a world where white cops who murder shoplifting kids are free of responsibility for their actions.
# ::tokens [".", "In", "a", "world", "where", "white", "cops", "who", "murder", "shoplifting", "kids", "are", "free", "of", "responsibility", "for", "their", "actions", "."]
# ::lemmas [".", "in", "a", "world", "where", "white", "cop", "who", "murder", "shoplifting", "kid", "be", "free", "of", "responsibility", "for", "their", "action", "."]
(c17-3 / be-located-at-91
       :ARG2 (c17-0 / world
                    :location-of (c17-1 / free-04
                                        :ARG1 (c17-6 / cop
                                                     :ARG1-of (c17-4 / white-02)
                                                     :ARG0-of (c17-2 / murder-01
                                                                     :ARG1 (c17-7 / shoplift-01
                                                                                  :ARG0 c17-6
                                                                                  :ARG1 (c17-8 / kid))))
                                        :ARG2 (c17-5 / responsible-01
                                                     :ARG0 c17-6
                                                     :ARG1 (c17-9 / act-02
                                                                  :ARG0 c17-6)))))

# ::snt In the U.S.A. world.
# ::tokens ["In", "the", "U.S.A.", "world", "."]
# ::lemmas ["in", "the", "U.S.A.", "world", "."]
(c18-3 / be-located-at-91
       :ARG2 (c18-1 / world
                    :poss (c18-2 / country
                                 :name (c18-0 / name
                                              :op1 "U.S.A."))))

# ::snt in a valid world like ours. Where criminals are victims...
# ::tokens ["in", "a", "valid", "world", "like", "ours", ".", "Where", "criminals", "are", "victims", "..."]
# ::lemmas ["in", "a", "valid", "world", "like", "ours", ".", "where", "criminal", "be", "victim", "..."]
(c19-1 / multi-sentence
       :snt1 (c19-2 / be-located-at-91
                    :ARG2 (c19-0 / world
                                 :ARG1-of (c19-6 / valid-02)
                                 :ARG1-of (c19-8 / resemble-01
                                                 :ARG2 (c19-5 / world
                                                              :poss (c19-3 / we)))))
       :snt2 (c19-4 / victim
                    :domain (c19-7 / person
                                   :ARG2-of (c19-9 / criminal-03))))

# ::snt When you place him in the Whiteness Protection Program.
# ::tokens ["When", "you", "place", "him", "in", "the", "Whiteness", "Protection", "Program", "."]
# ::lemmas ["when", "you", "place", "he", "in", "the", "Whiteness", "Protection", "Program", "."]
(c20-2 / be-temporally-at-91
       :ARG2 (c20-4 / place-01
                    :ARG0 (c20-1 / you)
                    :ARG1 (c20-0 / he)
                    :ARG2 (c20-5 / program
                                 :name (c20-3 / name
                                              :op1 "Whiteness"
                                              :op2 "Protection"
                                              :op3 "Program"))))

# ::snt When is the police chief being relieved? He allowed the alleged cop who killed leave town!
# ::tokens ["When", "is", "the", "police", "chief", "being", "relieved", "?", "He", "allowed", "the", "alleged", "cop", "who", "killed", "leave", "town", "!"]
# ::lemmas ["when", "be", "the", "police", "chief", "be", "relieve", "?", "he", "allow", "the", "alleged", "cop", "who", "kill", "leave", "town", "!"]
(c21-2 / multi-sentence
       :snt1 (c21-7 / relieve-01
                    :ARG1 (c21-6 / person
                                 :ARG0-of (c21-0 / have-org-role-91
                                                 :ARG1 (c21-12 / police)
                                                 :ARG2 (c21-8 / chief)))
                    :time (c21-13 / amr-unknown))
       :snt2 (c21-4 / allow-01
                    :ARG0 (c21-1 / he)
                    :ARG1 (c21-3 / leave-11
                                 :ARG0 (c21-9 / cop
                                              :ARG1-of (c21-5 / allege-01)
                                              :ARG0-of (c21-11 / kill-01))
                                 :ARG1 (c21-10 / town))))
