# ::snt great job bratha French keep us in the loop
# ::tokens ["great", "job", "bratha", "French", "keep", "us", "in", "the", "loop"]
# ::lemmas ["great", "job", "bratha", "French", "keep", "we", "in", "the", "loop"]
(c1-7 / say-01
      :ARG0 (c1-3 / i)
      :ARG1 (c1-9 / and
                  :op1 (c1-0 / job
                             :mod (c1-6 / great))
                  :op2 (c1-8 / keep-02
                             :ARG0 (c1-5 / person
                                         :name (c1-4 / name
                                                     :op1 "Barrath"
                                                     :op2 "French"))
                             :ARG1 (c1-2 / loop-01
                                         :ARG1 (c1-1 / we))))
      :ARG2 c1-5)

# ::snt well, THAT'S clearly wrong. : (
# ::tokens ["well", ",", "THAT", "'S", "clearly", "wrong", ".", ":", "("]
# ::lemmas ["well", ",", "that", "be", "clearly", "wrong", ".", ":", "("]
(c2-0 / wrong-04
      :ARG1 (c2-2 / that)
      :ARG1-of (c2-1 / clear-06)
      :mod (c2-3 / well))

# ::snt Hugs won't bring back . How about a bunch community empowerment via police officers from the neighborhood?
# ::tokens ["Hugs", "wo", "n't", "bring", "back", ".", "How", "about", "a", "bunch", "community", "empowerment", "via", "police", "officers", "from", "the", "neighborhood", "?"]
# ::lemmas ["hug", "will", "not", "bring", "back", ".", "how", "about", "a", "bunch", "community", "empowerment", "via", "police", "officer", "from", "the", "neighborhood", "?"]
(c3-2 / multi-sentence
      :snt1 (c3-3 / bring-01
                  :ARG0 (c3-0 / hug-01)
                  :ARG1 (c3-8 / back)
                  :polarity -)
      :snt2 (c3-12 / amr-unknown
                   :topic (c3-5 / empower-01
                                :ARG0 (c3-7 / person
                                            :ARG0-of (c3-1 / have-org-role-91
                                                           :ARG1 (c3-11 / police)
                                                           :ARG2 (c3-4 / officer))
                                            :source (c3-6 / neighborhood))
                                :ARG1 (c3-9 / community)
                                :quant (c3-10 / bunch))))

# ::snt b careful, may get ebola. judas hug Jesus before he was hung!
# ::tokens ["b", "careful", ",", "may", "get", "ebola", ".", "judas", "hug", "Jesus", "before", "he", "was", "hung", "!"]
# ::lemmas ["b", "careful", ",", "may", "get", "ebola", ".", "judas", "hug", "Jesus", "before", "he", "be", "hang", "!"]
(c4-1 / multi-sentence
      :snt1 (c4-7 / possible-01
                  :ARG1 (c4-9 / get-01
                              :ARG1 (c4-4 / ebola))
                  :mod (c4-8 / careful))
      :snt2 (c4-0 / hug-01
                  :ARG0 (c4-10 / person
                               :name (c4-5 / name
                                           :op1 " judas"))
                  :ARG1 (c4-2 / person
                              :name (c4-6 / name
                                          :op1 "Jesus"))
                  :time (c4-3 / before
                              :op1 (c4-11 / hang-01
                                          :ARG1 c4-2))))

# ::snt Why precisely should people be smiling right now?
# ::tokens ["Why", "precisely", "should", "people", "be", "smiling", "right", "now", "?"]
# ::lemmas ["why", "precisely", "should", "people", "be", "smile", "right", "now", "?"]
(c5-3 / recommend-01
      :ARG1 (c5-5 / smile-01
                  :ARG0 (c5-2 / person)
                  :time (c5-1 / now
                              :mod (c5-0 / right)))
      :mod (c5-6 / precise)
      :ARG1-of (c5-4 / cause-01
                     :ARG0 (c5-7 / amr-unknown)))

# ::snt yeah...
# ::tokens ["yeah", "..."]
# ::lemmas ["yeah", "..."]
(c6-0 / yeah)

# ::snt I hope so
# ::tokens ["I", "hope", "so"]
# ::lemmas ["i", "hope", "so"]
(c7-0 / hope-01
      :ARG0 (c7-2 / i)
      :ARG1 (c7-1 / so))

# ::snt Captain Johnson: "You're going to see a bunch of smiles, a bunch of hugs, and a bunch of conversations" tonight in .
# ::tokens ["Captain", "Johnson", ":", "\"", "You", "'re", "going", "to", "see", "a", "bunch", "of", "smiles", ",", "a", "bunch", "of", "hugs", ",", "and", "a", "bunch", "of", "conversations", "\"", "tonight", "in", "."]
# ::lemmas ["Captain", "Johnson", ":", "\"", "you", "be", "go", "to", "see", "a", "bunch", "of", "smile", ",", "a", "bunch", "of", "hug", ",", "and", "a", "bunch", "of", "conversation", "\"", "tonight", "in", "."]
(c8-11 / say-01
       :ARG0 (c8-7 / person
                   :name (c8-5 / name
                               :op1 "Captain"
                               :op2 "Johnson"))
       :ARG1 (c8-4 / see-01
                   :ARG0 (c8-1 / you)
                   :ARG1 (c8-14 / and
                                :op1 (c8-2 / smile-01
                                           :quant (c8-3 / bunch))
                                :op2 (c8-0 / hug-01
                                           :quant (c8-9 / bunch))
                                :op3 (c8-10 / converse-01
                                            :quant (c8-12 / bunch)))
                   :time (c8-8 / date-entity
                               :dayperiod (c8-6 / night)
                               :mod (c8-13 / today))))

# ::snt NCAA
# ::tokens ["NCAA"]
# ::lemmas ["NCAA"]
(c9-0 / organization
      :name (c9-1 / name
                  :op1 "NCAA"))

# ::snt How About?
# ::tokens ["How", "About", "?"]
# ::lemmas ["how", "about", "?"]
(c10-0 / say-01
       :ARG1 (c10-1 / amr-unknown))

# ::snt he should guard his enthusiasm. A new wave of anger is building over these press conferences.
# ::tokens ["he", "should", "guard", "his", "enthusiasm", ".", "A", "new", "wave", "of", "anger", "is", "building", "over", "these", "press", "conferences", "."]
# ::lemmas ["he", "should", "guard", "his", "enthusiasm", ".", "a", "new", "wave", "of", "anger", "be", "build", "over", "these", "press", "conference", "."]
(c11-2 / multi-sentence
       :snt1 (c11-7 / recommend-01
                    :ARG1 (c11-9 / guard-01
                                 :ARG0 (c11-0 / he)
                                 :ARG1 (c11-4 / enthusiasm
                                              :poss c11-0)))
       :snt2 (c11-3 / build-02
                    :ARG1 (c11-1 / wave-04
                                 :ARG1 (c11-11 / anger-01)
                                 :ARG1-of (c11-5 / new-01))
                    :location (c11-8 / conference
                                     :mod (c11-6 / press)
                                     :mod (c11-10 / this))))

# ::snt Are things really changing? Is police occupation ending? Are they apologizing?
# ::tokens ["Are", "things", "really", "changing", "?", "Is", "police", "occupation", "ending", "?", "Are", "they", "apologizing", "?"]
# ::lemmas ["be", "thing", "really", "change", "?", "be", "police", "occupation", "end", "?", "be", "they", "apologize", "?"]
(c12-0 / multi-sentence
       :snt1 (c12-7 / change-01
                    :polarity (c12-11 / amr-unknown)
                    :ARG1 (c12-10 / thing)
                    :ARG1-of (c12-6 / real-04))
       :snt2 (c12-2 / end-01
                    :ARG1 (c12-1 / occupy-01
                                 :ARG0 (c12-5 / police))
                    :polarity (c12-3 / amr-unknown))
       :snt3 (c12-4 / apologize-01
                    :ARG0 (c12-8 / they)
                    :polarity (c12-9 / amr-unknown)))

# ::snt stretching out my asshole for all this sunshine
# ::tokens ["stretching", "out", "my", "asshole", "for", "all", "this", "sunshine"]
# ::lemmas ["stretch", "out", "my", "asshole", "for", "all", "this", "sunshine"]
(c13-4 / stick-01
       :ARG1 (c13-6 / asshole
                    :part-of (c13-3 / i))
       :ARG2 (c13-0 / out)
       :purpose (c13-1 / sunshine
                       :mod (c13-5 / this)
                       :mod (c13-2 / all)))

# ::snt WHY
# ::tokens ["WHY"]
# ::lemmas ["why"]
(c14-0 / cause-01
       :ARG0 (c14-1 / amr-unknown))

# ::snt waste of fuckun time
# ::tokens ["waste", "of", "fuckun", "time"]
# ::lemmas ["waste", "of", "fuckun", "time"]
(c15-0 / waste-01
       :ARG1 (c15-2 / time
                    :mod (c15-1 / fuck-01)))

# ::snt date on cam dont match up
# ::tokens ["date", "on", "cam", "do", "nt", "match", "up"]
# ::lemmas ["date", "on", "cam", "do", "not", "match", "up"]
(c16-2 / match-up-02
       :ARG1 (c16-1 / date-entity
                    :medium (c16-0 / camera))
       :polarity -)
