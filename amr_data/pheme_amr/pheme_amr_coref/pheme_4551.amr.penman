# ::snt Terrorist or murderer? Either way a despicable act which cannot be forgiven
# ::tokens ["Terrorist", "or", "murderer", "?", "Either", "way", "a", "despicable", "act", "which", "can", "not", "be", "forgiven"]
# ::lemmas ["terrorist", "or", "murderer", "?", "either", "way", "a", "despicable", "act", "which", "can", "not", "be", "forgive"]
(c1-2 / multi-sentence
      :snt1 (c1-10 / amr-choice
                   :op1 (c1-8 / terrorist)
                   :op2 (c1-5 / person
                              :ARG0-of (c1-6 / murder-01)))
      :snt2 (c1-4 / act-02
                  :mod (c1-7 / despicable)
                  :ARG1-of (c1-1 / forgive-01
                                 :ARG1-of (c1-9 / possible-01
                                                :polarity -))
                  :mod (c1-0 / way
                             :mod (c1-3 / either))))

# ::snt Oh God no! Not Pilot suicide. What a terrible nightmare for the families.
# ::tokens ["Oh", "God", "no", "!", "Not", "Pilot", "suicide", ".", "What", "a", "terrible", "nightmare", "for", "the", "families", "."]
# ::lemmas ["oh", "God", "no", "!", "not", "pilot", "suicide", ".", "what", "a", "terrible", "nightmare", "for", "the", "family", "."]
(c2-2 / multi-sentence
      :snt1 (c2-0 / have-polarity-91
                  :mod (c2-3 / oh
                             :mod (c2-7 / god)
                             :mode expressive)
                  :ARG2 -)
      :snt2 (c2-8 / suicide
                  :mod (c2-6 / pilot-01)
                  :polarity -)
      :snt3 (c2-5 / nightmare
                  :ARG1-of (c2-9 / terrible-01
                                 :degree (c2-4 / so))
                  :beneficiary (c2-1 / family)))

# ::snt ://
# ::tokens [":", "//"]
# ::lemmas [":", "//"]
(c3-0 / emoticon
      :value "://")

# ::snt : Update - flight co-pilot is Andreas Lubitz and there are strong signs he crashed on purpose
# ::tokens [":", "Update", "-", "flight", "co", "-", "pilot", "is", "Andreas", "Lubitz", "and", "there", "are", "strong", "signs", "he", "crashed", "on", "purpose"]
# ::lemmas [":", "update", "-", "flight", "co", "-", "pilot", "be", "Andreas", "Lubitz", "and", "there", "be", "strong", "sign", "he", "crash", "on", "purpose"]
(c4-2 / update-02
      :ARG2 (c4-9 / and
                  :op1 (c4-5 / person
                             :name (c4-4 / name
                                         :op1 "Andreas"
                                         :op2 "Lubitz")
                             :ARG0-of (c4-8 / pilot-01
                                            :ARG1 (c4-1 / fly-01))
                             :domain c4-5))
      :op2 (c4-7 / signal-07
                 :ARG1 (c4-6 / crash-01
                             :ARG0 c4-5
                             :ARG1-of (c4-0 / have-purpose-91))
                 :ARG1-of (c4-3 / strong-02)))

# ::snt OMG!
# ::tokens ["OMG", "!"]
# ::lemmas ["OMG", "!"]
(c5-0 / oh-my-god
      :mode expressive)

# ::snt your theory is true about pilots!
# ::tokens ["your", "theory", "is", "true", "about", "pilots", "!"]
# ::lemmas ["your", "theory", "be", "true", "about", "pilot", "!"]
(c6-3 / true-01
      :ARG1 (c6-2 / theory
                  :poss (c6-0 / you))
      :ARG2 (c6-1 / person
                  :ARG0-of (c6-4 / pilot-01)))

# ::snt true
# ::tokens ["true"]
# ::lemmas ["true"]
(c7-0 / true-01)

# ::snt what the hell why would he do that
# ::tokens ["what", "the", "hell", "why", "would", "he", "do", "that"]
# ::lemmas ["what", "the", "hell", "why", "would", "he", "do", "that"]
(c8-2 / do-02
      :ARG0 (c8-0 / he)
      :ARG1 (c8-4 / that)
      :ARG1-of (c8-3 / cause-01
                     :ARG0 (c8-5 / amr-unknown)
                     :mod (c8-1 / hell
                                :mode expressive)))

# ::snt What the fuck was he thinking ? Why ? Why ? Why ? Why take the lives of so many innocent people ?
# ::tokens ["What", "the", "fuck", "was", "he", "thinking", "?", "Why", "?", "Why", "?", "Why", "?", "Why", "take", "the", "lives", "of", "so", "many", "innocent", "people", "?"]
# ::lemmas ["what", "the", "fuck", "be", "he", "think", "?", "why", "?", "why", "?", "why", "?", "why", "take", "the", "life", "of", "so", "many", "innocent", "people", "?"]
(c9-2 / multi-sentence
      :snt1 (c9-15 / think-01
                   :ARG0 (c9-0 / he)
                   :ARG1 (c9-17 / amr-unknown)
                   :mod (c9-1 / fuck
                              :mode expressive))
      :snt2 (c9-10 / cause-01
                   :ARG0 (c9-5 / amr-unknown))
      :snt3 (c9-9 / cause-01
                  :ARG0 (c9-7 / amr-unknown))
      :snt4 (c9-13 / cause-01
                   :ARG0 (c9-14 / amr-unknown))
      :snt5 (c9-12 / take-01
                   :ARG1 (c9-3 / life
                               :poss (c9-8 / person
                                           :ARG1-of (c9-6 / innocent-01)
                                           :ARG1-of (c9-4 / have-quant-91
                                                          :ARG2 (c9-11 / many)
                                                          :ARG3 (c9-16 / so))))))

# ::snt Anyone can become suicidal, but nothings worse than a suicidal airline pilot. If that's what's happened here.
# ::tokens ["Anyone", "can", "become", "suicidal", ",", "but", "nothings", "worse", "than", "a", "suicidal", "airline", "pilot", ".", "If", "that", "'s", "what", "'s", "happened", "here", "."]
# ::lemmas ["anyone", "can", "become", "suicidal", ",", "but", "nothing", "bad", "than", "a", "suicidal", "airline", "pilot", ".", "if", "that", "be", "what", "be", "happen", "here", "."]
(c10-2 / multi-sentence
       :snt1 (c10-12 / contrast-01
                     :ARG1 (c10-10 / possible-01
                                   :ARG1 (c10-4 / become-01
                                                :ARG1 (c10-17 / anyone)
                                                :ARG2 (c10-14 / suicide)))
                     :ARG2 (c10-0 / have-degree-91
                                  :ARG1 (c10-8 / nothing)
                                  :ARG2 (c10-13 / bad-07
                                                :ARG1 c10-8)
                                  :ARG3 (c10-11 / more)
                                  :ARG4 (c10-16 / person
                                                :ARG0-of (c10-3 / pilot-01
                                                                :ARG1 (c10-7 / airline))
                                                :mod (c10-5 / suicide))))
       :snt2 (c10-1 / have-condition-91
                    :ARG2 (c10-6 / event
                                 :location (c10-9 / here)
                                 :domain (c10-15 / that))))

# ::snt omg this is so crazy.
# ::tokens ["omg", "this", "is", "so", "crazy", "."]
# ::lemmas ["omg", "this", "be", "so", "crazy", "."]
(c11-1 / crazy-03
       :ARG1 (c11-0 / this)
       :degree (c11-2 / so)
       :mod (c11-3 / oh-my-god
                   :mode expressive))

# ::snt Yep!!! Been saying it for a while now. Hmmm. Wonder how many others have done the same thing!!
# ::tokens ["Yep", "!", "!", "!", "Been", "saying", "it", "for", "a", "while", "now", ".", "Hmmm", ".", "Wonder", "how", "many", "others", "have", "done", "the", "same", "thing", "!", "!"]
# ::lemmas ["yep", "!", "!", "!", "be", "say", "it", "for", "a", "while", "now", ".", "hmmm", ".", "wonder", "how", "many", "other", "have", "do", "the", "same", "thing", "!", "!"]
(c12-4 / multi-sentence
       :snt1 (c12-1 / yep
                    :mode expressive)
       :snt2 (c12-13 / say-01
                     :ARG0 (c12-7 / i)
                     :ARG1 (c12-12 / it)
                     :duration (c12-2 / while)
                     :time (c12-9 / now))
       :snt3 (c12-0 / hmm
                    :mode expressive)
       :snt4 (c12-8 / wonder-01
                    :ARG0 (c12-3 / i)
                    :ARG1 (c12-10 / number
                                  :quant-of (c12-5 / other
                                                   :ARG0-of (c12-11 / do-02
                                                                    :ARG1 (c12-14 / thing
                                                                                  :ARG1-of (c12-6 / same-01)))))
                    :mode expressive))

# ::snt it's mass murder before suicide
# ::tokens ["it", "'s", "mass", "murder", "before", "suicide"]
# ::lemmas ["it", "be", "mass", "murder", "before", "suicide"]
(c13-2 / murder-01
       :mod (c13-1 / mass)
       :time (c13-3 / before
                    :op1 (c13-0 / suicide)))

# ::snt Once again Scoops this time with name of copilot
# ::tokens ["Once", "again", "Scoops", "this", "time", "with", "name", "of", "copilot"]
# ::lemmas ["once", "again", "scoop", "this", "time", "with", "name", "of", "copilot"]
(c14-3 / person
       :name (c14-1 / name
                    :op1 "Scoops")
       :mod (c14-5 / again
                   :mod (c14-0 / once))
       :ARG2-of (c14-2 / name-01
                       :ARG1 (c14-4 / copilot)))

# ::snt If true, the locked cabin policy to stop hijack/terror attempts has become one to permit terror. awaited
# ::tokens ["If", "true", ",", "the", "locked", "cabin", "policy", "to", "stop", "hijack", "/", "terror", "attempts", "has", "become", "one", "to", "permit", "terror", ".", "awaited"]
# ::lemmas ["if", "true", ",", "the", "locked", "cabin", "policy", "to", "stop", "hijack", "/", "terror", "attempt", "have", "become", "one", "to", "permit", "terror", ".", "await"]
(c15-2 / become-01
       :ARG1 (c15-5 / policy-01
                    :ARG1 (c15-8 / stop-01
                                 :ARG1 (c15-11 / attempt-01
                                               :ARG1 (c15-3 / and
                                                            :op1 (c15-0 / hijack-01)
                                                            :op2 (c15-9 / terror)))
                                 :location (c15-6 / cabin)
                                 :ARG1-of (c15-1 / lock-01)))
       :ARG2 (c15-10 / permit-01
                     :ARG0 c15-5
                     :ARG1 (c15-7 / terror))
       :condition (c15-4 / true-01
                         :ARG1 c15-5))

# ::snt : Crashed flight co-pilot is Andreas Lubitz and there are strong signs he crashed on purposeTerrorism
# ::tokens [":", "Crashed", "flight", "co", "-", "pilot", "is", "Andreas", "Lubitz", "and", "there", "are", "strong", "signs", "he", "crashed", "on", "purposeTerrorism"]
# ::lemmas [":", "crash", "flight", "co", "-", "pilot", "be", "Andreas", "Lubitz", "and", "there", "be", "strong", "sign", "he", "crash", "on", "purposeterrorism"]
(c16-10 / and
        :op1 (c16-5 / person
                    :name (c16-4 / name
                                 :op1 "Andreas"
                                 :op2 "Lubitz")
                    :ARG0-of (c16-9 / pilot-01
                                    :ARG1 (c16-0 / fly-01
                                                 :ARG1-of (c16-8 / smash-01)))
                    :domain c16-5
                    :ARG0-of (c16-7 / crash-01))
        :op2 (c16-3 / signal-07
                    :ARG1 (c16-6 / crash-01
                                 :ARG1 c16-5
                                 :purpose (c16-2 / purpose))
                    :ARG1-of (c16-1 / strong-02)))

# ::snt as if flying isn't stressful enough already Now we have cowardly guys killing people from the cockpit Great
# ::tokens ["as", "if", "flying", "is", "n't", "stressful", "enough", "already", "Now", "we", "have", "cowardly", "guys", "killing", "people", "from", "the", "cockpit", "Great"]
# ::lemmas ["as", "if", "flying", "be", "not", "stressful", "enough", "already", "now", "we", "have", "cowardly", "guy", "kill", "people", "from", "the", "cockpit", "great"]
(c17-3 / multi-sentence
       :snt1 (c17-0 / have-conj-as-if
                    :ARG0 (c17-2 / fly-01)
                    :time (c17-12 / already)
                    :ARG2-of (c17-14 / have-degree-91
                                     :ARG1 c17-2
                                     :ARG3 (c17-4 / enough))
                    :polarity -)
       :snt2 (c17-6 / have-03
                    :ARG0 (c17-1 / we)
                    :ARG1 (c17-10 / guy
                                  :mod (c17-9 / cowardly)
                                  :ARG0-of (c17-13 / kill-01
                                                   :ARG1 (c17-7 / person)
                                                   :location (c17-8 / cockpit)))
                    :time (c17-5 / now)
                    :mod (c17-11 / great)))

# ::snt They shouldn't release him name - he clearly wanted the notoriety
# ::tokens ["They", "should", "n't", "release", "him", "name", "-", "he", "clearly", "wanted", "the", "notoriety"]
# ::lemmas ["they", "should", "not", "release", "he", "name", "-", "he", "clearly", "want", "the", "notoriety"]
(c18-6 / cause-01
       :ARG0 (c18-1 / want-01
                    :ARG0 (c18-0 / he)
                    :ARG1 (c18-2 / fame-01
                                 :ARG1 c18-0)
                    :ARG1-of (c18-5 / clear-06))
       :ARG1 (c18-7 / recommend-01
                    :ARG1 (c18-3 / release-01
                                 :ARG0 (c18-8 / they)
                                 :ARG1 (c18-4 / name
                                              :poss c18-0))
                    :polarity -))

# ::snt dude!
# ::tokens ["dude", "!"]
# ::lemmas ["dude", "!"]
(c19-0 / dude)

# ::snt what the fuck
# ::tokens ["what", "the", "fuck"]
# ::lemmas ["what", "the", "fuck"]
(c20-1 / amr-unknown
       :mod (c20-0 / fuck))

# ::snt : Prosecutor confirms crashed flight co-pilot is Andreas Lubitz &amp; there are strong signs he crashed on purpose
# ::tokens [":", "Prosecutor", "confirms", "crashed", "flight", "co", "-", "pilot", "is", "Andreas", "Lubitz", "&", "amp", ";", "there", "are", "strong", "signs", "he", "crashed", "on", "purpose"]
# ::lemmas [":", "prosecutor", "confirm", "crash", "flight", "co", "-", "pilot", "be", "Andreas", "Lubitz", "&", "amp", ";", "there", "be", "strong", "sign", "he", "crash", "on", "purpose"]
(c21-2 / multi-sentence
       :snt1 (c21-9 / confirm-01
                    :ARG0 (c21-7 / person
                                 :ARG0-of (c21-13 / prosecute-01))
                    :ARG1 (c21-8 / crash-01
                                 :ARG1 (c21-3 / person
                                              :name (c21-6 / name
                                                           :op1 "Andreas"
                                                           :op2 "Lubitz"
                                                           :op3 "&"
                                                           :op4 "amp")
                                              :ARG0-of (c21-12 / pilot-01
                                                               :ARG1 (c21-1 / fly-01)))))
       :snt2 (c21-11 / signal-07
                     :ARG1 (c21-10 / crash-01
                                   :ARG1 (c21-0 / he)
                                   :purpose (c21-4 / purpose))
                     :ARG1-of (c21-5 / strong-02)))
