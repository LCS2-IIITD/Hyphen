# ::snt police too busy doing their work!! Don't bother them!
# ::tokens ["police", "too", "busy", "doing", "their", "work", "!", "!", "Do", "n't", "bother", "them", "!"]
# ::lemmas ["police", "too", "busy", "do", "their", "work", "!", "!", "do", "not", "bother", "they", "!"]
(c1-3 / multi-sentence
      :snt1 (c1-4 / busy-01
                  :ARG1 (c1-5 / police)
                  :ARG2 (c1-1 / work-01
                              :ARG0 c1-5)
                  :ARG2-of (c1-0 / have-degree-91
                                 :ARG1 c1-5
                                 :ARG3 (c1-8 / too)))
      :snt2 (c1-6 / bother-01
                  :ARG0 (c1-2 / you)
                  :ARG1 (c1-7 / they)
                  :polarity -
                  :mode imperative))

# ::snt : . will not confirm how many hostages left in
# ::tokens [":", ".", "will", "not", "confirm", "how", "many", "hostages", "left", "in"]
# ::lemmas [":", ".", "will", "not", "confirm", "how", "many", "hostage", "leave", "in"]
(c2-3 / confirm-01
      :ARG1 (c2-0 / number
                  :quant-of (c2-1 / hostage
                                  :ARG1-of (c2-2 / leave-17)))
      :polarity -)

# ::snt hope our Kenyan officers are taking notes ,
# ::tokens ["hope", "our", "Kenyan", "officers", "are", "taking", "notes", ","]
# ::lemmas ["hope", "our", "Kenyan", "officer", "be", "take", "note", ","]
(c3-0 / hope-01
      :ARG0 (c3-3 / i)
      :ARG1 (c3-4 / note-01
                  :ARG0 (c3-2 / officer
                              :mod (c3-6 / country
                                         :name (c3-5 / name
                                                     :op1 "Kenya"))
                              :poss (c3-1 / we))))

# ::snt How Does Someone Become a Muslim?
# ::tokens ["How", "Does", "Someone", "Become", "a", "Muslim", "?"]
# ::lemmas ["how", "do", "someone", "become", "a", "Muslim", "?"]
(c4-0 / become-01
      :ARG1 (c4-3 / someone)
      :ARG2 (c4-2 / religious-group
                  :name (c4-1 / name
                              :op1 "Muslim"))
      :manner (c4-4 / amr-unknown))

# ::snt media is giving that asshole the coverage &amp; gov is happy: spreads more fear. Justification for surveillance
# ::tokens ["media", "is", "giving", "that", "asshole", "the", "coverage", "&", "amp", ";", "gov", "is", "happy", ":", "spreads", "more", "fear", ".", "Justification", "for", "surveillance"]
# ::lemmas ["medium", "be", "give", "that", "asshole", "the", "coverage", "&", "amp", ";", "gov", "be", "happy", ":", "spread", "more", "fear", ".", "justification", "for", "surveillance"]
(c5-3 / multi-sentence
      :snt1 (c5-12 / give-01
                   :ARG0 (c5-9 / media)
                   :ARG1 (c5-16 / and
                                :op1 (c5-11 / cover-03)
                                :op2 (c5-6 / amp))
                   :ARG2 (c5-8 / asshole
                               :mod (c5-15 / that)))
      :snt2 (c5-0 / happy-01
                  :ARG1 (c5-10 / government-organization
                               :ARG0-of (c5-7 / govern-01))
                  :ARG1-of (c5-13 / cause-01
                                  :ARG0 (c5-14 / spread-01
                                               :ARG0 c5-10
                                               :ARG1 (c5-2 / fear-01
                                                           :mod (c5-4 / more)))))
      :snt3 (c5-1 / justify-01
                  :ARG1 (c5-5 / surveil-01)))

# ::snt god Breath ya!
# ::tokens ["god", "Breath", "ya", "!"]
# ::lemmas ["god", "Breath", "ya", "!"]
(c6-3 / breathe-01
      :ARG0 (c6-2 / person
                  :name (c6-0 / name
                              :op1 "God"))
      :ARG2 (c6-1 / you)
      :mode imperative)

# ::snt U
# ::tokens ["U"]
# ::lemmas ["u"]
(c7-1 / person
      :name (c7-0 / name
                  :op1 "U"))

# ::snt Hopefully, that's not because they dont know how many there are inside
# ::tokens ["Hopefully", ",", "that", "'s", "not", "because", "they", "do", "nt", "know", "how", "many", "there", "are", "inside"]
# ::lemmas ["hopefully", ",", "that", "be", "not", "because", "they", "do", "not", "know", "how", "many", "there", "be", "inside"]
(c8-0 / hope-01
      :ARG1 (c8-5 / cause-01
                  :ARG0 (c8-2 / know-01
                              :ARG0 (c8-7 / they)
                              :ARG1 (c8-3 / number
                                          :quant-of (c8-4 / person
                                                          :location (c8-1 / inside))))
                  :ARG1 (c8-6 / that)
                  :polarity -))

# ::snt they even didnt know if one of the hostages freed was also ISIS.
# ::tokens ["they", "even", "did", "nt", "know", "if", "one", "of", "the", "hostages", "freed", "was", "also", "ISIS", "."]
# ::lemmas ["they", "even", "do", "not", "know", "if", "one", "of", "the", "hostage", "free", "be", "also", "ISIS", "."]
(c9-5 / know-01
      :ARG0 (c9-9 / they)
      :ARG1 (c9-0 / have-condition-91
                  :ARG2 (c9-8 / criminal-organization
                              :name (c9-6 / name
                                          :op1 "Islamic"
                                          :op2 "organization")
                              :mod (c9-10 / also)
                              :domain (c9-1 / hostage
                                            :ARG1-of (c9-4 / include-91
                                                           :ARG2 (c9-7 / hostage
                                                                       :ARG1-of (c9-2 / free-01))))))
      :mod (c9-3 / even)
      :polarity -)

# ::snt the judges will judge after police is done. Lets just stick to observing, register, maybe learn some
# ::tokens ["the", "judges", "will", "judge", "after", "police", "is", "done", ".", "Lets", "just", "stick", "to", "observing", ",", "register", ",", "maybe", "learn", "some"]
# ::lemmas ["the", "judge", "will", "judge", "after", "police", "be", "do", ".", "let", "just", "stick", "to", "observe", ",", "register", ",", "maybe", "learn", "some"]
(c10-4 / multi-sentence
       :snt1 (c10-0 / judge-01
                    :ARG0 (c10-12 / person
                                  :ARG0-of (c10-15 / judge-01))
                    :time (c10-16 / after
                                  :op1 (c10-6 / be-done-08
                                              :ARG0 (c10-8 / police))))
       :snt2 (c10-10 / and
                     :op1 (c10-14 / stick-01
                                  :ARG0 (c10-1 / we
                                               :ARG1-of c10-14)
                                  :ARG2 (c10-11 / and
                                                :op1 (c10-7 / observe-01
                                                            :ARG0 c10-1)
                                                :op2 (c10-13 / register-02
                                                             :ARG0 c10-1))
                                  :mod (c10-2 / just)
                                  :mode imperative)
                     :op2 (c10-5 / possible-01
                                 :ARG1 (c10-3 / learn-01
                                              :ARG0 c10-1
                                              :ARG1 (c10-9 / some)))))
