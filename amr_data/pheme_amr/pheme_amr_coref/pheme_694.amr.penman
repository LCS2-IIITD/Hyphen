# ::snt Guess that proves they don't care who/what someone is... they just want to kill people. Nice
# ::tokens ["Guess", "that", "proves", "they", "do", "n't", "care", "who", "/", "what", "someone", "is", "...", "they", "just", "want", "to", "kill", "people", ".", "Nice"]
# ::lemmas ["guess", "that", "prove", "they", "do", "not", "care", "who", "/", "what", "someone", "be", "...", "they", "just", "want", "to", "kill", "people", ".", "nice"]
(c1-2 / multi-sentence
      :snt1 (c1-11 / guess-01
                   :ARG0 (c1-5 / i)
                   :ARG1 (c1-9 / prove-01
                               :ARG0 (c1-15 / that)
                               :ARG1 (c1-10 / care-01
                                            :ARG0 (c1-12 / they)
                                            :ARG1 (c1-13 / slash
                                                         :op1 (c1-16 / person
                                                                     :domain (c1-4 / someone))
                                                         :op2 (c1-3 / person
                                                                    :domain c1-4))
                                            :polarity -)))
      :snt2 (c1-1 / want-01
                  :ARG0 (c1-8 / they)
                  :ARG1 (c1-6 / kill-01
                              :ARG0 c1-8
                              :ARG1 (c1-14 / person))
                  :mod (c1-0 / just))
      :snt3 (c1-7 / nice-01))

# ::snt Thank you Liz for the retweet. Have a wonderful night !
# ::tokens ["Thank", "you", "Liz", "for", "the", "retweet", ".", "Have", "a", "wonderful", "night", "!"]
# ::lemmas ["thank", "you", "Liz", "for", "the", "retweet", ".", "have", "a", "wonderful", "night", "!"]
(c2-3 / multi-sentence
      :snt1 (c2-9 / thank-01
                  :ARG0 (c2-4 / i)
                  :ARG1 (c2-7 / person
                              :name (c2-5 / name
                                          :op1 "Liz"))
                  :ARG2 (c2-8 / retweet-01))
      :snt2 (c2-0 / have-03
                  :ARG0 (c2-1 / you)
                  :ARG1 (c2-6 / night
                              :ARG1-of (c2-2 / wonderful-03))
                  :mode imperative))

# ::snt He can have as many as he wants , he earned it
# ::tokens ["He", "can", "have", "as", "many", "as", "he", "wants", ",", "he", "earned", "it"]
# ::lemmas ["he", "can", "have", "as", "many", "as", "he", "want", ",", "he", "earn", "it"]
(c3-7 / and
      :op1 (c3-5 / possible-01
                 :ARG1 (c3-0 / have-03
                             :ARG0 (c3-9 / he)
                             :ARG1 (c3-8 / thing
                                         :ARG1-of (c3-4 / have-quant-91
                                                        :ARG3 (c3-3 / equal)
                                                        :ARG4 (c3-6 / thing
                                                                    :ARG1-of (c3-1 / want-01
                                                                                   :ARG0 c3-9))))))
      :op2 (c3-2 / earn-01
                 :ARG0 c3-9
                 :ARG1 c3-8))

# ::snt Thank you for your service, Ahmed. Rest In Peace, may God bless your family.
# ::tokens ["Thank", "you", "for", "your", "service", ",", "Ahmed", ".", "Rest", "In", "Peace", ",", "may", "God", "bless", "your", "family", "."]
# ::lemmas ["thank", "you", "for", "your", "service", ",", "Ahmed", ".", "rest", "in", "Peace", ",", "may", "God", "bless", "your", "family", "."]
(c4-1 / multi-sentence
      :snt1 (c4-10 / thank-01
                   :ARG1 (c4-6 / person
                               :name (c4-4 / name
                                           :op1 "Ahmed"))
                   :ARG2 (c4-8 / serve-01
                               :ARG0 c4-6))
      :snt2 (c4-12 / and
                   :op1 (c4-7 / rest-01
                              :manner (c4-11 / peace))
                   :op2 (c4-2 / permit-01
                              :ARG1 (c4-3 / bless-01
                                          :ARG0 (c4-9 / person
                                                      :name (c4-5 / name
                                                                  :op1 "God"))
                                          :ARG1 (c4-0 / family
                                                      :poss c4-6))
                              :ARG2 c4-9)))

# ::snt : BREAKING NEWS R.I.P. Ahmed Merabet, Cop, first victim of attack
# ::tokens [":", "BREAKING", "NEWS", "R.I.P.", "Ahmed", "Merabet", ",", "Cop", ",", "first", "victim", "of", "attack"]
# ::lemmas [":", "break", "news", "R.I.P.", "Ahmed", "Merabet", ",", "Cop", ",", "first", "victim", "of", "attack"]
(c5-5 / person
      :name (c5-3 / name
                  :op1 "R.I.P."
                  :op2 "Ahmed"
                  :op3 "Merabet")
      :mod (c5-7 / cop)
      :ARG1-of (c5-4 / victimize-01
                     :ARG0 (c5-9 / attack-01
                                 :ARG1 c5-5)
                     :ord (c5-2 / ordinal-entity
                                :value 1))
      :ARG0-of (c5-0 / have-org-role-91
                     :ARG2 (c5-6 / report-01
                                 :ARG1 (c5-8 / news
                                             :ARG1-of (c5-1 / break-13)))))

# ::snt ymw.. Hope you have a wonderful one as well.
# ::tokens ["ymw", "..", "Hope", "you", "have", "a", "wonderful", "one", "as", "well", "."]
# ::lemmas ["ymw", "..", "hope", "you", "have", "a", "wonderful", "one", "as", "well", "."]
(c6-0 / hope-01
      :ARG0 (c6-5 / i)
      :ARG1 (c6-7 / have-03
                  :ARG0 (c6-1 / you)
                  :ARG1 (c6-3 / one
                              :ARG1-of (c6-2 / wonderful-03)
                              :mod (c6-6 / as-well)))
      :mod (c6-4 / aw
                 :mode expressive))

# ::snt Fallen Hero.
# ::tokens ["Fallen", "Hero", "."]
# ::lemmas ["Fallen", "Hero", "."]
(c7-0 / hero
      :ARG1-of (c7-1 / fall-01))

# ::snt rest in peace
# ::tokens ["rest", "in", "peace"]
# ::lemmas ["rest", "in", "peace"]
(c8-2 / rest-01
      :ARG1 (c8-0 / you)
      :manner (c8-1 / peace))

# ::snt from Littleton, Colorado: NOT AFRAID,
# ::tokens ["from", "Littleton", ",", "Colorado", ":", "NOT", "AFRAID", ","]
# ::lemmas ["from", "Littleton", ",", "Colorado", ":", "not", "AFRAID", ","]
(c9-5 / cause-01
      :ARG0 (c9-0 / have-polarity-91
                  :ARG1 (c9-3 / program
                              :name (c9-1 / name
                                          :op1 "AFRAID"))
                  :ARG2 -)
      :source (c9-4 / city
                    :name (c9-2 / name
                                :op1 "Littleton")
                    :location (c9-7 / state
                                    :name (c9-6 / name
                                                :op1 "Colorado"))))

# ::snt RIP man, thanks for everything
# ::tokens ["RIP", "man", ",", "thanks", "for", "everything"]
# ::lemmas ["RIP", "man", ",", "thank", "for", "everything"]
(c10-6 / and
       :op1 (c10-0 / wish-01
                   :ARG1 (c10-4 / rest-01
                                :ARG1 (c10-1 / man)
                                :manner (c10-3 / peace)))
       :op2 (c10-5 / thank-01
                   :ARG2 (c10-2 / everything)))

# ::snt Correct. They deserve eradication. Nothing else.
# ::tokens ["Correct", ".", "They", "deserve", "eradication", ".", "Nothing", "else", "."]
# ::lemmas ["correct", ".", "they", "deserve", "eradication", ".", "nothing", "else", "."]
(c11-0 / multi-sentence
       :snt1 (c11-5 / correct-02)
       :snt2 (c11-4 / deserve-01
                    :ARG0 (c11-6 / they)
                    :ARG1 (c11-2 / eradicate-01
                                 :ARG1 c11-6))
       :snt3 (c11-3 / nothing
                    :mod (c11-1 / else)))

# ::snt Typical. Islamist throwback dicks kill a fellow Muslim, which they routinely do in the middle east.
# ::tokens ["Typical", ".", "Islamist", "throwback", "dicks", "kill", "a", "fellow", "Muslim", ",", "which", "they", "routinely", "do", "in", "the", "middle", "east", "."]
# ::lemmas ["typical", ".", "Islamist", "throwback", "dick", "kill", "a", "fellow", "Muslim", ",", "which", "they", "routinely", "do", "in", "the", "middle", "east", "."]
(c12-13 / typical-02
        :ARG1 (c12-4 / kill-01
                     :ARG0 (c12-9 / dicks
                                  :mod (c12-12 / throwback)
                                  :mod (c12-8 / religious-group
                                              :name (c12-5 / name
                                                           :op1 "Islam")))
                     :ARG1 (c12-7 / person
                                  :mod (c12-6 / religious-group
                                              :name (c12-10 / name
                                                            :op1 "Muslim"))
                                  :mod (c12-2 / fellow))
                     :ARG1-of (c12-1 / do-02
                                     :location (c12-0 / world-region
                                                      :name (c12-11 / name
                                                                    :op1 "Middle"
                                                                    :op2 "East"))
                                     :mod (c12-3 / routine))))

# ::snt So how many virgins does the dead cop get?
# ::tokens ["So", "how", "many", "virgins", "does", "the", "dead", "cop", "get", "?"]
# ::lemmas ["so", "how", "many", "virgin", "do", "the", "dead", "cop", "get", "?"]
(c13-0 / infer-01
       :ARG1 (c13-4 / get-01
                    :ARG0 (c13-3 / cop
                                 :ARG1-of (c13-2 / die-01))
                    :ARG1 (c13-1 / virgin
                                 :quant (c13-5 / amr-unknown))))

# ::snt Shows what happens when no one is carrying.
# ::tokens ["Shows", "what", "happens", "when", "no", "one", "is", "carrying", "."]
# ::lemmas ["show", "what", "happen", "when", "no", "one", "be", "carry", "."]
(c14-0 / show-01
       :ARG1 (c14-1 / event
                    :condition (c14-2 / carry-01
                                      :ARG0 (c14-3 / no-one))))

# ::snt RIP
# ::tokens ["RIP"]
# ::lemmas ["RIP"]
(c15-2 / rest-01
       :ARG1 (c15-0 / you)
       :manner (c15-1 / peace))

# ::snt So sad!They have no soul.Even killing other Muslims.Hopefully makes more fearful Muslims speak out against radical Islamists.
# ::tokens ["So", "sad!They", "have", "no", "soul", ".", "Even", "killing", "other", "Muslims", ".", "Hopefully", "makes", "more", "fearful", "Muslims", "speak", "out", "against", "radical", "Islamists", "."]
# ::lemmas ["so", "sad!they", "have", "no", "soul", ".", "even", "kill", "other", "Muslims", ".", "Hopefully", "make", "more", "fearful", "Muslims", "speak", "out", "against", "radical", "Islamists", "."]
(c16-0 / multi-sentence
       :snt1 (c16-4 / sad-02
                    :degree (c16-12 / so)
                    :mode expressive)
       :snt2 (c16-20 / soul
                     :domain (c16-23 / they)
                     :polarity -)
       :snt3 (c16-19 / kill-01
                     :ARG1 (c16-3 / person
                                  :mod (c16-17 / religious-group
                                               :name (c16-15 / name
                                                             :op1 "Islam"))
                                  :mod (c16-21 / other))
                     :mod (c16-13 / even))
       :snt4 (c16-7 / hope-01
                    :ARG1 (c16-16 / make-02
                                  :ARG0 (c16-11 / speak-out-03
                                                :ARG0 (c16-5 / person
                                                             :mod (c16-1 / religious-group
                                                                         :name (c16-22 / name
                                                                                       :op1 "Muslim"))
                                                             :ARG1-of (c16-6 / have-degree-91
                                                                             :ARG2 (c16-8 / fear-01
                                                                                          :ARG0 c16-5)
                                                                             :ARG3 (c16-9 / more)))
                                                :prep-against (c16-10 / person
                                                                      :mod (c16-14 / religious-group
                                                                                   :name (c16-2 / name
                                                                                                :op1 "Islamism")
                                                                                   :ARG1-of (c16-18 / radical-02)))))))

# ::snt : BREAKING NEWS R.I.P. Ahmed Merabet, Cop, first victim of attack
# ::tokens [":", "BREAKING", "NEWS", "R.I.P.", "Ahmed", "Merabet", ",", "Cop", ",", "first", "victim", "of", "attack"]
# ::lemmas [":", "break", "news", "R.I.P.", "Ahmed", "Merabet", ",", "Cop", ",", "first", "victim", "of", "attack"]
(c17-5 / person
       :name (c17-3 / name
                    :op1 "R.I.P."
                    :op2 "Ahmed"
                    :op3 "Merabet")
       :mod (c17-7 / cop)
       :ARG1-of (c17-4 / victimize-01
                       :ARG0 (c17-9 / attack-01
                                    :ARG1 c17-5)
                       :ord (c17-2 / ordinal-entity
                                   :value 1))
       :ARG0-of (c17-0 / have-org-role-91
                       :ARG2 (c17-6 / report-01
                                    :ARG1 (c17-8 / news
                                                 :ARG1-of (c17-1 / break-13)))))

# ::snt Probable the last,on the runaway. (if it is the last).
# ::tokens ["Probable", "the", "last", ",", "on", "the", "runaway", ".", "(", "if", "it", "is", "the", "last", ")", "."]
# ::lemmas ["probable", "the", "last", ",", "on", "the", "runaway", ".", "(", "if", "it", "be", "the", "last", ")", "."]
(c18-2 / probable
       :domain (c18-1 / event
                      :mod (c18-0 / last)
                      :topic (c18-3 / runaway-01)
                      :condition-of c18-2)
       :mod (c18-4 / last))

# ::snt They didn't bother to ask him if he was muslim
# ::tokens ["They", "did", "n't", "bother", "to", "ask", "him", "if", "he", "was", "muslim"]
# ::lemmas ["they", "do", "not", "bother", "to", "ask", "he", "if", "he", "be", "muslim"]
(c19-1 / bother-02
       :ARG0 (c19-5 / they)
       :ARG1 (c19-6 / ask-01
                    :ARG0 c19-5
                    :ARG1 (c19-4 / truth-value
                                 :polarity-of (c19-3 / religious-group
                                                     :name (c19-2 / name
                                                                  :op1 "Muslim")
                                                     :domain (c19-0 / he
                                                                    :ARG2-of c19-6))))
       :polarity -)
