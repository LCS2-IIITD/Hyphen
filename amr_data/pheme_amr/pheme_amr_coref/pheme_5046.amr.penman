# ::snt This isn't a game. This is war. People need to recognize it. Especially complacent Americans.
# ::tokens ["This", "is", "n't", "a", "game", ".", "This", "is", "war", ".", "People", "need", "to", "recognize", "it", ".", "Especially", "complacent", "Americans", "."]
# ::lemmas ["this", "be", "not", "a", "game", ".", "this", "be", "war", ".", "people", "need", "to", "recognize", "it", ".", "especially", "complacent", "Americans", "."]
(c1-1 / multi-sentence
      :snt1 (c1-9 / game
                  :domain (c1-12 / this)
                  :polarity -)
      :snt2 (c1-0 / war
                  :domain (c1-11 / this))
      :snt3 (c1-4 / need-01
                  :ARG0 (c1-6 / person)
                  :ARG1 (c1-7 / recognize-02
                              :ARG0 c1-6
                              :ARG1 (c1-3 / it)))
      :snt4 (c1-13 / person
                   :mod (c1-8 / country
                              :name (c1-5 / name
                                          :op1 "America"))
                   :ARG1-of (c1-10 / complacent
                                   :degree (c1-2 / especially))))

# ::snt crISIS
# ::tokens ["crISIS"]
# ::lemmas ["crISIS"]
(c2-1 / criminal-organization
      :name (c2-0 / name
                  :op1 "CrISIS"))

# ::snt what the fuck
# ::tokens ["what", "the", "fuck"]
# ::lemmas ["what", "the", "fuck"]
(c3-1 / amr-unknown
      :mod (c3-0 / fuck))

# ::snt Condemn anti-semitizm.
# ::tokens ["Condemn", "anti", "-", "semitizm", "."]
# ::lemmas ["condemn", "anti", "-", "semitizm", "."]
(c4-5 / condemn-01
      :ARG0 (c4-0 / you)
      :ARG1 (c4-2 / event
                  :ARG0-of (c4-1 / oppose-01
                                 :ARG1 (c4-4 / country
                                             :name (c4-3 / name
                                                         :op1 "Israel"))))
      :mode imperative)

# ::snt get to know your neighbors for sure!
# ::tokens ["get", "to", "know", "your", "neighbors", "for", "sure", "!"]
# ::lemmas ["get", "to", "know", "your", "neighbor", "for", "sure", "!"]
(c5-4 / get-03
      :ARG1 (c5-1 / you)
      :ARG2 (c5-6 / know-02
                  :ARG0 c5-1
                  :ARG1 (c5-3 / person
                              :ARG0-of (c5-0 / have-rel-role-91
                                             :ARG1 c5-1
                                             :ARG2 (c5-2 / neighbor))))
      :ARG1-of (c5-5 / sure-02)
      :mode imperative)

# ::snt Copy that!
# ::tokens ["Copy", "that", "!"]
# ::lemmas ["copy", "that", "!"]
(c6-2 / copy-01
      :ARG0 (c6-1 / you)
      :ARG1 (c6-0 / that)
      :mode imperative)

# ::snt and now a rd siuation at the Eiffel Tower? woh.
# ::tokens ["and", "now", "a", "rd", "siuation", "at", "the", "Eiffel", "Tower", "?", "woh", "."]
# ::lemmas ["and", "now", "a", "rd", "siuation", "at", "the", "Eiffel", "Tower", "?", "woh", "."]
(c7-6 / and
      :op2 (c7-4 / situation
                 :polarity (c7-1 / amr-unknown)
                 :time (c7-2 / now)
                 :location (c7-5 / tower
                                 :name (c7-3 / name
                                             :op1 "Eiffel"
                                             :op2 "Tower"))
                 :mod (c7-0 / woh
                            :mode expressive)))

# ::snt what is going on in France they can't catch a break...
# ::tokens ["what", "is", "going", "on", "in", "France", "they", "ca", "n't", "catch", "a", "break", "..."]
# ::lemmas ["what", "be", "go", "on", "in", "France", "they", "can", "not", "catch", "a", "break", "..."]
(c8-3 / possible-01
      :ARG1 (c8-5 / catch-01
                  :ARG0 (c8-7 / they)
                  :ARG1 (c8-0 / break-19)
                  :location (c8-4 / country
                                  :name (c8-2 / name
                                              :op1 "France")))
      :ARG1-of (c8-6 / cause-01
                     :ARG0 (c8-1 / event))
      :polarity -)

# ::snt locked and loaded, friend~
# ::tokens ["locked", "and", "loaded", ",", "friend~"]
# ::lemmas ["lock", "and", "load", ",", "friend~"]
(c9-6 / say-01
      :ARG0 (c9-3 / i)
      :ARG1 (c9-7 / and
                  :op1 (c9-1 / lock-01)
                  :op2 (c9-5 / load-01))
      :ARG2 (c9-4 / person
                  :ARG0-of (c9-0 / have-rel-role-91
                                 :ARG2 (c9-2 / friend)))
      :mode expressive)

# ::snt One hostage at the print shop in Dammartin, five hostages at the Kosher grocery.
# ::tokens ["One", "hostage", "at", "the", "print", "shop", "in", "Dammartin", ",", "five", "hostages", "at", "the", "Kosher", "grocery", "."]
# ::lemmas ["One", "hostage", "at", "the", "print", "shop", "in", "Dammartin", ",", "five", "hostage", "at", "the", "Kosher", "grocery", "."]
(c10-9 / and
       :op1 (c10-0 / hostage
                   :location (c10-8 / shop
                                    :mod (c10-4 / print-01)
                                    :location (c10-6 / city
                                                     :name (c10-2 / name
                                                                  :op1 "Dammartin")))
                   :quant 1)
       :op2 (c10-1 / hostage
                   :location (c10-7 / grocery
                                    :mod (c10-5 / company
                                                :name (c10-3 / name
                                                             :op1 "Kosher")))
                   :quant 5))

# ::snt More than you might imagine are right beside you. There's comfort in that, just as there is safety in numbers.
# ::tokens ["More", "than", "you", "might", "imagine", "are", "right", "beside", "you", ".", "There", "'s", "comfort", "in", "that", ",", "just", "as", "there", "is", "safety", "in", "numbers", "."]
# ::lemmas ["more", "than", "you", "might", "imagine", "be", "right", "beside", "you", ".", "there", "be", "comfort", "in", "that", ",", "just", "as", "there", "be", "safety", "in", "number", "."]
(c12-3 / multi-sentence
       :snt1 (c12-4 / be-located-at-91
                    :ARG1 (c12-16 / thing
                                  :ARG1-of (c12-0 / have-quant-91
                                                  :ARG3 (c12-9 / more)
                                                  :ARG4 (c12-14 / thing
                                                                :ARG1-of (c12-5 / imagine-01
                                                                                :ARG0 (c12-1 / you)
                                                                                :ARG1-of (c12-10 / possible-01)))))
                    :ARG2 (c12-11 / beside
                                  :op1 c12-1
                                  :mod (c12-12 / right)))
       :snt2 (c12-13 / comfort-01
                     :ARG0 (c12-8 / that)
                     :ARG1-of (c12-6 / resemble-01
                                     :ARG2 (c12-15 / safe-01
                                                   :ARG0 (c12-7 / number))
                                     :mod (c12-2 / just))))

# ::snt just crazy. Europe has to protect their culture from these barbarians.
# ::tokens ["just", "crazy", ".", "Europe", "has", "to", "protect", "their", "culture", "from", "these", "barbarians", "."]
# ::lemmas ["just", "crazy", ".", "Europe", "have", "to", "protect", "their", "culture", "from", "these", "barbarian", "."]
(c13-1 / multi-sentence
       :snt1 (c13-7 / crazy-03
                    :mod (c13-0 / just))
       :snt2 (c13-3 / obligate-01
                    :ARG1 (c13-6 / continent
                                 :name (c13-4 / name
                                              :op1 "Europe"))
                    :ARG2 (c13-5 / protect-01
                                 :ARG0 c13-6
                                 :ARG1 (c13-8 / culture
                                              :poss c13-6)
                                 :ARG2 (c13-2 / barbarian
                                              :mod (c13-9 / this)))))
