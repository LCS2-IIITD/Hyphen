# ::snt Excellent commentary on courtesy of
# ::tokens ["Excellent", "commentary", "on", "courtesy", "of"]
# ::lemmas ["excellent", "commentary", "on", "courtesy", "of"]
(c1-3 / comment-01
      :ARG0 (c1-2 / person
                  :name (c1-1 / name
                              :op1 "McCann"))
      :ARG1-of (c1-0 / excellent-02)
      :ARG2-of (c1-4 / thank-01
                     :ARG1 c1-2))

# ::snt Bigoted jackass. Nobody thinks your backwards cap makes you a tough guy.
# ::tokens ["Bigoted", "jackass", ".", "Nobody", "thinks", "your", "backwards", "cap", "makes", "you", "a", "tough", "guy", "."]
# ::lemmas ["bigoted", "jackass", ".", "nobody", "think", "your", "backwards", "cap", "make", "you", "a", "tough", "guy", "."]
(c2-2 / multi-sentence
      :snt1 (c2-0 / jackass
                  :mod (c2-3 / bigot))
      :snt2 (c2-10 / think-01
                   :ARG0 (c2-4 / nobody)
                   :ARG1 (c2-5 / make-02
                               :ARG0 (c2-6 / cap
                                           :direction (c2-7 / backwards)
                                           :poss (c2-1 / you))
                               :ARG1 (c2-8 / guy
                                           :ARG1-of (c2-9 / tough-02)
                                           :domain c2-1))))

# ::snt You call me bigoted. You must be insane. Still waiting for my pizza. Fuggedaboudit!
# ::tokens ["You", "call", "me", "bigoted", ".", "You", "must", "be", "insane", ".", "Still", "waiting", "for", "my", "pizza", ".", "Fuggedaboudit", "!"]
# ::lemmas ["you", "call", "i", "bigote", ".", "you", "must", "be", "insane", ".", "still", "wait", "for", "my", "pizza", ".", "Fuggedaboudit", "!"]
(c3-3 / multi-sentence
      :snt1 (c3-9 / call-01
                  :ARG0 (c3-0 / you)
                  :ARG1 (c3-6 / i)
                  :ARG2 (c3-4 / bigot))
      :snt2 (c3-10 / infer-01
                   :ARG1 (c3-2 / insane
                               :domain (c3-11 / you)))
      :snt3 (c3-1 / wait-01
                  :ARG1 (c3-5 / i)
                  :ARG2 (c3-8 / pizza
                              :poss c3-5)
                  :mod (c3-12 / still))
      :snt4 (c3-13 / person
                   :name (c3-7 / name
                               :op1 "F Fuggedaboudit")
                   :mode expressive))

# ::snt The incentives to unnecessarily insert police action into innocent lives must end, via libertarian jury independence.
# ::tokens ["The", "incentives", "to", "unnecessarily", "insert", "police", "action", "into", "innocent", "lives", "must", "end", ",", "via", "libertarian", "jury", "independence", "."]
# ::lemmas ["the", "incentive", "to", "unnecessarily", "insert", "police", "action", "into", "innocent", "life", "must", "end", ",", "via", "libertarian", "jury", "independence", "."]
(c4-3 / obligate-01
      :ARG2 (c4-5 / end-01
                  :ARG1 (c4-6 / incentivize-01
                              :ARG2 (c4-8 / insert-01
                                          :ARG1 (c4-10 / act-02
                                                       :ARG0 (c4-7 / police))
                                          :ARG2 (c4-1 / life
                                                      :ARG1-of (c4-2 / innocent-01))
                                          :ARG2-of c4-3))
                  :manner (c4-4 / independence
                                :mod (c4-0 / jury)
                                :mod (c4-9 / libertarian))))

# ::snt I'm feeling the love...
# ::tokens ["I", "'m", "feeling", "the", "love", "..."]
# ::lemmas ["i", "be", "feel", "the", "love", "..."]
(c5-0 / feel-01
      :ARG0 (c5-2 / i)
      :ARG1 (c5-1 / love-01))

# ::snt Officer Darren Wilson
# ::tokens ["Officer", "Darren", "Wilson"]
# ::lemmas ["Officer", "Darren", "Wilson"]
(c6-1 / person
      :name (c6-0 / name
                  :op1 "Darren"
                  :op2 "Wilson")
      :ARG0-of (c6-2 / have-org-role-91
                     :ARG2 (c6-3 / officer)))

# ::snt : Excellent commentary on courtesy of LMFAO
# ::tokens [":", "Excellent", "commentary", "on", "courtesy", "of", "LMFAO"]
# ::lemmas [":", "excellent", "commentary", "on", "courtesy", "of", "LMFAO"]
(c7-5 / thing
      :ARG1-of (c7-4 / comment-01)
      :ARG1-of (c7-0 / excellent-02)
      :ARG2-of (c7-3 / courtesy-01
                     :ARG1 (c7-2 / person
                                 :name (c7-1 / name
                                             :op1 "LMFAO"))))

# ::snt Can you show us on the doll, where Mr. Rall touched you?
# ::tokens ["Can", "you", "show", "us", "on", "the", "doll", ",", "where", "Mr.", "Rall", "touched", "you", "?"]
# ::lemmas ["can", "you", "show", "we", "on", "the", "doll", ",", "where", "Mr.", "Rall", "touch", "you", "?"]
(c8-3 / possible-01
      :ARG1 (c8-5 / show-01
                  :ARG0 (c8-0 / you)
                  :ARG1 (c8-4 / doll
                              :location-of (c8-6 / touch-01
                                                 :ARG0 (c8-7 / person
                                                             :name (c8-2 / name
                                                                         :op1 "Mr."
                                                                         :op2 "Rall"))
                                                 :ARG1 c8-0))
                  :ARG2 (c8-1 / we))
      :polarity (c8-8 / amr-unknown))

# ::snt I called you that because you are one. And that's a fact, Spike.
# ::tokens ["I", "called", "you", "that", "because", "you", "are", "one", ".", "And", "that", "'s", "a", "fact", ",", "Spike", "."]
# ::lemmas ["i", "call", "you", "that", "because", "you", "be", "one", ".", "and", "that", "be", "a", "fact", ",", "Spike", "."]
(c9-1 / multi-sentence
      :snt1 (c9-7 / call-01
                  :ARG0 (c9-3 / i)
                  :ARG1 (c9-5 / person
                              :name (c9-4 / name
                                          :op1 "Spike"))
                  :ARG2 (c9-10 / that)
                  :ARG1-of (c9-6 / cause-01
                                 :ARG0 (c9-2 / one
                                             :domain c9-5)))
      :snt2 (c9-11 / and
                   :op2 (c9-0 / fact
                              :domain (c9-8 / that)))
      :ARG1-of (c9-9 / say-01
                     :ARG0 c9-3
                     :ARG2 c9-5))

# ::snt Ted Rall - biggest hate-filled talent-less jackass anarchist ever.
# ::tokens ["Ted", "Rall", "-", "biggest", "hate", "-", "filled", "talent", "-", "less", "jackass", "anarchist", "ever", "."]
# ::lemmas ["Ted", "Rall", "-", "big", "hate", "-", "fill", "talent", "-", "less", "jackass", "anarchist", "ever", "."]
(c10-8 / say-01
       :ARG1 (c10-10 / anarchist
                     :domain (c10-7 / person
                                    :name (c10-6 / name
                                                 :op1 "Ted"
                                                 :op2 "Rall"))
                     :ARG1-of (c10-2 / fill-01
                                     :ARG2 (c10-9 / talent))
                     :mod (c10-0 / jackass)
                     :time (c10-5 / ever)
                     :ARG1-of (c10-1 / have-degree-91
                                     :ARG2 (c10-4 / big)
                                     :ARG3 (c10-3 / most)))
       :ARG2 c10-7)

# ::snt and that's why we love him.
# ::tokens ["and", "that", "'s", "why", "we", "love", "him", "."]
# ::lemmas ["and", "that", "be", "why", "we", "love", "he", "."]
(c11-5 / and
       :op2 (c11-3 / cause-01
                   :ARG0 (c11-4 / that)
                   :ARG1 (c11-2 / love-01
                                :ARG0 (c11-1 / we)
                                :ARG1 (c11-0 / he))))

# ::snt Hear that, Ted? The biggest! Ever! Whoo!
# ::tokens ["Hear", "that", ",", "Ted", "?", "The", "biggest", "!", "Ever", "!", "Whoo", "!"]
# ::lemmas ["hear", "that", ",", "Ted", "?", "the", "big", "!", "ever", "!", "Whoo", "!"]
(c12-2 / multi-sentence
       :snt1 (c12-9 / say-01
                    :ARG0 (c12-5 / i)
                    :ARG1 (c12-0 / hear-01
                                 :ARG0 (c12-7 / person
                                              :name (c12-6 / name
                                                           :op1 "Ted"))
                                 :ARG1 (c12-10 / that)
                                 :mode imperative)
                    :ARG2 c12-7)
       :snt2 (c12-11 / have-degree-91
                     :ARG2 (c12-3 / big)
                     :ARG3 (c12-8 / most)
                     :ARG5 (c12-4 / ever)
                     :mode expressive)
       :snt3 (c12-1 / whoo
                    :mode expressive))

# ::snt Agreed !!
# ::tokens ["Agreed", "!", "!"]
# ::lemmas ["agree", "!", "!"]
(c13-0 / agree-01
       :mode expressive)

# ::snt ! WARNING videos are graphic! PLEASE REPOST&ampHARE!
# ::tokens ["!", "WARNING", "videos", "are", "graphic", "!", "PLEASE", "REPOST&ampHARE", "!"]
# ::lemmas ["!", "warning", "video", "be", "graphic", "!", "PLEASE", "REPOST&ampHARE", "!"]
(c14-2 / multi-sentence
       :snt1 (c14-6 / graphic
                    :domain (c14-3 / video
                                   :ARG0-of (c14-0 / warn-01)))
       :snt2 (c14-7 / and
                    :op1 (c14-4 / publish-01
                                :ARG0 (c14-1 / you))
                    :op2 (c14-5 / cover-01
                                :ARG0 c14-1
                                :mode imperative
                                :polite +)
                    :mode imperative
                    :polite +))

# ::snt I question your crippled epistemology. Call my mom, ask her, she'll tell you.
# ::tokens ["I", "question", "your", "crippled", "epistemology", ".", "Call", "my", "mom", ",", "ask", "her", ",", "she", "'ll", "tell", "you", "."]
# ::lemmas ["i", "question", "your", "crippled", "epistemology", ".", "call", "my", "mom", ",", "ask", "she", ",", "she", "'ll", "tell", "you", "."]
(c15-2 / multi-sentence
       :snt1 (c15-4 / question-03
                    :ARG0 (c15-6 / i)
                    :ARG1 (c15-3 / epistemology
                                 :ARG1-of (c15-9 / cripple-01)
                                 :poss (c15-1 / you)))
       :snt2 (c15-14 / and
                     :op1 (c15-8 / call-02
                                 :ARG0 (c15-12 / you)
                                 :ARG1 (c15-7 / person
                                              :ARG0-of (c15-0 / have-rel-role-91
                                                              :ARG1 (c15-10 / i)
                                                              :ARG2 (c15-11 / mom)))
                                 :mode imperative)
                     :op2 (c15-5 / ask-01
                                 :ARG0 c15-12
                                 :ARG2 c15-7
                                 :ARG1-of (c15-13 / tell-01
                                                  :ARG0 c15-7
                                                  :ARG2 c15-12)
                                 :mode imperative)))

# ::snt "if you're not cop, you're little people!!" it's &amp;.
# ::tokens ["\"", "if", "you", "'re", "not", "cop", ",", "you", "'re", "little", "people", "!", "!", "\"", "it", "'s", "&", "amp", ";", "."]
# ::lemmas ["\"", "if", "you", "be", "not", "cop", ",", "you", "be", "little", "people", "!", "!", "\"", "it", "be", "&", "amp", ";", "."]
(c16-4 / and
       :op1 (c16-3 / cop
                   :domain (c16-0 / you)
                   :polarity -)
       :op2 (c16-2 / person
                   :mod (c16-1 / little)
                   :domain c16-0)
       :condition c16-3)

# ::snt I guess you're not an anarchist, otherwise- you win!
# ::tokens ["I", "guess", "you", "'re", "not", "an", "anarchist", ",", "otherwise-", "you", "win", "!"]
# ::lemmas ["i", "guess", "you", "be", "not", "an", "anarchist", ",", "otherwise-", "you", "win", "!"]
(c17-5 / guess-01
       :ARG0 (c17-3 / i)
       :ARG1 (c17-6 / anarchist
                    :domain (c17-1 / you)
                    :polarity -)
       :ARG0-of (c17-4 / cause-01
                       :ARG1 (c17-2 / win-01
                                    :ARG0 c17-1
                                    :condition (c17-0 / have-polarity-91
                                                      :ARG1 c17-6
                                                      :ARG2 -))))

# ::snt : look up the word "plonk."
# ::tokens [":", "look", "up", "the", "word", "\"", "plonk", ".", "\""]
# ::lemmas [":", "look", "up", "the", "word", "\"", "plonk", ".", "\""]
(c18-2 / look-up-05
       :ARG0 (c18-1 / you)
       :ARG1 (c18-0 / string-entity
                    :value "plonk")
       :mode imperative)

# ::snt Says the nobody in Jersey. Could hurry up with my pizza btw?
# ::tokens ["Says", "the", "nobody", "in", "Jersey", ".", "Could", "hurry", "up", "with", "my", "pizza", "btw", "?"]
# ::lemmas ["say", "the", "nobody", "in", "Jersey", ".", "could", "hurry", "up", "with", "my", "pizza", "btw", "?"]
(c20-1 / multi-sentence
       :snt1 (c20-8 / say-01
                    :ARG0 (c20-5 / nobody
                                 :location (c20-3 / state
                                                  :name (c20-6 / name
                                                               :op1 "Jersey"))))
       :snt2 (c20-7 / possible-01
                    :ARG1 (c20-0 / hurry-01
                                 :ARG1 (c20-4 / i)
                                 :accompanier (c20-9 / pizza
                                                     :poss c20-4)
                                 :mod (c20-2 / by-the-way))
                    :polarity (c20-10 / amr-unknown)))
