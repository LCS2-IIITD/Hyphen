# ::snt Video of the attack.
# ::tokens ["Video", "of", "the", "attack", "."]
# ::lemmas ["video", "of", "the", "attack", "."]
(c1-0 / video
      :topic (c1-1 / attack-01))

# ::snt Rocket freaking LAUNCHER?! Damn...
# ::tokens ["Rocket", "freaking", "LAUNCHER", "?", "!", "Damn", "..."]
# ::lemmas ["rocket", "freak", "LAUNCHER", "?", "!", "damn", "..."]
(c2-1 / multi-sentence
      :snt1 (c2-3 / person
                  :ARG0-of (c2-0 / launch-01
                                 :ARG1 (c2-4 / rocket))
                  :mod (c2-2 / freaking
                             :mode expressive)
                  :mode expressive)
      :snt2 (c2-5 / damn-01))

# ::snt If the reports are unconfirmed do we need to tweet them?
# ::tokens ["If", "the", "reports", "are", "unconfirmed", "do", "we", "need", "to", "tweet", "them", "?"]
# ::lemmas ["if", "the", "report", "be", "unconfirmed", "do", "we", "need", "to", "tweet", "they", "?"]
(c3-1 / obligate-01
      :polarity (c3-5 / amr-unknown)
      :ARG1 (c3-0 / we)
      :ARG2 (c3-4 / tweet-02
                  :ARG0 c3-0
                  :ARG1 (c3-2 / report-01))
      :condition (c3-3 / confirm-01
                       :ARG1 c3-2
                       :polarity -))

# ::snt Religions fails when men have to defend their Gods
# ::tokens ["Religions", "fails", "when", "men", "have", "to", "defend", "their", "Gods"]
# ::lemmas ["religion", "fail", "when", "man", "have", "to", "defend", "their", "god"]
(c4-0 / fail-01
      :ARG1 (c4-5 / religion)
      :time (c4-2 / obligate-01
                  :ARG1 (c4-1 / man)
                  :ARG2 (c4-6 / defend-01
                              :ARG0 c4-1
                              :ARG1 (c4-4 / person
                                          :name (c4-3 / name
                                                      :op1 "God")
                                          :poss c4-1))))

# ::snt omg
# ::tokens ["omg"]
# ::lemmas ["omg"]
(c5-0 / oh-my-god
      :mode expressive)

# ::snt this must be very tiring for you.
# ::tokens ["this", "must", "be", "very", "tiring", "for", "you", "."]
# ::lemmas ["this", "must", "be", "very", "tiring", "for", "you", "."]
(c6-1 / infer-01
      :ARG1 (c6-4 / tire-01
                  :ARG0 (c6-3 / this)
                  :ARG1 (c6-0 / you)
                  :degree (c6-2 / very)))

# ::snt If unconfirmed, then shut up. Honestly, some people are going to jump on this, true or not. Wait for confirmation, please.
# ::tokens ["If", "unconfirmed", ",", "then", "shut", "up", ".", "Honestly", ",", "some", "people", "are", "going", "to", "jump", "on", "this", ",", "true", "or", "not", ".", "Wait", "for", "confirmation", ",", "please", "."]
# ::lemmas ["if", "unconfirme", ",", "then", "shut", "up", ".", "honestly", ",", "some", "people", "be", "go", "to", "jump", "on", "this", ",", "true", "or", "not", ".", "wait", "for", "confirmation", ",", "please", "."]
(c7-4 / multi-sentence
      :snt1 (c7-14 / shut-up-06
                   :ARG0 (c7-1 / you
                               :ARG1-of c7-14)
                   :condition (c7-11 / confirm-01
                                     :ARG1 (c7-15 / this)
                                     :polarity -)
                   :mode imperative)
      :snt2 (c7-0 / jump-03
                  :ARG0 (c7-9 / person
                              :mod (c7-6 / some))
                  :ARG1 (c7-13 / this)
                  :ARG1-of (c7-2 / honest-01)
                  :ARG1-of (c7-10 / regardless-91
                                  :ARG2 (c7-5 / or
                                              :op1 (c7-8 / true-01
                                                         :ARG1 c7-0)
                                              :op2 (c7-7 / true-01
                                                         :ARG1 c7-0
                                                         :polarity -))))
      :snt3 (c7-3 / wait-01
                  :ARG1 (c7-16 / you)
                  :ARG2 (c7-12 / confirm-01)
                  :mode imperative
                  :polite +))

# ::snt when are you going to tackle the elephant in the room?!
# ::tokens ["when", "are", "you", "going", "to", "tackle", "the", "elephant", "in", "the", "room", "?", "!"]
# ::lemmas ["when", "be", "you", "go", "to", "tackle", "the", "elephant", "in", "the", "room", "?", "!"]
(c9-3 / tackle-01
      :ARG0 (c9-0 / you)
      :ARG1 (c9-1 / elephant
                  :location (c9-2 / room))
      :time (c9-4 / amr-unknown))

# ::snt Terror has no religion RT attackers shouted "The Prophet is avenged" and used a rocket launcher.
# ::tokens ["Terror", "has", "no", "religion", "RT", "attackers", "shouted", "\"", "The", "Prophet", "is", "avenged", "\"", "and", "used", "a", "rocket", "launcher", "."]
# ::lemmas ["Terror", "have", "no", "religion", "RT", "attacker", "shout", "\"", "the", "Prophet", "be", "avenge", "\"", "and", "use", "a", "rocket", "launcher", "."]
(c10-8 / cause-01
       :ARG0 (c10-7 / religion
                    :polarity -)
       :ARG1 (c10-12 / and
                     :op1 (c10-9 / shout-01
                                 :ARG0 (c10-6 / person
                                              :ARG0-of (c10-2 / attack-01))
                                 :ARG1 (c10-5 / avenge-01
                                              :ARG1 (c10-11 / person
                                                            :name (c10-4 / name
                                                                         :op1 "Prophet"))))
                     :op2 (c10-1 / use-01
                                 :ARG0 c10-6
                                 :ARG1 (c10-10 / thing
                                               :ARG0-of (c10-0 / launch-01
                                                               :ARG1 (c10-3 / rocket))))))

# ::snt The insurgency-as-warfare has metastasized.
# ::tokens ["The", "insurgency", "-", "as", "-", "warfare", "has", "metastasized", "."]
# ::lemmas ["the", "insurgency", "-", "as", "-", "warfare", "have", "metastasize", "."]
(c11-1 / metastasize-01
       :ARG1 (c11-2 / insurgency
                    :prep-as (c11-0 / warfare)))

# ::snt They did said that. Havent you seen the video?
# ::tokens ["They", "did", "said", "that", ".", "Have", "nt", "you", "seen", "the", "video", "?"]
# ::lemmas ["they", "do", "say", "that", ".", "have", "not", "you", "see", "the", "video", "?"]
(c12-2 / multi-sentence
       :snt1 (c12-6 / say-01
                    :ARG0 (c12-7 / they)
                    :ARG1 (c12-5 / that))
       :snt2 (c12-0 / hear-01
                    :ARG0 (c12-1 / you)
                    :ARG1 (c12-3 / video)
                    :ARG1-of (c12-4 / request-confirmation-91)))

# ::snt In video showing assassination of officer.walking back to car they shouted:"we avenged the prophet.We killed Charlie Hebdo"
# ::tokens ["In", "video", "showing", "assassination", "of", "officer.walking", "back", "to", "car", "they", "shouted:\"we", "avenged", "the", "prophet", ".", "We", "killed", "Charlie", "Hebdo", "\""]
# ::lemmas ["in", "video", "showing", "assassination", "of", "officer.walke", "back", "to", "car", "they", "shouted:\"we", "avenge", "the", "prophet", ".", "we", "kill", "Charlie", "Hebdo", "\""]
(c13-12 / shout-01
        :ARG0 (c13-13 / they)
        :ARG1 (c13-14 / and
                      :op1 (c13-5 / avenge-01
                                  :ARG0 c13-13
                                  :ARG1 (c13-9 / prophet))
                      :op2 (c13-6 / kill-01
                                  :ARG0 c13-13
                                  :ARG1 (c13-1 / magazine
                                               :name (c13-7 / name
                                                            :op1 "Charlie"
                                                            :op2 "Ch Hebdo"))))
        :medium (c13-8 / video
                       :ARG0-of (c13-4 / show-01
                                       :ARG1 (c13-10 / assassinate-01
                                                     :ARG1 (c13-3 / officer))))
        :time (c13-0 / walk-01
                     :ARG0 c13-13
                     :ARG2 (c13-11 / car)
                     :direction (c13-2 / back)))
