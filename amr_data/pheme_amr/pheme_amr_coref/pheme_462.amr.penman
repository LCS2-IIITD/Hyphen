# ::snt Strange. I'm watching CNN right now and they said they escaped.
# ::tokens ["Strange", ".", "I", "'m", "watching", "CNN", "right", "now", "and", "they", "said", "they", "escaped", "."]
# ::lemmas ["strange", ".", "i", "be", "watch", "CNN", "right", "now", "and", "they", "say", "they", "escape", "."]
(c1-1 / multi-sentence
      :snt1 (c1-9 / strange)
      :snt2 (c1-11 / and
                   :op1 (c1-0 / watch-01
                              :ARG0 (c1-4 / i)
                              :ARG1 (c1-7 / publication
                                          :name (c1-5 / name
                                                      :op1 "CNN"))
                              :time (c1-6 / now
                                          :mod (c1-8 / right)))
                   :op2 (c1-2 / say-01
                              :ARG0 c1-7
                              :ARG1 (c1-3 / escape-01
                                          :ARG0 (c1-10 / they)))))

# ::snt I hope everyone is ok n side that cafe
# ::tokens ["I", "hope", "everyone", "is", "ok", "n", "side", "that", "cafe"]
# ::lemmas ["i", "hope", "everyone", "be", "ok", "n", "side", "that", "cafe"]
(c2-0 / hope-01
      :ARG0 (c2-3 / i)
      :ARG1 (c2-1 / okay-04
                  :ARG1 (c2-2 / everyone)
                  :ARG2 (c2-5 / side-01
                              :ARG0 c2-2
                              :ARG1 (c2-4 / cafe
                                          :mod (c2-6 / that)))))

# ::snt people fled, fleed or released...? choose the words that precisely describes the situation. The audiences need more precise info.
# ::tokens ["people", "fled", ",", "fleed", "or", "released", "...", "?", "choose", "the", "words", "that", "precisely", "describes", "the", "situation", ".", "The", "audiences", "need", "more", "precise", "info", "."]
# ::lemmas ["people", "flee", ",", "fleed", "or", "release", "...", "?", "choose", "the", "word", "that", "precisely", "describe", "the", "situation", ".", "the", "audience", "need", "more", "precise", "info", "."]
(c3-4 / multi-sentence
      :snt1 (c3-5 / or
                  :op1 (c3-3 / flee-05
                             :ARG0 (c3-10 / person)
                             :op2-of c3-5)
                  :ARG0 c3-10)
      :op3 (c3-11 / release-01
                  :ARG0 c3-10)
      :polarity (c3-17 / amr-unknown)
      :polarity (c3-6 / amr-unknown)
      :snt2 (c3-12 / choose-01
                   :ARG0 (c3-1 / you)
                   :ARG1 (c3-2 / word
                               :ARG2-of (c3-13 / describe-01
                                               :ARG1 (c3-15 / situation)
                                               :manner (c3-16 / precise))))
      :snt3 (c3-8 / need-01
                  :ARG0 (c3-9 / audience)
                  :ARG1 (c3-7 / information
                              :mod c3-16
                              :ARG2-of (c3-0 / have-degree-91
                                             :ARG3 (c3-14 / more)
                                             :ARG1 c3-7))))

# ::snt Please read the article in the main link provided above.
# ::tokens ["Please", "read", "the", "article", "in", "the", "main", "link", "provided", "above", "."]
# ::lemmas ["please", "read", "the", "article", "in", "the", "main", "link", "provide", "above", "."]
(c4-5 / read-01
      :ARG0 (c4-0 / you)
      :ARG1 (c4-6 / article
                  :location (c4-1 / link
                                  :mod (c4-2 / main)
                                  :ARG1-of (c4-4 / provide-01
                                                 :location (c4-3 / above))))
      :mode imperative
      :polite +)

# ::snt I have read it. I'm just relaying to you what I heard on CNN that's all.
# ::tokens ["I", "have", "read", "it", ".", "I", "'m", "just", "relaying", "to", "you", "what", "I", "heard", "on", "CNN", "that", "'s", "all", "."]
# ::lemmas ["i", "have", "read", "it", ".", "i", "be", "just", "relay", "to", "you", "what", "i", "hear", "on", "CNN", "that", "be", "all", "."]
(c5-4 / multi-sentence
      :snt1 (c5-10 / read-01
                   :ARG0 (c5-6 / i)
                   :ARG1 (c5-11 / it))
      :snt2 (c5-7 / relay-01
                  :ARG0 (c5-3 / i)
                  :ARG1 (c5-12 / thing
                               :ARG1-of (c5-0 / hear-01
                                              :ARG0 c5-3
                                              :medium (c5-9 / publication
                                                            :name (c5-8 / name
                                                                        :op1 "CNN"))))
                  :ARG2 (c5-1 / you)
                  :mod (c5-2 / just)
                  :ARG1-of (c5-5 / be-it-08)))

# ::snt The article mentions released as well!
# ::tokens ["The", "article", "mentions", "released", "as", "well", "!"]
# ::lemmas ["the", "article", "mention", "release", "as", "well", "!"]
(c6-1 / mention-01
      :ARG0 (c6-3 / article)
      :ARG1 (c6-0 / release-01
                  :mod (c6-2 / as-well)))

# ::snt people so far have fled Sydney cafe. Unknown number of hostages still inside. via
# ::tokens ["people", "so", "far", "have", "fled", "Sydney", "cafe", ".", "Unknown", "number", "of", "hostages", "still", "inside", ".", "via"]
# ::lemmas ["people", "so", "far", "have", "flee", "Sydney", "cafe", ".", "unknown", "number", "of", "hostage", "still", "inside", ".", "via"]
(c7-2 / multi-sentence
      :snt1 (c7-1 / flee-05
                  :ARG0 (c7-7 / person)
                  :ARG1 (c7-9 / cafe
                              :location (c7-8 / city
                                              :name (c7-5 / name
                                                          :op1 "Sydney")))
                  :time (c7-10 / so-far))
      :snt2 (c7-0 / hostage
                  :location (c7-4 / inside)
                  :ARG1-of (c7-11 / know-01
                                  :polarity -)
                  :quant (c7-6 / number
                               :mod (c7-3 / still))))

# ::snt They're going to cave to his demands and let him talk to him?
# ::tokens ["They", "'re", "going", "to", "cave", "to", "his", "demands", "and", "let", "him", "talk", "to", "him", "?"]
# ::lemmas ["they", "be", "go", "to", "cave", "to", "his", "demand", "and", "let", "he", "talk", "to", "he", "?"]
(c9-7 / and
      :polarity (c9-2 / amr-unknown)
      :op1 (c9-4 / cave-01
                 :ARG1 (c9-6 / they)
                 :ARG2 (c9-3 / demand-01
                             :ARG0 (c9-0 / he)))
      :op2 (c9-1 / let-01
                 :ARG0 c9-6
                 :ARG1 (c9-5 / talk-01
                             :ARG0 c9-0
                             :ARG2 c9-0)))

# ::snt let's pray our trust in good policemen all over the world will bring this to a peacefull ending. SOPHIA NL
# ::tokens ["let", "'s", "pray", "our", "trust", "in", "good", "policemen", "all", "over", "the", "world", "will", "bring", "this", "to", "a", "peacefull", "ending", ".", "SOPHIA", "NL"]
# ::lemmas ["let", "us", "pray", "our", "trust", "in", "good", "policeman", "all", "over", "the", "world", "will", "bring", "this", "to", "a", "peacefull", "ending", ".", "SOPHIA", "NL"]
(c10-2 / multi-sentence
       :snt1 (c10-1 / let-01
                    :ARG0 (c10-0 / we)
                    :ARG1 (c10-8 / pray-01
                                 :ARG0 c10-0
                                 :ARG1 (c10-4 / bring-01
                                              :ARG0 (c10-13 / trust-01
                                                            :ARG0 c10-0
                                                            :ARG1 (c10-14 / policeman
                                                                          :ARG1-of (c10-10 / good-02)
                                                                          :location (c10-15 / all-over
                                                                                            :op1 (c10-6 / world))))
                                              :ARG1 (c10-11 / this)
                                              :ARG2 (c10-5 / end-01
                                                           :manner (c10-3 / peacefull))))
                    :mode imperative)
       :snt2 (c10-12 / person
                     :name (c10-7 / name
                                  :op1 "SOPHIA")
                     :location (c10-9 / country
                                      :name c10-7
                                      :op1 "North"
                                      :op2 "Korea")))

# ::snt He will need to go to the toilet at some point to discover his bad planning.
# ::tokens ["He", "will", "need", "to", "go", "to", "the", "toilet", "at", "some", "point", "to", "discover", "his", "bad", "planning", "."]
# ::lemmas ["he", "will", "need", "to", "go", "to", "the", "toilet", "at", "some", "point", "to", "discover", "his", "bad", "planning", "."]
(c11-2 / need-01
       :ARG0 (c11-0 / he)
       :ARG1 (c11-5 / go-01
                    :ARG1 c11-0
                    :ARG4 (c11-7 / toilet)
                    :time (c11-3 / point
                                 :mod (c11-6 / some)))
       :purpose (c11-4 / discover-01
                       :ARG0 c11-0
                       :ARG1 (c11-8 / plan-01
                                    :ARG0 c11-0
                                    :ARG1-of (c11-1 / bad-02))))

# ::snt NSW Police will not say yet whether they escaped or were released.
# ::tokens ["NSW", "Police", "will", "not", "say", "yet", "whether", "they", "escaped", "or", "were", "released", "."]
# ::lemmas ["NSW", "Police", "will", "not", "say", "yet", "whether", "they", "escape", "or", "be", "release", "."]
(c12-7 / say-01
       :ARG0 (c12-5 / police
                    :mod (c12-2 / state
                                :name (c12-4 / name
                                             :op1 "NSW")))
       :ARG1 (c12-1 / or
                    :op1 (c12-3 / escape-01
                                :ARG0 (c12-8 / they))
                    :op2 (c12-6 / release-01
                                :ARG1 c12-8))
       :time (c12-0 / yet)
       :polarity -)

# ::snt no need to arrest that armed fudge packer. Just put him down like dogs
# ::tokens ["no", "need", "to", "arrest", "that", "armed", "fudge", "packer", ".", "Just", "put", "him", "down", "like", "dogs"]
# ::lemmas ["no", "need", "to", "arrest", "that", "armed", "fudge", "packer", ".", "just", "put", "he", "down", "like", "dog"]
(c13-4 / multi-sentence
       :snt1 (c13-7 / need-01
                    :ARG1 (c13-13 / arrest-01
                                  :ARG1 (c13-8 / person
                                               :ARG0-of (c13-12 / pack-01
                                                                :ARG1 (c13-3 / fudge))
                                               :ARG1-of (c13-6 / arm-01)
                                               :mod (c13-11 / that)))
                    :polarity -)
       :snt2 (c13-5 / put-01
                    :ARG1 (c13-0 / he)
                    :ARG2 (c13-9 / down)
                    :mod (c13-1 / just)
                    :ARG1-of (c13-10 / resemble-01
                                     :ARG2 (c13-2 / dog))))

# ::snt Hi Jaydine. Hoping malayo kayo from this event. Ingat, God Bless.
# ::tokens ["Hi", "Jaydine", ".", "Hoping", "malayo", "kayo", "from", "this", "event", ".", "Ingat", ",", "God", "Bless", "."]
# ::lemmas ["hi", "Jaydine", ".", "hope", "malayo", "kayo", "from", "this", "event", ".", "Ingat", ",", "God", "Bless", "."]
(c14-1 / multi-sentence
       :snt1 (c14-11 / say-01
                     :ARG1 (c14-0 / hi)
                     :ARG2 (c14-9 / person
                                  :name (c14-7 / name
                                               :op1 "Jaydine")))
       :snt2 (c14-15 / hope-01
                     :ARG0 (c14-6 / i)
                     :ARG1 (c14-13 / kayo
                                   :source (c14-4 / event
                                                  :mod (c14-12 / this))))
       :snt3 (c14-5 / say-01
                    :ARG1 (c14-3 / bless-01
                                 :ARG0 (c14-14 / person
                                               :name (c14-8 / name
                                                            :op1 "God")))
                    :ARG2 (c14-2 / person
                                 :name (c14-10 / name
                                               :op1 "Ingat"))))

# ::snt you're a pretty bad terrorist when you don't even bring your own terrorist flag...
# ::tokens ["you", "'re", "a", "pretty", "bad", "terrorist", "when", "you", "do", "n't", "even", "bring", "your", "own", "terrorist", "flag", "..."]
# ::lemmas ["you", "be", "a", "pretty", "bad", "terrorist", "when", "you", "do", "not", "even", "bring", "your", "own", "terrorist", "flag", "..."]
(c15-7 / terrorist
       :domain (c15-0 / you)
       :ARG1-of (c15-2 / bad-07
                       :degree (c15-4 / pretty))
       :condition (c15-5 / bring-01
                         :ARG0 c15-0
                         :ARG1 (c15-1 / flag
                                      :mod (c15-6 / terrorist)
                                      :poss c15-0)
                         :mod (c15-3 / even)
                         :polarity -))

# ::snt -
# ::tokens ["-"]
# ::lemmas ["-"]
(c16-0 / amr-empty)

# ::snt shocking how people think this is a time to be coy. I'd pray to god, but that's what caused this Shit.
# ::tokens ["shocking", "how", "people", "think", "this", "is", "a", "time", "to", "be", "coy", ".", "I", "'d", "pray", "to", "god", ",", "but", "that", "'s", "what", "caused", "this", "Shit", "."]
# ::lemmas ["shock", "how", "people", "think", "this", "be", "a", "time", "to", "be", "coy", ".", "i", "would", "pray", "to", "god", ",", "but", "that", "be", "what", "cause", "this", "Shit", "."]
(c17-0 / multi-sentence
       :snt1 (c17-13 / shock-01
                     :ARG0 (c17-15 / think-01
                                   :ARG0 (c17-9 / person)
                                   :ARG1 (c17-12 / time
                                                 :time-of (c17-11 / coy
                                                                  :domain (c17-8 / this))
                                                 :domain (c17-4 / this))))
       :snt2 (c17-10 / contrast-01
                     :ARG1 (c17-16 / pray-01
                                   :ARG0 (c17-5 / i)
                                   :ARG2 (c17-1 / person
                                                :name (c17-7 / name
                                                             :op1 "God")))
                     :ARG2 (c17-14 / cause-01
                                   :ARG0 (c17-6 / that)
                                   :ARG1 (c17-3 / shit
                                                :mod (c17-2 / this)))))

# ::snt Well since fled means fleed...they were not released. They escaped
# ::tokens ["Well", "since", "fled", "means", "fleed", "...", "they", "were", "not", "released", ".", "They", "escaped"]
# ::lemmas ["well", "since", "flee", "mean", "fleed", "...", "they", "be", "not", "release", ".", "they", "escape"]
(c18-1 / multi-sentence
       :snt1 (c18-6 / cause-01
                    :ARG0 (c18-4 / mean-01
                                 :ARG1 (c18-0 / flee-05)
                                 :ARG2 (c18-3 / flee-05))
                    :ARG1 (c18-5 / release-01
                                 :ARG1 (c18-8 / they)
                                 :polarity -))
       :snt2 (c18-2 / escape-01
                    :ARG0 (c18-7 / they)))

# ::snt at a chocolate cafe
# ::tokens ["at", "a", "chocolate", "cafe"]
# ::lemmas ["at", "a", "chocolate", "cafe"]
(c19-2 / be-located-at-91
       :ARG2 (c19-1 / cafe
                    :mod (c19-0 / chocolate)))

# ::snt I understand. My point is journalists must do their best to choose the words that describes correctly and precisely.
# ::tokens ["I", "understand", ".", "My", "point", "is", "journalists", "must", "do", "their", "best", "to", "choose", "the", "words", "that", "describes", "correctly", "and", "precisely", "."]
# ::lemmas ["i", "understand", ".", "my", "point", "be", "journalist", "must", "do", "their", "good", "to", "choose", "the", "word", "that", "describe", "correctly", "and", "precisely", "."]
(c20-4 / multi-sentence
       :snt1 (c20-5 / understand-01
                    :ARG0 (c20-7 / i))
       :snt2 (c20-8 / point-04
                    :ARG0 (c20-11 / i)
                    :ARG1 (c20-6 / obligate-01
                                 :ARG1 (c20-0 / journalist)
                                 :ARG2 (c20-9 / do-02
                                              :ARG0 c20-0
                                              :ARG1 (c20-12 / good-03
                                                            :ARG1 c20-0
                                                            :ARG2-of (c20-1 / have-degree-91
                                                                            :ARG1 c20-0
                                                                            :ARG3 (c20-10 / most)))
                                              :ARG2 (c20-13 / choose-01
                                                            :ARG0 c20-0
                                                            :ARG1 (c20-2 / word
                                                                         :ARG1-of (c20-3 / describe-01
                                                                                         :ARG1-of (c20-14 / correct-02)
                                                                                         :manner (c20-15 / precise))))))))

# ::snt Run!!!
# ::tokens ["Run", "!", "!", "!"]
# ::lemmas ["run", "!", "!", "!"]
(c21-0 / run-02
       :mode expressive)

# ::snt Clarke Jones is an apologist for weak socialist hug a camel philosophy.What a pathetic socialist wimp!!!
# ::tokens ["Clarke", "Jones", "is", "an", "apologist", "for", "weak", "socialist", "hug", "a", "camel", "philosophy", ".", "What", "a", "pathetic", "socialist", "wimp", "!", "!", "!"]
# ::lemmas ["Clarke", "Jones", "be", "an", "apologist", "for", "weak", "socialist", "hug", "a", "camel", "philosophy", ".", "what", "a", "pathetic", "socialist", "wimp", "!", "!", "!"]
(c22-2 / multi-sentence
       :snt1 (c22-16 / apologist
                     :domain (c22-8 / person
                                    :name (c22-6 / name
                                                 :op1 "Clarke"
                                                 :op2 "Jones"))
                     :topic (c22-0 / hug-01
                                   :ARG0 (c22-15 / person
                                                 :mod (c22-3 / political-movement
                                                             :name (c22-7 / name
                                                                          :op1 "socialism"))
                                                 :ARG1-of (c22-1 / weak-02))
                                   :ARG1 (c22-14 / philosophy
                                                 :mod (c22-10 / camel))))
       :snt2 (c22-5 / wimp
                    :domain (c22-4 / person
                                   :mod (c22-13 / pathetic)
                                   :mod (c22-9 / political-movement
                                               :name (c22-11 / name
                                                             :op1 "socialism")))
                    :degree (c22-12 / so)))

# ::snt why would u hold Hostages in a cafe ? what do they want? , all the coffee beans in the shop ?
# ::tokens ["why", "would", "u", "hold", "Hostages", "in", "a", "cafe", "?", "what", "do", "they", "want", "?", ",", "all", "the", "coffee", "beans", "in", "the", "shop", "?"]
# ::lemmas ["why", "would", "u", "hold", "Hostages", "in", "a", "cafe", "?", "what", "do", "they", "want", "?", ",", "all", "the", "coffee", "bean", "in", "the", "shop", "?"]
(c23-3 / multi-sentence
       :snt1 (c23-0 / hold-01
                    :ARG0 (c23-1 / you)
                    :ARG1 (c23-12 / hostage)
                    :location (c23-7 / cafe)
                    :ARG1-of (c23-6 / cause-01
                                    :ARG0 (c23-9 / amr-unknown)))
       :snt2 (c23-2 / want-01
                    :ARG0 (c23-10 / they)
                    :ARG1 (c23-4 / amr-unknown))
       :snt3 (c23-8 / coffee
                    :mod (c23-5 / all)
                    :location (c23-11 / shop)))

# ::snt It's out now isn't it. I hope Abbott can calm this guy .
# ::tokens ["It", "'s", "out", "now", "is", "n't", "it", ".", "I", "hope", "Abbott", "can", "calm", "this", "guy", "."]
# ::lemmas ["it", "be", "out", "now", "be", "not", "it", ".", "i", "hope", "Abbott", "can", "calm", "this", "guy", "."]
(c24-1 / multi-sentence
       :snt1 (c24-2 / out-01
                    :ARG1 (c24-3 / it)
                    :time (c24-4 / now)
                    :ARG1-of (c24-7 / request-confirmation-91))
       :snt2 (c24-0 / hope-01
                    :ARG0 (c24-9 / i)
                    :ARG1 (c24-6 / possible-01
                                 :ARG1 (c24-8 / calm-down-02
                                              :ARG0 (c24-12 / person
                                                            :name (c24-5 / name
                                                                         :op1 "Abbott"))
                                              :ARG1 (c24-10 / guy
                                                            :mod (c24-11 / this))))))

# ::snt YES is goneYES NHS LOVE PEACE ONEWORLDYES SNP TUSC GREEN OK
# ::tokens ["YES", "is", "goneYES", "NHS", "LOVE", "PEACE", "ONEWORLDYES", "SNP", "TUSC", "GREEN", "OK"]
# ::lemmas ["yes", "be", "goneye", "NHS", "LOVE", "PEACE", "oneworldyes", "SNP", "TUSC", "green", "ok"]
(c25-1 / multi-sentence
       :snt1 (c25-8 / go-01
                    :mode expressive)
       :snt2 (c25-0 / love-01
                    :ARG0 (c25-6 / government-organization
                                 :name (c25-3 / name
                                              :op1 "NHS"))
                    :ARG1 (c25-5 / peace))
       :snt3 (c25-9 / say-01
                    :ARG0 (c25-10 / political-party
                                  :name (c25-4 / name
                                               :op1 "SNP"))
                    :ARG1 (c25-2 / okay-01)
                    :mod c25-10
                    :name (c25-7 / name
                                 :op1 "SNP")))

# ::snt Thank you. This is what I call precise.
# ::tokens ["Thank", "you", ".", "This", "is", "what", "I", "call", "precise", "."]
# ::lemmas ["thank", "you", ".", "this", "be", "what", "i", "call", "precise", "."]
(c26-1 / multi-sentence
       :snt1 (c26-6 / thank-01
                    :ARG0 (c26-2 / i)
                    :ARG1 (c26-0 / you))
       :snt2 (c26-4 / call-01
                    :ARG0 c26-2
                    :ARG1 (c26-5 / this)
                    :ARG2 (c26-3 / precise)))

# ::snt But there's at least one, right?
# ::tokens ["But", "there", "'s", "at", "least", "one", ",", "right", "?"]
# ::lemmas ["but", "there", "be", "at", "least", "one", ",", "right", "?"]
(c27-2 / contrast-01
       :ARG2 (c27-0 / exist-01
                    :ARG1 (c27-3 / thing
                                 :quant (c27-4 / at-least
                                               :op1 1))
                    :ARG1-of (c27-1 / request-confirmation-91)))

# ::snt : people so far have fled Sydney cafe. Unknown number of hostages still inside. prayin
# ::tokens [":", "people", "so", "far", "have", "fled", "Sydney", "cafe", ".", "Unknown", "number", "of", "hostages", "still", "inside", ".", "prayin"]
# ::lemmas [":", "people", "so", "far", "have", "flee", "Sydney", "cafe", ".", "unknown", "number", "of", "hostage", "still", "inside", ".", "prayin"]
(c28-2 / multi-sentence
       :snt1 (c28-1 / flee-05
                    :ARG0 (c28-7 / person)
                    :ARG1 (c28-9 / cafe
                                 :location (c28-8 / city
                                                  :name (c28-5 / name
                                                               :op1 "Sydney")))
                    :time (c28-10 / so-far))
       :snt2 (c28-6 / number
                    :ARG1-of (c28-11 / know-01
                                     :polarity -)
                    :quant-of (c28-0 / hostage
                                     :location (c28-4 / inside))
                    :mod (c28-3 / still))
       :snt3 (c28-12 / pray-01))

# ::snt Hold the fuck on, I'll be there in a minute.
# ::tokens ["Hold", "the", "fuck", "on", ",", "I", "'ll", "be", "there", "in", "a", "minute", "."]
# ::lemmas ["hold", "the", "fuck", "on", ",", "i", "'ll", "be", "there", "in", "a", "minute", "."]
(c29-0 / hold-on-05
       :ARG1 (c29-1 / you)
       :mod (c29-2 / fuck
                   :mode expressive)
       :ARG1-of (c29-7 / cause-01
                       :ARG0 (c29-4 / be-located-at-91
                                    :ARG1 (c29-5 / i)
                                    :ARG2 (c29-9 / there)
                                    :time (c29-10 / after
                                                  :op1 (c29-6 / now)
                                                  :quant (c29-8 / temporal-quantity
                                                                :unit (c29-3 / minute)
                                                                :quant 1)))))
