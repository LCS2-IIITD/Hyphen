# ::snt fucc them police, StL stand up
# ::tokens ["fucc", "them", "police", ",", "StL", "stand", "up"]
# ::lemmas ["fucc", "they", "police", ",", "StL", "stand", "up"]
(c1-7 / and
      :op1 (c1-1 / fuck-01
                 :ARG0 (c1-0 / you)
                 :ARG1 (c1-5 / they)
                 :mod (c1-3 / police)
                 :mode imperative)
      :op2 (c1-4 / stand-up-07
                 :ARG1 (c1-6 / person
                             :name (c1-2 / name
                                         :op1 "StL"))
                 :mode imperative))

# ::snt check out my new single called THE SHOWER POLE
# ::tokens ["check", "out", "my", "new", "single", "called", "THE", "SHOWER", "POLE"]
# ::lemmas ["check", "out", "my", "new", "single", "call", "the", "SHOWER", "pole"]
(c2-4 / check-out-05
      :ARG0 (c2-0 / you)
      :ARG1 (c2-5 / single
                  :name (c2-2 / name
                              :op1 "The"
                              :op2 "Shower"
                              :op3 "Pole")
                  :ARG1-of (c2-3 / new-01)
                  :poss (c2-1 / i))
      :mode imperative)

# ::snt Dogs? In ? RT : Right now in MO following the killing of -year-old
# ::tokens ["Dogs", "?", "In", "?", "RT", ":", "Right", "now", "in", "MO", "following", "the", "killing", "of", "-year", "-", "old"]
# ::lemmas ["dog", "?", "in", "?", "RT", ":", "right", "now", "in", "MO", "follow", "the", "killing", "of", "-year", "-", "old"]
(c3-2 / multi-sentence
      :snt1 (c3-7 / dummy
                  :polarity (c3-14 / amr-unknown))
      :snt2 (c3-6 / publication
                  :name (c3-4 / name
                              :op1 "RT"))
      :snt3 (c3-1 / follow-01
                  :ARG1 (c3-12 / kill-01
                               :ARG1 (c3-13 / person
                                            :age (c3-11 / temporal-quantity
                                                        :unit (c3-0 / year)
                                                        :quant 12)))
                  :time (c3-5 / now
                              :mod (c3-8 / right))
                  :location (c3-10 / state
                                   :name (c3-9 / name
                                               :op1 "Missouri"))
                  :polarity (c3-3 / amr-unknown)))

# ::snt Its sad how they treat us!
# ::tokens ["Its", "sad", "how", "they", "treat", "us", "!"]
# ::lemmas ["its", "sad", "how", "they", "treat", "we", "!"]
(c4-3 / sad-02
      :ARG0 (c4-4 / thing
                  :ARG2-of (c4-2 / treat-01
                                 :ARG0 (c4-1 / they)
                                 :ARG1 (c4-0 / we))))

# ::snt believe it's nothin new. Sad but true. They, (racist), want as many of us as possible gone
# ::tokens ["believe", "it", "'s", "nothin", "new", ".", "Sad", "but", "true", ".", "They", ",", "(", "racist", ")", ",", "want", "as", "many", "of", "us", "as", "possible", "gone"]
# ::lemmas ["believe", "it", "be", "nothin", "new", ".", "sad", "but", "true", ".", "they", ",", "(", "racist", ")", ",", "want", "as", "many", "of", "we", "as", "possible", "gone"]
(c5-3 / multi-sentence
      :snt1 (c5-4 / believe-01
                  :ARG0 (c5-1 / you)
                  :ARG1 (c5-8 / new-01
                              :ARG1 (c5-6 / it)
                              :polarity -))
      :snt2 (c5-11 / contrast-01
                   :ARG1 (c5-15 / sad-02)
                   :ARG2 (c5-16 / true-01))
      :snt3 (c5-2 / want-01
                  :ARG0 (c5-14 / they
                               :mod (c5-10 / racist))
                  :ARG1 (c5-12 / go-02
                               :ARG0 (c5-7 / we
                                           :ARG1-of (c5-0 / have-quant-91
                                                          :ARG2 (c5-9 / many)
                                                          :ARG3 (c5-5 / equal)
                                                          :ARG4 (c5-13 / possible-01
                                                                       :ARG1 c5-12))))))

# ::snt "If this was Ferguson, I would have shot you!" -
# ::tokens ["\"", "If", "this", "was", "Ferguson", ",", "I", "would", "have", "shot", "you", "!", "\"", "-"]
# ::lemmas ["\"", "if", "this", "be", "Ferguson", ",", "i", "would", "have", "shoot", "you", "!", "\"", "-"]
(c7-4 / shoot-02
      :ARG0 (c7-1 / i)
      :ARG1 (c7-0 / you)
      :condition (c7-3 / person
                       :name (c7-2 / name
                                   :op1 "Ferguson")
                       :domain (c7-5 / this)))

# ::snt I don't get it ... Wake up damn !
# ::tokens ["I", "do", "n't", "get", "it", "...", "Wake", "up", "damn", "!"]
# ::lemmas ["i", "do", "not", "get", "it", "...", "wake", "up", "damn", "!"]
(c9-2 / multi-sentence
      :snt1 (c9-6 / get-30
                  :ARG0 (c9-3 / i)
                  :ARG1 (c9-5 / it)
                  :polarity -)
      :snt2 (c9-0 / wake-up-02
                  :ARG0 (c9-1 / you
                              :ARG1-of c9-0)
                  :mod (c9-4 / damn
                             :mode expressive)
                  :mode imperative))

# ::snt racism white supremacy. Tariq Nasheed tells the truth. Educate yourself black brothers and sisters
# ::tokens ["racism", "white", "supremacy", ".", "Tariq", "Nasheed", "tells", "the", "truth", ".", "Educate", "yourself", "black", "brothers", "and", "sisters"]
# ::lemmas ["racism", "white", "supremacy", ".", "Tariq", "Nasheed", "tell", "the", "truth", ".", "educate", "yourself", "black", "brother", "and", "sister"]
(c10-0 / multi-sentence
       :snt1 (c10-2 / supremacy
                    :mod (c10-1 / person
                                :ARG1-of (c10-14 / white-02))
                    :mod (c10-12 / racism))
       :snt2 (c10-18 / tell-01
                     :ARG0 (c10-3 / person
                                  :name (c10-11 / name
                                                :op1 "Tariq"
                                                :op2 "Nasheed"))
                     :ARG1 (c10-17 / truth))
       :snt3 (c10-9 / educate-01
                    :ARG0 (c10-16 / you
                                  :ARG1-of c10-9)
                    :ARG2 (c10-5 / and
                                 :op1 (c10-7 / person
                                             :ARG0-of (c10-6 / have-rel-role-91
                                                             :ARG1 c10-16
                                                             :ARG2 (c10-8 / brother)))
                                 :op2 (c10-13 / person
                                              :ARG0-of (c10-4 / have-rel-role-91
                                                              :ARG1 c10-16
                                                              :ARG2 (c10-10 / sister)))
                                 :ARG1-of (c10-15 / black-05))
                    :mode imperative))

# ::snt Check out 's Tweet
# ::tokens ["Check", "out", "'s", "Tweet"]
# ::lemmas ["check", "out", "'s", "Tweet"]
(c11-2 / check-out-05
       :ARG0 (c11-0 / you)
       :ARG1 (c11-4 / thing
                    :ARG1-of (c11-3 / tweet-01
                                    :ARG0 (c11-1 / they)))
       :mode imperative)

# ::snt :THATS FOUL
# ::tokens [":", "THATS", "FOUL"]
# ::lemmas [":", "THATS", "FOUL"]
(c12-0 / foul
       :domain (c12-1 / that))

# ::snt itz about time we start doin bak2da pigs like they do2our community! $$$
# ::tokens ["itz", "about", "time", "we", "start", "doin", "bak2da", "pigs", "like", "they", "do2our", "community", "!", "$", "$", "$"]
# ::lemmas ["itz", "about", "time", "we", "start", "doin", "bak2da", "pig", "like", "they", "do2our", "community", "!", "$", "$", "$"]
(c13-2 / be-temporally-at-91
       :ARG1 (c13-8 / start-01
                    :ARG0 (c13-0 / we)
                    :ARG1 (c13-4 / do-02
                                 :ARG0 c13-0
                                 :ARG1 (c13-3 / pig
                                              :mod (c13-5 / bak2da))
                                 :ARG1-of (c13-6 / resemble-01
                                                 :ARG2 (c13-1 / do-02
                                                              :ARG0 c13-0
                                                              :ARG1 (c13-7 / community
                                                                           :poss c13-0)))))
       :ARG2 (c13-10 / about
                     :op1 (c13-9 / time)))

# ::snt smh History Repeating It's Self Once Again
# ::tokens ["smh", "History", "Repeating", "It", "'s", "Self", "Once", "Again"]
# ::lemmas ["smh", "history", "repeat", "it", "be", "self", "once", "again"]
(c14-0 / history
       :mod (c14-5 / again
                   :mod (c14-1 / once))
       :mod (c14-4 / smh
                   :mode expressive)
       :ARG0-of (c14-3 / repeat-01
                       :ARG1 (c14-2 / self
                                    :poss c14-0)))

# ::snt TO ERYBODY IN MIZZ AND ERY STATE DONT GO OUT HERE DOIN NO DUMB SHIT TO DA POLICE THATS NOT THE ANSWER
# ::tokens ["TO", "ERYBODY", "IN", "MIZZ", "AND", "ERY", "STATE", "DONT", "GO", "OUT", "HERE", "DOIN", "NO", "DUMB", "SHIT", "TO", "DA", "POLICE", "THATS", "NOT", "THE", "ANSWER"]
# ::lemmas ["to", "ERYBODY", "in", "MIZZ", "and", "ERY", "state", "dont", "GO", "out", "here", "DOIN", "no", "dumb", "SHIT", "to", "DA", "POLICE", "THATS", "not", "the", "ANSWER"]
(c15-13 / and
        :op1 (c15-11 / go-02
                     :ARG0 (c15-7 / and
                                  :op1 (c15-5 / everybody
                                              :location (c15-12 / state))
                                  :op2 (c15-6 / state
                                              :mod (c15-3 / emergency)))
                     :ARG4 (c15-4 / out
                                  :location (c15-0 / here))
                     :polarity -)
        :op2 (c15-10 / do-02
                     :ARG0 c15-7
                     :ARG1 (c15-2 / shit
                                  :mod (c15-1 / dummy)
                                  :polarity -)
                     :ARG2 (c15-9 / police
                                  :mod (c15-14 / district))
                     :polarity -)
        :ARG0-of (c15-8 / answer-01
                        :polarity -))

# ::snt Check this out New music Alert Tattoos And Scars u can't deny real shit
# ::tokens ["Check", "this", "out", "New", "music", "Alert", "Tattoos", "And", "Scars", "u", "ca", "n't", "deny", "real", "shit"]
# ::lemmas ["check", "this", "out", "new", "music", "Alert", "Tattoos", "and", "Scars", "u", "can", "not", "deny", "real", "shit"]
(c16-6 / check-out-05
       :ARG0 (c16-0 / you)
       :ARG1 (c16-10 / this
                     :ARG1-of (c16-2 / include-91
                                     :ARG2 (c16-9 / show
                                                  :name (c16-3 / name
                                                               :op1 "New"
                                                               :op2 "Music"
                                                               :op3 "Award"
                                                               :op4 "Tattoos"
                                                               :op5 "And"
                                                               :op6 "Scars"))))
       :ARG1-of (c16-5 / cause-01
                       :ARG0 (c16-4 / possible-01
                                    :ARG1 (c16-7 / deny-01
                                                 :ARG0 c16-0
                                                 :ARG1 (c16-1 / shit
                                                              :ARG1-of (c16-8 / real-04)))
                                    :polarity -))
       :mode imperative)

# ::snt he shot him ten times
# ::tokens ["he", "shot", "him", "ten", "times"]
# ::lemmas ["he", "shoot", "he", "ten", "time"]
(c17-0 / shoot-01
       :ARG0 (c17-1 / he)
       :ARG2 (c17-2 / he)
       :frequency 10)

# ::snt everytime we see the same story again &amp; again !
# ::tokens ["everytime", "we", "see", "the", "same", "story", "again", "&", "amp", ";", "again", "!"]
# ::lemmas ["everytime", "we", "see", "the", "same", "story", "again", "&", "amp", ";", "again", "!"]
(c18-7 / and
       :op1 (c18-3 / again
                   :frequency (c18-5 / rate-entity-91
                                     :ARG4 (c18-6 / see-01
                                                  :ARG0 (c18-0 / we)
                                                  :ARG1 (c18-2 / story
                                                               :ARG1-of (c18-1 / same-01)))))
       :op2 (c18-4 / again
                   :frequency c18-5
                   :ARG4 c18-6))

# ::snt Does that surprise you? They'd have the fire hoses out if they still could. I'm sick of the double standards of the police.
# ::tokens ["Does", "that", "surprise", "you", "?", "They", "'d", "have", "the", "fire", "hoses", "out", "if", "they", "still", "could", ".", "I", "'m", "sick", "of", "the", "double", "standards", "of", "the", "police", "."]
# ::lemmas ["do", "that", "surprise", "you", "?", "they", "would", "have", "the", "fire", "hose", "out", "if", "they", "still", "could", ".", "i", "be", "sick", "of", "the", "double", "standard", "of", "the", "police", "."]
(c19-3 / multi-sentence
       :snt1 (c19-14 / surprise-01
                     :polarity (c19-17 / amr-unknown)
                     :ARG0 (c19-15 / that)
                     :ARG1 (c19-1 / you))
       :snt2 (c19-0 / have-condition-91
                    :ARG1 (c19-2 / have-06
                                 :ARG0 (c19-13 / they)
                                 :ARG1 (c19-10 / hose
                                               :mod (c19-4 / fire))
                                 :mod (c19-6 / out))
                    :ARG2 (c19-11 / possible-01
                                  :ARG1 c19-2
                                  :mod (c19-8 / still)))
       :snt3 (c19-5 / sick-04
                    :ARG0 (c19-7 / standard
                                 :mod (c19-12 / double)
                                 :poss (c19-16 / police))
                    :ARG1 (c19-9 / i)))

# ::snt WHERE THE HELL IS CNN NEWS O THIS IS NOT A DAM WHITE KID
# ::tokens ["WHERE", "THE", "HELL", "IS", "CNN", "NEWS", "O", "THIS", "IS", "NOT", "A", "DAM", "WHITE", "KID"]
# ::lemmas ["where", "the", "hell", "be", "CNN", "news", "o", "this", "be", "not", "a", "DAM", "WHITE", "KID"]
(c20-9 / and
       :op1 (c20-2 / be-located-at-91
                   :ARG1 (c20-6 / broadcast-program
                                :name (c20-4 / name
                                             :op1 "CNN"
                                             :op2 "News"))
                   :ARG2 (c20-3 / amr-unknown
                                :mod (c20-0 / hell
                                            :mode expressive)))
       :op2 (c20-8 / kill-01
                   :ARG1 (c20-5 / person
                                :ARG1-of (c20-1 / white-02)
                                :mod (c20-7 / this))
                   :polarity -))

# ::snt they tryna hide stuff they put his body n a police truck instead of an ambulance &amp;left him in the street for hrs
# ::tokens ["they", "tryna", "hide", "stuff", "they", "put", "his", "body", "n", "a", "police", "truck", "instead", "of", "an", "ambulance", "&", "amp;left", "him", "in", "the", "street", "for", "hrs"]
# ::lemmas ["they", "tryna", "hide", "stuff", "they", "put", "his", "body", "n", "a", "police", "truck", "instead", "of", "an", "ambulance", "&", "amp;left", "he", "in", "the", "street", "for", "hrs"]
(c21-0 / multi-sentence
       :snt1 (c21-21 / try-01
                     :ARG0 (c21-17 / they)
                     :ARG1 (c21-7 / hide-01
                                  :ARG0 c21-17
                                  :ARG1 (c21-3 / stuff)))
       :snt2 (c21-2 / put-01
                    :ARG0 (c21-15 / they)
                    :ARG1 (c21-9 / body
                                 :poss (c21-6 / he))
                    :ARG2 (c21-19 / truck
                                  :mod (c21-4 / police)
                                  :ARG1-of (c21-14 / instead-of-91
                                                   :ARG2 (c21-5 / and
                                                                :op1 (c21-13 / ambulance)
                                                                :op2 (c21-11 / amp)))))
       :snt3 (c21-8 / leave-12
                    :ARG0 (c21-20 / they)
                    :ARG1 (c21-1 / he)
                    :location (c21-10 / street)
                    :duration (c21-12 / multiple
                                      :op1 (c21-18 / temporal-quantity
                                                   :unit (c21-16 / hour)
                                                   :quant 1))))

# ::snt DAM COPS HIDE AND USE DOGS,
# ::tokens ["DAM", "COPS", "HIDE", "AND", "USE", "DOGS", ","]
# ::lemmas ["DAM", "COPS", "hide", "and", "use", "dog", ","]
(c22-4 / and
       :op1 (c22-3 / side-01
                   :ARG0 (c22-2 / computer))
       :op2 (c22-0 / use-01
                   :ARG0 c22-2
                   :ARG1 (c22-1 / dummy)))

# ::snt Yes dogs...in . What? You thought we were free? Life may be different for ya'll since u make music and got $$..not us tho
# ::tokens ["Yes", "dogs", "...", "in", ".", "What", "?", "You", "thought", "we", "were", "free", "?", "Life", "may", "be", "different", "for", "ya'll", "since", "u", "make", "music", "and", "got", "$", "$", "..", "not", "us", "tho"]
# ::lemmas ["yes", "dog", "...", "in", ".", "what", "?", "you", "think", "we", "be", "free", "?", "life", "may", "be", "different", "for", "ya'll", "since", "u", "make", "music", "and", "get", "$", "$", "..", "not", "we", "tho"]
(c23-1 / multi-sentence
       :snt1 (c23-16 / yes)
       :snt2 (c23-5 / ask-01
                    :ARG1 (c23-15 / amr-unknown)
                    :ARG2 (c23-4 / dog))
       :snt3 (c23-20 / think-01
                     :ARG0 (c23-19 / you)
                     :ARG1 (c23-7 / free-04
                                  :ARG1 (c23-14 / we)))
       :snt4 (c23-3 / possible-01
                    :ARG1 (c23-0 / differ-02
                                 :ARG1 (c23-8 / life)
                                 :ARG2 (c23-2 / you
                                              :mod (c23-17 / 'll))
                                 :ARG1-of (c23-18 / cause-01
                                                  :ARG0 (c23-10 / and
                                                                :op1 (c23-11 / make-01
                                                                             :ARG0 c23-2
                                                                             :ARG1 (c23-9 / music))
                                                                :op2 (c23-12 / get-01
                                                                             :ARG0 c23-2
                                                                             :ARG1 (c23-13 / dollar)
                                                                             :polarity -))))
                    :ARG1-of (c23-6 / have-concession-91)))
