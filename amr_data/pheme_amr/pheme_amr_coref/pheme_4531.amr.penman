# ::snt Whoa whoa whoa no charges as an adult, cmon now lets set the record straight.
# ::tokens ["Whoa", "whoa", "whoa", "no", "charges", "as", "an", "adult", ",", "cmon", "now", "lets", "set", "the", "record", "straight", "."]
# ::lemmas ["whoa", "whoa", "whoa", "no", "charge", "as", "an", "adult", ",", "cmon", "now", "let", "set", "the", "record", "straight", "."]
(c1-10 / and
       :op1 (c1-8 / charge-05
                  :mod (c1-0 / whoa
                             :mode expressive)
                  :time (c1-4 / adult)
                  :mod (c1-5 / whoa
                             :mode expressive)
                  :polarity -)
       :op2 (c1-1 / let-01
                  :ARG0 (c1-2 / we)
                  :ARG1 (c1-9 / set-02
                              :ARG0 c1-2
                              :ARG1 (c1-7 / record)
                              :ARG2 (c1-3 / straight))
                  :time (c1-6 / now)
                  :mode imperative))

# ::snt really! Come on!
# ::tokens ["really", "!", "Come", "on", "!"]
# ::lemmas ["really", "!", "come", "on", "!"]
(c2-2 / multi-sentence
      :snt1 (c2-1 / real-04)
      :snt2 (c2-0 / come-on-25
                  :ARG1 (c2-3 / you)
                  :mode imperative))

# ::snt sorry for the typos. Moving too fast.
# ::tokens ["sorry", "for", "the", "typos", ".", "Moving", "too", "fast", "."]
# ::lemmas ["sorry", "for", "the", "typo", ".", "move", "too", "fast", "."]
(c3-2 / multi-sentence
      :snt1 (c3-5 / sorry-01
                  :ARG2 (c3-6 / typo))
      :snt2 (c3-3 / move-01
                  :ARG1-of (c3-1 / fast-02
                                 :ARG2-of (c3-0 / have-degree-91
                                                :ARG1 c3-3
                                                :ARG3 (c3-4 / too)))))

# ::snt : that's the first thing you want to know.... Sick God bless his cold heart.
# ::tokens [":", "that", "'s", "the", "first", "thing", "you", "want", "to", "know", "....", "Sick", "God", "bless", "his", "cold", "heart", "."]
# ::lemmas [":", "that", "be", "the", "first", "thing", "you", "want", "to", "know", "....", "Sick", "God", "bless", "his", "cold", "heart", "."]
(c4-3 / multi-sentence
      :snt1 (c4-1 / want-01
                  :ARG0 (c4-2 / you)
                  :ARG1 (c4-6 / know-01
                              :ARG0 c4-2
                              :ARG1 (c4-11 / thing
                                           :ord (c4-5 / ordinal-entity
                                                      :value 1))))
      :snt2 (c4-4 / bless-01
                  :ARG0 (c4-8 / person
                              :name (c4-7 / name
                                          :op1 "God")
                              :ARG1-of (c4-10 / sick-05)
                              :part (c4-0 / heart
                                          :ARG1-of (c4-9 / cold-01)
                                          :ARG1-of c4-4))))

# ::snt The world now knows his name, tonight get to know Mike Brown the person at
# ::tokens ["The", "world", "now", "knows", "his", "name", ",", "tonight", "get", "to", "know", "Mike", "Brown", "the", "person", "at"]
# ::lemmas ["the", "world", "now", "know", "his", "name", ",", "tonight", "get", "to", "know", "Mike", "Brown", "the", "person", "at"]
(c5-13 / and
       :op1 (c5-12 / know-01
                   :ARG0 (c5-1 / world)
                   :ARG1 (c5-4 / name
                               :poss (c5-0 / he))
                   :time (c5-5 / now))
       :op2 (c5-9 / get-22
                  :ARG0 (c5-2 / you)
                  :ARG1 (c5-3 / know-01
                              :ARG0 c5-2
                              :ARG1 (c5-6 / person
                                          :name (c5-7 / name
                                                      :op1 "Mike"
                                                      :op2 "Brown")))
                  :time (c5-8 / date-entity
                              :dayperiod (c5-10 / night)
                              :mod (c5-11 / today))
                  :mode imperative))

# ::snt does your new station have an Internet stream? I'm sure Pele all over would like to tune in &amp; it's not
# ::tokens ["does", "your", "new", "station", "have", "an", "Internet", "stream", "?", "I", "'m", "sure", "Pele", "all", "over", "would", "like", "to", "tune", "in", "&", "amp", ";", "it", "'s", "not"]
# ::lemmas ["do", "your", "new", "station", "have", "an", "internet", "stream", "?", "i", "be", "sure", "Pele", "all", "over", "would", "like", "to", "tune", "in", "&", "amp", ";", "it", "be", "not"]
(c6-3 / multi-sentence
      :snt1 (c6-0 / have-03
                  :polarity (c6-16 / amr-unknown)
                  :ARG0 (c6-14 / station
                               :poss (c6-1 / you)
                               :ARG1-of (c6-8 / new-01))
                  :ARG1 (c6-5 / stream-03
                              :ARG1 (c6-7 / internet)))
      :snt2 (c6-2 / sure-02
                  :ARG0 (c6-13 / i)
                  :ARG1 (c6-4 / like-02
                              :ARG0 (c6-10 / person
                                           :name (c6-9 / name
                                                       :op1 "Pele")
                                           :location (c6-6 / all-over))
                              :ARG1 (c6-15 / tune-in-02
                                           :ARG0 c6-10
                                           :ARG1 (c6-12 / company
                                                        :name (c6-11 / name
                                                                     :op1 "&amp"))))))

# ::snt the wrong Mike Brown
# ::tokens ["the", "wrong", "Mike", "Brown"]
# ::lemmas ["the", "wrong", "Mike", "Brown"]
(c7-2 / person
      :name (c7-0 / name
                  :op1 "Mike"
                  :op2 "Brown")
      :ARG1-of (c7-1 / wrong-04))

# ::snt ???&gt;&gt;&gt;
# ::tokens ["?", "?", "?", "&", "gt;&gt;&gt", ";"]
# ::lemmas ["?", "?", "?", "&", "gt;&gt;&gt", ";"]
(c8-0 / string-entity)

# ::snt Let's hear about his record, if any?
# ::tokens ["Let", "'s", "hear", "about", "his", "record", ",", "if", "any", "?"]
# ::lemmas ["let", "us", "hear", "about", "his", "record", ",", "if", "any", "?"]
(c9-0 / hear-01
      :ARG0 (c9-1 / we)
      :ARG1 (c9-3 / truth-value
                  :polarity-of (c9-2 / record-01
                                     :ARG0 (c9-4 / he)))
      :mode imperative)

# ::snt not the first thing, but it's important.
# ::tokens ["not", "the", "first", "thing", ",", "but", "it", "'s", "important", "."]
# ::lemmas ["not", "the", "first", "thing", ",", "but", "it", "be", "important", "."]
(c10-1 / contrast-01
       :ARG1 (c10-0 / thing
                    :ord (c10-2 / ordinal-entity
                                :value 1
                                :polarity -))
       :ARG2 (c10-3 / important-01
                    :ARG1 c10-0))

# ::snt that's the first thing you want to know.... Sick
# ::tokens ["that", "'s", "the", "first", "thing", "you", "want", "to", "know", "....", "Sick"]
# ::lemmas ["that", "be", "the", "first", "thing", "you", "want", "to", "know", "....", "sick"]
(c11-6 / and
       :op1 (c11-0 / want-01
                   :ARG0 (c11-1 / you)
                   :ARG1 (c11-3 / know-01
                                :ARG0 c11-1
                                :ARG1 (c11-5 / thing
                                             :ord (c11-2 / ordinal-entity
                                                         :value 1))))
       :op2 (c11-4 / sick-05
                   :ARG1 c11-1))

# ::snt , Boooooom, that just happened!
# ::tokens [",", "Boooooom", ",", "that", "just", "happened", "!"]
# ::lemmas [",", "boooooom", ",", "that", "just", "happen", "!"]
(c12-1 / event
       :mod (c12-0 / just)
       :mod (c12-2 / boom
                   :mode expressive))

# ::snt jackasz
# ::tokens ["jackasz"]
# ::lemmas ["jackasz"]
(c13-1 / person
       :name (c13-0 / name
                    :op1 "Jackasz"))

# ::snt link?!?
# ::tokens ["link", "?", "!", "?"]
# ::lemmas ["link", "?", "!", "?"]
(c14-0 / link-01
       :polarity (c14-1 / amr-unknown))

# ::snt record or not he didn't deserve that!
# ::tokens ["record", "or", "not", "he", "did", "n't", "deserve", "that", "!"]
# ::lemmas ["record", "or", "not", "he", "do", "not", "deserve", "that", "!"]
(c15-4 / deserve-01
       :ARG0 (c15-0 / he)
       :ARG1 (c15-6 / that)
       :ARG1-of (c15-3 / regardless-91
                       :ARG2 (c15-1 / or
                                    :op1 (c15-2 / record-01
                                                :ARG0 c15-0)
                                    :op2 (c15-5 / truth-value
                                                :polarity-of c15-6)))
       :polarity -)

# ::snt yes
# ::tokens ["yes"]
# ::lemmas ["yes"]
(c16-0 / yes)

# ::snt Also and others are spreading FALSE information about saying he has a criminal record. !
# ::tokens ["Also", "and", "others", "are", "spreading", "FALSE", "information", "about", "saying", "he", "has", "a", "criminal", "record", ".", "!"]
# ::lemmas ["also", "and", "other", "be", "spread", "false", "information", "about", "say", "he", "have", "a", "criminal", "record", ".", "!"]
(c17-9 / spread-03
       :ARG0 (c17-12 / and
                     :op1 (c17-6 / person
                                 :mod (c17-4 / also))
                     :op2 (c17-11 / person
                                  :mod (c17-2 / other)))
       :ARG1 (c17-5 / information
                    :ARG1-of (c17-10 / true-01
                                     :polarity -)
                    :topic (c17-3 / say-01
                                  :ARG0 c17-12
                                  :ARG1 (c17-0 / have-03
                                               :ARG0 (c17-1 / he)
                                               :ARG1 (c17-7 / record-01
                                                            :ARG1 (c17-8 / criminal-03))))))

# ::snt !
# ::tokens ["!"]
# ::lemmas ["!"]
(c18-0 / thing
       :mode expressive)

# ::snt what about this here Andy
# ::tokens ["what", "about", "this", "here", "Andy"]
# ::lemmas ["what", "about", "this", "here", "Andy"]
(c19-3 / say-01
       :ARG0 (c19-0 / i)
       :ARG1 (c19-5 / amr-unknown
                    :topic (c19-4 / this))
       :ARG2 (c19-2 / person
                    :name (c19-1 / name
                                 :op1 "Andy")))

# ::snt getting adequate national coverage
# ::tokens ["getting", "adequate", "national", "coverage"]
# ::lemmas ["get", "adequate", "national", "coverage"]
(c20-2 / get-01
       :ARG1 (c20-1 / cover-03
                    :mod (c20-0 / nation)
                    :mod (c20-3 / adequate)))

# ::snt download fox2 phone app
# ::tokens ["download", "fox2", "phone", "app"]
# ::lemmas ["download", "fox2", "phone", "app"]
(c21-3 / download-01
       :ARG0 (c21-0 / you)
       :ARG1 (c21-5 / app
                    :mod (c21-2 / phone)
                    :mod (c21-4 / company
                                :name (c21-1 / name
                                             :op1 "Fox2")))
       :mode imperative)

# ::snt he just turned , so "as an adult" not very forthcoming. Neither are the police, so I guess that's normal.
# ::tokens ["he", "just", "turned", ",", "so", "\"", "as", "an", "adult", "\"", "not", "very", "forthcoming", ".", "Neither", "are", "the", "police", ",", "so", "I", "guess", "that", "'s", "normal", "."]
# ::lemmas ["he", "just", "turn", ",", "so", "\"", "as", "an", "adult", "\"", "not", "very", "forthcoming", ".", "neither", "be", "the", "police", ",", "so", "i", "guess", "that", "be", "normal", "."]
(c22-3 / multi-sentence
       :snt1 (c22-12 / turn-02
                     :ARG1 (c22-1 / he)
                     :time (c22-0 / just)
                     :ARG0-of (c22-9 / cause-01
                                     :ARG1 (c22-2 / forthcoming
                                                  :manner (c22-13 / adult
                                                                  :domain c22-1)
                                                  :degree (c22-6 / very)
                                                  :polarity -)))
       :snt2 (c22-7 / police
                    :ARG0-of (c22-8 / cause-01
                                    :ARG1 (c22-10 / guess-01
                                                  :ARG0 (c22-4 / i)
                                                  :ARG1 (c22-5 / normal-02
                                                               :ARG1 (c22-11 / that))))
                    :polarity -))

# ::snt ummm pretty sure Andy he does.
# ::tokens ["ummm", "pretty", "sure", "Andy", "he", "does", "."]
# ::lemmas ["ummm", "pretty", "sure", "Andy", "he", "do", "."]
(c23-5 / sure-02
       :ARG0 (c23-1 / i)
       :ARG1 (c23-4 / do-02
                    :ARG0 (c23-3 / person
                                 :name (c23-2 / name
                                              :op1 "Andy")))
       :degree (c23-6 / pretty)
       :mod (c23-0 / umm
                   :mode expressive))

# ::snt no criminal record as an adult
# ::tokens ["no", "criminal", "record", "as", "an", "adult"]
# ::lemmas ["no", "criminal", "record", "as", "an", "adult"]
(c24-0 / record-01
       :ARG1 (c24-2 / adult)
       :ARG2 (c24-1 / criminal-03)
       :polarity -)
