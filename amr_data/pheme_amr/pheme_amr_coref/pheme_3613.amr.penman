# ::snt As a police reporter, you should know we dont have SWAT. They're elements of the TOU. (TRG in some states)
# ::tokens ["As", "a", "police", "reporter", ",", "you", "should", "know", "we", "do", "nt", "have", "SWAT", ".", "They", "'re", "elements", "of", "the", "TOU", ".", "(", "TRG", "in", "some", "states", ")"]
# ::lemmas ["as", "a", "police", "reporter", ",", "you", "should", "know", "we", "do", "not", "have", "SWAT", ".", "they", "be", "element", "of", "the", "TOU", ".", "(", "TRG", "in", "some", "state", ")"]
(c1-4 / multi-sentence
      :snt1 (c1-12 / recommend-01
                   :ARG1 (c1-16 / know-01
                                :ARG0 (c1-1 / you
                                            :ARG0-of (c1-0 / have-org-role-91
                                                           :ARG1 (c1-11 / police)
                                                           :ARG3 (c1-8 / report-01)))
                                :ARG1 (c1-17 / have-03
                                             :ARG0 (c1-2 / we)
                                             :ARG1 (c1-9 / weapon
                                                         :ARG2-of (c1-14 / special-02))
                                             :polarity -))
                   :ARG2 c1-1)
      :snt2 (c1-6 / element
                  :part-of (c1-5 / organization
                                 :name (c1-10 / name
                                              :op1 "TOU"))
                  :domain (c1-15 / they))
      :snt3 (c1-13 / try-02
                   :location (c1-7 / state
                                   :quant (c1-3 / some))))

# ::snt We don't have SWAT. This is Australia.
# ::tokens ["We", "do", "n't", "have", "SWAT", ".", "This", "is", "Australia", "."]
# ::lemmas ["we", "do", "not", "have", "SWAT", ".", "this", "be", "Australia", "."]
(c2-2 / multi-sentence
      :snt1 (c2-0 / have-03
                  :ARG0 (c2-1 / we)
                  :ARG1 (c2-3 / weapon
                              :ARG2-of (c2-6 / special-02))
                  :polarity -)
      :snt2 (c2-5 / country
                  :name (c2-4 / name
                              :op1 "Australia")
                  :domain (c2-7 / this)))

# ::snt haven't police &amp; ABC guest experts requested that people not report on live ops?
# ::tokens ["have", "n't", "police", "&", "amp", ";", "ABC", "guest", "experts", "requested", "that", "people", "not", "report", "on", "live", "ops", "?"]
# ::lemmas ["have", "not", "police", "&", "amp", ";", "ABC", "guest", "expert", "request", "that", "people", "not", "report", "on", "live", "op", "?"]
(c3-1 / multi-sentence
      :snt1 (c3-16 / and
                   :op1 (c3-10 / police-01)
                   :op2 (c3-15 / person
                               :name (c3-8 / name
                                           :op1 "amp"))
                   :polarity (c3-6 / amr-unknown))
      :snt2 (c3-11 / request-01
                   :ARG0 (c3-2 / person
                               :ARG1-of (c3-5 / expert-01
                                              :ARG2 (c3-13 / guest))
                               :mod (c3-14 / publication
                                           :name (c3-9 / name
                                                       :op1 "ABC")))
                   :ARG1 (c3-7 / report-01
                               :ARG0 (c3-4 / person)
                               :ARG1 (c3-3 / op
                                           :mod (c3-0 / live))
                               :polarity -)
                   :polarity (c3-12 / amr-unknown)))

# ::snt Do we have SWAT in Australia?
# ::tokens ["Do", "we", "have", "SWAT", "in", "Australia", "?"]
# ::lemmas ["do", "we", "have", "SWAT", "in", "Australia", "?"]
(c4-0 / have-03
      :ARG0 (c4-1 / we)
      :ARG1 (c4-2 / weapon
                  :ARG2-of (c4-5 / special-02))
      :polarity (c4-6 / amr-unknown)
      :location (c4-4 / country
                      :name (c4-3 / name
                                  :op1 "Australia")))

# ::snt Is it confirmed?
# ::tokens ["Is", "it", "confirmed", "?"]
# ::lemmas ["be", "it", "confirm", "?"]
(c5-0 / confirm-01
      :polarity (c5-2 / amr-unknown)
      :ARG1 (c5-1 / it))

# ::snt some good news. Thanks for your reporting.
# ::tokens ["some", "good", "news", ".", "Thanks", "for", "your", "reporting", "."]
# ::lemmas ["some", "good", "news", ".", "thank", "for", "your", "reporting", "."]
(c6-1 / multi-sentence
      :snt1 (c6-3 / news
                  :ARG1-of (c6-5 / good-02)
                  :mod (c6-6 / some))
      :snt2 (c6-7 / thank-01
                  :ARG0 (c6-2 / i)
                  :ARG1 (c6-0 / you)
                  :ARG2 (c6-4 / report-01
                              :ARG0 c6-0)))

# ::snt lol
# ::tokens ["lol"]
# ::lemmas ["lol"]
(c8-0 / laugh-01
      :manner (c8-1 / loud)
      :mode expressive)

# ::snt to be fair though people know what SWAT means. TAG East not so much.
# ::tokens ["to", "be", "fair", "though", "people", "know", "what", "SWAT", "means", ".", "TAG", "East", "not", "so", "much", "."]
# ::lemmas ["to", "be", "fair", "though", "people", "know", "what", "SWAT", "mean", ".", "TAG", "East", "not", "so", "much", "."]
(c9-2 / multi-sentence
      :snt1 (c9-0 / have-concession-91
                  :ARG2 (c9-10 / know-01
                               :ARG0 (c9-7 / person)
                               :ARG1 (c9-8 / mean-01
                                           :ARG1 (c9-9 / tactic
                                                       :name (c9-5 / name
                                                                   :op1 "SWO"))))
                  :ARG1-of (c9-1 / fair-01))
      :snt2 (c9-4 / event
                  :name (c9-6 / name
                              :op1 " TAG"
                              :op2 "East")
                  :mod (c9-3 / much
                             :degree (c9-11 / so)
                             :polarity -)))

# ::snt Yeh fair enough
# ::tokens ["Yeh", "fair", "enough"]
# ::lemmas ["Yeh", "fair", "enough"]
(c10-3 / fair-01
       :mod (c10-1 / yeh
                   :mode expressive)
       :ARG2-of (c10-0 / have-degree-91
                       :ARG3 (c10-2 / enough)))

# ::snt Are people freed or they are first people ?
# ::tokens ["Are", "people", "freed", "or", "they", "are", "first", "people", "?"]
# ::lemmas ["be", "people", "free", "or", "they", "be", "first", "people", "?"]
(c11-4 / amr-choice
       :op1 (c11-0 / free-01
                   :ARG1 (c11-2 / person))
       :op2 (c11-3 / person
                   :ord (c11-1 / ordinal-entity
                               :value 1)
                   :domain c11-2))
