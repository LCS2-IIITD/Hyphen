# ::snt rip
# ::tokens ["rip"]
# ::lemmas ["rip"]
(c1-0 / rip)

# ::snt R.I.P
# ::tokens ["R.I.P"]
# ::lemmas ["R.I.P"]
(c2-1 / person
      :name (c2-0 / name
                  :op1 "R.I.P."))

# ::snt RIP, so many people have died because of these plane crashes. The government needs to look into this SERIOUSLY!!
# ::tokens ["RIP", ",", "so", "many", "people", "have", "died", "because", "of", "these", "plane", "crashes", ".", "The", "government", "needs", "to", "look", "into", "this", "SERIOUSLY", "!", "!"]
# ::lemmas ["RIP", ",", "so", "many", "people", "have", "die", "because", "of", "these", "plane", "crash", ".", "the", "government", "need", "to", "look", "into", "this", "seriously", "!", "!"]
(c3-0 / multi-sentence
      :snt1 (c3-13 / rest-01
                   :ARG1 (c3-15 / you)
                   :manner (c3-1 / peace))
      :snt2 (c3-2 / die-01
                  :ARG1 (c3-6 / person
                              :ARG1-of (c3-7 / have-quant-91
                                             :ARG2 (c3-12 / many)
                                             :ARG3 (c3-5 / so)))
                  :ARG1-of (c3-16 / cause-01
                                  :ARG0 (c3-3 / crash-01
                                              :ARG1 (c3-9 / plane)
                                              :mod (c3-18 / this))))
      :snt3 (c3-11 / need-01
                   :ARG0 (c3-14 / government-organization
                                :ARG0-of (c3-4 / govern-01))
                   :ARG1 (c3-8 / look-into-11
                               :ARG0 c3-14
                               :ARG1 (c3-17 / this)
                               :ARG1-of (c3-10 / serious-02))
                   :mode expressive))

# ::snt just saw this too sad now and I have testing tomorrow
# ::tokens ["just", "saw", "this", "too", "sad", "now", "and", "I", "have", "testing", "tomorrow"]
# ::lemmas ["just", "see", "this", "too", "sad", "now", "and", "i", "have", "test", "tomorrow"]
(c4-10 / and
       :op1 (c4-8 / see-01
                  :ARG0 (c4-4 / i)
                  :ARG1 (c4-2 / sad-02
                              :ARG0 (c4-9 / this)
                              :ARG2-of (c4-0 / have-degree-91
                                             :ARG1 c4-9
                                             :ARG3 (c4-7 / too)))
                  :time (c4-5 / now)
                  :mod (c4-1 / just))
       :op2 (c4-6 / test-01
                  :ARG0 c4-4
                  :time (c4-3 / tomorrow)))

# ::snt hope the families are ok and everyone will be paying their respects unless they have no respect for others
# ::tokens ["hope", "the", "families", "are", "ok", "and", "everyone", "will", "be", "paying", "their", "respects", "unless", "they", "have", "no", "respect", "for", "others"]
# ::lemmas ["hope", "the", "family", "be", "ok", "and", "everyone", "will", "be", "pay", "their", "respect", "unless", "they", "have", "no", "respect", "for", "other"]
(c5-0 / hope-01
      :ARG0 (c5-5 / i)
      :ARG1 (c5-10 / and
                   :op1 (c5-3 / okay-04
                              :ARG1 (c5-1 / family))
                   :op2 (c5-7 / pay-01
                              :ARG0 (c5-4 / everyone)
                              :ARG1 (c5-8 / respect-01
                                          :ARG0 c5-4
                                          :ARG1 c5-1)
                              :condition (c5-6 / respect-01
                                               :ARG0 c5-4
                                               :ARG1 (c5-9 / person
                                                           :mod (c5-2 / other))
                                               :polarity -))))

# ::snt R.I.P. they didn't deserve that!
# ::tokens ["R.I.P.", "they", "did", "n't", "deserve", "that", "!"]
# ::lemmas ["R.I.P.", "they", "do", "not", "deserve", "that", "!"]
(c7-2 / deserve-01
      :ARG0 (c7-4 / they)
      :ARG1 (c7-3 / that)
      :ARG2-of (c7-1 / publication-91
                     :ARG4 (c7-5 / person
                                 :name (c7-0 / name
                                             :op1 "R.I.P.")))
      :polarity -)

# ::snt R.I.P
# ::tokens ["R.I.P"]
# ::lemmas ["R.I.P"]
(c8-1 / person
      :name (c8-0 / name
                  :op1 "R.I.P."))

# ::snt R.I.P
# ::tokens ["R.I.P"]
# ::lemmas ["R.I.P"]
(c9-1 / person
      :name (c9-0 / name
                  :op1 "R.I.P."))

# ::snt i am from Germany and this is so sad RIP
# ::tokens ["i", "am", "from", "Germany", "and", "this", "is", "so", "sad", "RIP"]
# ::lemmas ["i", "be", "from", "Germany", "and", "this", "be", "so", "sad", "RIP"]
(c10-8 / and
       :op1 (c10-2 / i
                   :source (c10-4 / country
                                  :name (c10-3 / name
                                               :op1 "Germany")))
       :op2 (c10-6 / sad-02
                   :ARG0 (c10-7 / this)
                   :degree (c10-1 / so))
       :ARG2-of (c10-5 / thank-01
                       :ARG1 (c10-0 / you)))

# ::snt R.I.P
# ::tokens ["R.I.P"]
# ::lemmas ["R.I.P"]
(c11-1 / person
       :name (c11-0 / name
                    :op1 "R.I.P."))

# ::snt absolutely crazy I've been flying with germanwings so many times already and to hear those news... Just unbelievable.
# ::tokens ["absolutely", "crazy", "I", "'ve", "been", "flying", "with", "germanwings", "so", "many", "times", "already", "and", "to", "hear", "those", "news", "...", "Just", "unbelievable", "."]
# ::lemmas ["absolutely", "crazy", "i", "'ve", "be", "fly", "with", "germanwing", "so", "many", "time", "already", "and", "to", "hear", "those", "news", "...", "just", "unbelievable", "."]
(c12-16 / crazy-03
        :ARG1 (c12-6 / and
                     :op1 (c12-8 / fly-01
                                 :ARG0 (c12-14 / i)
                                 :accompanier (c12-12 / wing
                                                      :mod (c12-3 / country
                                                                  :name (c12-10 / name
                                                                                :op1 "Germany")))
                                 :time (c12-13 / already)
                                 :frequency (c12-18 / time
                                                    :ARG1-of (c12-7 / have-quant-91
                                                                    :ARG2 (c12-1 / many)
                                                                    :ARG3 (c12-4 / so))))
                     :op2 (c12-5 / hear-01
                                 :ARG0 c12-14
                                 :ARG1 (c12-15 / news
                                               :mod (c12-17 / that))))
        :degree (c12-11 / absolute)
        :ARG1-of (c12-9 / believe-01
                        :ARG1-of (c12-2 / possible-01
                                        :polarity -)
                        :mod (c12-0 / just)))

# ::snt rip
# ::tokens ["rip"]
# ::lemmas ["rip"]
(c13-0 / rip)
