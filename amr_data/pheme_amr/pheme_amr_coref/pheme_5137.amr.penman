# ::snt lol.
# ::tokens ["lol", "."]
# ::lemmas ["lol", "."]
(c1-0 / laugh-01
      :manner (c1-1 / loud)
      :mode expressive)

# ::snt good
# ::tokens ["good"]
# ::lemmas ["good"]
(c2-0 / good-02)

# ::snt . I can also confirm he will not be playing in Rankin Inlet, NU either
# ::tokens [".", "I", "can", "also", "confirm", "he", "will", "not", "be", "playing", "in", "Rankin", "Inlet", ",", "NU", "either"]
# ::lemmas [".", "i", "can", "also", "confirm", "he", "will", "not", "be", "play", "in", "Rankin", "Inlet", ",", "NU", "either"]
(c3-5 / possible-01
      :ARG1 (c3-6 / confirm-01
                  :ARG0 (c3-3 / i)
                  :ARG1 (c3-7 / play-01
                              :ARG0 (c3-0 / he)
                              :location (c3-1 / local-region
                                              :name (c3-4 / name
                                                          :op1 "Rinein"
                                                          :op2 "Inlet")
                                              :mod (c3-2 / either))
                              :polarity -)
                  :mod (c3-8 / also)))

# ::snt Of course not. I can't make it tonight. But Saturday.....
# ::tokens ["Of", "course", "not", ".", "I", "ca", "n't", "make", "it", "tonight", ".", "But", "Saturday", "....."]
# ::lemmas ["of", "course", "not", ".", "i", "can", "not", "make", "it", "tonight", ".", "but", "Saturday", "....."]
(c4-1 / multi-sentence
      :snt1 (c4-2 / of-course
                  :polarity -)
      :snt2 (c4-5 / possible-01
                  :ARG1 (c4-6 / make-it-14
                              :ARG0 (c4-3 / i)
                              :ARG1 (c4-7 / date-entity
                                          :dayperiod (c4-4 / night)
                                          :mod (c4-10 / today)))
                  :polarity -)
      :snt3 (c4-8 / contrast-01
                  :ARG2 (c4-0 / date-entity
                              :weekday (c4-9 / saturday))))

# ::snt athenaph what tease!!! RT : Prince not playing Massey Hall tonight, promoter says
# ::tokens ["athenaph", "what", "tease", "!", "!", "!", "RT", ":", "Prince", "not", "playing", "Massey", "Hall", "tonight", ",", "promoter", "says"]
# ::lemmas ["athenaph", "what", "tease", "!", "!", "!", "RT", ":", "Prince", "not", "play", "Massey", "Hall", "tonight", ",", "promoter", "say"]
(c5-0 / multi-sentence
      :snt1 (c5-15 / tease-01
                   :mod (c5-12 / thing))
      :snt2 (c5-13 / say-01
                   :ARG0 (c5-7 / person
                               :ARG0-of (c5-16 / promote-02))
                   :ARG1 (c5-1 / play-01
                               :ARG0 (c5-14 / person
                                            :name (c5-5 / name
                                                        :op1 "Prince"))
                               :ARG1 (c5-2 / building
                                           :name (c5-6 / name
                                                       :op1 "Massey"
                                                       :op2 "Hall"))
                               :time (c5-8 / date-entity
                                           :dayperiod (c5-9 / night)
                                           :mod (c5-10 / today))
                               :polarity -)
                   :ARG1-of (c5-4 / publication-91
                                  :ARG4 (c5-3 / publication
                                              :name (c5-11 / name
                                                           :op1 "RT")))))

# ::snt Hey now, some of us wait all day to hear word on how Prince is doing.
# ::tokens ["Hey", "now", ",", "some", "of", "us", "wait", "all", "day", "to", "hear", "word", "on", "how", "Prince", "is", "doing", "."]
# ::lemmas ["hey", "now", ",", "some", "of", "we", "wait", "all", "day", "to", "hear", "word", "on", "how", "Prince", "be", "do", "."]
(c6-1 / wait-01
      :ARG1 (c6-9 / person
                  :ARG1-of (c6-5 / include-91
                                 :ARG2 (c6-6 / we))
                  :quant (c6-11 / some))
      :ARG2 (c6-0 / hear-01
                  :ARG0 c6-9
                  :ARG1 (c6-4 / word-01
                              :ARG1 (c6-12 / thing
                                           :manner-of (c6-10 / do-02
                                                             :ARG0 (c6-13 / person
                                                                          :name (c6-7 / name
                                                                                      :op1 "Prince"))))))
      :duration (c6-2 / day
                      :mod (c6-14 / all))
      :mod (c6-8 / now)
      :mod (c6-3 / hey
                 :mode expressive))

# ::snt : Prince not playing Massey Hall tonight, promoter says good. I was feeling bitter.
# ::tokens [":", "Prince", "not", "playing", "Massey", "Hall", "tonight", ",", "promoter", "says", "good", ".", "I", "was", "feeling", "bitter", "."]
# ::lemmas [":", "Prince", "not", "play", "Massey", "Hall", "tonight", ",", "promoter", "say", "good", ".", "i", "be", "feel", "bitter", "."]
(c7-1 / multi-sentence
      :snt1 (c7-12 / say-01
                   :ARG0 (c7-7 / person
                               :ARG0-of (c7-14 / promote-02))
                   :ARG1 (c7-2 / play-11
                               :ARG0 c7-7
                               :name (c7-5 / name
                                           :op1 "Prince")
                               :polarity -)
                   :ARG1 (c7-3 / building
                               :name (c7-6 / name
                                           :op1 "Massey"
                                           :op2 "Hall"))
                   :time (c7-8 / date-entity
                               :dayperiod (c7-9 / night)
                               :mod (c7-13 / today)))
      :ARG1-of (c7-10 / good-02)
      :snt2 (c7-0 / feel-01
                  :ARG0 (c7-4 / i)
                  :ARG1 (c7-11 / bitter)))

# ::snt ive heard. But i refuse to leave. Everyone's still waiting.
# ::tokens ["i", "ve", "heard", ".", "But", "i", "refuse", "to", "leave", ".", "Everyone", "'s", "still", "waiting", "."]
# ::lemmas ["i", "ve", "hear", ".", "but", "i", "refuse", "to", "leave", ".", "everyone", "be", "still", "wait", "."]
(c8-3 / multi-sentence
      :snt1 (c8-0 / hear-01
                  :ARG0 (c8-5 / i))
      :snt2 (c8-7 / contrast-01
                  :ARG2 (c8-6 / refuse-01
                              :ARG0 (c8-8 / i)
                              :ARG1 (c8-2 / leave-11
                                          :ARG0 c8-8)))
      :snt3 (c8-1 / wait-01
                  :ARG1 (c8-4 / everyone)
                  :mod (c8-9 / still)))

# ::snt WTW?! : Prince not playing Massey Hall tonight, promoter says
# ::tokens ["WTW", "?", "!", ":", "Prince", "not", "playing", "Massey", "Hall", "tonight", ",", "promoter", "says"]
# ::lemmas ["WTW", "?", "!", ":", "Prince", "not", "play", "Massey", "Hall", "tonight", ",", "promoter", "say"]
(c9-8 / say-01
      :ARG0 (c9-5 / person
                  :ARG0-of (c9-11 / promote-02))
      :ARG1 (c9-1 / play-01
                  :ARG0 (c9-10 / person
                               :name (c9-3 / name
                                           :op1 "Prince"))
                  :ARG1 (c9-2 / building
                              :name (c9-4 / name
                                          :op1 "Massey"
                                          :op2 "Hall"))
                  :time (c9-6 / date-entity
                              :dayperiod (c9-7 / night)
                              :mod (c9-9 / today))
                  :polarity -)
      :mod (c9-0 / wow
                 :mode expressive))

# ::snt And, ... ?When asked Live Nation why no one made this clarification or hours earlier?
# ::tokens ["And", ",", "...", "?", "When", "asked", "Live", "Nation", "why", "no", "one", "made", "this", "clarification", "or", "hours", "earlier", "?"]
# ::lemmas ["and", ",", "...", "?", "when", "ask", "Live", "Nation", "why", "no", "one", "make", "this", "clarification", "or", "hours", "earlier", "?"]
(c10-13 / and
        :op2 (c10-4 / ask-01
                    :ARG1 (c10-12 / thing
                                  :ARG0-of (c10-9 / cause-01
                                                  :ARG1 (c10-8 / clarify-10
                                                               :ARG0 (c10-5 / no-one)
                                                               :ARG1 (c10-11 / this)
                                                               :time (c10-3 / or
                                                                            :op1 (c10-2 / before
                                                                                        :op1 c10-4
                                                                                        :ARG1 c10-8
                                                                                        :ARG2 (c10-10 / broadcast-program
                                                                                                      :name (c10-6 / name
                                                                                                                   :op1 "Live"
                                                                                                                   :op2 "Nation")))
                                                                            :quant (c10-1 / multiple
                                                                                          :op1 (c10-7 / temporal-quantity
                                                                                                      :unit (c10-0 / hour)
                                                                                                      :quant 1)))))))
        :ARG2 c10-10)

# ::snt O(+&gt;
# ::tokens ["O(+&gt", ";"]
# ::lemmas ["O(+&gt", ";"]
(c11-0 / string-entity
       :value "O(+&gt")
