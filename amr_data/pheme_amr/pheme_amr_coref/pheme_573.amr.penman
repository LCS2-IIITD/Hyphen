# ::snt : If you're wondering whether to go to work tomorrow here is a mp of the exclusion zone: !!!
# ::tokens [":", "If", "you", "'re", "wondering", "whether", "to", "go", "to", "work", "tomorrow", "here", "is", "a", "mp", "of", "the", "exclusion", "zone", ":", "!", "!", "!"]
# ::lemmas [":", "if", "you", "be", "wonder", "whether", "to", "go", "to", "work", "tomorrow", "here", "be", "a", "mp", "of", "the", "exclusion", "zone", ":", "!", "!", "!"]
(c1-4 / be-located-at-91
      :ARG1 (c1-3 / zone
                  :ARG1-of (c1-5 / exclude-01))
      :ARG2 (c1-0 / here)
      :condition (c1-1 / wonder-01
                       :ARG0 (c1-2 / you)
                       :ARG1 (c1-9 / truth-value
                                   :polarity-of (c1-7 / go-02
                                                      :ARG0 c1-2
                                                      :ARG4 (c1-6 / work-01
                                                                  :ARG0 c1-2)
                                                      :time (c1-8 / tomorrow)))))

# ::snt Don't make Him a hero. Don't use his name, just call him "a gunman"
# ::tokens ["Do", "n't", "make", "Him", "a", "hero", ".", "Do", "n't", "use", "his", "name", ",", "just", "call", "him", "\"", "a", "gunman", "\""]
# ::lemmas ["do", "not", "make", "he", "a", "hero", ".", "do", "not", "use", "his", "name", ",", "just", "call", "he", "\"", "a", "gunman", "\""]
(c2-3 / multi-sentence
      :snt1 (c2-7 / make-01
                  :ARG0 (c2-1 / you)
                  :ARG1 (c2-0 / hero
                              :domain (c2-13 / he))
                  :mode imperative
                  :polarity -)
      :snt2 (c2-9 / contrast-01
                  :ARG1 (c2-4 / use-01
                              :ARG0 (c2-11 / you)
                              :ARG1 (c2-12 / thing
                                           :ARG2-of (c2-5 / name-01
                                                          :ARG1 (c2-6 / he)))
                              :mode imperative
                              :polarity -)
                  :ARG2 (c2-8 / call-01
                              :ARG0 c2-11
                              :ARG1 c2-6
                              :ARG2 (c2-10 / gunman)
                              :mod (c2-2 / just)
                              :mode imperative)))

# ::snt this is different to recent government issued exclusion zone hich is Macquarie to castlereagh sts.
# ::tokens ["this", "is", "different", "to", "recent", "government", "issued", "exclusion", "zone", "hich", "is", "Macquarie", "to", "castlereagh", "sts", "."]
# ::lemmas ["this", "be", "different", "to", "recent", "government", "issue", "exclusion", "zone", "hich", "be", "Macquarie", "to", "castlereagh", "st", "."]
(c3-6 / differ-02
      :ARG1 (c3-12 / this)
      :ARG2 (c3-0 / zone
                  :ARG1-of (c3-2 / exclude-01)
                  :ARG1-of (c3-3 / issue-01
                                 :ARG0 (c3-8 / government-organization
                                             :ARG0-of (c3-7 / govern-01))
                                 :time (c3-9 / recent))
                  :location (c3-10 / city
                                   :name (c3-4 / name
                                               :op1 "Macquarie")
                                   :ARG1-of (c3-1 / mean-01
                                                  :ARG2 (c3-11 / city
                                                               :name (c3-5 / name
                                                                           :op1 " Castlereagh"
                                                                           :op2 "Strait"))))))

# ::snt bid decision Sunrise excluded from its studio does it just move down the road or come out of melbourne?
# ::tokens ["bid", "decision", "Sunrise", "excluded", "from", "its", "studio", "does", "it", "just", "move", "down", "the", "road", "or", "come", "out", "of", "melbourne", "?"]
# ::lemmas ["bid", "decision", "Sunrise", "exclude", "from", "its", "studio", "do", "it", "just", "move", "down", "the", "road", "or", "come", "out", "of", "melbourne", "?"]
(c4-13 / amr-choice
       :op1 (c4-2 / move-01
                  :ARG1 (c4-8 / company
                              :name (c4-5 / name
                                          :op1 "Sunrise"))
                  :ARG2 (c4-7 / down
                              :op1 (c4-9 / road))
                  :mod (c4-0 / just))
       :op2 (c4-10 / come-01
                   :ARG1 c4-8
                   :ARG3 (c4-11 / city
                                :name (c4-6 / name
                                            :op1 "Melbourne")))
       :domain (c4-1 / decide-01
                     :ARG1 (c4-4 / exclude-01
                                 :ARG1 c4-8
                                 :ARG2 (c4-12 / studio
                                              :poss c4-8))
                     :mod (c4-3 / bid)))

# ::snt what &amp; have not covered
# ::tokens ["what", "&", "amp", ";", "have", "not", "covered"]
# ::lemmas ["what", "&", "amp", ";", "have", "not", "cover"]
(c5-1 / cover-03
      :ARG0 (c5-4 / and
                  :op1 (c5-3 / thing)
                  :op2 (c5-2 / thing
                             :name (c5-0 / name
                                         :op1 "amp")))
      :polarity -)

# ::snt They've been allowed to go back in the building. Also said Sunrise will be on as usual
# ::tokens ["They", "'ve", "been", "allowed", "to", "go", "back", "in", "the", "building", ".", "Also", "said", "Sunrise", "will", "be", "on", "as", "usual"]
# ::lemmas ["they", "'ve", "be", "allow", "to", "go", "back", "in", "the", "building", ".", "also", "say", "Sunrise", "will", "be", "on", "as", "usual"]
(c6-0 / multi-sentence
      :snt1 (c6-10 / allow-01
                   :ARG1 (c6-7 / go-back-19
                               :ARG1 (c6-9 / they)
                               :ARG2 (c6-1 / building)))
      :snt2 (c6-8 / say-01
                  :ARG1 (c6-2 / on-01
                              :ARG1 (c6-6 / broadcast-program
                                          :name (c6-4 / name
                                                      :op1 "Sunrise"))
                              :mod (c6-3 / as-usual))
                  :mod (c6-5 / also)))

# ::snt makes no sense. So you can go to work at the Reserve Bank (right across the road) but at ANZ building? Can't be right.
# ::tokens ["makes", "no", "sense", ".", "So", "you", "can", "go", "to", "work", "at", "the", "Reserve", "Bank", "(", "right", "across", "the", "road", ")", "but", "at", "ANZ", "building", "?", "Ca", "n't", "be", "right", "."]
# ::lemmas ["make", "no", "sense", ".", "so", "you", "can", "go", "to", "work", "at", "the", "Reserve", "Bank", "(", "right", "across", "the", "road", ")", "but", "at", "ANZ", "building", "?", "can", "not", "be", "right", "."]
(c7-2 / multi-sentence
      :snt1 (c7-14 / sense-02
                   :polarity -)
      :snt2 (c7-11 / contrast-01
                   :ARG1 (c7-9 / possible-01
                               :ARG1 (c7-12 / go-02
                                            :ARG0 (c7-0 / you)
                                            :ARG4 (c7-1 / work-01
                                                        :ARG0 c7-0
                                                        :ARG2 (c7-3 / bank
                                                                    :name (c7-7 / name
                                                                                :op1 "Reserve"
                                                                                :op2 "Bank")
                                                                    :location (c7-17 / across
                                                                                     :op1 (c7-10 / road)
                                                                                     :mod (c7-6 / right))))))
                   :ARG2 (c7-16 / possible-01
                                :ARG1 (c7-4 / right-06
                                            :ARG1 c7-0
                                            :ARG2 (c7-13 / building
                                                         :mod (c7-15 / bank
                                                                     :name (c7-8 / name
                                                                                 :op1 "ANZ"))))
                                :polarity -)
                   :polarity (c7-5 / amr-unknown)))
