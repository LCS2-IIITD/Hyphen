# ::snt Good move Uber!
# ::tokens ["Good", "move", "Uber", "!"]
# ::lemmas ["good", "move", "Uber", "!"]
(c1-5 / say-01
      :ARG0 (c1-1 / i)
      :ARG1 (c1-0 / move-02
                  :ARG1-of (c1-4 / good-02))
      :ARG2 (c1-3 / company
                  :name (c1-2 / name
                              :op1 " Uber")))

# ::snt : Update: After price hikes all rides will befree for passengers area
# ::tokens [":", "Update", ":", "After", "price", "hikes", "all", "rides", "will", "befree", "for", "passengers", "area"]
# ::lemmas [":", "update", ":", "after", "price", "hike", "all", "ride", "will", "befree", "for", "passenger", "area"]
(c2-2 / update-02
      :ARG2 (c2-1 / free-03
                  :ARG1 (c2-6 / ride
                              :mod (c2-8 / all))
                  :ARG3 (c2-3 / area
                              :mod (c2-5 / passenger))
                  :time (c2-4 / after
                              :op1 (c2-0 / hike-02
                                         :ARG1 (c2-7 / price-01)))))

# ::snt Hits keep coming RT : After price hikes, says all rides free leaving area
# ::tokens ["Hits", "keep", "coming", "RT", ":", "After", "price", "hikes", ",", "says", "all", "rides", "free", "leaving", "area"]
# ::lemmas ["hit", "keep", "come", "RT", ":", "after", "price", "hike", ",", "you", "all", "ride", "free", "leave", "area"]
(c3-12 / say-01
       :ARG0 (c3-4 / i)
       :ARG1 (c3-9 / come-03
                   :ARG1 (c3-10 / it)
                   :ARG1-of (c3-13 / keep-02))
       :ARG1-of (c3-8 / cause-01
                      :ARG0 (c3-2 / say-01
                                  :ARG0 (c3-7 / person
                                              :name (c3-5 / name
                                                          :op1 "RT"))
                                  :ARG1 (c3-15 / area
                                               :location-of (c3-1 / free-04
                                                                  :ARG1 (c3-11 / ride-01))
                                               :mod (c3-3 / all))
                                  :time (c3-6 / after
                                              :op1 (c3-0 / hike-02
                                                         :ARG1 (c3-14 / price-01))))))

# ::snt [smarter PR move] MT : Update: says all rides free for passengers leaving area
# ::tokens ["[", "smarter", "PR", "move", "]", "MT", ":", "Update", ":", "says", "all", "rides", "free", "for", "passengers", "leaving", "area"]
# ::lemmas ["[", "smart", "pr", "move", "]", "MT", ":", "Update", ":", "you", "all", "ride", "free", "for", "passenger", "leave", "area"]
(c5-14 / and
       :op1 (c5-2 / move-02
                  :ARG1 (c5-9 / publication
                              :name (c5-7 / name
                                          :op1 "PR"))
                  :ARG1-of (c5-0 / have-degree-91
                                 :ARG2 (c5-12 / smooth-06
                                              :ARG1 c5-2)
                                 :ARG3 (c5-10 / more)))
       :op2 (c5-3 / update-02
                  :ARG2 (c5-5 / say-01
                              :ARG1 (c5-1 / free-03
                                          :ARG1 (c5-11 / ride
                                                       :mod (c5-6 / all))
                                          :ARG3 (c5-13 / passenger
                                                       :ARG0-of (c5-4 / leave-11
                                                                      :ARG1 (c5-8 / area)))))))

# ::snt Katy &amp; Bieber embrace Islam: Bible &amp; NASA embrace Islam: ,
# ::tokens ["Katy", "&", "amp", ";", "Bieber", "embrace", "Islam", ":", "Bible", "&", "amp", ";", "NASA", "embrace", "Islam", ":", ","]
# ::lemmas ["Katy", "&", "amp", ";", "Bieber", "embrace", "Islam", ":", "Bible", "&", "amp", ";", "NASA", "embrace", "Islam", ":", ","]
(c6-13 / and
       :op1 (c6-3 / embrace-01
                  :ARG0 (c6-8 / person
                              :name (c6-6 / name
                                          :op1 "Bieber"))
                  :ARG1 (c6-9 / religious-group
                              :name (c6-7 / name
                                          :op1 "Islam")))
       :op2 (c6-2 / embrace-01
                  :ARG0 (c6-4 / and
                              :op1 (c6-12 / person
                                          :name (c6-10 / name
                                                       :op1 "Bible"))
                              :op2 (c6-1 / person
                                         :name (c6-11 / name
                                                      :op1 "amp")))
                  :ARG1 c6-9)
       :op3 (c6-0 / embrace-01
                  :ARG0 (c6-5 / research-institute
                              :name (c6-14 / name
                                           :op1 "NASA"))
                  :ARG1 c6-9))

# ::snt They realized it atleast now. Previous tweet from ber was totally unacceptable.
# ::tokens ["They", "realized", "it", "atleast", "now", ".", "Previous", "tweet", "from", "ber", "was", "totally", "unacceptable", "."]
# ::lemmas ["they", "realize", "it", "atleast", "now", ".", "previous", "tweet", "from", "ber", "be", "totally", "unacceptable", "."]
(c7-0 / multi-sentence
      :snt1 (c7-8 / realize-01
                  :ARG0 (c7-11 / they)
                  :ARG1 (c7-4 / it)
                  :time (c7-5 / now
                              :mod (c7-13 / at-least)))
      :snt2 (c7-7 / possible-01
                  :ARG1 (c7-3 / accept-01
                              :ARG1 (c7-10 / thing
                                           :ARG1-of (c7-6 / tweet-01
                                                          :ARG0 (c7-12 / publication
                                                                       :name (c7-9 / name
                                                                                   :op1 "Ber"))
                                                          :time (c7-1 / previous))))
                  :degree (c7-2 / total)
                  :polarity -))

# ::snt Uber really can't get anything right lately, can it?
# ::tokens ["Uber", "really", "ca", "n't", "get", "anything", "right", "lately", ",", "can", "it", "?"]
# ::lemmas ["uber", "really", "can", "not", "get", "anything", "right", "lately", ",", "can", "it", "?"]
(c8-4 / possible-01
      :ARG1 (c8-7 / get-01
                  :ARG0 (c8-6 / company
                              :name (c8-3 / name
                                          :op1 "Uber"))
                  :ARG1 (c8-8 / anything)
                  :ARG2-of (c8-5 / right-06
                                 :ARG1 c8-6)
                  :time (c8-0 / lately))
      :ARG1-of (c8-2 / real-04)
      :ARG1-of (c8-1 / request-confirmation-91)
      :polarity -)

# ::snt , wants to send you a Bitcoin tip for tragedy (2,859 bits/$1.00)! Collect
# ::tokens [",", "wants", "to", "send", "you", "a", "Bitcoin", "tip", "for", "tragedy", "(", "2,859", "bits/$1.00", ")", "!", "Collect"]
# ::lemmas [",", "want", "to", "send", "you", "a", "Bitcoin", "tip", "for", "tragedy", "(", "2,859", "bits/$1.00", ")", "!", "collect"]
(c9-3 / multi-sentence
      :snt1 (c9-0 / want-01
                  :ARG1 (c9-11 / send-01
                               :ARG1 (c9-12 / tip-05
                                            :ARG1 (c9-10 / tragedy)
                                            :ARG2 (c9-5 / monetary-quantity
                                                        :unit (c9-6 / pound)
                                                        :ARG1-of (c9-2 / mean-01
                                                                       :ARG2 (c9-7 / monetary-quantity
                                                                                   :unit c9-6
                                                                                   :quant 1.00))
                                                        :quant 22459)
                                            :mod (c9-8 / monetary-quantity
                                                       :name (c9-4 / name
                                                                   :op1 "Bitcoin"))))
                  :ARG2 (c9-1 / you))
      :snt2 (c9-9 / collect-01))

# ::snt Yes I saw that earlier.
# ::tokens ["Yes", "I", "saw", "that", "earlier", "."]
# ::lemmas ["yes", "i", "see", "that", "early", "."]
(c10-3 / see-01
       :ARG0 (c10-1 / i)
       :ARG1 (c10-4 / that)
       :time (c10-0 / before
                    :op1 (c10-2 / now)))

# ::snt spoke too soon
# ::tokens ["spoke", "too", "soon"]
# ::lemmas ["speak", "too", "soon"]
(c11-0 / smoke-02
       :time (c11-1 / soon
                    :ARG2-of (c11-3 / have-degree-91
                                    :ARG1 c11-0
                                    :ARG3 (c11-2 / too))))

# ::snt very honorable of you - here's to hoping everyone makes it through this tragedy safely
# ::tokens ["very", "honorable", "of", "you", "-", "here", "'s", "to", "hoping", "everyone", "makes", "it", "through", "this", "tragedy", "safely"]
# ::lemmas ["very", "honorable", "of", "you", "-", "here", "be", "to", "hope", "everyone", "make", "it", "through", "this", "tragedy", "safely"]
(c12-2 / multi-sentence
       :snt1 (c12-0 / honorable-03
                    :ARG1 (c12-1 / you)
                    :degree (c12-5 / very))
       :snt2 (c12-12 / hope-01
                     :ARG0 (c12-4 / i)
                     :ARG1 (c12-6 / make-18
                                  :ARG0 (c12-3 / everyone)
                                  :ARG1 (c12-11 / through
                                                :op1 (c12-9 / tragedy
                                                            :mod (c12-7 / this)))
                                  :ARG0-of (c12-10 / safe-01))
                     :location (c12-8 / here)))

# ::snt Finally! ": After price hikes says all rides free for passengers leaving area
# ::tokens ["Finally", "!", "\"", ":", "After", "price", "hikes", "says", "all", "rides", "free", "for", "passengers", "leaving", "area"]
# ::lemmas ["finally", "!", "\"", ":", "after", "price", "hike", "you", "all", "ride", "free", "for", "passenger", "leave", "area"]
(c13-2 / multi-sentence
       :snt1 (c13-1 / final
                    :mode expressive)
       :snt2 (c13-9 / say-01
                    :ARG1 (c13-5 / free-03
                                 :ARG1 (c13-8 / ride
                                              :mod (c13-11 / all))
                                 :ARG3 (c13-7 / passenger
                                              :ARG0-of (c13-3 / leave-11
                                                              :ARG1 (c13-4 / area))))
                    :time (c13-6 / after
                                 :op1 (c13-0 / hike-02
                                             :ARG1 (c13-10 / price)))))

# ::snt Uber trips out of the CBD today are free to help Sydneysiders get home safely. See
# ::tokens ["Uber", "trips", "out", "of", "the", "CBD", "today", "are", "free", "to", "help", "Sydneysiders", "get", "home", "safely", ".", "See"]
# ::lemmas ["uber", "trip", "out", "of", "the", "CBD", "today", "be", "free", "to", "help", "sydneysider", "get", "home", "safely", ".", "see"]
(c14-2 / multi-sentence
       :snt1 (c14-1 / free-03
                    :ARG1 (c14-14 / trip-03
                                  :ARG0 (c14-9 / company
                                               :name (c14-5 / name
                                                            :op1 "Uber"))
                                  :time (c14-12 / today)
                                  :direction (c14-3 / out-of
                                                    :op1 (c14-8 / city-district
                                                                :name (c14-6 / name
                                                                             :op1 "CBD"))))
                    :purpose (c14-0 / help-01
                                    :ARG0 c14-14
                                    :ARG1 (c14-10 / get-05
                                                  :ARG1 (c14-7 / person
                                                               :mod c14-8
                                                               :name (c14-11 / name
                                                                             :op1 "Sydney")))
                                    :ARG2 (c14-15 / home)
                                    :ARG1-of (c14-13 / safe-01))
                    :ARG2 c14-7)
       :snt2 (c14-4 / see-01))

# ::snt too late, damage has been done
# ::tokens ["too", "late", ",", "damage", "has", "been", "done"]
# ::lemmas ["too", "late", ",", "damage", "have", "be", "do"]
(c15-4 / and
       :op1 (c15-0 / have-degree-91
                   :ARG2 (c15-1 / late)
                   :ARG3 (c15-3 / too))
       :op2 (c15-2 / damage-01))

# ::snt ya it's in the article too updated. Awk situation for them
# ::tokens ["ya", "it", "'s", "in", "the", "article", "too", "updated", ".", "Awk", "situation", "for", "them"]
# ::lemmas ["ya", "it", "be", "in", "the", "article", "too", "update", ".", "Awk", "situation", "for", "they"]
(c16-1 / multi-sentence
       :snt1 (c16-0 / have-degree-91
                    :ARG1 (c16-4 / it
                                 :location (c16-8 / article))
                    :ARG2 (c16-2 / update-01
                                 :ARG1 c16-4)
                    :ARG3 (c16-7 / too))
       :snt2 (c16-6 / situation
                    :mod (c16-3 / awk)
                    :beneficiary (c16-5 / they)))

# ::snt Bit too late : says all rides will be free for passengers leaving area
# ::tokens ["Bit", "too", "late", ":", "says", "all", "rides", "will", "be", "free", "for", "passengers", "leaving", "area"]
# ::lemmas ["bit", "too", "late", ":", "you", "all", "ride", "will", "be", "free", "for", "passenger", "leave", "area"]
(c17-2 / multi-sentence
       :snt1 (c17-1 / late
                    :ARG2-of (c17-0 / have-degree-91
                                    :ARG3 (c17-9 / too)))
       :snt2 (c17-8 / say-01
                    :ARG1 (c17-3 / free-03
                                 :ARG1 (c17-6 / ride
                                              :mod (c17-10 / all))
                                 :ARG3 (c17-5 / passenger
                                              :ARG0-of (c17-7 / leave-11
                                                              :ARG1 (c17-4 / area))))))

# ::snt Cc
# ::tokens ["Cc"]
# ::lemmas ["cc"]
(c18-1 / person
       :name (c18-0 / name
                    :op1 "Cc"))
