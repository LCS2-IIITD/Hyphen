# ::snt Still trying to figure out Ian's brain for tweeting this in the first place.
# ::tokens ["Still", "trying", "to", "figure", "out", "Ian", "'s", "brain", "for", "tweeting", "this", "in", "the", "first", "place", "."]
# ::lemmas ["still", "try", "to", "figure", "out", "Ian", "'s", "brain", "for", "tweet", "this", "in", "the", "first", "place", "."]
(c1-9 / try-01
      :ARG0 (c1-2 / i)
      :ARG1 (c1-0 / figure-out-05
                  :ARG0 c1-2
                  :ARG1 (c1-1 / brain
                              :part-of (c1-5 / person
                                             :name (c1-3 / name
                                                         :op1 "Ian")))
                  :ARG2 (c1-7 / tweet-02
                              :ARG0 c1-5
                              :ARG1 (c1-4 / this)
                              :mod (c1-6 / in-the-first-place)))
      :mod (c1-8 / still))

# ::snt Ungh, you gotta... Gotta give him whatever's on the... the... TOP SHELF OF THE FRIIIIIIIDGE...
# ::tokens ["Ungh", ",", "you", "got", "ta", "...", "Got", "ta", "give", "him", "whatever", "'s", "on", "the", "...", "the", "...", "TOP", "SHELF", "OF", "THE", "FRIIIIIIIDGE", "..."]
# ::lemmas ["Ungh", ",", "you", "got", "to", "...", "got", "to", "give", "he", "whatever", "be", "on", "the", "...", "the", "...", "top", "shelf", "of", "the", "FRIIIIIIIDGE", "..."]
(c2-5 / obligate-01
      :ARG1 (c2-1 / you)
      :ARG2 (c2-7 / give-01
                  :ARG0 c2-1
                  :ARG1 (c2-2 / whatever
                              :topic (c2-8 / self
                                           :poss (c2-3 / military
                                                       :name (c2-6 / name
                                                                   :op1 "FRIIIIIDGE"))
                                           :mod (c2-9 / top)))
                  :ARG2 (c2-0 / he))
      :mod (c2-4 / ugh
                 :mode expressive))

# ::snt nice
# ::tokens ["nice"]
# ::lemmas ["nice"]
(c3-0 / nice-01)

# ::snt He's a vegan. So please serve him a cheeseburger.
# ::tokens ["He", "'s", "a", "vegan", ".", "So", "please", "serve", "him", "a", "cheeseburger", "."]
# ::lemmas ["he", "be", "a", "vegan", ".", "so", "please", "serve", "he", "a", "cheeseburger", "."]
(c4-2 / multi-sentence
      :snt1 (c4-3 / vegan
                  :domain (c4-0 / he))
      :snt2 (c4-5 / cause-01
                  :ARG1 (c4-6 / serve-01
                              :ARG0 (c4-1 / you)
                              :ARG1 (c4-4 / cheeseburger)
                              :ARG2 (c4-7 / he)
                              :mode imperative
                              :polite +)))

# ::snt just give him a baby and some ketchup chips. That should be fine.
# ::tokens ["just", "give", "him", "a", "baby", "and", "some", "ketchup", "chips", ".", "That", "should", "be", "fine", "."]
# ::lemmas ["just", "give", "he", "a", "baby", "and", "some", "ketchup", "chip", ".", "that", "should", "be", "fine", "."]
(c5-4 / multi-sentence
      :snt1 (c5-8 / give-01
                  :ARG0 (c5-1 / you)
                  :ARG1 (c5-12 / and
                               :op1 (c5-5 / baby)
                               :op2 (c5-7 / chip
                                          :mod (c5-11 / ketchup)
                                          :quant (c5-9 / some)))
                  :ARG2 (c5-0 / he)
                  :mod (c5-2 / just)
                  :mode imperative)
      :snt2 (c5-6 / infer-01
                  :ARG1 (c5-3 / fine-04
                              :ARG1 (c5-10 / that))))

# ::snt Took me a second to get. Bravo.
# ::tokens ["Took", "me", "a", "second", "to", "get", ".", "Bravo", "."]
# ::lemmas ["take", "i", "a", "second", "to", "get", ".", "Bravo", "."]
(c6-0 / multi-sentence
      :snt1 (c6-6 / take-10
                  :ARG0 (c6-3 / get-01
                              :ARG0 (c6-2 / i))
                  :ARG1 (c6-4 / temporal-quantity
                              :unit (c6-5 / second)
                              :quant 1)
                  :ARG2 c6-2)
      :snt2 (c6-1 / bravo-01))

# ::snt Anything on the Go Go's...
# ::tokens ["Anything", "on", "the", "Go", "Go", "'s", "..."]
# ::lemmas ["anything", "on", "the", "Go", "Go", "'s", "..."]
(c7-2 / anything
      :location (c7-1 / location
                      :name (c7-0 / name
                                  :op1 "Go"
                                  :op2 "Go")))

# ::snt little red crumpets and dove tears?
# ::tokens ["little", "red", "crumpets", "and", "dove", "tears", "?"]
# ::lemmas ["little", "red", "crumpet", "and", "dove", "tear", "?"]
(c8-6 / and
      :polarity (c8-1 / amr-unknown)
      :op1 (c8-3 / crumpet
                 :ARG1-of (c8-2 / red-02)
                 :mod (c8-0 / little))
      :op2 (c8-5 / tear
                 :mod (c8-4 / dove)))

# ::snt Raspberry Souffl (?)
# ::tokens ["Raspberry", "Souffl", "(", "?", ")"]
# ::lemmas ["Raspberry", "Souffl", "(", "?", ")"]
(c9-1 / person
      :name (c9-0 / name
                  :op1 "Raspberry"
                  :op2 "Souffl")
      :polarity (c9-2 / amr-unknown))

# ::snt Pancakes?
# ::tokens ["Pancakes", "?"]
# ::lemmas ["pancake", "?"]
(c10-0 / wish-01
       :polarity (c10-1 / amr-unknown))

# ::snt something weird. He eats something weird.
# ::tokens ["something", "weird", ".", "He", "eats", "something", "weird", "."]
# ::lemmas ["something", "weird", ".", "he", "eat", "something", "weird", "."]
(c11-2 / multi-sentence
       :snt1 (c11-1 / weird
                    :domain (c11-6 / something))
       :snt2 (c11-3 / eat-01
                    :ARG0 (c11-0 / he)
                    :ARG1 (c11-4 / something
                                 :mod (c11-5 / weird))))

# ::snt We'll wake you up, before, you....
# ::tokens ["We", "'ll", "wake", "you", "up", ",", "before", ",", "you", "...."]
# ::lemmas ["we", "'ll", "wake", "you", "up", ",", "before", ",", "you", "...."]
(c12-1 / wake-up-02
       :ARG0 (c12-3 / we)
       :ARG1 (c12-2 / you)
       :time (c12-0 / before))

# ::snt google what does prince eat
# ::tokens ["google", "what", "does", "prince", "eat"]
# ::lemmas ["google", "what", "do", "prince", "eat"]
(c13-3 / google-01
       :ARG0 (c13-0 / you)
       :ARG1 (c13-4 / thing
                    :ARG1-of (c13-1 / eat-01
                                    :ARG0 (c13-2 / prince)))
       :mode imperative)

# ::snt It's our show, he produced our new single! I have some Princefeed over here I'll bag it up.
# ::tokens ["It", "'s", "our", "show", ",", "he", "produced", "our", "new", "single", "!", "I", "have", "some", "Princefeed", "over", "here", "I", "'ll", "bag", "it", "up", "."]
# ::lemmas ["it", "be", "our", "show", ",", "he", "produce", "our", "new", "single", "!", "i", "have", "some", "princefeed", "over", "here", "i", "'ll", "bag", "it", "up", "."]
(c14-3 / multi-sentence
       :snt1 (c14-15 / show-04
                     :ARG0 (c14-1 / we)
                     :ARG1 (c14-8 / it))
       :snt2 (c14-12 / produce-01
                     :ARG0 (c14-0 / he)
                     :ARG1 (c14-7 / single
                                  :poss (c14-9 / we)
                                  :ARG1-of (c14-10 / new-01)))
       :snt3 (c14-17 / have-03
                     :ARG0 (c14-14 / i)
                     :ARG1 (c14-16 / product
                                   :name (c14-11 / name
                                                 :op1 "Princefeed")
                                   :mod (c14-2 / some)
                                   :location (c14-13 / here)))
       :snt4 (c14-5 / bag-up-02
                    :ARG0 (c14-4 / i)
                    :ARG1 (c14-6 / it)))

# ::snt Rosemary sorbet ...
# ::tokens ["Rosemary", "sorbet", "..."]
# ::lemmas ["Rosemary", "sorbet", "..."]
(c15-1 / person
       :name (c15-0 / name
                    :op1 "Rosemary"
                    :op2 "Sorbet"))
