# ::snt so does anybody trust Ray Hadley not to say the wrong thing?
# ::tokens ["so", "does", "anybody", "trust", "Ray", "Hadley", "not", "to", "say", "the", "wrong", "thing", "?"]
# ::lemmas ["so", "do", "anybody", "trust", "Ray", "Hadley", "not", "to", "say", "the", "wrong", "thing", "?"]
(c1-6 / trust-02
      :ARG0 (c1-7 / anybody)
      :ARG1 (c1-5 / say-01
                  :ARG0 (c1-3 / person
                              :name (c1-2 / name
                                          :op1 "Ray"
                                          :op2 "Hadley"))
                  :ARG1 (c1-4 / thing
                              :ARG1-of (c1-0 / wrong-04))
                  :polarity -)
      :polarity (c1-1 / amr-unknown))

# ::snt . Time for radio stations to play classical music.
# ::tokens [".", "Time", "for", "radio", "stations", "to", "play", "classical", "music", "."]
# ::lemmas [".", "time", "for", "radio", "station", "to", "play", "classical", "music", "."]
(c2-5 / time
      :time-of (c2-1 / play-11
                     :ARG0 (c2-4 / station
                                 :mod (c2-2 / radio))
                     :ARG1 (c2-0 / music
                                 :mod (c2-3 / classics))))

# ::snt is that the same "source" that was the head of issi who was on AW? Turned out to be a hoax
# ::tokens ["is", "that", "the", "same", "\"", "source", "\"", "that", "was", "the", "head", "of", "issi", "who", "was", "on", "AW", "?", "Turned", "out", "to", "be", "a", "hoax"]
# ::lemmas ["be", "that", "the", "same", "\"", "source", "\"", "that", "be", "the", "head", "of", "issi", "who", "be", "on", "AW", "?", "turn", "out", "to", "be", "a", "hoax"]
(c3-2 / multi-sentence
      :snt1 (c3-7 / source-01
                  :ARG2 (c3-8 / that)
                  :ARG1-of (c3-3 / same-01)
                  :ARG0-of (c3-0 / head-01
                                 :ARG1 (c3-5 / publication
                                             :name (c3-4 / name
                                                         :op1 "Issi")
                                             :location c3-5
                                             :name c3-4
                                             :op1 "AW")))
      :polarity (c3-9 / amr-unknown)
      :snt2 (c3-6 / turn-out-11
                  :ARG1 (c3-1 / hoax-01)))

# ::snt . What the fuck?
# ::tokens [".", "What", "the", "fuck", "?"]
# ::lemmas [".", "what", "the", "fuck", "?"]
(c4-1 / amr-unknown
      :mod (c4-0 / fuck
                 :mode expressive))

# ::snt Sonot Hadley's?
# ::tokens ["Sonot", "Hadley", "'s", "?"]
# ::lemmas ["Sonot", "Hadley", "'s", "?"]
(c5-2 / thing
      :polarity (c5-3 / amr-unknown)
      :poss (c5-1 / person
                  :name (c5-0 / name
                              :op1 "Sonot"
                              :op2 "Hadley")))

# ::snt Paul, are we possibly putting hostages at risk by discussing this? I'm concerned so undoing my retweet.
# ::tokens ["Paul", ",", "are", "we", "possibly", "putting", "hostages", "at", "risk", "by", "discussing", "this", "?", "I", "'m", "concerned", "so", "undoing", "my", "retweet", "."]
# ::lemmas ["Paul", ",", "be", "we", "possibly", "put", "hostage", "at", "risk", "by", "discuss", "this", "?", "i", "be", "concerned", "so", "undo", "my", "retweet", "."]
(c6-1 / multi-sentence
      :snt1 (c6-5 / say-01
                  :ARG0 (c6-14 / i)
                  :ARG1 (c6-3 / possible-01
                              :ARG1 (c6-6 / put-01
                                          :ARG0 (c6-12 / we)
                                          :ARG1 (c6-8 / hostage)
                                          :ARG2 (c6-11 / risk-01)
                                          :manner (c6-4 / discuss-01
                                                        :ARG0 c6-12
                                                        :ARG1 (c6-18 / this)))
                              :polarity (c6-7 / amr-unknown))
                  :ARG2 (c6-9 / person
                              :name (c6-10 / name
                                           :op1 "Paul")))
      :snt2 (c6-16 / concern-01
                   :ARG0 (c6-13 / undo-01
                                :ARG0 (c6-15 / i)
                                :ARG1 (c6-17 / thing
                                             :ARG1-of (c6-2 / retweet-01
                                                            :ARG0 c6-15)))
                   :ARG1 (c6-0 / i)))

# ::snt But Hadley is full of shit.
# ::tokens ["But", "Hadley", "is", "full", "of", "shit", "."]
# ::lemmas ["but", "Hadley", "be", "full", "of", "shit", "."]
(c7-3 / contrast-01
      :ARG2 (c7-0 / fill-01
                  :ARG1 (c7-2 / person
                              :name (c7-1 / name
                                          :op1 "Hadley"))
                  :ARG2 (c7-4 / shit)))

# ::snt . Hadley is lying his ass off.
# ::tokens [".", "Hadley", "is", "lying", "his", "ass", "off", "."]
# ::lemmas [".", "Hadley", "be", "lie", "his", "ass", "off", "."]
(c8-0 / lie-08
      :ARG0 (c8-3 / person
                  :name (c8-2 / name
                              :op1 "Hadley")
                  :part (c8-4 / ass
                              :degree-of c8-0))
      :mod (c8-1 / off))

# ::snt how the fuck is this ok!?
# ::tokens ["how", "the", "fuck", "is", "this", "ok", "!", "?"]
# ::lemmas ["how", "the", "fuck", "be", "this", "ok", "!", "?"]
(c9-0 / okay-04
      :ARG1 (c9-2 / this)
      :manner (c9-3 / amr-unknown)
      :mod (c9-1 / fuck
                 :mode expressive))

# ::snt ": HADLEY confirms he is speaking to a hostage inside the cafe." Nothing can go wrong with this
# ::tokens ["\"", ":", "HADLEY", "confirms", "he", "is", "speaking", "to", "a", "hostage", "inside", "the", "cafe", ".", "\"", "Nothing", "can", "go", "wrong", "with", "this"]
# ::lemmas ["\"", ":", "HADLEY", "confirm", "he", "be", "speak", "to", "a", "hostage", "inside", "the", "cafe", ".", "\"", "nothing", "can", "go", "wrong", "with", "this"]
(c10-2 / multi-sentence
       :snt1 (c10-8 / confirm-01
                    :ARG0 (c10-6 / person
                                 :name (c10-4 / name
                                              :op1 "HADLEY"))
                    :ARG1 (c10-10 / speak-01
                                  :ARG0 c10-6
                                  :ARG2 (c10-0 / hostage)
                                  :location (c10-3 / inside
                                                   :op1 (c10-7 / cafe))))
       :snt2 (c10-12 / possible-01
                     :ARG1 (c10-9 / go-08
                                  :ARG1 (c10-5 / nothing)
                                  :ARG2 (c10-1 / wrong-02
                                               :ARG1 (c10-11 / this)))))

# ::snt its % not ok.
# ::tokens ["its", "%", "not", "ok", "."]
# ::lemmas ["its", "%", "not", "ok", "."]
(c11-1 / percentage-entity
       :ARG1-of (c11-0 / okay-04)
       :value 90
       :polarity -)

# ::snt Get off the phone Hadley!
# ::tokens ["Get", "off", "the", "phone", "Hadley", "!"]
# ::lemmas ["get", "off", "the", "phone", "Hadley", "!"]
(c12-5 / say-01
       :ARG0 (c12-1 / i)
       :ARG1 (c12-4 / get-05
                    :ARG0 (c12-3 / person
                                 :name (c12-2 / name
                                              :op1 "Hadley"))
                    :ARG2 (c12-0 / off
                                 :op1 (c12-6 / phone))
                    :mode imperative)
       :ARG2 c12-3)

# ::snt Oh my Eff! Get Ray Hadley off air and shut down media coverage of this situation before people get killed!
# ::tokens ["Oh", "my", "Eff", "!", "Get", "Ray", "Hadley", "off", "air", "and", "shut", "down", "media", "coverage", "of", "this", "situation", "before", "people", "get", "killed", "!"]
# ::lemmas ["oh", "my", "Eff", "!", "get", "Ray", "Hadley", "off", "air", "and", "shut", "down", "medium", "coverage", "of", "this", "situation", "before", "people", "get", "kill", "!"]
(c13-0 / multi-sentence
       :snt1 (c13-6 / Eff-01
                    :ARG0 (c13-12 / i)
                    :mod (c13-16 / oh)
                    :mode expressive)
       :snt2 (c13-4 / and
                    :op1 (c13-10 / get-05
                                 :ARG0 (c13-14 / you)
                                 :ARG1 (c13-1 / person
                                              :name (c13-8 / name
                                                           :op1 "Ray"
                                                           :op2 "Hadley"))
                                 :ARG2 (c13-15 / off
                                               :op1 (c13-11 / air))
                                 :mode imperative)
                    :op2 (c13-2 / shut-down-05
                                :ARG0 c13-14
                                :ARG1 (c13-17 / cover-03
                                              :ARG0 (c13-9 / media)
                                              :ARG1 (c13-7 / situation
                                                           :mod (c13-18 / this)))
                                :time (c13-5 / before
                                             :op1 (c13-13 / kill-01
                                                          :ARG1 (c13-3 / person)))
                                :mode imperative)))
