# ::snt and a psychologist to manage any pre-gig angst
# ::tokens ["and", "a", "psychologist", "to", "manage", "any", "pre", "-", "gig", "angst"]
# ::lemmas ["and", "a", "psychologist", "to", "manage", "any", "pre", "-", "gig", "angst"]
(c1-6 / and
      :op2 (c1-4 / psychologist
                 :ARG0-of (c1-0 / manage-01
                                :ARG1 (c1-2 / angst
                                            :time (c1-1 / before
                                                        :op1 (c1-5 / gig))
                                            :mod (c1-3 / any)))))

# ::snt can't believe how envious I'm feeling of people wearing overcoats , stood in a line ... Might need your professional help
# ::tokens ["ca", "n't", "believe", "how", "envious", "I", "'m", "feeling", "of", "people", "wearing", "overcoats", ",", "stood", "in", "a", "line", "...", "Might", "need", "your", "professional", "help"]
# ::lemmas ["can", "not", "believe", "how", "envious", "i", "be", "feel", "of", "people", "wear", "overcoat", ",", "stand", "in", "a", "line", "...", "might", "need", "your", "professional", "help"]
(c2-4 / multi-sentence
      :snt1 (c2-11 / possible-01
                   :ARG1 (c2-6 / believe-01
                               :ARG0 (c2-9 / i)
                               :ARG1 (c2-14 / thing
                                            :degree-of (c2-8 / envy-01
                                                             :ARG0 c2-9
                                                             :ARG1 (c2-15 / person
                                                                          :ARG0-of (c2-1 / wear-01
                                                                                         :ARG1 (c2-7 / overcoat))
                                                                          :ARG1-of (c2-12 / stand-01
                                                                                          :ARG2 (c2-3 / line))))))
                   :polarity -)
      :snt2 (c2-5 / possible-01
                  :ARG1 (c2-10 / need-01
                               :ARG0 (c2-2 / you)
                               :ARG1 (c2-0 / help-01
                                           :ARG0 (c2-13 / professional)
                                           :ARG1 c2-2))))

# ::snt I've got a face like a slapped arse
# ::tokens ["I", "'ve", "got", "a", "face", "like", "a", "slapped", "arse"]
# ::lemmas ["i", "'ve", "get", "a", "face", "like", "a", "slapped", "arse"]
(c3-0 / have-03
      :ARG0 (c3-2 / i)
      :ARG1 (c3-1 / face
                  :ARG1-of (c3-3 / resemble-01
                                 :ARG2 (c3-5 / ass
                                             :ARG1-of (c3-4 / slap-01)))))

# ::snt did some say cakes??
# ::tokens ["did", "some", "say", "cakes", "?", "?"]
# ::lemmas ["do", "some", "say", "cake", "?", "?"]
(c4-0 / say-01
      :polarity (c4-3 / amr-unknown)
      :ARG0 (c4-1 / some)
      :ARG1 (c4-2 / cake))

# ::snt our time will come again...hopefully soon?!?!
# ::tokens ["our", "time", "will", "come", "again", "...", "hopefully", "soon", "?", "!", "?", "!"]
# ::lemmas ["our", "time", "will", "come", "again", "...", "hopefully", "soon", "?", "!", "?", "!"]
(c5-3 / come-01
      :ARG1 (c5-5 / time
                  :poss (c5-1 / we))
      :mod (c5-6 / again)
      :time (c5-4 / soon
                  :ARG1-of (c5-0 / hope-01))
      :polarity (c5-2 / amr-unknown))

# ::snt when i saw that pic i instantly thought of roundhouse
# ::tokens ["when", "i", "saw", "that", "pic", "i", "instantly", "thought", "of", "roundhouse"]
# ::lemmas ["when", "i", "see", "that", "pic", "i", "instantly", "think", "of", "roundhouse"]
(c7-6 / think-01
      :ARG0 (c7-0 / i)
      :ARG1 (c7-2 / person
                  :name (c7-1 / name
                              :op1 "Roundhouse"))
      :manner (c7-3 / instant)
      :time (c7-5 / see-01
                  :ARG0 c7-0
                  :ARG1 (c7-7 / pic
                              :mod (c7-4 / that))))

# ::snt they need a beardy man with a purple pen and a middle aged woman with cakes
# ::tokens ["they", "need", "a", "beardy", "man", "with", "a", "purple", "pen", "and", "a", "middle", "aged", "woman", "with", "cakes"]
# ::lemmas ["they", "need", "a", "beardy", "man", "with", "a", "purple", "pen", "and", "a", "middle", "aged", "woman", "with", "cake"]
(c8-6 / need-01
      :ARG0 (c8-11 / they)
      :ARG1 (c8-13 / and
                   :op1 (c8-4 / man
                              :mod (c8-5 / beardy)
                              :ARG0-of (c8-0 / have-03
                                             :ARG1 (c8-7 / pen
                                                         :ARG1-of (c8-12 / purple-02))))
                   :op2 (c8-1 / woman
                              :age (c8-10 / temporal-quantity
                                          :quant (c8-8 / middle
                                                       :unit (c8-2 / year))
                                          :ARG0-of (c8-3 / have-03
                                                         :ARG1 (c8-9 / cake))))))

# ::snt everybody needs that
# ::tokens ["everybody", "needs", "that"]
# ::lemmas ["everybody", "need", "that"]
(c9-0 / need-01
      :ARG0 (c9-1 / everybody)
      :ARG1 (c9-2 / that))

# ::snt I promise to bring some if we get a chance to queue
# ::tokens ["I", "promise", "to", "bring", "some", "if", "we", "get", "a", "chance", "to", "queue"]
# ::lemmas ["i", "promise", "to", "bring", "some", "if", "we", "get", "a", "chance", "to", "queue"]
(c10-4 / promise-01
       :ARG0 (c10-3 / i)
       :ARG1 (c10-1 / bring-01
                    :ARG0 c10-3
                    :ARG1 (c10-7 / some)
                    :condition (c10-6 / get-22
                                      :ARG0 (c10-0 / we)
                                      :ARG1 (c10-5 / chance-02
                                                   :ARG0 c10-0
                                                   :ARG1 (c10-2 / queue-01
                                                                :ARG0 c10-0)))))

# ::snt is that Toronto Jay?
# ::tokens ["is", "that", "Toronto", "Jay", "?"]
# ::lemmas ["be", "that", "Toronto", "Jay", "?"]
(c11-1 / person
       :polarity (c11-3 / amr-unknown)
       :name (c11-0 / name
                    :op1 "Toronto"
                    :op2 "Jay")
       :domain (c11-2 / that))
