# ::snt Sipan Hemo, Trkiyede ID terristlerini eiten ok sayda kamp var!
# ::tokens ["Sipan", "Hemo", ",", "Trkiyede", "ID", "terristlerini", "eiten", "ok", "sayda", "kamp", "var", "!"]
# ::lemmas ["Sipan", "Hemo", ",", "Trkiyede", "ID", "terristlerini", "eiten", "ok", "sayda", "kamp", "var", "!"]
(c1-7 / say-01
      :ARG0 (c1-10 / and
                   :op1 (c1-4 / person
                              :name (c1-2 / name
                                          :op1 "Sipan"
                                          :op2 "Hemo"))
                   :op2 (c1-9 / person
                              :name (c1-3 / name
                                          :op1 "Tkiyede"
                                          :op2 "ID"))
                   :op3 (c1-0 / person
                              :name (c1-5 / name
                                          :op1 "Terristlerini")))
      :ARG1 (c1-1 / okay-04
                  :ARG0 c1-10
                  :ARG1 (c1-8 / kamp
                              :mod (c1-6 / var))
                  :ARG1 c1-7)
      :ARG2 c1-10)

# ::snt "Cdez le passage" brings back memories
# ::tokens ["\"", "Cdez", "le", "passage", "\"", "brings", "back", "memories"]
# ::lemmas ["\"", "Cdez", "le", "passage", "\"", "bring", "back", "memory"]
(c2-1 / bring-01
      :ARG0 (c2-2 / passage
                  :mod (c2-4 / cdez
                             :mode expressive))
      :ARG1 (c2-0 / memory)
      :ARG2 (c2-3 / back))

# ::snt it's beyond tragic
# ::tokens ["it", "'s", "beyond", "tragic"]
# ::lemmas ["it", "be", "beyond", "tragic"]
(c3-2 / beyond
      :op1 (c3-0 / tragic)
      :domain (c3-1 / it))

# ::snt kudos to the chap moonwalking at the back
# ::tokens ["kudos", "to", "the", "chap", "moonwalking", "at", "the", "back"]
# ::lemmas ["kudo", "to", "the", "chap", "moonwalke", "at", "the", "back"]
(c4-4 / kudos
      :beneficiary (c4-3 / chap
                         :ARG0-of (c4-0 / walk-01
                                        :manner (c4-1 / moon-01)
                                        :location (c4-2 / back))))

# ::snt hhhhhhhhhhhhhhhhhhhhhhh l.love lsls
# ::tokens ["hhhhhhhhhhhhhhhhhhhhhhh", "l.love", "lsls"]
# ::lemmas ["hhhhhhhhhhhhhhhhhhhhhhh", "l.love", "lsls"]
(c5-2 / love-01
      :ARG0 (c5-3 / i)
      :ARG1 (c5-1 / person
                  :name (c5-0 / name
                              :op1 "lsls")))

# ::snt I agree... X
# ::tokens ["I", "agree", "...", "X"]
# ::lemmas ["i", "agree", "...", "x"]
(c7-4 / and
      :op1 (c7-0 / agree-01
                 :ARG0 (c7-1 / i))
      :op2 (c7-3 / person
                 :name (c7-2 / name
                             :op1 "X")))

# ::snt nice theather somehow a state like France can't catch the ramblers if they're not experts!
# ::tokens ["nice", "theather", "somehow", "a", "state", "like", "France", "ca", "n't", "catch", "the", "ramblers", "if", "they", "'re", "not", "experts", "!"]
# ::lemmas ["nice", "theather", "somehow", "a", "state", "like", "France", "can", "not", "catch", "the", "rambler", "if", "they", "be", "not", "expert", "!"]
(c8-3 / nice-01
      :ARG1 (c8-5 / possible-01
                  :ARG1 (c8-7 / catch-03
                              :ARG0 (c8-9 / state
                                          :ARG1-of (c8-6 / resemble-01
                                                         :ARG2 (c8-8 / country
                                                                     :name (c8-4 / name
                                                                                 :op1 "France"))))
                              :ARG1 (c8-2 / ramble-02))
                  :condition (c8-0 / expert-01
                                   :ARG1 c8-2
                                   :polarity -)
                  :polarity -)
      :manner (c8-1 / somehow))

# ::snt Oh dang. I hope things go well.
# ::tokens ["Oh", "dang", ".", "I", "hope", "things", "go", "well", "."]
# ::lemmas ["oh", "dang", ".", "i", "hope", "thing", "go", "well", "."]
(c9-2 / multi-sentence
      :snt1 (c9-5 / dang
                  :mod (c9-3 / oh)
                  :mode expressive)
      :snt2 (c9-0 / hope-01
                  :ARG0 (c9-4 / i)
                  :ARG1 (c9-6 / go-on-15
                              :ARG1 (c9-7 / thing)
                              :ARG1-of (c9-1 / well-09))))

# ::snt following this theather, another miserable country will be invaded by France! Let me guess Libya
# ::tokens ["following", "this", "theather", ",", "another", "miserable", "country", "will", "be", "invaded", "by", "France", "!", "Let", "me", "guess", "Libya"]
# ::lemmas ["follow", "this", "theather", ",", "another", "miserable", "country", "will", "be", "invade", "by", "France", "!", "let", "i", "guess", "Libya"]
(c10-1 / multi-sentence
       :snt1 (c10-3 / invade-01
                    :ARG0 (c10-8 / country
                                 :name (c10-4 / name
                                              :op1 "France"))
                    :ARG1 (c10-7 / country
                                 :mod (c10-6 / miserable)
                                 :mod (c10-13 / another))
                    :ARG1-of (c10-0 / follow-01
                                    :ARG2 (c10-12 / this)))
       :snt2 (c10-2 / let-01
                    :ARG1 (c10-9 / guess-01
                                 :ARG0 (c10-10 / i)
                                 :ARG1 (c10-11 / country
                                               :name (c10-5 / name
                                                            :op1 "Libya")))))

# ::snt I hope no more innocent life's are lost x
# ::tokens ["I", "hope", "no", "more", "innocent", "life", "'s", "are", "lost", "x"]
# ::lemmas ["i", "hope", "no", "more", "innocent", "life", "'s", "be", "lose", "x"]
(c11-0 / hope-01
       :ARG0 (c11-3 / i)
       :ARG1 (c11-1 / lose-02
                    :ARG1 (c11-5 / life
                                 :ARG1-of (c11-4 / innocent-01)
                                 :quant (c11-2 / more))
                    :polarity -))

# ::snt , dead injured Hostage
# ::tokens [",", "dead", "injured", "Hostage"]
# ::lemmas [",", "dead", "injure", "Hostage"]
(c12-0 / Hostage
       :ARG1-of (c12-2 / injure-01)
       :ARG1-of (c12-1 / die-01))

# ::snt it sure is .. Bless them all x
# ::tokens ["it", "sure", "is", "..", "Bless", "them", "all", "x"]
# ::lemmas ["it", "sure", "be", "..", "bless", "they", "all", "x"]
(c13-1 / multi-sentence
       :snt1 (c13-4 / sure-02
                    :ARG1 (c13-3 / it))
       :snt2 (c13-2 / bless-01
                    :ARG0 (c13-0 / you)
                    :ARG1 (c13-5 / they
                                 :mod (c13-6 / all))
                    :mode imperative))

# ::snt Ohh I forget: of course following this theather, more oppressions to migrants So they will be legalized their migrant policy!
# ::tokens ["Ohh", "I", "forget", ":", "of", "course", "following", "this", "theather", ",", "more", "oppressions", "to", "migrants", "So", "they", "will", "be", "legalized", "their", "migrant", "policy", "!"]
# ::lemmas ["Ohh", "i", "forget", ":", "of", "course", "follow", "this", "theather", ",", "more", "oppression", "to", "migrant", "so", "they", "will", "be", "legalize", "their", "migrant", "policy", "!"]
(c14-0 / forget-01
       :ARG0 (c14-6 / i)
       :ARG1 (c14-10 / cause-01
                     :ARG0 (c14-7 / follow-02
                                  :ARG1 (c14-12 / this)
                                  :mod (c14-5 / of-course))
                     :ARG1 (c14-1 / oppress-01
                                  :ARG1 (c14-8 / person
                                               :ARG0-of (c14-2 / migrate-01))
                                  :quant (c14-9 / more))
                     :ARG0 c14-10
                     :ARG1 (c14-3 / legalize-01
                                  :ARG1 (c14-13 / policy-01
                                                :ARG0 c14-8
                                                :ARG2 (c14-4 / migrate-01))))
       :mod (c14-11 / oh
                    :mode expressive))

# ::snt looks like there closing in on them
# ::tokens ["looks", "like", "there", "closing", "in", "on", "them"]
# ::lemmas ["look", "like", "there", "close", "in", "on", "they"]
(c15-1 / look-02
       :ARG1 (c15-2 / close-in-07
                    :ARG1 (c15-0 / they)))

# ::snt : Schools close, people told to stay indoors amid Dammartin-en-Goele manhunt
# ::tokens [":", "Schools", "close", ",", "people", "told", "to", "stay", "indoors", "amid", "Dammartin", "-", "en", "-", "Goele", "manhunt"]
# ::lemmas [":", "school", "close", ",", "people", "tell", "to", "stay", "indoor", "amid", "Dammartin", "-", "en", "-", "Goele", "manhunt"]
(c16-8 / and
       :op1 (c16-5 / close-01
                   :ARG1 (c16-6 / school))
       :op2 (c16-7 / tell-01
                   :ARG1 (c16-1 / stay-01
                                :ARG1 (c16-4 / person)
                                :ARG3 (c16-2 / indoors)
                                :time (c16-0 / manhunt
                                             :name (c16-3 / name
                                                          :op1 "Dammartin-en-Goele")))
                   :ARG2 c16-4))

# ::snt IN UKRAINE HAVE GIVEN THE NAZI COUP, SUPPORTED BY NATO AND MEDIA COMMUNICATION,AS SEE PHOTO.
# ::tokens ["IN", "UKRAINE", "HAVE", "GIVEN", "THE", "NAZI", "COUP", ",", "SUPPORTED", "BY", "NATO", "AND", "MEDIA", "COMMUNICATION", ",", "AS", "SEE", "PHOTO", "."]
# ::lemmas ["in", "UKRAINE", "have", "give", "the", "NAZI", "COUP", ",", "support", "by", "NATO", "and", "MEDIA", "COMMUNICATION", ",", "as", "SEE", "PHOTO", "."]
(c17-2 / multi-sentence
       :snt1 (c17-9 / give-01
                    :ARG0 (c17-8 / country
                                 :name (c17-4 / name
                                              :op1 "UKRAINE"))
                    :ARG1 (c17-7 / coup-01
                                 :mod (c17-6 / political-movement
                                             :name (c17-5 / name
                                                          :op1 "Nazi"))
                                 :ARG1-of (c17-12 / support-01
                                                  :ARG0 (c17-15 / and
                                                                :op1 (c17-10 / military
                                                                             :name (c17-11 / name
                                                                                           :op1 "NATO"))
                                                                :op2 (c17-13 / community
                                                                             :mod (c17-1 / media))))))
       :snt2 (c17-3 / see-01
                    :ARG0 (c17-0 / you)
                    :ARG1 (c17-14 / photograph)
                    :mode imperative))

# ::snt shut up, boring.
# ::tokens ["shut", "up", ",", "boring", "."]
# ::lemmas ["shut", "up", ",", "boring", "."]
(c18-2 / and
       :op1 (c18-0 / shut-up-06
                   :ARG0 (c18-1 / you
                                :ARG1-of c18-0)
                   :mode imperative)
       :op2 (c18-3 / bore-02
                   :ARG0 c18-1
                   :mode imperative))

# ::snt monkeyfish doorcoat dogshoe mugblind firemirror. Oh, sorry, thought you were playing random words, your tweet no sense either
# ::tokens ["monkeyfish", "doorcoat", "dogshoe", "mugblind", "firemirror", ".", "Oh", ",", "sorry", ",", "thought", "you", "were", "playing", "random", "words", ",", "your", "tweet", "no", "sense", "either"]
# ::lemmas ["monkeyfish", "doorcoat", "dogshoe", "mugblind", "firemirror", ".", "oh", ",", "sorry", ",", "think", "you", "be", "play", "random", "word", ",", "your", "tweet", "no", "sense", "either"]
(c19-3 / multi-sentence
       :snt1 (c19-10 / person
                     :name (c19-9 / name
                                  :op1 "firemirror")
                     :mod (c19-11 / doorcoat)
                     :mod (c19-1 / dogshoe)
                     :ARG1-of (c19-4 / blind-02)
                     :mode expressive)
       :snt2 (c19-17 / and
                     :op1 (c19-14 / sorry-01
                                  :ARG1 (c19-8 / i)
                                  :mod (c19-5 / oh))
                     :op2 (c19-15 / think-01
                                  :ARG0 c19-8
                                  :ARG1 (c19-16 / play-01
                                                :ARG0 (c19-0 / you)
                                                :ARG1 (c19-2 / word
                                                             :mod (c19-12 / random))))
                     :op3 (c19-6 / sense-02
                                 :ARG1 (c19-13 / tweet-01
                                               :ARG0 c19-0)
                                 :mod (c19-7 / either)
                                 :polarity -)))

# ::snt Schools close, people told to stay indoors amidDammartin-en-Goele manhunt
# ::tokens ["Schools", "close", ",", "people", "told", "to", "stay", "indoors", "amidDammartin", "-", "en", "-", "Goele", "manhunt"]
# ::lemmas ["school", "close", ",", "people", "tell", "to", "stay", "indoors", "amidDammartin", "-", "en", "-", "goele", "manhunt"]
(c20-8 / and
       :op1 (c20-5 / close-01
                   :ARG1 (c20-6 / school))
       :op2 (c20-7 / tell-01
                   :ARG1 (c20-1 / stay-01
                                :ARG1 (c20-4 / person)
                                :ARG3 (c20-2 / indoors)
                                :time (c20-0 / manhunt
                                             :name (c20-3 / name
                                                          :op1 "Dammartin-en-Goele")))
                   :ARG2 c20-4))

# ::snt Schools close, people told to stay indoors amid Dammartin-en-Goele manhunt
# ::tokens ["Schools", "close", ",", "people", "told", "to", "stay", "indoors", "amid", "Dammartin", "-", "en", "-", "Goele", "manhunt"]
# ::lemmas ["school", "close", ",", "people", "tell", "to", "stay", "indoor", "amid", "Dammartin", "-", "en", "-", "Goele", "manhunt"]
(c21-8 / and
       :op1 (c21-5 / close-01
                   :ARG1 (c21-6 / school))
       :op2 (c21-7 / tell-01
                   :ARG1 (c21-1 / stay-01
                                :ARG1 (c21-4 / person)
                                :ARG3 (c21-2 / indoors)
                                :time (c21-0 / manhunt
                                             :name (c21-3 / name
                                                          :op1 "Dammartin-en-Goele")))
                   :ARG2 c21-4))

# ::snt And you like it in your hairy bum too don't you Mostaff, cheers for the pic,
# ::tokens ["And", "you", "like", "it", "in", "your", "hairy", "bum", "too", "do", "n't", "you", "Mostaff", ",", "cheers", "for", "the", "pic", ","]
# ::lemmas ["and", "you", "like", "it", "in", "your", "hairy", "bum", "too", "do", "not", "you", "Mostaff", ",", "cheer", "for", "the", "pic", ","]
(c22-2 / multi-sentence
       :snt1 (c22-11 / and
                     :op2 (c22-1 / like-01
                                 :ARG0 (c22-6 / person
                                              :name (c22-5 / name
                                                           :op1 "Mostaff"))
                                 :ARG1 (c22-4 / it
                                              :location (c22-3 / bum
                                                               :mod (c22-0 / hairy)
                                                               :part-of c22-6))
                                 :mod (c22-9 / too)
                                 :ARG1-of (c22-7 / request-confirmation-91)))
       :snt2 (c22-8 / cheer-02
                    :ARG0 (c22-10 / pic)))

# ::snt if u want to believe this shit then shut up and believe! I will not cos I'm not idiot like u
# ::tokens ["if", "u", "want", "to", "believe", "this", "shit", "then", "shut", "up", "and", "believe", "!", "I", "will", "not", "cos", "I", "'m", "not", "idiot", "like", "u"]
# ::lemmas ["if", "u", "want", "to", "believe", "this", "shit", "then", "shut", "up", "and", "believe", "!", "i", "will", "not", "cos", "i", "be", "not", "idiot", "like", "u"]
(c23-2 / multi-sentence
       :snt1 (c23-14 / and
                     :op1 (c23-11 / shut-up-06
                                  :ARG0 (c23-0 / you
                                               :ARG1-of c23-11)
                                  :mode imperative)
                     :op2 (c23-3 / believe-01
                                 :ARG0 c23-0
                                 :mode imperative)
                     :condition (c23-1 / want-01
                                       :ARG0 c23-0
                                       :ARG1 (c23-7 / believe-01
                                                    :ARG0 c23-0
                                                    :ARG1 (c23-4 / shit
                                                                 :mod (c23-13 / this)))))
       :snt2 (c23-8 / cause-01
                    :ARG0 (c23-5 / idiot
                                 :ARG1-of (c23-6 / resemble-01
                                                 :ARG2 (c23-10 / you))
                                 :domain (c23-9 / i)
                                 :polarity -)
                    :ARG1 (c23-12 / do-02
                                  :ARG0 c23-9
                                  :polarity -)))

# ::snt Thank you for not showing their faces
# ::tokens ["Thank", "you", "for", "not", "showing", "their", "faces"]
# ::lemmas ["thank", "you", "for", "not", "show", "their", "face"]
(c24-5 / thank-01
       :ARG0 (c24-2 / i)
       :ARG1 (c24-0 / you)
       :ARG2 (c24-4 / show-01
                    :ARG0 c24-0
                    :ARG1 (c24-1 / face
                                 :part-of (c24-3 / they))
                    :polarity -))
