# ::snt Pretty Ignorant really, who's 'you'?
# ::tokens ["Pretty", "Ignorant", "really", ",", "who", "'s", "'", "you", "'", "?"]
# ::lemmas ["pretty", "ignorant", "really", ",", "who", "be", "'", "you", "'", "?"]
(c1-2 / person
      :domain (c1-0 / you)
      :ARG1-of (c1-1 / ignorant-02
                     :degree (c1-4 / pretty)
                     :ARG1-of (c1-3 / real-04))
      :mod (c1-5 / amr-unknown))

# ::snt hence the ' '
# ::tokens ["hence", "the", "'", "'"]
# ::lemmas ["hence", "the", "'", "'"]
(c2-1 / conclude-01
      :ARG1 (c2-0 / event))

# ::snt all agreed then. Ha ha!
# ::tokens ["all", "agreed", "then", ".", "Ha", "ha", "!"]
# ::lemmas ["all", "agree", "then", ".", "ha", "ha", "!"]
(c3-1 / multi-sentence
      :snt1 (c3-4 / agree-01
                  :ARG0 (c3-2 / all)
                  :time (c3-3 / then))
      :snt2 (c3-0 / ha
                  :mode expressive))

# ::snt Congrats on your tweet!
# ::tokens ["Congrats", "on", "your", "tweet", "!"]
# ::lemmas ["congrat", "on", "your", "tweet", "!"]
(c4-2 / congratulate-01
      :ARG1 (c4-1 / you)
      :ARG2 (c4-0 / tweet-01
                  :ARG0 c4-1))

# ::snt There's always one. Go away, dickhead.
# ::tokens ["There", "'s", "always", "one", ".", "Go", "away", ",", "dickhead", "."]
# ::lemmas ["there", "be", "always", "one", ".", "go", "away", ",", "dickhead", "."]
(c5-0 / multi-sentence
      :snt1 (c5-1 / one
                  :time (c5-5 / always))
      :snt2 (c5-4 / go-02
                  :ARG0 (c5-3 / dickhead)
                  :ARG4 (c5-2 / away)
                  :mode imperative))

# ::snt : Think this ticks all the boxes.
# ::tokens [":", "Think", "this", "ticks", "all", "the", "boxes", "."]
# ::lemmas [":", "think", "this", "tick", "all", "the", "box", "."]
(c6-3 / think-01
      :ARG1 (c6-2 / tick-05
                  :ARG1 (c6-1 / this)
                  :ARG2 (c6-0 / box
                              :mod (c6-4 / all))))

# ::snt is that a threat?
# ::tokens ["is", "that", "a", "threat", "?"]
# ::lemmas ["be", "that", "a", "threat", "?"]
(c7-0 / threaten-01
      :polarity (c7-1 / amr-unknown)
      :ARG0 (c7-2 / that))

# ::snt : Think this ticks all the boxes.
# ::tokens [":", "Think", "this", "ticks", "all", "the", "boxes", "."]
# ::lemmas [":", "think", "this", "tick", "all", "the", "box", "."]
(c8-3 / think-01
      :ARG1 (c8-2 / tick-05
                  :ARG1 (c8-1 / this)
                  :ARG2 (c8-0 / box
                              :mod (c8-4 / all))))

# ::snt : Think this ticks all the boxes.
# ::tokens [":", "Think", "this", "ticks", "all", "the", "boxes", "."]
# ::lemmas [":", "think", "this", "tick", "all", "the", "box", "."]
(c9-3 / think-01
      :ARG1 (c9-2 / tick-05
                  :ARG1 (c9-1 / this)
                  :ARG2 (c9-0 / box
                              :mod (c9-4 / all))))

# ::snt Best sign ever!
# ::tokens ["Best", "sign", "ever", "!"]
# ::lemmas ["good", "sign", "ever", "!"]
(c10-4 / signal-07
       :ARG1-of (c10-0 / have-degree-91
                       :ARG2 (c10-3 / good-02
                                    :ARG1 c10-4)
                       :ARG3 (c10-1 / most)
                       :time (c10-2 / ever)))

# ::snt YES!
# ::tokens ["YES", "!"]
# ::lemmas ["yes", "!"]
(c11-0 / yes)

# ::snt This says it all, that's for sure.
# ::tokens ["This", "says", "it", "all", ",", "that", "'s", "for", "sure", "."]
# ::lemmas ["this", "say", "it", "all", ",", "that", "be", "for", "sure", "."]
(c12-2 / say-01
       :ARG0 (c12-3 / this)
       :ARG1 (c12-1 / it
                    :mod (c12-4 / all))
       :ARG1-of (c12-0 / sure-02))

# ::snt as an ex English teacher- I couldn't have put it better!
# ::tokens ["as", "an", "ex", "English", "teacher-", "I", "could", "n't", "have", "put", "it", "better", "!"]
# ::lemmas ["as", "an", "ex", "English", "teacher-", "i", "could", "not", "have", "put", "it", "well", "!"]
(c13-6 / possible-01
       :ARG1 (c13-10 / put-02
                     :ARG0 (c13-4 / i
                                  :ARG0-of (c13-9 / teach-01
                                                  :ARG1 (c13-1 / language
                                                               :name (c13-5 / name
                                                                            :op1 "English"))
                                                  :time (c13-3 / ex)))
                     :ARG1 (c13-7 / it)
                     :ARG1-of (c13-8 / good-02
                                     :ARG2-of (c13-0 / have-degree-91
                                                     :ARG1 c13-10
                                                     :ARG3 (c13-2 / more))))
       :polarity -)

# ::snt This sign says it all.
# ::tokens ["This", "sign", "says", "it", "all", "."]
# ::lemmas ["this", "sign", "say", "it", "all", "."]
(c14-2 / say-01
       :ARG0 (c14-0 / sign
                    :mod (c14-3 / this))
       :ARG1 (c14-1 / it
                    :mod (c14-4 / all)))

# ::snt O.M.G. first time I've genuinely smiled about this issue in years!!!!
# ::tokens ["O.M.G.", "first", "time", "I", "'ve", "genuinely", "smiled", "about", "this", "issue", "in", "years", "!", "!", "!", "!"]
# ::lemmas ["O.M.G.", "first", "time", "i", "'ve", "genuinely", "smile", "about", "this", "issue", "in", "years", "!", "!", "!", "!"]
(c15-3 / opine-01
       :ARG0 (c15-4 / i)
       :ARG1 (c15-8 / smile-01
                    :ARG0 c15-4
                    :ARG2 (c15-5 / issue-02
                                 :mod (c15-9 / this))
                    :manner (c15-6 / genuine)
                    :ord (c15-1 / ordinal-entity
                                :range (c15-2 / multiple
                                              :op1 (c15-7 / temporal-quantity
                                                          :unit (c15-0 / year)
                                                          :quant 1))
                                :value 1)))

# ::snt then stop abuse the people or you go down hhhh
# ::tokens ["then", "stop", "abuse", "the", "people", "or", "you", "go", "down", "hhhh"]
# ::lemmas ["then", "stop", "abuse", "the", "people", "or", "you", "go", "down", "hhhh"]
(c16-2 / or
       :op1 (c16-6 / stop-01
                   :ARG0 (c16-1 / you)
                   :ARG1 (c16-8 / abuse-01
                                :ARG0 c16-1
                                :ARG1 (c16-3 / person))
                   :time (c16-7 / then)
                   :mode imperative)
       :op2 (c16-5 / go-02
                   :ARG0 c16-1
                   :ARG4 (c16-4 / down)
                   :mod (c16-0 / hmm
                               :mode expressive)
                   :mode imperative))

# ::snt Relish in your 'fame' while it lasts
# ::tokens ["Relish", "in", "your", "'", "fame", "'", "while", "it", "lasts"]
# ::lemmas ["relish", "in", "your", "'", "fame", "'", "while", "it", "last"]
(c17-3 / Relish-01
       :ARG0 (c17-0 / you)
       :ARG1 (c17-1 / Fame
                    :poss c17-0)
       :duration (c17-4 / temporal-quantity
                        :duration-of (c17-2 / it))
       :mode imperative)

# ::snt Congrats on your tweet!
# ::tokens ["Congrats", "on", "your", "tweet", "!"]
# ::lemmas ["congrat", "on", "your", "tweet", "!"]
(c18-2 / congratulate-01
       :ARG1 (c18-1 / you)
       :ARG2 (c18-0 / tweet-01
                    :ARG0 c18-1))

# ::snt I do wish people would not pussyfoot around the issue and say it as it is, ha! Well said those people, spot on!
# ::tokens ["I", "do", "wish", "people", "would", "not", "pussyfoot", "around", "the", "issue", "and", "say", "it", "as", "it", "is", ",", "ha", "!", "Well", "said", "those", "people", ",", "spot", "on", "!"]
# ::lemmas ["i", "do", "wish", "people", "would", "not", "pussyfoot", "around", "the", "issue", "and", "say", "it", "as", "it", "be", ",", "ha", "!", "well", "say", "those", "people", ",", "spot", "on", "!"]
(c19-3 / multi-sentence
       :snt1 (c19-1 / wish-01
                    :ARG0 (c19-7 / i)
                    :ARG1 (c19-14 / and
                                  :op1 (c19-9 / pussyfoot-01
                                              :ARG0 (c19-13 / person)
                                              :ARG2 (c19-6 / around
                                                           :op1 (c19-10 / issue-02))
                                              :polarity -)
                                  :op2 (c19-11 / say-01
                                               :ARG0 c19-13
                                               :ARG1 c19-10
                                               :manner (c19-0 / ha
                                                              :mode expressive)
                                               :polarity -)))
       :snt2 (c19-5 / say-01
                    :ARG0 (c19-4 / person
                                 :mod (c19-12 / that))
                    :ARG1 (c19-2 / spot-on)
                    :ARG1-of (c19-8 / well-09)))

# ::snt Concise and to the point. First class use of English.
# ::tokens ["Concise", "and", "to", "the", "point", ".", "First", "class", "use", "of", "English", "."]
# ::lemmas ["concise", "and", "to", "the", "point", ".", "First", "class", "use", "of", "English", "."]
(c20-1 / multi-sentence
       :snt1 (c20-5 / precise)
       :snt2 (c20-7 / to-the-point)
       :snt3 (c20-2 / use-01
                    :ARG1 (c20-0 / language
                                 :name (c20-4 / name
                                              :op1 "English"))
                    :mod (c20-6 / class
                                :ord (c20-3 / ordinal-entity
                                            :value 1))))

# ::snt Congrats on your tweet!
# ::tokens ["Congrats", "on", "your", "tweet", "!"]
# ::lemmas ["congrat", "on", "your", "tweet", "!"]
(c21-2 / congratulate-01
       :ARG1 (c21-1 / you)
       :ARG2 (c21-0 / tweet-01
                    :ARG0 c21-1))

# ::snt Fame? It's just words on a screen you sad melt.
# ::tokens ["Fame", "?", "It", "'s", "just", "words", "on", "a", "screen", "you", "sad", "melt", "."]
# ::lemmas ["Fame", "?", "it", "be", "just", "word", "on", "a", "screen", "you", "sad", "melt", "."]
(c22-3 / multi-sentence
       :snt1 (c22-7 / guilty-01
                    :polarity (c22-9 / amr-unknown))
       :snt2 (c22-1 / word
                    :domain (c22-5 / it)
                    :location (c22-8 / screen)
                    :mod (c22-0 / just)
                    :ARG0-of (c22-4 / sad-02)
                    :ARG0-of (c22-6 / melt-01
                                    :ARG1 (c22-2 / you))))

# ::snt &lt;3 this
# ::tokens ["&", "lt;3", "this"]
# ::lemmas ["&", "lt;3", "this"]
(c23-1 / and
       :op2 (c23-0 / this))
