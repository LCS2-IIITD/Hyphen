# ::snt Remarkably, despite the military-style police presence in , a known killer was able to skip town
# ::tokens ["Remarkably", ",", "despite", "the", "military", "-", "style", "police", "presence", "in", ",", "a", "known", "killer", "was", "able", "to", "skip", "town"]
# ::lemmas ["remarkably", ",", "despite", "the", "military", "-", "style", "police", "presence", "in", ",", "a", "know", "killer", "be", "able", "to", "skip", "town"]
(c1-6 / remarkable-02
      :ARG1 (c1-5 / possible-01
                  :ARG1 (c1-7 / skip-01
                              :ARG0 (c1-10 / person
                                           :ARG0-of (c1-9 / kill-01)
                                           :ARG1-of (c1-3 / know-01))
                              :ARG1 (c1-8 / town))
                  :concession (c1-2 / present-02
                                    :ARG1 (c1-0 / police)
                                    :mod (c1-4 / style
                                               :mod (c1-1 / military)))))

# ::snt probably the best idea
# ::tokens ["probably", "the", "best", "idea"]
# ::lemmas ["probably", "the", "good", "idea"]
(c2-3 / probable
      :domain (c2-0 / have-degree-91
                    :ARG1 (c2-2 / idea)
                    :ARG2 (c2-4 / good-02
                                :ARG1 c2-2)
                    :ARG3 (c2-1 / most)))

# ::snt lausible that the aided+abetted Wilson in fleeing. PSYCHOLOGICAL TESTS for cops should be mandatory.
# ::tokens ["lausible", "that", "the", "aided+abetted", "Wilson", "in", "fleeing", ".", "PSYCHOLOGICAL", "TESTS", "for", "cops", "should", "be", "mandatory", "."]
# ::lemmas ["lausible", "that", "the", "aided+abetted", "Wilson", "in", "flee", ".", "psychological", "test", "for", "cop", "should", "be", "mandatory", "."]
(c3-1 / multi-sentence
      :snt1 (c3-0 / liable-01
                  :ARG2 (c3-3 / or
                              :op1 (c3-12 / aid-01
                                          :ARG1 (c3-2 / flee-05
                                                      :ARG0 (c3-6 / person
                                                                  :name (c3-5 / name
                                                                              :op1 "Wilson")
                                                                  :ARG2-of c3-12)))
                              :op2 (c3-4 / abet-01
                                         :ARG1 c3-6
                                         :ARG2 c3-2)))
      :snt2 (c3-7 / recommend-01
                  :ARG1 (c3-8 / mandatory
                              :domain (c3-10 / tactic
                                             :mod (c3-11 / psychology)
                                             :beneficiary (c3-9 / cop)))))

# ::snt ( :'Darren Wilson, . (cop) who shot reportedly skipped town with his family days ago.'
# ::tokens ["(", ":", "'", "Darren", "Wilson", ",", ".", "(", "cop", ")", "who", "shot", "reportedly", "skipped", "town", "with", "his", "family", "days", "ago", ".", "'"]
# ::lemmas ["(", ":", "'", "Darren", "Wilson", ",", ".", "(", "cop", ")", "who", "shoot", "reportedly", "skip", "town", "with", "his", "family", "days", "ago", ".", "'"]
(c4-13 / skip-01
       :ARG0 (c4-7 / person
                   :name (c4-5 / name
                               :op1 "Darren"
                               :op2 "Wilson")
                   :ARG0-of (c4-4 / shoot-02)
                   :ARG0-of (c4-0 / have-org-role-91
                                  :ARG2 (c4-9 / cop))
                   :ARG0-of (c4-16 / have-org-role-91
                                   :ARG1 (c4-1 / family
                                               :ARG1-of (c4-6 / have-org-role-91
                                                              :ARG0 c4-7
                                                              :ARG2 (c4-2 / member)))))
       :ARG1 (c4-15 / town)
       :time (c4-3 / before
                   :op1 (c4-8 / now)
                   :quant (c4-10 / multiple
                                 :op1 (c4-12 / temporal-quantity
                                             :unit (c4-11 / day)
                                             :quant 1)))
       :ARG1-of (c4-14 / report-01))

# ::snt and you're basing your assessment on what? Her statement seems to match other witnesses.
# ::tokens ["and", "you", "'re", "basing", "your", "assessment", "on", "what", "?", "Her", "statement", "seems", "to", "match", "other", "witnesses", "."]
# ::lemmas ["and", "you", "be", "base", "your", "assessment", "on", "what", "?", "her", "statement", "seem", "to", "match", "other", "witness", "."]
(c5-3 / multi-sentence
      :snt1 (c5-12 / and
                   :op2 (c5-4 / base-02
                              :ARG0 (c5-0 / you)
                              :ARG1 (c5-7 / assess-01
                                          :ARG0 c5-0)
                              :ARG2 (c5-8 / amr-unknown)))
      :snt2 (c5-11 / seem-01
                   :ARG1 (c5-9 / match-01
                               :ARG1 (c5-6 / state-01
                                           :ARG0 (c5-2 / she))
                               :ARG2 (c5-10 / person
                                            :ARG0-of (c5-1 / witness-01)
                                            :mod (c5-5 / other)))))

# ::snt lease take no offense to my analogy. is like something from 'Deliverance.
# ::tokens ["lease", "take", "no", "offense", "to", "my", "analogy", ".", "is", "like", "something", "from", "'", "Deliverance", "."]
# ::lemmas ["lease", "take", "no", "offense", "to", "my", "analogy", ".", "be", "like", "something", "from", "'", "deliverance", "."]
(c6-1 / multi-sentence
      :snt1 (c6-2 / offend-01
                  :ARG0 (c6-0 / you)
                  :ARG1 (c6-8 / analogy
                              :poss (c6-3 / i))
                  :polarity -
                  :mode imperative
                  :polite +)
      :snt2 (c6-4 / resemble-01
                  :ARG1 (c6-6 / it)
                  :ARG2 (c6-7 / something
                              :source (c6-5 / deliver-01))))

# ::snt know surprise there.
# ::tokens ["know", "surprise", "there", "."]
# ::lemmas ["know", "surprise", "there", "."]
(c7-2 / know-01
      :ARG1 (c7-0 / surprise-01
                  :location (c7-1 / there)))

# ::snt Remarkably, The Best Literary Novel First/Sentence/Like Tweet Ever
# ::tokens ["Remarkably", ",", "The", "Best", "Literary", "Novel", "First", "/", "Sentence", "/", "Like", "Tweet", "Ever"]
# ::lemmas ["remarkably", ",", "the", "Best", "Literary", "Novel", "First", "/", "Sentence", "/", "like", "Tweet", "ever"]
(c8-7 / slash
      :op1 (c8-4 / publication
                 :name (c8-3 / name
                             :op1 "The"
                             :op2 "Best"
                             :op3 "L literary"
                             :op4 "Novel"
                             :op5 "First"))
      :op2 (c8-1 / sentence-01)
      :op3 (c8-0 / like-01
                 :ARG1 (c8-8 / thing
                             :ARG1-of (c8-6 / tweet-01)))
      :ARG1-of (c8-5 / remarkable-02)
      :time (c8-2 / ever))

# ::snt robbery-yes but assault has yet to be established
# ::tokens ["robbery", "-", "yes", "but", "assault", "has", "yet", "to", "be", "established"]
# ::lemmas ["robbery", "-", "yes", "but", "assault", "have", "yet", "to", "be", "establish"]
(c9-3 / contrast-01
      :ARG1 (c9-2 / rob-01)
      :ARG2 (c9-1 / establish-01
                  :ARG1 (c9-4 / assault-01)
                  :time (c9-0 / yet)
                  :polarity -))

# ::snt LOL!
# ::tokens ["LOL", "!"]
# ::lemmas ["LOL", "!"]
(c11-0 / laugh-01
       :ARG0 (c11-1 / i)
       :manner (c11-2 / loud)
       :mode expressive)

# ::snt can find him either under a white cone hat or a koch bed!
# ::tokens ["can", "find", "him", "either", "under", "a", "white", "cone", "hat", "or", "a", "koch", "bed", "!"]
# ::lemmas ["can", "find", "he", "either", "under", "a", "white", "cone", "hat", "or", "a", "koch", "bed", "!"]
(c13-6 / possible-01
       :ARG1 (c13-2 / find-01
                    :ARG1 (c13-0 / he)
                    :location (c13-5 / or
                                     :op1 (c13-3 / under
                                                 :op1 (c13-9 / hat
                                                             :mod (c13-7 / cone
                                                                         :ARG1-of (c13-1 / white-03))))
                                     :op2 (c13-4 / bed
                                                 :mod (c13-8 / koch)))))

# ::snt I understand his reluctance have his family around the violence, but they should know where he went.
# ::tokens ["I", "understand", "his", "reluctance", "have", "his", "family", "around", "the", "violence", ",", "but", "they", "should", "know", "where", "he", "went", "."]
# ::lemmas ["i", "understand", "his", "reluctance", "have", "his", "family", "around", "the", "violence", ",", "but", "they", "should", "know", "where", "he", "go", "."]
(c14-9 / contrast-01
       :ARG1 (c14-3 / understand-01
                    :ARG0 (c14-4 / i)
                    :ARG1 (c14-8 / reluctant-01
                                 :ARG0 (c14-0 / he)
                                 :ARG1 (c14-14 / have-06
                                               :ARG0 c14-0
                                               :ARG1 (c14-1 / family
                                                            :ARG1-of (c14-6 / have-org-role-91
                                                                            :ARG0 c14-0
                                                                            :ARG2 (c14-2 / member)))
                                               :location (c14-12 / around
                                                                 :op1 (c14-7 / violence)))))
       :ARG2 (c14-5 / recommend-01
                    :ARG1 (c14-13 / know-01
                                  :ARG0 c14-1
                                  :ARG1 (c14-11 / thing
                                                :ARG4-of (c14-10 / go-02
                                                                 :ARG0 c14-0)))))

# ::snt that is why you were not given his name, so that he could skip town.
# ::tokens ["that", "is", "why", "you", "were", "not", "given", "his", "name", ",", "so", "that", "he", "could", "skip", "town", "."]
# ::lemmas ["that", "be", "why", "you", "be", "not", "give", "his", "name", ",", "so", "that", "he", "could", "skip", "town", "."]
(c15-3 / cause-01
       :ARG0 (c15-6 / that)
       :ARG1 (c15-1 / name-01
                    :ARG1 (c15-0 / he)
                    :polarity -)
       :purpose (c15-2 / possible-01
                       :ARG1 (c15-5 / skip-01
                                    :ARG0 c15-0
                                    :ARG1 (c15-4 / town))))

# ::snt that's because he is a murderer! Since when is it ok to shoot an unarmed shoplifter??? Get a clue!
# ::tokens ["that", "'s", "because", "he", "is", "a", "murderer", "!", "Since", "when", "is", "it", "ok", "to", "shoot", "an", "unarmed", "shoplifter", "?", "?", "?", "Get", "a", "clue", "!"]
# ::lemmas ["that", "be", "because", "he", "be", "a", "murderer", "!", "since", "when", "be", "it", "ok", "to", "shoot", "an", "unarmed", "shoplifter", "?", "?", "?", "get", "a", "clue", "!"]
(c16-3 / multi-sentence
       :snt1 (c16-9 / cause-01
                    :ARG0 (c16-7 / person
                                 :ARG0-of (c16-8 / murder-01)
                                 :domain (c16-0 / he))
                    :ARG1 (c16-13 / that))
       :snt2 (c16-4 / okay-04
                    :ARG1 (c16-12 / shoot-02
                                  :ARG1 (c16-14 / person
                                                :ARG0-of (c16-5 / shoplift-01)
                                                :ARG1-of (c16-15 / arm-01
                                                                 :polarity -)))
                    :time (c16-2 / since
                                 :op1 (c16-6 / amr-unknown)))
       :snt3 (c16-10 / get-01
                     :ARG0 (c16-1 / you)
                     :ARG1 (c16-11 / clue)
                     :mode imperative))

# ::snt Watch this girl lie through her teeth at :47
# ::tokens ["Watch", "this", "girl", "lie", "through", "her", "teeth", "at", ":", "47"]
# ::lemmas ["watch", "this", "girl", "lie", "through", "her", "tooth", "at", ":", "47"]
(c17-0 / watch-01
       :ARG0 (c17-1 / you)
       :ARG1 (c17-2 / lie-08
                    :ARG0 (c17-4 / girl
                                 :mod (c17-6 / this)
                                 :part (c17-5 / tooth
                                              :manner-of c17-2))
                    :time (c17-3 / date-entity
                                 :time ":47"))
       :mode imperative)

# ::snt What's that they say? "If he's not guilty, then why did he run?!"
# ::tokens ["What", "'s", "that", "they", "say", "?", "\"", "If", "he", "'s", "not", "guilty", ",", "then", "why", "did", "he", "run", "?", "!", "\""]
# ::lemmas ["what", "be", "that", "they", "say", "?", "\"", "if", "he", "be", "not", "guilty", ",", "then", "why", "do", "he", "run", "?", "!", "\""]
(c18-1 / multi-sentence
       :snt1 (c18-6 / say-01
                    :ARG0 (c18-7 / they)
                    :ARG1 (c18-8 / amr-unknown))
       :snt2 (c18-3 / run-02
                    :ARG0 (c18-0 / he)
                    :ARG1-of (c18-4 / cause-01
                                    :ARG0 (c18-2 / amr-unknown))
                    :condition (c18-5 / guilty-01
                                      :ARG1 c18-0
                                      :polarity -)))

# ::snt says what media you choose to believe. You may want to ask how he feels about that statement
# ::tokens ["says", "what", "media", "you", "choose", "to", "believe", ".", "You", "may", "want", "to", "ask", "how", "he", "feels", "about", "that", "statement"]
# ::lemmas ["say", "what", "medium", "you", "choose", "to", "believe", ".", "you", "may", "want", "to", "ask", "how", "he", "feel", "about", "that", "statement"]
(c19-4 / multi-sentence
       :snt1 (c19-11 / say-01
                     :ARG0 (c19-7 / media
                                  :ARG1-of (c19-5 / believe-01
                                                  :ARG0 (c19-1 / you)
                                                  :ARG1-of (c19-9 / choose-01
                                                                  :ARG0 c19-1))))
       :snt2 (c19-8 / possible-01
                    :ARG1 (c19-2 / want-01
                                 :ARG0 (c19-10 / you)
                                 :ARG1 (c19-14 / ask-01
                                               :ARG0 c19-10
                                               :ARG1 (c19-13 / thing
                                                             :ARG1-of (c19-3 / feel-01
                                                                             :ARG0 (c19-0 / he)
                                                                             :ARG2 (c19-6 / state-01
                                                                                          :mod (c19-12 / that))))))))
