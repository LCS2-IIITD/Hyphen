# ::snt ...that's the plan, confuse your opponents: Judo
# ::tokens ["...", "that", "'s", "the", "plan", ",", "confuse", "your", "opponents", ":", "Judo"]
# ::lemmas ["...", "that", "be", "the", "plan", ",", "confuse", "your", "opponent", ":", "judo"]
(c1-1 / multi-sentence
      :snt1 (c1-5 / plan-01
                  :ARG1 (c1-7 / that))
      :snt2 (c1-6 / confuse-01
                  :ARG0 (c1-0 / you)
                  :ARG2 (c1-8 / person
                              :ARG0-of (c1-3 / oppose-01
                                             :ARG1 c1-0)
                              :mod (c1-2 / person
                                         :name (c1-4 / name
                                                     :op1 "Jodi")))
                  :mode imperative))

# ::snt he's probably deep underground finalising the targets before launch.
# ::tokens ["he", "'s", "probably", "deep", "underground", "finalising", "the", "targets", "before", "launch", "."]
# ::lemmas ["he", "be", "probably", "deep", "underground", "finalise", "the", "target", "before", "launch", "."]
(c2-1 / finalize-01
      :ARG0 (c2-0 / he)
      :ARG1 (c2-7 / target)
      :location (c2-3 / underground)
      :mod (c2-5 / probable)
      :ARG1-of (c2-6 / deep-02)
      :time (c2-4 / before
                  :op1 (c2-2 / launch-01
                             :ARG1 c2-7)))

# ::snt Yes the fact that he (if still with us) has 'allowed' these rumours to continue is...interesting.
# ::tokens ["Yes", "the", "fact", "that", "he", "(", "if", "still", "with", "us", ")", "has", "'", "allowed", "'", "these", "rumours", "to", "continue", "is", "...", "interesting", "."]
# ::lemmas ["yes", "the", "fact", "that", "he", "(", "if", "still", "with", "we", ")", "have", "'", "allow", "'", "these", "rumour", "to", "continue", "be", "...", "interesting", "."]
(c3-3 / interest-01
      :ARG0 (c3-8 / allow-01
                  :ARG0 (c3-0 / he)
                  :ARG1 (c3-5 / continue-01
                              :ARG1 (c3-4 / rumor-01
                                          :mod (c3-7 / this)))
                  :condition (c3-2 / accompany-01
                                   :ARG0 c3-0
                                   :ARG1 (c3-1 / we)
                                   :mod (c3-6 / still))))
