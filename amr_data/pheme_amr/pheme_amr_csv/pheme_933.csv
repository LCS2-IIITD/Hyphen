comment,amr
,"# ::snt 
(a / amr-empty)"
: No arrests last night in (per )&lt;--- nice,"# ::snt : No arrests last night in (per )&lt;--- nice
(a / and
      :op1 (a2 / arrest-01
            :polarity -
            :time (d / date-entity
                  :dayperiod (n / night)
                  :mod (y / yesterday)))
      :op2 (n2 / nice-01))"
it's about time. They are going to confirm the name,"# ::snt it's about time. They are going to confirm the name
(m / multi-sentence
      :snt1 (b / be-temporally-at-91
            :ARG2 (a / about-time))
      :snt2 (c / confirm-01
            :ARG0 (t / they)
            :ARG1 (t2 / thing
                  :ARG2-of (n / name-01))))"
"It's Obama fault. "": No arrests last night in (per )""","# ::snt It's Obama fault. "": No arrests last night in (per )""
(m / multi-sentence
      :snt1 (f / fault-01
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Obama""))
            :ARG2 (ii / it))
      :snt2 (a / arrest-01
            :polarity -
            :time (d / date-entity
                  :dayperiod (n2 / night)
                  :mod (y / yesterday))
            :medium (p2 / publication
                  :ARG1-of (c / cite-01))))"
: No arrests last night in (per ),"# ::snt : No arrests last night in (per )
(a / arrest-01
      :polarity -
      :time (d / date-entity
            :dayperiod (n / night)
            :mod (y / yesterday))
      :location (p / per))"
"just a shooting, assault, and damaged cops cars so far","# ::snt just a shooting, assault, and damaged cops cars so far
(a / and
      :op1 (s / shoot-02)
      :op2 (a2 / assault-01)
      :op3 (d / damage-01
            :ARG1 (c / car
                  :poss (c2 / cop)))
      :mod (j / just)
      :time (s2 / so-far))"
nobody was doing anything wrong except for that Nazi fuck who shot and thinks its funny.,"# ::snt nobody was doing anything wrong except for that Nazi fuck who shot and thinks its funny.
(d / do-02
      :ARG0 (n / nobody)
      :ARG1 (a / anything
            :ARG1-of (w / wrong-02))
      :ARG2-of (e / except-01
            :ARG1 (f / fuck
                  :mod (p / political-movement
                        :name (n2 / name
                              :op1 ""Nazism""))
                  :ARG0-of (s / shoot-02)
                  :ARG0-of (t / think-01
                        :ARG1 (f2 / funny-02
                              :ARG1 s)))))"
pls Share it if you against POLICE BRUTALITY,"# ::snt pls Share it if you against POLICE BRUTALITY
(s / share-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :condition (o / oppose-01
            :ARG0 y
            :ARG1 (b / bias-01
                  :ARG1 (p / police))))"
I just watched the governor and the police on and they are going to release the name today,"# ::snt I just watched the governor and the police on and they are going to release the name today
(a / and
      :op1 (w / watch-01
            :ARG0 (ii / i)
            :ARG1 (a2 / and
                  :op1 (p / person
                        :ARG0-of (h / have-org-role-91
                              :ARG2 (g / governor)))
                  :op2 (p2 / police))
            :time (j / just))
      :op2 (r / release-01
            :ARG0 a2
            :ARG1 (t / thing
                  :ARG2-of (n / name-01))
            :time (t2 / today)))"
: : No arrests last night in (per )&lt;--- nice Anonymous has spoken,"# ::snt : : No arrests last night in (per )&lt;--- nice Anonymous has spoken
(a / and
      :op1 (a2 / arrest-01
            :polarity -
            :time (d / date-entity
                  :dayperiod (n / night)
                  :mod (y / yesterday))
            :location (a3 / and
                  :op1 (p / per)
                  :op2 (l / lt)))
      :op2 (s / speak-01
            :ARG0 (p2 / person
                  :name (n2 / name
                        :op1 ""Anonymous"")
                  :ARG1-of (n3 / nice-01))))"
No arrests last night in (per ),"# ::snt No arrests last night in (per )
(a / arrest-01
      :polarity -
      :time (d / date-entity
            :dayperiod (n / night)
            :mod (y / yesterday)))"
