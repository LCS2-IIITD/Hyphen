comment,amr
I get the thought. But giving away police position and knowledge can worsen the situation.,"# ::snt I get the thought. But giving away police position and knowledge can worsen the situation.
(m / multi-sentence
      :snt1 (g / get-01
            :ARG0 (ii / i)
            :ARG1 (t / think-01))
      :snt2 (c / contrast-01
            :ARG2 (p / possible-01
                  :ARG1 (w / worsen-01
                        :ARG0 (g2 / give-away-02
                              :ARG1 (a / and
                                    :op1 (p2 / position-01
                                          :ARG0 (p3 / police))
                                    :op2 (k / know-01
                                          :ARG0 p3)))
                        :ARG1 (s / situation)))))"
more than one,"# ::snt more than one
(m / more-than
      :op1 1)"
and now if hes checking twitter he knows they know,"# ::snt and now if hes checking twitter he knows they know
(a / and
      :op2 (k / know-01
            :ARG0 (h / he)
            :ARG1 k
            :ARG0 (t / they))
      :condition (c / check-01
            :ARG0 h
            :ARG1 (p / publication
                  :name (n / name
                        :op1 ""Twitter""))
            :time (n2 / now)))"
that's the British high commission that building is in lock down for sure.,"# ::snt that's the British high commission that building is in lock down for sure.
(c / commission
      :mod (h / high)
      :mod (c2 / country
            :name (n / name
                  :op1 ""Great""
                  :op2 ""Britain""))
      :domain (t / that)
      :ARG1-of (l / lock-down-04
            :ARG1-of (s / sure-02)))"
stop giving out possible police locations!!!!,"# ::snt stop giving out possible police locations!!!!
(s / stop-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (g / give-out-06
            :ARG0 y
            :ARG1 (l / location
                  :ARG2-of (b / be-located-at-91
                        :ARG1 (p / police))
                  :ARG1-of (p2 / possible-01))))"
Isn't that the British High Commission?,"# ::snt Isn't that the British High Commission?
(g / government-organization
      :name (n / name
            :op1 ""British""
            :op2 ""High""
            :op3 ""Commission"")
      :domain (t / that)
      :ARG1-of (r / request-confirmation-91))"
"Do a lot of rooftop gunmen spend their time checking twitter feeds? Also, I'm more concerned about my friends in Ottawa","# ::snt Do a lot of rooftop gunmen spend their time checking twitter feeds? Also, I'm more concerned about my friends in Ottawa
(m / multi-sentence
      :snt1 (s / spend-02
            :polarity (a / amr-unknown)
            :ARG0 (g / gunman
                  :quant (l / lot)
                  :location (r / roof))
            :ARG1 (t / time)
            :ARG2 (c / check-01
                  :ARG0 g
                  :ARG1 (f / feed
                        :mod (p / publication
                              :name (n / name
                                    :op1 ""Twitter"")))))
      :snt2 (c2 / concern-01
            :ARG0 (p2 / person
                  :location (c3 / city
                        :name (n2 / name
                              :op1 ""Ottawa""))
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (ii / i)
                        :ARG2 (f2 / friend)))
            :ARG1 ii
            :mod (a2 / also)
            :ARG2-of (h2 / have-degree-91
                  :ARG1 ii
                  :ARG3 (m2 / more))))"
"This is literally minutes from my home, unbelievable this is","# ::snt This is literally minutes from my home, unbelievable this is
(b / be-located-at-91
      :ARG1 (t / this)
      :ARG2 (r / relative-position
            :op1 (h / home
                  :poss (ii / i))
            :quant (m / multiple
                  :op1 (t2 / temporal-quantity
                        :quant 1
                        :unit (m2 / minute))
                  :mod (l / literal)))
      :ARG0-of (c / cause-01
            :ARG1 (p / possible-01
                  :polarity -
                  :ARG1 (b2 / believe-01
                        :ARG1 t))))"
live,"# ::snt live
(l / live-01)"
My app is mapping tweets from Ottawa shotting area,"# ::snt My app is mapping tweets from Ottawa shotting area
(m / map-01
      :ARG0 (a / app
            :poss (ii / i))
      :ARG1 (t / tweet-01
            :source (a2 / area
                  :location-of (s / shoot-02)
                  :location (c / city
                        :name (n / name
                              :op1 ""Ottawa"")))))"
Fair enough. I see is stepping back from that tweet a bit.,"# ::snt Fair enough. I see is stepping back from that tweet a bit.
(m / multi-sentence
      :snt1 (f / fair-01
            :ARG2-of (h / have-degree-91
                  :ARG3 (e / enough)))
      :snt2 (s / see-01
            :ARG0 (ii / i)
            :ARG1 (s2 / step-01
                  :ARG2 (b / back)
                  :source (t / thing
                        :ARG1-of (t2 / tweet-01)
                        :mod (t3 / that))
                  :degree (b2 / bit))))"
Get a Copter up there &amp; take him OUT! We don't coddle Terrorists in Canada,"# ::snt Get a Copter up there &amp; take him OUT! We don't coddle Terrorists in Canada
(m / multi-sentence
      :snt1 (a / and
            :op1 (g / get-05
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (c / copter)
                  :ARG2 (t / there
                        :mod (u / up)))
            :op2 (a2 / amp)
            :op3 (t2 / take-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 c
                  :ARG3 (o / out-06
                        :ARG1 c)))
      :snt2 (c2 / coddle-01
            :polarity -
            :ARG0 (w / we)
            :ARG1 (t3 / terrorist
                  :location (c3 / country
                        :name (n / name
                              :op1 ""Canada"")))))"
Careful with that.,"# ::snt Careful with that.
(c / care-04
      :ARG1 (t / that))"
,"# ::snt 
(a / amr-empty)"
this is the british consulate and it is not located at that intersection.,"# ::snt this is the british consulate and it is not located at that intersection.
(a / and
      :op1 (c / consulate
            :mod (c2 / country
                  :name (n / name
                        :op1 ""Great""
                        :op2 ""Britain""))
            :domain (t / this))
      :op2 (b / be-located-at-91
            :polarity -
            :ARG1 c
            :ARG2 (ii / intersect-01
                  :mod (t2 / that))))"
"on roof of British High Commission? Really? Careful what you tweet, folks.","# ::snt on roof of British High Commission? Really? Careful what you tweet, folks.
(m / multi-sentence
      :snt1 (b / be-located-at-91
            :ARG2 (r / roof
                  :part-of (g / government-organization
                        :name (n / name
                              :op1 ""British""
                              :op2 ""High""
                              :op3 ""Commission"")))
            :polarity (a / amr-unknown)
            :polarity (a2 / amr-unknown))
      :snt2 (c / care-04
            :ARG0 (f / folk)
            :ARG1 (t / thing
                  :ARG1-of (t2 / tweet-02
                        :ARG0 (y / you)))
            :ARG1-of (r2 / real-04)))"
That's the UK High Commission building.,"# ::snt That's the UK High Commission building.
(b / building
      :name (n / name
            :op1 ""UK""
            :op2 ""High""
            :op3 ""Commission"")
      :domain (t / that))"
That's the British High Commission.,"# ::snt That's the British High Commission.
(g / government-organization
      :name (n / name
            :op1 ""British""
            :op2 ""High""
            :op3 ""Commission"")
      :domain (t / that))"
if the same one from the block - how does he make it there?,"# ::snt if the same one from the block - how does he make it there?
(m / make-it-14
      :ARG0 (h / he)
      :ARG1 (ii / it)
      :ARG2 (t / there)
      :manner (a / amr-unknown)
      :condition (t2 / thing
            :ARG1-of (s / same-01)
            :source (b / block)))"
