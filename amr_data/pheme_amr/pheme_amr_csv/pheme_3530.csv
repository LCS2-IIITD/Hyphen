comment,amr
"DrPres, Starfall and Daniel Cardlucci on the run, chF tango'd.","# ::snt DrPres, Starfall and Daniel Cardlucci on the run, chF tango'd.
(t / tango-00
      :ARG0 (a / and
            :op1 (p / person
                  :name (n / name
                        :op1 ""DrPres""))
            :op2 (p2 / person
                  :name (n2 / name
                        :op1 ""Starfall""))
            :op3 (p3 / person
                  :name (n3 / name
                        :op1 ""Daniel""
                        :op2 ""Cardlucci""))
            :ARG1-of (r / run-13))
      :mod (c / chF))"
kill them all,"# ::snt kill them all
(k / kill-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / they
            :mod (a / all)))"
dead faggot,"# ::snt dead faggot
(f / faggot
      :ARG1-of (d / die-01))"
"I love that word when dealing with Terrorist- "" Dealt With"" Not arrested, not on trial BUT DEAD FUCKING DEADIE DEAD","# ::snt I love that word when dealing with Terrorist- "" Dealt With"" Not arrested, not on trial BUT DEAD FUCKING DEADIE DEAD
(l / love-01
      :ARG0 (ii / i)
      :ARG1 (w / word-01
            :ARG1 (c / contrast-01
                  :ARG1 (a / arrest-01
                        :polarity -
                        :ARG1 (t / terrorist))
                  :ARG2 (t2 / try-02
                        :polarity -
                        :ARG1 t))
            :mod (t3 / that))
      :time (d / deal-01
            :ARG0 ii
            :ARG1 t))"
"Here we should be able to execute them send them on to their Virginians if we can PROVE Bypassing death ROW,","# ::snt Here we should be able to execute them send them on to their Virginians if we can PROVE Bypassing death ROW,
(r / recommend-01
      :ARG1 (p / possible-01
            :ARG1 (a / and
                  :op1 (e / execute-01
                        :ARG0 (w / we)
                        :ARG1 (t / they))
                  :op2 (s / send-03
                        :ARG0 w
                        :ARG1 t
                        :ARG2 (p2 / person
                              :mod (s2 / state
                                    :name (n / name
                                          :op1 ""Virginia""))
                              :poss t)))
            :condition (p3 / possible-01
                  :ARG1 (p4 / prove-01
                        :ARG0 w
                        :ARG1 (p5 / pass-03
                              :ARG1 (d / die-01)))))
      :location (h / here))"
that'd make two then,"# ::snt that'd make two then
(m / make-01
      :ARG0 (t / that)
      :ARG1 (t2 / thing
            :quant 2)
      :time (t3 / then))"
": BREAKING NEWS: OTTAWA POLICE CONFIRM TO ABC NEWS THEY ARE LOOKING FOR SUSPECTS, ONE HAS BEEN 'DEALT WITH'","# ::snt : BREAKING NEWS: OTTAWA POLICE CONFIRM TO ABC NEWS THEY ARE LOOKING FOR SUSPECTS, ONE HAS BEEN 'DEALT WITH'
(m / multi-sentence
      :snt1 (b / broadcast-program
            :name (n / name
                  :op1 ""Breitbart""
                  :op2 ""News"")
            :ARG1-of (b2 / break-13))
      :snt2 (c / confirm-01
            :ARG0 (p / police
                  :mod (c2 / city
                        :name (n2 / name
                              :op1 ""OTTAWA"")))
            :ARG1 (l / look-01
                  :ARG0 p
                  :ARG1 (c3 / crisis))
            :ARG2 (b3 / broadcast-program
                  :name (n3 / name
                        :op1 ""ABC""
                        :op2 ""News""))))"
allah hu akbar,"# ::snt allah hu akbar
(h / hu'a'Allah
      :mode expressive)"
amen to that brother,"# ::snt amen to that brother
(a / amen
      :beneficiary (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG2 (b / brother))
            :mod (t / that)))"
I hope they turn those jihadist cowards into swish cheese.,"# ::snt I hope they turn those jihadist cowards into swish cheese.
(h / hope-01
      :ARG0 (ii / i)
      :ARG1 (t / turn-02
            :ARG0 (t2 / they)
            :ARG1 (c / coward
                  :mod (j / jihadist)
                  :mod (t3 / that))
            :ARG2 (c2 / cheese
                  :mod (s / swish))))"
totally just followed you,"# ::snt totally just followed you
(f / follow-02
      :ARG1 (y / you)
      :mod (t / total)
      :mod (j / just))"
