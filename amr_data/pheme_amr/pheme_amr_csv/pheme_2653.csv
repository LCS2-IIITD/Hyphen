comment,amr
"is the situation over or is it still ""unfloding""?","# ::snt is the situation over or is it still ""unfloding""?
(a / amr-choice
      :op1 (o / over-01
            :ARG1 (s / situation))
      :op2 (f / flipflode-01
            :polarity -
            :ARG1 s
            :time (s2 / still)))"
what about the other confirmed gunmen?,"# ::snt what about the other confirmed gunmen?
(a / amr-unknown
      :topic (g / gunman
            :mod (o / other)
            :ARG1-of (c / confirm-01)))"
Keep the situation in Ottawa in your prayers.,"# ::snt Keep the situation in Ottawa in your prayers.
(k / keep-02
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / situation
            :location (c / city
                  :name (n / name
                        :op1 ""Ottawa"")))
      :ARG2 (p / pray-01
            :ARG0 y
            :ARG1 s))"
"Basically, police won't disclose anything more than what we've already pieced together for ourselves.","# ::snt Basically, police won't disclose anything more than what we've already pieced together for ourselves.
(d / disclose-01
      :polarity -
      :ARG0 (p / police)
      :ARG1 (a / anything
            :ARG1-of (h / have-quant-91
                  :ARG3 (m / more)
                  :ARG4 (t / thing
                        :ARG1-of (p2 / pieced-01
                              :ARG0 (w / we)
                              :mod (t2 / together)
                              :time (a2 / already)))))
      :mod (b / basic))"
Another bad guy in Rideau Hull RCMP friend confirms,"# ::snt Another bad guy in Rideau Hull RCMP friend confirms
(c / confirm-01
      :ARG0 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (o / organization
                        :name (n / name
                              :op1 ""RCRC""))
                  :ARG2 (f / friend))
            :location (c2 / city
                  :name (n2 / name
                        :op1 ""Rikeau""
                        :op2 ""Hull""))
            :mod (a / another)
            :ARG1-of (b / bad-07)))"
"ans tmorrow lits raining ,badluck","# ::snt ans tmorrow lits raining ,badluck
(r / rain-01
      :time (d / date-entity
            :dayperiod (n / night)
            :mod (t / tomorrow))
      :ARG2-of (b / bad-luck-00))"
