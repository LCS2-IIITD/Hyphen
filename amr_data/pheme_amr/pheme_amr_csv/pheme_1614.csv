comment,amr
"It is now reported that French special forces have stormed the printing plant. Gunshots, explosions and smoke are visible","# ::snt It is now reported that French special forces have stormed the printing plant. Gunshots, explosions and smoke are visible
(m / multi-sentence
      :snt1 (r / report-01
            :ARG1 (s / storm-02
                  :ARG0 (f / force
                        :ARG1-of (s2 / special-02)
                        :mod (c / country
                              :name (n / name
                                    :op1 ""France"")))
                  :ARG1 (p / plant
                        :ARG0-of (p2 / print-01)))
            :time (n2 / now))
      :snt2 (p3 / possible-01
            :ARG1 (s3 / see-01
                  :ARG1 (a / and
                        :op1 (s4 / shoot-02)
                        :op2 (e / explode-01)
                        :op3 (s5 / smoke)))))"
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
! MT : Paris gunman vows to kill hostages if France storms printing plant w/ hunted down brothers,"# ::snt ! MT : Paris gunman vows to kill hostages if France storms printing plant w/ hunted down brothers
(a / and
      :op1 (p / publication
            :name (n / name
                  :op1 ""MT""))
      :op2 (v / vow-01
            :ARG0 (g / gunman
                  :location (c / city
                        :name (n2 / name
                              :op1 ""Paris"")))
            :ARG1 (k / kill-01
                  :ARG0 g
                  :ARG1 (h / hostage)
                  :condition (s / storm-01
                        :ARG0 (c2 / country
                              :name (n3 / name
                                    :op1 ""France""))
                        :ARG1 (p2 / plant
                              :ARG0-of (p3 / print-01))
                        :manner (h2 / hunt-01
                              :ARG0 c2
                              :ARG1 (p4 / person
                                    :ARG0-of (h3 / have-rel-role-91
                                          :ARG1 g
                                          :ARG2 (b / brother))))))))"
:it's just been stormed tho,"# ::snt :it's just been stormed tho
(h / have-concession-91
      :ARG1 (s / storm-01
            :ARG1 (ii / it)
            :time (j / just)))"
: gunman vows to kill if France storms printing plant,"# ::snt : gunman vows to kill if France storms printing plant
(v / vow-01
      :ARG0 (g / gunman)
      :ARG1 (k / kill-01
            :ARG0 g
            :condition (s / storm-02
                  :ARG0 (c / country
                        :name (n / name
                              :op1 ""France""))
                  :ARG1 (p / plant
                        :ARG0-of (p2 / print-01)))))"
:Schoten nu...,"# ::snt :Schoten nu...
(s / string-entity
      :value ""Schoten nu"")"
You cant show any weakness never negotiate out of fear,"# ::snt You cant show any weakness never negotiate out of fear
(a / and
      :op1 (p / possible-01
            :polarity -
            :ARG1 (s / show-01
                  :ARG0 (y / you)
                  :ARG1 (w / weak-02
                        :ARG1 y
                        :mod (a2 / any))))
      :op2 (n / negotiate-01
            :polarity -
            :ARG0 y
            :time (e / ever)
            :ARG1-of (c / cause-01
                  :ARG0 (f / fear-01))))"
"they are going to kill the hostages anyway so get into both at the same time, if the French can't do it there's some boys in Hereford","# ::snt they are going to kill the hostages anyway so get into both at the same time, if the French can't do it there's some boys in Hereford
(a / and
      :op1 (k / kill-01
            :ARG0 (t / they)
            :ARG1 (h / hostage)
            :mod (a2 / anyway)
            :ARG0-of (c / cause-01
                  :ARG1 (g / get-05
                        :mode imperative
                        :ARG0 (y / you)
                        :ARG1 y
                        :ARG2 (b / both)
                        :time (t2 / time
                              :ARG1-of (s / same-01)))))
      :op2 (b2 / boy
            :quant (s2 / some)
            :location (h2 / hereford)
            :condition (p / possible-01
                  :polarity -
                  :ARG1 (d / do-02
                        :ARG0 (p2 / person
                              :mod (c2 / country
                                    :name (n / name
                                          :op1 ""France"")))
                        :ARG1 k))))"
,"# ::snt 
(a / amr-empty)"
take them all out at the same time!,"# ::snt take them all out at the same time!
(t / take-out-11
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / they
            :mod (a / all))
      :time (t3 / time
            :ARG1-of (s / same-01)))"
,"# ::snt 
(a / amr-empty)"
They're not martyrs to a cause; they're easily manipulated idiots and murderers.,"# ::snt They're not martyrs to a cause; they're easily manipulated idiots and murderers.
(c / contrast-01
      :ARG1 (m / martyr-01
            :polarity -
            :ARG1 (t / they)
            :beneficiary (c2 / cause))
      :ARG2 (a / and
            :op1 (ii / idiot)
            :op2 (p / person
                  :ARG0-of (m2 / murder-01))
            :domain t
            :ARG1-of (m3 / manipulate-01
                  :ARG1-of (e / easy-05))))"
Take them out.,"# ::snt Take them out.
(t / take-out-11
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / they))"
"from what I've heard, France has very good equivalent to SWAT. Hostages should be ok","# ::snt from what I've heard, France has very good equivalent to SWAT. Hostages should be ok
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (c / country
                  :name (n / name
                        :op1 ""France""))
            :ARG1 (e / equivalent
                  :ARG1-of (g / good-02
                        :degree (v / very))
                  :ARG1-of (s / say-01
                        :ARG0 (t / thing
                              :ARG1-of (h2 / hear-01
                                    :ARG0 (ii / i))))))
      :snt2 (r / recommend-01
            :ARG1 (o / okay-04
                  :ARG1 (h3 / hostage))))"
Ik hoop niet dat dit uitkomt Paris gunman vows to kill hostages if France storms printing plant with brothers accused of attacking CH,"# ::snt Ik hoop niet dat dit uitkomt Paris gunman vows to kill hostages if France storms printing plant with brothers accused of attacking CH
(v / vow-01
      :ARG0 (g / gunman
            :location (c / city
                  :name (n / name
                        :op1 ""Paris"")))
      :ARG1 (k / kill-01
            :ARG0 g
            :ARG1 (h / hostage))
      :condition (s / storm-02
            :ARG0 (c2 / country
                  :name (n2 / name
                        :op1 ""France""))
            :ARG1 (p / plant
                  :ARG0-of (p2 / print-01))
            :accompanier (b / brother
                  :ARG1-of (a / accuse-01
                        :ARG2 (a2 / attack-01
                              :ARG0 b
                              :ARG1 c2
                              :name (n3 / name
                                    :op1 ""CH"")))))
      :ARG1-of (m / make-02
            :ARG0 (a3 / amr-unintelligible
                  :value ""Ik""
                  :op2 ""Hoop"")))"
- So true.,"# ::snt - So true.
(t / true-01
      :degree (s / so))"
Is the printing plant the one that printed the Charles Hebdo magazine?,"# ::snt Is the printing plant the one that printed the Charles Hebdo magazine?
(p / plant
      :polarity (a / amr-unknown)
      :ARG0-of (p2 / print-01)
      :domain (p3 / plant
            :ARG0-of (p4 / print-01
                  :ARG1 (m / magazine
                        :name (n / name
                              :op1 ""Charles""
                              :op2 ""Be Hebdo"")))))"
Seize both locations at the same time.,"# ::snt Seize both locations at the same time.
(s / see-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / location
            :mod (b / both))
      :time (t / time
            :ARG1-of (s2 / same-01)))"
need to rewrite that post-misplaced modifier,"# ::snt need to rewrite that post-misplaced modifier
(n / need-01
      :ARG1 (r / rewrite-01
            :ARG1 (t / thing
                  :ARG0-of (m / modify-01)
                  :time (a / after
                        :op1 (p / place-01
                              :ARG1 t))
                  :mod (t2 / that))))"
