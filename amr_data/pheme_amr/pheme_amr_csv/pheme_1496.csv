comment,amr
MT : A tribute to the lives lost in crash set to music from &amp;,"# ::snt MT : A tribute to the lives lost in crash set to music from &amp;
(t / tribute
      :topic (l / life
            :ARG1-of (l2 / lose-02
                  :ARG1-of (c / cause-01
                        :ARG0 (c2 / crash-01))))
      :ARG1-of (s / set-02
            :ARG2 (m / music
                  :source (c3 / company
                        :name (n / name
                              :op1 ""&amp""))))
      :ARG1-of (s2 / say-01
            :ARG0 (p / publication
                  :name (n2 / name
                        :op1 ""MT""))))"
R.I.P.WingedLives. Thinking of all of you tonight and of the fact that you WILL be remembered by millions.,"# ::snt R.I.P.WingedLives. Thinking of all of you tonight and of the fact that you WILL be remembered by millions.
(m / multi-sentence
      :snt1 (p / person
            :name (n / name
                  :op1 ""R.I.P.""
                  :op2 ""WingedLives""))
      :snt2 (t / think-01
            :ARG1 (a / and
                  :op1 (y / you
                        :mod (a2 / all)
                        :time (d / date-entity
                              :dayperiod (n2 / night)
                              :mod (t2 / today)))
                  :op2 (f / fact
                        :topic (r / remember-01
                              :ARG1 y
                              :quant (m2 / multiple
                                    :op1 1000000))))))"
A tribute lives lost in crash to music &amp;,"# ::snt A tribute lives lost in crash to music &amp;
(l / lose-02
      :ARG1 (l2 / life
            :mod (t / tribute))
      :ARG1-of (c / cause-01
            :ARG0 (c2 / crash-01
                  :ARG1 (m / music
                        :name (n / name
                              :op1 ""&amp"")))))"
Here is a song for you. Real straight men claiming to be brave so I give them pyche test.,"# ::snt Here is a song for you. Real straight men claiming to be brave so I give them pyche test.
(m / multi-sentence
      :snt1 (s / song
            :beneficiary (y / you)
            :location (h / here))
      :snt2 (c / claim-01
            :ARG0 (m2 / man
                  :ARG1-of (s2 / straight-05)
                  :ARG1-of (r / real-04))
            :ARG1 (b / brave-02
                  :ARG0 m2)
            :ARG0-of (c2 / cause-01
                  :ARG1 (t / test-01
                        :ARG0 (ii / i)
                        :ARG1 m2
                        :mod (p / pyche)))))"
"prayers out those scared souls who died by an evil man on a mission,Ontario Canada grieves with U &amp; will ever keep U N our prayers","# ::snt prayers out those scared souls who died by an evil man on a mission,Ontario Canada grieves with U &amp; will ever keep U N our prayers
(m / multi-sentence
      :snt1 (p / pray-01
            :ARG0 (w / we)
            :ARG1 (s / soul
                  :ARG1-of (s2 / scare-01)
                  :ARG1-of (d / die-01
                        :ARG0 (m2 / man
                              :mod (e / evil)
                              :ARG0-of (m3 / mission-01)))
                  :mod (t / that))
            :direction (o / out))
      :snt2 (g / grieve-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 ""Ontario""
                        :op2 ""Canada""))
            :accompanier (c2 / company
                  :name (n2 / name
                        :op1 ""U&amp"")))
      :snt3 (k / keep-01
            :ARG0 (w2 / we)
            :ARG1 p
            :ARG0 (w3 / we)
            :ARG1 (p2 / person
                  :name (n3 / name
                        :op1 ""U""
                        :op2 ""N"")))
      :time (e2 / ever))"
Yes Indeed may they R.I.P..,"# ::snt Yes Indeed may they R.I.P..
(p / possible-01
      :ARG1 (p2 / person
            :name (n / name
                  :op1 ""R.I.P.""))
      :mod (ii / indeed))"
