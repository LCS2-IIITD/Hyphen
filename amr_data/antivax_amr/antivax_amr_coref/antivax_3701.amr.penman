# ::snt who would?
# ::tokens ["who", "would", "?"]
# ::lemmas ["who", "would", "?"]
(c1-0 / amr-unknown)

# ::snt {~{JSKSKSMSKSJN PLZ THGD SO FUNNY TO MY AND I DONT KNOW WHY
# ::tokens ["{", "~{JSKSKSMSKSJN", "PLZ", "THGD", "SO", "FUNNY", "TO", "MY", "AND", "I", "DONT", "KNOW", "WHY"]
# ::lemmas ["{", "~{jsksksmsksjn", "PLZ", "thgd", "so", "funny", "to", "MY", "and", "i", "dont", "know", "why"]
(c2-1 / and
      :op1 (c2-6 / have-degree-91
                 :ARG1 (c2-8 / person
                             :name (c2-9 / name
                                         :op1 "JSKSKSMSKSJN PLZ"))
                 :ARG2 (c2-3 / fun-01
                             :ARG1 c2-8)
                 :ARG3 (c2-0 / so)
                 :ARG6 (c2-4 / i))
      :op2 (c2-2 / know-01
                 :ARG0 c2-4
                 :ARG1 (c2-7 / thing
                             :ARG0-of (c2-5 / cause-01
                                            :ARG1 c2-3))
                 :polarity -))

# ::snt LMAO DIDN'T MEAN TO SAY SIMP BUT LIKE SHRIMP SHORTENED LMAO
# ::tokens ["LMAO", "DIDN'T", "MEAN", "TO", "SAY", "SIMP", "BUT", "LIKE", "SHRIMP", "SHORTENED", "LMAO"]
# ::lemmas ["LMAO", "didn't", "mean", "to", "say", "SIMP", "but", "like", "SHRIMP", "SHORTENED", "LMAO"]
(c3-1 / contrast-01
      :ARG1 (c3-6 / mean-01
                  :ARG2 (c3-0 / say-01
                              :ARG1 (c3-5 / string-entity
                                          :value "somper"))
                  :polarity -)
      :ARG2 (c3-4 / resemble-01
                  :ARG1 c3-5
                  :ARG2 (c3-2 / string-entity
                              :ARG2-of (c3-3 / shorten-04)
                              :value "SHRIMP")))

# ::snt simp
# ::tokens ["simp"]
# ::lemmas ["simp"]
(c4-0 / pimp)

# ::snt bere
# ::tokens ["bere"]
# ::lemmas ["bere"]
(c5-0 / by-the-way)

# ::snt donie
# ::tokens ["donie"]
# ::lemmas ["donie"]
(c7-0 / person
      :name (c7-1 / name
                  :op1 "Donie"))

# ::snt penin
# ::tokens ["penin"]
# ::lemmas ["penin"]
(c8-0 / person
      :name (c8-1 / name
                  :op1 "Penin"))

# ::snt mwah
# ::tokens ["mwah"]
# ::lemmas ["mwah"]
(c9-0 / wah
      :mode expressive)

# ::snt gorla
# ::tokens ["gorla"]
# ::lemmas ["gorla"]
(c10-0 / person
       :name (c10-1 / name
                    :op1 "gorla"))

# ::snt we can be sad together
# ::tokens ["we", "can", "be", "sad", "together"]
# ::lemmas ["we", "can", "be", "sad", "together"]
(c11-2 / possible-01
       :ARG1 (c11-0 / sad-02
                    :ARG1 (c11-1 / we)
                    :mod (c11-3 / together)))

# ::snt I didn't get any either
# ::tokens ["I", "did", "n't", "get", "any", "either"]
# ::lemmas ["i", "do", "not", "get", "any", "either"]
(c12-0 / get-01
       :ARG0 (c12-1 / i)
       :ARG1 (c12-2 / any)
       :mod (c12-3 / either)
       :polarity -)

# ::snt yes i asked for legos for chritmas and i didnt get any so im sad
# ::tokens ["yes", "i", "asked", "for", "legos", "for", "chritmas", "and", "i", "did", "nt", "get", "any", "so", "i", "m", "sad"]
# ::lemmas ["yes", "i", "ask", "for", "legos", "for", "chritmas", "and", "i", "do", "not", "get", "any", "so", "i", "m", "sad"]
(c13-3 / cause-01
       :ARG0 (c13-1 / and
                    :op1 (c13-8 / ask-02
                                :ARG0 (c13-6 / i)
                                :ARG1 (c13-4 / lego)
                                :purpose (c13-2 / festival
                                                :name (c13-7 / name
                                                             :op1 "Christmas")))
                    :op2 (c13-5 / get-01
                                :ARG0 c13-6
                                :ARG1 c13-4
                                :polarity -))
       :ARG1 (c13-0 / sad-02
                    :ARG1 c13-6))

# ::snt Wanna build a lego set
# ::tokens ["Wanna", "build", "a", "lego", "set"]
# ::lemmas ["Wanna", "build", "a", "lego", "set"]
(c14-1 / want-01
       :ARG0 (c14-4 / i)
       :ARG1 (c14-3 / build-01
                    :ARG0 c14-4
                    :ARG1 (c14-0 / set
                                 :mod (c14-2 / lego))))

# ::snt i wasent worried in the first place
# ::tokens ["i", "wasent", "worried", "in", "the", "first", "place"]
# ::lemmas ["i", "wasent", "worry", "in", "the", "first", "place"]
(c15-0 / worry-01
       :ARG1 (c15-1 / i)
       :mod (c15-2 / in-the-first-place))

# ::snt WHAT
# ::tokens ["WHAT"]
# ::lemmas ["what"]
(c16-0 / amr-unknown)

# ::snt ice in my ass what do I do
# ::tokens ["ice", "in", "my", "ass", "what", "do", "I", "do"]
# ::lemmas ["ice", "in", "my", "ass", "what", "do", "i", "do"]
(c17-0 / do-02
       :ARG0 (c17-1 / i
                    :part (c17-2 / ass))
       :ARG1 (c17-3 / amr-unknown)
       :location c17-2)

# ::snt i cant say i didnt want to but im proud to say i didnt
# ::tokens ["i", "ca", "nt", "say", "i", "did", "nt", "want", "to", "but", "i", "m", "proud", "to", "say", "i", "did", "nt"]
# ::lemmas ["i", "can", "not", "say", "i", "do", "not", "want", "to", "but", "i", "m", "proud", "to", "say", "i", "do", "not"]
(c18-3 / contrast-01
       :ARG1 (c18-6 / possible-01
                    :ARG1 (c18-0 / say-01
                                 :ARG0 (c18-1 / i)
                                 :ARG1 (c18-2 / want-01
                                              :ARG0 c18-1
                                              :polarity -))
                    :polarity -)
       :ARG2 (c18-4 / pride-01
                    :ARG0 c18-1
                    :ARG2 (c18-5 / say-01
                                 :ARG0 c18-1
                                 :ARG1 c18-2)))

# ::snt same why the fuck would u wanna fuck urself using a peice of ice
# ::tokens ["same", "why", "the", "fuck", "would", "u", "wanna", "fuck", "urself", "using", "a", "peice", "of", "ice"]
# ::lemmas ["same", "why", "the", "fuck", "would", "u", "wanna", "fuck", "urself", "use", "a", "peice", "of", "ice"]
(c19-0 / same-01
       :ARG2 (c19-4 / want-01
                    :ARG0 (c19-9 / you)
                    :ARG1 (c19-2 / fuck-01
                                 :ARG0 c19-9
                                 :ARG1 c19-9
                                 :manner (c19-5 / use-01
                                                :ARG0 c19-9
                                                :ARG1 (c19-8 / ice
                                                             :quant (c19-7 / peice))))
                    :ARG1-of (c19-3 / cause-01
                                    :ARG0 (c19-1 / amr-unknown)
                                    :mod (c19-6 / fuck
                                                :mode expressive))))

# ::snt I never did that
# ::tokens ["I", "never", "did", "that"]
# ::lemmas ["i", "never", "do", "that"]
(c20-0 / do-02
       :ARG0 (c20-1 / i)
       :ARG1 (c20-2 / that)
       :time (c20-3 / ever)
       :polarity -)

# ::snt proud to say i never did that
# ::tokens ["proud", "to", "say", "i", "never", "did", "that"]
# ::lemmas ["proud", "to", "say", "i", "never", "do", "that"]
(c21-4 / pride-01
       :ARG0 (c21-2 / i)
       :ARG2 (c21-0 / say-01
                    :ARG0 c21-2
                    :ARG1 (c21-1 / do-02
                                 :ARG0 c21-2
                                 :ARG1 (c21-3 / that)
                                 :time (c21-5 / ever)
                                 :polarity -)))
