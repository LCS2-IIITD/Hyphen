# ::snt Im only pressed so I can go home. I miss yall niggas man.
# ::tokens ["I", "m", "only", "pressed", "so", "I", "can", "go", "home", ".", "I", "miss", "y", "all", "niggas", "man", "."]
# ::lemmas ["i", "m", "only", "press", "so", "i", "can", "go", "home", ".", "i", "miss", "you", "all", "niggas", "man", "."]
(c1-9 / multi-sentence
      :snt1 (c1-8 / press-01
                  :ARG1 (c1-1 / i)
                  :mod (c1-5 / only)
                  :purpose (c1-6 / possible-01
                                 :ARG1 (c1-7 / go-02
                                             :ARG0 c1-1
                                             :ARG4 (c1-3 / home))))
      :snt2 (c1-2 / miss-01
                  :ARG0 (c1-4 / i)
                  :ARG1 (c1-11 / you
                               :mod (c1-0 / all)
                               :mod (c1-10 / niggas))))

# ::snt Lol I was going to sign up to get mines but chickened out and by time I changed my mind they ran out
# ::tokens ["Lol", "I", "was", "going", "to", "sign", "up", "to", "get", "mines", "but", "chickened", "out", "and", "by", "time", "I", "changed", "my", "mind", "they", "ran", "out"]
# ::lemmas ["Lol", "i", "be", "go", "to", "sign", "up", "to", "get", "mine", "but", "chickene", "out", "and", "by", "time", "i", "change", "my", "mind", "they", "run", "out"]
(c2-3 / contrast-01
      :ARG1 (c2-0 / sign-up-03
                  :ARG1 (c2-10 / i)
                  :ARG3 (c2-9 / get-01
                              :ARG0 c2-10
                              :ARG1 (c2-11 / mine))
                  :mod (c2-7 / laugh-01
                             :ARG0 c2-10
                             :manner (c2-8 / loud)
                             :mode expressive))
      :ARG2 (c2-2 / and
                  :op1 (c2-1 / chicken-out-02
                             :ARG0 c2-10)
                  :op2 (c2-6 / run-out-05
                             :ARG1 c2-11
                             :time (c2-12 / by
                                          :op1 (c2-5 / change-01
                                                     :ARG0 c2-10
                                                     :ARG1 (c2-4 / mind-05
                                                                 :ARG0 c2-10))))))

# ::snt Im sure youll be able to get it soon babe
# ::tokens ["I", "m", "sure", "you", "ll", "be", "able", "to", "get", "it", "soon", "babe"]
# ::lemmas ["i", "m", "sure", "you", "ll", "be", "able", "to", "get", "it", "soon", "babe"]
(c3-0 / say-01
      :ARG0 (c3-6 / i)
      :ARG1 (c3-5 / sure-02
                  :ARG0 c3-6
                  :ARG1 (c3-3 / possible-01
                              :ARG1 (c3-4 / get-01
                                          :ARG0 (c3-7 / babe)
                                          :ARG1 (c3-1 / it)
                                          :time (c3-2 / soon))))
      :ARG2 c3-7)

# ::snt Ugh Im jealous lmfao
# ::tokens ["Ugh", "I", "m", "jealous", "lmfao"]
# ::lemmas ["ugh", "i", "m", "jealous", "lmfao"]
(c5-0 / say-01
      :ARG0 (c5-4 / i)
      :ARG1 (c5-3 / jealous-02
                  :ARG0 c5-4
                  :mod (c5-1 / ugh
                             :mode expressive))
      :ARG2 (c5-2 / person
                  :name (c5-5 / name
                              :op1 "Lmfao")))

# ::snt My job wasnt playing. There was a nurse in my office to sign me up before I even got to work.
# ::tokens ["My", "job", "was", "nt", "playing", ".", "There", "was", "a", "nurse", "in", "my", "office", "to", "sign", "me", "up", "before", "I", "even", "got", "to", "work", "."]
# ::lemmas ["my", "job", "be", "not", "play", ".", "there", "be", "a", "nurse", "in", "my", "office", "to", "sign", "i", "up", "before", "i", "even", "get", "to", "work", "."]
(c6-10 / multi-sentence
       :snt1 (c6-9 / play-01
                   :ARG0 (c6-8 / job
                               :poss (c6-2 / i))
                   :polarity -)
       :snt2 (c6-7 / be-located-at-91
                   :ARG1 (c6-11 / nurse)
                   :ARG2 (c6-5 / office
                               :poss (c6-4 / i))
                   :purpose (c6-0 / sign-up-03
                                  :ARG0 c6-11
                                  :ARG1 c6-4
                                  :time (c6-1 / before
                                              :op1 (c6-6 / get-05
                                                         :ARG1 c6-4
                                                         :ARG2 (c6-3 / work-01
                                                                     :ARG0 c6-4)
                                                         :mod (c6-12 / even))))))
