# ::snt Bring it on I sayIll be like this in my garden when you all come round
# ::tokens ["Bring", "it", "on", "I", "sayIll", "be", "like", "this", "in", "my", "garden", "when", "you", "all", "come", "round"]
# ::lemmas ["bring", "it", "on", "i", "sayIll", "be", "like", "this", "in", "my", "garden", "when", "you", "all", "come", "round"]
(c1-1 / and
      :op1 (c1-0 / say-01
                 :ARG0 (c1-8 / i)
                 :ARG1 (c1-7 / bring-on-06
                             :ARG0 (c1-9 / you
                                         :mod (c1-10 / all))
                             :ARG1 (c1-2 / it)
                             :mode imperative)
                 :op2-of c1-1)
      :ARG0 c1-8
      :ARG1 (c1-5 / resemble-01
                  :ARG1 c1-8
                  :ARG2 (c1-4 / this)
                  :location (c1-6 / garden
                                  :poss c1-8)
                  :time (c1-3 / round-out-01
                              :ARG0 c1-9)))

# ::snt Im convinced Boris Johnson looked at Chris Farley and said yea, I can do that.
# ::tokens ["I", "m", "convinced", "Boris", "Johnson", "looked", "at", "Chris", "Farley", "and", "said", "yea", ",", "I", "can", "do", "that", "."]
# ::lemmas ["i", "m", "convinced", "Boris", "Johnson", "look", "at", "Chris", "Farley", "and", "say", "yea", ",", "i", "can", "do", "that", "."]
(c2-4 / convince-01
      :ARG1 (c2-3 / i)
      :ARG2 (c2-2 / and
                  :op1 (c2-9 / look-01
                             :ARG0 (c2-10 / person
                                          :name (c2-11 / name
                                                       :op1 "Boris"
                                                       :op2 "Johnson"))
                             :ARG1 (c2-6 / person
                                         :name (c2-8 / name
                                                     :op1 "Chris"
                                                     :op2 "Farley")))
                  :op2 (c2-0 / say-01
                             :ARG0 c2-10
                             :ARG1 (c2-5 / possible-01
                                         :ARG1 (c2-1 / do-02
                                                     :ARG0 c2-10
                                                     :ARG1 (c2-7 / that))))))

# ::snt Us Causing murder
# ::tokens ["Us", "Causing", "murder"]
# ::lemmas ["Us", "Causing", "murder"]
(c3-2 / Cause-01
      :ARG0 (c3-0 / we)
      :ARG1 (c3-1 / murder-01))

# ::snt Im in
# ::tokens ["I", "m", "in"]
# ::lemmas ["i", "m", "in"]
(c4-0 / i
      :location (c4-1 / amr-empty))
