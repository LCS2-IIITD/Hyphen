# ::snt Patti Labelle does live in Philadelphia, how are you going to tell somebody where they live?!
# ::tokens ["Patti", "Labelle", "does", "live", "in", "Philadelphia", ",", "how", "are", "you", "going", "to", "tell", "somebody", "where", "they", "live", "?", "!"]
# ::lemmas ["Patti", "Labelle", "do", "live", "in", "Philadelphia", ",", "how", "be", "you", "go", "to", "tell", "somebody", "where", "they", "live", "?", "!"]
(c1-7 / live-01
      :ARG0 (c1-9 / person
                  :name (c1-10 / name
                               :op1 "Patti"
                               :op2 "Labelle"))
      :location (c1-3 / city
                      :name (c1-6 / name
                                  :op1 "Philadelphia"))
      :ARG0-of (c1-0 / cause-01
                     :ARG1 (c1-5 / tell-01
                                 :ARG0 (c1-11 / you)
                                 :ARG1 (c1-4 / thing
                                             :location-of (c1-8 / live-01
                                                                :ARG0 (c1-1 / somebody
                                                                            :ARG2-of c1-5)))
                                 :manner (c1-2 / amr-unknown))))

# ::snt No
# ::tokens ["No"]
# ::lemmas ["no"]
(c2-0 / no)

# ::snt On May it won't matter. They will have deployed million shots by then and then the next supply will fall to private physicians and hospitals. At that point anyone will be able to get a shot by just paying cash.
# ::tokens ["On", "May", "it", "wo", "n't", "matter", ".", "They", "will", "have", "deployed", "million", "shots", "by", "then", "and", "then", "the", "next", "supply", "will", "fall", "to", "private", "physicians", "and", "hospitals", ".", "At", "that", "point", "anyone", "will", "be", "able", "to", "get", "a", "shot", "by", "just", "paying", "cash", "."]
# ::lemmas ["on", "May", "it", "will", "not", "matter", ".", "they", "will", "have", "deploy", "million", "shot", "by", "then", "and", "then", "the", "next", "supply", "will", "fall", "to", "private", "physician", "and", "hospital", ".", "at", "that", "point", "anyone", "will", "be", "able", "to", "get", "a", "shot", "by", "just", "pay", "cash", "."]
(c4-9 / multi-sentence
      :snt1 (c4-21 / matter-01
                   :ARG1 (c4-4 / it)
                   :time (c4-0 / date-entity
                               :month 5)
                   :polarity -)
      :snt2 (c4-19 / and
                   :op1 (c4-18 / deploy-01
                               :ARG0 (c4-7 / they)
                               :ARG1 (c4-13 / shot
                                            :quant 1000000)
                               :time (c4-25 / by
                                            :op1 (c4-6 / then)))
                   :op2 (c4-20 / fall-05
                               :ARG1 (c4-26 / supply-01
                                            :mod (c4-10 / next))
                               :ARG2 (c4-12 / and
                                            :op1 (c4-27 / person
                                                        :ARG0-of (c4-22 / have-org-role-91
                                                                        :ARG2 (c4-23 / physician))
                                                        :ARG1-of (c4-15 / private-03))
                                            :op2 (c4-3 / hospital))))
      :snt3 (c4-14 / possible-01
                   :ARG1 (c4-8 / get-01
                               :ARG0 (c4-1 / anyone)
                               :ARG1 (c4-16 / shoot)
                               :manner (c4-2 / pay-01
                                             :ARG0 c4-1
                                             :ARG1 (c4-5 / cash)
                                             :mod (c4-24 / just)))
                   :time (c4-17 / point
                                :mod (c4-11 / that))))

# ::snt Im tryna figure out if a Canadian ID gon fly lolol
# ::tokens ["I", "m", "tryna", "figure", "out", "if", "a", "Canadian", "ID", "gon", "fly", "lolol"]
# ::lemmas ["i", "m", "tryna", "figure", "out", "if", "a", "Canadian", "ID", "gon", "fly", "lolol"]
(c5-6 / try-01
      :ARG0 (c5-9 / i)
      :ARG1 (c5-1 / figure-out-05
                  :ARG0 c5-9
                  :ARG1 (c5-3 / truth-value
                              :polarity-of (c5-5 / fly-01
                                                 :ARG1 (c5-0 / document-01
                                                             :ARG1 (c5-4 / identity
                                                                         :mod (c5-2 / country
                                                                                    :name (c5-10 / name
                                                                                                 :op1 "Canada"))))))
                  :ARG2-of (c5-7 / laugh-01
                                 :ARG0 c5-9
                                 :manner (c5-8 / loud)
                                 :mode expressive)))

# ::snt And a proof of address?
# ::tokens ["And", "a", "proof", "of", "address", "?"]
# ::lemmas ["and", "a", "proof", "of", "address", "?"]
(c6-2 / and
      :op2 (c6-1 / prove-01
                 :polarity (c6-3 / amr-unknown)
                 :ARG1 (c6-0 / address-02)))

# ::snt So they didn't care if the ID wasn't American?
# ::tokens ["So", "they", "did", "n't", "care", "if", "the", "ID", "was", "n't", "American", "?"]
# ::lemmas ["so", "they", "do", "not", "care", "if", "the", "ID", "be", "not", "American", "?"]
(c7-2 / care-01
      :ARG0 (c7-4 / they)
      :ARG1 (c7-3 / have-mod-91
                  :ARG1 (c7-0 / document-01
                              :ARG1 (c7-7 / identity))
                  :ARG2 (c7-6 / person
                              :mod (c7-1 / country
                                         :name (c7-8 / name
                                                     :op1 "America")))
                  :polarity -)
      :ARG1-of (c7-5 / request-confirmation-91)
      :polarity -)

# ::snt Yea just to check against a list to be sure who you are, but thats all they checked.
# ::tokens ["Yea", "just", "to", "check", "against", "a", "list", "to", "be", "sure", "who", "you", "are", ",", "but", "that", "s", "all", "they", "checked", "."]
# ::lemmas ["yea", "just", "to", "check", "against", "a", "list", "to", "be", "sure", "who", "you", "be", ",", "but", "that", "s", "all", "they", "check", "."]
(c8-3 / check-01
      :ARG0 (c8-6 / they)
      :ARG1 (c8-9 / you)
      :mod (c8-8 / just)
      :purpose (c8-0 / check-01
                     :ARG0 c8-6
                     :ARG1 (c8-2 / against
                                 :op1 (c8-4 / thing
                                            :ARG2-of (c8-7 / list-01)))
                     :purpose (c8-1 / sure-02
                                    :ARG0 c8-6
                                    :ARG1 c8-9))
      :concession (c8-10 / all
                         :ARG1-of (c8-5 / check-01
                                        :ARG0 c8-6)))

# ::snt Yea. Was tryna figure out what are the proof of residence accepted and if they care bout ID
# ::tokens ["Yea", ".", "Was", "tryna", "figure", "out", "what", "are", "the", "proof", "of", "residence", "accepted", "and", "if", "they", "care", "bout", "ID"]
# ::lemmas ["yea", ".", "be", "tryna", "figure", "out", "what", "be", "the", "proof", "of", "residence", "accept", "and", "if", "they", "care", "bout", "ID"]
(c9-11 / multi-sentence
       :snt1 (c9-12 / yea)
       :snt2 (c9-8 / try-01
                   :ARG1 (c9-2 / figure-out-05
                               :ARG1 (c9-1 / and
                                           :op1 (c9-5 / thing
                                                      :ARG0-of (c9-10 / prove-01
                                                                      :ARG1 (c9-13 / accept-01
                                                                                   :ARG1 (c9-9 / reside-01))))
                                           :op2 (c9-7 / have-condition-91
                                                      :ARG2 (c9-3 / care-01
                                                                  :ARG0 (c9-4 / they)
                                                                  :ARG1 (c9-0 / document-01
                                                                              :ARG1 (c9-6 / identity))))))))

# ::snt Well my city is checking to see if youre a city resident. People from outside city I know couldnt get it
# ::tokens ["Well", "my", "city", "is", "checking", "to", "see", "if", "you", "re", "a", "city", "resident", ".", "People", "from", "outside", "city", "I", "know", "could", "nt", "get", "it"]
# ::lemmas ["well", "my", "city", "be", "check", "to", "see", "if", "you", "re", "a", "city", "resident", ".", "people", "from", "outside", "city", "i", "know", "could", "not", "get", "it"]
(c10-14 / multi-sentence
        :snt1 (c10-3 / check-01
                     :ARG0 (c10-0 / city
                                  :poss (c10-13 / i))
                     :purpose (c10-1 / see-01
                                     :ARG0 c10-13
                                     :ARG1 (c10-11 / person
                                                   :ARG0-of (c10-10 / reside-01
                                                                    :ARG1 (c10-7 / city))
                                                   :domain (c10-16 / you)))
                     :mod (c10-4 / well))
        :snt2 (c10-9 / possible-01
                     :ARG1 (c10-12 / get-01
                                   :ARG0 (c10-5 / person
                                                :source (c10-8 / outside
                                                               :op1 (c10-2 / city
                                                                           :ARG1-of (c10-15 / know-02
                                                                                            :ARG0 c10-13))))
                                   :ARG1 (c10-6 / it))
                     :polarity -))

# ::snt Look at this one still believing his dick special. Chyle
# ::tokens ["Look", "at", "this", "one", "still", "believing", "his", "dick", "special", ".", "Chyle"]
# ::lemmas ["look", "at", "this", "one", "still", "believe", "his", "dick", "special", ".", "chyle"]
(c12-8 / multi-sentence
       :snt1 (c12-4 / look-01
                    :ARG0 (c12-10 / you)
                    :ARG1 (c12-2 / one
                                 :mod (c12-3 / this)
                                 :ARG0-of (c12-5 / believe-01
                                                 :ARG1 (c12-0 / special-02
                                                              :ARG1 (c12-1 / dick
                                                                           :part-of (c12-7 / person
                                                                                           :name (c12-9 / name
                                                                                                        :op1 "Chyle"))))
                                                 :mod (c12-6 / still)))
                    :mode imperative)
       :snt2 c12-7)

# ::snt Im sure I could have done it in Florida, Ill that Dack slanging that I was doing there could have opened that door.
# ::tokens ["I", "m", "sure", "I", "could", "have", "done", "it", "in", "Florida", ",", "Ill", "that", "Dack", "slanging", "that", "I", "was", "doing", "there", "could", "have", "opened", "that", "door", "."]
# ::lemmas ["i", "m", "sure", "i", "could", "have", "do", "it", "in", "Florida", ",", "Ill", "that", "dack", "slang", "that", "i", "be", "do", "there", "could", "have", "open", "that", "door", "."]
(c13-0 / sure-02
       :ARG0 (c13-15 / i)
       :ARG1 (c13-12 / possible-01
                     :ARG1 (c13-1 / do-02
                                  :ARG0 c13-15
                                  :ARG1 (c13-6 / it)
                                  :location (c13-14 / state
                                                    :name (c13-16 / name
                                                                  :op1 "Florida")
                                                    :location c13-14
                                                    :name (c13-11 / name
                                                                  :op1 "Illinois"))))
       :ARG1-of (c13-2 / cause-01
                       :ARG0 (c13-9 / possible-01
                                    :ARG1 (c13-8 / open-01
                                                 :ARG0 (c13-7 / slap-01
                                                              :ARG1 (c13-5 / person
                                                                           :name (c13-10 / name
                                                                                         :op1 "Dack"))
                                                              :ARG1-of (c13-4 / do-02
                                                                              :ARG0 c13-15
                                                                              :location c13-14))
                                                 :ARG1 (c13-3 / door
                                                              :mod (c13-13 / that))))))

# ::snt Yes lol
# ::tokens ["Yes", "lol"]
# ::lemmas ["yes", "lol"]
(c14-0 / yes
       :ARG2-of (c14-1 / laugh-01
                       :manner (c14-2 / loud)))

# ::snt Did you get successful?
# ::tokens ["Did", "you", "get", "successful", "?"]
# ::lemmas ["do", "you", "get", "successful", "?"]
(c15-0 / succeed-01
       :ARG0 (c15-2 / you)
       :polarity (c15-1 / amr-unknown))

# ::snt If you choose the right State you can be successful. And a lot of these people are easily distracted...
# ::tokens ["If", "you", "choose", "the", "right", "State", "you", "can", "be", "successful", ".", "And", "a", "lot", "of", "these", "people", "are", "easily", "distracted", "..."]
# ::lemmas ["if", "you", "choose", "the", "right", "State", "you", "can", "be", "successful", ".", "and", "a", "lot", "of", "these", "people", "be", "easily", "distract", "..."]
(c16-12 / multi-sentence
        :snt1 (c16-11 / possible-01
                      :ARG1 (c16-0 / succeed-01
                                   :ARG0 (c16-13 / you))
                      :condition (c16-3 / choose-01
                                        :ARG0 c16-13
                                        :ARG1 (c16-10 / state
                                                      :ARG1-of (c16-8 / right-02))))
        :snt2 (c16-2 / and
                     :op2 (c16-1 / distract-01
                                 :ARG1 (c16-6 / person
                                              :ARG1-of (c16-4 / include-91
                                                              :ARG2 (c16-5 / person
                                                                           :mod (c16-7 / this))
                                                              :ARG3 (c16-9 / lot)))
                                 :ARG1-of (c16-14 / easy-05))))

# ::snt I'm at the end of it all. I need a vaccine. I'm going crazy. Give me J&amp;J at this point.
# ::tokens ["I", "'m", "at", "the", "end", "of", "it", "all", ".", "I", "need", "a", "vaccine", ".", "I", "'m", "going", "crazy", ".", "Give", "me", "J&amp;J", "at", "this", "point", "."]
# ::lemmas ["i", "be", "at", "the", "end", "of", "it", "all", ".", "i", "need", "a", "vaccine", ".", "i", "be", "go", "crazy", ".", "give", "i", "J&amp;J", "at", "this", "point", "."]
(c17-13 / multi-sentence
        :snt1 (c17-17 / end-01
                      :ARG0 (c17-12 / i)
                      :ARG1 (c17-4 / it
                                   :mod (c17-0 / all)))
        :snt2 (c17-14 / need-01
                      :ARG0 (c17-5 / i)
                      :ARG1 (c17-7 / vaccine))
        :snt3 (c17-1 / craze-01
                     :ARG1 (c17-6 / i))
        :snt4 (c17-11 / give-01
                      :ARG0 (c17-15 / you)
                      :ARG1 (c17-16 / and
                                    :op1 (c17-8 / thing
                                                :name (c17-9 / name
                                                             :op1 "J&amp"))
                                    :op2 (c17-3 / thing
                                                :name c17-9
                                                :op1 "J&J"))
                      :mode imperative)
        :ARG2 c17-6
        :time (c17-10 / point
                      :mod (c17-2 / this)))

# ::snt Lmao
# ::tokens ["Lmao"]
# ::lemmas ["lmao"]
(c18-3 / laugh-01
       :ARG0 (c18-1 / i
                    :part (c18-2 / ass))
       :ARG3 (c18-0 / off
                    :op1 c18-2))

# ::snt I was gonna come to the US and sneak in for a vaccine but I have no US ID loll
# ::tokens ["I", "was", "gon", "na", "come", "to", "the", "US", "and", "sneak", "in", "for", "a", "vaccine", "but", "I", "have", "no", "US", "ID", "loll"]
# ::lemmas ["i", "be", "going", "to", "come", "to", "the", "US", "and", "sneak", "in", "for", "a", "vaccine", "but", "i", "have", "no", "US", "ID", "loll"]
(c19-4 / contrast-01
       :ARG1 (c19-3 / and
                    :op1 (c19-0 / come-01
                                :ARG1 (c19-10 / i)
                                :ARG4 (c19-7 / country
                                             :name (c19-11 / name
                                                           :op1 "US")))
                    :op2 (c19-1 / sneak-01
                                :ARG0 c19-10
                                :purpose (c19-8 / vaccine)))
       :ARG2 (c19-5 / have-03
                    :ARG0 c19-10
                    :ARG1 (c19-9 / loll
                                 :mod (c19-2 / document-01
                                             :ARG1 (c19-6 / identity
                                                          :poss c19-7)))
                    :polarity -))

# ::snt Fuck. I was bout to pull a scam on NYC
# ::tokens ["Fuck", ".", "I", "was", "bout", "to", "pull", "a", "scam", "on", "NYC"]
# ::lemmas ["fuck", ".", "i", "be", "bout", "to", "pull", "a", "scam", "on", "NYC"]
(c20-6 / multi-sentence
       :snt1 (c20-1 / fuck-01)
       :snt2 (c20-5 / pull-01
                    :ARG0 (c20-2 / i)
                    :ARG1 (c20-0 / scam-01
                                 :ARG0 c20-2
                                 :location (c20-3 / city
                                                  :name (c20-7 / name
                                                               :op1 "NYC")))
                    :time (c20-4 / bout-to)))

# ::snt Yep. In most cases, the address has to align with the county you live in
# ::tokens ["Yep", ".", "In", "most", "cases", ",", "the", "address", "has", "to", "align", "with", "the", "county", "you", "live", "in"]
# ::lemmas ["yep", ".", "in", "most", "case", ",", "the", "address", "have", "to", "align", "with", "the", "county", "you", "live", "in"]
(c21-3 / obligate-01
       :ARG2 (c21-1 / align-01
                    :ARG1 (c21-7 / address)
                    :ARG2 (c21-2 / county
                                 :location-of (c21-4 / live-01
                                                     :ARG0 (c21-6 / you))))
       :frequency (c21-0 / case-04
                         :quant (c21-5 / most)))
