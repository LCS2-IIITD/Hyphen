# ::snt A way with words I see.
# ::tokens ["A", "way", "with", "words", "I", "see", "."]
# ::lemmas ["a", "way", "with", "word", "i", "see", "."]
(c1-0 / see-01
      :ARG0 (c1-2 / i)
      :ARG1 (c1-1 / way
                  :manner-of (c1-3 / word)))

# ::snt If you had a % split, the unvaxxed % could form their own society, open up their own anti-vax organizations and ridicule them just the same. We will be the majority soon!
# ::tokens ["If", "you", "had", "a", "%", "split", ",", "the", "unvaxxed", "%", "could", "form", "their", "own", "society", ",", "open", "up", "their", "own", "anti", "-", "vax", "organizations", "and", "ridicule", "them", "just", "the", "same", ".", "We", "will", "be", "the", "majority", "soon", "!"]
# ::lemmas ["if", "you", "have", "a", "%", "split", ",", "the", "unvaxxed", "%", "could", "form", "their", "own", "society", ",", "open", "up", "their", "own", "anti", "-", "vax", "organization", "and", "ridicule", "they", "just", "the", "same", ".", "we", "will", "be", "the", "majority", "soon", "!"]
(c2-15 / multi-sentence
       :snt1 (c2-14 / possible-01
                    :ARG1 (c2-2 / and
                                :op1 (c2-3 / form-01
                                           :ARG0 (c2-10 / percentage
                                                        :ARG1-of (c2-16 / ax-01
                                                                        :polarity -))
                                           :ARG1 (c2-0 / society
                                                       :poss c2-10))
                                :op2 (c2-9 / open-up-03
                                           :ARG0 c2-10
                                           :ARG1 (c2-7 / organization
                                                       :ARG0-of (c2-1 / oppose-01
                                                                      :ARG1 (c2-11 / tax-01))
                                                       :poss c2-10))
                                :op3 (c2-12 / ridicule-01
                                            :ARG0 c2-10
                                            :ARG1 c2-7)
                                :condition (c2-13 / split-01
                                                  :ARG1 (c2-6 / percentage))))
       :snt2 (c2-4 / majority
                   :domain (c2-5 / we)
                   :time (c2-8 / soon)))

# ::snt Imagine having to give all your health details? HIV status, BMI, diabetes. I mean why stop with your covid status. We need to ensure we discriminate fairly. People on the left, are you ok with this? If not join the people on the right who are warning you.
# ::tokens ["Imagine", "having", "to", "give", "all", "your", "health", "details", "?", "HIV", "status", ",", "BMI", ",", "diabetes", ".", "I", "mean", "why", "stop", "with", "your", "covid", "status", ".", "We", "need", "to", "ensure", "we", "discriminate", "fairly", ".", "People", "on", "the", "left", ",", "are", "you", "ok", "with", "this", "?", "If", "not", "join", "the", "people", "on", "the", "right", "who", "are", "warning", "you", "."]
# ::lemmas ["imagine", "have", "to", "give", "all", "your", "health", "detail", "?", "HIV", "status", ",", "BMI", ",", "diabetes", ".", "i", "mean", "why", "stop", "with", "your", "covid", "status", ".", "we", "need", "to", "ensure", "we", "discriminate", "fairly", ".", "people", "on", "the", "left", ",", "be", "you", "ok", "with", "this", "?", "if", "not", "join", "the", "people", "on", "the", "right", "who", "be", "warn", "you", "."]
(c3-13 / multi-sentence
       :snt1 (c3-4 / imagine-01
                   :ARG0 (c3-25 / you)
                   :ARG1 (c3-8 / obligate-01
                               :ARG1 c3-25
                               :ARG2 (c3-12 / give-01
                                            :ARG0 c3-25
                                            :ARG1 (c3-0 / detail-01
                                                        :ARG1 (c3-30 / health
                                                                     :poss c3-25)
                                                        :mod (c3-27 / all)
                                                        :example (c3-15 / and
                                                                        :op1 (c3-17 / status
                                                                                    :mod (c3-24 / disease
                                                                                                :name (c3-14 / name
                                                                                                             :op1 "HIV")))
                                                                        :op2 (c3-33 / level
                                                                                    :name (c3-3 / name
                                                                                                :op1 "BMI"))
                                                                        :op3 (c3-20 / disease
                                                                                    :name (c3-23 / name
                                                                                                 :op1 "diabetes"))))))
                   :mode expressive)
       :snt2 (c3-29 / mean-01
                    :ARG0 (c3-21 / i)
                    :ARG2 (c3-6 / cause-01
                                :ARG0 (c3-1 / amr-unknown)
                                :ARG1 (c3-34 / stop-01
                                             :ARG0 c3-25
                                             :ARG1 (c3-22 / status
                                                          :mod (c3-9 / disease
                                                                     :name (c3-5 / name
                                                                                 :op1 " covid"))
                                                          :poss c3-25))))
       :snt3 c3-8
       :ARG1 (c3-7 / we)
       :ARG2 (c3-16 / ensure-01
                    :ARG0 c3-7
                    :ARG1 (c3-19 / discriminate-01
                                 :ARG0 c3-7
                                 :ARG1-of (c3-28 / fair-01)))
       :snt4 (c3-31 / okay-01
                    :ARG0 (c3-26 / you)
                    :ARG1 (c3-10 / this)
                    :polarity c3-1
                    :snt5-of c3-13)
       :ARG0 (c3-2 / you)
       :ARG1 (c3-32 / join-04
                    :ARG0 c3-2
                    :ARG1 (c3-35 / person
                                 :ARG1-of (c3-11 / right-08)
                                 :ARG0-of (c3-18 / warn-01
                                                 :ARG2 c3-2))
                    :polarity -)
       :condition c3-32)

# ::snt Not happening... Normal is returning.... keep it up people
# ::tokens ["Not", "happening", "...", "Normal", "is", "returning", "....", "keep", "it", "up", "people"]
# ::lemmas ["not", "happen", "...", "Normal", "be", "return", "....", "keep", "it", "up", "people"]
(c4-3 / multi-sentence
      :snt1 (c4-5 / event
                  :polarity -)
      :snt2 (c4-0 / return-01
                  :ARG1 (c4-2 / normal-02))
      :snt3 (c4-4 / keep-up-05
                  :ARG0 (c4-1 / person)
                  :mode imperative))

# ::snt I remember reading &amp; seeing docos where people were put into left or right queues.
# ::tokens ["I", "remember", "reading", "&", "amp", ";", "seeing", "docos", "where", "people", "were", "put", "into", "left", "or", "right", "queues", "."]
# ::lemmas ["i", "remember", "read", "&", "amp", ";", "see", "doco", "where", "people", "be", "put", "into", "left", "or", "right", "queue", "."]
(c5-7 / remember-01
      :ARG0 (c5-11 / i)
      :ARG1 (c5-1 / and
                  :op1 (c5-4 / read-01
                             :ARG0 c5-11
                             :ARG1 (c5-10 / book
                                          :name (c5-12 / name
                                                       :op1 "&amp")))
                  :op2 (c5-0 / see-01
                             :ARG0 c5-11
                             :ARG1 (c5-8 / put-01
                                         :ARG1 (c5-6 / person)
                                         :ARG2 (c5-5 / or
                                                     :op1 (c5-3 / queue
                                                                :ARG1-of (c5-9 / left-19))
                                                     :op2 (c5-13 / queue
                                                                 :ARG1-of (c5-2 / right-08)))))))

# ::snt Vax will never catch variants.
# ::tokens ["Vax", "will", "never", "catch", "variants", "."]
# ::lemmas ["Vax", "will", "never", "catch", "variant", "."]
(c6-0 / catch-01
      :ARG0 (c6-2 / product
                  :name (c6-3 / name
                              :op1 "Vax"))
      :ARG1 (c6-1 / variant)
      :time (c6-4 / ever)
      :polarity -)
