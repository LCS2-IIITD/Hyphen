# ::snt !!! yo pienso lo mismo
# ::tokens ["!", "!", "!", "yo", "pienso", "lo", "mismo"]
# ::lemmas ["!", "!", "!", "yo", "pienso", "lo", "mismo"]
(c1-0 / pienso
      :mod (c1-3 / lo
                 :mod (c1-1 / mismo))
      :domain (c1-2 / you)
      :mode expressive)

# ::snt no pero ayuda el efecto rebao a qu podamos VIVIR como con cualquier otro virus y enfermedad sin contraerla, perdn me diste solo si y no de opciones
# ::tokens ["no", "pero", "ayuda", "el", "efecto", "rebao", "a", "qu", "podamos", "VIVIR", "como", "con", "cualquier", "otro", "virus", "y", "enfermedad", "sin", "contraerla", ",", "perdn", "me", "diste", "solo", "si", "y", "no", "de", "opciones"]
# ::lemmas ["no", "pero", "ayuda", "el", "efecto", "rebao", "a", "qu", "podamos", "VIVIR", "como", "con", "cualquier", "otro", "virus", "y", "enfermedad", "sin", "contraerla", ",", "perdn", "i", "diste", "solo", "si", "y", "no", "de", "opcione"]
(c2-8 / multi-sentence
      :snt1 (c2-9 / no)
      :snt2 (c2-3 / cause-01
                  :ARG0 (c2-22 / possible-01
                               :ARG1 (c2-16 / ayuda
                                            :ARG1-of (c2-0 / cause-01
                                                           :ARG0 (c2-7 / rebao-00
                                                                       :ARG1 (c2-5 / virus
                                                                                   :name (c2-2 / name
                                                                                               :op1 "VIVIR")))))
                               :polarity -)
                  :ARG1 (c2-21 / possible-01
                               :ARG1 (c2-4 / come-01
                                           :ARG1 c2-5
                                           :ARG4 (c2-10 / and
                                                        :op1 (c2-17 / virus
                                                                    :mod (c2-6 / one))
                                                        :op2 (c2-11 / enfermedad)
                                                        :op3 (c2-12 / sin-01
                                                                    :ARG1 (c2-14 / contraerla))))
                               :polarity -))
      :snt3 (c2-13 / cause-01
                   :ARG0 c2-10
                   :op1 (c2-18 / have-polarity-91
                               :op2-of c2-13
                               :ARG2 -)
                   :ARG1 (c2-19 / opciones)
                   :ARG2 -)
      :ARG1 (c2-1 / deny-01
                  :ARG0 (c2-15 / you)
                  :ARG1 (c2-20 / efecto)))

# ::snt . do you consider yourself anti-vax
# ::tokens [".", "do", "you", "consider", "yourself", "anti", "-", "vax"]
# ::lemmas [".", "do", "you", "consider", "yourself", "anti", "-", "vax"]
(c3-1 / consider-01
      :ARG0 (c3-5 / you)
      :ARG1 (c3-2 / oppose-01
                  :ARG0 c3-5
                  :ARG1 (c3-3 / product
                              :name (c3-4 / name
                                          :op1 "vax")))
      :polarity (c3-0 / amr-unknown))

# ::snt . do you think vaccination in your country is being handled properly?
# ::tokens [".", "do", "you", "think", "vaccination", "in", "your", "country", "is", "being", "handled", "properly", "?"]
# ::lemmas [".", "do", "you", "think", "vaccination", "in", "your", "country", "be", "be", "handle", "properly", "?"]
(c4-4 / think-01
      :polarity (c4-0 / amr-unknown)
      :ARG0 (c4-6 / you)
      :ARG1 (c4-2 / handle-01
                  :ARG1 (c4-3 / vaccinate-01
                              :location (c4-1 / country
                                              :poss c4-6))
                  :manner (c4-5 / proper)))

# ::snt . idk
# ::tokens [".", "idk"]
# ::lemmas [".", "idk"]
(c5-0 / idk)

# ::snt . do you think the vaccine will end the pandemic?
# ::tokens [".", "do", "you", "think", "the", "vaccine", "will", "end", "the", "pandemic", "?"]
# ::lemmas [".", "do", "you", "think", "the", "vaccine", "will", "end", "the", "pandemic", "?"]
(c6-2 / think-01
      :polarity (c6-0 / amr-unknown)
      :ARG0 (c6-4 / you)
      :ARG1 (c6-5 / end-01
                  :ARG0 (c6-1 / vaccine)
                  :ARG1 (c6-3 / pandemic)))

# ::snt . are you going to get the vaccine?
# ::tokens [".", "are", "you", "going", "to", "get", "the", "vaccine", "?"]
# ::lemmas [".", "be", "you", "go", "to", "get", "the", "vaccine", "?"]
(c7-0 / get-01
      :polarity (c7-2 / amr-unknown)
      :ARG0 (c7-3 / you)
      :ARG1 (c7-1 / vaccine))

# ::snt . can you pay to get the vaccine in your country?
# ::tokens [".", "can", "you", "pay", "to", "get", "the", "vaccine", "in", "your", "country", "?"]
# ::lemmas [".", "can", "you", "pay", "to", "get", "the", "vaccine", "in", "your", "country", "?"]
(c8-5 / possible-01
      :polarity (c8-0 / amr-unknown)
      :ARG1 (c8-3 / pay-01
                  :ARG0 (c8-6 / you)
                  :ARG3 (c8-4 / get-01
                              :ARG0 c8-6
                              :ARG1 (c8-2 / vaccine)
                              :location (c8-1 / country
                                              :poss c8-6))))

# ::snt . is your country only vaccinating healthcare workers and old people with health conditions atm?
# ::tokens [".", "is", "your", "country", "only", "vaccinating", "healthcare", "workers", "and", "old", "people", "with", "health", "conditions", "atm", "?"]
# ::lemmas [".", "be", "your", "country", "only", "vaccinate", "healthcare", "worker", "and", "old", "people", "with", "health", "condition", "atm", "?"]
(c9-7 / vaccinate-01
      :ARG0 (c9-3 / country
                  :poss (c9-12 / you))
      :ARG1 (c9-2 / and
                  :op1 (c9-11 / person
                              :ARG0-of (c9-4 / work-01
                                             :ARG1 (c9-5 / healthcare)))
                  :op2 (c9-9 / person
                             :mod (c9-8 / old)
                             :ARG0-of (c9-10 / have-03
                                             :ARG1 (c9-0 / condition
                                                         :mod (c9-1 / health)))))
      :polarity (c9-13 / amr-unknown)
      :mod (c9-6 / only))

# ::snt . is your country/state vaccinating young people with no underlying conditions who dont work in healthcare ?
# ::tokens [".", "is", "your", "country", "/", "state", "vaccinating", "young", "people", "with", "no", "underlying", "conditions", "who", "do", "nt", "work", "in", "healthcare", "?"]
# ::lemmas [".", "be", "your", "country", "/", "state", "vaccinate", "young", "people", "with", "no", "underlie", "condition", "who", "do", "not", "work", "in", "healthcare", "?"]
(c10-8 / vaccinate-01
       :ARG0 (c10-0 / slash
                    :op1 (c10-3 / country
                                :poss (c10-11 / you))
                    :op2 (c10-9 / state
                                :poss c10-11))
       :ARG1 (c10-10 / person
                     :mod (c10-12 / young)
                     :ARG0-of (c10-5 / have-03
                                     :ARG1 (c10-1 / condition
                                                  :ARG0-of (c10-7 / underlie-01))
                                     :polarity -)
                     :ARG0-of (c10-4 / work-01
                                     :ARG1 (c10-6 / healthcare)
                                     :polarity -))
       :polarity (c10-2 / amr-unknown))

# ::snt IM AN IFIOT
# ::tokens ["IM", "AN", "IFIOT"]
# ::lemmas ["IM", "an", "IFIOT"]
(c11-0 / idiot
       :domain (c11-1 / i))

# ::snt IM DUMB
# ::tokens ["IM", "DUMB"]
# ::lemmas ["IM", "DUMB"]
(c12-0 / dummy
       :domain (c12-1 / i))

# ::snt OH
# ::tokens ["OH"]
# ::lemmas ["OH"]
(c13-0 / oh
       :mode expressive)

# ::snt you can if you expand the reply
# ::tokens ["you", "can", "if", "you", "expand", "the", "reply"]
# ::lemmas ["you", "can", "if", "you", "expand", "the", "reply"]
(c14-0 / possible-01
       :ARG1 (c14-2 / you)
       :condition (c14-3 / expand-01
                         :ARG0 c14-2
                         :ARG1 (c14-1 / reply-01)))

# ::snt wait yes you can?
# ::tokens ["wait", "yes", "you", "can", "?"]
# ::lemmas ["wait", "yes", "you", "can", "?"]
(c15-1 / wait-01
       :polarity (c15-0 / amr-unknown)
       :ARG1 (c15-3 / you)
       :mod (c15-4 / yes)
       :condition (c15-2 / possible-01))
