# ::snt AH
# ::tokens ["AH"]
# ::lemmas ["ah"]
(c1-0 / ah
      :mode expressive)

# ::snt it means Youre right
# ::tokens ["it", "means", "You", "re", "right"]
# ::lemmas ["it", "mean", "you", "re", "right"]
(c2-1 / mean-01
      :ARG1 (c2-0 / it)
      :ARG2 (c2-3 / right-06
                  :ARG1 (c2-2 / you)))

# ::snt hey what does this mean
# ::tokens ["hey", "what", "does", "this", "mean"]
# ::lemmas ["hey", "what", "do", "this", "mean"]
(c3-1 / mean-01
      :ARG1 (c3-2 / this)
      :ARG2 (c3-0 / amr-unknown)
      :mod (c3-3 / hey
                 :mode expressive))

# ::snt OHHHH OK I GET IT NOW
# ::tokens ["OHHHH", "OK", "I", "GET", "IT", "NOW"]
# ::lemmas ["OHHHH", "ok", "i", "get", "it", "now"]
(c5-2 / get-01
      :ARG0 (c5-3 / i)
      :ARG1 (c5-0 / it)
      :time (c5-4 / now)
      :mod (c5-1 / oh-my-god
                 :mode expressive))

# ::snt tell me im wrong
# ::tokens ["tell", "me", "i", "m", "wrong"]
# ::lemmas ["tell", "i", "i", "m", "wrong"]
(c6-2 / tell-01
      :ARG0 (c6-3 / you)
      :ARG1 (c6-0 / wrong-04
                  :ARG1 (c6-1 / i
                              :ARG2-of c6-2))
      :mode imperative)

# ::snt YOU CAN BUY RESIN???
# ::tokens ["YOU", "CAN", "BUY", "RESIN", "?", "?", "?"]
# ::lemmas ["you", "can", "BUY", "RESIN", "?", "?", "?"]
(c7-3 / possible-01
      :polarity (c7-0 / amr-unknown)
      :ARG1 (c7-2 / buy-01
                  :ARG0 (c7-4 / you)
                  :ARG1 (c7-1 / reserve-01)))

# ::snt grams?!
# ::tokens ["grams", "?", "!"]
# ::lemmas ["grams", "?", "!"]
(c8-0 / gram
      :polarity (c8-1 / amr-unknown))

# ::snt dont worry besties this also applies to me
# ::tokens ["do", "nt", "worry", "besties", "this", "also", "applies", "to", "me"]
# ::lemmas ["do", "not", "worry", "bestie", "this", "also", "apply", "to", "i"]
(c9-1 / and
      :op1 (c9-2 / worry-01
                 :ARG0 (c9-5 / you)
                 :polarity -
                 :mode imperative)
      :op2 (c9-6 / apply-02
                 :ARG1 (c9-3 / this)
                 :ARG2 (c9-4 / i)
                 :mod (c9-0 / also)))
