# ::snt Hell no Im gonna check every day to see if I develop spider man powers
# ::tokens ["Hell", "no", "I", "m", "gon", "na", "check", "every", "day", "to", "see", "if", "I", "develop", "spider", "man", "powers"]
# ::lemmas ["hell", "no", "i", "m", "going", "to", "check", "every", "day", "to", "see", "if", "i", "develop", "spider", "man", "power"]
(c1-2 / check-01
      :ARG0 (c1-10 / i)
      :purpose (c1-0 / see-01
                     :ARG0 c1-10
                     :ARG1 (c1-6 / truth-value
                                 :polarity-of (c1-1 / develop-02
                                                    :ARG0 c1-10
                                                    :ARG1 (c1-8 / power
                                                                :mod (c1-11 / man
                                                                            :mod (c1-9 / spider))))))
      :frequency (c1-7 / rate-entity-91
                       :ARG3 (c1-3 / temporal-quantity
                                   :unit (c1-4 / day)
                                   :quant 1))
      :mod (c1-5 / hell
                 :mode expressive))

# ::snt Congratulations! Just in time too, keep staying safe until your second shot, that's the trick.
# ::tokens ["Congratulations", "!", "Just", "in", "time", "too", ",", "keep", "staying", "safe", "until", "your", "second", "shot", ",", "that", "'s", "the", "trick", "."]
# ::lemmas ["congratulation", "!", "just", "in", "time", "too", ",", "keep", "stay", "safe", "until", "your", "second", "shot", ",", "that", "be", "the", "trick", "."]
(c2-9 / multi-sentence
      :snt1 (c2-1 / congratulate-01
                  :mode expressive)
      :snt2 (c2-10 / keep-02
                   :ARG0 (c2-11 / you)
                   :ARG1 (c2-0 / stay-01
                               :ARG1 c2-11
                               :ARG3 (c2-8 / safe-01
                                           :ARG1 c2-11)
                               :time (c2-4 / until
                                           :op1 (c2-3 / shoot-02
                                                      :ARG0 c2-11
                                                      :ord (c2-5 / ordinal-entity
                                                                 :value 2))))
                   :ARG2-of (c2-6 / trick-01)
                   :mod (c2-7 / just)
                   :mod (c2-2 / too)
                   :mode imperative))
