# ::snt I'd recommend tapping into some of those sweet sweet sick leave days
# ::tokens ["I", "'d", "recommend", "tapping", "into", "some", "of", "those", "sweet", "sweet", "sick", "leave", "days"]
# ::lemmas ["i", "would", "recommend", "tap", "into", "some", "of", "those", "sweet", "sweet", "sick", "leave", "days"]
(c1-7 / recommend-01
      :ARG0 (c1-10 / i)
      :ARG1 (c1-6 / tap-02
                  :ARG1 (c1-0 / day
                              :ARG1-of (c1-4 / include-91
                                             :ARG2 (c1-2 / day
                                                         :time-of (c1-8 / leave-11
                                                                        :ARG1-of (c1-1 / sick-05))
                                                         :mod (c1-3 / that)
                                                         :ARG1-of (c1-9 / sweet-04)))
                              :quant (c1-5 / some))))

# ::snt Fuck. Got moderna yesterday. Looks like Im gonna just take the next day off after shot
# ::tokens ["Fuck", ".", "Got", "moderna", "yesterday", ".", "Looks", "like", "I", "m", "gon", "na", "just", "take", "the", "next", "day", "off", "after", "shot"]
# ::lemmas ["fuck", ".", "get", "moderna", "yesterday", ".", "look", "like", "i", "m", "going", "to", "just", "take", "the", "next", "day", "off", "after", "shot"]
(c2-11 / multi-sentence
       :snt1 (c2-3 / fuck-01)
       :snt2 (c2-8 / get-01
                   :ARG1 (c2-10 / product
                                :name (c2-12 / name
                                             :op1 "Moderna"))
                   :time (c2-13 / yesterday))
       :snt3 (c2-7 / look-02
                   :ARG1 (c2-5 / take-off-18
                               :ARG0 (c2-4 / i)
                               :ARG1 (c2-0 / day
                                           :mod (c2-6 / next))
                               :mod (c2-9 / just)
                               :time (c2-2 / after
                                           :op1 (c2-1 / shoot-02)))))

# ::snt Moderna. Aches, restlessness, and low grade fever.
# ::tokens ["Moderna", ".", "Aches", ",", "restlessness", ",", "and", "low", "grade", "fever", "."]
# ::lemmas ["Moderna", ".", "ache", ",", "restlessness", ",", "and", "low", "grade", "fever", "."]
(c3-0 / string-entity
      :ARG2-of (c3-6 / include-91
                     :ARG1 (c3-1 / and
                                 :op1 (c3-7 / ass)
                                 :op2 (c3-3 / rest-01
                                            :polarity -)
                                 :op3 (c3-2 / fever
                                            :mod (c3-5 / grade
                                                       :ARG1-of (c3-4 / low-04)))))
      :value "Moderna")

# ::snt Moderna or Pfizer?
# ::tokens ["Moderna", "or", "Pfizer", "?"]
# ::lemmas ["Moderna", "or", "Pfizer", "?"]
(c4-1 / amr-choice
      :op1 (c4-2 / company
                 :name (c4-4 / name
                             :op1 "Moderna"))
      :op2 (c4-0 / company
                 :name (c4-3 / name
                             :op1 "Pfizer")))

# ::snt Update: second dose put us on our asses for the last day.
# ::tokens ["Update", ":", "second", "dose", "put", "us", "on", "our", "asses", "for", "the", "last", "day", "."]
# ::lemmas ["update", ":", "second", "dose", "put", "we", "on", "our", "ass", "for", "the", "last", "day", "."]
(c5-4 / update-02
      :ARG2 (c5-7 / put-01
                  :ARG0 (c5-0 / dose
                              :ord (c5-5 / ordinal-entity
                                         :value 2))
                  :ARG1 (c5-2 / we
                              :part (c5-1 / ass
                                          :ARG2-of c5-7))
                  :time (c5-3 / day
                              :mod (c5-6 / last))))

# ::snt Converse County is keeping a list of folks interested in getting it and calling when they have extra at the end of the day so they don't go to waste. Said they're the only county that hasn't had to throw doses out yet.
# ::tokens ["Converse", "County", "is", "keeping", "a", "list", "of", "folks", "interested", "in", "getting", "it", "and", "calling", "when", "they", "have", "extra", "at", "the", "end", "of", "the", "day", "so", "they", "do", "n't", "go", "to", "waste", ".", "Said", "they", "'re", "the", "only", "county", "that", "has", "n't", "had", "to", "throw", "doses", "out", "yet", "."]
# ::lemmas ["Converse", "County", "be", "keep", "a", "list", "of", "folk", "interested", "in", "get", "it", "and", "call", "when", "they", "have", "extra", "at", "the", "end", "of", "the", "day", "so", "they", "do", "not", "go", "to", "waste", ".", "say", "they", "be", "the", "only", "county", "that", "have", "not", "have", "to", "throw", "dose", "out", "yet", "."]
(c6-9 / multi-sentence
      :snt1 (c6-22 / keep-01
                   :ARG0 (c6-3 / county
                               :name (c6-10 / name
                                            :op1 "Converse"
                                            :op2 "County"))
                   :ARG1 (c6-21 / list
                                :consist-of (c6-17 / folk
                                                   :ARG1-of (c6-2 / interest-01
                                                                  :ARG2 (c6-16 / and
                                                                               :op1 (c6-8 / get-01
                                                                                          :ARG0 c6-17
                                                                                          :ARG1 (c6-13 / it))
                                                                               :op2 (c6-0 / call-02
                                                                                          :ARG0 c6-17
                                                                                          :time (c6-18 / have-03
                                                                                                       :ARG0 c6-17
                                                                                                       :ARG1 (c6-11 / extra)
                                                                                                       :time (c6-19 / end-01
                                                                                                                    :ARG1 (c6-1 / day))
                                                                                                       :purpose (c6-4 / waste-01
                                                                                                                      :ARG0 c6-17
                                                                                                                      :polarity -))))))))
      :snt2 (c6-12 / say-01
                   :ARG1 (c6-6 / obligate-01
                               :ARG1 (c6-5 / county
                                           :mod (c6-20 / only)
                                           :domain c6-3)
                               :ARG2 (c6-7 / throw-out-06
                                           :ARG0 c6-5
                                           :ARG1 (c6-14 / dose)
                                           :time (c6-15 / yet))
                               :polarity -)))

# ::snt Is it only for people affiliated with UW so far? How do you get on a list ?
# ::tokens ["Is", "it", "only", "for", "people", "affiliated", "with", "UW", "so", "far", "?", "How", "do", "you", "get", "on", "a", "list", "?"]
# ::lemmas ["be", "it", "only", "for", "people", "affiliate", "with", "UW", "so", "far", "?", "how", "do", "you", "get", "on", "a", "list", "?"]
(c7-10 / multi-sentence
       :snt1 (c7-3 / have-purpose-91
                   :ARG1 (c7-9 / it)
                   :ARG2 (c7-6 / person
                               :ARG1-of (c7-2 / affiliate-01
                                              :ARG2 (c7-4 / university
                                                          :name (c7-11 / name
                                                                       :op1 "UW"))
                                              :time (c7-0 / so-far)))
                   :mod (c7-5 / only)
                   :polarity (c7-13 / amr-unknown))
       :snt2 (c7-8 / get-05
                   :ARG1 (c7-12 / you)
                   :ARG2 (c7-7 / list-01
                               :ARG1 c7-12
                               :manner (c7-1 / amr-unknown))))
