# ::snt TRUE
# ::tokens ["TRUE"]
# ::lemmas ["true"]
(c2-0 / try-01
      :ARG0 (c2-1 / you)
      :mode imperative)

# ::snt Damn...
# ::tokens ["Damn", "..."]
# ::lemmas ["damn", "..."]
(c3-0 / damn
      :mode expressive)

# ::snt Your Cut wants this tweet deleted
# ::tokens ["Your", "Cut", "wants", "this", "tweet", "deleted"]
# ::lemmas ["your", "Cut", "want", "this", "tweet", "delete"]
(c4-2 / want-01
      :ARG0 (c4-1 / cut-02
                  :ARG0 (c4-6 / you))
      :ARG1 (c4-0 / delete-01
                  :ARG1 (c4-5 / thing
                              :ARG1-of (c4-3 / tweet-01
                                             :ARG0 c4-6)
                              :mod (c4-4 / this))))

# ::snt no need to worry bro
# ::tokens ["no", "need", "to", "worry", "bro"]
# ::lemmas ["no", "need", "to", "worry", "bro"]
(c5-0 / say-01
      :ARG0 (c5-5 / i)
      :ARG1 (c5-6 / need-01
                  :ARG0 (c5-3 / person
                              :ARG0-of (c5-2 / have-rel-role-91
                                             :ARG2 (c5-4 / bro)))
                  :ARG1 (c5-1 / worry-01
                              :ARG0 c5-3)
                  :polarity -)
      :ARG2 c5-3)

# ::snt Ahaahahhahahh
# ::tokens ["Ahaahahhahahh"]
# ::lemmas ["Ahaahahhahahh"]
(c6-0 / aha
      :mode expressive)

# ::snt fucking hell
# ::tokens ["fucking", "hell"]
# ::lemmas ["fucking", "hell"]
(c8-0 / hell
      :mod (c8-1 / fucking)
      :mode expressive)

# ::snt Me: Damn what a loserAlso me
# ::tokens ["Me", ":", "Damn", "what", "a", "loserAlso", "me"]
# ::lemmas ["i", ":", "damn", "what", "a", "loseralso", "i"]
(c9-0 / say-01
      :ARG0 (c9-6 / i)
      :ARG1 (c9-2 / and
                  :op1 (c9-1 / damn-01
                             :mode expressive)
                  :op2 (c9-3 / person
                             :ARG0-of (c9-4 / lose-03)
                             :mod (c9-7 / also)
                             :degree (c9-5 / so))))

# ::snt :yes keep egoing me when this is literally your account
# ::tokens [":", "yes", "keep", "egoing", "me", "when", "this", "is", "literally", "your", "account"]
# ::lemmas [":", "yes", "keep", "egoe", "i", "when", "this", "be", "literally", "your", "account"]
(c10-5 / keep-02
       :ARG0 (c10-6 / you)
       :ARG1 (c10-3 / go-06
                    :ARG0 c10-6
                    :ARG1 (c10-4 / i))
       :mod (c10-7 / yes)
       :time (c10-0 / account
                    :poss c10-6
                    :domain (c10-1 / this)
                    :mod (c10-2 / literal))
       :mode imperative)

# ::snt Monka fucking S
# ::tokens ["Monka", "fucking", "S"]
# ::lemmas ["Monka", "fucking", "S"]
(c11-2 / fucking
       :mod (c11-0 / person
                   :name (c11-1 / name
                                :op1 "Monka"))
       :mode expressive)

# ::snt yea but it's still a bunch of games
# ::tokens ["yea", "but", "it", "'s", "still", "a", "bunch", "of", "games"]
# ::lemmas ["yea", "but", "it", "be", "still", "a", "bunch", "of", "game"]
(c13-1 / contrast-01
       :ARG1 (c13-5 / yea)
       :ARG2 (c13-2 / game
                    :quant (c13-4 / bunch)
                    :mod (c13-0 / still)
                    :domain (c13-3 / it)))

# ::snt Hey man, % is pretty good
# ::tokens ["Hey", "man", ",", "%", "is", "pretty", "good"]
# ::lemmas ["hey", "man", ",", "%", "be", "pretty", "good"]
(c14-0 / say-01
       :ARG1 (c14-3 / good-02
                    :ARG1 (c14-4 / percentage-entity)
                    :degree (c14-2 / pretty))
       :ARG2 (c14-5 / man)
       :mod (c14-1 / hey
                   :mode expressive))

# ::snt Crying
# ::tokens ["Crying"]
# ::lemmas ["cry"]
(c15-0 / try-01)

# ::snt JAKENSKAKN
# ::tokens ["JAKENSKAKN"]
# ::lemmas ["JAKENSKAKN"]
(c16-1 / city
       :name (c16-0 / name
                    :op1 "Jakenskakn"))

# ::snt not exactly but its close xd
# ::tokens ["not", "exactly", "but", "its", "close", "xd"]
# ::lemmas ["not", "exactly", "but", "its", "close", "xd"]
(c17-3 / contrast-01
       :ARG1 (c17-2 / exact
                    :polarity -)
       :ARG2 (c17-0 / close-10
                    :ARG1 (c17-1 / it)))

# ::snt enjoy your next games in this elo, you arent leaving, we wont let you
# ::tokens ["enjoy", "your", "next", "games", "in", "this", "elo", ",", "you", "are", "nt", "leaving", ",", "we", "wo", "nt", "let", "you"]
# ::lemmas ["enjoy", "your", "next", "game", "in", "this", "elo", ",", "you", "be", "not", "leave", ",", "we", "will", "not", "let", "you"]
(c18-6 / multi-sentence
       :snt1 (c18-10 / enjoy-01
                     :ARG0 (c18-8 / you)
                     :ARG1 (c18-5 / game
                                  :mod (c18-7 / next)
                                  :poss c18-8)
                     :topic (c18-2 / this)
                     :mode imperative)
       :snt2 (c18-3 / leave-11
                    :ARG0 (c18-9 / you)
                    :ARG1-of (c18-0 / cause-01
                                    :ARG0 (c18-4 / let-01
                                                 :ARG0 (c18-1 / we)
                                                 :ARG1 c18-9
                                                 :polarity -))
                    :polarity -))

# ::snt Dunno what you are talking about smh
# ::tokens ["Dunno", "what", "you", "are", "talking", "about", "smh"]
# ::lemmas ["dunno", "what", "you", "be", "talk", "about", "smh"]
(c19-1 / and
       :op1 (c19-5 / know-01
                   :ARG0 (c19-4 / i)
                   :ARG1 (c19-3 / thing
                                :ARG1-of (c19-2 / talk-01
                                                :ARG0 (c19-6 / you)))
                   :polarity -)
       :op2 (c19-0 / smh
                   :mode expressive))

# ::snt rofl
# ::tokens ["rofl"]
# ::lemmas ["rofl"]
(c21-0 / person
       :name (c21-1 / name
                    :op1 "rofl"))

# ::snt taLented
# ::tokens ["taLented"]
# ::lemmas ["talente"]
(c22-0 / person
       :name (c22-1 / name
                    :op1 "taLented"))

# ::snt ye i wasnt trying to flame i just knew it was you
# ::tokens ["ye", "i", "was", "nt", "trying", "to", "flame", "i", "just", "knew", "it", "was", "you"]
# ::lemmas ["ye", "i", "be", "not", "try", "to", "flame", "i", "just", "know", "it", "be", "you"]
(c23-1 / contrast-01
       :ARG1 (c23-2 / try-01
                    :ARG0 (c23-4 / i)
                    :ARG1 (c23-0 / flame-01
                                 :ARG1 c23-4)
                    :polarity -)
       :ARG2 (c23-5 / know-01
                    :ARG0 c23-4
                    :ARG1 (c23-6 / you)
                    :mod (c23-3 / just)))

# ::snt How did u know it was mine
# ::tokens ["How", "did", "u", "know", "it", "was", "mine"]
# ::lemmas ["how", "do", "u", "know", "it", "be", "mine"]
(c24-3 / know-01
       :ARG0 (c24-4 / you)
       :ARG1 (c24-2 / it
                    :poss (c24-1 / i))
       :manner (c24-0 / amr-unknown))

# ::snt league is not the game for u
# ::tokens ["league", "is", "not", "the", "game", "for", "u"]
# ::lemmas ["league", "be", "not", "the", "game", "for", "u"]
(c25-0 / game
       :beneficiary (c25-1 / you)
       :domain (c25-2 / league)
       :polarity -)

# ::snt And what should this guy do
# ::tokens ["And", "what", "should", "this", "guy", "do"]
# ::lemmas ["and", "what", "should", "this", "guy", "do"]
(c26-1 / and
       :op2 (c26-3 / recommend-01
                   :ARG1 (c26-0 / do-02
                                :ARG0 (c26-4 / guy
                                             :mod (c26-2 / this))
                                :ARG1 (c26-5 / amr-unknown))))

# ::snt i aint wanna talk about it..
# ::tokens ["i", "ai", "nt", "wanna", "talk", "about", "it", ".."]
# ::lemmas ["i", "be", "nt", "wanna", "talk", "about", "it", ".."]
(c27-0 / want-01
       :ARG0 (c27-1 / i)
       :ARG1 (c27-3 / talk-01
                    :ARG0 c27-1
                    :ARG1 (c27-2 / it))
       :polarity -)

# ::snt We kinda matching....
# ::tokens ["We", "kinda", "matching", "...."]
# ::lemmas ["we", "kinda", "match", "...."]
(c28-1 / match-01
       :ARG0 (c28-0 / we)
       :degree (c28-2 / kind-of))

# ::snt Same :^)Elogains in pre season are awesome
# ::tokens ["Same", ":", "^)Elogains", "in", "pre", "season", "are", "awesome"]
# ::lemmas ["same", ":", "^)elogain", "in", "pre", "season", "be", "awesome"]
(c29-1 / awe-01
       :ARG0 (c29-4 / economics
                    :time (c29-3 / before
                                 :op1 (c29-0 / season)))
       :mod (c29-2 / emoticon
                   :value ":^"))

# ::snt taking elo vacation atm
# ::tokens ["taking", "elo", "vacation", "atm"]
# ::lemmas ["take", "elo", "vacation", "atm"]
(c30-0 / vacation-01
       :ARG0 (c30-2 / you)
       :mod (c30-1 / atm))

# ::snt Damn Sammy u dropped hard
# ::tokens ["Damn", "Sammy", "u", "dropped", "hard"]
# ::lemmas ["Damn", "Sammy", "u", "drop", "hard"]
(c31-0 / say-01
       :ARG0 (c31-5 / i)
       :ARG1 (c31-1 / drop-01
                    :ARG1 (c31-4 / person
                                 :name (c31-6 / name
                                              :op1 "Sammy"))
                    :ARG1-of (c31-3 / hard-02)
                    :mod (c31-2 / damn
                                :mode expressive))
       :ARG2 c31-4)

# ::snt Hahahahahahahahshshdjen
# ::tokens ["Hahahahahahahahshshdjen"]
# ::lemmas ["Hahahahahahahahshshdjen"]
(c32-1 / laugh-01
       :ARG0 (c32-0 / i)
       :manner (c32-2 / loud)
       :mode expressive)

# ::snt its literally mine ffs
# ::tokens ["its", "literally", "mine", "ffs"]
# ::lemmas ["its", "literally", "mine", "ffs"]
(c33-2 / ffs
       :poss (c33-0 / i)
       :mod (c33-1 / literal))

# ::snt its me, im the one that doesnt have to worry about whats in the vaccine
# ::tokens ["its", "me", ",", "i", "m", "the", "one", "that", "does", "nt", "have", "to", "worry", "about", "what", "s", "in", "the", "vaccine"]
# ::lemmas ["its", "me", ",", "i", "m", "the", "one", "that", "do", "not", "have", "to", "worry", "about", "what", "s", "in", "the", "vaccine"]
(c34-5 / i
       :mod (c34-3 / one
                   :ARG1-of (c34-1 / obligate-01
                                   :ARG2 (c34-0 / worry-02
                                                :ARG0 c34-5
                                                :ARG1 (c34-4 / thing
                                                             :part-of (c34-2 / vaccine)))
                                   :polarity -)))

# ::snt Sheeesh his ego
# ::tokens ["Sheeesh", "his", "ego"]
# ::lemmas ["sheeesh", "his", "ego"]
(c35-2 / ego
       :poss (c35-1 / he)
       :mod (c35-0 / sheeesh
                   :mode expressive))

# ::snt xd
# ::tokens ["xd"]
# ::lemmas ["xd"]
(c36-0 / amr-empty)

# ::snt isnt that yours
# ::tokens ["is", "nt", "that", "yours"]
# ::lemmas ["be", "not", "that", "yours"]
(c37-0 / that
       :poss (c37-1 / you)
       :polarity -)
