# ::snt Well done Andy!! Now please stay healthy and well, annnnd away from COVID! Take care
# ::tokens ["Well", "done", "Andy", "!", "!", "Now", "please", "stay", "healthy", "and", "well", ",", "annnnd", "away", "from", "COVID", "!", "Take", "care"]
# ::lemmas ["well", "do", "Andy", "!", "!", "now", "please", "stay", "healthy", "and", "well", ",", "annnnd", "away", "from", "COVID", "!", "take", "care"]
(c1-13 / multi-sentence
       :snt1 (c1-0 / say-01
                   :ARG0 (c1-12 / i)
                   :ARG1 (c1-1 / do-02
                               :ARG1-of (c1-5 / well-09))
                   :ARG2 (c1-10 / person
                                :name (c1-14 / name
                                             :op1 "Andy")))
       :snt2 (c1-11 / stay-01
                    :ARG1 (c1-15 / you)
                    :ARG3 (c1-2 / and
                                :op1 (c1-6 / healthy
                                           :domain c1-15)
                                :op2 (c1-16 / well-09
                                            :ARG1 c1-15))
                    :time (c1-9 / now)
                    :time (c1-7 / away
                                :op1 (c1-4 / care-03
                                           :ARG1 c1-15))
                    :mode imperative
                    :polite +)
       :snt3 (c1-8 / take-01
                   :ARG0 (c1-3 / you)
                   :ARG1 c1-4
                   :ARG1 c1-3
                   :mode imperative))

# ::snt Got AstraZeneca too. All good, just a bit tired.
# ::tokens ["Got", "AstraZeneca", "too", ".", "All", "good", ",", "just", "a", "bit", "tired", "."]
# ::lemmas ["got", "AstraZeneca", "too", ".", "all", "good", ",", "just", "a", "bit", "tired", "."]
(c2-7 / multi-sentence
      :snt1 (c2-5 / get-01
                  :ARG1 (c2-1 / company
                              :name (c2-8 / name
                                          :op1 "AstraZeneca"))
                  :mod (c2-4 / too))
      :snt2 (c2-0 / and
                  :op1 (c2-9 / good-02
                             :ARG1 (c2-10 / all))
                  :op2 (c2-2 / tire-01
                             :ARG1 c2-10
                             :degree (c2-3 / bit)
                             :mod (c2-6 / just))))
