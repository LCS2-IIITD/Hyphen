# ::snt Corbyn was better! He would have done as he was told exactly like the other puppets! Ffs wake up
# ::tokens ["Corbyn", "was", "better", "!", "He", "would", "have", "done", "as", "he", "was", "told", "exactly", "like", "the", "other", "puppets", "!", "Ffs", "wake", "up"]
# ::lemmas ["Corbyn", "be", "well", "!", "he", "would", "have", "do", "as", "he", "be", "tell", "exactly", "like", "the", "other", "puppet", "!", "ffs", "wake", "up"]
(c1-9 / multi-sentence
      :snt1 (c1-8 / good-02
                  :ARG1 (c1-18 / person
                               :name (c1-10 / name
                                            :op1 "Corbyn"))
                  :ARG2-of (c1-16 / have-degree-91
                                  :ARG1 c1-18
                                  :ARG3 (c1-15 / more)))
      :snt2 (c1-0 / do-02
                  :ARG0 (c1-1 / he)
                  :ARG1 (c1-6 / thing
                              :ARG1-of (c1-4 / tell-01
                                             :ARG2 c1-1)
                              :ARG1-of (c1-7 / resemble-01
                                             :ARG2 (c1-17 / puppet
                                                          :mod (c1-5 / other))
                                             :mod (c1-11 / exact))))
      :snt3 (c1-3 / wake-up-02
                  :ARG1 (c1-12 / person
                               :ARG0-of (c1-2 / have-rel-role-91
                                              :ARG1 (c1-13 / you)
                                              :ARG2 (c1-14 / fiance)))
                  :mode imperative))

# ::snt Sorry USA, not Canada. Watch it!
# ::tokens ["Sorry", "USA", ",", "not", "Canada", ".", "Watch", "it", "!"]
# ::lemmas ["Sorry", "USA", ",", "not", "Canada", ".", "watch", "it", "!"]
(c2-7 / multi-sentence
      :snt1 (c2-0 / sorry-01
                  :ARG1 (c2-6 / instead-of-91
                              :ARG1 (c2-2 / country
                                          :name (c2-8 / name
                                                      :op1 "USA"))
                              :ARG2 (c2-1 / country
                                          :name (c2-5 / name
                                                      :op1 "Canada"))))
      :snt2 (c2-3 / watch-01
                  :ARG0 (c2-9 / you)
                  :ARG1 (c2-4 / it)
                  :mode imperative))

# ::snt We are under a dictatorship under the very brain dead people who voted them in...corbyn was better, but people listened to the brain dead media and tory lies and Israeli lobby lies and Labour corruption with in who voted against him
# ::tokens ["We", "are", "under", "a", "dictatorship", "under", "the", "very", "brain", "dead", "people", "who", "voted", "them", "in", "...", "corbyn", "was", "better", ",", "but", "people", "listened", "to", "the", "brain", "dead", "media", "and", "tory", "lies", "and", "Israeli", "lobby", "lies", "and", "Labour", "corruption", "with", "in", "who", "voted", "against", "him"]
# ::lemmas ["we", "be", "under", "a", "dictatorship", "under", "the", "very", "brain", "dead", "people", "who", "vote", "they", "in", "...", "corbyn", "be", "well", ",", "but", "people", "listen", "to", "the", "brain", "dead", "medium", "and", "tory", "lie", "and", "Israeli", "lobby", "lie", "and", "labour", "corruption", "with", "in", "who", "vote", "against", "he"]
(c3-13 / multi-sentence
       :snt1 (c3-0 / dictatorship
                   :domain (c3-8 / we)
                   :prep-under (c3-29 / person
                                      :ARG0-of (c3-10 / vote-01
                                                      :ARG1 (c3-11 / they))
                                      :mod (c3-28 / brain
                                                  :ARG1-of (c3-21 / die-01)
                                                  :mod (c3-23 / very))))
       :snt2 (c3-7 / contrast-01
                   :ARG1 (c3-25 / have-degree-91
                                :ARG1 (c3-26 / person
                                             :name (c3-14 / name
                                                          :op1 "Corbyn"))
                                :ARG2 (c3-12 / good-02
                                             :ARG1 c3-26)
                                :ARG3 (c3-24 / more))
                   :ARG2 (c3-27 / listen-01
                                :ARG0 (c3-17 / person)
                                :ARG1 (c3-22 / and
                                             :op1 (c3-19 / media
                                                         :ARG1-of c3-21
                                                         :ARG1 c3-28))
                                :op2 (c3-6 / lie-08
                                           :ARG0 (c3-16 / political-party
                                                        :name (c3-5 / name
                                                                    :op1 "Tory")))
                                :op3 (c3-1 / lie-08
                                           :ARG0 (c3-4 / lobby-01
                                                       :ARG0 (c3-2 / country
                                                                   :name (c3-20 / name
                                                                                :op1 "Israel"))))
                                :op4 (c3-9 / corrupt-01
                                           :ARG1 (c3-3 / person
                                                       :ARG0-of (c3-18 / vote-01
                                                                       :ARG1 (c3-15 / against
                                                                                    :op1 c3-26)))))))

# ::snt What was outcome?
# ::tokens ["What", "was", "outcome", "?"]
# ::lemmas ["what", "be", "outcome", "?"]
(c4-0 / outcome
      :domain (c4-1 / amr-unknown))

# ::snt Anyone wanting to know the ADRs of the vaccine click the link below and type covishield in the search box
# ::tokens ["Anyone", "wanting", "to", "know", "the", "ADRs", "of", "the", "vaccine", "click", "the", "link", "below", "and", "type", "covishield", "in", "the", "search", "box"]
# ::lemmas ["anyone", "want", "to", "know", "the", "adr", "of", "the", "vaccine", "click", "the", "link", "below", "and", "type", "covishield", "in", "the", "search", "box"]
(c5-2 / and
      :op1 (c5-3 / click-01
                 :ARG0 (c5-14 / anyone
                              :ARG0-of (c5-4 / want-01
                                             :ARG1 (c5-13 / know-01
                                                          :ARG0 c5-14
                                                          :ARG1 (c5-12 / product
                                                                       :name (c5-10 / name
                                                                                    :op1 "ADR")
                                                                       :poss (c5-6 / vaccine)))))
                 :ARG1 (c5-9 / link
                             :location (c5-11 / below))
                 :mode imperative)
      :op2 (c5-7 / type-01
                 :ARG0 c5-14
                 :ARG1 (c5-5 / thing
                             :name (c5-8 / name
                                         :op1 "Covishield"))
                 :location (c5-1 / box
                                 :ARG0-of (c5-0 / search-01))
                 :mode imperative))

# ::snt They gonna skirt around it, never answer the question and when they do its always a may or may not bottom line they know they cant implement that so will drag it out for as long as they can
# ::tokens ["They", "gon", "na", "skirt", "around", "it", ",", "never", "answer", "the", "question", "and", "when", "they", "do", "its", "always", "a", "may", "or", "may", "not", "bottom", "line", "they", "know", "they", "ca", "nt", "implement", "that", "so", "will", "drag", "it", "out", "for", "as", "long", "as", "they", "can"]
# ::lemmas ["they", "going", "to", "skirt", "around", "it", ",", "never", "answer", "the", "question", "and", "when", "they", "do", "its", "always", "a", "may", "or", "may", "not", "bottom", "line", "they", "know", "they", "can", "not", "implement", "that", "so", "will", "drag", "it", "out", "for", "as", "long", "as", "they", "can"]
(c6-16 / and
       :op1 (c6-10 / and
                   :op1 (c6-12 / skirt-02
                               :ARG0 (c6-9 / they)
                               :ARG1 (c6-5 / it))
                   :op2 (c6-1 / answer-01
                              :ARG0 c6-9
                              :ARG1 (c6-3 / question-01)
                              :time (c6-11 / ever)
                              :polarity -))
       :op2 (c6-8 / or
                  :op1 (c6-23 / possible-01
                              :ARG1 (c6-21 / line
                                           :mod (c6-22 / bottom)))
                  :op2 (c6-20 / possible-01
                              :ARG1 c6-21
                              :polarity -)
                  :time (c6-25 / always)
                  :ARG0-of (c6-6 / cause-01
                                 :ARG1 (c6-24 / know-01
                                              :ARG0 c6-9
                                              :ARG1 (c6-14 / possible-01
                                                           :ARG1 (c6-15 / implement-01
                                                                        :ARG0 c6-9
                                                                        :ARG1 (c6-7 / that))
                                                           :ARG0-of (c6-0 / cause-01
                                                                          :ARG1 (c6-2 / drag-01
                                                                                      :ARG0 c6-9
                                                                                      :ARG1 c6-5
                                                                                      :direction (c6-18 / out)
                                                                                      :duration (c6-4 / long-03
                                                                                                      :ARG2-of (c6-17 / have-degree-91
                                                                                                                      :ARG1 c6-2
                                                                                                                      :ARG3 (c6-19 / equal)
                                                                                                                      :ARG4 (c6-13 / possible-01
                                                                                                                                   :ARG1 c6-2)))))
                                                           :polarity -)))))

# ::snt Oh cheers, got it
# ::tokens ["Oh", "cheers", ",", "got", "it"]
# ::lemmas ["oh", "cheer", ",", "get", "it"]
(c7-0 / and
      :op1 (c7-1 / cheer-01
                 :mod (c7-2 / oh))
      :op2 (c7-3 / get-01
                 :ARG1 (c7-4 / it)))

# ::snt YouTube
# ::tokens ["YouTube"]
# ::lemmas ["youtube"]
(c8-0 / publication
      :name (c8-1 / name
                  :op1 "YouTube"))

# ::snt any way of watching it other than through the bbc?
# ::tokens ["any", "way", "of", "watching", "it", "other", "than", "through", "the", "bbc", "?"]
# ::lemmas ["any", "way", "of", "watch", "it", "other", "than", "through", "the", "bbc", "?"]
(c9-1 / way
      :polarity (c9-0 / amr-unknown)
      :mod (c9-2 / any)
      :manner-of (c9-7 / watch-01
                       :ARG1 (c9-5 / it))
      :ARG2-of (c9-8 / except-01
                     :ARG1 (c9-3 / through
                                 :op1 (c9-4 / publication
                                            :name (c9-6 / name
                                                        :op1 "BBC")))))

# ::snt Still can't believe we are here.
# ::tokens ["Still", "ca", "n't", "believe", "we", "are", "here", "."]
# ::lemmas ["still", "can", "not", "believe", "we", "be", "here", "."]
(c10-5 / possible-01
       :ARG1 (c10-4 / believe-01
                    :ARG1 (c10-1 / be-located-at-91
                                 :ARG1 (c10-2 / we)
                                 :ARG2 (c10-3 / here)))
       :mod (c10-0 / still)
       :polarity -)
