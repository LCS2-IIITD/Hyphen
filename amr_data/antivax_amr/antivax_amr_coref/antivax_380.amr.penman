# ::snt I can gueas your first thought was either going to your mother country or Japan. That's all I can guess of.
# ::tokens ["I", "can", "gueas", "your", "first", "thought", "was", "either", "going", "to", "your", "mother", "country", "or", "Japan", ".", "That", "'s", "all", "I", "can", "guess", "of", "."]
# ::lemmas ["i", "can", "gueas", "your", "first", "thought", "be", "either", "go", "to", "your", "mother", "country", "or", "Japan", ".", "that", "be", "all", "i", "can", "guess", "of", "."]
(c1-8 / multi-sentence
      :snt1 (c1-20 / possible-01
                   :ARG1 (c1-7 / google-01
                               :ARG0 (c1-2 / i)
                               :ARG1 (c1-6 / think-01
                                           :ARG0 (c1-13 / you)
                                           :ARG1 (c1-12 / go-02
                                                        :ARG0 (c1-14 / you)
                                                        :ARG4 (c1-5 / or
                                                                    :op1 (c1-3 / country
                                                                               :ARG0-of (c1-17 / have-rel-role-91
                                                                                               :ARG1 c1-14
                                                                                               :ARG2 (c1-16 / mother)))
                                                                    :op2 (c1-0 / country
                                                                               :name (c1-9 / name
                                                                                           :op1 "Japan")))
                                                        :mod (c1-10 / either))
                                           :ord (c1-18 / ordinal-entity
                                                       :value 1))))
      :snt2 (c1-15 / all
                   :ARG1-of (c1-1 / guess-01
                                  :ARG0 (c1-11 / i)
                                  :ARG1-of (c1-19 / possible-01))
                   :domain (c1-4 / that)))

# ::snt I hope the side effects dont hit you hard, if you get any at all. I didn't get any other than a sore arm
# ::tokens ["I", "hope", "the", "side", "effects", "do", "nt", "hit", "you", "hard", ",", "if", "you", "get", "any", "at", "all", ".", "I", "did", "n't", "get", "any", "other", "than", "a", "sore", "arm"]
# ::lemmas ["i", "hope", "the", "side", "effect", "do", "not", "hit", "you", "hard", ",", "if", "you", "get", "any", "at", "all", ".", "i", "do", "not", "get", "any", "other", "than", "a", "sore", "arm"]
(c2-13 / multi-sentence
       :snt1 (c2-6 / hope-01
                   :ARG0 (c2-12 / i)
                   :ARG1 (c2-11 / hit-01
                                :ARG0 (c2-16 / effect-03
                                             :ARG1 (c2-0 / side))
                                :ARG1 (c2-14 / you)
                                :ARG1-of (c2-1 / hard-02)
                                :condition (c2-10 / get-01
                                                  :ARG0 c2-14
                                                  :ARG1 (c2-3 / any)
                                                  :degree (c2-15 / at-all)
                                                  :polarity -)
                                :polarity -))
       :snt2 (c2-4 / get-01
                   :ARG0 (c2-7 / i)
                   :ARG1 (c2-9 / other
                               :ARG2-of (c2-8 / except-01
                                              :ARG1 (c2-2 / sore
                                                          :domain (c2-5 / arm))))
                   :polarity -))

# ::snt Yep
# ::tokens ["Yep"]
# ::lemmas ["yep"]
(c3-0 / yep)

# ::snt Hope that vaccine works
# ::tokens ["Hope", "that", "vaccine", "works"]
# ::lemmas ["hope", "that", "vaccine", "work"]
(c4-2 / hope-01
      :ARG1 (c4-0 / work-09
                  :ARG1 (c4-1 / vaccine)))

# ::snt Theres no easy quick way out
# ::tokens ["There", "s", "no", "easy", "quick", "way", "out"]
# ::lemmas ["there", "s", "no", "easy", "quick", "way", "out"]
(c5-0 / way
      :direction (c5-1 / out)
      :ARG1-of (c5-3 / easy-05)
      :ARG1-of (c5-2 / quick-02)
      :polarity -)

# ::snt did it hurt? im getting mine in abt a week
# ::tokens ["did", "it", "hurt", "?", "i", "m", "getting", "mine", "in", "abt", "a", "week"]
# ::lemmas ["do", "it", "hurt", "?", "i", "m", "get", "mine", "in", "abt", "a", "week"]
(c6-9 / multi-sentence
      :snt1 (c6-3 / hurt-01
                  :polarity (c6-0 / amr-unknown)
                  :ARG0 (c6-8 / it))
      :snt2 (c6-7 / get-01
                  :ARG0 (c6-4 / i)
                  :ARG1 (c6-5 / thing
                              :poss c6-4)
                  :frequency (c6-6 / rate-entity-91
                                   :ARG3 (c6-2 / temporal-quantity
                                               :unit (c6-1 / week)
                                               :quant 1))))

# ::snt Evolving so they can make more money off the vaccines
# ::tokens ["Evolving", "so", "they", "can", "make", "more", "money", "off", "the", "vaccines"]
# ::lemmas ["evolve", "so", "they", "can", "make", "more", "money", "off", "the", "vaccine"]
(c7-5 / invent-01
      :purpose (c7-4 / possible-01
                     :ARG1 (c7-6 / make-05
                                 :ARG0 (c7-3 / they)
                                 :ARG1 (c7-0 / money
                                             :quant (c7-1 / more))
                                 :ARG2 (c7-2 / vaccine))))

# ::snt Still gotta be careful because the virus is EvolvingD
# ::tokens ["Still", "got", "ta", "be", "careful", "because", "the", "virus", "is", "EvolvingD"]
# ::lemmas ["still", "got", "to", "be", "careful", "because", "the", "virus", "be", "evolvingd"]
(c8-2 / cause-01
      :ARG0 (c8-6 / EvolveD
                  :domain (c8-3 / virus))
      :ARG1 (c8-4 / obligate-01
                  :ARG2 (c8-0 / care-04
                              :ARG1 (c8-5 / you)
                              :mod (c8-1 / still))))

# ::snt :Nice
# ::tokens [":", "Nice"]
# ::lemmas [":", "nice"]
(c9-0 / nice-01)

# ::snt I got my first and tomorrow off I go for vacation
# ::tokens ["I", "got", "my", "first", "and", "tomorrow", "off", "I", "go", "for", "vacation"]
# ::lemmas ["i", "get", "my", "first", "and", "tomorrow", "off", "i", "go", "for", "vacation"]
(c10-0 / and
       :op1 (c10-6 / get-01
                   :ARG0 (c10-7 / i)
                   :ARG1 (c10-5 / thing
                                :ord (c10-4 / ordinal-entity
                                            :value 1)
                                :poss c10-7))
       :op2 (c10-8 / go-02
                   :ARG0 c10-7
                   :ARG1 (c10-3 / vacation-01
                                :ARG0 c10-7)
                   :time (c10-1 / tomorrow)
                   :mod (c10-2 / off)))

# ::snt Yay congrats!
# ::tokens ["Yay", "congrats", "!"]
# ::lemmas ["yay", "congrat", "!"]
(c11-1 / congratulate-01
       :mod (c11-0 / yay)
       :mode expressive)

# ::snt Me to rose!!!
# ::tokens ["Me", "to", "rose", "!", "!", "!"]
# ::lemmas ["i", "to", "rise", "!", "!", "!"]
(c12-1 / rise-01
       :ARG1 (c12-0 / i)
       :mode expressive)

# ::snt that was early!
# ::tokens ["that", "was", "early", "!"]
# ::lemmas ["that", "be", "early", "!"]
(c13-1 / early
       :domain (c13-0 / that))

# ::snt I got my second dose also! Except I got it a bit over a week ago
# ::tokens ["I", "got", "my", "second", "dose", "also", "!", "Except", "I", "got", "it", "a", "bit", "over", "a", "week", "ago"]
# ::lemmas ["i", "get", "my", "second", "dose", "also", "!", "except", "i", "get", "it", "a", "bit", "over", "a", "week", "ago"]
(c14-12 / multi-sentence
        :snt1 (c14-10 / get-01
                      :ARG0 (c14-11 / i)
                      :ARG1 (c14-0 / dose
                                   :ord (c14-7 / ordinal-entity
                                               :value 2)
                                   :poss c14-11)
                      :mod (c14-2 / also))
        :snt2 (c14-15 / except-01
                      :ARG1 (c14-14 / get-01
                                    :ARG0 (c14-4 / i)
                                    :ARG1 (c14-5 / it)
                                    :time (c14-13 / before
                                                  :op1 (c14-9 / now)
                                                  :quant (c14-6 / over
                                                                :op1 (c14-8 / temporal-quantity
                                                                            :unit (c14-3 / week)
                                                                            :quant 1)
                                                                :quant (c14-1 / bit))))))

# ::snt Yay! My mum and dad got them yesterday and were traveling next week
# ::tokens ["Yay", "!", "My", "mum", "and", "dad", "got", "them", "yesterday", "and", "were", "traveling", "next", "week"]
# ::lemmas ["yay", "!", "my", "mum", "and", "dad", "get", "they", "yesterday", "and", "be", "travel", "next", "week"]
(c15-13 / multi-sentence
        :snt1 (c15-15 / yay
                      :mode expressive)
        :snt2 (c15-1 / and
                     :op1 (c15-10 / get-01
                                  :ARG0 (c15-16 / and
                                                :op1 (c15-12 / person
                                                             :ARG0-of (c15-7 / have-rel-role-91
                                                                             :ARG1 (c15-3 / i)
                                                                             :ARG2 (c15-4 / mum)))
                                                :op2 (c15-8 / person
                                                            :ARG0-of (c15-11 / have-rel-role-91
                                                                             :ARG1 c15-3
                                                                             :ARG2 (c15-0 / dad))))
                                  :ARG1 (c15-9 / they)
                                  :time (c15-2 / yesterday))
                     :op2 (c15-5 / travel-01
                                 :ARG0 c15-16
                                 :time (c15-6 / week
                                              :mod (c15-14 / next)))))

# ::snt I love you
# ::tokens ["I", "love", "you"]
# ::lemmas ["i", "love", "you"]
(c16-2 / love-01
       :ARG0 (c16-0 / i)
       :ARG1 (c16-1 / you))

# ::snt I didnt add emojis i seem dry now
# ::tokens ["I", "did", "nt", "add", "emojis", "i", "seem", "dry", "now"]
# ::lemmas ["i", "do", "not", "add", "emoji", "i", "seem", "dry", "now"]
(c17-5 / multi-sentence
       :snt1 (c17-2 / add-02
                    :ARG0 (c17-4 / i)
                    :ARG1 (c17-7 / emojis)
                    :polarity -)
       :snt2 (c17-0 / seem-01
                    :ARG1 (c17-1 / dry-02
                                 :ARG1 (c17-3 / i)
                                 :time (c17-6 / now))))

# ::snt ey
# ::tokens ["ey"]
# ::lemmas ["ey"]
(c18-0 / ey)

# ::snt Very epic here people under the age of cant take the vaccine
# ::tokens ["Very", "epic", "here", "people", "under", "the", "age", "of", "ca", "nt", "take", "the", "vaccine"]
# ::lemmas ["very", "epic", "here", "people", "under", "the", "age", "of", "can", "not", "take", "the", "vaccine"]
(c19-9 / epic
       :degree (c19-4 / very)
       :location (c19-2 / here)
       :domain (c19-7 / possible-01
                      :ARG1 (c19-6 / take-01
                                   :ARG0 (c19-5 / person
                                                :age (c19-3 / under
                                                            :op1 (c19-1 / temporal-quantity
                                                                        :unit (c19-8 / year)
                                                                        :quant 18)))
                                   :ARG1 (c19-0 / vaccine))
                      :polarity -))

# ::snt Oooo nice r u planning on going anywhere?
# ::tokens ["Oooo", "nice", "r", "u", "planning", "on", "going", "anywhere", "?"]
# ::lemmas ["Oooo", "nice", "r", "u", "planning", "on", "go", "anywhere", "?"]
(c20-4 / nice-01
       :degree (c20-0 / so)
       :ARG1 (c20-3 / plan-01
                    :ARG0 (c20-5 / you)
                    :ARG1 (c20-2 / go-02
                                 :ARG0 c20-5
                                 :ARG4 (c20-1 / anywhere))
                    :polarity (c20-6 / amr-unknown)))

# ::snt Oh
# ::tokens ["Oh"]
# ::lemmas ["oh"]
(c21-0 / oh
       :mode expressive)

# ::snt Nowhere yet, Im just ready for when I do want to travel.
# ::tokens ["Nowhere", "yet", ",", "I", "m", "just", "ready", "for", "when", "I", "do", "want", "to", "travel", "."]
# ::lemmas ["nowhere", "yet", ",", "i", "m", "just", "ready", "for", "when", "i", "do", "want", "to", "travel", "."]
(c22-2 / ready-02
       :ARG1 (c22-4 / i)
       :ARG2 (c22-1 / travel-01
                    :ARG0 c22-4)
       :time (c22-0 / want-01
                    :ARG0 c22-4
                    :ARG1 c22-1)
       :mod (c22-3 / just)
       :location (c22-5 / nowhere)
       :time (c22-6 / yet))

# ::snt epic
# ::tokens ["epic"]
# ::lemmas ["epic"]
(c23-0 / epic)

# ::snt Omg yes!
# ::tokens ["Omg", "yes", "!"]
# ::lemmas ["Omg", "yes", "!"]
(c24-1 / yes
       :mod (c24-0 / omg
                   :mode expressive))

# ::snt Ive got my st dose of Isolation
# ::tokens ["I", "ve", "got", "my", "st", "dose", "of", "Isolation"]
# ::lemmas ["i", "ve", "get", "my", "st", "dose", "of", "Isolation"]
(c25-3 / get-01
       :ARG0 (c25-4 / i)
       :ARG1 (c25-0 / dose-01
                    :ARG1 c25-4
                    :ARG2 (c25-2 / Isolation)
                    :mod (c25-1 / st)))

# ::snt Where ya going
# ::tokens ["Where", "ya", "going"]
# ::lemmas ["where", "ya", "go"]
(c26-0 / go-02
       :ARG0 (c26-2 / you)
       :ARG4 (c26-1 / amr-unknown))
