# ::snt Bill gates di chippan
# ::tokens ["Bill", "gates", "di", "chippan"]
# ::lemmas ["Bill", "gate", "di", "chippan"]
(c1-0 / gate
      :mod (c1-1 / person
                 :name (c1-2 / name
                             :op1 "Bill"
                             :op2 "Gates"))
      :mod (c1-3 / chippan))

# ::snt Hahaha yeah I have to Thank you
# ::tokens ["Hahaha", "yeah", "I", "have", "to", "Thank", "you"]
# ::lemmas ["Hahaha", "yeah", "i", "have", "to", "thank", "you"]
(c2-1 / obligate-01
      :ARG2 (c2-2 / thank-01
                  :ARG0 (c2-3 / i)
                  :ARG1 (c2-4 / you))
      :mod (c2-0 / haha
                 :mode expressive)
      :mod (c2-5 / yeah
                 :mode expressive))

# ::snt You are supposed to test its efficacy with a magnet or a bulb btw take care..
# ::tokens ["You", "are", "supposed", "to", "test", "its", "efficacy", "with", "a", "magnet", "or", "a", "bulb", "btw", "take", "care", ".."]
# ::lemmas ["you", "be", "suppose", "to", "test", "its", "efficacy", "with", "a", "magnet", "or", "a", "bulb", "btw", "take", "care", ".."]
(c3-0 / suppose-02
      :ARG1 (c3-7 / you)
      :ARG2 (c3-4 / test-01
                  :ARG0 c3-7
                  :ARG1 (c3-8 / efficacy)
                  :ARG2 (c3-3 / or
                              :op1 (c3-6 / magnet)
                              :op2 (c3-5 / bulb))
                  :instrument-of (c3-2 / care-03
                                       :ARG0 c3-7
                                       :mod (c3-1 / by-the-way))))

# ::snt Best
# ::tokens ["Best"]
# ::lemmas ["good"]
(c4-0 / good-02
      :ARG2-of (c4-2 / have-degree-91
                     :ARG3 (c4-1 / most)))

# ::snt Fever k ilawa kuch ni hua mujh b
# ::tokens ["Fever", "k", "ilawa", "kuch", "ni", "hua", "mujh", "b"]
# ::lemmas ["Fever", "k", "ilawa", "kuch", "ni", "hua", "mujh", "b"]
(c5-1 / and
      :op1 (c5-2 / fever)
      :op2 (c5-5 / kuha
                 :mode expressive)
      :op3 (c5-0 / kuha
                 :mode expressive)
      :op4 (c5-3 / hua
                 :mode expressive)
      :op5 (c5-4 / bwahaha))

# ::snt Ameen
# ::tokens ["Ameen"]
# ::lemmas ["ameen"]
(c6-0 / person
      :name (c6-1 / name
                  :op1 "Ameen"))

# ::snt Allah behter karega iA
# ::tokens ["Allah", "behter", "karega", "iA"]
# ::lemmas ["Allah", "behter", "karega", "ia"]
(c7-0 / and
      :op1 (c7-5 / person
                 :name (c7-6 / name
                             :op1 "Allah"))
      :op2 (c7-3 / person
                 :name (c7-4 / name
                             :op1 "Karega"))
      :op3 (c7-1 / publication
                 :name (c7-2 / name
                             :op1 "IA")))

# ::snt nd doze da wait hay sanu.... Fer lagna pta kee banay ga
# ::tokens ["nd", "doze", "da", "wait", "hay", "sanu", "....", "Fer", "lagna", "pta", "kee", "banay", "ga"]
# ::lemmas ["nd", "doze", "da", "wait", "hay", "sanu", "....", "Fer", "lagna", "pta", "kee", "banay", "ga"]
(c8-8 / multi-sentence
      :snt1 (c8-0 / doze
                  :ARG0 (c8-10 / you)
                  :ARG1 (c8-4 / wait-01
                              :ARG1 c8-10
                              :ARG2 (c8-1 / sanu))
                  :mode imperative)
      :snt2 (c8-7 / possible-01
                  :ARG1 (c8-5 / lag-01
                              :ARG0 (c8-11 / you)
                              :ARG1 (c8-2 / you))
                  :ARG1-of (c8-3 / cause-01
                                 :ARG0 (c8-9 / kee
                                             :ARG1-of (c8-6 / banay-00)
                                             :mode expressive))))

# ::snt And being monitored. Loading...
# ::tokens ["And", "being", "monitored", ".", "Loading", "..."]
# ::lemmas ["and", "be", "monitor", ".", "loading", "..."]
(c9-1 / and
      :op2 (c9-0 / monitor-01)
      :op3 (c9-2 / load-01))

# ::snt Yeah. Need to check the magnetism though
# ::tokens ["Yeah", ".", "Need", "to", "check", "the", "magnetism", "though"]
# ::lemmas ["yeah", ".", "need", "to", "check", "the", "magnetism", "though"]
(c10-3 / multi-sentence
       :snt1 (c10-5 / yeah)
       :snt2 (c10-2 / have-concession-91
                    :ARG1 (c10-4 / need-01
                                 :ARG1 (c10-0 / check-01
                                              :ARG1 (c10-1 / magnetism)))))

# ::snt Happy Health Chip installed successfully
# ::tokens ["Happy", "Health", "Chip", "installed", "successfully"]
# ::lemmas ["Happy", "Health", "Chip", "instal", "successfully"]
(c11-1 / install-01
       :ARG1 (c11-3 / product
                    :name (c11-2 / name
                                 :op1 "Happy"
                                 :op2 "Health"
                                 :op3 "Chip"))
       :ARG1-of (c11-0 / succeed-01))

# ::snt Thnx
# ::tokens ["Thnx"]
# ::lemmas ["Thnx"]
(c13-0 / person
       :name (c13-1 / name
                    :op1 "Thnx"))

# ::snt Good luck
# ::tokens ["Good", "luck"]
# ::lemmas ["good", "luck"]
(c14-1 / luck
       :ARG1-of (c14-0 / good-02))

# ::snt I hv registered.Lets see when I get my first dose..waiting!!!!
# ::tokens ["I", "hv", "registered", ".", "Lets", "see", "when", "I", "get", "my", "first", "dose", "..", "waiting", "!", "!", "!", "!"]
# ::lemmas ["i", "hv", "register", ".", "let", "see", "when", "i", "get", "my", "first", "dose", "..", "wait", "!", "!", "!", "!"]
(c15-10 / multi-sentence
        :snt1 (c15-6 / register-02
                     :ARG0 (c15-9 / i))
        :snt2 (c15-7 / let-01
                     :ARG0 (c15-2 / we)
                     :ARG1 (c15-0 / see-01
                                  :ARG0 c15-2)
                     :ARG1 (c15-5 / time
                                  :time-of (c15-8 / get-01
                                                  :ARG0 (c15-3 / i)
                                                  :ARG1 (c15-1 / dose-01
                                                               :ARG1 c15-3
                                                               :ord (c15-4 / ordinal-entity
                                                                           :value 1))))
                     :mode imperative)
        :snt3 (c15-12 / wait-01
                      :ARG1 (c15-11 / you)
                      :mode expressive))

# ::snt Ok I'll try when I get my second shot
# ::tokens ["Ok", "I", "'ll", "try", "when", "I", "get", "my", "second", "shot"]
# ::lemmas ["ok", "i", "'ll", "try", "when", "i", "get", "my", "second", "shot"]
(c17-3 / try-01
       :ARG0 (c17-5 / i)
       :time (c17-4 / get-01
                    :ARG0 c17-5
                    :ARG1 (c17-0 / shoot-01
                                 :ARG0 c17-5
                                 :ord (c17-2 / ordinal-entity
                                             :value 2)))
       :ARG1-of (c17-1 / okay-04))

# ::snt Too bad, we believe in selfie supermacyNeed to get vaccinated again otherwise you don't have a proof to show to your white blood cells
# ::tokens ["Too", "bad", ",", "we", "believe", "in", "selfie", "supermacyNeed", "to", "get", "vaccinated", "again", "otherwise", "you", "do", "n't", "have", "a", "proof", "to", "show", "to", "your", "white", "blood", "cells"]
# ::lemmas ["too", "bad", ",", "we", "believe", "in", "selfie", "supermacyneed", "to", "get", "vaccinate", "again", "otherwise", "you", "do", "not", "have", "a", "proof", "to", "show", "to", "your", "white", "blood", "cell"]
(c18-6 / multi-sentence
       :snt1 (c18-15 / have-degree-91
                     :ARG1 (c18-16 / believe-01
                                   :ARG0 (c18-2 / we)
                                   :ARG1 (c18-9 / supermacy
                                                :mod (c18-17 / selfie)))
                     :ARG2 (c18-13 / bad-07
                                   :ARG1 c18-16)
                     :ARG3 (c18-5 / too))
       :snt2 (c18-7 / need-01
                    :ARG0 (c18-12 / you)
                    :ARG1 (c18-4 / vaccinate-01
                                 :ARG1 c18-12
                                 :mod (c18-14 / again))
                    :condition (c18-0 / have-03
                                      :ARG0 c18-12
                                      :ARG1 (c18-3 / thing
                                                   :ARG0-of (c18-18 / prove-01)
                                                   :ARG1-of (c18-11 / show-01
                                                                    :ARG2 (c18-1 / cell
                                                                                 :mod (c18-10 / blood)
                                                                                 :ARG1-of (c18-8 / white-03)
                                                                                 :poss c18-12)))
                                      :polarity -)))

# ::snt Hahaha I didn't take any picture because I was busy holding my scream inside
# ::tokens ["Hahaha", "I", "did", "n't", "take", "any", "picture", "because", "I", "was", "busy", "holding", "my", "scream", "inside"]
# ::lemmas ["Hahaha", "i", "do", "not", "take", "any", "picture", "because", "i", "be", "busy", "hold", "my", "scream", "inside"]
(c19-2 / cause-01
       :ARG0 (c19-7 / busy-01
                    :ARG1 (c19-9 / i)
                    :ARG2 (c19-3 / hold-01
                                 :ARG0 c19-9
                                 :ARG1 (c19-0 / scream-01
                                              :ARG0 c19-9)
                                 :location (c19-4 / inside)))
       :ARG1 (c19-5 / take-01
                    :ARG0 c19-9
                    :ARG1 (c19-6 / picture
                                 :mod (c19-1 / any))
                    :mod (c19-8 / haha
                                :mode expressive)
                    :polarity -))

# ::snt Instagram or it never happenedNeed to see the picture just to make sure
# ::tokens ["Instagram", "or", "it", "never", "happenedNeed", "to", "see", "the", "picture", "just", "to", "make", "sure"]
# ::lemmas ["Instagram", "or", "it", "never", "happenedneed", "to", "see", "the", "picture", "just", "to", "make", "sure"]
(c20-7 / need-01
       :ARG0 (c20-8 / you)
       :ARG1 (c20-0 / see-01
                    :ARG0 c20-8
                    :ARG1 (c20-6 / picture)
                    :purpose (c20-9 / ensure-01
                                    :ARG0 c20-8
                                    :ARG1 (c20-1 / event
                                                 :time (c20-2 / ever)
                                                 :polarity -)
                                    :mod (c20-5 / just)))
       :source (c20-3 / publication
                      :name (c20-4 / name
                                   :op1 "Instagram")))
