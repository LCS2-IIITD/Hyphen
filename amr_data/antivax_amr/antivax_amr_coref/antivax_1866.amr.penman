# ::snt Amiin,thank u Ain~
# ::tokens ["Amiin", ",", "thank", "u", "Ain~"]
# ::lemmas ["amiin", ",", "thank", "u", "ain~"]
(c1-1 / thank-01
      :ARG0 (c1-0 / i)
      :ARG1 (c1-2 / person
                  :name (c1-3 / name
                              :op1 "Amin")))

# ::snt Wahhhh, may your dad always in a good health too farisha
# ::tokens ["Wahhhh", ",", "may", "your", "dad", "always", "in", "a", "good", "health", "too", "farisha"]
# ::lemmas ["wahhhh", ",", "may", "your", "dad", "always", "in", "a", "good", "health", "too", "farisha"]
(c2-0 / say-01
      :ARG0 (c2-11 / i)
      :ARG1 (c2-5 / wish-01
                  :ARG1 (c2-6 / health
                              :ARG1-of (c2-9 / good-02)
                              :domain (c2-8 / person
                                            :ARG0-of (c2-10 / have-rel-role-91
                                                            :ARG1 (c2-12 / you)
                                                            :ARG2 (c2-1 / dad)))
                              :time (c2-3 / always)
                              :ARG1-of (c2-2 / have-degree-91
                                             :ARG2 (c2-4 / far)
                                             :ARG3 (c2-7 / too)))
                  :ARG2 c2-8
                  :mod (c2-13 / wah
                              :mode expressive))
      :ARG2 c2-8)

# ::snt Amiinn my dad also got his st vaccine a few days ago
# ::tokens ["Amiinn", "my", "dad", "also", "got", "his", "st", "vaccine", "a", "few", "days", "ago"]
# ::lemmas ["Amiinn", "my", "dad", "also", "get", "his", "st", "vaccine", "a", "few", "days", "ago"]
(c3-0 / say-01
      :ARG0 (c3-12 / i)
      :ARG1 (c3-10 / get-01
                   :ARG0 (c3-8 / person
                               :ARG0-of (c3-5 / have-rel-role-91
                                              :ARG1 c3-12
                                              :ARG2 (c3-1 / dad)))
                   :ARG1 (c3-6 / vaccine
                               :mod (c3-11 / st)
                               :poss c3-8)
                   :mod (c3-2 / also)
                   :time (c3-13 / before
                                :op1 (c3-9 / now)
                                :quant (c3-3 / few
                                             :op1 (c3-7 / temporal-quantity
                                                        :unit (c3-4 / day)
                                                        :quant 1))))
      :ARG2 c3-8)
