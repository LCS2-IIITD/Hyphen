# ::snt I have been allergic to humans since Brexit, which unknowingly prepared me for covid. I was a step ahead of the game when it came to telling Boris and HanCOCK where they can stick their bloody jab and it ain't in me or mine.
# ::tokens ["I", "have", "been", "allergic", "to", "humans", "since", "Brexit", ",", "which", "unknowingly", "prepared", "me", "for", "covid", ".", "I", "was", "a", "step", "ahead", "of", "the", "game", "when", "it", "came", "to", "telling", "Boris", "and", "HanCOCK", "where", "they", "can", "stick", "their", "bloody", "jab", "and", "it", "ai", "n't", "in", "me", "or", "mine", "."]
# ::lemmas ["i", "have", "be", "allergic", "to", "human", "since", "Brexit", ",", "which", "unknowingly", "prepare", "i", "for", "covid", ".", "i", "be", "a", "step", "ahead", "of", "the", "game", "when", "it", "come", "to", "tell", "Boris", "and", "HanCOCK", "where", "they", "can", "stick", "their", "bloody", "jab", "and", "it", "be", "not", "in", "i", "or", "mine", "."]
(c1-9 / multi-sentence
      :snt1 (c1-21 / allergy
                   :domain (c1-3 / i)
                   :time (c1-13 / since
                                :op1 (c1-12 / event
                                            :name (c1-10 / name
                                                         :op1 "Brexit")
                                            :ARG0-of (c1-28 / prepare-02
                                                            :ARG1 c1-3
                                                            :ARG2 (c1-23 / product
                                                                         :name (c1-2 / name
                                                                                     :op1 "Covid"))
                                                            :ARG1-of (c1-29 / know-01
                                                                            :ARG0 c1-3
                                                                            :polarity -)))))
      :snt2 (c1-11 / and
                   :op1 (c1-27 / step-01
                               :ARG1 (c1-16 / i)
                               :ARG2 (c1-0 / ahead
                                           :op1 (c1-8 / game))
                               :time (c1-5 / come-12
                                           :ARG1 (c1-7 / tell-01
                                                       :ARG0 c1-16
                                                       :ARG1 (c1-25 / location
                                                                    :location-of (c1-15 / possible-01
                                                                                        :ARG1 (c1-17 / stick-01
                                                                                                     :ARG0 (c1-30 / and
                                                                                                                  :op1 (c1-14 / person
                                                                                                                              :name (c1-19 / name
                                                                                                                                           :op1 "Boris"))
                                                                                                                  :op2 (c1-1 / person
                                                                                                                             :name (c1-4 / name
                                                                                                                                         :op1 "HanCOCK")))
                                                                                                     :ARG1 (c1-24 / jab-01
                                                                                                                  :ARG0 c1-30
                                                                                                                  :mod (c1-26 / bloody)))))
                                                       :ARG2 c1-30))
                               :op2 (c1-20 / be-located-at-91
                                           :ARG1 (c1-18 / it)
                                           :ARG2 (c1-6 / or
                                                       :op1 c1-16
                                                       :op2 (c1-22 / i))
                                           :polarity -))))

# ::snt Yup
# ::tokens ["Yup"]
# ::lemmas ["yup"]
(c2-0 / yup)

# ::snt Jeez, I was so caught up with the pfizer MRNA info that I thought that the AstraZeneca wasnt an MRNA vkx, both as bad as each other it seems.
# ::tokens ["Jeez", ",", "I", "was", "so", "caught", "up", "with", "the", "pfizer", "MRNA", "info", "that", "I", "thought", "that", "the", "AstraZeneca", "was", "nt", "an", "MRNA", "vkx", ",", "both", "as", "bad", "as", "each", "other", "it", "seems", "."]
# ::lemmas ["Jeez", ",", "i", "be", "so", "catch", "up", "with", "the", "pfizer", "mrna", "info", "that", "i", "think", "that", "the", "AstraZeneca", "be", "not", "an", "mrna", "vkx", ",", "both", "as", "bad", "as", "each", "other", "it", "seem", "."]
(c3-2 / catch-up-04
      :ARG1 (c3-15 / i)
      :ARG2 (c3-3 / information
                  :topic (c3-12 / product
                                :name (c3-16 / name
                                             :op1 "MRNA"))
                  :poss (c3-0 / company
                              :name (c3-11 / name
                                           :op1 "Pfizer")))
      :ARG2-of (c3-4 / have-degree-91
                     :ARG1 c3-15
                     :ARG3 (c3-1 / so)
                     :ARG6 (c3-10 / think-01
                                  :ARG0 c3-15
                                  :ARG1 (c3-7 / vkx
                                              :domain (c3-6 / company
                                                            :name (c3-8 / name
                                                                        :op1 "AstraZeneca"))
                                              :ARG1-of (c3-13 / bad-07
                                                              :ARG2-of c3-4
                                                              :ARG1 c3-7
                                                              :ARG3 (c3-17 / equal)
                                                              :ARG4 (c3-9 / other
                                                                          :mod (c3-5 / each)))
                                              :polarity -)))
      :mod (c3-14 / jeez
                  :mode expressive))

# ::snt My brain is too stoned to join the dots..Its still cracking up at 'not so penny wise' the killer clown, who gives away free balloons with every covid jab
# ::tokens ["My", "brain", "is", "too", "stoned", "to", "join", "the", "dots", "..", "Its", "still", "cracking", "up", "at", "'", "not", "so", "penny", "wise", "'", "the", "killer", "clown", ",", "who", "gives", "away", "free", "balloons", "with", "every", "covid", "jab"]
# ::lemmas ["my", "brain", "be", "too", "stone", "to", "join", "the", "dot", "..", "its", "still", "crack", "up", "at", "'", "not", "so", "penny", "wise", "'", "the", "killer", "clown", ",", "who", "give", "away", "free", "balloon", "with", "every", "covid", "jab"]
(c4-8 / multi-sentence
      :snt1 (c4-16 / have-degree-91
                   :ARG1 (c4-12 / brain
                                :part-of (c4-2 / i))
                   :ARG2 (c4-10 / stoned)
                   :ARG3 (c4-6 / too)
                   :ARG6 (c4-18 / join-01
                                :ARG0 c4-2
                                :ARG1 (c4-0 / dot)))
      :snt2 (c4-3 / crack-up-03
                  :ARG1 (c4-11 / it)
                  :ARG2 (c4-1 / clown
                              :ARG0-of (c4-20 / kill-01)
                              :ARG0-of (c4-7 / give-away-02
                                             :ARG1 (c4-13 / balloon
                                                          :ARG1-of (c4-15 / free-03))
                                             :instrument (c4-17 / jab-01
                                                                :mod (c4-9 / every)
                                                                :mod (c4-5 / covid)))
                              :mod (c4-4 / wise
                                         :topic (c4-19 / penny)
                                         :polarity -))
                  :mod (c4-14 / still)))

# ::snt When Stephen King becomes Mystic Meg you know...
# ::tokens ["When", "Stephen", "King", "becomes", "Mystic", "Meg", "you", "know", "..."]
# ::lemmas ["when", "Stephen", "King", "become", "Mystic", "Meg", "you", "know", "..."]
(c5-4 / know-01
      :ARG0 (c5-5 / you)
      :time (c5-2 / become-01
                  :ARG1 (c5-3 / person
                              :name (c5-1 / name
                                          :op1 "Stephen"
                                          :op2 "King")
                              :ARG2-of c5-2)
                  :name (c5-0 / name
                              :op1 "Mystic"
                              :op2 "Meg")))

# ::snt Running man..28 days later..Demolition man..The matrix..We are fucked!!!
# ::tokens ["Running", "man", "..", "28", "days", "later", "..", "Demolition", "man", "..", "The", "matrix", "..", "We", "are", "fucked", "!", "!", "!"]
# ::lemmas ["run", "man", "..", "28", "days", "later", "..", "Demolition", "man", "..", "the", "matrix", "..", "we", "be", "fuck", "!", "!", "!"]
(c8-10 / multi-sentence
       :snt1 (c8-3 / man
                   :ARG0-of (c8-7 / run-02)
                   :time (c8-1 / after
                               :quant (c8-6 / temporal-quantity
                                            :unit (c8-0 / day)
                                            :quant 28)))
       :snt2 (c8-5 / man
                   :ARG0-of (c8-9 / demolish-01)
                   :mod (c8-8 / matrix))
       :snt3 (c8-2 / fuck-01
                   :ARG1 (c8-4 / we)))

# ::snt I have not!
# ::tokens ["I", "have", "not", "!"]
# ::lemmas ["i", "have", "not", "!"]
(c10-1 / have-03
       :ARG0 (c10-0 / i)
       :polarity -)
