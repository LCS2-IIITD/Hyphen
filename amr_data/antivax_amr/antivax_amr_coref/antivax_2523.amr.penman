# ::snt Too early to judge but its a bit ambitious if you ask me
# ::tokens ["Too", "early", "to", "judge", "but", "its", "a", "bit", "ambitious", "if", "you", "ask", "me"]
# ::lemmas ["too", "early", "to", "judge", "but", "its", "a", "bit", "ambitious", "if", "you", "ask", "i"]
(c1-1 / contrast-01
      :ARG1 (c1-2 / have-degree-91
                  :ARG2 (c1-10 / early)
                  :ARG3 (c1-4 / too)
                  :ARG6 (c1-6 / judge-01))
      :ARG2 (c1-0 / ambitious
                  :domain (c1-7 / it)
                  :degree (c1-5 / bit)
                  :condition (c1-9 / ask-01
                                   :ARG0 (c1-8 / you)
                                   :ARG2 (c1-3 / i))))

# ::snt The azn vaccine is a totally different logistical ball game, where as Boris said, is only supply dependent. Problems with temperature, setting up vaccination program etc etc. You generally have a slow start up followed by a catch up later down the line as it gets more efficient
# ::tokens ["The", "azn", "vaccine", "is", "a", "totally", "different", "logistical", "ball", "game", ",", "where", "as", "Boris", "said", ",", "is", "only", "supply", "dependent", ".", "Problems", "with", "temperature", ",", "setting", "up", "vaccination", "program", "etc", "etc", ".", "You", "generally", "have", "a", "slow", "start", "up", "followed", "by", "a", "catch", "up", "later", "down", "the", "line", "as", "it", "gets", "more", "efficient"]
# ::lemmas ["the", "azn", "vaccine", "be", "a", "totally", "different", "logistical", "ball", "game", ",", "where", "as", "Boris", "say", ",", "be", "only", "supply", "dependent", ".", "problem", "with", "temperature", ",", "set", "up", "vaccination", "program", "etc", "etc", ".", "you", "generally", "have", "a", "slow", "start", "up", "follow", "by", "a", "catch", "up", "later", "down", "the", "line", "as", "it", "get", "more", "efficient"]
(c2-14 / multi-sentence
       :snt1 (c2-13 / game
                    :mod (c2-32 / ball)
                    :domain (c2-11 / vaccine
                                   :name (c2-15 / name
                                                :op1 "Azn"))
                    :ARG1-of (c2-0 / differ-02
                                   :degree (c2-12 / total))
                    :mod (c2-31 / logistics)
                    :location-of (c2-22 / depend-01
                                        :ARG0 c2-11
                                        :ARG1 (c2-18 / supply-01)
                                        :ARG1-of (c2-33 / say-01
                                                        :ARG0 (c2-34 / person
                                                                     :name (c2-3 / name
                                                                                 :op1 "Boris")))))
       :snt2 (c2-30 / problem
                    :topic (c2-25 / and
                                  :op1 (c2-10 / temperature)
                                  :op2 (c2-21 / set-up-03
                                              :ARG1 (c2-20 / program
                                                           :topic (c2-26 / vaccinate-01)))
                                  :op3 (c2-17 / et-cetera)))
       :snt3 (c2-28 / have-03
                    :ARG0 (c2-23 / you)
                    :ARG1 (c2-16 / and
                                 :op1 (c2-7 / start-up-05
                                            :ARG0 c2-23
                                            :ARG1-of (c2-8 / slow-05))
                                 :op2 (c2-9 / catch-up-04
                                            :ARG1 c2-23
                                            :time (c2-1 / after
                                                        :op1 c2-7)
                                            :location (c2-19 / down
                                                             :op1 (c2-4 / line)))
                                 :time (c2-24 / get-03
                                              :ARG1 c2-11
                                              :ARG2 (c2-29 / efficient-01
                                                           :ARG1 c2-11
                                                           :ARG2-of (c2-5 / have-degree-91
                                                                          :ARG1 (c2-6 / it
                                                                                      :ARG3 (c2-27 / more)))))
                                 :ARG1-of (c2-2 / general-02))))

# ::snt Dennis, maybe re read my comment
# ::tokens ["Dennis", ",", "maybe", "re", "read", "my", "comment"]
# ::lemmas ["Dennis", ",", "maybe", "re", "read", "my", "comment"]
(c3-0 / say-01
      :ARG0 (c3-6 / i)
      :ARG1 (c3-5 / possible-01
                  :ARG1 (c3-4 / read-01
                              :ARG0 (c3-3 / person
                                          :name (c3-7 / name
                                                      :op1 "Dennis"))
                              :ARG1 (c3-2 / comment-01
                                          :ARG0 c3-6)
                              :mod (c3-1 / again)))
      :ARG2 c3-3)

# ::snt How many millions of kids won't get getting a vaccine in the uk ?
# ::tokens ["How", "many", "millions", "of", "kids", "wo", "n't", "get", "getting", "a", "vaccine", "in", "the", "uk", "?"]
# ::lemmas ["how", "many", "millions", "of", "kid", "will", "not", "get", "get", "a", "vaccine", "in", "the", "uk", "?"]
(c4-3 / get-01
      :ARG0 (c4-6 / kid
                  :quant (c4-0 / amr-unknown
                               :mod (c4-5 / multiple
                                          :op1 1000000)))
      :ARG1 (c4-2 / vaccine)
      :location (c4-1 / country
                      :name (c4-4 / name
                                  :op1 "UK"))
      :polarity -)

# ::snt Rest of the world ?
# ::tokens ["Rest", "of", "the", "world", "?"]
# ::lemmas ["rest", "of", "the", "world", "?"]
(c5-2 / rest
      :polarity (c5-1 / amr-unknown)
      :part-of (c5-0 / world))

# ::snt Testing will very much be a part of the UK for and globally in to but the UK Gov plan to vaccinate m people per week. That would see the entire population of the UK vaccinated by autumn .Avacta need to get a move, first in class or not
# ::tokens ["Testing", "will", "very", "much", "be", "a", "part", "of", "the", "UK", "for", "and", "globally", "in", "to", "but", "the", "UK", "Gov", "plan", "to", "vaccinate", "m", "people", "per", "week", ".", "That", "would", "see", "the", "entire", "population", "of", "the", "UK", "vaccinated", "by", "autumn", ".Avacta", "need", "to", "get", "a", "move", ",", "first", "in", "class", "or", "not"]
# ::lemmas ["testing", "will", "very", "much", "be", "a", "part", "of", "the", "UK", "for", "and", "globally", "in", "to", "but", "the", "UK", "Gov", "plan", "to", "vaccinate", "m", "people", "per", "week", ".", "that", "would", "see", "the", "entire", "population", "of", "the", "UK", "vaccinate", "by", "autumn", ".avacta", "need", "to", "get", "a", "move", ",", "first", "in", "class", "or", "not"]
(c6-16 / multi-sentence
       :snt1 (c6-5 / contrast-01
                   :ARG1 (c6-12 / test-01
                                :part-of (c6-0 / country
                                               :name (c6-17 / name
                                                            :op1 "UK"))
                                :mod (c6-32 / much
                                            :degree (c6-10 / very))
                                :prep-in (c6-7 / to))
                   :ARG2 (c6-36 / plan-01
                                :ARG0 (c6-14 / government-organization
                                             :ARG0-of (c6-29 / govern-01
                                                             :ARG1 c6-0))
                                :ARG1 (c6-31 / vaccinate-01
                                             :ARG0 c6-14
                                             :ARG1 (c6-34 / person
                                                          :quant (c6-26 / multiple
                                                                        :op1 1000000))
                                             :frequency (c6-13 / rate-entity-91
                                                               :ARG1 c6-34
                                                               :ARG2 (c6-18 / temporal-quantity
                                                                            :unit (c6-6 / week)
                                                                            :quant 1)))))
       :snt2 (c6-21 / see-01
                    :ARG0 (c6-24 / that)
                    :ARG1 (c6-25 / vaccinate-01
                                 :ARG1 (c6-23 / population
                                              :mod (c6-20 / entire)
                                              :poss (c6-8 / country
                                                          :name (c6-2 / name
                                                                      :op1 "UK")))
                                 :time (c6-35 / by
                                              :op1 (c6-1 / date-entity
                                                         :season (c6-30 / autumn)))))
       :snt3 (c6-27 / need-01
                    :ARG0 (c6-19 / animal
                                 :name (c6-4 / name
                                             :op1 "Avacta"))
                    :ARG1 (c6-15 / move-01
                                 :ARG1 c6-19
                                 :ARG1-of (c6-9 / regardless-91
                                                :ARG2 (c6-11 / or
                                                             :op1 (c6-28 / class
                                                                         :ord (c6-33 / ordinal-entity
                                                                                     :value 1))
                                                             :op2 (c6-22 / class
                                                                         :ord (c6-3 / ordinal-entity
                                                                                    :value 1)))))))

# ::snt Perhaps some one should remind them !!
# ::tokens ["Perhaps", "some", "one", "should", "remind", "them", "!", "!"]
# ::lemmas ["perhaps", "some", "one", "should", "remind", "they", "!", "!"]
(c7-4 / possible-01
      :ARG1 (c7-3 / recommend-01
                  :ARG1 (c7-1 / remind-01
                              :ARG0 (c7-0 / someone)
                              :ARG2 (c7-2 / they
                                          :ARG2-of c7-3))))
