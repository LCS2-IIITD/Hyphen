# ::snt love you too &lt;33
# ::tokens ["love", "you", "too", "&", "lt;33"]
# ::lemmas ["love", "you", "too", "&", "lt;33"]
(c1-1 / and
      :op1 (c1-3 / love-01
                 :ARG0 (c1-4 / i)
                 :ARG1 (c1-5 / you)
                 :mod (c1-2 / too))
      :op2 (c1-0 / string-entity
                 :value "&lt;33"))

# ::snt yh idk why it's like that for me, some of my friends were fine only their hand hurt a bit but then I have friends that like had fever so Idk (im talking about the first batch)
# ::tokens ["yh", "idk", "why", "it", "'s", "like", "that", "for", "me", ",", "some", "of", "my", "friends", "were", "fine", "only", "their", "hand", "hurt", "a", "bit", "but", "then", "I", "have", "friends", "that", "like", "had", "fever", "so", "Idk", "(", "i", "m", "talking", "about", "the", "first", "batch", ")"]
# ::lemmas ["yh", "idk", "why", "it", "be", "like", "that", "for", "i", ",", "some", "of", "my", "friend", "be", "fine", "only", "their", "hand", "hurt", "a", "bit", "but", "then", "i", "have", "friend", "that", "like", "have", "fever", "so", "Idk", "(", "i", "m", "talk", "about", "the", "first", "batch", ")"]
(c2-14 / multi-sentence
       :snt1 (c2-5 / cause-01
                   :ARG0 (c2-12 / that)
                   :ARG1 (c2-13 / resemble-01
                                :ARG1 (c2-3 / it)
                                :ARG2 (c2-6 / that)
                                :beneficiary (c2-20 / i))
                   :mod (c2-24 / yh
                               :mode expressive))
       :snt2 (c2-0 / contrast-01
                   :ARG1 (c2-26 / fine-04
                                :ARG1 (c2-32 / person
                                             :ARG1-of (c2-21 / include-91
                                                             :ARG2 (c2-30 / person
                                                                          :ARG0-of (c2-27 / have-rel-role-91
                                                                                          :ARG1 c2-20
                                                                                          :ARG2 (c2-22 / friend)))
                                                             :quant (c2-16 / some))
                                             :part (c2-2 / hand))
                                :mod (c2-10 / only)
                                :degree (c2-31 / bit))
                   :ARG2 (c2-4 / hurt-01
                               :ARG1 c2-2
                               :degree c2-31))
       :snt3 (c2-11 / have-03
                    :ARG0 (c2-29 / i)
                    :ARG1 (c2-19 / person
                                 :ARG0-of (c2-7 / have-rel-role-91
                                                :ARG1 c2-29
                                                :ARG2 (c2-23 / friend))
                                 :ARG0-of c2-11
                                 :ARG1 (c2-1 / fever)
                                 :ARG1-of (c2-8 / resemble-01
                                                :ARG2 (c2-18 / person
                                                             :ARG0-of (c2-33 / have-rel-role-91
                                                                             :ARG1 c2-29
                                                                             :ARG2 (c2-17 / friend))))))
       :ARG0-of (c2-9 / cause-01
                      :ARG1 (c2-15 / talk-01
                                   :ARG0 c2-29
                                   :ARG1 (c2-25 / batch
                                                :ord (c2-28 / ordinal-entity
                                                            :value 1)))))

# ::snt oh wow is it that bad?
# ::tokens ["oh", "wow", "is", "it", "that", "bad", "?"]
# ::lemmas ["oh", "wow", "be", "it", "that", "bad", "?"]
(c3-3 / bad-07
      :polarity (c3-0 / amr-unknown)
      :ARG1 (c3-4 / it)
      :degree (c3-2 / that)
      :mod (c3-1 / oh-wow
                 :mode expressive))

# ::snt love u &lt;3
# ::tokens ["love", "u", "&", "lt;3"]
# ::lemmas ["love", "u", "&", "lt;3"]
(c4-2 / love-01
      :ARG0 (c4-0 / i)
      :ARG1 (c4-3 / person
                  :name (c4-1 / name
                              :op1 "lt;3")))

# ::snt okay bb, hope u r okay &lt;33
# ::tokens ["okay", "bb", ",", "hope", "u", "r", "okay", "&", "lt;33"]
# ::lemmas ["okay", "bb", ",", "hope", "u", "r", "okay", "&", "lt;33"]
(c5-0 / and
      :op1 (c5-3 / okay-04
                 :ARG1 (c5-5 / i))
      :op2 (c5-1 / hope-01
                 :ARG0 c5-5
                 :ARG1 (c5-2 / okay-04
                             :ARG1 (c5-7 / and
                                         :op1 c5-5
                                         :op2 (c5-4 / person
                                                    :name (c5-6 / name
                                                                :op1 "lt;33"))))))

# ::snt yh bb dw ily just some side effects, means it's working
# ::tokens ["yh", "bb", "dw", "ily", "just", "some", "side", "effects", ",", "means", "it", "'s", "working"]
# ::lemmas ["yh", "bb", "dw", "ily", "just", "some", "side", "effect", ",", "mean", "it", "be", "work"]
(c6-6 / mean-01
      :ARG1 (c6-7 / event
                  :mod (c6-0 / side)
                  :quant (c6-4 / some)
                  :mod (c6-3 / just)
                  :mod (c6-2 / hey
                             :mode expressive))
      :ARG2 (c6-1 / work-09
                  :ARG1 (c6-5 / it)))

# ::snt yh ik had to take a pill today
# ::tokens ["yh", "ik", "had", "to", "take", "a", "pill", "today"]
# ::lemmas ["yh", "ik", "have", "to", "take", "a", "pill", "today"]
(c7-3 / obligate-01
      :ARG1 (c7-0 / i)
      :ARG2 (c7-4 / take-01
                  :ARG0 c7-0
                  :ARG1 (c7-5 / pill)
                  :time (c7-1 / today))
      :mod (c7-2 / hey
                 :mode expressive))

# ::snt omg are u okay?
# ::tokens ["omg", "are", "u", "okay", "?"]
# ::lemmas ["omg", "be", "u", "okay", "?"]
(c8-0 / okay-04
      :polarity (c8-1 / amr-unknown)
      :ARG1 (c8-2 / you))

# ::snt yeah but dont worry tomorrow it will hurt too but then it'll stop
# ::tokens ["yeah", "but", "do", "nt", "worry", "tomorrow", "it", "will", "hurt", "too", "but", "then", "it", "'ll", "stop"]
# ::lemmas ["yeah", "but", "do", "not", "worry", "tomorrow", "it", "will", "hurt", "too", "but", "then", "it", "'ll", "stop"]
(c9-2 / contrast-01
      :ARG1 (c9-10 / yeah
                   :mode expressive)
      :ARG2 (c9-3 / worry-02
                  :ARG0 (c9-11 / you
                               :ARG1-of c9-3)
                  :ARG1-of (c9-0 / cause-01
                                 :ARG0 (c9-7 / contrast-01
                                             :ARG1 (c9-6 / hurt-02
                                                         :ARG0 (c9-9 / it)
                                                         :mod (c9-8 / too))
                                             :ARG2 (c9-1 / stop-01
                                                         :ARG1 c9-9
                                                         :time (c9-4 / then))))
                  :time (c9-5 / tomorrow)
                  :polarity -
                  :mode imperative))

# ::snt yh god I didn't know it hurts so much
# ::tokens ["yh", "god", "I", "did", "n't", "know", "it", "hurts", "so", "much"]
# ::lemmas ["yh", "god", "i", "do", "not", "know", "it", "hurt", "so", "much"]
(c10-6 / know-01
       :ARG0 (c10-4 / i)
       :ARG1 (c10-1 / hurt-02
                    :ARG1 (c10-2 / it)
                    :degree (c10-5 / much
                                   :degree (c10-0 / so)))
       :mod (c10-3 / god
                   :mod (c10-7 / yh)
                   :mode expressive)
       :polarity -)

# ::snt oh is your hand hurting?
# ::tokens ["oh", "is", "your", "hand", "hurting", "?"]
# ::lemmas ["oh", "be", "your", "hand", "hurt", "?"]
(c11-1 / hurt-02
       :polarity (c11-0 / amr-unknown)
       :ARG1 (c11-3 / hand
                    :part-of (c11-4 / you))
       :mod (c11-2 / oh
                   :mode expressive))

# ::snt shush u love me too
# ::tokens ["shush", "u", "love", "me", "too"]
# ::lemmas ["shush", "u", "love", "i", "too"]
(c12-2 / love-01
       :ARG0 (c12-4 / you)
       :ARG1 (c12-3 / i)
       :mod (c12-1 / too)
       :mod (c12-0 / shush
                   :mode expressive))

# ::snt I mean yh ig for some reason i still love her (jana im kidding don't u dare use that again me)
# ::tokens ["I", "mean", "yh", "ig", "for", "some", "reason", "i", "still", "love", "her", "(", "jana", "i", "m", "kidding", "do", "n't", "u", "dare", "use", "that", "again", "me", ")"]
# ::lemmas ["i", "mean", "yh", "ig", "for", "some", "reason", "i", "still", "love", "she", "(", "jana", "i", "m", "kid", "do", "not", "u", "dare", "use", "that", "again", "i", ")"]
(c15-6 / multi-sentence
       :snt1 (c15-16 / mean-01
                     :ARG0 (c15-1 / i)
                     :ARG2 (c15-13 / you))
       :snt2 (c15-15 / and
                     :op1 (c15-18 / love-01
                                  :ARG0 (c15-10 / i)
                                  :ARG1 (c15-9 / she)
                                  :mod (c15-19 / still)
                                  :ARG1-of (c15-3 / cause-01
                                                  :ARG0 (c15-5 / reason
                                                               :mod (c15-11 / some))))
                     :op2 (c15-2 / say-01
                                 :ARG0 (c15-12 / i)
                                 :ARG1 (c15-21 / kid-01
                                               :ARG0 c15-12
                                               :ARG2 (c15-0 / dare-01
                                                            :ARG1 (c15-14 / you)
                                                            :ARG2 (c15-17 / use-01
                                                                          :ARG0 c15-14
                                                                          :ARG1 (c15-4 / that)
                                                                          :mod (c15-8 / again))
                                                            :polarity -))
                                 :ARG2 (c15-20 / person
                                               :name (c15-7 / name
                                                            :op1 "jana")))))

# ::snt Two*
# ::tokens ["Two", "*"]
# ::lemmas ["Two", "*"]
(c16-0 / thing
       :quant 2)

# ::snt You too r so cute
# ::tokens ["You", "too", "r", "so", "cute"]
# ::lemmas ["you", "too", "r", "so", "cute"]
(c17-3 / cute
       :degree (c17-0 / so)
       :domain (c17-2 / you)
       :mod (c17-1 / too))

# ::snt I love you ig
# ::tokens ["I", "love", "you", "ig"]
# ::lemmas ["i", "love", "you", "ig"]
(c18-0 / say-01
       :ARG0 (c18-1 / i)
       :ARG1 (c18-3 / love-01
                    :ARG0 c18-1
                    :ARG1 (c18-2 / you
                                 :ARG2-of c18-0)))

# ::snt yw ig
# ::tokens ["yw", "ig"]
# ::lemmas ["yw", "ig"]
(c20-0 / yw
       :mode expressive)

# ::snt thanks ig
# ::tokens ["thanks", "ig"]
# ::lemmas ["thank", "ig"]
(c22-1 / thank-01
       :ARG0 (c22-0 / i)
       :ARG1 (c22-2 / person
                    :name (c22-3 / name
                                 :op1 " ig")))

# ::snt JUST INTERACT WITH PEOPLE BISH IDK
# ::tokens ["JUST", "INTERACT", "WITH", "PEOPLE", "BISH", "IDK"]
# ::lemmas ["just", "interact", "with", "people", "BISH", "IDK"]
(c24-1 / interview-01
       :ARG1 (c24-2 / person)
       :mod (c24-0 / just))

# ::snt I DON'T KNOW I'M THE ONE THAT FORGOT HOW TO USE TWT NOT U
# ::tokens ["I", "DON'T", "KNOW", "I'M", "THE", "ONE", "THAT", "FORGOT", "HOW", "TO", "USE", "TWT", "NOT", "U"]
# ::lemmas ["i", "don't", "KNOW", "i'm", "the", "one", "that", "forget", "how", "to", "use", "TWT", "not", "u"]
(c25-7 / know-01
       :ARG0 (c25-6 / i)
       :ARG1 (c25-3 / one
                    :ARG0-of (c25-0 / FORG1
                                    :manner-of (c25-2 / use-01)
                                    :ARG1-of (c25-1 / instead-of-91
                                                    :ARG2 (c25-4 / person
                                                                 :name (c25-5 / name
                                                                              :op1 "U")))))
       :polarity -)

# ::snt how?!
# ::tokens ["how", "?", "!"]
# ::lemmas ["how", "?", "!"]
(c26-0 / amr-unknown
       :mode expressive)

# ::snt well help me then
# ::tokens ["well", "help", "me", "then"]
# ::lemmas ["well", "help", "i", "then"]
(c27-1 / help-01
       :ARG0 (c27-4 / you)
       :ARG1 (c27-3 / i)
       :mod (c27-0 / well)
       :mod (c27-2 / then)
       :mode imperative)

# ::snt not that
# ::tokens ["not", "that"]
# ::lemmas ["not", "that"]
(c28-0 / that
       :polarity -)

# ::snt wtf am I supposed to tweet then i don't remember how to use twt shush
# ::tokens ["wtf", "am", "I", "supposed", "to", "tweet", "then", "i", "do", "n't", "remember", "how", "to", "use", "twt", "shush"]
# ::lemmas ["wtf", "be", "i", "suppose", "to", "tweet", "then", "i", "do", "not", "remember", "how", "to", "use", "twt", "shush"]
(c29-1 / and
       :op1 (c29-0 / suppose-02
                   :ARG1 (c29-9 / i)
                   :ARG2 (c29-6 / tweet-02
                                :ARG0 c29-9)
                   :mod (c29-2 / fuck
                               :mode expressive))
       :op2 (c29-7 / remember-01
                   :ARG0 c29-9
                   :ARG1 (c29-3 / thing
                                :manner-of (c29-5 / use-01
                                                  :ARG0 c29-9
                                                  :ARG1 (c29-8 / shit
                                                               :mod (c29-10 / twt))))
                   :time (c29-4 / then)
                   :polarity -))

# ::snt that's what u tweet after so long i-
# ::tokens ["that", "'s", "what", "u", "tweet", "after", "so", "long", "i-"]
# ::lemmas ["that", "be", "what", "u", "tweet", "after", "so", "long", "i-"]
(c30-0 / say-01
       :ARG0 (c30-6 / i)
       :ARG1 (c30-3 / tweet-01
                    :ARG0 (c30-7 / you)
                    :ARG1 (c30-2 / that)
                    :time (c30-1 / after
                                 :op1 (c30-4 / long-03
                                             :degree (c30-5 / so))))
       :ARG2 c30-7)
