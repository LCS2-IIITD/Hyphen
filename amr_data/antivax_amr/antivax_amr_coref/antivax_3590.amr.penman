# ::snt ok
# ::tokens ["ok"]
# ::lemmas ["ok"]
(c1-0 / okay-04)

# ::snt Pain.
# ::tokens ["Pain", "."]
# ::lemmas ["pain", "."]
(c2-0 / pain)

# ::snt Oh then youll be okay? That a relief
# ::tokens ["Oh", "then", "you", "ll", "be", "okay", "?", "That", "a", "relief"]
# ::lemmas ["oh", "then", "you", "ll", "be", "okay", "?", "that", "a", "relief"]
(c3-5 / multi-sentence
      :snt1 (c3-2 / okay-04
                  :ARG1 (c3-6 / you)
                  :mod (c3-1 / oh
                             :mode expressive)
                  :time (c3-3 / then))
      :snt2 (c3-4 / relieve-01
                  :ARG0 (c3-0 / that)))

# ::snt I guess christmas wishes do come true
# ::tokens ["I", "guess", "christmas", "wishes", "do", "come", "true"]
# ::lemmas ["i", "guess", "christmas", "wish", "do", "come", "true"]
(c5-4 / guess-01
      :ARG0 (c5-5 / i)
      :ARG1 (c5-1 / come-04
                  :ARG1 (c5-2 / wish-01
                              :ARG0 (c5-0 / festival
                                          :name (c5-6 / name
                                                      :op1 "Christmas")))
                  :ARG2 (c5-3 / true-01
                              :ARG1 c5-2)))

# ::snt i am on my hands and knees elise
# ::tokens ["i", "am", "on", "my", "hands", "and", "knees", "elise"]
# ::lemmas ["i", "be", "on", "my", "hand", "and", "knee", "elise"]
(c6-0 / say-01
      :ARG0 (c6-5 / i
                  :part (c6-2 / hand)
                  :part (c6-6 / knee))
      :ARG1 (c6-1 / and
                  :op1 c6-2
                  :op2 c6-6
                  :domain c6-5)
      :ARG2 (c6-3 / person
                  :name (c6-4 / name
                              :op1 "Elise")))

# ::snt you sayin somethin?
# ::tokens ["you", "sayin", "somethin", "?"]
# ::lemmas ["you", "sayin", "somethin", "?"]
(c7-0 / say-01
      :polarity (c7-2 / amr-unknown)
      :ARG0 (c7-3 / you)
      :ARG1 (c7-1 / something))

# ::snt I am going to kill myself because of you
# ::tokens ["I", "am", "going", "to", "kill", "myself", "because", "of", "you"]
# ::lemmas ["i", "be", "go", "to", "kill", "myself", "because", "of", "you"]
(c10-1 / kill-01
       :ARG0 (c10-0 / i
                    :ARG1-of c10-1)
       :ARG1-of (c10-3 / cause-01
                       :ARG0 (c10-2 / you)))

# ::snt Are you fucking kidding me
# ::tokens ["Are", "you", "fucking", "kidding", "me"]
# ::lemmas ["be", "you", "fucking", "kid", "i"]
(c11-3 / kid-01
       :polarity (c11-0 / amr-unknown)
       :ARG0 (c11-4 / you)
       :ARG2 (c11-2 / i)
       :mod (c11-1 / fucking
                   :mode expressive))

# ::snt Unacceptable
# ::tokens ["Unacceptable"]
# ::lemmas ["unacceptable"]
(c12-0 / possible-01
       :ARG1 (c12-1 / accept-01)
       :polarity -)

# ::snt IT WAS YOU
# ::tokens ["IT", "WAS", "YOU"]
# ::lemmas ["it", "be", "you"]
(c13-1 / you
       :domain (c13-0 / it))

# ::snt What if Im attracted to a cute white girl
# ::tokens ["What", "if", "I", "m", "attracted", "to", "a", "cute", "white", "girl"]
# ::lemmas ["what", "if", "i", "m", "attract", "to", "a", "cute", "white", "girl"]
(c14-3 / have-condition-91
       :ARG1 (c14-0 / amr-unknown)
       :ARG2 (c14-6 / attract-01
                    :ARG0 (c14-4 / girl
                                 :ARG1-of (c14-2 / white-02)
                                 :mod (c14-1 / cute))
                    :ARG1 (c14-5 / i)))

# ::snt TALK THAT TALK!
# ::tokens ["TALK", "THAT", "TALK", "!"]
# ::lemmas ["TALK", "THAT", "TALK", "!"]
(c15-1 / talk-01
       :ARG0 (c15-2 / you)
       :ARG1 (c15-0 / that)
       :mode imperative)

# ::snt yo what about this one
# ::tokens ["yo", "what", "about", "this", "one"]
# ::lemmas ["yo", "what", "about", "this", "one"]
(c16-2 / yo
       :topic (c16-0 / one
                     :mod (c16-1 / this))
       :mode expressive)

# ::snt WHAT
# ::tokens ["WHAT"]
# ::lemmas ["what"]
(c17-0 / amr-unknown)

# ::snt most ironic thing in
# ::tokens ["most", "ironic", "thing", "in"]
# ::lemmas ["most", "ironic", "thing", "in"]
(c18-3 / thing
       :mod (c18-1 / ironic
                   :ARG2-of (c18-2 / have-degree-91
                                   :ARG1 c18-3
                                   :ARG3 (c18-0 / most))))

# ::snt Vouch fr
# ::tokens ["Vouch", "fr"]
# ::lemmas ["vouch", "fr"]
(c19-1 / laugh-01
       :ARG0 (c19-0 / i)
       :manner (c19-2 / loud)
       :mode expressive)

# ::snt I'm a dog -_-
# ::tokens ["I", "'m", "a", "dog", "-_-"]
# ::lemmas ["i", "be", "a", "dog", "-_-"]
(c20-0 / dog
       :domain (c20-1 / i))

# ::snt fucking ironic
# ::tokens ["fucking", "ironic"]
# ::lemmas ["fuck", "ironic"]
(c21-0 / ironic
       :mod (c21-1 / fucking
                   :mode expressive))

# ::snt oh now this is ironic
# ::tokens ["oh", "now", "this", "is", "ironic"]
# ::lemmas ["oh", "now", "this", "be", "ironic"]
(c22-1 / ironic
       :domain (c22-2 / this)
       :time (c22-3 / now
                    :mod (c22-0 / oh)))

# ::snt LEAVE ME ALONE
# ::tokens ["LEAVE", "ME", "ALONE"]
# ::lemmas ["leave", "i", "alone"]
(c23-3 / carry-01
       :ARG0 (c23-2 / you)
       :ARG1 (c23-0 / i)
       :manner (c23-1 / alone)
       :mode imperative)

# ::snt ELISE?
# ::tokens ["ELISE", "?"]
# ::lemmas ["elise", "?"]
(c24-1 / escape-01
       :polarity (c24-0 / amr-unknown))

# ::snt LOL LOOK WHOS TALKIN
# ::tokens ["LOL", "LOOK", "WHOS", "TALKIN"]
# ::lemmas ["LOL", "LOOK", "WHOS", "TALKIN"]
(c25-2 / look-01
       :ARG0 (c25-5 / i)
       :ARG1 (c25-4 / person
                    :ARG0-of (c25-1 / talk-01))
       :ARG2-of (c25-3 / laugh-01
                       :ARG0 c25-5
                       :manner (c25-0 / loud)
                       :mode expressive)
       :mode expressive)

# ::snt amen
# ::tokens ["amen"]
# ::lemmas ["amen"]
(c26-0 / amen)

# ::snt HAHAHAHA
# ::tokens ["HAHAHAHA"]
# ::lemmas ["HAHAHAHA"]
(c27-0 / ha
       :mode expressive)

# ::snt IM BLOCKING YOU
# ::tokens ["IM", "BLOCKING", "YOU"]
# ::lemmas ["IM", "BLOCKING", "you"]
(c28-0 / shock-01
       :ARG0 (c28-1 / i)
       :ARG1 (c28-2 / you))

# ::snt LMFAO
# ::tokens ["LMFAO"]
# ::lemmas ["lmfao"]
(c29-3 / laugh-01
       :ARG0 (c29-4 / i
                    :part (c29-0 / ass
                                 :ARG0-of (c29-1 / fuck-01)
                                 :ARG1-of c29-3))
       :ARG3 (c29-2 / off))

# ::snt NOOOOOOO WAYYYY THATS COMING FROM YOU
# ::tokens ["NOOOOOOO", "WAYYYY", "THATS", "COMING", "FROM", "YOU"]
# ::lemmas ["NOOOOOOO", "WAYYYY", "THATS", "COMING", "FROM", "you"]
(c30-3 / come-01
       :ARG1 (c30-1 / that)
       :ARG3 (c30-2 / you)
       :mod (c30-0 / way
                   :mode expressive))

# ::snt he knows
# ::tokens ["he", "knows"]
# ::lemmas ["he", "know"]
(c32-1 / know-01
       :ARG0 (c32-0 / he))

# ::snt damn
# ::tokens ["damn"]
# ::lemmas ["damn"]
(c33-0 / damn-01)

# ::snt snap out of it coward
# ::tokens ["snap", "out", "of", "it", "coward"]
# ::lemmas ["snap", "out", "of", "it", "coward"]
(c34-0 / say-01
       :ARG0 (c34-5 / i)
       :ARG1 (c34-4 / snap-07
                    :ARG0 (c34-1 / coward)
                    :ARG1 (c34-3 / out-06
                                 :ARG1 c34-1
                                 :ARG2 (c34-2 / it))
                    :mode imperative)
       :ARG2 c34-1)

# ::snt FUCK OFF????
# ::tokens ["FUCK", "OFF", "?", "?", "?", "?"]
# ::lemmas ["fuck", "OFF", "?", "?", "?", "?"]
(c35-1 / fuck-off-02
       :polarity (c35-0 / amr-unknown))

# ::snt FUCK YOURSELF
# ::tokens ["FUCK", "YOURSELF"]
# ::lemmas ["fuck", "yourself"]
(c36-1 / fuck-01
       :ARG1 (c36-0 / you)
       :mode expressive)

# ::snt this one too
# ::tokens ["this", "one", "too"]
# ::lemmas ["this", "one", "too"]
(c37-1 / one
       :mod (c37-2 / this)
       :mod (c37-0 / too))

# ::snt this one too
# ::tokens ["this", "one", "too"]
# ::lemmas ["this", "one", "too"]
(c39-1 / one
       :mod (c39-2 / this)
       :mod (c39-0 / too))

# ::snt You have got to get locked up
# ::tokens ["You", "have", "got", "to", "get", "locked", "up"]
# ::lemmas ["you", "have", "get", "to", "get", "lock", "up"]
(c40-0 / obligate-01
       :ARG2 (c40-2 / lock-up-03
                    :ARG1 (c40-1 / you)))

# ::snt Ill rmemeber this
# ::tokens ["Ill", "rmemeber", "this"]
# ::lemmas ["Ill", "rmemeber", "this"]
(c41-2 / remember-01
       :ARG0 (c41-0 / i)
       :ARG1 (c41-1 / this))

# ::snt White women tho mmmmmmm
# ::tokens ["White", "women", "tho", "mmmmmmm"]
# ::lemmas ["white", "woman", "tho", "mmmmmmm"]
(c42-1 / have-concession-91
       :ARG1 (c42-0 / woman
                    :ARG1-of (c42-2 / white-02)))

# ::snt WHAT ???
# ::tokens ["WHAT", "?", "?", "?"]
# ::lemmas ["what", "?", "?", "?"]
(c43-0 / amr-unknown)

# ::snt ROSS
# ::tokens ["ROSS"]
# ::lemmas ["ROSS"]
(c44-0 / person
       :name (c44-1 / name
                    :op1 "ROSS"))

# ::snt HARIS DONT YOU DARE
# ::tokens ["HARIS", "DONT", "YOU", "DARE"]
# ::lemmas ["haris", "dont", "you", "dare"]
(c45-0 / dare-01
       :ARG0 (c45-2 / you)
       :ARG2 (c45-3 / religious-group
                    :name (c45-1 / name
                                 :op1 "Hindu"))
       :polarity -)

# ::snt wait a minute..
# ::tokens ["wait", "a", "minute", ".."]
# ::lemmas ["wait", "a", "minute", ".."]
(c46-0 / wait-01
       :ARG1 (c46-3 / you)
       :duration (c46-2 / temporal-quantity
                        :unit (c46-1 / minute)
                        :quant 1)
       :mode imperative)

# ::snt Tbf
# ::tokens ["Tbf"]
# ::lemmas ["tbf"]
(c47-0 / person
       :name (c47-1 / name
                    :op1 "Tbf"))

# ::snt unlike it.
# ::tokens ["unlike", "it", "."]
# ::lemmas ["unlike", "it", "."]
(c48-1 / resemble-01
       :ARG2 (c48-0 / it)
       :polarity -)

# ::snt can u introduce me
# ::tokens ["can", "u", "introduce", "me"]
# ::lemmas ["can", "u", "introduce", "i"]
(c49-3 / possible-01
       :ARG1 (c49-1 / introduce-01
                    :ARG0 (c49-4 / you)
                    :ARG1 (c49-2 / i))
       :polarity (c49-0 / amr-unknown))

# ::snt Yes.
# ::tokens ["Yes", "."]
# ::lemmas ["yes", "."]
(c50-0 / yes)
