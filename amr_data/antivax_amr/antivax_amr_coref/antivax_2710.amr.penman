# ::snt Dont take it, they say who take ir became a bitcoiner
# ::tokens ["Do", "nt", "take", "it", ",", "they", "say", "who", "take", "ir", "became", "a", "bitcoiner"]
# ::lemmas ["do", "not", "take", "it", ",", "they", "say", "who", "take", "ir", "become", "a", "bitcoiner"]
(c1-1 / and
      :op1 (c1-7 / take-01
                 :ARG0 (c1-12 / you)
                 :ARG1 (c1-10 / it)
                 :polarity -
                 :mode imperative)
      :op2 (c1-0 / say-01
                 :ARG0 (c1-3 / they)
                 :ARG1 (c1-9 / become-01
                             :ARG1 (c1-8 / person
                                         :ARG0-of (c1-2 / take-01
                                                        :ARG1 (c1-5 / thing
                                                                    :name (c1-11 / name
                                                                                 :op1 "IR"))))
                             :ARG2 (c1-6 / person
                                         :ARG0-of (c1-4 / hack-04)))))

# ::snt Excellent!
# ::tokens ["Excellent", "!"]
# ::lemmas ["excellent", "!"]
(c2-0 / excellent-02
      :mode expressive)

# ::snt do eeeeeet
# ::tokens ["do", "eeeeeet"]
# ::lemmas ["do", "eeeeeet"]
(c3-0 / do-02
      :ARG0 (c3-1 / i))

# ::snt Speaking on behalf of your many readers, good! We need you safe!
# ::tokens ["Speaking", "on", "behalf", "of", "your", "many", "readers", ",", "good", "!", "We", "need", "you", "safe", "!"]
# ::lemmas ["speak", "on", "behalf", "of", "your", "many", "reader", ",", "good", "!", "we", "need", "you", "safe", "!"]
(c4-7 / multi-sentence
      :snt1 (c4-0 / speak-01
                  :ARG0 (c4-6 / i)
                  :prep-on-behalf-of (c4-4 / person
                                           :ARG0-of (c4-3 / read-01
                                                          :ARG1 (c4-9 / you))
                                           :quant (c4-1 / many)))
      :snt2 (c4-8 / need-01
                  :ARG0 (c4-2 / we)
                  :ARG1 (c4-5 / safe-01
                              :ARG1 (c4-10 / you))))

# ::snt must find that and frame it
# ::tokens ["must", "find", "that", "and", "frame", "it"]
# ::lemmas ["must", "find", "that", "and", "frame", "it"]
(c5-3 / obligate-01
      :ARG2 (c5-0 / and
                  :op1 (c5-1 / find-01
                             :ARG1 (c5-4 / that))
                  :op2 (c5-2 / frame-01
                             :ARG1 c5-4)))

# ::snt i quite literally have paperwork certifying that i was born out of wedlocki consider it a professional qualification
# ::tokens ["i", "quite", "literally", "have", "paperwork", "certifying", "that", "i", "was", "born", "out", "of", "wedlocki", "consider", "it", "a", "professional", "qualification"]
# ::lemmas ["i", "quite", "literally", "have", "paperwork", "certify", "that", "i", "be", "bear", "out", "of", "wedlocki", "consider", "it", "a", "professional", "qualification"]
(c6-1 / and
      :op1 (c6-5 / have-03
                 :ARG0 (c6-11 / i)
                 :ARG1 (c6-8 / paperwork
                             :ARG0-of (c6-2 / certify-01
                                            :ARG1 (c6-10 / bear-02
                                                         :ARG1 c6-11
                                                         :ARG1-of (c6-0 / cause-01
                                                                        :ARG0 (c6-3 / wedlock)))))
                 :mod (c6-9 / literal
                            :degree (c6-4 / quite)))
      :op2 (c6-6 / consider-01
                 :ARG0 c6-11
                 :ARG1 (c6-12 / qualify-02
                              :ARG1 c6-11
                              :ARG2 (c6-7 / profession))))

# ::snt bastard
# ::tokens ["bastard"]
# ::lemmas ["bastard"]
(c7-0 / person
      :name (c7-1 / name
                  :op1 "bastard"))
