# ::snt Woohoo! Brilliant news.
# ::tokens ["Woohoo", "!", "Brilliant", "news", "."]
# ::lemmas ["Woohoo", "!", "brilliant", "news", "."]
(c1-1 / multi-sentence
      :snt1 (c1-0 / Woohoo
                  :mode expressive)
      :snt2 (c1-2 / news
                  :ARG1-of (c1-3 / brilliant-01)))

# ::snt Good on you Sophie
# ::tokens ["Good", "on", "you", "Sophie"]
# ::lemmas ["good", "on", "you", "Sophie"]
(c2-0 / say-01
      :ARG0 (c2-4 / i)
      :ARG1 (c2-3 / good-02
                  :ARG1 (c2-1 / on
                              :op1 (c2-2 / person
                                         :name (c2-5 / name
                                                     :op1 "Sophie")
                                         :ARG2-of c2-0))))

# ::snt Good news Sophie
# ::tokens ["Good", "news", "Sophie"]
# ::lemmas ["good", "news", "Sophie"]
(c3-0 / say-01
      :ARG1 (c3-4 / news
                  :ARG1-of (c3-2 / good-02))
      :ARG2 (c3-3 / person
                  :name (c3-1 / name
                              :op1 "Sophie")))

# ::snt Thanks
# ::tokens ["Thanks"]
# ::lemmas ["thank"]
(c4-1 / thank-01
      :ARG0 (c4-0 / i)
      :ARG1 (c4-2 / you))

# ::snt I know
# ::tokens ["I", "know"]
# ::lemmas ["i", "know"]
(c5-1 / know-01
      :ARG0 (c5-0 / i))

# ::snt Thats good! I know
# ::tokens ["That", "s", "good", "!", "I", "know"]
# ::lemmas ["that", "s", "good", "!", "i", "know"]
(c6-0 / good-02
      :ARG1 (c6-2 / that)
      :ARG1-of (c6-3 / know-01
                     :ARG0 (c6-1 / i)))

# ::snt Thats great good luck x
# ::tokens ["That", "s", "great", "good", "luck", "x"]
# ::lemmas ["that", "s", "great", "good", "luck", "x"]
(c7-3 / luck
      :domain (c7-1 / that)
      :ARG1-of (c7-0 / good-02)
      :mod (c7-2 / great))

# ::snt Happy Days. Have three days of paracetamol pre: jab. Besties daughter is in an army vaccination squad. They were told to do that. Should help. We didnt know till after my first jab. Had Astra Zeneca. Man down for two days.
# ::tokens ["Happy", "Days", ".", "Have", "three", "days", "of", "paracetamol", "pre", ":", "jab", ".", "Besties", "daughter", "is", "in", "an", "army", "vaccination", "squad", ".", "They", "were", "told", "to", "do", "that", ".", "Should", "help", ".", "We", "did", "nt", "know", "till", "after", "my", "first", "jab", ".", "Had", "Astra", "Zeneca", ".", "Man", "down", "for", "two", "days", "."]
# ::lemmas ["Happy", "Days", ".", "have", "three", "days", "of", "paracetamol", "pre", ":", "jab", ".", "Besties", "daughter", "be", "in", "an", "army", "vaccination", "squad", ".", "they", "be", "tell", "to", "do", "that", ".", "should", "help", ".", "we", "do", "not", "know", "till", "after", "my", "first", "jab", ".", "have", "Astra", "Zeneca", ".", "man", "down", "for", "two", "days", "."]
(c8-16 / multi-sentence
       :snt1 (c8-0 / day
                   :ARG1-of (c8-30 / happy-02))
       :snt2 (c8-4 / have-03
                   :ARG1 (c8-35 / paracetamol
                                :duration (c8-13 / temporal-quantity
                                                 :unit (c8-26 / day)
                                                 :quant 3)
                                :time (c8-33 / before
                                             :op1 (c8-34 / jab))))
       :snt3 (c8-6 / have-org-role-91
                   :ARG0 (c8-32 / person
                                :ARG0-of (c8-11 / have-rel-role-91
                                                :ARG1 (c8-24 / person
                                                             :name (c8-17 / name
                                                                          :op1 "Besties"))
                                                :ARG2 (c8-22 / daughter)))
                   :ARG1 (c8-20 / squad
                                :ARG0-of (c8-10 / vaccinate-01
                                                :ARG1 (c8-27 / army))))
       :snt4 (c8-8 / tell-01
                   :ARG1 (c8-12 / do-02
                                :ARG0 (c8-18 / they)
                                :ARG1 (c8-25 / that))
                   :ARG2 c8-18)
       :snt5 (c8-14 / recommend-01
                    :ARG1 (c8-9 / help-01))
       :snt6 (c8-36 / know-01
                    :ARG0 (c8-7 / we)
                    :time (c8-31 / until
                                 :op1 (c8-19 / after
                                             :op1 (c8-1 / jab
                                                        :ord (c8-15 / ordinal-entity
                                                                    :value 1))))
                    :polarity -)
       :snt7 (c8-5 / have-03
                   :ARG1 (c8-23 / product
                                :name (c8-3 / name
                                            :op1 "Astra"
                                            :op2 "Zeneca")))
       :snt7 (c8-21 / down-03
                    :ARG1 (c8-29 / man)
                    :duration (c8-28 / temporal-quantity
                                     :unit (c8-2 / day)
                                     :quant 2)))

# ::snt It is xx
# ::tokens ["It", "is", "xx"]
# ::lemmas ["it", "be", "xx"]
(c9-0 / it
      :mod (c9-1 / emoticon
                 :value "xx"))

# ::snt Brilliant Sophie xx
# ::tokens ["Brilliant", "Sophie", "xx"]
# ::lemmas ["Brilliant", "Sophie", "xx"]
(c10-1 / person
       :name (c10-2 / name
                    :op1 "Sophie"
                    :op2 "xx")
       :mod (c10-0 / brilliant))

# ::snt Yeah!
# ::tokens ["Yeah", "!"]
# ::lemmas ["yeah", "!"]
(c11-0 / yeah
       :mode expressive)

# ::snt Thats good
# ::tokens ["That", "s", "good"]
# ::lemmas ["that", "s", "good"]
(c12-0 / good-02
       :ARG1 (c12-1 / that))

# ::snt Thanks. Thats good
# ::tokens ["Thanks", ".", "That", "s", "good"]
# ::lemmas ["thank", ".", "that", "s", "good"]
(c13-4 / multi-sentence
       :snt1 (c13-1 / thank-01
                    :ARG0 (c13-3 / i)
                    :ARG1 (c13-5 / you))
       :snt2 (c13-2 / good-02
                    :ARG1 (c13-0 / that)))

# ::snt So happy
# ::tokens ["So", "happy"]
# ::lemmas ["so", "happy"]
(c14-1 / happy-01
       :degree (c14-0 / so))

# ::snt I know
# ::tokens ["I", "know"]
# ::lemmas ["i", "know"]
(c15-1 / know-01
       :ARG0 (c15-0 / i))

# ::snt I know
# ::tokens ["I", "know"]
# ::lemmas ["i", "know"]
(c16-1 / know-01
       :ARG0 (c16-0 / i))

# ::snt Thats good. Thanks
# ::tokens ["That", "s", "good", ".", "Thanks"]
# ::lemmas ["that", "s", "good", ".", "thank"]
(c17-4 / multi-sentence
       :snt1 (c17-2 / good-02
                    :ARG1 (c17-1 / that))
       :snt2 (c17-0 / thank-01
                    :ARG0 (c17-3 / i)
                    :ARG1 (c17-5 / you)))

# ::snt Great news Sophie, I literally just had my nd today. Good luck.
# ::tokens ["Great", "news", "Sophie", ",", "I", "literally", "just", "had", "my", "nd", "today", ".", "Good", "luck", "."]
# ::lemmas ["great", "news", "Sophie", ",", "i", "literally", "just", "have", "my", "nd", "today", ".", "good", "luck", "."]
(c18-11 / multi-sentence
        :snt1 (c18-0 / say-01
                     :ARG1 (c18-12 / news
                                   :mod (c18-8 / great))
                     :ARG2 (c18-10 / person
                                   :name (c18-5 / name
                                                :op1 "Sophie")))
        :snt2 (c18-2 / have-03
                     :ARG0 (c18-1 / i)
                     :ARG1 (c18-3 / nd
                                  :poss c18-1)
                     :time (c18-4 / today)
                     :mod (c18-6 / literal)
                     :mod (c18-9 / just))
        :snt3 (c18-7 / luck
                     :ARG1-of (c18-13 / good-02)))

# ::snt Awesome
# ::tokens ["Awesome"]
# ::lemmas ["Awesome"]
(c19-0 / awe-01)

# ::snt Thats great
# ::tokens ["That", "s", "great"]
# ::lemmas ["that", "s", "great"]
(c20-0 / great
       :domain (c20-1 / that))

# ::snt Thats great Sophie
# ::tokens ["That", "s", "great", "Sophie"]
# ::lemmas ["that", "s", "great", "Sophie"]
(c21-0 / say-01
       :ARG1 (c21-2 / great
                    :domain (c21-1 / that))
       :ARG2 (c21-3 / person
                    :name (c21-4 / name
                                 :op1 "Sophie")))

# ::snt Brilliant
# ::tokens ["Brilliant"]
# ::lemmas ["brilliant"]
(c22-0 / brilliant-01)

# ::snt Great news. I've got my nd on Saturday.
# ::tokens ["Great", "news", ".", "I", "'ve", "got", "my", "nd", "on", "Saturday", "."]
# ::lemmas ["great", "news", ".", "i", "'ve", "get", "my", "nd", "on", "Saturday", "."]
(c23-8 / multi-sentence
       :snt1 (c23-9 / news
                    :mod (c23-5 / great))
       :snt2 (c23-2 / have-03
                    :ARG0 (c23-7 / i)
                    :ARG1 (c23-4 / person
                                 :ARG0-of (c23-6 / have-rel-role-91
                                                 :ARG1 c23-7
                                                 :ARG2 (c23-3 / nd)))
                    :time (c23-0 / date-entity
                                 :weekday (c23-1 / saturday))))

# ::snt Literally sitting in my car for mins before driving home from my second
# ::tokens ["Literally", "sitting", "in", "my", "car", "for", "mins", "before", "driving", "home", "from", "my", "second"]
# ::lemmas ["literally", "sit", "in", "my", "car", "for", "min", "before", "drive", "home", "from", "my", "second"]
(c24-0 / sit-01
       :ARG1 (c24-9 / i)
       :ARG2 (c24-2 / car
                    :poss c24-9)
       :duration (c24-6 / temporal-quantity
                        :unit (c24-10 / minute)
                        :quant 1)
       :mod (c24-7 / literal)
       :time (c24-8 / before
                    :op1 (c24-1 / drive-01
                                :ARG0 c24-9
                                :ARG1 (c24-4 / home)
                                :source (c24-3 / thing
                                               :ord (c24-5 / ordinal-entity
                                                           :value 2)
                                               :poss c24-9))))

# ::snt Was so excited when I got mine
# ::tokens ["Was", "so", "excited", "when", "I", "got", "mine"]
# ::lemmas ["be", "so", "excited", "when", "i", "get", "mine"]
(c25-4 / excite-01
       :ARG0 (c25-2 / get-01
                    :ARG0 (c25-3 / i)
                    :ARG1 (c25-1 / thing
                                 :poss c25-3))
       :ARG1 c25-3
       :degree (c25-0 / so))

# ::snt I know
# ::tokens ["I", "know"]
# ::lemmas ["i", "know"]
(c26-1 / know-01
       :ARG0 (c26-0 / i))

# ::snt Great news!
# ::tokens ["Great", "news", "!"]
# ::lemmas ["great", "news", "!"]
(c27-1 / news
       :mod (c27-0 / great))

# ::snt So happy
# ::tokens ["So", "happy"]
# ::lemmas ["so", "happy"]
(c28-1 / happy-01
       :degree (c28-0 / so))

# ::snt Aww thats good. I bet you were
# ::tokens ["Aww", "that", "s", "good", ".", "I", "bet", "you", "were"]
# ::lemmas ["Aww", "that", "s", "good", ".", "i", "bet", "you", "be"]
(c29-5 / multi-sentence
       :snt1 (c29-3 / good-02
                    :ARG1 (c29-1 / that)
                    :mod (c29-0 / aw
                                :mode expressive))
       :snt2 (c29-6 / bet-01
                    :ARG0 (c29-4 / i)
                    :ARG2 (c29-7 / good-02
                                 :ARG1 (c29-2 / you))))

# ::snt Thats good. Thanks
# ::tokens ["That", "s", "good", ".", "Thanks"]
# ::lemmas ["that", "s", "good", ".", "thank"]
(c30-4 / multi-sentence
       :snt1 (c30-2 / good-02
                    :ARG1 (c30-1 / that))
       :snt2 (c30-0 / thank-01
                    :ARG0 (c30-3 / i)
                    :ARG1 (c30-5 / you)))

# ::snt Already had both of mine. Good luck
# ::tokens ["Already", "had", "both", "of", "mine", ".", "Good", "luck"]
# ::lemmas ["already", "have", "both", "of", "mine", ".", "good", "luck"]
(c31-7 / multi-sentence
       :snt1 (c31-1 / have-03
                    :ARG1 (c31-2 / thing
                                 :mod (c31-5 / both)
                                 :poss (c31-6 / i))
                    :time (c31-0 / already))
       :snt2 (c31-3 / luck
                    :ARG1-of (c31-4 / good-02)))

# ::snt Aww thats good
# ::tokens ["Aww", "that", "s", "good"]
# ::lemmas ["Aww", "that", "s", "good"]
(c32-0 / good-02
       :ARG1 (c32-2 / that)
       :mod (c32-1 / aw
                   :mode expressive))

# ::snt I've had of those texts, plus letters all of which have been deleted or chucked in the fire
# ::tokens ["I", "'ve", "had", "of", "those", "texts", ",", "plus", "letters", "all", "of", "which", "have", "been", "deleted", "or", "chucked", "in", "the", "fire"]
# ::lemmas ["i", "'ve", "have", "of", "those", "text", ",", "plus", "letter", "all", "of", "which", "have", "be", "delete", "or", "chuck", "in", "the", "fire"]
(c33-6 / have-03
       :ARG0 (c33-9 / i)
       :ARG1 (c33-2 / and
                    :op1 (c33-7 / text-01
                                :mod (c33-5 / that))
                    :op2 (c33-8 / letter
                                :mod (c33-10 / all)
                                :ARG1-of (c33-0 / delete-01
                                                :ARG1-of (c33-4 / cause-01
                                                                :ARG0 (c33-3 / fire)))
                                :ARG1-of (c33-1 / chuck-01
                                                :ARG2 c33-3))))

# ::snt Good for you, Sophie. Ive had both jabs already and its not as bad as everyone says. Keep smiling. It bodes well with you.
# ::tokens ["Good", "for", "you", ",", "Sophie", ".", "I", "ve", "had", "both", "jabs", "already", "and", "its", "not", "as", "bad", "as", "everyone", "says", ".", "Keep", "smiling", ".", "It", "bodes", "well", "with", "you", "."]
# ::lemmas ["good", "for", "you", ",", "Sophie", ".", "i", "ve", "have", "both", "jab", "already", "and", "its", "not", "as", "bad", "as", "everyone", "say", ".", "keep", "smile", ".", "it", "bode", "well", "with", "you", "."]
(c35-4 / multi-sentence
       :snt1 (c35-8 / say-01
                    :ARG0 (c35-1 / i)
                    :ARG1 (c35-3 / good-04
                                 :ARG2 (c35-13 / you))
                    :ARG2 (c35-22 / person
                                  :name (c35-5 / name
                                               :op1 "Sophie")))
       :snt2 (c35-16 / and
                     :op1 (c35-17 / have-03
                                  :ARG0 (c35-10 / i)
                                  :ARG1 (c35-19 / jab
                                                :mod (c35-20 / both))
                                  :time (c35-6 / already))
                     :op2 (c35-15 / bad-07
                                  :ARG1 c35-19
                                  :ARG2-of (c35-0 / have-degree-91
                                                  :ARG1 c35-19
                                                  :ARG3 (c35-7 / equal)
                                                  :ARG4 (c35-21 / say-01
                                                                :ARG0 (c35-18 / everyone)))
                                  :polarity -))
       :snt3 (c35-23 / keep-02
                     :ARG0 (c35-14 / you)
                     :ARG1 (c35-11 / smile-01
                                   :ARG0 c35-14)
                     :mode imperative)
       :snt4 (c35-9 / bodes-01
                    :ARG1 (c35-12 / it)
                    :ARG3 (c35-2 / well-09)
                    :beneficiary c35-14))

# ::snt You will love it, Ive had two and might go back for more!
# ::tokens ["You", "will", "love", "it", ",", "I", "ve", "had", "two", "and", "might", "go", "back", "for", "more", "!"]
# ::lemmas ["you", "will", "love", "it", ",", "i", "ve", "have", "two", "and", "might", "go", "back", "for", "more", "!"]
(c36-10 / multi-sentence
        :snt1 (c36-6 / love-01
                     :ARG0 (c36-11 / you)
                     :ARG1 (c36-9 / it))
        :snt2 (c36-0 / and
                     :op1 (c36-3 / have-03
                                 :ARG0 (c36-4 / i)
                                 :ARG1 (c36-5 / thing
                                              :quant 2))
                     :op2 (c36-7 / possible-01
                                 :ARG1 (c36-8 / go-back-19
                                              :ARG1 c36-4
                                              :ARG2 c36-5
                                              :purpose (c36-2 / thing
                                                              :quant (c36-1 / more))))))
