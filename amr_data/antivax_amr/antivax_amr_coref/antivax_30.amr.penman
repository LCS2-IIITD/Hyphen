# ::snt NOOO
# ::tokens ["NOOO"]
# ::lemmas ["NOOO"]
(c1-0 / no)

# ::snt YES U ARE
# ::tokens ["YES", "U", "ARE"]
# ::lemmas ["yes", "u", "be"]
(c2-1 / yes
      :domain (c2-0 / we))

# ::snt HUSH IM NOT
# ::tokens ["HUSH", "IM", "NOT"]
# ::lemmas ["hush", "IM", "not"]
(c3-0 / and
      :op1 (c3-1 / hug-01
                 :ARG0 (c3-4 / you)
                 :mode imperative)
      :op2 (c3-2 / have-polarity-91
                 :ARG1 (c3-3 / i)
                 :ARG2 -))

# ::snt wait i stop being so cute
# ::tokens ["wait", "i", "stop", "being", "so", "cute"]
# ::lemmas ["wait", "i", "stop", "be", "so", "cute"]
(c4-2 / wait-01
      :ARG1 (c4-4 / i)
      :ARG2 (c4-0 / stop-01
                  :ARG0 c4-4
                  :ARG1 (c4-1 / cute
                              :domain c4-4
                              :degree (c4-3 / so))))

# ::snt okay i will wait (
# ::tokens ["okay", "i", "will", "wait", "("]
# ::lemmas ["okay", "i", "will", "wait", "("]
(c5-0 / wait-01
      :ARG1 (c5-1 / i)
      :ARG1-of (c5-2 / okay-04))

# ::snt :BFJDBJF
# ::tokens [":", "BFJDBJF"]
# ::lemmas [":", "BFJDBJF"]
(c6-0 / string-entity
      :value ":BFJDBJF")

# ::snt get in line
# ::tokens ["get", "in", "line"]
# ::lemmas ["get", "in", "line"]
(c7-1 / line-up-02
      :ARG1 (c7-0 / you)
      :mode imperative)

# ::snt (SLASH J SLASH J /J /J)
# ::tokens ["(", "SLASH", "J", "SLASH", "J", "/J", "/J", ")"]
# ::lemmas ["(", "slash", "J", "slash", "J", "/j", "/j", ")"]
(c8-1 / and
      :op1 (c8-0 / slap-01
                 :ARG0 (c8-5 / you
                             :ARG1-of c8-0)
                 :mode imperative)
      :op2 (c8-2 / slap-01
                 :ARG0 c8-5
                 :ARG1 (c8-3 / person
                             :name (c8-4 / name
                                         :op1 "J"))
                 :mode imperative))

# ::snt i worry about u
# ::tokens ["i", "worry", "about", "u"]
# ::lemmas ["i", "worry", "about", "u"]
(c9-0 / worry-01
      :ARG0 (c9-1 / i)
      :ARG1 (c9-2 / you))

# ::snt it's me i ate sand as a kid. Crun ch
# ::tokens ["it", "'s", "me", "i", "ate", "sand", "as", "a", "kid", ".", "Crun", "ch"]
# ::lemmas ["it", "be", "i", "i", "eat", "sand", "as", "a", "kid", ".", "crun", "ch"]
(c10-3 / multi-sentence
       :snt1 (c10-5 / eat-01
                    :ARG0 (c10-2 / i)
                    :ARG1 (c10-0 / sand)
                    :time (c10-4 / kid
                                 :domain c10-2))
       :snt2 (c10-1 / crun-ch))
