# ::snt What a treat! L L indeed! Good luck
# ::tokens ["What", "a", "treat", "!", "L", "L", "indeed", "!", "Good", "luck"]
# ::lemmas ["what", "a", "treat", "!", "L", "L", "indeed", "!", "good", "luck"]
(c1-5 / multi-sentence
      :snt1 (c1-1 / treat-01
                  :degree (c1-0 / so)
                  :mode expressive)
      :snt2 (c1-2 / luck
                  :ARG1-of (c1-3 / good-02)
                  :domain (c1-4 / person
                                :name (c1-6 / name
                                            :op1 "L"
                                            :op2 "L"))))

# ::snt I love this bestiehood
# ::tokens ["I", "love", "this", "bestiehood"]
# ::lemmas ["i", "love", "this", "bestiehood"]
(c2-3 / love-01
      :ARG0 (c2-1 / i)
      :ARG1 (c2-0 / bestiehood
                  :mod (c2-2 / this)))

# ::snt I now pronounce you besties
# ::tokens ["I", "now", "pronounce", "you", "besties"]
# ::lemmas ["i", "now", "pronounce", "you", "bestie"]
(c3-2 / pronounce-01
      :ARG0 (c3-0 / i)
      :ARG1 (c3-4 / you)
      :ARG2 (c3-1 / bestie)
      :time (c3-3 / now))

# ::snt so true bestie
# ::tokens ["so", "true", "bestie"]
# ::lemmas ["so", "true", "bestie"]
(c4-0 / say-01
      :ARG1 (c4-1 / true-01
                  :degree (c4-2 / so))
      :ARG2 (c4-3 / person
                  :name (c4-4 / name
                              :op1 "Bestie")))

# ::snt I got my second dose and I felt completely fine right after. I had a little fever the next day slept for a little and was all good!
# ::tokens ["I", "got", "my", "second", "dose", "and", "I", "felt", "completely", "fine", "right", "after", ".", "I", "had", "a", "little", "fever", "the", "next", "day", "slept", "for", "a", "little", "and", "was", "all", "good", "!"]
# ::lemmas ["i", "get", "my", "second", "dose", "and", "i", "feel", "completely", "fine", "right", "after", ".", "i", "have", "a", "little", "fever", "the", "next", "day", "sleep", "for", "a", "little", "and", "be", "all", "good", "!"]
(c5-8 / multi-sentence
      :snt1 (c5-17 / and
                   :op1 (c5-7 / get-01
                              :ARG0 (c5-3 / i)
                              :ARG1 (c5-0 / dose
                                          :ord (c5-5 / ordinal-entity
                                                     :value 2)
                                          :poss c5-3))
                   :op2 (c5-18 / feel-01
                               :ARG0 c5-3
                               :ARG1 (c5-13 / fine-04
                                            :ARG1 c5-3
                                            :ARG1-of (c5-4 / complete-02))
                               :time (c5-10 / after
                                            :mod (c5-6 / right))))
      :snt2 (c5-1 / and
                  :op1 (c5-19 / have-03
                              :ARG0 (c5-12 / i)
                              :ARG1 (c5-14 / fever
                                           :quant (c5-20 / little))
                              :time (c5-15 / day
                                           :mod (c5-9 / next)))
                  :op2 (c5-11 / sleep-01
                              :ARG0 c5-12
                              :duration (c5-2 / little))
                  :op3 (c5-16 / good-02
                              :ARG1 c5-12
                              :degree (c5-21 / all))))

# ::snt I barely felt anything after my second Pfizer! Will be crossing my fingers that the same is true for you. All hope is not lost
# ::tokens ["I", "barely", "felt", "anything", "after", "my", "second", "Pfizer", "!", "Will", "be", "crossing", "my", "fingers", "that", "the", "same", "is", "true", "for", "you", ".", "All", "hope", "is", "not", "lost"]
# ::lemmas ["i", "barely", "feel", "anything", "after", "my", "second", "Pfizer", "!", "will", "be", "cross", "my", "finger", "that", "the", "same", "be", "true", "for", "you", ".", "all", "hope", "be", "not", "lose"]
(c6-14 / multi-sentence
       :snt1 (c6-4 / feel-01
                   :ARG0 (c6-13 / i)
                   :ARG1 (c6-3 / anything)
                   :degree (c6-12 / barely)
                   :time (c6-17 / after
                                :op1 (c6-5 / company
                                           :name (c6-15 / name
                                                        :op1 "Pfizer")
                                           :ord (c6-9 / ordinal-entity
                                                      :value 2)
                                           :poss c6-13)))
       :snt2 (c6-0 / cross-01
                   :ARG0 (c6-6 / i
                               :part (c6-8 / finger
                                           :ARG1-of c6-0))
                   :ARG2 (c6-10 / true-01
                                :ARG1 (c6-1 / same-01)
                                :ARG2 (c6-16 / you)))
       :snt3 (c6-11 / lose-02
                    :ARG1 (c6-7 / hope-01
                                :mod (c6-2 / all))
                    :polarity -))

# ::snt Whew you can do it!!!
# ::tokens ["Whew", "you", "can", "do", "it", "!", "!", "!"]
# ::lemmas ["whew", "you", "can", "do", "it", "!", "!", "!"]
(c7-3 / possible-01
      :ARG1 (c7-0 / do-02
                  :ARG0 (c7-4 / you)
                  :ARG1 (c7-1 / it))
      :mod (c7-2 / whew
                 :mode expressive))

# ::snt Im getting my second dose of moderna a couple of days before I defend
# ::tokens ["I", "m", "getting", "my", "second", "dose", "of", "moderna", "a", "couple", "of", "days", "before", "I", "defend"]
# ::lemmas ["i", "m", "get", "my", "second", "dose", "of", "moderna", "a", "couple", "of", "days", "before", "i", "defend"]
(c8-8 / get-01
      :ARG0 (c8-9 / i)
      :ARG1 (c8-0 / dose-01
                  :ARG1 c8-9
                  :ARG2 (c8-7 / product
                              :name (c8-10 / name
                                           :op1 "Moderna"))
                  :ord (c8-5 / ordinal-entity
                             :value 2))
      :time (c8-4 / before
                  :op1 (c8-3 / defend-01
                             :ARG0 c8-9)
                  :quant (c8-1 / couple
                               :op1 (c8-6 / temporal-quantity
                                          :unit (c8-2 / day)
                                          :quant 1))))
