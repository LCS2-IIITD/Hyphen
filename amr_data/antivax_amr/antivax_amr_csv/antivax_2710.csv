comment,amr
"Dont take it, they say who take ir became a bitcoiner","# ::snt Dont take it, they say who take ir became a bitcoiner
(a / and
      :op1 (t / take-01
            :polarity -
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (ii / it))
      :op2 (s / say-01
            :ARG0 (t2 / they)
            :ARG1 (b / become-01
                  :ARG1 (p / person
                        :ARG0-of (t3 / take-01
                              :ARG1 (t4 / thing
                                    :name (n / name
                                          :op1 ""IR""))))
                  :ARG2 (p2 / person
                        :ARG0-of (h / hack-04)))))"
Excellent!,"# ::snt Excellent!
(e / excellent-02
      :mode expressive)"
do eeeeeet,"# ::snt do eeeeeet
(d / do-02
      :ARG0 (ii / i))"
"Speaking on behalf of your many readers, good! We need you safe!","# ::snt Speaking on behalf of your many readers, good! We need you safe!
(m / multi-sentence
      :snt1 (s / speak-01
            :ARG0 (ii / i)
            :prep-on-behalf-of (p / person
                  :ARG0-of (r / read-01
                        :ARG1 (y / you))
                  :quant (m2 / many)))
      :snt2 (n / need-01
            :ARG0 (w / we)
            :ARG1 (s2 / safe-01
                  :ARG1 (y2 / you))))"
must find that and frame it,"# ::snt must find that and frame it
(o / obligate-01
      :ARG2 (a / and
            :op1 (f / find-01
                  :ARG1 (t / that))
            :op2 (f2 / frame-01
                  :ARG1 t)))"
i quite literally have paperwork certifying that i was born out of wedlocki consider it a professional qualification,"# ::snt i quite literally have paperwork certifying that i was born out of wedlocki consider it a professional qualification
(a / and
      :op1 (h / have-03
            :ARG0 (ii / i)
            :ARG1 (p / paperwork
                  :ARG0-of (c / certify-01
                        :ARG1 (b / bear-02
                              :ARG1 ii
                              :ARG1-of (c2 / cause-01
                                    :ARG0 (w / wedlock)))))
            :mod (l / literal
                  :degree (q / quite)))
      :op2 (c3 / consider-01
            :ARG0 ii
            :ARG1 (q2 / qualify-02
                  :ARG1 ii
                  :ARG2 (p2 / profession))))"
bastard,"# ::snt bastard
(p / person
      :name (n / name
            :op1 ""bastard""))"
