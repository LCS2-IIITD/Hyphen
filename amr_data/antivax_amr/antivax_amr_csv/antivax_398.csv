comment,amr
That's what's up!,"# ::snt That's what's up!
(e / event
      :mod (t / that))"
Purrr,"# ::snt Purrr
(p / purr-01)"
I actually havent felt any side effects from either other than a swore arm. And that happen with all shots I get,"# ::snt I actually havent felt any side effects from either other than a swore arm. And that happen with all shots I get
(m / multi-sentence
      :snt1 (f / feel-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (e / effect-03
                  :ARG0 (e2 / either)
                  :mod (s / side)
                  :ARG2-of (e3 / except-01
                        :ARG1 (a / arm
                              :ARG1-of (s2 / swear-01))))
            :ARG1-of (a2 / actual-02))
      :snt2 (a3 / and
            :op2 (t / that
                  :condition (s3 / shoot-02
                        :ARG1-of (g / get-01
                              :ARG0 (ii2 / i))
                        :mod (a4 / all)))))"
Congratulations! Now get ready for the side effects. Lay down and drink plenty of water,"# ::snt Congratulations! Now get ready for the side effects. Lay down and drink plenty of water
(m / multi-sentence
      :snt1 (c / congratulate-01
            :mode expressive)
      :snt2 (r / ready-01
            :ARG1 (y / you)
            :ARG2 (e / effect-03
                  :mod (s / side))
            :time (n / now))
      :snt3 (a / and
            :op1 (l / lay-down-02
                  :mode imperative
                  :ARG0 y)
            :op2 (d / drink-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (w / water
                        :quant (p / plenty)))))"
congrats man! i get my second dose this friday!,"# ::snt congrats man! i get my second dose this friday!
(m / multi-sentence
      :snt1 (c / congratulate-01
            :ARG0 (ii / i)
            :ARG1 (m2 / man))
      :snt2 (g / get-01
            :ARG0 (ii2 / i)
            :ARG1 (d / dose
                  :ord (o / ordinal-entity
                        :value 2)
                  :poss ii2)
            :time (d2 / date-entity
                  :weekday (f / friday)
                  :mod (t / this))))"
