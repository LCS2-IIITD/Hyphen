comment,amr
Got my nd AZ today too. Cheers from Canada.,"# ::snt Got my nd AZ today too. Cheers from Canada.
(m / multi-sentence
      :snt1 (g / get-01
            :ARG0 (ii / i)
            :ARG1 (l / location
                  :name (n / name
                        :op1 ""AZ"")
                  :poss ii)
            :time (t / today)
            :mod (t2 / too))
      :snt2 (c / cheer-02
            :ARG0 (ii2 / i)
            :source (c2 / country
                  :name (n2 / name
                        :op1 ""Canada""))))"
You have both of my experimental third phase trials inoculation FDA Emergency approved!,"# ::snt You have both of my experimental third phase trials inoculation FDA Emergency approved!
(h / have-03
      :ARG0 (y / you)
      :ARG1 (a / approve-01
            :ARG0 (g / government-organization
                  :name (n / name
                        :op1 ""FDA""))
            :ARG1 (ii / inoculate-01
                  :ARG2 (p / phase
                        :ord (o / ordinal-entity
                              :value 3))
                  :mod (e / experiment-01
                        :ARG0 (ii2 / i))
                  :mod (b / both))
            :mod (e2 / emergency)))"
Great argument to convince your friends to get the vaccine,"# ::snt Great argument to convince your friends to get the vaccine
(a / argue-01
      :ARG1 (c / convince-01
            :ARG0 (y / you)
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 y
                        :ARG2 (f / friend)))
            :ARG2 (g / get-01
                  :ARG0 p
                  :ARG1 (v / vaccine)))
      :mod (g2 / great))"
,"# ::snt 
(a / amr-empty)"
:Im convinced lots of water before and after is the key to flush it through,"# ::snt :Im convinced lots of water before and after is the key to flush it through
(c / convince-01
      :ARG1 (ii / i)
      :ARG2 (k / key-02
            :ARG1 (w / water
                  :quant (l / lot)
                  :time (a / and
                        :op1 (b / before)
                        :op2 (a2 / after)))
            :ARG2 (f / flush-01
                  :ARG1 (ii2 / it)
                  :path (t / through))))"
