comment,amr
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
"Well it is a capitalist system ...... Make money by all means, lose if you have to but always cheat - Dr. Barbara Sizemore","# ::snt Well it is a capitalist system ...... Make money by all means, lose if you have to but always cheat - Dr. Barbara Sizemore
(m / multi-sentence
      :snt1 (s / system
            :mod (c / capitalist)
            :domain (ii / it)
            :mod (w / well))
      :snt2 (c2 / contrast-01
            :ARG1 (m2 / make-05
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (m3 / money)
                  :mod (b / by-all-means))
            :ARG2 (l / lose-02
                  :mode imperative
                  :ARG0 y
                  :condition (o / obligate-01
                        :ARG1 y
                        :ARG2 m2)))
      :ARG2 (c3 / cheat-02
            :mode imperative
            :ARG0 y
            :time (a / always))
      :ARG1-of (s2 / say-01
            :ARG0 (d / doctor
                  :name (n / name
                        :op1 ""Barbara""
                        :op2 ""Sizemore""))))"
"They were just happy with the $40 they got paid ,no knowledge of what it entailed","# ::snt They were just happy with the $40 they got paid ,no knowledge of what it entailed
(a / and
      :op1 (h / happy-01
            :ARG0 (m / monetary-quantity
                  :quant 40
                  :unit (d / dollar)
                  :ARG1-of (p / pay-01
                        :ARG2 (t / they)))
            :ARG1 t
            :mod (j / just))
      :op2 (k / know-01
            :polarity -
            :ARG0 t
            :ARG1 (t2 / thing
                  :ARG2-of (e / entail-01
                        :ARG1 m))))"
So what does this their cyril think bill gates thinks of him???,"# ::snt So what does this their cyril think bill gates thinks of him???
(t / think-01
      :ARG0 (c / cyril
            :poss (t2 / they))
      :ARG1 (a / amr-unknown)
      :ARG2 (t3 / think-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 ""Bill""
                        :op2 ""Gates""))
            :ARG1 (t4 / this)
            :ARG2 (h / he)))"
Even Bill Gates' father was also Euginist and those who don't get this Euginist are people who believe in race supremacy.,"# ::snt Even Bill Gates' father was also Euginist and those who don't get this Euginist are people who believe in race supremacy.
(a / and
      :op1 (e / Euginist
            :domain (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (p2 / person
                              :name (n / name
                                    :op1 ""Bill""
                                    :op2 ""Gates""))
                        :ARG2 (f / father))
                  :mod (e2 / even))
            :mod (a2 / also))
      :op2 (b / believe-01
            :ARG0 (p3 / person
                  :ARG0-of (g / get-01
                        :polarity -
                        :ARG1 e))
            :ARG1 (s / supremacy
                  :mod (r / race))))"
And humans are now consenting to that shit,"# ::snt And humans are now consenting to that shit
(c / consent-01
      :ARG0 (h / human)
      :ARG1 (s / shit
            :mod (t / that))
      :time (n / now))"
They first tested this sh on rats &amp; monkeys &amp; it failed dismally.,"# ::snt They first tested this sh on rats &amp; monkeys &amp; it failed dismally.
(a / and
      :op1 (t / test-01
            :ARG0 (t2 / they)
            :ARG1 (s / shit
                  :mod (t3 / this))
            :prep-on (a2 / and
                  :op1 (r / rat)
                  :op2 (a3 / amp)
                  :op3 (m / monkey)
                  :op4 a3))
      :ord (o / ordinal-entity
            :value 1)
      :op2 (f / fail-01
            :ARG1 s
            :manner (d / dismally)))"
Wasn't aware that they were already tests being conducted,"# ::snt Wasn't aware that they were already tests being conducted
(r / realize-01
      :polarity -
      :ARG1 (c / conduct-01
            :ARG1 (t / test-01
                  :ARG1 (t2 / they))
            :time (a / already)))"
"Profits before safety in this vaccine, just like the others.","# ::snt Profits before safety in this vaccine, just like the others.
(p / profit-01
      :ARG1 (s / safe-01
            :ARG2 (v / vaccine
                  :mod (t / this)))
      :ARG1-of (r / resemble-01
            :ARG1 (v2 / vaccine
                  :mod (o / other)))
      :ARG2-of r
      :mod (j / just))"
