comment,amr
Mine too!,"# ::snt Mine too!
(t / thing
      :poss (ii / i)
      :mod (t2 / too))"
legit everything! It is not-so-secretly one of my favorite slices of NYC pizza,"# ::snt legit everything! It is not-so-secretly one of my favorite slices of NYC pizza
(m / multi-sentence
      :snt1 (l / legal-02
            :ARG1 (e / everything))
      :snt2 (s / secret
            :polarity -
            :degree (s2 / so)
            :domain (s3 / slice
                  :ARG1-of (ii / include-91
                        :ARG2 (s4 / slice
                              :mod (p / pizza
                                    :location (c / city
                                          :name (n / name
                                                :op1 ""NYC"")))
                              :ARG1-of (f / favor-01
                                    :ARG0 (ii2 / i)))))))"
Roses Pizza is everything to me,"# ::snt Roses Pizza is everything to me
(e / everything
      :domain (p / pizza
            :name (n / name
                  :op1 ""Roses""
                  :op2 ""Pizza""))
      :prep-to (ii / i))"
they ALL slap tbh,"# ::snt they ALL slap tbh
(s / slap-01
      :mode expressive
      :ARG0 (t / they
            :mod (a / all))
      :ARG1-of (h / honest-01))"
ok but the one place next to Krispy Kreme actually kind of slaps,"# ::snt ok but the one place next to Krispy Kreme actually kind of slaps
(c / contrast-01
      :ARG1 (o / okay-04)
      :ARG2 (s / slap-01
            :ARG1 (p / place
                  :quant 1
                  :location (n / next-to
                        :op1 (f / facility
                              :name (n2 / name
                                    :op1 ""Krispy""
                                    :op2 ""Kreme""))))
            :degree (k / kind-of)
            :ARG1-of (a / actual-02)))"
No but its still in old Penn!,"# ::snt No but its still in old Penn!
(c / contrast-01
      :ARG1 (n / no)
      :ARG2 (b / be-located-at-91
            :ARG1 (ii / it)
            :ARG2 (u / university
                  :name (n2 / name
                        :op1 ""Penn"")
                  :mod (o / old))
            :mod (s / still)))"
Is there roses in new penn,"# ::snt Is there roses in new penn
(r / rose
      :polarity (a / amr-unknown)
      :location (p / penn
            :ARG1-of (n / new-01)))"
