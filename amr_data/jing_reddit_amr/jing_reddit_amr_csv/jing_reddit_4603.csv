comment,amr
Dunno why but I see her more running after a can of vienna sausages,"# ::snt Dunno why but I see her more running after a can of vienna sausages
(c / contrast-01
      :ARG1 (k / know-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG0-of (c2 / cause-01)))
      :ARG2 (s / see-01
            :ARG0 ii
            :ARG1 (r / run-02
                  :ARG0 (s2 / she)
                  :mod (m / more)
                  :time (a / after
                        :op1 (c3 / can
                              :consist-of (s3 / sausage
                                    :mod (v / vienna)))))))"
Running ?,"# ::snt Running ?
(r / run-02
      :polarity (a / amr-unknown))"
"""running""","# ::snt ""running""
(r / run-08)"
> Just throw a cookie away from the door. [Vegeta]()?,"# ::snt > Just throw a cookie away from the door. [Vegeta]()?
(m / multi-sentence
      :snt1 (t / throw-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (c / cookie)
            :direction (a / away
                  :op1 (d / door))
            :mod (j / just))
      :snt2 (a2 / ask-01
            :ARG2 (p / person
                  :name (n / name
                        :op1 ""Vegeta""))
            :polarity (a3 / amr-unknown)))"
"So, how long you've been waiting to use that?","# ::snt So, how long you've been waiting to use that?
(ii / infer-01
      :ARG1 (w / wait-01
            :ARG1 (y / you)
            :ARG2 (u / use-01
                  :ARG0 y
                  :ARG1 (t / that))
            :duration (a / amr-unknown)))"
"Aye you gotta ""now you see me"" card throw that cookie.","# ::snt Aye you gotta ""now you see me"" card throw that cookie.
(g / get-06
      :ARG0 (y / you)
      :ARG1 (t / throw-01
            :ARG0 y
            :ARG1 (c / cookie
                  :mod (t2 / that)))
      :mod (y2 / yeh
            :mode expressive)
      :condition (s / see-01
            :ARG0 y
            :ARG1 (ii / i)
            :time (n / now)))"
"I just assumed that if you try pushing her, you get stuck and eventually become part of the mass.","# ::snt I just assumed that if you try pushing her, you get stuck and eventually become part of the mass.
(a / assume-02
      :ARG0 (ii / i)
      :ARG1 (a2 / and
            :op1 (s / stick-01
                  :ARG1 (y / you))
            :op2 (b / become-01
                  :ARG1 y
                  :ARG2 (p / part
                        :part-of (m / mass))
                  :time (e / eventual))
            :condition (t / try-01
                  :ARG0 y
                  :ARG1 (p2 / push-01
                        :ARG0 y
                        :ARG1 (s2 / she))))
      :mod (j / just))"
Yeah her event horizon is actually just beneath her skin so any inwards pressure and whatever's pressing isn't coming out again.,"# ::snt Yeah her event horizon is actually just beneath her skin so any inwards pressure and whatever's pressing isn't coming out again.
(c / cause-01
      :ARG0 (b / be-located-at-91
            :ARG1 (h / horizon
                  :mod (e / event)
                  :poss (s / she
                        :part (s2 / skin)))
            :ARG2 (b2 / beneath
                  :op1 s2
                  :mod (j / just))
            :ARG1-of (a / actual-02))
      :ARG1 (c2 / come-out-09
            :polarity -
            :ARG1 (a2 / and
                  :op1 (p / pressure
                        :mod (a3 / any)
                        :direction (u / upward))
                  :op2 (t / thing
                        :ARG0-of (p2 / press-01)))
            :mod (a4 / again))
      :mod (y / yeah
            :mode expressive))"
: First permanent block established at the door. : Commercial whaling begins at door. : Deep space user 'u/QuasarSandwich' launched to explore boundaries of Whale. Disappears without a trace.,"# ::snt : First permanent block established at the door. : Commercial whaling begins at door. : Deep space user 'u/QuasarSandwich' launched to explore boundaries of Whale. Disappears without a trace.
(m / multi-sentence
      :snt1 (e / establish-01
            :ARG1 (b / block
                  :ord (o / ordinal-entity
                        :value 1)
                  :mod (p / permanent))
            :location (d / door))
      :snt2 (b2 / begin-01
            :ARG1 (w / whale-01
                  :mod (c / commerce))
            :location (d2 / door))
      :snt3 (l / launch-01
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 ""u/QuasarSandwich"")
                  :ARG0-of (u / use-01
                        :ARG1 (s / space
                              :ARG1-of (d3 / deep-02))))
            :ARG1 (e2 / explore-01
                  :ARG0 p2
                  :ARG1 (b3 / boundary
                        :poss (s2 / ship
                              :name (n2 / name
                                    :op1 ""Whale"")))))
      :snt4 (d4 / disappear-01
            :ARG1-of (t / trace-02
                  :polarity -)))"
"Although I believe technically, as an external observer you would see me eternally frozen in time right on the event horizon, never quite falling over the edge. From *my* perspective, sure, I'm hot spaghetti.","# ::snt Although I believe technically, as an external observer you would see me eternally frozen in time right on the event horizon, never quite falling over the edge. From *my* perspective, sure, I'm hot spaghetti.
(m / multi-sentence
      :snt1 (h / have-concession-91
            :ARG2 (b / believe-01
                  :ARG0 (ii / i)
                  :ARG1 (s / see-01
                        :ARG0 (y / you
                              :ARG0-of (o / observe-01
                                    :mod (e / external)))
                        :ARG1 (f / freeze-01
                              :ARG1 (ii2 / i)
                              :time (f2 / forever)
                              :manner (t / time)
                              :location (h2 / horizon
                                    :mod (e2 / event)
                                    :mod (r / right))
                              :manner (f3 / fall-01
                                    :polarity -
                                    :ARG1 ii2
                                    :ARG4 (o2 / over
                                          :op1 (e3 / edge))
                                    :mod (q / quite)
                                    :time (e4 / ever)))
                        :manner (t2 / technical))))
      :snt2 (s2 / sure-02
            :ARG1 (h3 / hot-03
                  :ARG1 (ii3 / i)
                  :manner (p / perspective
                        :poss ii3))))"
Call a friend with a pickup truck and a couple ratcheting tow straps and pull her out of the door.,"# ::snt Call a friend with a pickup truck and a couple ratcheting tow straps and pull her out of the door.
(a / and
      :op1 (c / call-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (f / friend))
                  :ARG0-of (h2 / have-03
                        :ARG1 (a2 / and
                              :op1 (t / truck
                                    :mod (p2 / pickup))
                              :op2 (s / strap-01
                                    :ARG1 p
                                    :ARG2 (t2 / tow-01)
                                    :ARG0-of (r / ratchet-01))
                              :quant (c2 / couple)))))
      :op2 (p3 / pull-out-02
            :mode imperative
            :ARG0 y
            :ARG1 p
            :ARG2 (d / door)))"
You might be able to slip passed her if you don't have a waist size equivalent to the circumference of a world record breaking pumpkin.,"# ::snt You might be able to slip passed her if you don't have a waist size equivalent to the circumference of a world record breaking pumpkin.
(p / possible-01
      :ARG1 (s / slip-02
            :ARG1 (y / you)
            :path (p2 / pass-02
                  :ARG0 y
                  :ARG1 (s2 / she)))
      :condition (h / have-03
            :polarity -
            :ARG0 y
            :ARG1 (s3 / size
                  :mod (w / waist)
                  :ARG1-of (e / equal-01
                        :ARG2 (c / circumference
                              :poss (p3 / pumpkin
                                    :ARG0-of (b / break-18
                                          :ARG1 (r / record))
                                    :mod (w2 / world)))))))"
"Small, you say?","# ::snt Small, you say?
(s / say-01
      :polarity (a / amr-unknown)
      :ARG0 (y / you)
      :ARG1 (s2 / small))"
