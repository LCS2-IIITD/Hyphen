comment,amr
I live in Austin and couldnt believe how many people voted to raise their taxes - -70+%!! The one proposition that failed was one requiring a third party audit of the citys business - failed by %? Dfuq? You agree to borrow almost $900million and then dont want somebody ensuring it is spent well? I dont get it.,"# ::snt I live in Austin and couldnt believe how many people voted to raise their taxes - -70+%!! The one proposition that failed was one requiring a third party audit of the citys business - failed by %? Dfuq? You agree to borrow almost $900million and then dont want somebody ensuring it is spent well? I dont get it.
(m / multi-sentence
      :snt1 (a / and
            :op1 (l / live-01
                  :ARG0 (ii / i)
                  :location (c / city
                        :name (n / name
                              :op1 ""Austin"")))
            :op2 (p / possible-01
                  :polarity -
                  :ARG1 (b / believe-01
                        :ARG0 ii
                        :ARG1 (v / vote-01
                              :ARG0 (p2 / person
                                    :quant (m2 / many))
                              :ARG1 (r / raise-01
                                    :ARG0 p2
                                    :ARG1 (t / tax-01
                                          :ARG2 p2))
                              :ARG2 (p3 / percentage-entity
                                    :value 70)))))
      :snt2 (f / fail-01
            :ARG1 (p4 / propose-01
                  :quant 1
                  :ARG1 (r2 / require-01
                        :ARG1 (a2 / audit-01
                              :ARG1 (b2 / business
                                    :poss (c2 / city))
                              :mod (t2 / third-party))))
            :ARG2 (p5 / percentage-entity
                  :value 70))
      :snt3 (p6 / product
            :name (n2 / name
                  :op1 ""Dfuq""))
      :snt4 (a3 / and
            :op1 (a4 / agree-01
                  :ARG0 (y / you)
                  :ARG1 (b3 / borrow-01
                        :ARG0 y
                        :ARG1 (a5 / almost
                              :op1 (m3 / monetary-quantity
                                    :quant 900000000
                                    :unit (d / dollar)))))
            :op2 (w / want-01
                  :polarity -
                  :ARG0 y
                  :ARG1 (e / ensure-01
                        :ARG0 (s / somebody)
                        :ARG1 (s2 / spend-01
                              :ARG1 a5
                              :ARG1-of (w2 / well-09)))
                  :time (t3 / then))
            :polarity (a6 / amr-unknown))
      :snt5 (g / get-01
            :polarity -
            :ARG0 (ii2 / i)
            :ARG1 (ii3 / it)
            :polarity (a7 / amr-unknown)))"
Its like they cant say no.,"# ::snt Its like they cant say no.
(r / resemble-01
      :ARG1 (ii / it)
      :ARG2 (p / possible-01
            :polarity -
            :ARG1 (s / say-01
                  :ARG0 (t / they)
                  :ARG1 (n / no))))"
When you use that word it automatically invalidates your argument.,"# ::snt When you use that word it automatically invalidates your argument.
(ii / invalidate-01
      :ARG0 (w / word
            :mod (t / that))
      :ARG1 (a / argue-01
            :ARG0 (y / you))
      :manner (a2 / automatic)
      :time (u / use-01
            :ARG0 y
            :ARG1 w))"
Please refrain from using hateful ableist language in your posts.  It adds nothing of value to the conversation or your argument.,"# ::snt Please refrain from using hateful ableist language in your posts.  It adds nothing of value to the conversation or your argument.
(m / multi-sentence
      :snt1 (r / refrain-01
            :mode imperative
            :polite +
            :ARG0 (y / you)
            :ARG1 (u / use-01
                  :ARG0 y
                  :ARG1 (l / language
                        :mod (a / ableist)
                        :ARG0-of (h / hate-01))
                  :location (p / post-01
                        :ARG0 y)))
      :snt2 (a2 / add-02
            :ARG0 (ii / it)
            :ARG1 (n / nothing
                  :ARG1-of (v / value-01))
            :ARG2 (o / or
                  :op1 (c / converse-01
                        :ARG0 (y2 / you))
                  :op2 (a3 / argue-01
                        :ARG0 y2))))"
