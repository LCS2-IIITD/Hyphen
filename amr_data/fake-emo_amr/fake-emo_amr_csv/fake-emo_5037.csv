comment,amr
@mcm_ct How big?,"# ::snt @mcm_ct How big?
(b / big
      :degree (a / amr-unknown)
      :domain (p / person
            :name (n / name
                  :op1 ""mcm_ct"")))"
@klopharmd @mcm_ct 100,"# ::snt @klopharmd @mcm_ct 100
(s / say-01
      :ARG0 (ii / i)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""klopharmd"")))"
@mcm_ct #FakeRally,"# ::snt @mcm_ct #FakeRally
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (f / fake-02
            :mode expressive)
      :ARG2 (p / person
            :name (n / name
                  :op1 ""mcm_ct"")))"
@mcm_ct We are still below the Friday high we'll see how this ends up in the morning should be lower,"# ::snt @mcm_ct We are still below the Friday high we'll see how this ends up in the morning should be lower
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (a / and
            :op1 (b / below
                  :op1 (h / high-02
                        :time (d / date-entity
                              :weekday (f / friday)))
                  :mod (s2 / still))
            :op2 (s3 / see-01
                  :ARG0 (w / we)
                  :ARG1 (t / thing
                        :manner-of (e / end-up-03
                              :ARG1 (t2 / this)
                              :time (d2 / date-entity
                                    :dayperiod (m / morning)))
                        :ARG1-of (r / recommend-01
                              :ARG2 (h2 / have-degree-91
                                    :ARG1 e
                                    :ARG2 (l / low-04
                                          :ARG1 e)
                                    :ARG3 (m2 / more))))))
      :ARG2 (p / person
            :name (n / name
                  :op1 ""mcm_ct"")))"
@mcm_ct This can be wiped out with one tick.,"# ::snt @mcm_ct This can be wiped out with one tick.
(s / say-01
      :ARG1 (p / possible-01
            :ARG1 (w / wipe-out-02
                  :ARG1 (t / this)
                  :instrument (t2 / tick
                        :quant 1)))
      :ARG2 (p2 / person
            :name (n / name
                  :op1 ""mcm_ct"")))"
@mcm_ct Bears gonna lose their shirt this week oh and maybe their pants too,"# ::snt @mcm_ct Bears gonna lose their shirt this week oh and maybe their pants too
(a / and
      :op1 (l / lose-02
            :ARG0 (b / bear
                  :name (n / name
                        :op1 ""mcm_ct""))
            :ARG1 (s / shirt
                  :poss b)
            :time (w / week
                  :mod (t / this)))
      :op2 (p / possible-01
            :ARG1 l
            :ARG0 b
            :ARG1 (p2 / pant
                  :poss b)
            :mod (t2 / too)))"
@mcm_ct Nearly 1% pop. That ain‚Äôt bad.,"# ::snt @mcm_ct Nearly 1% pop. That ain‚Äôt bad.
(m / multi-sentence
      :snt1 (s / say-01
            :ARG0 (ii / i)
            :ARG2 (p / person
                  :name (n / name
                        :op1 ""mcm_ct"")))
      :snt2 (b / bad-07
            :polarity -
            :ARG1 (t / that)))"
@mcm_ct The 1st is the turn (so the 2nd will be the top latest I think),"# ::snt @mcm_ct The 1st is the turn (so the 2nd will be the top latest I think)
(s / say-01
      :ARG1 (t / turn-01
            :ord (o / ordinal-entity
                  :value 1)
            :ARG0-of (c / cause-01
                  :ARG1 (t2 / turn-01
                        :ord (o2 / ordinal-entity
                              :value 2)
                        :ARG1-of (t3 / think-01
                              :ARG0 (ii / i))
                        :mod (t4 / top))))
      :ARG2 (p / person
            :name (n / name
                  :op1 ""mcm_ct"")))"
@mcm_ct 2k vol on open not that impressive,"# ::snt @mcm_ct 2k vol on open not that impressive
(ii / impress-01
      :polarity -
      :degree (t / that)
      :ARG1-of (s / say-01
            :ARG2 (p / person
                  :name (n / name
                        :op1 ""mcm_ct"")))
      :time (o / open-04))"
@mcm_ct The gap down needs some momentum to build,"# ::snt @mcm_ct The gap down needs some momentum to build
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (n / need-01
            :ARG0 (g / gap
                  :ARG1-of (d / down-03))
            :ARG1 (m / momentum
                  :quant (s2 / some))
            :purpose (b / build-02
                  :ARG1 g))
      :ARG2 (p / person
            :name (n2 / name
                  :op1 ""mcm_ct"")))"
"@mcm_ct It's great, heavy overhead supply at 2600","# ::snt @mcm_ct It's great, heavy overhead supply at 2600
(m / multi-sentence
      :snt1 (s / say-01
            :ARG0 (ii / i)
            :ARG1 (g / great))
      :snt2 (s2 / supply-01
            :ARG2 (o / overhead)
            :mod (h / heavy)
            :quant 2600))"
@mcm_ct It seems a lasting swing trade long would have required a far different pattern than the one we walked into on the 26th-candles straight down to straight up without any wick reversal means lower still imho-thanks for all your great analysis.,"# ::snt @mcm_ct It seems a lasting swing trade long would have required a far different pattern than the one we walked into on the 26th-candles straight down to straight up without any wick reversal means lower still imho-thanks for all your great analysis.
(m / multi-sentence
      :snt1 (s / say-01
            :ARG0 (ii / i)
            :ARG1 (s2 / seem-01
                  :ARG1 (r / require-01
                        :ARG0 (t / trade-01
                              :ARG1-of (l / last-01)
                              :mod (s3 / swing-01)
                              :ARG1-of (l2 / long-03))
                        :ARG1 (p / pattern
                              :ARG1-of (d / differ-02
                                    :ARG2 (p2 / pattern
                                          :ARG1-of (w / walk-01
                                                :ARG0 (w2 / we)
                                                :location (c / candle
                                                      :ord (o / ordinal-entity
                                                            :value 26))
                                                :direction (s4 / straight)
                                                :direction (s5 / straight)
                                                :direction (u / up)
                                                :manner (r2 / reverse-01
                                                      :polarity -
                                                      :ARG1 (w3 / wick)))))
                              :quant (f / far))))
            :ARG2 (p3 / person
                  :name (n / name
                        :op1 ""mcm_ct"")))
      :snt2 (o2 / opine-01
            :ARG0 (ii2 / i)
            :ARG1 (m2 / mean-01
                  :ARG1 (l3 / low-04
                        :mod (s6 / still)
                        :ARG2-of (h / have-degree-91
                              :ARG3 (m3 / more))
                        :ARG1-of h)
                  :ARG2 (a / analyze-01
                        :ARG0 (y / you)
                        :mod (a2 / all)
                        :mod (g / great)))))"
@mcm_ct Stop it!,"# ::snt @mcm_ct Stop it!
(s / stop-01
      :mode imperative
      :ARG0 (p / person
            :name (n / name
                  :op1 ""mcm_ct""))
      :ARG1 (ii / it))"
"@mcm_ct Gaps are meant to be filled üìâ #ES_F ... patience ... ü§ü‚è≥
... let's see how many manage to get trapped in death zone üèîÔ∏è this time ... üòàü§™ https://t.co/QGa2BrTJzc","# ::snt @mcm_ct Gaps are meant to be filled üìâ #ES_F ... patience ... ü§ü‚è≥
... let's see how many manage to get trapped in death zone üèîÔ∏è this time ... üòàü§™ https://t.co/QGa2BrTJzc
(m / multi-sentence
      :snt1 (m2 / mean-02
            :ARG1 (f / fill-01
                  :ARG1 (a / aps)))
      :snt2 (a2 / and
            :op1 (e / emoticon
                  :value ""ES_F"")
            :op2 (p / patience)
            :op3 (e2 / emoticon
                  :value "" ü§ü‚è≥"")
            :op4 (s / see-01
                  :mode imperative
                  :ARG0 (w / we)
                  :ARG1 (n / number
                        :quant-of (p2 / person
                              :ARG0-of (m3 / manage-02
                                    :ARG1 (t / trap-01
                                          :ARG1 p2
                                          :ARG2 (z / zone
                                                :mod (d / die-01)))
                                    :time (t2 / time
                                          :mod (t3 / this)))))))
      :snt3 (x / üòà
            :mode expressive))"
