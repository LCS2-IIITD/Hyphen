# ::snt We hope to have a "Trump to English" translator as soon. As possible, sorry for any inconveniences this delay could give you.
# ::tokens ["We", "hope", "to", "have", "a", "\"", "Trump", "to", "English", "\"", "translator", "as", "soon", ".", "As", "possible", ",", "sorry", "for", "any", "inconveniences", "this", "delay", "could", "give", "you", "."]
# ::lemmas ["we", "hope", "to", "have", "a", "\"", "Trump", "to", "English", "\"", "translator", "as", "soon", ".", "as", "possible", ",", "sorry", "for", "any", "inconvenience", "this", "delay", "could", "give", "you", "."]
(c1-13 / multi-sentence
       :snt1 (c1-19 / hope-01
                    :ARG0 (c1-4 / we)
                    :ARG1 (c1-5 / have-03
                                :ARG0 c1-4
                                :ARG1 (c1-2 / person
                                            :ARG0-of (c1-3 / translate-01
                                                           :manner (c1-12 / person
                                                                          :name (c1-14 / name
                                                                                       :op1 "Trump"))
                                                           :manner (c1-0 / language
                                                                         :name (c1-9 / name
                                                                                     :op1 "English"))))
                                :time (c1-20 / as-soon-as
                                             :op1 c1-5)))
       :snt2 (c1-7 / sorry-01
                   :ARG1 (c1-21 / i)
                   :ARG2 (c1-6 / inconvenience
                               :ARG1-of (c1-10 / give-01
                                               :ARG0 (c1-16 / delay-01
                                                            :mod (c1-11 / this))
                                               :ARG2 (c1-8 / you)
                                               :ARG1-of (c1-18 / possible-01))
                               :mod (c1-15 / any))
                   :ARG1-of (c1-17 / have-quant-91
                                   :ARG3 (c1-1 / equal)
                                   :ARG4 c1-18)))
