comment,amr
You are reading this sentence right now,"# ::snt You are reading this sentence right now
(r / read-01
      :ARG0 (y / you)
      :ARG1 (s / sentence
            :mod (t / this))
      :time (n / now
            :mod (r2 / right)))"
Are you? What if your brain is in a vat and this is all a simulation?,"# ::snt Are you? What if your brain is in a vat and this is all a simulation?
(m / multi-sentence
      :snt1 (y / you
            :polarity (a / amr-unknown))
      :snt2 (a2 / amr-unknown
            :condition (a3 / and
                  :op1 (b / be-located-at-91
                        :ARG1 (b2 / brain
                              :part-of (y2 / you))
                        :ARG2 (v / vat))
                  :op2 (s / simulate-01
                        :ARG1 (t / this
                              :mod (a4 / all))))))"
Brain in a jar theory,"# ::snt Brain in a jar theory
(t / theory
      :mod (b / brain
            :location (j / jar)))"
It's like Schrodinger's cat,"# ::snt It's like Schrodinger's cat
(r / resemble-01
      :ARG1 (ii / it)
      :ARG2 (c / cat
            :poss (p / person
                  :name (n / name
                        :op1 ""Schrodinger""))))"
You are reading this here as well. So there must be tons of potentially true statements.,"# ::snt You are reading this here as well. So there must be tons of potentially true statements.
(m / multi-sentence
      :snt1 (r / read-01
            :ARG0 (y / you)
            :ARG1 (t / this)
            :location (h / here)
            :mod (a / as-well))
      :snt2 (ii / infer-01
            :ARG1 (t2 / thing
                  :ARG1-of (s / state-01)
                  :ARG1-of (t3 / true-01
                        :mod (p / potential))
                  :quant (t4 / ton))))"
"Someone, somewhere, will always disagree.","# ::snt Someone, somewhere, will always disagree.
(d / disagree-01
      :ARG0 (s / someone
            :location (s2 / somewhere))
      :time (a / always))"
Water is wet.,"# ::snt Water is wet.
(w / wet-01
      :ARG1 (w2 / water))"
Is water wet? How would you prove that statement?,"# ::snt Is water wet? How would you prove that statement?
(m / multi-sentence
      :snt1 (w / wet-01
            :polarity (a / amr-unknown)
            :ARG1 (w2 / water))
      :snt2 (p / prove-01
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :mod (t2 / that)
                  :ARG1-of (s / state-01))
            :manner (a2 / amr-unknown)))"
"depends on how much you're willing to sacrifice logic for an argument.At the end of the day,I couldnt even convince you that you're alive right now if you believed otherwise. This could all be a simulation/dream/drug induced state/chemical reaction occuring before you die and are reincarnated as a mountain goat/firm belief in last thursdayism/etc,etc,etc...Now,if we're gonna include functioning logic...The statement that ""math is the language of the universe"" is about the truest statement I think someone can make. Math is the rules we abide by in our reality and you can not fight or go against it. In the simplest terms possible: +2 is always . Anyones opinion is irrelavent and this equation will always be true.","# ::snt depends on how much you're willing to sacrifice logic for an argument.At the end of the day,I couldnt even convince you that you're alive right now if you believed otherwise. This could all be a simulation/dream/drug induced state/chemical reaction occuring before you die and are reincarnated as a mountain goat/firm belief in last thursdayism/etc,etc,etc...Now,if we're gonna include functioning logic...The statement that ""math is the language of the universe"" is about the truest statement I think someone can make. Math is the rules we abide by in our reality and you can not fight or go against it. In the simplest terms possible: +2 is always . Anyones opinion is irrelavent and this equation will always be true.
(m / multi-sentence
      :snt1 (d / depend-01
            :ARG1 (m2 / much
                  :quant-of (w / will-02
                        :ARG0 (y / you)
                        :ARG1 (s / sacrifice-01
                              :ARG0 y
                              :ARG1 (l / logic)
                              :ARG2 (a / argue-01)))))
      :snt2 (a2 / and
            :op1 (p / possible-01
                  :polarity -
                  :ARG1 (c / convince-01
                        :ARG0 (ii / i)
                        :ARG1 (y2 / you)
                        :ARG2 (l2 / live-01
                              :ARG0 y2
                              :time (n / now
                                    :mod (r / right)))
                        :mod (e / even))
                  :condition (b / believe-01
                        :ARG0 y2
                        :ARG1 (h / have-polarity-91
                              :ARG1 l2
                              :ARG2 -)))
            :op2 (p2 / possible-01
                  :polarity -
                  :ARG1 (s2 / slash
                        :op1 (s3 / simulate-01
                              :ARG1 (s4 / slash
                                    :op1 (d2 / dream-01
                                          :ARG0 (a3 / anyone))
                                    :op2 (ii2 / induce-01
                                          :ARG1 a3
                                          :ARG2 (d3 / drug))))
                        :op2 (r2 / react-01
                              :ARG0 a3
                              :ARG1 s4
                              :mod (c2 / chemical))
                        :time (b2 / before
                              :op1 (d4 / die-01
                                    :ARG1 (y3 / you)))))
            :condition (ii3 / include-01
                  :ARG0 (w2 / we)
                  :ARG1 (l3 / logic
                        :ARG0-of (f / function-01)))))"
+2=5 when using substantially large values of,"# ::snt +2=5 when using substantially large values of
(e / equal-01
      :ARG1 (p / plus
            :op1 2)
      :ARG2 5
      :condition (u / use-01
            :ARG1 (v / value
                  :mod (l / large
                        :degree (s / substantial)))))"
The answer being is what means that it was not of larger value than what was shown.,"# ::snt The answer being is what means that it was not of larger value than what was shown.
(a / answer-01
      :ARG2 (m / mean-01
            :ARG1 (t / thing)
            :ARG2 (v / value-01
                  :polarity -
                  :ARG1 (ii / it)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m2 / more)
                        :ARG4 (t2 / thing
                              :ARG1-of (s / show-01))))))"
I'm simply saying +2 does not always equal,"# ::snt I'm simply saying +2 does not always equal
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (e / equal-01
            :polarity -
            :ARG1 +2)
      :time (a / always)
      :ARG1-of (s2 / simple-02))"
Valar Morghulis,"# ::snt Valar Morghulis
(p / person
      :name (n / name
            :op1 ""Valar""
            :op2 ""Morghulis""))"
