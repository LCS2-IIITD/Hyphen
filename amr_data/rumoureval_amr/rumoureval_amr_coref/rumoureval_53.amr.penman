# ::snt Col , military like you &amp; Gens J Keane have to say to Obama: "You have to bomb the Iran's nuclear facilities."
# ::tokens ["Col", ",", "military", "like", "you", "&", "amp", ";", "Gens", "J", "Keane", "have", "to", "say", "to", "Obama", ":", "\"", "You", "have", "to", "bomb", "the", "Iran", "'s", "nuclear", "facilities", ".", "\""]
# ::lemmas ["Col", ",", "military", "like", "you", "&", "amp", ";", "Gens", "J", "Keane", "have", "to", "say", "to", "Obama", ":", "\"", "you", "have", "to", "bomb", "the", "Iran", "'s", "nuclear", "facility", ".", "\""]
(c1-14 / obligate-01
       :ARG1 (c1-12 / person
                    :name (c1-8 / name
                                :op1 "Gens"
                                :op2 "J"
                                :op3 "Keane")
                    :ARG0-of (c1-0 / have-org-role-91
                                   :ARG2 (c1-6 / colonel)
                                   :ARG0 c1-12)
                    :ARG1 (c1-16 / military
                                 :ARG1-of (c1-3 / resemble-01
                                                :ARG2 (c1-13 / and
                                                             :op1 (c1-5 / you)
                                                             :op2 (c1-17 / person
                                                                         :name (c1-1 / name
                                                                                     :op1 "amp"))))))
       :ARG2 (c1-7 / say-01
                   :ARG0 c1-12
                   :ARG1 c1-14
                   :ARG1 (c1-10 / person
                                :name (c1-2 / name
                                            :op1 "Obama"))
                   :ARG2 (c1-15 / bomb-01
                                :ARG0 c1-10
                                :ARG1 (c1-11 / facility
                                             :mod (c1-18 / nucleus)
                                             :poss (c1-4 / country
                                                         :name (c1-9 / name
                                                                     :op1 "Iran")))))
       :ARG2 c1-10)

# ::snt Him and millions of others no doubt but WHAT tipped him six years later to commit such an atrocious act??
# ::tokens ["Him", "and", "millions", "of", "others", "no", "doubt", "but", "WHAT", "tipped", "him", "six", "years", "later", "to", "commit", "such", "an", "atrocious", "act", "?", "?"]
# ::lemmas ["he", "and", "millions", "of", "other", "no", "doubt", "but", "what", "tip", "he", "six", "years", "later", "to", "commit", "such", "an", "atrocious", "act", "?", "?"]
(c2-6 / contrast-01
      :ARG1 (c2-5 / doubt-01
                  :ARG1 (c2-9 / and
                              :op1 (c2-1 / he)
                              :op2 (c2-10 / other
                                          :quant (c2-3 / multiple
                                                       :op1 1000000)))
                  :polarity -)
      :ARG2 (c2-2 / tip-02
                  :ARG0 (c2-11 / amr-unknown)
                  :ARG1 c2-1
                  :ARG2 (c2-13 / commit-02
                               :ARG0 c2-1
                               :ARG1 (c2-12 / act-02
                                            :mod (c2-7 / atrocious)
                                            :mod (c2-8 / such)))
                  :time (c2-14 / after
                               :quant (c2-4 / temporal-quantity
                                            :unit (c2-0 / year)
                                            :quant 6))))

# ::snt best follow I ever did
# ::tokens ["best", "follow", "I", "ever", "did"]
# ::lemmas ["good", "follow", "i", "ever", "do"]
(c3-1 / follow-02
      :ARG0 (c3-4 / i)
      :ARG1-of (c3-0 / have-degree-91
                     :ARG2 (c3-5 / good-02
                                 :ARG1 c3-1)
                     :ARG3 (c3-2 / most))
      :ARG1-of (c3-3 / do-02
                     :ARG0 c3-4
                     :time (c3-6 / ever)))

# ::snt with one day before crash
# ::tokens ["with", "one", "day", "before", "crash"]
# ::lemmas ["with", "one", "day", "before", "crash"]
(c4-4 / be-temporally-at-91
      :ARG2 (c4-3 / before
                  :op1 (c4-2 / crash-01)
                  :quant (c4-0 / temporal-quantity
                               :unit (c4-1 / day)
                               :quant 1)))

# ::snt all rumors.not confirmed at all
# ::tokens ["all", "rumors.not", "confirmed", "at", "all"]
# ::lemmas ["all", "rumors.not", "confirm", "at", "all"]
(c5-0 / multi-sentence
      :snt1 (c5-3 / rumor-01
                  :mod (c5-2 / all))
      :snt2 (c5-1 / confirm-01
                  :degree (c5-4 / at-all)
                  :polarity -))

# ::snt My nd source is confirm me French media is reporting fer Unverified
# ::tokens ["My", "nd", "source", "is", "confirm", "me", "French", "media", "is", "reporting", "fer", "Unverified"]
# ::lemmas ["my", "nd", "source", "be", "confirm", "i", "French", "medium", "be", "report", "fer", "Unverified"]
(c6-3 / confirm-01
      :ARG0 (c6-0 / thing
                  :ARG2-of (c6-7 / source-01
                                 :ARG0 (c6-2 / i)))
      :ARG1 (c6-5 / report-01
                  :ARG0 (c6-1 / media
                              :mod (c6-6 / country
                                         :name (c6-8 / name
                                                     :op1 "France")))
                  :ARG1-of (c6-4 / verify-01
                                 :polarity -))
      :ARG2 c6-2)

# ::snt From
# ::tokens ["From"]
# ::lemmas ["from"]
(c7-0 / from)

# ::snt ers a link to prove intentionally set out to kill
# ::tokens ["ers", "a", "link", "to", "prove", "intentionally", "set", "out", "to", "kill"]
# ::lemmas ["er", "a", "link", "to", "prove", "intentionally", "set", "out", "to", "kill"]
(c9-4 / link-01
      :purpose (c9-2 / prove-01
                     :ARG1 (c9-5 / set-out-07
                                 :ARG0 (c9-1 / they)
                                 :ARG1 (c9-0 / kill-01
                                             :ARG0 c9-1)
                                 :ARG1-of (c9-3 / intend-01))))

# ::snt Sure CoPilot
# ::tokens ["Sure", "CoPilot"]
# ::lemmas ["sure", "CoPilot"]
(c10-0 / say-01
       :ARG1 (c10-2 / sure-02)
       :ARG2 (c10-3 / person
                    :name (c10-1 / name
                                 :op1 "CoPilot")))
