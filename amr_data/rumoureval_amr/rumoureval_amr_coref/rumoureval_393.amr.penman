# ::snt I haven't had that, although I haven't applied for citizenship yet. But I had not heard that. And I agree I do think that is wrong. I think I would register independent, rather than dem or rep.
# ::tokens ["I", "have", "n't", "had", "that", ",", "although", "I", "have", "n't", "applied", "for", "citizenship", "yet", ".", "But", "I", "had", "not", "heard", "that", ".", "And", "I", "agree", "I", "do", "think", "that", "is", "wrong", ".", "I", "think", "I", "would", "register", "independent", ",", "rather", "than", "dem", "or", "rep", "."]
# ::lemmas ["i", "have", "not", "have", "that", ",", "although", "i", "have", "not", "apply", "for", "citizenship", "yet", ".", "but", "i", "have", "not", "hear", "that", ".", "and", "i", "agree", "i", "do", "think", "that", "be", "wrong", ".", "i", "think", "i", "would", "register", "independent", ",", "rather", "than", "dem", "or", "rep", "."]
(c1-23 / multi-sentence
       :snt1 (c1-1 / have-concession-91
                   :ARG1 (c1-19 / apply-01
                                :ARG0 (c1-18 / i)
                                :ARG1 (c1-15 / citizenship)
                                :time (c1-8 / yet)
                                :ARG2-of c1-1
                                :polarity -)
                   :ARG0 c1-18
                   :ARG1 c1-15)
       :snt2 (c1-7 / contrast-01
                   :ARG2 (c1-13 / hear-01
                                :ARG0 (c1-10 / i)
                                :ARG1 (c1-11 / that)
                                :polarity -))
       :snt3 (c1-6 / and
                   :op2 (c1-21 / agree-01
                               :ARG0 (c1-4 / i)
                               :ARG1 (c1-22 / think-01
                                            :ARG0 c1-4
                                            :ARG1 (c1-0 / wrong-02
                                                        :ARG1 (c1-12 / that)))))
       :snt4 (c1-16 / think-01
                    :ARG0 (c1-14 / i)
                    :ARG1 (c1-5 / register-02
                                :ARG1 c1-14
                                :ARG3 (c1-17 / depend-01
                                             :ARG0 c1-14
                                             :ARG1-of (c1-2 / instead-of-91
                                                            :ARG2 (c1-20 / or
                                                                         :op1 (c1-3 / dem)
                                                                         :op2 (c1-9 / rep)))
                                             :polarity -))))

# ::snt settle down beavis, he's taking you for a wild ride.
# ::tokens ["settle", "down", "beavis", ",", "he", "'s", "taking", "you", "for", "a", "wild", "ride", "."]
# ::lemmas ["settle", "down", "beavis", ",", "he", "be", "take", "you", "for", "a", "wild", "ride", "."]
(c2-8 / say-01
      :ARG0 (c2-5 / i)
      :ARG1 (c2-1 / set-down-15
                  :ARG0 (c2-4 / person
                              :name (c2-9 / name
                                          :op1 "beavis"))
                  :ARG1-of (c2-6 / cause-01
                                 :ARG0 (c2-3 / take-01
                                             :ARG0 (c2-2 / he)
                                             :ARG1 c2-4
                                             :ARG3 (c2-7 / ride-01
                                                         :mod (c2-0 / wild))))
                  :mode imperative)
      :ARG2 c2-4)

# ::snt Many STATES do make everyone choose from, R, D, or I.
# ::tokens ["Many", "STATES", "do", "make", "everyone", "choose", "from", ",", "R", ",", "D", ",", "or", "I."]
# ::lemmas ["many", "state", "do", "make", "everyone", "choose", "from", ",", "R", ",", "D", ",", "or", "I."]
(c3-3 / make-02
      :ARG0 (c3-9 / state
                  :quant (c3-8 / many))
      :ARG1 (c3-5 / choose-01
                  :ARG0 (c3-11 / everyone)
                  :ARG2 (c3-7 / or
                              :op1 (c3-1 / state
                                         :name (c3-10 / name
                                                      :op1 "R"))
                              :op2 (c3-0 / state
                                         :name (c3-4 / name
                                                     :op1 "D"))
                              :op3 (c3-2 / state
                                         :name (c3-6 / name
                                                     :op1 "I")))))

# ::snt You and your friend are lucky the citizenship test does not require an IQ test.
# ::tokens ["You", "and", "your", "friend", "are", "lucky", "the", "citizenship", "test", "does", "not", "require", "an", "IQ", "test", "."]
# ::lemmas ["you", "and", "your", "friend", "be", "lucky", "the", "citizenship", "test", "do", "not", "require", "an", "iq", "test", "."]
(c4-9 / lucky
      :domain (c4-8 / and
                    :op1 (c4-0 / you)
                    :op2 (c4-5 / person
                               :ARG0-of (c4-1 / have-rel-role-91
                                              :ARG1 c4-0
                                              :ARG2 (c4-3 / friend))))
      :ARG1-of (c4-6 / cause-01
                     :ARG0 (c4-10 / require-01
                                  :ARG0 (c4-2 / test-01
                                              :ARG2 (c4-11 / citizenship))
                                  :ARG1 (c4-4 / test-01
                                              :ARG2 (c4-7 / intelligent-01))
                                  :polarity -)))

# ::snt Why am I lucky? I was born here, and my IQ is points higher than yours is...
# ::tokens ["Why", "am", "I", "lucky", "?", "I", "was", "born", "here", ",", "and", "my", "IQ", "is", "points", "higher", "than", "yours", "is", "..."]
# ::lemmas ["why", "be", "i", "lucky", "?", "i", "be", "bear", "here", ",", "and", "my", "iq", "be", "point", "high", "than", "yours", "be", "..."]
(c5-3 / multi-sentence
      :snt1 (c5-8 / cause-01
                  :ARG0 (c5-11 / amr-unknown)
                  :ARG1 (c5-12 / lucky
                               :domain (c5-7 / i)))
      :snt2 (c5-14 / and
                   :op1 (c5-17 / bear-02
                               :ARG1 (c5-1 / i)
                               :location (c5-2 / here))
                   :op2 (c5-5 / high-02
                              :ARG1 (c5-15 / quotient
                                           :quant-of (c5-4 / intelligent-01)
                                           :poss c5-1)
                              :ARG2-of (c5-16 / have-degree-91
                                              :ARG1 c5-15
                                              :ARG3 (c5-9 / more
                                                          :quant (c5-10 / point))
                                              :ARG4 (c5-13 / quotient
                                                           :quant-of (c5-6 / intelligent-01
                                                                           :ARG1 (c5-0 / you)))))))

# ::snt Sounds like a scam.
# ::tokens ["Sounds", "like", "a", "scam", "."]
# ::lemmas ["sound", "like", "a", "scam", "."]
(c6-0 / sound-01
      :ARG2 (c6-1 / scam-01))
