# ::snt That sure looks like an ISIS flag to me! You bastards, don't bring your filthy terror religion to my country!
# ::tokens ["That", "sure", "looks", "like", "an", "ISIS", "flag", "to", "me", "!", "You", "bastards", ",", "do", "n't", "bring", "your", "filthy", "terror", "religion", "to", "my", "country", "!"]
# ::lemmas ["that", "sure", "look", "like", "an", "ISIS", "flag", "to", "i", "!", "you", "bastard", ",", "do", "not", "bring", "your", "filthy", "terror", "religion", "to", "my", "country", "!"]
(c1-3 / multi-sentence
      :snt1 (c1-9 / look-02
                  :ARG0 (c1-2 / that)
                  :ARG1 (c1-4 / flag
                              :mod (c1-7 / criminal-organization
                                         :name (c1-14 / name
                                                      :op1 "ISIS")))
                  :ARG2 (c1-8 / i)
                  :ARG1-of (c1-13 / sure-02))
      :snt2 (c1-15 / bring-01
                   :ARG0 (c1-0 / you
                               :mod (c1-10 / bastard))
                   :ARG1 (c1-11 / religion
                                :mod (c1-5 / terror)
                                :mod (c1-12 / filthy)
                                :poss c1-0)
                   :ARG2 (c1-6 / country
                               :poss (c1-1 / i))
                   :polarity -
                   :mode imperative))

# ::snt what a horrible situation ...just hope it is not ISIL...it will not end well...
# ::tokens ["what", "a", "horrible", "situation", "...", "just", "hope", "it", "is", "not", "ISIL", "...", "it", "will", "not", "end", "well", "..."]
# ::lemmas ["what", "a", "horrible", "situation", "...", "just", "hope", "it", "be", "not", "ISIL", "...", "it", "will", "not", "end", "well", "..."]
(c2-5 / multi-sentence
      :snt1 (c2-10 / situation
                   :mod (c2-3 / horrible
                              :degree (c2-2 / so)))
      :snt2 (c2-7 / hope-01
                  :ARG0 (c2-0 / you)
                  :ARG1 (c2-11 / have-polarity-91
                               :ARG1 (c2-8 / it)
                               :ARG2 -)
                  :mod (c2-6 / just)
                  :ARG1-of (c2-9 / cause-01
                                 :ARG0 (c2-12 / end-01
                                              :ARG1 (c2-4 / it)
                                              :manner (c2-1 / well-09)
                                              :polarity -))
                  :mode imperative))

# ::snt feel the enrichment
# ::tokens ["feel", "the", "enrichment"]
# ::lemmas ["feel", "the", "enrichment"]
(c3-0 / feel-01
      :ARG0 (c3-2 / you)
      :ARG1 (c3-1 / enrich-01)
      :mode imperative)

# ::snt : Live coverage of hostage situation unfolding in Sydney's Martin Place
# ::tokens [":", "Live", "coverage", "of", "hostage", "situation", "unfolding", "in", "Sydney", "'s", "Martin", "Place"]
# ::lemmas [":", "live", "coverage", "of", "hostage", "situation", "unfolding", "in", "Sydney", "'s", "Martin", "Place"]
(c4-3 / cover-03
      :ARG1 (c4-7 / situation
                  :mod (c4-1 / hostage)
                  :ARG1-of (c4-4 / unfold-02
                                 :location (c4-0 / street
                                                 :name (c4-8 / name
                                                             :op1 "Martin"
                                                             :op2 "Place")
                                                 :location (c4-6 / city
                                                                 :name (c4-2 / name
                                                                             :op1 "Sydney")))))
      :manner (c4-5 / live))

# ::snt Terrifying : BREAKING: Hostage situation unfolding in Sydney's Martin Place
# ::tokens ["Terrifying", ":", "BREAKING", ":", "Hostage", "situation", "unfolding", "in", "Sydney", "'s", "Martin", "Place"]
# ::lemmas ["terrify", ":", "breaking", ":", "hostage", "situation", "unfold", "in", "Sydney", "'s", "Martin", "Place"]
(c5-3 / multi-sentence
      :snt1 (c5-2 / terrify-01)
      :snt2 (c5-9 / break-13
                  :ARG1 (c5-6 / unfold-02
                              :ARG1 (c5-7 / situation
                                          :mod (c5-0 / hostage))
                              :location (c5-1 / street
                                              :name (c5-8 / name
                                                          :op1 "Martin"
                                                          :op2 "Place")
                                              :location (c5-5 / city
                                                              :name (c5-4 / name
                                                                          :op1 "Sydney"))))))

# ::snt That's not the Isis flag.
# ::tokens ["That", "'s", "not", "the", "Isis", "flag", "."]
# ::lemmas ["that", "be", "not", "the", "Isis", "flag", "."]
(c6-0 / flag
      :mod (c6-1 / religious-group
                 :name (c6-2 / name
                             :op1 "Isis"))
      :domain (c6-3 / that)
      :polarity -)

# ::snt if it is ISIS connected, cut off the oxygen right now. No coverage.
# ::tokens ["if", "it", "is", "ISIS", "connected", ",", "cut", "off", "the", "oxygen", "right", "now", ".", "No", "coverage", "."]
# ::lemmas ["if", "it", "be", "ISIS", "connect", ",", "cut", "off", "the", "oxygen", "right", "now", ".", "no", "coverage", "."]
(c7-2 / multi-sentence
      :snt1 (c7-4 / cut-off-04
                  :ARG0 (c7-0 / you)
                  :ARG1 (c7-8 / oxygen)
                  :time (c7-10 / now
                               :mod (c7-7 / right))
                  :condition (c7-9 / connect-01
                                   :ARG1 (c7-5 / it)
                                   :ARG2 (c7-6 / criminal-organization
                                               :name (c7-3 / name
                                                           :op1 "ISIS")))
                  :mode imperative)
      :snt2 (c7-1 / cover-03
                  :polarity -))

# ::snt MT Live coverage of hostage situation unfolding in Sydney's Martin Place
# ::tokens ["MT", "Live", "coverage", "of", "hostage", "situation", "unfolding", "in", "Sydney", "'s", "Martin", "Place"]
# ::lemmas ["MT", "Live", "coverage", "of", "hostage", "situation", "unfolding", "in", "Sydney", "'s", "Martin", "Place"]
(c8-3 / cover-03
      :ARG0 (c8-9 / broadcast-program
                  :name (c8-8 / name
                              :op1 "MT"
                              :op2 "Live"))
      :ARG1 (c8-7 / situation
                  :mod (c8-0 / hostage)
                  :ARG1-of (c8-4 / unfold-02
                                 :location (c8-1 / street
                                                 :name (c8-2 / name
                                                             :op1 "Martin"
                                                             :op2 "Place")
                                                 :location (c8-6 / city
                                                                 :name (c8-5 / name
                                                                             :op1 "Sydney"))))))

# ::snt I hope this isn't what it looks like I hope everyone comes out safe
# ::tokens ["I", "hope", "this", "is", "n't", "what", "it", "looks", "like", "I", "hope", "everyone", "comes", "out", "safe"]
# ::lemmas ["i", "hope", "this", "be", "not", "what", "it", "look", "like", "i", "hope", "everyone", "come", "out", "safe"]
(c9-6 / and
      :op1 (c9-0 / hope-01
                 :ARG0 (c9-4 / i)
                 :ARG1 (c9-8 / resemble-01
                             :ARG1 (c9-1 / this)
                             :ARG2 (c9-2 / thing
                                         :ARG2-of (c9-7 / look-02
                                                        :ARG0 c9-1))
                             :polarity -))
      :op2 (c9-3 / hope-01
                 :ARG0 c9-4
                 :ARG1 (c9-5 / come-out-09
                             :ARG1 (c9-10 / everyone)
                             :ARG2 (c9-9 / safe-01
                                         :ARG1 c9-10))))

# ::snt Is that the Lindt chocolate cafe?
# ::tokens ["Is", "that", "the", "Lindt", "chocolate", "cafe", "?"]
# ::lemmas ["be", "that", "the", "Lindt", "chocolate", "cafe", "?"]
(c10-1 / cafe
       :polarity (c10-2 / amr-unknown)
       :name (c10-4 / name
                    :op1 "Lindt")
       :mod (c10-3 / chocolate)
       :domain (c10-0 / that))

# ::snt We need new hero.
# ::tokens ["We", "need", "new", "hero", "."]
# ::lemmas ["we", "need", "new", "hero", "."]
(c11-3 / need-01
       :ARG0 (c11-1 / we)
       :ARG1 (c11-2 / hero
                    :ARG1-of (c11-0 / new-01)))

# ::snt in =
# ::tokens ["in", "="]
# ::lemmas ["in", "="]
(c12-0 / be-located-at-91)
