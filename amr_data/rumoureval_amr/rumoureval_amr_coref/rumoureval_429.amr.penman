# ::snt If you are now feeling better, please step outside and say a few words to your press pool to prove your stamina
# ::tokens ["If", "you", "are", "now", "feeling", "better", ",", "please", "step", "outside", "and", "say", "a", "few", "words", "to", "your", "press", "pool", "to", "prove", "your", "stamina"]
# ::lemmas ["if", "you", "be", "now", "feel", "well", ",", "please", "step", "outside", "and", "say", "a", "few", "word", "to", "your", "press", "pool", "to", "prove", "your", "stamina"]
(c1-11 / and
       :op1 (c1-14 / step-01
                   :ARG0 (c1-0 / you)
                   :ARG2 (c1-13 / outside)
                   :mode imperative
                   :polite +)
       :op2 (c1-3 / say-01
                  :ARG0 c1-0
                  :ARG1 (c1-2 / word
                              :quant (c1-6 / few))
                  :ARG2 (c1-10 / pool
                               :mod (c1-9 / press)
                               :poss c1-0)
                  :purpose (c1-4 / prove-01
                                 :ARG0 c1-0
                                 :ARG1 (c1-1 / stamina
                                             :poss c1-0))
                  :mode imperative
                  :polite +)
       :condition (c1-5 / feel-01
                        :ARG0 c1-0
                        :ARG1 (c1-12 / good-02
                                     :ARG2-of (c1-7 / have-degree-91
                                                    :ARG1 c1-5
                                                    :ARG3 (c1-8 / more)))
                        :time (c1-15 / now)))

# ::snt Hillary passed out at the /11 Memorial Ceremony today, her knees buckled, went down &amp; lost a shoe poor thang
# ::tokens ["Hillary", "passed", "out", "at", "the", "/11", "Memorial", "Ceremony", "today", ",", "her", "knees", "buckled", ",", "went", "down", "&", "amp", ";", "lost", "a", "shoe", "poor", "thang"]
# ::lemmas ["Hillary", "pass", "out", "at", "the", "/11", "Memorial", "Ceremony", "today", ",", "her", "knee", "buckle", ",", "go", "down", "&", "amp", ";", "lose", "a", "shoe", "poor", "thang"]
(c2-9 / and
      :op1 (c2-5 / pass-out-11
                 :ARG0 (c2-3 / person
                             :name (c2-15 / name
                                          :op1 "Hillary")
                             :part (c2-0 / knee))
                 :time (c2-2 / today)
                 :location (c2-6 / ceremony
                                 :name (c2-4 / name
                                             :op1 "9/11"
                                             :op2 "Memorial"
                                             :op3 "C Ceremony"))
                 :manner (c2-12 / and
                                :op1 (c2-16 / buckle-01
                                            :ARG1 c2-0)
                                :op2 (c2-10 / go-02
                                            :ARG0 c2-3
                                            :ARG4 (c2-13 / and
                                                         :op1 (c2-7 / down)
                                                         :op2 (c2-8 / amp)))))
      :op2 (c2-11 / lose-02
                  :ARG0 c2-3
                  :ARG1 (c2-14 / shoe
                               :mod (c2-1 / poor))))

# ::snt weekend at bernies
# ::tokens ["weekend", "at", "bernies"]
# ::lemmas ["weekend", "at", "bernie"]
(c3-2 / be-located-at-91
      :ARG2 (c3-1 / bernies)
      :weekend (c3-0 / amr-unknown))

# ::snt I think this has been the plan all along. Get her across the finish line and others will do the governing.
# ::tokens ["I", "think", "this", "has", "been", "the", "plan", "all", "along", ".", "Get", "her", "across", "the", "finish", "line", "and", "others", "will", "do", "the", "governing", "."]
# ::lemmas ["i", "think", "this", "have", "be", "the", "plan", "all", "along", ".", "get", "she", "across", "the", "finish", "line", "and", "other", "will", "do", "the", "governing", "."]
(c4-3 / multi-sentence
      :snt1 (c4-4 / think-01
                  :ARG0 (c4-8 / i)
                  :ARG1 (c4-7 / plan-01
                              :ARG1 (c4-2 / this)
                              :duration (c4-9 / all-along)))
      :snt2 (c4-13 / and
                   :op1 (c4-10 / get-05
                               :ARG0 (c4-0 / you)
                               :ARG1 (c4-15 / she)
                               :ARG2 (c4-14 / across
                                            :op1 (c4-11 / line
                                                        :mod (c4-5 / finish-01)))
                               :mode imperative)
                   :op2 (c4-6 / do-02
                              :ARG0 (c4-12 / other)
                              :ARG1 (c4-1 / govern-01))))

# ::snt Twitter had 'Medical Episode' trending, but it seems to have disappeared. Twitter covering up for Hillary.
# ::tokens ["Twitter", "had", "'", "Medical", "Episode", "'", "trending", ",", "but", "it", "seems", "to", "have", "disappeared", ".", "Twitter", "covering", "up", "for", "Hillary", "."]
# ::lemmas ["Twitter", "have", "'", "Medical", "Episode", "'", "trending", ",", "but", "it", "seem", "to", "have", "disappear", ".", "twitter", "cover", "up", "for", "Hillary", "."]
(c5-2 / multi-sentence
      :snt1 (c5-0 / have-concession-91
                  :ARG1 (c5-11 / seem-01
                               :ARG1 (c5-5 / disappear-01
                                           :ARG1 (c5-6 / it)))
                  :ARG2 (c5-3 / have-03
                              :ARG0 (c5-7 / publication
                                          :name (c5-12 / name
                                                       :op1 "Twitter"))
                              :ARG1 (c5-1 / episode
                                          :mod (c5-10 / medicine))))
      :snt2 (c5-8 / cover-up-04
                  :ARG0 c5-7
                  :ARG1 (c5-4 / person
                              :name (c5-9 / name
                                          :op1 "Hillary"))))

# ::snt look she is so arrogant if she has alzheimers she'd still demand to be president. She's does not care if she's
# ::tokens ["look", "she", "is", "so", "arrogant", "if", "she", "has", "alzheimers", "she", "'d", "still", "demand", "to", "be", "president", ".", "She", "'s", "does", "not", "care", "if", "she", "'s"]
# ::lemmas ["look", "she", "be", "so", "arrogant", "if", "she", "have", "alzheimer", "she", "would", "still", "demand", "to", "be", "president", ".", "she", "be", "do", "not", "care", "if", "she", "be"]
(c6-5 / multi-sentence
      :snt1 (c6-11 / look-01
                   :ARG0 (c6-0 / you)
                   :ARG1 (c6-2 / have-degree-91
                               :ARG1 (c6-14 / she)
                               :ARG2 (c6-12 / arrogant)
                               :ARG3 (c6-3 / so)
                               :ARG6 (c6-8 / demand-01
                                           :ARG0 c6-14
                                           :ARG1 (c6-7 / have-org-role-91
                                                       :ARG0 c6-14
                                                       :ARG2 (c6-9 / president))
                                           :mod (c6-1 / still)
                                           :condition (c6-15 / have-03
                                                             :ARG0 c6-14
                                                             :ARG1 (c6-4 / disease
                                                                         :name (c6-16 / name
                                                                                      :op1 "Alzheimer's")))))
                   :mode imperative)
      :snt2 (c6-10 / care-01
                   :ARG0 (c6-6 / she)
                   :ARG1 (c6-13 / have-org-role-91
                                :ARG0 c6-6
                                :ARG2 c6-9)
                   :polarity -))

# ::snt It's still trending at .
# ::tokens ["It", "'s", "still", "trending", "at", "."]
# ::lemmas ["it", "be", "still", "trend", "at", "."]
(c7-2 / trending-02
      :ARG1 (c7-1 / it)
      :mod (c7-0 / still))

# ::snt Don't forget the double vision, blood clots, mobility issues, hostility, uncontrollable lying, and unfounded attacks on voters.
# ::tokens ["Do", "n't", "forget", "the", "double", "vision", ",", "blood", "clots", ",", "mobility", "issues", ",", "hostility", ",", "uncontrollable", "lying", ",", "and", "unfounded", "attacks", "on", "voters", "."]
# ::lemmas ["do", "not", "forget", "the", "double", "vision", ",", "blood", "clot", ",", "mobility", "issue", ",", "hostility", ",", "uncontrollable", "lying", ",", "and", "unfounded", "attack", "on", "voter", "."]
(c8-3 / forget-01
      :ARG0 (c8-0 / you)
      :ARG1 (c8-10 / and
                   :op1 (c8-14 / see-01
                               :mod (c8-5 / double))
                   :op2 (c8-6 / clothe-01
                              :mod (c8-15 / blood))
                   :op3 (c8-7 / issue-02
                              :ARG0 (c8-4 / mobility))
                   :op4 (c8-1 / hostility)
                   :op5 (c8-11 / lie-08
                               :ARG1-of (c8-12 / control-01
                                               :polarity -))
                   :op6 (c8-13 / attack-01
                               :ARG1 (c8-8 / person
                                           :ARG0-of (c8-9 / vote-01))
                               :ARG1-of (c8-2 / found-01
                                              :polarity -)))
      :polarity -
      :mode imperative)

# ::snt And her massive inability to remember important facts or handle national e-mails, which belong to US, not her.
# ::tokens ["And", "her", "massive", "inability", "to", "remember", "important", "facts", "or", "handle", "national", "e", "-", "mails", ",", "which", "belong", "to", "US", ",", "not", "her", "."]
# ::lemmas ["and", "her", "massive", "inability", "to", "remember", "important", "fact", "or", "handle", "national", "e", "-", "mail", ",", "which", "belong", "to", "US", ",", "not", "she", "."]
(c9-8 / and
      :op2 (c9-6 / capable-01
                 :ARG1 (c9-12 / she)
                 :ARG2 (c9-11 / or
                              :op1 (c9-10 / remember-01
                                          :ARG0 c9-12
                                          :ARG1 (c9-2 / fact
                                                      :ARG1-of (c9-7 / important-01)))
                              :op2 (c9-0 / handle-01
                                         :ARG0 c9-12
                                         :ARG1 (c9-14 / email
                                                      :mod (c9-13 / nation)
                                                      :ARG0-of (c9-15 / belong-01
                                                                      :ARG1 (c9-4 / country
                                                                                  :name (c9-5 / name
                                                                                              :op1 "US"))
                                                                      :ARG1-of (c9-1 / instead-of-91
                                                                                     :ARG2 (c9-9 / belong-01
                                                                                                 :ARG0 c9-14
                                                                                                 :ARG1 c9-12))))))
                 :mod (c9-3 / massive)
                 :polarity -))

# ::snt Both mentally &amp; physically challenged fine choice for Pres
# ::tokens ["Both", "mentally", "&", "amp", ";", "physically", "challenged", "fine", "choice", "for", "Pres"]
# ::lemmas ["both", "mentally", "&", "amp", ";", "physically", "challenge", "fine", "choice", "for", "pre"]
(c10-5 / and
       :op1 c10-5
       :op1 (c10-0 / mental)
       :op2 (c10-6 / amp)
       :mod (c10-9 / both)
       :op2 (c10-3 / challenge-01
                   :ARG2 (c10-7 / choose-01
                                :ARG0 (c10-4 / person
                                             :name (c10-8 / name
                                                          :op1 "Pres"))
                                :ARG1-of (c10-1 / fine-04)
                                :manner (c10-2 / physical))))

# ::snt yesterday, was a distraction from &amp; emails. Today is opposite.
# ::tokens ["yesterday", ",", "was", "a", "distraction", "from", "&", "amp", ";", "emails", ".", "Today", "is", "opposite", "."]
# ::lemmas ["yesterday", ",", "be", "a", "distraction", "from", "&", "amp", ";", "email", ".", "Today", "be", "opposite", "."]
(c11-3 / multi-sentence
       :snt1 (c11-6 / distract-01
                    :ARG2 (c11-7 / and
                                 :op1 (c11-2 / thing
                                             :name (c11-9 / name
                                                          :op1 "&"
                                                          :op2 "amp"))
                                 :op2 (c11-4 / thing
                                             :ARG1-of (c11-1 / email-01)))
                    :time (c11-0 / yesterday))
       :snt2 (c11-8 / opposite-01
                    :ARG1 (c11-5 / today)))

# ::snt This "medical episode" as is calling it will definitely heighten the suggestion that something is up with her health
# ::tokens ["This", "\"", "medical", "episode", "\"", "as", "is", "calling", "it", "will", "definitely", "heighten", "the", "suggestion", "that", "something", "is", "up", "with", "her", "health"]
# ::lemmas ["this", "\"", "medical", "episode", "\"", "as", "be", "call", "it", "will", "definitely", "heighten", "the", "suggestion", "that", "something", "be", "up", "with", "her", "health"]
(c12-0 / heighten-01
       :ARG0 (c12-10 / episode
                     :mod (c12-3 / medicine)
                     :mod (c12-2 / this)
                     :ARG1-of (c12-7 / call-01
                                     :ARG2 c12-10))
       :ARG1 (c12-9 / suggest-01
                    :ARG1 (c12-4 / thing
                                 :ARG0-of (c12-8 / concern-02
                                                 :ARG1 (c12-5 / health
                                                              :poss (c12-1 / she)))))
       :mod (c12-6 / definite))

# ::snt So we will finally get a tRUMP proper medical evaluation? (other than the one he dictated fromhis limo?)
# ::tokens ["So", "we", "will", "finally", "get", "a", "tRUMP", "proper", "medical", "evaluation", "?", "(", "other", "than", "the", "one", "he", "dictated", "fromhis", "limo", "?", ")"]
# ::lemmas ["so", "we", "will", "finally", "get", "a", "tRUMP", "proper", "medical", "evaluation", "?", "(", "other", "than", "the", "one", "he", "dictate", "fromhis", "limo", "?", ")"]
(c13-8 / get-01
       :polarity (c13-7 / amr-unknown)
       :ARG0 (c13-0 / we)
       :ARG1 (c13-10 / evaluate-01
                     :mod (c13-5 / proper)
                     :mod (c13-2 / medicine))
       :mod (c13-3 / final)
       :ARG2-of (c13-6 / except-01
                       :ARG1 (c13-11 / evaluate-01
                                     :ARG1-of (c13-4 / dictate-01
                                                     :ARG0 (c13-1 / he)
                                                     :source (c13-9 / limousine
                                                                    :poss c13-1)))))

# ::snt Hillary Clinton almost fainted. I have done this hundreds of times
# ::tokens ["Hillary", "Clinton", "almost", "fainted", ".", "I", "have", "done", "this", "hundreds", "of", "times"]
# ::lemmas ["Hillary", "Clinton", "almost", "faint", ".", "i", "have", "do", "this", "hundreds", "of", "time"]
(c14-1 / multi-sentence
       :snt1 (c14-2 / fainted-01
                    :ARG1 (c14-4 / person
                                 :name (c14-8 / name
                                              :op1 "Hillary"
                                              :op2 "Clinton"))
                    :mod (c14-6 / almost))
       :snt2 (c14-3 / do-02
                    :ARG0 (c14-5 / i)
                    :ARG1 (c14-0 / this)
                    :frequency (c14-7 / multiple
                                      :op1 100)))

# ::snt what happens if she was to die before the election? Kaine ? This is a very possible grey area that scares me.
# ::tokens ["what", "happens", "if", "she", "was", "to", "die", "before", "the", "election", "?", "Kaine", "?", "This", "is", "a", "very", "possible", "grey", "area", "that", "scares", "me", "."]
# ::lemmas ["what", "happen", "if", "she", "be", "to", "die", "before", "the", "election", "?", "Kaine", "?", "this", "be", "a", "very", "possible", "grey", "area", "that", "scare", "i", "."]
(c15-4 / multi-sentence
       :snt1 (c15-1 / have-condition-91
                    :ARG1 (c15-10 / amr-unknown)
                    :ARG2 (c15-6 / die-01
                                 :ARG1 (c15-13 / she)
                                 :time (c15-16 / before
                                               :op1 (c15-15 / elect-01)))
                    :ARG1-of (c15-2 / say-01
                                    :ARG0 (c15-7 / person
                                                 :name (c15-14 / name
                                                               :op1 "Kaine"))))
       :snt2 (c15-12 / area
                     :ARG1-of (c15-11 / gray-02)
                     :ARG1-of (c15-5 / possible-01
                                     :degree (c15-9 / very))
                     :ARG0-of (c15-0 / scare-01
                                     :ARG1 (c15-8 / i))
                     :domain (c15-3 / this)))

# ::snt I will guarantee you if elected she won't make it a year and you'll get president Tim kaine. Scary.
# ::tokens ["I", "will", "guarantee", "you", "if", "elected", "she", "wo", "n't", "make", "it", "a", "year", "and", "you", "'ll", "get", "president", "Tim", "kaine", ".", "Scary", "."]
# ::lemmas ["i", "will", "guarantee", "you", "if", "elect", "she", "will", "not", "make", "it", "a", "year", "and", "you", "'ll", "get", "president", "Tim", "kaine", ".", "scary", "."]
(c16-4 / multi-sentence
       :snt1 (c16-11 / guarantee-01
                     :ARG0 (c16-8 / i)
                     :ARG1 (c16-10 / and
                                   :op1 (c16-12 / make-it-14
                                                :ARG0 (c16-13 / she)
                                                :ARG1 (c16-3 / temporal-quantity
                                                             :unit (c16-0 / year)
                                                             :quant 1)
                                                :polarity -)
                                   :op2 (c16-1 / get-01
                                               :ARG0 (c16-14 / you)
                                               :ARG1 (c16-9 / person
                                                            :name (c16-15 / name
                                                                          :op1 "Tim"
                                                                          :op2 "Kaine")
                                                            :ARG0-of (c16-2 / have-org-role-91
                                                                            :ARG2 (c16-7 / president))))
                                   :condition (c16-5 / elect-01
                                                     :ARG1 c16-14))
                     :ARG2 c16-14)
       :snt2 (c16-6 / scary-03))

# ::snt I'm guessing uncle joe?????
# ::tokens ["I", "'m", "guessing", "uncle", "joe", "?", "?", "?", "?", "?"]
# ::lemmas ["i", "be", "guess", "uncle", "joe", "?", "?", "?", "?", "?"]
(c17-3 / guess-01
       :ARG0 (c17-1 / i)
       :ARG1 (c17-0 / person
                    :name (c17-4 / name
                                 :op1 "Uncle"
                                 :op2 "Joe"))
       :polarity (c17-2 / amr-unknown))

# ::snt they'd better make sure M. Bloomberg is ready to run
# ::tokens ["they", "'d", "better", "make", "sure", "M.", "Bloomberg", "is", "ready", "to", "run"]
# ::lemmas ["they", "would", "well", "make", "sure", "M.", "Bloomberg", "be", "ready", "to", "run"]
(c18-4 / recommend-01
       :ARG1 (c18-6 / ensure-01
                    :ARG0 (c18-1 / they)
                    :ARG1 (c18-0 / ready-02
                                 :ARG1 (c18-3 / person
                                              :name (c18-5 / name
                                                           :op1 "M."
                                                           :op2 "Bloomberg"))
                                 :ARG2 (c18-2 / run-02
                                              :ARG0 c18-3))))

# ::snt as a settler of course.
# ::tokens ["as", "a", "settler", "of", "course", "."]
# ::lemmas ["as", "a", "settler", "of", "course", "."]
(c19-1 / person
       :ARG0-of (c19-0 / settle-03)
       :mod (c19-2 / of-course))

# ::snt Bill, you R the kind of guy I would like to have a beer with,and I don't drink. You have some great thoughts.
# ::tokens ["Bill", ",", "you", "R", "the", "kind", "of", "guy", "I", "would", "like", "to", "have", "a", "beer", "with", ",", "and", "I", "do", "n't", "drink", ".", "You", "have", "some", "great", "thoughts", "."]
# ::lemmas ["Bill", ",", "you", "r", "the", "kind", "of", "guy", "i", "would", "like", "to", "have", "a", "beer", "with", ",", "and", "i", "do", "not", "drink", ".", "you", "have", "some", "great", "thought", "."]
(c20-5 / multi-sentence
       :snt1 (c20-13 / say-01
                     :ARG0 (c20-8 / i)
                     :ARG1 (c20-10 / and
                                   :op1 (c20-11 / guy
                                                :domain (c20-9 / person
                                                               :name (c20-14 / name
                                                                             :op1 "Bill"))
                                                :mod (c20-0 / kind)
                                                :ARG2-of (c20-12 / like-02
                                                                 :ARG0 c20-8
                                                                 :ARG1 (c20-2 / have-06
                                                                              :ARG0 c20-8
                                                                              :ARG1 (c20-15 / beer)
                                                                              :accompanier c20-9)))
                                   :op2 (c20-7 / drink-01
                                               :ARG0 c20-8
                                               :ARG1 c20-15
                                               :polarity -))
                     :ARG2 c20-9)
       :snt2 (c20-4 / think-01
                    :ARG0 (c20-1 / you)
                    :mod (c20-3 / great)
                    :quant (c20-6 / some)))

# ::snt not fit to lead. She thinks it's her god given right to be president.
# ::tokens ["not", "fit", "to", "lead", ".", "She", "thinks", "it", "'s", "her", "god", "given", "right", "to", "be", "president", "."]
# ::lemmas ["not", "fit", "to", "lead", ".", "she", "think", "it", "be", "her", "god", "give", "right", "to", "be", "president", "."]
(c22-4 / multi-sentence
       :snt1 (c22-5 / fit-05
                    :ARG1 (c22-11 / she)
                    :ARG2 (c22-8 / lead-02
                                 :ARG0 c22-11)
                    :polarity -)
       :snt2 (c22-3 / think-01
                    :ARG0 (c22-1 / she)
                    :ARG1 (c22-10 / right-05
                                  :ARG1 (c22-0 / she)
                                  :ARG2 (c22-2 / have-org-role-91
                                               :ARG0 c22-0
                                               :ARG2 (c22-7 / president))
                                  :ARG2-of (c22-9 / give-01
                                                  :ARG1 (c22-6 / god
                                                               :poss c22-0)))))

# ::snt Hope she doesn't drop dead before Election Day. I want to beat her &amp; her corruption while she's still alive.
# ::tokens ["Hope", "she", "does", "n't", "drop", "dead", "before", "Election", "Day", ".", "I", "want", "to", "beat", "her", "&", "amp", ";", "her", "corruption", "while", "she", "'s", "still", "alive", "."]
# ::lemmas ["hope", "she", "do", "not", "drop", "dead", "before", "Election", "Day", ".", "i", "want", "to", "beat", "she", "&", "amp", ";", "her", "corruption", "while", "she", "be", "still", "alive", "."]
(c23-5 / multi-sentence
       :snt1 (c23-2 / hope-01
                    :ARG0 (c23-8 / i)
                    :ARG1 (c23-7 / drop-01
                                 :ARG1 (c23-13 / she)
                                 :ARG4 (c23-3 / die-01
                                              :ARG1 c23-13)
                                 :time (c23-16 / before
                                               :op1 (c23-15 / event
                                                            :name (c23-14 / name
                                                                          :op1 "Election"
                                                                          :op2 "Day")))
                                 :polarity -))
       :snt2 (c23-1 / want-01
                    :ARG0 (c23-4 / i)
                    :ARG1 (c23-9 / beat-03
                                 :ARG0 c23-4
                                 :ARG1 (c23-10 / and
                                               :op1 (c23-6 / she)
                                               :op2 (c23-12 / amp))
                                 :time (c23-11 / live-01
                                               :ARG0 c23-6
                                               :mod (c23-0 / still)))))

# ::snt we have the right to have a healthy President. We need to see
# ::tokens ["we", "have", "the", "right", "to", "have", "a", "healthy", "President", ".", "We", "need", "to", "see"]
# ::lemmas ["we", "have", "the", "right", "to", "have", "a", "healthy", "President", ".", "we", "need", "to", "see"]
(c24-2 / multi-sentence
       :snt1 (c24-6 / right-05
                    :ARG1 (c24-0 / we)
                    :ARG2 (c24-1 / have-03
                                 :ARG0 c24-0
                                 :ARG1 (c24-5 / person
                                              :ARG0-of (c24-3 / have-org-role-91
                                                              :ARG2 (c24-4 / president))
                                              :mod (c24-9 / healthy))))
       :snt2 (c24-10 / need-01
                     :ARG0 (c24-7 / we)
                     :ARG1 (c24-8 / see-01
                                  :ARG0 c24-7)))

# ::snt Who's Gonna fill them shoes
# ::tokens ["Who", "'s", "Gon", "na", "fill", "them", "shoes"]
# ::lemmas ["who", "be", "going", "to", "fill", "they", "shoe"]
(c25-0 / fill-01
       :ARG0 (c25-2 / amr-unknown)
       :ARG1 (c25-1 / shoe
                    :poss (c25-3 / they)))

# ::snt You left out "loss of shoes".
# ::tokens ["You", "left", "out", "\"", "loss", "of", "shoes", "\"", "."]
# ::lemmas ["you", "leave", "out", "\"", "loss", "of", "shoe", "\"", "."]
(c26-2 / leave-out-03
       :ARG0 (c26-0 / you)
       :ARG1 (c26-3 / lose-02
                    :ARG1 (c26-1 / shoe)))

# ::snt she proved it when she showed everybody she could open a jar of pickles
# ::tokens ["she", "proved", "it", "when", "she", "showed", "everybody", "she", "could", "open", "a", "jar", "of", "pickles"]
# ::lemmas ["she", "prove", "it", "when", "she", "show", "everybody", "she", "could", "open", "a", "jar", "of", "pickle"]
(c27-5 / prove-01
       :ARG0 (c27-7 / she)
       :ARG1 (c27-4 / it)
       :time (c27-1 / show-01
                    :ARG0 c27-7
                    :ARG1 (c27-3 / possible-01
                                 :ARG1 (c27-6 / open-01
                                              :ARG0 c27-7
                                              :ARG1 (c27-2 / jar
                                                           :consist-of (c27-0 / pickle))))
                    :ARG2 (c27-8 / everybody)))

# ::snt Can you IMAGINE if Trump would have fainted, fallen over, and lost his shoe under his SUV???
# ::tokens ["Can", "you", "IMAGINE", "if", "Trump", "would", "have", "fainted", ",", "fallen", "over", ",", "and", "lost", "his", "shoe", "under", "his", "SUV", "?", "?", "?"]
# ::lemmas ["can", "you", "IMAGINE", "if", "Trump", "would", "have", "faint", ",", "fall", "over", ",", "and", "lose", "his", "shoe", "under", "his", "SUV", "?", "?", "?"]
(c28-6 / possible-01
       :ARG1 (c28-5 / imagine-01
                    :ARG0 (c28-0 / you)
                    :ARG1 (c28-1 / have-condition-91
                                 :ARG2 (c28-9 / and
                                              :op1 (c28-2 / fainted-01
                                                          :ARG1 (c28-4 / person
                                                                       :name (c28-14 / name
                                                                                     :op1 "Trump")))
                                              :op2 (c28-11 / fall-01
                                                           :ARG1 c28-4
                                                           :ARG4 (c28-3 / over))
                                              :op3 (c28-10 / lose-02
                                                           :ARG0 c28-4
                                                           :ARG1 (c28-13 / shoe
                                                                         :poss c28-4)
                                                           :location (c28-8 / under
                                                                            :op1 (c28-7 / vehicle
                                                                                        :name c28-14
                                                                                        :op1 "SUV")
                                                                            :poss c28-4)))))
       :polarity (c28-12 / amr-unknown))

# ::snt The left would be calling for a forfeitfrom for sure
# ::tokens ["The", "left", "would", "be", "calling", "for", "a", "forfeitfrom", "for", "sure"]
# ::lemmas ["the", "left", "would", "be", "call", "for", "a", "forfeitfrom", "for", "sure"]
(c29-2 / call-03
       :ARG0 (c29-1 / person
                    :ARG1-of (c29-3 / left-19))
       :ARG1 (c29-0 / forfeit-01)
       :ARG1-of (c29-4 / sure-02))

# ::snt Yes, you would have been pissed if we were not compassionate... and lied and said he injected by a hillary bot
# ::tokens ["Yes", ",", "you", "would", "have", "been", "pissed", "if", "we", "were", "not", "compassionate", "...", "and", "lied", "and", "said", "he", "injected", "by", "a", "hillary", "bot"]
# ::lemmas ["yes", ",", "you", "would", "have", "be", "piss", "if", "we", "be", "not", "compassionate", "...", "and", "lie", "and", "say", "he", "inject", "by", "a", "hillary", "bot"]
(c30-4 / piss-03
       :ARG1 (c30-0 / you)
       :condition (c30-5 / compassionate
                         :domain (c30-1 / we)
                         :polarity -)
       :mod (c30-9 / yes)
       :mod (c30-7 / lie-08
                   :ARG0 c30-0)
       :mod (c30-8 / say-01
                   :ARG0 c30-0
                   :ARG1 (c30-6 / inject-01
                                :ARG0 (c30-10 / bot
                                              :mod (c30-2 / hill))
                                :ARG1 (c30-3 / he))))

# ::snt Another LOW LIFE Trump Troll blocked. Where does Hillary DIG UP these NUT CASES?
# ::tokens ["Another", "LOW", "LIFE", "Trump", "Troll", "blocked", ".", "Where", "does", "Hillary", "DIG", "UP", "these", "NUT", "CASES", "?"]
# ::lemmas ["another", "low", "life", "Trump", "Troll", "block", ".", "where", "do", "Hillary", "DIG", "up", "these", "NUT", "case", "?"]
(c31-1 / multi-sentence
       :snt1 (c31-14 / block-01
                     :ARG1 (c31-8 / life
                                  :ARG1-of (c31-12 / low-04)
                                  :mod (c31-7 / another)
                                  :ARG1-of (c31-0 / troll-01
                                                  :ARG0 (c31-5 / person
                                                               :name (c31-13 / name
                                                                             :op1 "Trump")))))
       :snt2 (c31-4 / dig-up-02
                    :ARG0 (c31-3 / person
                                 :name (c31-6 / name
                                              :op1 "Hillary"))
                    :ARG1 (c31-11 / loophole
                                  :mod (c31-2 / this)
                                  :mod (c31-9 / nuts))
                    :location (c31-10 / amr-unknown)))

# ::snt He has fallen so why is there no medical report on his dementia and balance issues?
# ::tokens ["He", "has", "fallen", "so", "why", "is", "there", "no", "medical", "report", "on", "his", "dementia", "and", "balance", "issues", "?"]
# ::lemmas ["he", "have", "fall", "so", "why", "be", "there", "no", "medical", "report", "on", "his", "dementia", "and", "balance", "issue", "?"]
(c32-2 / fall-01
       :ARG1 (c32-0 / he)
       :ARG0-of (c32-5 / cause-01
                       :ARG1 (c32-8 / report-01
                                    :ARG1 (c32-7 / and
                                                 :op1 (c32-6 / issue-02
                                                             :ARG0 (c32-4 / dementia
                                                                          :poss c32-0))
                                                 :op2 (c32-1 / issue-02
                                                             :ARG0 (c32-11 / balance-01
                                                                           :ARG1 c32-0)))
                                    :mod (c32-3 / medicine)
                                    :ARG1-of (c32-10 / cause-01
                                                     :ARG0 (c32-9 / amr-unknown))
                                    :polarity -)))

# ::snt What will happen to America if it gets hot in the 'war room'? She won't give up controlof the button no matter what
# ::tokens ["What", "will", "happen", "to", "America", "if", "it", "gets", "hot", "in", "the", "'", "war", "room", "'", "?", "She", "wo", "n't", "give", "up", "controlof", "the", "button", "no", "matter", "what"]
# ::lemmas ["what", "will", "happen", "to", "America", "if", "it", "get", "hot", "in", "the", "'", "war", "room", "'", "?", "she", "will", "not", "give", "up", "controlof", "the", "button", "no", "matter", "what"]
(c33-5 / multi-sentence
       :snt1 (c33-9 / amr-unknown
                    :beneficiary (c33-6 / country
                                        :name (c33-13 / name
                                                      :op1 "America"))
                    :condition (c33-8 / get-03
                                      :ARG1 (c33-7 / it)
                                      :ARG2 (c33-2 / hot-04
                                                   :ARG1 c33-7
                                                   :location (c33-10 / room
                                                                     :mod (c33-1 / war-01)))))
       :snt2 (c33-3 / give-up-07
                    :ARG0 (c33-12 / she)
                    :ARG1 (c33-11 / control-01
                                  :ARG0 c33-12
                                  :ARG1 (c33-14 / button))
                    :ARG1-of (c33-0 / regardless-91
                                    :ARG2 (c33-4 / thing))
                    :polarity -))

# ::snt Also, except for having a /7 MD by her side giving her Valium injections, Hillary is in good health!
# ::tokens ["Also", ",", "except", "for", "having", "a", "/7", "MD", "by", "her", "side", "giving", "her", "Valium", "injections", ",", "Hillary", "is", "in", "good", "health", "!"]
# ::lemmas ["also", ",", "except", "for", "have", "a", "/7", "md", "by", "her", "side", "give", "she", "Valium", "injection", ",", "Hillary", "be", "in", "good", "health", "!"]
(c34-0 / health
       :ARG1-of (c34-11 / good-02)
       :domain (c34-8 / person
                      :name (c34-14 / name
                                    :op1 "Hillary"))
       :ARG2-of (c34-1 / except-01
                       :ARG1 (c34-5 / have-03
                                    :ARG0 c34-8
                                    :ARG1 (c34-15 / be-located-at-91
                                                  :ARG1 (c34-7 / doctor
                                                               :mod (c34-3 / medicine)
                                                               :mod (c34-13 / slash
                                                                            :op1 7))
                                                  :ARG2 (c34-2 / side
                                                               :poss c34-8)
                                                  :purpose (c34-4 / give-01
                                                                  :ARG0 c34-7
                                                                  :ARG1 (c34-9 / inject-01
                                                                               :ARG1 (c34-6 / product
                                                                                            :name (c34-10 / name
                                                                                                          :op1 "Valium"))
                                                                               :ARG2 c34-8)
                                                                  :ARG2 c34-8))))
       :mod (c34-12 / also)
       :mode expressive)

# ::snt True, after all she can open a pickle jar.
# ::tokens ["True", ",", "after", "all", "she", "can", "open", "a", "pickle", "jar", "."]
# ::lemmas ["true", ",", "after", "all", "she", "can", "open", "a", "pickle", "jar", "."]
(c35-0 / true-01
       :ARG1 (c35-3 / possible-01
                    :ARG1 (c35-5 / open-01
                                 :ARG0 (c35-6 / she)
                                 :ARG1 (c35-1 / jar
                                              :mod (c35-2 / pickle)))
                    :mod (c35-4 / after-all)))

# ::snt some one QUICK get a jar of pickles to open an she'll make a miraculous recovery
# ::tokens ["some", "one", "QUICK", "get", "a", "jar", "of", "pickles", "to", "open", "an", "she", "'ll", "make", "a", "miraculous", "recovery"]
# ::lemmas ["some", "one", "quick", "get", "a", "jar", "of", "pickle", "to", "open", "an", "she", "'ll", "make", "a", "miraculous", "recovery"]
(c36-6 / get-01
       :ARG0 (c36-9 / one
                    :mod (c36-10 / some))
       :ARG1 (c36-1 / jar
                    :consist-of (c36-4 / pickle))
       :purpose (c36-3 / open-01
                       :ARG0 c36-9
                       :ARG1 c36-1)
       :ARG0-of (c36-5 / cause-01
                       :ARG1 (c36-8 / recover-01
                                    :ARG1 (c36-0 / she)
                                    :manner (c36-2 / miraculous)))
       :mod (c36-7 / lucky))

# ::snt love the sarcasm. Lol
# ::tokens ["love", "the", "sarcasm", ".", "Lol"]
# ::lemmas ["love", "the", "sarcasm", ".", "Lol"]
(c37-0 / multi-sentence
       :snt1 (c37-2 / love-01
                    :ARG0 (c37-1 / i)
                    :ARG1 (c37-3 / sarcasm))
       :snt2 (c37-5 / laugh-01
                    :ARG0 c37-1
                    :manner (c37-4 / loud)
                    :mode expressive))

# ::snt Terrifying: Tim Kaine as Presumptive President.
# ::tokens ["Terrifying", ":", "Tim", "Kaine", "as", "Presumptive", "President", "."]
# ::lemmas ["terrifying", ":", "Tim", "Kaine", "as", "Presumptive", "President", "."]
(c38-3 / thing
       :ARG0-of (c38-2 / terrify-01)
       :domain (c38-5 / person
                      :name (c38-6 / name
                                   :op1 "Tim"
                                   :op2 "Kaine")
                      :ARG0-of (c38-1 / have-org-role-91
                                      :ARG2 (c38-4 / president
                                                   :ARG2-of (c38-0 / presuminate-01)))))

# ::snt . she also had concussions that prevented her from testifying before Congress-her health has been bad a long time-
# ::tokens [".", "she", "also", "had", "concussions", "that", "prevented", "her", "from", "testifying", "before", "Congress", "-", "her", "health", "has", "been", "bad", "a", "long", "time-"]
# ::lemmas [".", "she", "also", "have", "concussion", "that", "prevent", "she", "from", "testify", "before", "Congress", "-", "her", "health", "have", "be", "bad", "a", "long", "time-"]
(c39-3 / multi-sentence
       :snt1 (c39-0 / have-03
                    :ARG0 (c39-10 / she)
                    :ARG1 (c39-6 / concussion
                                 :ARG0-of (c39-5 / prevent-01
                                                 :ARG1 (c39-2 / testify-01
                                                              :ARG0 c39-10
                                                              :ARG2 (c39-7 / government-organization
                                                                           :name (c39-11 / name
                                                                                         :op1 "Congress")))))
                    :mod (c39-8 / also))
       :snt2 (c39-12 / bad-07
                     :ARG1 (c39-4 / health
                                  :poss (c39-1 / she))
                     :ARG1-of (c39-9 / long-03)))

# ::snt hahahahaha
# ::tokens ["hahahahaha"]
# ::lemmas ["hahahahaha"]
(c40-0 / haha
       :mode expressive)

# ::snt Walking rigor mortis
# ::tokens ["Walking", "rigor", "mortis"]
# ::lemmas ["walk", "rigor", "mortis"]
(c41-2 / rigor
       :mod (c41-0 / mortis)
       :manner-of (c41-1 / walk-01))

# ::snt &amp; thanks to her nd security detail, she has both shoes. ://
# ::tokens ["&", "amp", ";", "thanks", "to", "her", "nd", "security", "detail", ",", "she", "has", "both", "shoes", ".", ":", "//"]
# ::lemmas ["&", "amp", ";", "thank", "to", "her", "nd", "security", "detail", ",", "she", "have", "both", "shoe", ".", ":", "//"]
(c42-6 / and
       :op2 (c42-2 / have-03
                   :ARG0 (c42-7 / she)
                   :ARG1 (c42-1 / shoe
                                :mod (c42-8 / both))
                   :ARG1-of (c42-5 / cause-01
                                   :ARG0 (c42-4 / detail
                                                :mod (c42-0 / security)
                                                :poss c42-7
                                                :mod (c42-3 / dear)))))

# ::snt All commies are
# ::tokens ["All", "commies", "are"]
# ::lemmas ["all", "commie", "be"]
(c43-1 / commie
       :mod (c43-0 / all))

# ::snt - and don't forget the Stroke.
# ::tokens ["-", "and", "do", "n't", "forget", "the", "Stroke", "."]
# ::lemmas ["-", "and", "do", "not", "forget", "the", "Stroke", "."]
(c44-3 / and
       :op2 (c44-2 / forget-01
                   :ARG0 (c44-0 / you)
                   :ARG1 (c44-1 / event
                                :name (c44-4 / name
                                             :op1 "Stroke"))
                   :polarity -
                   :mode imperative))

# ::snt I just saw the video. She didn't faint. That was a seizure in which she lost consciousness. My son gets them so I know...
# ::tokens ["I", "just", "saw", "the", "video", ".", "She", "did", "n't", "faint", ".", "That", "was", "a", "seizure", "in", "which", "she", "lost", "consciousness", ".", "My", "son", "gets", "them", "so", "I", "know", "..."]
# ::lemmas ["i", "just", "see", "the", "video", ".", "she", "do", "not", "faint", ".", "that", "be", "a", "seizure", "in", "which", "she", "lose", "consciousness", ".", "my", "son", "get", "they", "so", "i", "know", "..."]
(c45-19 / multi-sentence
        :snt1 (c45-8 / see-01
                     :ARG0 (c45-13 / i)
                     :ARG1 (c45-1 / video)
                     :mod (c45-6 / just))
        :snt2 (c45-12 / faint-01
                      :ARG0 (c45-10 / she)
                      :polarity -)
        :snt3 (c45-9 / seizure
                     :domain (c45-5 / that)
                     :subevent-of (c45-2 / lose-02
                                         :ARG0 (c45-11 / she)
                                         :ARG1 (c45-7 / consciousness)))
        :snt4 (c45-16 / get-01
                      :ARG0 (c45-14 / person
                                    :ARG0-of (c45-0 / have-rel-role-91
                                                    :ARG1 (c45-4 / i)
                                                    :ARG2 (c45-15 / son)))
                      :ARG1 (c45-18 / they)
                      :ARG0-of (c45-3 / cause-01
                                      :ARG1 (c45-17 / know-01
                                                    :ARG0 c45-4))))

# ::snt for a mostly dead lizard
# ::tokens ["for", "a", "mostly", "dead", "lizard"]
# ::lemmas ["for", "a", "mostly", "dead", "lizard"]
(c46-3 / benefit-01
       :ARG1 (c46-1 / l
                    :ARG1-of (c46-2 / die-01
                                    :mod (c46-0 / most))))

# ::snt it was a god dam seizure
# ::tokens ["it", "was", "a", "god", "dam", "seizure"]
# ::lemmas ["it", "be", "a", "god", "dam", "seizure"]
(c47-3 / seize-01
       :ARG0 (c47-2 / person
                    :name (c47-4 / name
                                 :op1 "God"))
       :ARG1 (c47-1 / it)
       :mod (c47-0 / dam))

# ::snt MSM will say 'keep moving, nothing to see here'
# ::tokens ["MSM", "will", "say", "'", "keep", "moving", ",", "nothing", "to", "see", "here", "'"]
# ::lemmas ["MSM", "will", "say", "'", "keep", "move", ",", "nothing", "to", "see", "here", "'"]
(c48-8 / say-01
       :ARG0 (c48-5 / person
                    :name (c48-9 / name
                                 :op1 "MSM"))
       :ARG1 (c48-6 / and
                    :op1 (c48-0 / keep-02
                                :ARG0 (c48-1 / you)
                                :ARG1 (c48-4 / move-01
                                             :ARG1 c48-1)
                                :mode imperative)
                    :op2 (c48-2 / see-01
                                :ARG0 c48-1
                                :ARG1 (c48-7 / anything)
                                :location (c48-3 / here)
                                :polarity -
                                :mode imperative)))

# ::snt .
# ::tokens ["."]
# ::lemmas ["."]
(c49-0 / amr-empty)

# ::snt notice as she falls trying to enter the van, her security detail conveniently steps in front of cameras to cover up "episode"
# ::tokens ["notice", "as", "she", "falls", "trying", "to", "enter", "the", "van", ",", "her", "security", "detail", "conveniently", "steps", "in", "front", "of", "cameras", "to", "cover", "up", "\"", "episode", "\""]
# ::lemmas ["notice", "as", "she", "fall", "try", "to", "enter", "the", "van", ",", "her", "security", "detail", "conveniently", "step", "in", "front", "of", "camera", "to", "cover", "up", "\"", "episode", "\""]
(c50-13 / notice-01
        :ARG1 (c50-12 / step-01
                      :ARG1 (c50-5 / detail
                                   :mod (c50-1 / security)
                                   :poss (c50-0 / she))
                      :ARG2 (c50-6 / in-front-of
                                   :op1 (c50-7 / camera))
                      :purpose (c50-11 / cover-up-04
                                       :ARG0 c50-5
                                       :ARG1 (c50-2 / episode))
                      :manner (c50-8 / convenient)
                      :time (c50-4 / fall-05
                                   :ARG1 c50-0
                                   :ARG2 (c50-3 / try-01
                                                :ARG0 c50-0
                                                :ARG1 (c50-9 / enter-01
                                                             :ARG0 c50-0
                                                             :ARG1 (c50-10 / van))))))
