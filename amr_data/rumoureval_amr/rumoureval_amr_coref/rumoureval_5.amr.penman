# ::snt Good
# ::tokens ["Good"]
# ::lemmas ["good"]
(c1-0 / good-02)

# ::snt : Hostage-taker in supermarket siege killed, reports say.
# ::tokens [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c2-7 / say-01
      :ARG0 (c2-6 / report-01)
      :ARG1 (c2-0 / kill-01
                  :ARG1 (c2-5 / person
                              :ARG0-of (c2-4 / take-01
                                             :ARG1 (c2-2 / hostage)
                                             :time (c2-3 / siege-01
                                                         :ARG1 (c2-1 / supermarket))))))

# ::snt hope he died in agony ....
# ::tokens ["hope", "he", "died", "in", "agony", "...."]
# ::lemmas ["hope", "he", "die", "in", "agony", "...."]
(c3-3 / hope-01
      :ARG1 (c3-2 / die-01
                  :ARG1 (c3-1 / he)
                  :manner (c3-0 / agonize-01
                                :ARG1 c3-1)))

# ::snt : Hostage-taker in supermarket siege killed, reports say.
# ::tokens [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c4-7 / say-01
      :ARG0 (c4-6 / report-01)
      :ARG1 (c4-0 / kill-01
                  :ARG1 (c4-5 / person
                              :ARG0-of (c4-4 / take-01
                                             :ARG1 (c4-2 / hostage)
                                             :time (c4-3 / siege-01
                                                         :ARG1 (c4-1 / supermarket))))))

# ::snt looks like civilians in the latest photo
# ::tokens ["looks", "like", "civilians", "in", "the", "latest", "photo"]
# ::lemmas ["look", "like", "civilian", "in", "the", "late", "photo"]
(c5-0 / look-02
      :ARG1 (c5-3 / civilian)
      :location (c5-2 / photo
                      :mod (c5-1 / last)))

# ::snt Wake up world to who terrorists are : Hostage-taker in supermarket siege killed,
# ::tokens ["Wake", "up", "world", "to", "who", "terrorists", "are", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ","]
# ::lemmas ["wake", "up", "world", "to", "who", "terrorist", "be", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ","]
(c6-2 / wake-up-02
      :ARG0 (c6-0 / you)
      :ARG1 (c6-9 / world)
      :ARG2 (c6-5 / terrorist
                  :domain c6-0)
      :ARG1-of (c6-7 / cause-01
                     :ARG0 (c6-1 / kill-01
                                 :ARG1 (c6-8 / person
                                             :ARG0-of (c6-6 / take-01
                                                            :ARG1 (c6-3 / hostage))
                                             :time (c6-10 / siege-01
                                                          :ARG1 (c6-4 / supermarket)))))
      :mode imperative)

# ::snt good work
# ::tokens ["good", "work"]
# ::lemmas ["good", "work"]
(c7-1 / work-01
      :ARG1-of (c7-0 / good-02))

# ::snt What about his girlfriend wanted by police ?
# ::tokens ["What", "about", "his", "girlfriend", "wanted", "by", "police", "?"]
# ::lemmas ["what", "about", "his", "girlfriend", "want", "by", "police", "?"]
(c8-6 / amr-unknown
      :topic (c8-4 / person
                   :ARG0-of (c8-1 / have-rel-role-91
                                  :ARG1 (c8-2 / he)
                                  :ARG2 (c8-5 / girlfriend))
                   :ARG1-of (c8-0 / want-01
                                  :ARG0 (c8-3 / police))))

# ::snt I thought there was two hostage takers?
# ::tokens ["I", "thought", "there", "was", "two", "hostage", "takers", "?"]
# ::lemmas ["i", "think", "there", "be", "two", "hostage", "taker", "?"]
(c9-2 / think-01
      :polarity (c9-5 / amr-unknown)
      :ARG0 (c9-4 / i)
      :ARG1 (c9-3 / person
                  :ARG0-of (c9-1 / take-01
                                 :ARG1 (c9-0 / hostage))
                  :quant 2))

# ::snt - ": Hostage-taker in supermarket siege killed, reports say.
# ::tokens ["-", "\"", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas ["-", "\"", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c10-7 / say-01
       :ARG0 (c10-6 / report-01)
       :ARG1 (c10-0 / kill-01
                    :ARG1 (c10-5 / person
                                 :ARG0-of (c10-4 / manage-01
                                                 :ARG1 (c10-2 / hostage))
                                 :time (c10-3 / siege-01
                                              :ARG1 (c10-1 / supermarket)))))

# ::snt : Hostage-taker in supermarket siege killed, reports say.
# ::tokens [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas [":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c11-7 / say-01
       :ARG0 (c11-6 / report-01)
       :ARG1 (c11-0 / kill-01
                    :ARG1 (c11-5 / person
                                 :ARG0-of (c11-4 / take-01
                                                 :ARG1 (c11-2 / hostage)
                                                 :time (c11-3 / siege-01
                                                              :ARG1 (c11-1 / supermarket))))))

# ::snt Yes!! RT : Hostage-taker in supermarket siege killed, reports say.
# ::tokens ["Yes", "!", "!", "RT", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "killed", ",", "reports", "say", "."]
# ::lemmas ["yes", "!", "!", "RT", ":", "Hostage", "-", "taker", "in", "supermarket", "siege", "kill", ",", "report", "say", "."]
(c12-5 / multi-sentence
       :snt1 (c12-1 / yes
                    :mode expressive)
       :snt2 (c12-9 / say-01
                    :ARG0 (c12-7 / report-01)
                    :ARG1 (c12-0 / kill-01
                                 :ARG1 (c12-6 / person
                                              :ARG0-of (c12-8 / manage-01
                                                              :ARG1 (c12-3 / hostage))
                                              :time (c12-4 / siege-01
                                                           :ARG1 (c12-2 / supermarket))))))

# ::snt cheers, mental just mental
# ::tokens ["cheers", ",", "mental", "just", "mental"]
# ::lemmas ["cheer", ",", "mental", "just", "mental"]
(c13-3 / and
       :op1 (c13-2 / cheers)
       :op2 (c13-0 / mental
                   :mod (c13-1 / just)
                   :domain (c13-4 / mental)))

# ::snt yeah it's terrible. Sounds like hostages died in the supermarket.
# ::tokens ["yeah", "it", "'s", "terrible", ".", "Sounds", "like", "hostages", "died", "in", "the", "supermarket", "."]
# ::lemmas ["yeah", "it", "be", "terrible", ".", "sound", "like", "hostage", "die", "in", "the", "supermarket", "."]
(c14-3 / multi-sentence
       :snt1 (c14-2 / terrible-01
                    :ARG1 (c14-5 / it))
       :snt2 (c14-6 / sound-01
                    :ARG1 (c14-4 / die-01
                                 :ARG1 (c14-0 / hostage)
                                 :location (c14-1 / supermarket))))

# ::snt fucking hell, that's awful
# ::tokens ["fucking", "hell", ",", "that", "'s", "awful"]
# ::lemmas ["fucking", "hell", ",", "that", "be", "awful"]
(c15-1 / awful
       :domain (c15-3 / that)
       :mod (c15-2 / hell
                   :mod (c15-0 / fucking
                               :mode expressive)))

# ::snt All in the name of religion again. So fucking pointless.
# ::tokens ["All", "in", "the", "name", "of", "religion", "again", ".", "So", "fucking", "pointless", "."]
# ::lemmas ["all", "in", "the", "name", "of", "religion", "again", ".", "so", "fucking", "pointless", "."]
(c16-0 / multi-sentence
       :snt1 (c16-3 / all
                    :prep-in (c16-7 / name
                                    :poss (c16-4 / religion))
                    :mod (c16-5 / again))
       :snt2 (c16-2 / point-03
                    :degree (c16-6 / so)
                    :mod (c16-1 / fucking)
                    :polarity -))
