# ::snt can find him either under a white cone hat or a koch bed!
# ::tokens ["can", "find", "him", "either", "under", "a", "white", "cone", "hat", "or", "a", "koch", "bed", "!"]
# ::lemmas ["can", "find", "he", "either", "under", "a", "white", "cone", "hat", "or", "a", "koch", "bed", "!"]
(c1-5 / possible-01
      :ARG1 (c1-3 / find-01
                  :ARG1 (c1-2 / he)
                  :location (c1-8 / or
                                  :op1 (c1-7 / under
                                             :op1 (c1-4 / hat
                                                        :mod (c1-6 / cone
                                                                   :ARG1-of (c1-1 / white-03))))
                                  :op2 (c1-9 / bed
                                             :mod (c1-0 / koch)))))

# ::snt know surprise there.
# ::tokens ["know", "surprise", "there", "."]
# ::lemmas ["know", "surprise", "there", "."]
(c2-0 / know-01
      :ARG1 (c2-1 / surprise-01
                  :location (c2-2 / there)))

# ::snt probably the best idea
# ::tokens ["probably", "the", "best", "idea"]
# ::lemmas ["probably", "the", "good", "idea"]
(c3-3 / probable
      :domain (c3-0 / have-degree-91
                    :ARG1 (c3-2 / idea)
                    :ARG2 (c3-4 / good-02
                                :ARG1 c3-2)
                    :ARG3 (c3-1 / most)))

# ::snt What's that they say? "If he's not guilty, then why did he run?!"
# ::tokens ["What", "'s", "that", "they", "say", "?", "\"", "If", "he", "'s", "not", "guilty", ",", "then", "why", "did", "he", "run", "?", "!", "\""]
# ::lemmas ["what", "be", "that", "they", "say", "?", "\"", "if", "he", "be", "not", "guilty", ",", "then", "why", "do", "he", "run", "?", "!", "\""]
(c4-2 / multi-sentence
      :snt1 (c4-8 / say-01
                  :ARG0 (c4-1 / they)
                  :ARG1 (c4-4 / amr-unknown))
      :snt2 (c4-6 / run-02
                  :ARG0 (c4-0 / he)
                  :ARG1-of (c4-3 / cause-01
                                 :ARG0 (c4-7 / amr-unknown))
                  :condition (c4-5 / guilty-01
                                   :ARG1 c4-0
                                   :polarity -)))

# ::snt I understand his reluctance have his family around the violence, but they should know where he went.
# ::tokens ["I", "understand", "his", "reluctance", "have", "his", "family", "around", "the", "violence", ",", "but", "they", "should", "know", "where", "he", "went", "."]
# ::lemmas ["i", "understand", "his", "reluctance", "have", "his", "family", "around", "the", "violence", ",", "but", "they", "should", "know", "where", "he", "go", "."]
(c5-8 / contrast-01
      :ARG1 (c5-10 / understand-01
                   :ARG0 (c5-7 / i)
                   :ARG1 (c5-13 / reluctant-01
                                :ARG0 (c5-2 / he)
                                :ARG1 (c5-6 / have-06
                                            :ARG0 c5-2
                                            :ARG1 (c5-4 / family
                                                        :ARG1-of (c5-14 / have-org-role-91
                                                                        :ARG0 c5-2
                                                                        :ARG2 (c5-5 / member)))
                                            :location (c5-11 / around
                                                             :op1 (c5-9 / violence)))))
      :ARG2 (c5-1 / recommend-01
                  :ARG1 (c5-0 / know-01
                              :ARG0 c5-4
                              :ARG1 (c5-3 / thing
                                          :ARG4-of (c5-12 / go-02
                                                          :ARG0 c5-2)))))

# ::snt Watch this girl lie through her teeth at :47
# ::tokens ["Watch", "this", "girl", "lie", "through", "her", "teeth", "at", ":", "47"]
# ::lemmas ["watch", "this", "girl", "lie", "through", "her", "tooth", "at", ":", "47"]
(c6-1 / watch-01
      :ARG0 (c6-0 / you)
      :ARG1 (c6-6 / lie-08
                  :ARG0 (c6-5 / girl
                              :mod (c6-2 / this)
                              :part (c6-3 / tooth
                                          :manner-of c6-6))
                  :time (c6-4 / date-entity
                              :time ":47"))
      :mode imperative)

# ::snt and you're basing your assessment on what? Her statement seems to match other witnesses.
# ::tokens ["and", "you", "'re", "basing", "your", "assessment", "on", "what", "?", "Her", "statement", "seems", "to", "match", "other", "witnesses", "."]
# ::lemmas ["and", "you", "be", "base", "your", "assessment", "on", "what", "?", "her", "statement", "seem", "to", "match", "other", "witness", "."]
(c7-4 / multi-sentence
      :snt1 (c7-7 / and
                  :op2 (c7-12 / base-02
                              :ARG0 (c7-0 / you)
                              :ARG1 (c7-9 / assess-01
                                          :ARG0 c7-0)
                              :ARG2 (c7-10 / amr-unknown)))
      :snt2 (c7-11 / seem-01
                   :ARG1 (c7-6 / match-01
                               :ARG1 (c7-3 / state-01
                                           :ARG0 (c7-1 / she))
                               :ARG2 (c7-5 / person
                                           :ARG0-of (c7-2 / witness-01)
                                           :mod (c7-8 / other)))))

# ::snt Remarkably, The Best Literary Novel First/Sentence/Like Tweet Ever
# ::tokens ["Remarkably", ",", "The", "Best", "Literary", "Novel", "First", "/", "Sentence", "/", "Like", "Tweet", "Ever"]
# ::lemmas ["remarkably", ",", "the", "Best", "Literary", "Novel", "First", "/", "Sentence", "/", "like", "Tweet", "ever"]
(c8-7 / slash
      :op1 (c8-4 / publication
                 :name (c8-8 / name
                             :op1 "The"
                             :op2 "Best"
                             :op3 "L literary"
                             :op4 "Novel"
                             :op5 "First"))
      :op2 (c8-0 / sentence-01)
      :op3 (c8-5 / like-01
                 :ARG1 (c8-2 / thing
                             :ARG1-of (c8-3 / tweet-01)))
      :ARG1-of (c8-6 / remarkable-02)
      :time (c8-1 / ever))

# ::snt LOL!
# ::tokens ["LOL", "!"]
# ::lemmas ["LOL", "!"]
(c9-0 / laugh-01
      :ARG0 (c9-2 / i)
      :manner (c9-1 / loud)
      :mode expressive)

# ::snt that is why you were not given his name, so that he could skip town.
# ::tokens ["that", "is", "why", "you", "were", "not", "given", "his", "name", ",", "so", "that", "he", "could", "skip", "town", "."]
# ::lemmas ["that", "be", "why", "you", "be", "not", "give", "his", "name", ",", "so", "that", "he", "could", "skip", "town", "."]
(c10-4 / cause-01
       :ARG0 (c10-1 / that)
       :ARG1 (c10-6 / name-01
                    :ARG1 (c10-0 / he)
                    :polarity -)
       :purpose (c10-3 / possible-01
                       :ARG1 (c10-5 / skip-01
                                    :ARG0 c10-0
                                    :ARG1 (c10-2 / town))))

# ::snt ( :'Darren Wilson, . (cop) who shot reportedly skipped town with his family days ago.'
# ::tokens ["(", ":", "'", "Darren", "Wilson", ",", ".", "(", "cop", ")", "who", "shot", "reportedly", "skipped", "town", "with", "his", "family", "days", "ago", ".", "'"]
# ::lemmas ["(", ":", "'", "Darren", "Wilson", ",", ".", "(", "cop", ")", "who", "shoot", "reportedly", "skip", "town", "with", "his", "family", "days", "ago", ".", "'"]
(c12-13 / skip-01
        :ARG0 (c12-8 / person
                     :name (c12-15 / name
                                   :op1 "Darren"
                                   :op2 "Wilson")
                     :ARG0-of (c12-0 / shoot-02)
                     :ARG0-of (c12-1 / have-org-role-91
                                     :ARG2 (c12-9 / cop))
                     :ARG0-of (c12-6 / have-org-role-91
                                     :ARG1 (c12-3 / family
                                                  :ARG1-of (c12-14 / have-org-role-91
                                                                   :ARG0 c12-8
                                                                   :ARG2 (c12-4 / member)))))
        :ARG1 (c12-2 / town)
        :time (c12-16 / before
                      :op1 (c12-7 / now)
                      :quant (c12-12 / multiple
                                     :op1 (c12-5 / temporal-quantity
                                                 :unit (c12-10 / day)
                                                 :quant 1)))
        :ARG1-of (c12-11 / report-01))

# ::snt lausible that the aided+abetted Wilson in fleeing. PSYCHOLOGICAL TESTS for cops should be mandatory.
# ::tokens ["lausible", "that", "the", "aided+abetted", "Wilson", "in", "fleeing", ".", "PSYCHOLOGICAL", "TESTS", "for", "cops", "should", "be", "mandatory", "."]
# ::lemmas ["lausible", "that", "the", "aided+abetted", "Wilson", "in", "flee", ".", "psychological", "test", "for", "cop", "should", "be", "mandatory", "."]
(c13-1 / multi-sentence
       :snt1 (c13-8 / liable-01
                    :ARG2 (c13-10 / or
                                  :op1 (c13-7 / aid-01
                                              :ARG1 (c13-2 / flee-05
                                                           :ARG0 (c13-4 / person
                                                                        :name (c13-12 / name
                                                                                      :op1 "Wilson")
                                                                        :ARG2-of c13-7)))
                                  :op2 (c13-11 / abet-01
                                               :ARG1 c13-4
                                               :ARG2 c13-2)))
       :snt2 (c13-9 / recommend-01
                    :ARG1 (c13-6 / mandatory
                                 :domain (c13-0 / tactic
                                                :mod (c13-3 / psychology)
                                                :beneficiary (c13-5 / cop)))))

# ::snt lease take no offense to my analogy. is like something from 'Deliverance.
# ::tokens ["lease", "take", "no", "offense", "to", "my", "analogy", ".", "is", "like", "something", "from", "'", "Deliverance", "."]
# ::lemmas ["lease", "take", "no", "offense", "to", "my", "analogy", ".", "be", "like", "something", "from", "'", "deliverance", "."]
(c14-2 / multi-sentence
       :snt1 (c14-7 / offend-01
                    :ARG0 (c14-0 / you)
                    :ARG1 (c14-5 / analogy
                                 :poss (c14-4 / i))
                    :polarity -
                    :mode imperative
                    :polite +)
       :snt2 (c14-6 / resemble-01
                    :ARG1 (c14-1 / it)
                    :ARG2 (c14-8 / something
                                 :source (c14-3 / deliver-01))))
