# ::snt Trump said "Fake News"
# ::tokens ["Trump", "said", "\"", "Fake", "News", "\""]
# ::lemmas ["Trump", "say", "\"", "Fake", "news", "\""]
(c1-3 / say-01
      :ARG0 (c1-2 / person
                  :name (c1-4 / name
                              :op1 "Trump"))
      :ARG1 (c1-1 / news
                  :ARG1-of (c1-0 / fake-02)))

# ::snt This picture has been going around for years... def. making its rounds with every natural disaster.
# ::tokens ["This", "picture", "has", "been", "going", "around", "for", "years", "...", "def", ".", "making", "its", "rounds", "with", "every", "natural", "disaster", "."]
# ::lemmas ["this", "picture", "have", "be", "go", "around", "for", "years", "...", "def", ".", "make", "its", "round", "with", "every", "natural", "disaster", "."]
(c2-7 / go-06
      :ARG1 (c2-5 / picture
                  :mod (c2-2 / this))
      :ARG2 (c2-6 / around)
      :duration (c2-3 / multiple
                      :op1 (c2-4 / temporal-quantity
                                 :unit (c2-0 / year)
                                 :quant 1))
      :manner (c2-8 / round-out-01
                    :ARG1 c2-5
                    :accompanier (c2-9 / natural-disaster
                                       :mod (c2-1 / every))))

# ::snt At least he is passing in the correct lane
# ::tokens ["At", "least", "he", "is", "passing", "in", "the", "correct", "lane"]
# ::lemmas ["at", "least", "he", "be", "pass", "in", "the", "correct", "lane"]
(c3-2 / pass-02
      :ARG0 (c3-0 / he)
      :ARG1 (c3-4 / lane
                  :ARG1-of (c3-1 / correct-02))
      :mod (c3-3 / at-least))

# ::snt Go easy Jimmy, the photo has been proven fake.
# ::tokens ["Go", "easy", "Jimmy", ",", "the", "photo", "has", "been", "proven", "fake", "."]
# ::lemmas ["go", "easy", "Jimmy", ",", "the", "photo", "have", "be", "prove", "fake", "."]
(c4-8 / say-01
      :ARG0 (c4-5 / i)
      :ARG1 (c4-7 / go-05
                  :ARG0 (c4-4 / person
                              :name (c4-9 / name
                                          :op1 "Jimmy"))
                  :ARG1-of (c4-1 / easy-05)
                  :ARG1-of (c4-6 / cause-01
                                 :ARG0 (c4-3 / prove-01
                                             :ARG1 (c4-2 / fake-02
                                                         :ARG1 (c4-0 / photo))))
                  :mode imperative)
      :ARG2 c4-4)

# ::snt Nope. This EXACT photo surfaced a day or or two after hurricane Katrina
# ::tokens ["Nope", ".", "This", "EXACT", "photo", "surfaced", "a", "day", "or", "or", "two", "after", "hurricane", "Katrina"]
# ::lemmas ["nope", ".", "this", "exact", "photo", "surface", "a", "day", "or", "or", "two", "after", "hurricane", "Katrina"]
(c5-3 / multi-sentence
      :snt1 (c5-13 / nope)
      :snt2 (c5-12 / surface-01
                   :ARG1 (c5-7 / photo
                               :mod (c5-0 / exact)
                               :mod (c5-2 / this))
                   :time (c5-9 / after
                               :op1 (c5-6 / natural-disaster
                                          :name (c5-10 / name
                                                       :op1 "Hurricane"
                                                       :op2 "Katrina"))
                               :quant (c5-11 / or
                                             :op1 (c5-4 / temporal-quantity
                                                        :unit (c5-8 / day)
                                                        :quant 1)
                                             :op2 (c5-5 / temporal-quantity
                                                        :unit (c5-1 / day)
                                                        :quant 2)))))

# ::snt Lol, this pic was during hurricane Catrina...
# ::tokens ["Lol", ",", "this", "pic", "was", "during", "hurricane", "Catrina", "..."]
# ::lemmas ["Lol", ",", "this", "pic", "be", "during", "hurricane", "Catrina", "..."]
(c6-6 / be-temporally-at-91
      :ARG1 (c6-2 / pic
                  :mod (c6-0 / this))
      :ARG2 (c6-5 / natural-disaster
                  :name (c6-1 / name
                              :op1 "Hurricane"
                              :op2 "Catrina"))
      :mod (c6-3 / laugh-01
                 :manner (c6-4 / loud)
                 :mode expressive))

# ::snt Wow, just movin along, moving. My family to higher ground..what the f!!!!
# ::tokens ["Wow", ",", "just", "movin", "along", ",", "moving", ".", "My", "family", "to", "higher", "ground", "..", "what", "the", "f", "!", "!", "!", "!"]
# ::lemmas ["wow", ",", "just", "movin", "along", ",", "move", ".", "my", "family", "to", "high", "ground", "..", "what", "the", "f", "!", "!", "!", "!"]
(c7-2 / multi-sentence
      :snt1 (c7-10 / and
                   :op1 (c7-9 / move-01
                              :ARG1 (c7-7 / i)
                              :mod (c7-14 / along)
                              :mod (c7-3 / just))
                   :op2 (c7-13 / move-01
                               :ARG1 c7-7))
      :snt2 (c7-6 / move-01
                  :ARG1 (c7-8 / person
                              :ARG0-of (c7-0 / have-rel-role-91
                                             :ARG1 (c7-1 / i)
                                             :ARG2 (c7-4 / family)))
                  :ARG2 (c7-11 / ground
                               :ARG1-of (c7-5 / have-degree-91
                                              :ARG2 (c7-16 / high-02
                                                           :ARG1 c7-11)
                                              :ARG3 (c7-12 / more)))
                  :mod (c7-15 / amr-unknown
                              :mode expressive)))

# ::snt EPIC fail
# ::tokens ["EPIC", "fail"]
# ::lemmas ["EPIC", "fail"]
(c8-0 / fail-01
      :ARG1 (c8-2 / thing
                  :name (c8-1 / name
                              :op1 "EPIC")))

# ::snt Yikes...as if there aren't having enough problems
# ::tokens ["Yikes", "...", "as", "if", "there", "are", "n't", "having", "enough", "problems"]
# ::lemmas ["yike", "...", "as", "if", "there", "be", "not", "have", "enough", "problem"]
(c9-0 / yikes
      :conj-as-if (c9-1 / have-03
                        :ARG1 (c9-3 / problem
                                    :ARG1-of (c9-2 / have-quant-91
                                                   :ARG3 (c9-4 / enough)))
                        :polarity -))

# ::snt You're better than this Jimmy..LOL
# ::tokens ["You", "'re", "better", "than", "this", "Jimmy", "..", "LOL"]
# ::lemmas ["you", "be", "well", "than", "this", "Jimmy", "..", "lol"]
(c10-7 / say-01
       :ARG0 (c10-4 / i)
       :ARG1 (c10-5 / good-02
                    :ARG1 (c10-3 / person
                                 :name (c10-9 / name
                                              :op1 "Jimmy"))
                    :ARG2-of (c10-0 / have-degree-91
                                    :ARG1 c10-3
                                    :ARG3 (c10-2 / more)
                                    :ARG4 (c10-1 / this)))
       :ARG2 c10-3
       :manner (c10-6 / laugh-01
                      :ARG0 c10-4
                      :manner (c10-8 / loud)
                      :mode expressive))

# ::snt Yeah, this pic shows up every time there's a flood near an ocean. It's fake.
# ::tokens ["Yeah", ",", "this", "pic", "shows", "up", "every", "time", "there", "'s", "a", "flood", "near", "an", "ocean", ".", "It", "'s", "fake", "."]
# ::lemmas ["yeah", ",", "this", "pic", "show", "up", "every", "time", "there", "be", "a", "flood", "near", "an", "ocean", ".", "it", "be", "fake", "."]
(c11-3 / multi-sentence
       :snt1 (c11-9 / show-up-02
                    :ARG1 (c11-5 / picture
                                 :mod (c11-2 / this))
                    :frequency (c11-7 / rate-entity-91
                                      :ARG4 (c11-4 / flood-01
                                                   :ARG1-of (c11-10 / near-02
                                                                    :ARG2 (c11-8 / ocean))))
                    :mod (c11-0 / yeah
                                :mode expressive))
       :snt2 (c11-1 / fake-02
                    :ARG1 (c11-6 / it)))

# ::snt Being Scottish I believe it's real. .
# ::tokens ["Being", "Scottish", "I", "believe", "it", "'s", "real", ".", "."]
# ::lemmas ["be", "Scottish", "i", "believe", "it", "be", "real", ".", "."]
(c12-6 / believe-01
       :ARG0 (c12-2 / i
                    :mod (c12-1 / country
                                :name (c12-5 / name
                                             :op1 "Scotland")))
       :ARG1 (c12-3 / real-04
                    :ARG1 (c12-0 / it))
       :ARG1-of (c12-4 / cause-01
                       :ARG0 c12-2))

# ::snt Oh lawd! Somebody needs to put that little guy back where he belongs!
# ::tokens ["Oh", "lawd", "!", "Somebody", "needs", "to", "put", "that", "little", "guy", "back", "where", "he", "belongs", "!"]
# ::lemmas ["oh", "lawd", "!", "somebody", "need", "to", "put", "that", "little", "guy", "back", "where", "he", "belong", "!"]
(c13-1 / multi-sentence
       :snt1 (c13-8 / oh
                    :mod (c13-5 / lawd)
                    :mode expressive)
       :snt2 (c13-2 / obligate-01
                    :ARG1 (c13-9 / somebody)
                    :ARG2 (c13-4 / put-01
                                 :ARG0 c13-9
                                 :ARG1 (c13-6 / guy
                                              :mod (c13-10 / little)
                                              :mod (c13-0 / that))
                                 :ARG2 (c13-3 / place
                                              :ARG2-of (c13-11 / belong-01
                                                               :ARG0 c13-6))
                                 :direction (c13-7 / back))))

# ::snt Actually it could be real, lemon and bull sharks can survive in both fresh and salt water.
# ::tokens ["Actually", "it", "could", "be", "real", ",", "lemon", "and", "bull", "sharks", "can", "survive", "in", "both", "fresh", "and", "salt", "water", "."]
# ::lemmas ["actually", "it", "could", "be", "real", ",", "lemon", "and", "bull", "shark", "can", "survive", "in", "both", "fresh", "and", "salt", "water", "."]
(c14-9 / possible-01
       :ARG1 (c14-12 / real-04
                     :ARG1 (c14-8 / it))
       :ARG1-of (c14-7 / cause-01
                       :ARG0 (c14-6 / possible-01
                                    :ARG1 (c14-15 / survive-01
                                                  :ARG0 (c14-10 / and
                                                                :op1 (c14-2 / shark
                                                                            :mod (c14-11 / lemon))
                                                                :op2 (c14-0 / shark
                                                                            :mod (c14-16 / bull)))
                                                  :ARG1 (c14-13 / and
                                                                :op1 (c14-1 / water
                                                                            :ARG1-of (c14-5 / fresh-04))
                                                                :op2 (c14-14 / water
                                                                             :mod (c14-3 / salt))))))
       :ARG1-of (c14-4 / actual-02))

# ::snt I just asked my husband last night if this was possible!
# ::tokens ["I", "just", "asked", "my", "husband", "last", "night", "if", "this", "was", "possible", "!"]
# ::lemmas ["i", "just", "ask", "my", "husband", "last", "night", "if", "this", "be", "possible", "!"]
(c15-10 / ask-01
        :ARG0 (c15-9 / i)
        :ARG1 (c15-3 / truth-value
                     :polarity-of (c15-8 / possible-01
                                         :ARG1 (c15-2 / this)))
        :ARG2 (c15-6 / person
                     :ARG0-of (c15-1 / have-rel-role-91
                                     :ARG1 c15-9
                                     :ARG2 (c15-5 / husband)))
        :time (c15-7 / date-entity
                     :dayperiod (c15-11 / night)
                     :mod (c15-0 / yesterday))
        :mod (c15-4 / just))

# ::snt Sharknado
# ::tokens ["Sharknado"]
# ::lemmas ["Sharknado"]
(c16-1 / person
       :name (c16-0 / name
                    :op1 "Sharknado"))

# ::snt You've been had jimmy....
# ::tokens ["You", "'ve", "been", "had", "jimmy", "...."]
# ::lemmas ["you", "'ve", "be", "have", "jimmy", "...."]
(c17-2 / have-03
       :ARG0 (c17-0 / you)
       :ARG1 (c17-3 / person
                    :name (c17-1 / name
                                 :op1 "Jimmy")))

# ::snt Sharks on the highways, eagles taking the taxi and gators in garages.
# ::tokens ["Sharks", "on", "the", "highways", ",", "eagles", "taking", "the", "taxi", "and", "gators", "in", "garages", "."]
# ::lemmas ["shark", "on", "the", "highway", ",", "eagle", "take", "the", "taxi", "and", "gator", "in", "garage", "."]
(c18-5 / and
       :op1 (c18-8 / shoot-01
                   :ARG2 (c18-0 / highway))
       :op2 (c18-9 / eagle
                   :ARG0-of (c18-2 / take-01
                                   :ARG1 (c18-7 / and
                                                :op1 (c18-3 / taxi)
                                                :op2 (c18-4 / vehicle
                                                            :ARG0-of (c18-6 / go-01)))
                                   :location (c18-1 / garage))))

# ::snt And it's a fake photo. Sorry. Makes for some fun though.
# ::tokens ["And", "it", "'s", "a", "fake", "photo", ".", "Sorry", ".", "Makes", "for", "some", "fun", "though", "."]
# ::lemmas ["and", "it", "be", "a", "fake", "photo", ".", "sorry", ".", "make", "for", "some", "fun", "though", "."]
(c19-3 / multi-sentence
       :snt1 (c19-7 / and
                    :op2 (c19-6 / photo
                                :ARG1-of (c19-4 / fake-02)
                                :domain (c19-5 / it)))
       :snt2 (c19-10 / sorry-01
                     :ARG1 (c19-0 / i))
       :snt3 (c19-9 / make-02
                    :ARG1 (c19-8 / fun-01
                                 :quant (c19-1 / some))
                    :ARG1-of (c19-2 / have-concession-91)))

# ::snt FAKE
# ::tokens ["FAKE"]
# ::lemmas ["fake"]
(c20-0 / fail-01)

# ::snt Fake news
# ::tokens ["Fake", "news"]
# ::lemmas ["fake", "news"]
(c21-1 / news
       :ARG1-of (c21-0 / fake-02))

# ::snt There was, however, a guy who caught a good-sized fish in his living room. That was on video and quite real.
# ::tokens ["There", "was", ",", "however", ",", "a", "guy", "who", "caught", "a", "good", "-", "sized", "fish", "in", "his", "living", "room", ".", "That", "was", "on", "video", "and", "quite", "real", "."]
# ::lemmas ["there", "be", ",", "however", ",", "a", "guy", "who", "catch", "a", "good", "-", "sized", "fish", "in", "his", "living", "room", ".", "that", "be", "on", "video", "and", "quite", "real", "."]
(c22-4 / multi-sentence
       :snt1 (c22-6 / contrast-01
                    :ARG2 (c22-13 / catch-03
                                  :ARG0 (c22-9 / guy)
                                  :ARG1 (c22-5 / fish
                                               :ARG1-of (c22-7 / size-01
                                                               :ARG2 (c22-2 / good-02)))
                                  :location (c22-12 / room
                                                    :mod (c22-10 / living)
                                                    :poss c22-9)))
       :snt2 (c22-11 / and
                     :op1 (c22-8 / video
                                 :medium-of (c22-3 / that))
                     :op2 (c22-0 / real-04
                                 :ARG1 c22-3
                                 :degree (c22-1 / quite))))

# ::snt It's fake people! Stop posting it!
# ::tokens ["It", "'s", "fake", "people", "!", "Stop", "posting", "it", "!"]
# ::lemmas ["it", "be", "fake", "people", "!", "stop", "post", "it", "!"]
(c23-2 / multi-sentence
       :snt1 (c23-6 / person
                    :ARG1-of (c23-3 / fake-02)
                    :domain (c23-5 / it))
       :snt2 (c23-7 / stop-01
                    :ARG0 (c23-0 / you)
                    :ARG1 (c23-4 / post-01
                                 :ARG0 c23-0
                                 :ARG1 (c23-1 / it))
                    :mode imperative))

# ::snt told you
# ::tokens ["told", "you"]
# ::lemmas ["tell", "you"]
(c24-2 / tell-01
       :ARG0 (c24-1 / i)
       :ARG2 (c24-0 / you))

# ::snt This is so fake. Seen this exact pic in last major us coastal floods. Fail. Lol
# ::tokens ["This", "is", "so", "fake", ".", "Seen", "this", "exact", "pic", "in", "last", "major", "us", "coastal", "floods", ".", "Fail", ".", "Lol"]
# ::lemmas ["this", "be", "so", "fake", ".", "see", "this", "exact", "pic", "in", "last", "major", "us", "coastal", "flood", ".", "Fail", ".", "Lol"]
(c25-3 / multi-sentence
       :snt1 (c25-4 / fake-02
                    :ARG1 (c25-2 / this)
                    :degree (c25-12 / so))
       :snt2 (c25-1 / see-01
                    :ARG0 (c25-6 / i)
                    :ARG1 (c25-7 / picture
                                 :mod (c25-15 / exact)
                                 :mod (c25-5 / this))
                    :time (c25-9 / flood-01
                                 :ARG1 (c25-0 / seashore)
                                 :ARG1-of (c25-10 / major-02)
                                 :mod (c25-8 / last)))
       :snt3 (c25-11 / fail-01)
       :snt4 (c25-14 / laugh-01
                     :ARG0 c25-6
                     :manner (c25-13 / loud)
                     :mode expressive))

# ::snt Too sad
# ::tokens ["Too", "sad"]
# ::lemmas ["too", "sad"]
(c26-1 / have-degree-91
       :ARG2 (c26-0 / sad-02)
       :ARG3 (c26-2 / too))

# ::snt Fake
# ::tokens ["Fake"]
# ::lemmas ["fake"]
(c27-0 / fake-02)

# ::snt Holy crap!
# ::tokens ["Holy", "crap", "!"]
# ::lemmas ["Holy", "crap", "!"]
(c28-1 / crap-01
       :mod (c28-0 / holy)
       :mode expressive)

# ::snt It's basically Sharknado in real life.
# ::tokens ["It", "'s", "basically", "Sharknado", "in", "real", "life", "."]
# ::lemmas ["it", "be", "basically", "Sharknado", "in", "real", "life", "."]
(c29-0 / product
       :name (c29-3 / name
                    :op1 "Sharknado")
       :mod (c29-4 / basic)
       :location (c29-1 / life
                        :ARG1-of (c29-2 / real-04)))

# ::snt Umm no...I live in Houston
# ::tokens ["Umm", "no", "...", "I", "live", "in", "Houston"]
# ::lemmas ["umm", "no", "...", "i", "live", "in", "Houston"]
(c31-3 / live-01
       :ARG0 (c31-1 / i)
       :location (c31-0 / city
                        :name (c31-4 / name
                                     :op1 "Houston"))
       :mod (c31-2 / umm
                   :mode expressive))

# ::snt No it bloody isn't.
# ::tokens ["No", "it", "bloody", "is", "n't", "."]
# ::lemmas ["no", "it", "bloody", "be", "not", "."]
(c32-1 / bloody
       :domain (c32-0 / it)
       :polarity -)
