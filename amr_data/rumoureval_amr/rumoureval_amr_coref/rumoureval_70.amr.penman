# ::snt Makes them look inept as well.
# ::tokens ["Makes", "them", "look", "inept", "as", "well", "."]
# ::lemmas ["make", "they", "look", "inept", "as", "well", "."]
(c1-1 / make-02
      :ARG1 (c1-3 / look-02
                  :ARG0 (c1-0 / they)
                  :ARG1 (c1-2 / apt-04
                              :ARG1 c1-0
                              :polarity -))
      :mod (c1-4 / as-well))

# ::snt I would rather be a than being a Now
# ::tokens ["I", "would", "rather", "be", "a", "than", "being", "a", "Now"]
# ::lemmas ["i", "would", "rather", "be", "a", "than", "be", "a", "now"]
(c2-2 / prefer-01
      :ARG0 (c2-0 / i)
      :ARG1 (c2-1 / now))

# ::snt Since they want to label as a shoplifter, since when is that crime punishable by DEATH?
# ::tokens ["Since", "they", "want", "to", "label", "as", "a", "shoplifter", ",", "since", "when", "is", "that", "crime", "punishable", "by", "DEATH", "?"]
# ::lemmas ["since", "they", "want", "to", "label", "as", "a", "shoplifter", ",", "since", "when", "be", "that", "crime", "punishable", "by", "DEATH", "?"]
(c3-6 / punishable-02
      :ARG2 (c3-5 / crime-02
                  :mod (c3-1 / that))
      :ARG3 (c3-4 / die-01)
      :time (c3-8 / amr-unknown)
      :ARG1-of (c3-10 / cause-01
                      :ARG0 (c3-0 / want-01
                                  :ARG0 (c3-2 / they)
                                  :ARG1 (c3-9 / label-01
                                              :ARG0 c3-2
                                              :ARG1 c3-2
                                              :ARG2 (c3-3 / person
                                                          :ARG0-of (c3-7 / shoplift-01))))))

# ::snt Not sure 'shoot first &amp; uncover potential crime later' is viable policy outside the fevered mind of a conservative
# ::tokens ["Not", "sure", "'", "shoot", "first", "&", "amp", ";", "uncover", "potential", "crime", "later", "'", "is", "viable", "policy", "outside", "the", "fevered", "mind", "of", "a", "conservative"]
# ::lemmas ["not", "sure", "'", "shoot", "first", "&", "amp", ";", "uncover", "potential", "crime", "later", "'", "be", "viable", "policy", "outside", "the", "fevere", "mind", "of", "a", "conservative"]
(c4-16 / sure-02
       :ARG0 (c4-8 / i)
       :ARG1 (c4-7 / policy-01
                   :ARG1 (c4-11 / and
                                :op1 (c4-1 / shoot-02
                                           :op1 (c4-3 / first)
                                           :op2 (c4-14 / amp)
                                           :time c4-11))
                   :op2 (c4-10 / uncover-01
                               :ARG1 (c4-9 / crime-02
                                           :mod (c4-6 / potential))
                               :time (c4-15 / after
                                            :op1 c4-1)))
       :mod (c4-12 / viable)
       :location (c4-13 / outside
                        :op1 (c4-4 / mind
                                   :poss (c4-0 / person
                                               :mod (c4-5 / conservative))
                                   :ARG1-of (c4-2 / fevered-00)))
       :polarity -)

# ::snt AMEN to that!! They would say "LOOK! HE PUSHED THAT STORE CLERK!!.. is that punishable by DEATH?
# ::tokens ["AMEN", "to", "that", "!", "!", "They", "would", "say", "\"", "LOOK", "!", "HE", "PUSHED", "THAT", "STORE", "CLERK", "!", "!", "..", "is", "that", "punishable", "by", "DEATH", "?"]
# ::lemmas ["AMEN", "to", "that", "!", "!", "they", "would", "say", "\"", "look", "!", "he", "pushed", "that", "STORE", "CLERK", "!", "!", "..", "be", "that", "punishable", "by", "DEATH", "?"]
(c5-4 / multi-sentence
      :snt1 (c5-12 / agree-01
                   :ARG0 (c5-9 / i)
                   :ARG1 (c5-3 / that)
                   :mode expressive)
      :snt2 (c5-16 / say-01
                   :ARG0 (c5-5 / they)
                   :ARG1 (c5-14 / and
                                :op1 (c5-13 / look-01
                                            :ARG0 (c5-0 / you)
                                            :mode imperative)
                                :op2 (c5-10 / push-01
                                            :ARG0 (c5-2 / he)
                                            :ARG1 (c5-11 / curtain
                                                         :mod (c5-1 / wood)
                                                         :mod (c5-6 / that))
                                            :mode expressive)
                                :op3 (c5-7 / punishable-02
                                           :ARG2 (c5-8 / die-01)
                                           :polarity (c5-15 / amr-unknown)))))

# ::snt Early reports said the store had not reported a robbery?? The people in the store don't look alarmed.
# ::tokens ["Early", "reports", "said", "the", "store", "had", "not", "reported", "a", "robbery", "?", "?", "The", "people", "in", "the", "store", "do", "n't", "look", "alarmed", "."]
# ::lemmas ["early", "report", "say", "the", "store", "have", "not", "report", "a", "robbery", "?", "?", "the", "people", "in", "the", "store", "do", "not", "look", "alarmed", "."]
(c6-2 / multi-sentence
      :snt1 (c6-8 / say-01
                  :ARG0 (c6-7 / report-01
                              :time (c6-9 / early))
                  :ARG1 (c6-0 / report-01
                              :ARG0 (c6-1 / store)
                              :ARG1 (c6-3 / rob-01)
                              :polarity -))
      :snt2 (c6-5 / look-02
                  :ARG0 (c6-4 / person
                              :location c6-1)
                  :ARG1 (c6-6 / alarm-01)
                  :polarity -))

# ::snt From what I saw it was nothing but a petty theft. Let the RT Wing tell it, he went in with a GLOCK
# ::tokens ["From", "what", "I", "saw", "it", "was", "nothing", "but", "a", "petty", "theft", ".", "Let", "the", "RT", "Wing", "tell", "it", ",", "he", "went", "in", "with", "a", "GLOCK"]
# ::lemmas ["from", "what", "i", "see", "it", "be", "nothing", "but", "a", "petty", "theft", ".", "let", "the", "RT", "Wing", "tell", "it", ",", "he", "go", "in", "with", "a", "GLOCK"]
(c7-4 / multi-sentence
      :snt1 (c7-14 / steal-01
                   :mod (c7-11 / petty)
                   :domain (c7-10 / it)
                   :ARG1-of (c7-1 / see-01
                                  :ARG0 (c7-2 / i))
                   :mod (c7-15 / nothing-but))
      :snt2 (c7-12 / let-01
                   :ARG0 (c7-0 / you)
                   :ARG1 (c7-3 / tell-01
                               :ARG0 (c7-13 / government-organization
                                            :name (c7-9 / name
                                                        :op1 "RT"
                                                        :op2 "Wing"))
                               :ARG1 (c7-5 / it))
                   :mode imperative)
      :snt3 (c7-6 / go-02
                  :ARG0 (c7-7 / he)
                  :accompanier (c7-8 / jack)))

# ::snt The point is, the cop didn't know about a robbery. He executed a jaywalker resisting being detained
# ::tokens ["The", "point", "is", ",", "the", "cop", "did", "n't", "know", "about", "a", "robbery", ".", "He", "executed", "a", "jaywalker", "resisting", "being", "detained"]
# ::lemmas ["the", "point", "be", ",", "the", "cop", "do", "not", "know", "about", "a", "robbery", ".", "he", "execute", "a", "jaywalker", "resist", "be", "detain"]
(c8-4 / multi-sentence
      :snt1 (c8-7 / point-04
                  :ARG1 (c8-0 / know-01
                              :ARG0 (c8-8 / cop)
                              :ARG1 (c8-9 / rob-01)
                              :polarity -))
      :snt2 (c8-10 / execute-01
                   :ARG0 (c8-3 / he)
                   :ARG1 (c8-5 / person
                               :ARG0-of (c8-1 / resist-01
                                              :ARG1 (c8-6 / detain-01
                                                          :ARG1 c8-5))
                               :ARG0-of (c8-2 / walk-01))))

# ::snt EXACTLY!! Since when is jaywalking punishable by DEATH?
# ::tokens ["EXACTLY", "!", "!", "Since", "when", "is", "jaywalking", "punishable", "by", "DEATH", "?"]
# ::lemmas ["exactly", "!", "!", "since", "when", "be", "jaywalk", "punishable", "by", "DEATH", "?"]
(c9-2 / punishable-02
      :ARG2 (c9-0 / jaywalk-01)
      :ARG3 (c9-1 / die-01)
      :time (c9-4 / since
                  :op1 (c9-3 / amr-unknown))
      :mod (c9-5 / exact))

# ::snt I bet if Michael Brown had his druthers, hed rather have his name dragged thru the mud than his life snuffed out.
# ::tokens ["I", "bet", "if", "Michael", "Brown", "had", "his", "druthers", ",", "he", "d", "rather", "have", "his", "name", "dragged", "thru", "the", "mud", "than", "his", "life", "snuffed", "out", "."]
# ::lemmas ["i", "bet", "if", "Michael", "Brown", "have", "his", "druther", ",", "he", "d", "rather", "have", "his", "name", "drag", "thru", "the", "mud", "than", "his", "life", "snuff", "out", "."]
(c10-14 / bet-01
        :ARG0 (c10-9 / i)
        :ARG2 (c10-8 / prefer-01
                     :ARG0 (c10-6 / person
                                  :name (c10-13 / name
                                                :op1 "Michael"
                                                :op2 "Brown"))
                     :ARG1 (c10-7 / drag-01
                                  :ARG1 (c10-10 / name
                                                :poss c10-6)
                                  :path (c10-3 / through
                                               :op1 (c10-4 / mud)))
                     :ARG2 (c10-12 / snuff-out-02
                                   :ARG1 (c10-11 / life
                                                 :poss c10-6))
                     :condition (c10-1 / have-03
                                       :ARG0 c10-6
                                       :ARG1 (c10-0 / person
                                                    :ARG0-of (c10-5 / have-rel-role-91
                                                                    :ARG1 c10-6
                                                                    :ARG2 (c10-2 / druther))))))

# ::snt SAY IT AGAIN!!!! oh nevermind, I can just RT it
# ::tokens ["SAY", "IT", "AGAIN", "!", "!", "!", "!", "oh", "nevermind", ",", "I", "can", "just", "RT", "it"]
# ::lemmas ["say", "it", "again", "!", "!", "!", "!", "oh", "nevermind", ",", "i", "can", "just", "rt", "it"]
(c11-2 / multi-sentence
       :snt1 (c11-11 / say-01
                     :ARG0 (c11-0 / you)
                     :ARG1 (c11-5 / it)
                     :mod (c11-7 / again)
                     :mode imperative)
       :snt2 (c11-10 / mind-15
                     :ARG0 c11-0
                     :polarity -
                     :mode imperative)
       :time (c11-12 / ever)
       :mod (c11-9 / oh)
       :snt3 (c11-6 / possible-01
                    :ARG1 (c11-8 / RT-01
                                 :ARG0 (c11-1 / i)
                                 :ARG1 (c11-3 / it)
                                 :mod (c11-4 / just))))

# ::snt damn surveillance video We give up a name, we drag his thru the mud.
# ::tokens ["damn", "surveillance", "video", "We", "give", "up", "a", "name", ",", "we", "drag", "his", "thru", "the", "mud", "."]
# ::lemmas ["damn", "surveillance", "video", "we", "give", "up", "a", "name", ",", "we", "drag", "his", "thru", "the", "mud", "."]
(c12-3 / multi-sentence
       :snt1 (c12-5 / video
                    :ARG0-of (c12-10 / surveil-01)
                    :mod (c12-4 / damn))
       :snt2 (c12-6 / and
                    :op1 (c12-7 / give-up-07
                                :ARG0 (c12-0 / we)
                                :ARG1 (c12-11 / name))
                    :op2 (c12-2 / drag-01
                                :ARG0 (c12-9 / we)
                                :ARG1 (c12-1 / he)
                                :path (c12-8 / mud))))

# ::snt People may not like it. but it's devastating for prosecuting the cop. If true, can be argued Brown thought the cop was after him .
# ::tokens ["People", "may", "not", "like", "it", ".", "but", "it", "'s", "devastating", "for", "prosecuting", "the", "cop", ".", "If", "true", ",", "can", "be", "argued", "Brown", "thought", "the", "cop", "was", "after", "him", "."]
# ::lemmas ["people", "may", "not", "like", "it", ".", "but", "it", "be", "devastating", "for", "prosecute", "the", "cop", ".", "if", "true", ",", "can", "be", "argue", "Brown", "think", "the", "cop", "be", "after", "he", "."]
(c13-4 / multi-sentence
       :snt1 (c13-9 / contrast-01
                    :ARG1 (c13-8 / possible-01
                                 :ARG1 (c13-7 / dislike-01
                                              :ARG0 (c13-6 / person)
                                              :ARG1 (c13-10 / it)))
                    :ARG2 (c13-2 / devastate-01
                                 :ARG0 (c13-1 / it)
                                 :ARG1 (c13-0 / prosecute-01
                                              :ARG1 (c13-16 / cop))))
       :snt2 (c13-12 / possible-01
                     :ARG1 (c13-13 / argue-01
                                   :ARG1 (c13-3 / think-01
                                                :ARG0 (c13-11 / person
                                                              :name (c13-17 / name
                                                                            :op1 "Brown"))
                                                :ARG1 (c13-14 / go-03
                                                              :ARG0 (c13-15 / cop)
                                                              :ARG1 c13-11))
                                   :condition (c13-5 / true-01
                                                     :ARG1 c13-1))))

# ::snt Prosecution screwed up the Martin/Zimmerman case by over-charging and if emotions guide, over charging will let this cop walk too.
# ::tokens ["Prosecution", "screwed", "up", "the", "Martin", "/", "Zimmerman", "case", "by", "over", "-", "charging", "and", "if", "emotions", "guide", ",", "over", "charging", "will", "let", "this", "cop", "walk", "too", "."]
# ::lemmas ["Prosecution", "screw", "up", "the", "Martin", "/", "Zimmerman", "case", "by", "over", "-", "charge", "and", "if", "emotion", "guide", ",", "over", "charge", "will", "let", "this", "cop", "walk", "too", "."]
(c14-12 / and
        :op1 (c14-16 / screw-up-01
                     :ARG0 (c14-9 / prosecute-01)
                     :ARG1 (c14-10 / case-03
                                   :ARG2 (c14-1 / slash
                                                :op1 (c14-7 / person
                                                            :name (c14-17 / name
                                                                          :op1 "Martin"))
                                                :op2 (c14-0 / person
                                                            :name (c14-8 / name
                                                                         :op1 "Zimmerman"))))
                     :manner (c14-15 / charge-02
                                     :ARG1 c14-9
                                     :ARG1-of (c14-6 / over-03)))
        :op2 (c14-13 / let-01
                     :ARG0 c14-15
                     :ARG1 (c14-2 / walk-01
                                  :ARG0 (c14-11 / cop
                                                :mod (c14-3 / this))
                                  :mod (c14-4 / too))
                     :condition (c14-14 / guide-01
                                        :ARG0 (c14-5 / emotion))))

# ::snt The first goal is to get a conviction so he can never be a cop again.
# ::tokens ["The", "first", "goal", "is", "to", "get", "a", "conviction", "so", "he", "can", "never", "be", "a", "cop", "again", "."]
# ::lemmas ["the", "first", "goal", "be", "to", "get", "a", "conviction", "so", "he", "can", "never", "be", "a", "cop", "again", "."]
(c15-0 / have-purpose-91
       :ARG2 (c15-4 / get-01
                    :ARG1 (c15-3 / convict-01
                                 :ARG1 (c15-1 / he))
                    :purpose (c15-2 / possible-01
                                    :ARG1 (c15-7 / cop
                                                 :domain c15-1
                                                 :time (c15-8 / ever)
                                                 :mod (c15-5 / again))
                                    :polarity -))
       :ord (c15-6 / ordinal-entity
                   :value 1))
