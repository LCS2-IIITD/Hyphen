# ::snt initially, but found out about the robbery during the altercation
# ::tokens ["initially", ",", "but", "found", "out", "about", "the", "robbery", "during", "the", "altercation"]
# ::lemmas ["initially", ",", "but", "find", "out", "about", "the", "robbery", "during", "the", "altercation"]
(c1-2 / contrast-01
      :ARG2 (c1-0 / find-out-03
                  :ARG1 (c1-4 / rob-01)
                  :time (c1-3 / altercation))
      :time (c1-1 / initially))

# ::snt may be prudent to ask clerk if Brown was the one who hit him
# ::tokens ["may", "be", "prudent", "to", "ask", "clerk", "if", "Brown", "was", "the", "one", "who", "hit", "him"]
# ::lemmas ["may", "be", "prudent", "to", "ask", "clerk", "if", "Brown", "be", "the", "one", "who", "hit", "he"]
(c2-4 / possible-01
      :ARG1 (c2-3 / prudent
                  :domain (c2-6 / ask-01
                                :ARG1 (c2-2 / truth-value
                                            :polarity-of (c2-1 / hit-01
                                                               :ARG0 (c2-0 / person
                                                                           :name (c2-7 / name
                                                                                       :op1 "Brown"))
                                                               :ARG1 (c2-5 / clerk
                                                                           :ARG2-of c2-6))))))

# ::snt It's a conniving way to do a smear campaign. Darren Wilson is a cold-blooded murderer.
# ::tokens ["It", "'s", "a", "conniving", "way", "to", "do", "a", "smear", "campaign", ".", "Darren", "Wilson", "is", "a", "cold", "-", "blooded", "murderer", "."]
# ::lemmas ["it", "be", "a", "connive", "way", "to", "do", "a", "smear", "campaign", ".", "Darren", "Wilson", "be", "a", "cold", "-", "blooded", "murderer", "."]
(c3-1 / multi-sentence
      :snt1 (c3-0 / way
                  :manner-of (c3-3 / do-02
                                   :ARG1 (c3-4 / campaign-01
                                               :ARG1 (c3-10 / smear-02)))
                  :ARG0-of (c3-8 / connive-01)
                  :domain (c3-5 / it))
      :snt2 (c3-6 / person
                  :ARG0-of (c3-9 / murder-01)
                  :ARG1-of (c3-12 / blood-02
                                  :ARG1-of (c3-7 / cold-02))
                  :domain (c3-2 / person
                                :name (c3-11 / name
                                             :op1 "Darren"
                                             :op2 "Wilson"))))

# ::snt Because jaywalking and stealing cigars are capital crimes. It's the classic "Blame the victim" defense.
# ::tokens ["Because", "jaywalking", "and", "stealing", "cigars", "are", "capital", "crimes", ".", "It", "'s", "the", "classic", "\"", "Blame", "the", "victim", "\"", "defense", "."]
# ::lemmas ["because", "jaywalk", "and", "steal", "cigar", "be", "capital", "crime", ".", "it", "be", "the", "classic", "\"", "blame", "the", "victim", "\"", "defense", "."]
(c4-1 / multi-sentence
      :snt1 (c4-5 / cause-01
                  :ARG0 (c4-10 / crime-02
                               :ARG1 (c4-9 / and
                                           :op1 (c4-2 / jaywalk-00)
                                           :op2 (c4-7 / steal-01
                                                      :ARG1 (c4-6 / cigar)))
                               :mod (c4-0 / capital)))
      :snt2 (c4-4 / defend-01
                  :ARG2 (c4-11 / blame-01
                               :ARG1 (c4-8 / victim))
                  :mod (c4-3 / classic)))

# ::snt SUSPICION of a crime results n DEATH of the unarmed in the comm as a rule.
# ::tokens ["SUSPICION", "of", "a", "crime", "results", "n", "DEATH", "of", "the", "unarmed", "in", "the", "comm", "as", "a", "rule", "."]
# ::lemmas ["SUSPICION", "of", "a", "crime", "result", "n", "DEATH", "of", "the", "unarmed", "in", "the", "comm", "as", "a", "rule", "."]
(c5-6 / result-01
      :ARG1 (c5-3 / concentrate-01
                  :ARG1 (c5-7 / crime-02))
      :ARG2 (c5-1 / die-01
                  :ARG1 (c5-2 / person
                              :ARG1-of (c5-5 / arm-01
                                             :polarity -)
                              :location (c5-4 / comm
                                              :ARG1-of (c5-0 / rule-01)))))

# ::snt &lt;&lt;he didn't know at all they still has a B.O.L.O out at for the suspect
# ::tokens ["&", "lt;&lt;he", "did", "n't", "know", "at", "all", "they", "still", "has", "a", "B.O.L.O", "out", "at", "for", "the", "suspect"]
# ::lemmas ["&", "lt;&lt;he", "do", "not", "know", "at", "all", "they", "still", "have", "a", "B.O.L.O", "out", "at", "for", "the", "suspect"]
(c6-0 / know-01
      :ARG0 (c6-1 / he)
      :ARG1 (c6-4 / have-03
                  :ARG0 (c6-3 / they)
                  :ARG1 (c6-7 / person
                              :ARG0-of (c6-11 / have-org-role-91
                                              :ARG1 (c6-9 / organization
                                                          :name (c6-12 / name
                                                                       :op1 "B.O.L.O."))
                                              :ARG2 (c6-5 / out-06
                                                          :ARG1 c6-7
                                                          :ARG2 (c6-6 / person
                                                                      :ARG2-of (c6-10 / suspect-01)))))
                  :mod (c6-2 / still))
      :degree (c6-8 / at-all)
      :polarity -)

# ::snt wasn't it just this morning they were saying it was the reason
# ::tokens ["was", "n't", "it", "just", "this", "morning", "they", "were", "saying", "it", "was", "the", "reason"]
# ::lemmas ["be", "not", "it", "just", "this", "morning", "they", "be", "say", "it", "be", "the", "reason"]
(c7-8 / say-01
      :ARG0 (c7-1 / they)
      :ARG1 (c7-7 / reason
                  :domain (c7-6 / it))
      :time (c7-5 / date-entity
                  :dayperiod (c7-2 / morning)
                  :mod (c7-3 / today)
                  :mod (c7-4 / just))
      :ARG1-of (c7-0 / request-confirmation-91))

# ::snt I'm not sure there was a "robbery". Convenience stores keep tobacco behind a counter where you PAY first! IJS
# ::tokens ["I", "'m", "not", "sure", "there", "was", "a", "\"", "robbery", "\"", ".", "Convenience", "stores", "keep", "tobacco", "behind", "a", "counter", "where", "you", "PAY", "first", "!", "IJS"]
# ::lemmas ["i", "be", "not", "sure", "there", "be", "a", "\"", "robbery", "\"", ".", "convenience", "store", "keep", "tobacco", "behind", "a", "counter", "where", "you", "pay", "first", "!", "IJS"]
(c8-4 / multi-sentence
      :snt1 (c8-12 / sure-02
                   :ARG0 (c8-7 / i)
                   :ARG1 (c8-10 / rob-01)
                   :polarity -)
      :snt2 (c8-0 / keep-01
                  :ARG0 (c8-2 / store
                              :mod (c8-8 / convenience))
                  :ARG1 (c8-3 / tobacco)
                  :location (c8-14 / behind
                                   :op1 (c8-11 / counter))
                  :location-of (c8-9 / pay-01
                                     :ARG0 (c8-1 / you)
                                     :ord (c8-5 / ordinal-entity
                                                :value 1)))
      :snt3 (c8-6 / person
                  :name (c8-13 / name
                               :op1 "IJS")))

# ::snt if u watch the tape, he reached over counter, still not grounds to shoot him from behind
# ::tokens ["if", "u", "watch", "the", "tape", ",", "he", "reached", "over", "counter", ",", "still", "not", "grounds", "to", "shoot", "him", "from", "behind"]
# ::lemmas ["if", "u", "watch", "the", "tape", ",", "he", "reach", "over", "counter", ",", "still", "not", "ground", "to", "shoot", "he", "from", "behind"]
(c9-8 / reach-01
      :ARG0 (c9-2 / he)
      :ARG1 (c9-5 / counter)
      :condition (c9-1 / watch-01
                       :ARG0 (c9-0 / you)
                       :ARG1 (c9-4 / tape))
      :ARG0-of (c9-9 / cause-01
                     :ARG1 (c9-7 / ground-02
                                 :ARG1 (c9-6 / shoot-02
                                             :ARG1 c9-2
                                             :manner (c9-10 / behind))
                                 :mod (c9-3 / still)
                                 :polarity -)))

# ::snt you can't tell whether there was somebody behind the counter or not. Either way not related to shooting.
# ::tokens ["you", "ca", "n't", "tell", "whether", "there", "was", "somebody", "behind", "the", "counter", "or", "not", ".", "Either", "way", "not", "related", "to", "shooting", "."]
# ::lemmas ["you", "can", "not", "tell", "whether", "there", "be", "somebody", "behind", "the", "counter", "or", "not", ".", "either", "way", "not", "related", "to", "shoot", "."]
(c10-4 / multi-sentence
       :snt1 (c10-6 / possible-01
                    :ARG1 (c10-5 / tell-02
                                 :ARG0 (c10-0 / you)
                                 :ARG1 (c10-3 / truth-value
                                              :polarity-of (c10-12 / be-located-at-91
                                                                   :ARG1 (c10-10 / somebody)
                                                                   :ARG2 (c10-8 / behind
                                                                                :op1 (c10-7 / counter)))))
                    :polarity -)
       :snt2 (c10-9 / relate-01
                    :ARG1 (c10-1 / way
                                 :mod (c10-11 / either))
                    :ARG2 (c10-2 / shoot-02)
                    :polarity -))

# ::snt I hear ya, but u said the swishers were behind the counter and they were, no biggie
# ::tokens ["I", "hear", "ya", ",", "but", "u", "said", "the", "swishers", "were", "behind", "the", "counter", "and", "they", "were", ",", "no", "biggie"]
# ::lemmas ["i", "hear", "ya", ",", "but", "u", "say", "the", "swisher", "be", "behind", "the", "counter", "and", "they", "be", ",", "no", "biggie"]
(c11-1 / hear-01
       :ARG0 (c11-3 / i)
       :ARG2 (c11-0 / you)
       :concession-of (c11-6 / and
                             :op1 (c11-8 / say-01
                                         :ARG0 c11-0
                                         :ARG1 (c11-4 / person
                                                      :ARG0-of (c11-2 / ishers-01)
                                                      :location (c11-9 / behind
                                                                       :op1 (c11-5 / counter))))
                             :op2 (c11-7 / biggie
                                         :polarity -)))

# ::snt their account is getting worse and worse Roland
# ::tokens ["their", "account", "is", "getting", "worse", "and", "worse", "Roland"]
# ::lemmas ["their", "account", "be", "get", "bad", "and", "bad", "Roland"]
(c12-5 / say-01
       :ARG0 (c12-2 / i)
       :ARG1 (c12-0 / worsen-01
                    :ARG1 (c12-4 / account
                                 :poss (c12-1 / they)))
       :ARG2 (c12-3 / person
                    :name (c12-6 / name
                                 :op1 "Roland")))

# ::snt they've been throwing out one lie after another. And none of it makes sense. How was he "prime suspect" just minutes after?
# ::tokens ["they", "'ve", "been", "throwing", "out", "one", "lie", "after", "another", ".", "And", "none", "of", "it", "makes", "sense", ".", "How", "was", "he", "\"", "prime", "suspect", "\"", "just", "minutes", "after", "?"]
# ::lemmas ["they", "'ve", "be", "throw", "out", "one", "lie", "after", "another", ".", "and", "none", "of", "it", "make", "sense", ".", "how", "be", "he", "\"", "prime", "suspect", "\"", "just", "minutes", "after", "?"]
(c13-19 / multi-sentence
        :snt1 (c13-6 / throw-out-06
                     :ARG0 (c13-18 / they)
                     :ARG1 (c13-2 / lie-08
                                  :ARG0 c13-18
                                  :mod (c13-16 / one)
                                  :mod (c13-15 / after
                                               :op1 (c13-10 / lie-08
                                                            :mod (c13-4 / another)))))
        :snt2 (c13-17 / and
                      :op2 (c13-9 / sense-02
                                  :ARG1 (c13-13 / it
                                                :quant (c13-11 / none))
                                  :polarity -))
        :snt3 (c13-12 / suspect-01
                      :ARG0 (c13-0 / he)
                      :mod (c13-14 / prime)
                      :time (c13-1 / after
                                   :quant (c13-20 / multiple
                                                  :op1 (c13-7 / temporal-quantity
                                                              :unit (c13-3 / minute)
                                                              :quant 1))
                                   :mod (c13-8 / just))
                      :manner (c13-5 / amr-unknown)))

# ::snt when that didn't made logical sense, now it was jaywalking? And he felt the nd to use deadly force for jaywalking? Lol
# ::tokens ["when", "that", "did", "n't", "made", "logical", "sense", ",", "now", "it", "was", "jaywalking", "?", "And", "he", "felt", "the", "nd", "to", "use", "deadly", "force", "for", "jaywalking", "?", "Lol"]
# ::lemmas ["when", "that", "do", "not", "make", "logical", "sense", ",", "now", "it", "be", "jaywalk", "?", "and", "he", "feel", "the", "nd", "to", "use", "deadly", "force", "for", "jaywalking", "?", "Lol"]
(c14-3 / multi-sentence
       :snt1 (c14-4 / jaywalking
                    :time (c14-13 / sense-02
                                  :ARG1 (c14-2 / that)
                                  :mod (c14-9 / logical)
                                  :time (c14-16 / now)
                                  :polarity -))
       :snt2 (c14-10 / and
                     :op2 (c14-5 / feel-01
                                 :ARG0 (c14-1 / he)
                                 :ARG1 (c14-7 / need-01
                                              :ARG0 c14-1
                                              :ARG1 (c14-8 / use-01
                                                           :ARG0 c14-1
                                                           :ARG1 (c14-11 / force-04
                                                                         :ARG0-of (c14-0 / kill-01))
                                                           :ARG2 (c14-6 / jaywalking))))
                     :polarity (c14-12 / amr-unknown))
       :snt3 (c14-15 / laugh-01
                     :manner (c14-14 / loud)
                     :mode expressive))

# ::snt Well, yeah. He had to trash the name of a dead child before providing that little tid bit.
# ::tokens ["Well", ",", "yeah", ".", "He", "had", "to", "trash", "the", "name", "of", "a", "dead", "child", "before", "providing", "that", "little", "tid", "bit", "."]
# ::lemmas ["well", ",", "yeah", ".", "he", "have", "to", "trash", "the", "name", "of", "a", "dead", "child", "before", "provide", "that", "little", "tid", "bit", "."]
(c15-4 / multi-sentence
       :snt1 (c15-0 / yeah
                    :mod (c15-1 / well))
       :snt2 (c15-12 / obligate-01
                     :ARG1 (c15-2 / he)
                     :ARG2 (c15-3 / trash-01
                                  :ARG0 c15-2
                                  :ARG1 (c15-5 / thing
                                               :ARG2-of (c15-14 / name-01
                                                                :ARG1 (c15-8 / child
                                                                             :ARG1-of (c15-7 / die-01))))
                                  :time (c15-15 / before
                                                :op1 (c15-9 / provide-01
                                                            :ARG0 c15-2
                                                            :ARG1 (c15-10 / bit
                                                                          :mod (c15-11 / little)
                                                                          :mod (c15-6 / that)
                                                                          :mod (c15-13 / tid)))))))

# ::snt ok so that was mike in the convenience store?
# ::tokens ["ok", "so", "that", "was", "mike", "in", "the", "convenience", "store", "?"]
# ::lemmas ["ok", "so", "that", "be", "mike", "in", "the", "convenience", "store", "?"]
(c16-5 / be-located-at-91
       :ARG1 (c16-0 / that)
       :ARG2 (c16-4 / store
                    :mod (c16-1 / convenience))
       :ARG1-of (c16-3 / okay-04)
       :polarity (c16-2 / amr-unknown))
