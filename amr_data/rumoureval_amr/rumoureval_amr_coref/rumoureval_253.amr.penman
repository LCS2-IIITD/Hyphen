# ::snt hallelujah, enjoy the virgins
# ::tokens ["hallelujah", ",", "enjoy", "the", "virgins"]
# ::lemmas ["hallelujah", ",", "enjoy", "the", "virgin"]
(c1-3 / enjoy-01
      :ARG0 (c1-0 / you)
      :ARG1 (c1-2 / virgin)
      :mod (c1-1 / hallelujah
                 :mode expressive)
      :mode imperative)

# ::snt good thats a start
# ::tokens ["good", "that", "s", "a", "start"]
# ::lemmas ["good", "that", "s", "a", "start"]
(c2-1 / good-02
      :ARG1 (c2-0 / start-01
                  :ARG2 (c2-2 / that)))

# ::snt Got the bastards! ": AFP: suspected gunmen have been killed
# ::tokens ["Got", "the", "bastards", "!", "\"", ":", "AFP", ":", "suspected", "gunmen", "have", "been", "killed"]
# ::lemmas ["got", "the", "bastard", "!", "\"", ":", "AFP", ":", "suspect", "gunman", "have", "be", "kill"]
(c3-4 / say-01
      :ARG0 (c3-2 / publication
                  :name (c3-5 / name
                              :op1 "AFP"))
      :ARG1 (c3-0 / kill-01
                  :ARG1 (c3-3 / gunman
                              :ARG2-of (c3-1 / suspect-01))))

# ::snt : AFP: suspected gunmen have been killed Hoping that this is now the end
# ::tokens [":", "AFP", ":", "suspected", "gunmen", "have", "been", "killed", "Hoping", "that", "this", "is", "now", "the", "end"]
# ::lemmas [":", "AFP", ":", "suspect", "gunman", "have", "be", "kill", "hope", "that", "this", "be", "now", "the", "end"]
(c4-9 / say-01
      :ARG0 (c4-6 / publication
                  :name (c4-10 / name
                               :op1 "AFP"))
      :ARG1 (c4-0 / kill-01
                  :ARG1 (c4-8 / gunman
                              :ARG2-of (c4-1 / suspect-01))
                  :ARG1-of (c4-7 / cause-01
                                 :ARG0 (c4-2 / hope-01
                                             :ARG1 (c4-3 / end-01
                                                         :ARG1 (c4-4 / this)
                                                         :time (c4-5 / now))))))

# ::snt it will never be the end
# ::tokens ["it", "will", "never", "be", "the", "end"]
# ::lemmas ["it", "will", "never", "be", "the", "end"]
(c5-2 / end-01
      :ARG1 (c5-0 / it)
      :time (c5-1 / ever)
      :polarity -)

# ::snt : AFP: suspected gunmen have been killed &lt;&lt;&lt;Was inevitable
# ::tokens [":", "AFP", ":", "suspected", "gunmen", "have", "been", "killed", "&", "lt;&lt;&lt;Was", "inevitable"]
# ::lemmas [":", "AFP", ":", "suspect", "gunman", "have", "be", "kill", "&", "lt;&lt;&lt;Was", "inevitable"]
(c6-7 / say-01
      :ARG0 (c6-3 / publication
                  :name (c6-8 / name
                              :op1 "AFP"))
      :ARG1 (c6-4 / and
                  :op1 (c6-0 / kill-01
                             :ARG1 (c6-5 / gunman
                                         :ARG2-of (c6-1 / suspect-01)))
                  :op2 (c6-2 / possible-01
                             :ARG1 (c6-6 / avoid-01
                                         :ARG1 c6-0)
                             :polarity -)))

# ::snt : AFP: suspected gunmen have been killed vive la France
# ::tokens [":", "AFP", ":", "suspected", "gunmen", "have", "been", "killed", "vive", "la", "France"]
# ::lemmas [":", "AFP", ":", "suspect", "gunman", "have", "be", "kill", "vive", "la", "France"]
(c7-6 / say-01
      :ARG0 (c7-3 / publication
                  :name (c7-7 / name
                              :op1 "AFP"))
      :ARG1 (c7-0 / kill-01
                  :ARG1 (c7-5 / gunman
                              :ARG2-of (c7-1 / suspect-01))
                  :location (c7-4 / city
                                  :name (c7-2 / name
                                              :op1 "Vive"
                                              :op2 "la"
                                              :op3 "France"))))

# ::snt : AFP: suspected gunmen have been killed BANG BANG NIGGA
# ::tokens [":", "AFP", ":", "suspected", "gunmen", "have", "been", "killed", "BANG", "BANG", "NIGGA"]
# ::lemmas [":", "AFP", ":", "suspect", "gunman", "have", "be", "kill", "BANG", "BANG", "NIGGA"]
(c8-6 / say-01
      :ARG0 (c8-3 / publication
                  :name (c8-7 / name
                              :op1 "AFP"))
      :ARG1 (c8-0 / kill-01
                  :ARG1 (c8-5 / gunman
                              :ARG2-of (c8-1 / suspect-01))
                  :location (c8-4 / city
                                  :name (c8-2 / name
                                              :op1 "Bang"
                                              :op2 "Bang"
                                              :op3 "Nigga"))))

# ::snt like a Bogo',' and done
# ::tokens ["like", "a", "Bogo", "'", ",", "'", "and", "done"]
# ::lemmas ["like", "a", "Bogo", "'", ",", "'", "and", "do"]
(c9-1 / and
      :op1 (c9-2 / resemble-01
                 :ARG2 (c9-3 / boogie))
      :op2 (c9-0 / be-done-08))

# ::snt Great outcome. All murderers dead. All hostages freed. Great job by French police
# ::tokens ["Great", "outcome", ".", "All", "murderers", "dead", ".", "All", "hostages", "freed", ".", "Great", "job", "by", "French", "police"]
# ::lemmas ["great", "outcome", ".", "all", "murderer", "dead", ".", "all", "hostage", "free", ".", "great", "job", "by", "French", "police"]
(c10-2 / multi-sentence
       :snt1 (c10-12 / outcome
                     :mod (c10-9 / great))
       :snt2 (c10-6 / die-01
                    :ARG1 (c10-7 / person
                                 :ARG0-of (c10-13 / murder-01)
                                 :mod (c10-10 / all)))
       :snt3 (c10-3 / free-01
                    :ARG0 (c10-5 / police
                                 :mod (c10-8 / country
                                             :name (c10-14 / name
                                                           :op1 "France")))
                    :ARG1 (c10-0 / hostage
                                 :mod (c10-11 / all)))
       :snt4 (c10-4 / job
                    :mod (c10-1 / great)))

# ::snt : AFP: suspected gunmen have been killed
# ::tokens [":", "AFP", ":", "suspected", "gunmen", "have", "been", "killed"]
# ::lemmas [":", "AFP", ":", "suspect", "gunman", "have", "be", "kill"]
(c11-4 / say-01
       :ARG0 (c11-2 / publication
                    :name (c11-5 / name
                                 :op1 "AFP"))
       :ARG1 (c11-0 / kill-01
                    :ARG1 (c11-3 / gunman
                                 :ARG2-of (c11-1 / suspect-01))))

# ::snt good
# ::tokens ["good"]
# ::lemmas ["good"]
(c12-0 / good-02)

# ::snt : AFP: suspected gunmen have been killed yayyy
# ::tokens [":", "AFP", ":", "suspected", "gunmen", "have", "been", "killed", "yayyy"]
# ::lemmas [":", "AFP", ":", "suspect", "gunman", "have", "be", "kill", "yayyy"]
(c13-5 / say-01
       :ARG0 (c13-3 / publication
                    :name (c13-6 / name
                                 :op1 "AFP"))
       :ARG1 (c13-0 / kill-01
                    :ARG1 (c13-4 / gunman
                                 :ARG2-of (c13-2 / suspect-01))
                    :mod (c13-1 / yay)))

# ::snt go on shoot em again just to make sure
# ::tokens ["go", "on", "shoot", "em", "again", "just", "to", "make", "sure"]
# ::lemmas ["go", "on", "shoot", "em", "again", "just", "to", "make", "sure"]
(c14-3 / go-03
       :ARG0 (c14-0 / you)
       :ARG1 (c14-5 / shoot-02
                    :ARG0 c14-0
                    :ARG1 (c14-1 / they)
                    :mod (c14-4 / again)
                    :purpose (c14-6 / ensure-01
                                    :ARG0 c14-0
                                    :mod (c14-2 / just)))
       :mode imperative)

# ::snt stick em full of pencils.
# ::tokens ["stick", "em", "full", "of", "pencils", "."]
# ::lemmas ["stick", "em", "full", "of", "pencil", "."]
(c15-4 / stick-01
       :ARG0 (c15-0 / you)
       :ARG1 (c15-1 / they)
       :ARG2 (c15-2 / full-09
                    :ARG1 c15-1
                    :ARG2 (c15-3 / pencil))
       :mode imperative)

# ::snt and shove a copy of up their ass
# ::tokens ["and", "shove", "a", "copy", "of", "up", "their", "ass"]
# ::lemmas ["and", "shove", "a", "copy", "of", "up", "their", "ass"]
(c16-4 / and
       :op2 (c16-6 / shove-01
                   :ARG0 (c16-1 / they
                                :part (c16-5 / ass))
                   :ARG1 (c16-0 / thing
                                :ARG1-of (c16-2 / copy-01))
                   :ARG2 c16-5
                   :direction (c16-3 / up)))

# ::snt then send them to the countries the supported as a sign. We are not backing down
# ::tokens ["then", "send", "them", "to", "the", "countries", "the", "supported", "as", "a", "sign", ".", "We", "are", "not", "backing", "down"]
# ::lemmas ["then", "send", "they", "to", "the", "country", "the", "support", "as", "a", "sign", ".", "we", "be", "not", "back", "down"]
(c17-5 / multi-sentence
       :snt1 (c17-8 / send-01
                    :ARG0 (c17-0 / you)
                    :ARG1 (c17-4 / they)
                    :ARG2 (c17-7 / country
                                 :ARG1-of (c17-3 / support-01)
                                 :ARG0-of (c17-1 / signal-07))
                    :time (c17-6 / then)
                    :mode imperative)
       :snt2 (c17-9 / back-down-11
                    :ARG0 (c17-2 / we)
                    :polarity -))

# ::snt that's a good idea, just attach a note saying " I think this is your shit have it back"
# ::tokens ["that", "'s", "a", "good", "idea", ",", "just", "attach", "a", "note", "saying", "\"", "I", "think", "this", "is", "your", "shit", "have", "it", "back", "\""]
# ::lemmas ["that", "be", "a", "good", "idea", ",", "just", "attach", "a", "note", "say", "\"", "i", "think", "this", "be", "your", "shit", "have", "it", "back", "\""]
(c18-9 / and
       :op1 (c18-7 / idea
                   :ARG1-of (c18-8 / good-02)
                   :domain (c18-3 / that))
       :op2 (c18-10 / attach-01
                    :ARG1 (c18-12 / note
                                  :ARG0-of (c18-11 / say-01
                                                   :ARG1 (c18-4 / think-01
                                                                :ARG0 (c18-1 / i)
                                                                :ARG1 (c18-2 / shit
                                                                             :poss (c18-0 / you)
                                                                             :domain (c18-5 / this)))))
                    :mod (c18-6 / just)
                    :manner (c18-13 / back)))

# ::snt wonder if get the impression we are sick of these extremists and how the government just let them in
# ::tokens ["wonder", "if", "get", "the", "impression", "we", "are", "sick", "of", "these", "extremists", "and", "how", "the", "government", "just", "let", "them", "in"]
# ::lemmas ["wonder", "if", "get", "the", "impression", "we", "be", "sick", "of", "these", "extremist", "and", "how", "the", "government", "just", "let", "they", "in"]
(c19-0 / wonder-01
       :ARG0 (c19-7 / i)
       :ARG1 (c19-3 / truth-value
                    :polarity-of (c19-1 / impression-03
                                        :ARG0 (c19-11 / we)
                                        :ARG1 (c19-8 / and
                                                     :op1 (c19-12 / sick-04
                                                                  :ARG0 (c19-13 / extremist
                                                                                :mod (c19-4 / this))
                                                                  :ARG1 c19-11)
                                                     :op2 (c19-9 / let-01
                                                                 :ARG0 (c19-10 / government-organization
                                                                               :ARG0-of (c19-2 / govern-01))
                                                                 :ARG1 (c19-5 / inside)
                                                                 :mod (c19-6 / just))))))

# ::snt it could never happen here, we don't have a paper with enough balls to publish anything that offends Muslims
# ::tokens ["it", "could", "never", "happen", "here", ",", "we", "do", "n't", "have", "a", "paper", "with", "enough", "balls", "to", "publish", "anything", "that", "offends", "Muslims"]
# ::lemmas ["it", "could", "never", "happen", "here", ",", "we", "do", "not", "have", "a", "paper", "with", "enough", "ball", "to", "publish", "anything", "that", "offend", "Muslims"]
(c20-9 / and
       :op1 (c20-7 / possible-01
                   :ARG1 (c20-6 / it)
                   :location (c20-1 / here)
                   :time (c20-15 / ever)
                   :polarity -)
       :op2 (c20-3 / have-03
                   :ARG0 (c20-0 / we)
                   :ARG1 (c20-4 / paper
                                :ARG1 (c20-16 / ball
                                              :ARG1-of (c20-14 / have-quant-91
                                                               :ARG3 (c20-8 / enough)
                                                               :ARG6 (c20-2 / publish-01
                                                                            :ARG0 c20-4
                                                                            :ARG1 (c20-13 / anything
                                                                                          :ARG0-of (c20-12 / offend-01
                                                                                                           :ARG1 (c20-10 / person
                                                                                                                         :mod (c20-11 / religious-group
                                                                                                                                      :name (c20-5 / name
                                                                                                                                                   :op1 "Muslim"))))))))
                                :ARG0-of c20-3)
                   :polarity -))

# ::snt true. Perhaps they should all grow some
# ::tokens ["true", ".", "Perhaps", "they", "should", "all", "grow", "some"]
# ::lemmas ["true", ".", "perhaps", "they", "should", "all", "grow", "some"]
(c21-1 / multi-sentence
       :snt1 (c21-0 / true-01)
       :snt2 (c21-3 / possible-01
                    :ARG1 (c21-6 / recommend-01
                                 :ARG1 (c21-4 / grow-03
                                              :ARG0 (c21-2 / they
                                                           :mod (c21-5 / all))
                                              :quant (c21-7 / some)))))

# ::snt sod watching them and then them escaping being watched. If they support terrorism. .send them out of our country
# ::tokens ["sod", "watching", "them", "and", "then", "them", "escaping", "being", "watched", ".", "If", "they", "support", "terrorism", ".", ".send", "them", "out", "of", "our", "country"]
# ::lemmas ["sod", "watch", "they", "and", "then", "they", "escape", "be", "watch", ".", "if", "they", "support", "terrorism", ".", ".send", "they", "out", "of", "our", "country"]
(c22-5 / multi-sentence
       :snt1 (c22-9 / and
                    :op1 (c22-2 / watch-01
                                :ARG1 (c22-4 / they))
                    :op2 (c22-14 / escape-01
                                 :ARG0 c22-4
                                 :ARG1 (c22-11 / watch-01
                                               :ARG1 c22-4)
                                 :time (c22-6 / then)))
       :snt2 (c22-12 / send-01
                     :ARG0 (c22-0 / you)
                     :ARG1 (c22-7 / they)
                     :ARG2 (c22-10 / out-06
                                   :ARG1 c22-7
                                   :ARG2 (c22-8 / country
                                                :poss (c22-1 / we)))
                     :condition (c22-3 / support-01
                                       :ARG0 c22-7
                                       :ARG1 (c22-13 / terrorism))
                     :mode imperative))
