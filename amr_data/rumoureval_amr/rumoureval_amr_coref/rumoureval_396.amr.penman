# ::snt You are reading this sentence right now
# ::tokens ["You", "are", "reading", "this", "sentence", "right", "now"]
# ::lemmas ["you", "be", "read", "this", "sentence", "right", "now"]
(c1-3 / read-01
      :ARG0 (c1-0 / you)
      :ARG1 (c1-4 / sentence
                  :mod (c1-2 / this))
      :time (c1-5 / now
                  :mod (c1-1 / right)))

# ::snt Are you? What if your brain is in a vat and this is all a simulation?
# ::tokens ["Are", "you", "?", "What", "if", "your", "brain", "is", "in", "a", "vat", "and", "this", "is", "all", "a", "simulation", "?"]
# ::lemmas ["be", "you", "?", "what", "if", "your", "brain", "be", "in", "a", "vat", "and", "this", "be", "all", "a", "simulation", "?"]
(c2-2 / multi-sentence
      :snt1 (c2-0 / you
                  :polarity (c2-5 / amr-unknown))
      :snt2 (c2-7 / amr-unknown
                  :condition (c2-8 / and
                                   :op1 (c2-11 / be-located-at-91
                                               :ARG1 (c2-6 / brain
                                                           :part-of (c2-10 / you))
                                               :ARG2 (c2-3 / vat))
                                   :op2 (c2-9 / simulate-01
                                              :ARG1 (c2-1 / this
                                                          :mod (c2-4 / all))))))

# ::snt Brain in a jar theory
# ::tokens ["Brain", "in", "a", "jar", "theory"]
# ::lemmas ["brain", "in", "a", "jar", "theory"]
(c3-2 / theory
      :mod (c3-1 / brain
                 :location (c3-0 / jar)))

# ::snt It's like Schrodinger's cat
# ::tokens ["It", "'s", "like", "Schrodinger", "'s", "cat"]
# ::lemmas ["it", "be", "like", "Schrodinger", "'s", "cat"]
(c4-3 / resemble-01
      :ARG1 (c4-2 / it)
      :ARG2 (c4-0 / cat
                  :poss (c4-1 / person
                              :name (c4-4 / name
                                          :op1 "Schrodinger"))))

# ::snt You are reading this here as well. So there must be tons of potentially true statements.
# ::tokens ["You", "are", "reading", "this", "here", "as", "well", ".", "So", "there", "must", "be", "tons", "of", "potentially", "true", "statements", "."]
# ::lemmas ["you", "be", "read", "this", "here", "as", "well", ".", "so", "there", "must", "be", "ton", "of", "potentially", "true", "statement", "."]
(c5-3 / multi-sentence
      :snt1 (c5-9 / read-01
                  :ARG0 (c5-0 / you)
                  :ARG1 (c5-2 / this)
                  :location (c5-1 / here)
                  :mod (c5-8 / as-well))
      :snt2 (c5-6 / infer-01
                  :ARG1 (c5-4 / thing
                              :ARG1-of (c5-10 / state-01)
                              :ARG1-of (c5-5 / true-01
                                             :mod (c5-7 / potential))
                              :quant (c5-11 / ton))))

# ::snt Someone, somewhere, will always disagree.
# ::tokens ["Someone", ",", "somewhere", ",", "will", "always", "disagree", "."]
# ::lemmas ["someone", ",", "somewhere", ",", "will", "always", "disagree", "."]
(c6-3 / disagree-01
      :ARG0 (c6-1 / someone
                  :location (c6-2 / somewhere))
      :time (c6-0 / always))

# ::snt Water is wet.
# ::tokens ["Water", "is", "wet", "."]
# ::lemmas ["water", "be", "wet", "."]
(c7-1 / wet-01
      :ARG1 (c7-0 / water))

# ::snt Is water wet? How would you prove that statement?
# ::tokens ["Is", "water", "wet", "?", "How", "would", "you", "prove", "that", "statement", "?"]
# ::lemmas ["be", "water", "wet", "?", "how", "would", "you", "prove", "that", "statement", "?"]
(c8-3 / multi-sentence
      :snt1 (c8-1 / wet-01
                  :polarity (c8-6 / amr-unknown)
                  :ARG1 (c8-8 / water))
      :snt2 (c8-5 / prove-01
                  :ARG0 (c8-0 / you)
                  :ARG1 (c8-2 / thing
                              :mod (c8-4 / that)
                              :ARG1-of (c8-9 / state-01))
                  :manner (c8-7 / amr-unknown)))

# ::snt depends on how much you're willing to sacrifice logic for an argument.At the end of the day,I couldnt even convince you that you're alive right now if you believed otherwise. This could all be a simulation/dream/drug induced state/chemical reaction occuring before you die and are reincarnated as a mountain goat/firm belief in last thursdayism/etc,etc,etc...Now,if we're gonna include functioning logic...The statement that "math is the language of the universe" is about the truest statement I think someone can make. Math is the rules we abide by in our reality and you can not fight or go against it. In the simplest terms possible: +2 is always . Anyones opinion is irrelavent and this equation will always be true.
# ::tokens ["depends", "on", "how", "much", "you", "'re", "willing", "to", "sacrifice", "logic", "for", "an", "argument", ".", "At", "the", "end", "of", "the", "day", ",", "I", "could", "nt", "even", "convince", "you", "that", "you", "'re", "alive", "right", "now", "if", "you", "believed", "otherwise", ".", "This", "could", "all", "be", "a", "simulation", "/", "dream", "/", "drug", "induced", "state", "/", "chemical", "reaction", "occuring", "before", "you", "die", "and", "are", "reincarnated", "as", "a", "mountain", "goat", "/", "firm", "belief", "in", "last", "thursdayism", "/", "etc", ",", "etc", ",", "etc", "...", "Now", ",", "if", "we", "'re", "gon", "na", "include", "functioning", "logic", "...", "The", "statement", "that", "\"", "math", "is", "the", "language", "of", "the", "universe", "\"", "is", "about", "the", "truest", "statement", "I", "think", "someone", "can", "make", ".", "Math", "is", "the", "rules", "we", "abide", "by", "in", "our", "reality", "and", "you", "can", "not", "fight", "or", "go", "against", "it", ".", "In", "the", "simplest", "terms", "possible", ":", "+2", "is", "always", ".", "Anyones", "opinion", "is", "irrelavent", "and", "this", "equation", "will", "always", "be", "true", "."]
# ::lemmas ["depend", "on", "how", "much", "you", "be", "willing", "to", "sacrifice", "logic", "for", "an", "argument", ".", "at", "the", "end", "of", "the", "day", ",", "i", "could", "not", "even", "convince", "you", "that", "you", "be", "alive", "right", "now", "if", "you", "believe", "otherwise", ".", "this", "could", "all", "be", "a", "simulation", "/", "dream", "/", "drug", "induce", "state", "/", "chemical", "reaction", "occur", "before", "you", "die", "and", "be", "reincarnate", "as", "a", "mountain", "goat", "/", "firm", "belief", "in", "last", "thursdayism", "/", "etc", ",", "etc", ",", "etc", "...", "now", ",", "if", "we", "be", "going", "to", "include", "function", "logic", "...", "the", "statement", "that", "\"", "math", "be", "the", "language", "of", "the", "universe", "\"", "be", "about", "the", "true", "statement", "i", "think", "someone", "can", "make", ".", "Math", "be", "the", "rule", "we", "abide", "by", "in", "our", "reality", "and", "you", "can", "not", "fight", "or", "go", "against", "it", ".", "in", "the", "simple", "term", "possible", ":", "+2", "be", "always", ".", "anyone", "opinion", "be", "irrelavent", "and", "this", "equation", "will", "always", "be", "true", "."]
(c9-31 / multi-sentence
       :snt1 (c9-23 / depend-01
                    :ARG1 (c9-34 / much
                                 :quant-of (c9-1 / will-02
                                                 :ARG0 (c9-10 / you)
                                                 :ARG1 (c9-15 / sacrifice-01
                                                              :ARG0 c9-10
                                                              :ARG1 (c9-6 / logic)
                                                              :ARG2 (c9-26 / argue-01)))))
       :snt2 (c9-8 / and
                   :op1 (c9-24 / possible-01
                               :ARG1 (c9-13 / convince-01
                                            :ARG0 (c9-25 / i)
                                            :ARG1 (c9-28 / you)
                                            :ARG2 (c9-16 / live-01
                                                         :ARG0 c9-28
                                                         :time (c9-17 / now
                                                                      :mod (c9-7 / right)))
                                            :mod (c9-29 / even))
                               :condition (c9-30 / believe-01
                                                 :ARG0 c9-28
                                                 :ARG1 (c9-2 / have-polarity-91
                                                             :ARG1 c9-16
                                                             :ARG2 -))
                               :polarity -)
                   :op2 (c9-32 / possible-01
                               :ARG1 (c9-20 / slash
                                            :op1 (c9-19 / simulate-01
                                                        :ARG1 (c9-21 / slash
                                                                     :op1 (c9-3 / dream-01
                                                                                :ARG0 (c9-27 / anyone))
                                                                     :op2 (c9-12 / induce-01
                                                                                 :ARG1 c9-27
                                                                                 :ARG2 (c9-35 / drug))))
                                            :op2 (c9-11 / react-01
                                                        :ARG0 c9-27
                                                        :ARG1 c9-21
                                                        :mod (c9-9 / chemical))
                                            :time (c9-33 / before
                                                         :op1 (c9-5 / die-01
                                                                    :ARG1 (c9-0 / you))))
                               :polarity -)
                   :condition (c9-4 / include-01
                                    :ARG0 (c9-14 / we)
                                    :ARG1 (c9-18 / logic
                                                 :ARG0-of (c9-22 / function-01)))))

# ::snt +2=5 when using substantially large values of
# ::tokens ["+2=5", "when", "using", "substantially", "large", "values", "of"]
# ::lemmas ["+2=5", "when", "use", "substantially", "large", "value", "of"]
(c10-5 / equal-01
       :ARG1 (c10-0 / plus
                    :op1 2)
       :condition (c10-2 / use-01
                         :ARG1 (c10-1 / value
                                      :mod (c10-3 / large
                                                  :degree (c10-4 / substantial))))
       :ARG2 5)

# ::snt The answer being is what means that it was not of larger value than what was shown.
# ::tokens ["The", "answer", "being", "is", "what", "means", "that", "it", "was", "not", "of", "larger", "value", "than", "what", "was", "shown", "."]
# ::lemmas ["the", "answer", "be", "be", "what", "mean", "that", "it", "be", "not", "of", "large", "value", "than", "what", "be", "show", "."]
(c11-6 / answer-01
       :ARG2 (c11-2 / mean-01
                    :ARG1 (c11-1 / thing)
                    :ARG2 (c11-5 / value-01
                                 :ARG1 (c11-4 / it)
                                 :ARG1-of (c11-0 / have-degree-91
                                                 :ARG2 (c11-7 / large)
                                                 :ARG3 (c11-8 / more)
                                                 :ARG4 (c11-3 / thing
                                                              :ARG1-of (c11-9 / show-01)))
                                 :polarity -)))

# ::snt I'm simply saying +2 does not always equal
# ::tokens ["I", "'m", "simply", "saying", "+2", "does", "not", "always", "equal"]
# ::lemmas ["i", "be", "simply", "say", "+2", "do", "not", "always", "equal"]
(c12-3 / say-01
       :ARG0 (c12-1 / i)
       :ARG1 (c12-4 / equal-01
                    :polarity -
                    :ARG1 +2)
       :time (c12-2 / always)
       :ARG1-of (c12-0 / simple-02))

# ::snt Valar Morghulis
# ::tokens ["Valar", "Morghulis"]
# ::lemmas ["Valar", "Morghulis"]
(c13-1 / person
       :name (c13-0 / name
                    :op1 "Valar"
                    :op2 "Morghulis"))
