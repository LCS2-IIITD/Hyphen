comment,amr
"THE DEMS ARE RADICAL COMMUNISTS... DEMS THINK THEY ARE ABOVE THE LAW ...CAN DO WHATEVER THEY WANT...DISRESPECT GOV""T OFFICIALS...BLOCK FREE SPEECH....BE VIOLENT....BE VULGAR AND OBNOXIOUS... TIME TO KICK THEIR LIBERAL ASSES TO THE CURB,,,,, ...","# ::snt THE DEMS ARE RADICAL COMMUNISTS... DEMS THINK THEY ARE ABOVE THE LAW ...CAN DO WHATEVER THEY WANT...DISRESPECT GOV""T OFFICIALS...BLOCK FREE SPEECH....BE VIOLENT....BE VULGAR AND OBNOXIOUS... TIME TO KICK THEIR LIBERAL ASSES TO THE CURB,,,,, ...
(a / and
      :op1 (c / community
            :domain (g / government-organization
                  :name (n / name
                        :op1 ""Democrat""))
            :mod (r / RADICAL))
      :op2 (t / think-01
            :ARG0 g
            :ARG1 (a2 / advocate-01
                  :ARG0 g
                  :ARG1 (l / law)))
      :op3 (p / possible-01
            :ARG1 (d / do-02
                  :ARG0 g
                  :ARG1 (t2 / thing
                        :ARG1-of (w / want-01
                              :ARG0 g))))
      :op4 (r2 / respect-01
            :polarity -
            :ARG0 g
            :ARG1 (c2 / civilian
                  :domain g))
      :op5 (p2 / pressure-01
            :ARG0 g
            :ARG1 c2
            :domain g)
      :op6 (f / free-04
            :ARG1 g
            :ARG3 l)
      :op7 (s / shield-01
            :ARG0 g
            :ARG1 c2)
      :op8 (s2 / spew-01
            :ARG0 g
            :ARG1 (j / juice))
      :op9 (p3 / prevail-01
            :ARG0 g)
      :op10 (a3 / and
            :op1 (v / vile-02)
            :op2 (a4 / absurd))
      :op11 (t3 / time
            :time-of (k / kick-01
                  :ARG0 g
                  :ARG1 (a5 / ASS
                        :ARG1-of (l2 / liberal-02)
                        :poss g)
                  :destination (o / organization
                        :name (n2 / name
                              :op1 ""CURB"")))))"
Really? That's not necessary to say that.,"# ::snt Really? That's not necessary to say that.
(m / multi-sentence
      :snt1 (r / real-04
            :polarity (a / amr-unknown))
      :snt2 (n / need-01
            :polarity -
            :ARG1 (s / say-01
                  :ARG1 (t / that))))"
"""Re---ds"" and ""ret--ded"" as used here debases the speaker and may cause offence to the mentally disabled and their families .","# ::snt ""Re---ds"" and ""ret--ded"" as used here debases the speaker and may cause offence to the mentally disabled and their families .
(a / and
      :op1 (o / overturn-01
            :ARG0 (a2 / and
                  :op1 (s / string-entity
                        :value ""Re---ds"")
                  :op2 (s2 / string-entity
                        :value ""ret--ded"")
                  :ARG1-of (u / use-01
                        :location (h / here)))
            :ARG1 (p / person
                  :ARG0-of (s3 / speak-01)))
      :op2 (p2 / possible-01
            :ARG1 (c / cause-01
                  :ARG0 a2
                  :ARG1 (o2 / offend-01
                        :ARG0 a2
                        :ARG1 (a3 / and
                              :op1 (p3 / person
                                    :ARG1-of (d / disable-01
                                          :mod (m / mental)))
                              :op2 (f / family
                                    :poss p3))))))"
"You call people such names but you can't spell for anything, I'm pretty sure your the pot calling the kettle black here.","# ::snt You call people such names but you can't spell for anything, I'm pretty sure your the pot calling the kettle black here.
(a / and
      :op1 (c / contrast-01
            :ARG1 (c2 / call-01
                  :ARG0 (y / you)
                  :ARG1 (p / person)
                  :ARG2 (n / name
                        :mod (s / such)))
            :ARG2 (s2 / spell-01
                  :polarity -
                  :ARG0 y
                  :ARG3 (a2 / anything)))
      :op2 (s3 / sure-02
            :ARG0 (ii / i)
            :ARG1 (c3 / call-01
                  :ARG0 y
                  :ARG1 (k / kettle)
                  :ARG2 (b / black-04)
                  :location (h / here))
            :degree (p2 / pretty)))"
