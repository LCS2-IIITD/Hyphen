comment,amr
No u,"# ::snt No u
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (n / no)
      :ARG2 (y / you))"
No me,"# ::snt No me
(ii / i
      :polarity -)"
Yea u,"# ::snt Yea u
(y / yea
      :mode expressive
      :mod (y2 / you))"
Yea,"# ::snt Yea
(y / yea)"
What rule did I violate? No bot was used in that flood of enrichening memes and thus did not violate TOS,"# ::snt What rule did I violate? No bot was used in that flood of enrichening memes and thus did not violate TOS
(m / multi-sentence
      :snt1 (v / violate-01
            :polarity (a / amr-unknown)
            :ARG0 (ii / i)
            :ARG1 (r / rule
                  :mod (a2 / amr-unknown)))
      :snt2 (c / cause-01
            :ARG0 (u / use-01
                  :polarity -
                  :ARG1 (b / bot)
                  :ARG2 (f / flood-01
                        :ARG2 (m2 / meme
                              :ARG0-of (e / enriche-01))
                        :mod (t / that)))
            :ARG1 (v2 / violate-01
                  :polarity -
                  :ARG0 b
                  :ARG1 (p / publication
                        :name (n / name
                              :op1 ""TOS"")))))"
"I'm just replacing ""u"" with like I did ""me"" before.","# ::snt I'm just replacing ""u"" with like I did ""me"" before.
(r / replace-01
      :ARG0 (ii / i)
      :ARG1 (s / string-entity
            :value ""u"")
      :ARG2 (s2 / string-entity
            :value ""me"")
      :mod (j / just)
      :ARG1-of (r2 / resemble-01
            :ARG2 (r3 / replace-01
                  :ARG0 ii
                  :ARG1 s2
                  :ARG2 s2
                  :time (b / before))))"
no u,"# ::snt no u
(n / no)"
no,"# ::snt no
(n / no)"
no oh that's right he's gone ;_; rip,"# ::snt no oh that's right he's gone ;_; rip
(m / multi-sentence
      :snt1 (o / oh
            :mode expressive
            :domain (r / right-06
                  :ARG1 (t / that)))
      :snt2 (g / go-02
            :ARG0 (h / he))
      :snt3 (r2 / rip-01))"
no,"# ::snt no
(n / no)"
no,"# ::snt no
(n / no)"
no,"# ::snt no
(n / no)"
