comment,amr
"it works ! hammer, hammer, hammer ....","# ::snt it works ! hammer, hammer, hammer ....
(m / multi-sentence
      :snt1 (w / work-09
            :ARG1 (ii / it))
      :snt2 (h / hammer-01
            :mode expressive))"
Black people are no longer referred to as niggers. It is considered a racial slur.,"# ::snt Black people are no longer referred to as niggers. It is considered a racial slur.
(m / multi-sentence
      :snt1 (r / refer-01
            :ARG1 (p / person
                  :ARG1-of (b / black-05)
                  :ARG2-of r)
            :mod (g / gang))
      :time (n / no-longer)
      :snt2 (c / consider-01
            :ARG1 (s / slur
                  :mod (r2 / race)
                  :domain (ii / it))))"
"Using the ""n word"" is  constitutive of hate speech; so it is not permitted here. Let's make a date to stamp out hate!","# ::snt Using the ""n word"" is  constitutive of hate speech; so it is not permitted here. Let's make a date to stamp out hate!
(m / multi-sentence
      :snt1 (c / constitute-01
            :ARG0 (u / use-01
                  :ARG1 (w / word
                        :mod (s / string-entity
                              :value ""n"")))
            :ARG1 (s2 / speak-01
                  :ARG1 (h / hate-01))
            :ARG0-of (c2 / cause-01
                  :ARG1 (p / permit-01
                        :polarity -
                        :ARG1 s2
                        :location (h2 / here))))
      :snt2 (m2 / make-01
            :mode imperative
            :ARG0 (w2 / we)
            :ARG1 (d / date)
            :purpose (s3 / stamp-out-05
                  :ARG0 w2
                  :ARG1 (h3 / hate-01))))"
That word has a lot of damaging history and it would be nice if you not say it.,"# ::snt That word has a lot of damaging history and it would be nice if you not say it.
(a / and
      :op1 (h / have-03
            :ARG0 (w / word
                  :mod (t / that))
            :ARG1 (h2 / history
                  :ARG0-of (d / damage-01)
                  :quant (l / lot)))
      :op2 (n / nice-01
            :ARG1 (s / say-01
                  :polarity -
                  :ARG0 (y / you)
                  :ARG1 w)))"
