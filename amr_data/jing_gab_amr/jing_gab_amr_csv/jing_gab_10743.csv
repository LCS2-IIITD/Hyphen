comment,amr
kills,"# ::snt kills
(p / person
      :name (n / name
            :op1 ""Kills""))"
Anything we put in our bodies I believe has a chance to attach itself to our DNA.  That means we pass it on to future generations.,"# ::snt Anything we put in our bodies I believe has a chance to attach itself to our DNA.  That means we pass it on to future generations.
(m / multi-sentence
      :snt1 (b / believe-01
            :ARG0 (ii / i)
            :ARG1 (c / chance-02
                  :ARG0 (a / anything
                        :ARG1-of (p / put-01
                              :ARG0 (w / we)
                              :ARG2 (b2 / body
                                    :poss w)))
                  :ARG1 (a2 / attach-01
                        :ARG0 a
                        :ARG1 a
                        :ARG2 (n / nucleic-acid
                              :name (n2 / name
                                    :op1 ""DNA"")
                              :poss w))))
      :snt2 (m2 / mean-01
            :ARG1 (t / that)
            :ARG2 (p2 / pass-on-09
                  :ARG0 (w2 / we)
                  :ARG1 (ii2 / it)
                  :ARG2 (g / generation
                        :time (f / future)))))"
"I agree with what you are trying to say, but maybe don't use the last part, and your point will be even stronger.","# ::snt I agree with what you are trying to say, but maybe don't use the last part, and your point will be even stronger.
(a / agree-01
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG1-of (s / say-01
                  :ARG0 (y / you)
                  :ARG1-of (t2 / try-01
                        :ARG0 y)))
      :concession-of (p / possible-01
            :ARG1 (a2 / and
                  :op1 (u / use-01
                        :polarity -
                        :ARG0 y
                        :ARG1 (p2 / part
                              :mod (l / last)))
                  :op2 (s2 / strong-02
                        :ARG1 (p3 / point-04
                              :ARG0 y)
                        :mod (e / even)
                        :ARG2-of (h / have-degree-91
                              :ARG1 p3
                              :ARG3 (m / more))))))"
