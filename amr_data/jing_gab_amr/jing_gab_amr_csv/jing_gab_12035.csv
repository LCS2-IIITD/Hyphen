comment,amr
,"# ::snt 
(a / amr-empty)"
Gender is a category that shouldn’t be the basis of an insult or disparagement.  It’s a lazy flex.,"# ::snt Gender is a category that shouldn’t be the basis of an insult or disparagement.  It’s a lazy flex.
(m / multi-sentence
      :snt1 (r / recommend-01
            :polarity -
            :ARG1 (b / base-02
                  :ARG1 (o / or
                        :op1 (ii / insult-01)
                        :op2 (d / disparage-01))
                  :ARG2 (c / category
                        :domain (g / gender))))
      :snt2 (f / flex
            :mod (l / lazy)
            :domain (ii2 / it)))"
"It doesn't make sense to name call someone you've never met, just because of what the media says.","# ::snt It doesn't make sense to name call someone you've never met, just because of what the media says.
(s / sense-02
      :polarity -
      :ARG1 (c / call-01
            :ARG0 (y / you)
            :ARG1 (s2 / someone
                  :ARG1-of (m / meet-02
                        :polarity -
                        :ARG0 y
                        :time (e / ever))))
      :ARG1-of (c2 / cause-01
            :ARG0 (t / thing
                  :ARG1-of (s3 / say-01
                        :ARG0 (m2 / media)))
            :mod (j / just)))"
"I think that type of language might be offensive to certain types of people, try using a different word next time.","# ::snt I think that type of language might be offensive to certain types of people, try using a different word next time.
(a / and
      :op1 (t / think-01
            :ARG0 (ii / i)
            :ARG1 (p / possible-01
                  :ARG1 (o / offend-01
                        :ARG0 (l / language
                              :mod (t2 / type
                                    :mod (t3 / that)))
                        :ARG1 (p2 / person
                              :mod (t4 / type
                                    :mod (c / certain))))))
      :op2 (t5 / try-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (u / use-01
                  :ARG0 y
                  :ARG1 (w / word
                        :ARG1-of (d / differ-02))
                  :time (t6 / time
                        :mod (n / next)))))"
