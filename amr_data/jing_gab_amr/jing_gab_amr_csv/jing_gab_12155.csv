comment,amr
Do you agree?,"# ::snt Do you agree?
(a / agree-01
      :polarity (a2 / amr-unknown)
      :ARG0 (y / you))"
Please refrain from using derogatory terms for mentally handicapped and people of any religion.,"# ::snt Please refrain from using derogatory terms for mentally handicapped and people of any religion.
(r / refrain-01
      :mode imperative
      :polite +
      :ARG0 (y / you)
      :ARG1 (u / use-01
            :ARG0 y
            :ARG1 (t / term
                  :mod (d / derogatory))
            :ARG2 (a / and
                  :op1 (p / person
                        :ARG1-of (h / handicap-01
                              :manner (m / mental)))
                  :op2 (p2 / person
                        :mod (r2 / religion
                              :mod (a2 / any))))))"
Your point is lost beneath all that bigotry. When you speak all I hear is screaming.,"# ::snt Your point is lost beneath all that bigotry. When you speak all I hear is screaming.
(m / multi-sentence
      :snt1 (l / lose-02
            :ARG1 (p / point-04
                  :ARG0 (y / you))
            :location (b / beneath
                  :op1 (b2 / bigotry
                        :mod (t / that)
                        :mod (a / all))))
      :snt2 (s / scream-01
            :ARG0 (y2 / you)
            :time (s2 / speak-01
                  :ARG0 y2)
            :mod (a2 / all)
            :ARG1-of (h / hear-01
                  :ARG0 (ii / i))))"
I understand the point you're trying to make but it's difficult to digest when you use that kind of language.,"# ::snt I understand the point you're trying to make but it's difficult to digest when you use that kind of language.
(u / understand-01
      :ARG0 (ii / i)
      :ARG1 (p / point-04
            :ARG0 (y / you)
            :ARG1-of (t / try-01
                  :ARG0 y))
      :concession-of (d / difficult
            :domain (d2 / digest-01
                  :ARG1 p)
            :time (u2 / use-01
                  :ARG0 y
                  :ARG1 (l / language
                        :mod (k / kind
                              :mod (t2 / that))))))"
