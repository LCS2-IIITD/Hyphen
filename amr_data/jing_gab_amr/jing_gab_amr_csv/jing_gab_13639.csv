comment,amr
Comming from a trans....the REAL sub human trash that NEEDS EXTERMINATED...,"# ::snt Comming from a trans....the REAL sub human trash that NEEDS EXTERMINATED...
(b / be-from-91
      :ARG2 (t / trash
            :ARG1-of (r / real-04)
            :mod (s / sub
                  :op1 (h / human))
            :ARG1-of (e / expend-01
                  :ARG1-of (n / need-01))))"
Using hateful language doesn't contribute to your point,"# ::snt Using hateful language doesn't contribute to your point
(c / contribute-01
      :polarity -
      :ARG0 (u / use-01
            :ARG0 (y / you)
            :ARG1 (l / language
                  :ARG0-of (h / hate-01)))
      :ARG2 (p / point-04
            :ARG0 y))"
"Whoa there, Derogatory and homophobic slurs are offensive and hurtful and should not be used. Please refrain from these types of comments.","# ::snt Whoa there, Derogatory and homophobic slurs are offensive and hurtful and should not be used. Please refrain from these types of comments.
(m / multi-sentence
      :snt1 (w / whoa
            :mode expressive)
      :snt2 (a / and
            :op1 (o / offend-01
                  :ARG0 (s / slur
                        :mod (d / derogatory)
                        :mod (h / homophobia)))
            :op2 (h2 / hurt-01
                  :ARG0 s)
            :op3 (r / recommend-01
                  :ARG1 (u / use-01
                        :polarity -
                        :ARG1 s)))
      :snt3 (r2 / refrain-01
            :mode imperative
            :polite +
            :ARG0 (y / you)
            :ARG1 (c / comment-01
                  :mod (t / type
                        :mod (t2 / this)))))"
I don't believe that type of language is necessary to express yourself.,"# ::snt I don't believe that type of language is necessary to express yourself.
(b / believe-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (n / need-01
            :ARG0 (e / express-01
                  :ARG0 (y / you)
                  :ARG1 y)
            :ARG1 (l / language
                  :mod (t / type
                        :mod (t2 / that)))))"
