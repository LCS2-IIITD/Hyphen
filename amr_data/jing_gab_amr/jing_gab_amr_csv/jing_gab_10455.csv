comment,amr
,"# ::snt 
(a / amr-empty)"
"""Must"". Nope.","# ::snt ""Must"". Nope.
(m / multi-sentence
      :snt1 (o / obligate-01)
      :snt2 (n / nope))"
I understand the point you're trying to make but it's difficult to digest when you use that kind of language.,"# ::snt I understand the point you're trying to make but it's difficult to digest when you use that kind of language.
(u / understand-01
      :ARG0 (ii / i)
      :ARG1 (p / point-04
            :ARG0 (y / you)
            :ARG1-of (t / try-01
                  :ARG0 y))
      :concession-of (d / difficult
            :domain (d2 / digest-01
                  :ARG1 p)
            :time (u2 / use-01
                  :ARG0 y
                  :ARG1 (l / language
                        :mod (k / kind
                              :mod (t2 / that))))))"
"I see that you are upset but I think other, less colorful language, would get you point across too.","# ::snt I see that you are upset but I think other, less colorful language, would get you point across too.
(c / contrast-01
      :ARG1 (s / see-01
            :ARG0 (ii / i)
            :ARG1 (u / upset-01
                  :ARG1 (y / you)))
      :ARG2 (t / think-01
            :ARG0 ii
            :ARG1 (g / get-04
                  :ARG0 (l / language
                        :mod (o / other)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (c2 / colorful)
                              :ARG3 (l2 / less)))
                  :ARG1 (a / across
                        :domain (p / point-04
                              :ARG0 y))
                  :mod (t2 / too))))"
"We don't need to refer to people as that, we've come a long way since those times!","# ::snt We don't need to refer to people as that, we've come a long way since those times!
(n / need-01
      :polarity -
      :ARG0 (w / we)
      :ARG1 (r / refer-01
            :ARG0 w
            :ARG1 (p / person)
            :ARG2 (t / that))
      :ARG1-of (c / cause-01
            :ARG0 (c2 / come-01
                  :ARG1 w
                  :ARG2 (w2 / way
                        :ARG1-of (l / long-03))
                  :time (s / since
                        :op1 (t2 / time
                              :mod t)))))"
