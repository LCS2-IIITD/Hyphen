comment,amr
I'm sure that absolutely no NPCs have ever made that joke before. If [Trumpresident] Then Run[Insult.exe],"# ::snt I'm sure that absolutely no NPCs have ever made that joke before. If [Trumpresident] Then Run[Insult.exe]
(m / multi-sentence
      :snt1 (s / sure-02
            :ARG0 (ii / i)
            :ARG1 (j / joke-01
                  :polarity -
                  :ARG0 (n / NPC
                        :mod (a / absolute))
                  :ARG2 (t / that)
                  :time (e / ever)
                  :time (b / before)))
      :snt2 (r / run-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (s2 / string-entity
                  :value ""Run[Insult.exe"")
            :condition (p / person
                  :ARG0-of (r2 / reside-01
                        :ARG1 (p2 / person
                              :name (n2 / name
                                    :op1 ""Trump""))))))"
"Using age or disability related insultsisn't smart, either.","# ::snt Using age or disability related insultsisn't smart, either.
(s / smart-06
      :polarity -
      :ARG1 (u / use-01
            :ARG1 (ii / insult-01
                  :ARG1-of (r / relate-01
                        :ARG2 (o / or
                              :op1 (a / age)
                              :op2 (d / disability)))))
      :mod (e / either))"
"C'mon now, I get your point but watch the language.","# ::snt C'mon now, I get your point but watch the language.
(a / and
      :op1 (c / come-on-25
            :mode imperative
            :ARG1 (y / you)
            :time (n / now))
      :op2 (c2 / contrast-01
            :ARG1 (g / get-30
                  :ARG0 (ii / i)
                  :ARG1 (p / point-04
                        :ARG0 y))
            :ARG2 (w / watch-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (l / language))))"
Name calling the people you disagree with is not going to solve any problems.,"# ::snt Name calling the people you disagree with is not going to solve any problems.
(s / solve-01
      :polarity -
      :ARG0 (c / call-01
            :ARG0 (y / you)
            :ARG1 (p / person
                  :ARG2-of (d / disagree-01
                        :ARG0 y))
            :ARG2 (n / name))
      :ARG1 (p2 / problem
            :mod (a / any)))"
