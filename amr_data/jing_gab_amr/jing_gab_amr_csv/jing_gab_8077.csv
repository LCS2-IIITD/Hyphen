comment,amr
They are going to need way way more prisons,"# ::snt They are going to need way way more prisons
(n / need-01
      :ARG0 (t / they)
      :ARG1 (p / prison
            :ARG1-of (h / have-quant-91
                  :ARG3 (m / more
                        :degree (w / way)))))"
You say a lot of words but you don't have a lot to actually say.  Your closed mind should come with a closed mouth.,"# ::snt You say a lot of words but you don't have a lot to actually say.  Your closed mind should come with a closed mouth.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (s / say-01
                  :ARG0 (y / you)
                  :ARG1 (w / word
                        :quant (l / lot)))
            :ARG2 (h / have-03
                  :polarity -
                  :ARG0 y
                  :ARG1 (t / thing
                        :quant (l2 / lot)
                        :ARG1-of (s2 / say-01
                              :ARG0 y
                              :ARG1-of (a / actual-02)))))
      :snt2 (r / recommend-01
            :ARG1 (c2 / come-01
                  :ARG1 (m2 / mind
                        :ARG1-of (c3 / close-01)
                        :poss (y2 / you))
                  :accompanier (m3 / mouth
                        :ARG1-of (c4 / close-01)))))"
I guess that rant was an example of the online hatred the article describes.,"# ::snt I guess that rant was an example of the online hatred the article describes.
(g / guess-01
      :ARG0 (ii / i)
      :ARG1 (e / exemplify-01
            :ARG0 (r / rant-01
                  :mod (t / that))
            :ARG1 (h / hate-01
                  :medium (o / online)
                  :ARG1-of (d / describe-01
                        :ARG0 (a / article)))))"
I am unable to have this conversation with you if you continue to use that word.,"# ::snt I am unable to have this conversation with you if you continue to use that word.
(p / possible-01
      :polarity -
      :ARG1 (c / converse-01
            :ARG0 (ii / i)
            :ARG2 (y / you)
            :mod (t / this))
      :condition (c2 / continue-01
            :ARG0 y
            :ARG1 (u / use-01
                  :ARG0 y
                  :ARG1 (w / word
                        :mod (t2 / that)))))"
