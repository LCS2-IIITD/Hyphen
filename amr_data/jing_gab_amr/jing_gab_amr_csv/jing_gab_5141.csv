comment,amr
LOLzy,"# ::snt LOLzy
(l / laugh-01
      :mode expressive
      :ARG0 (ii / i)
      :manner (l2 / loud))"
Where do they get this degenerate garbage?,"# ::snt Where do they get this degenerate garbage?
(g / get-01
      :ARG0 (t / they)
      :ARG1 (g2 / garbage
            :ARG1-of (d / degenerate-01)
            :mod (t2 / this))
      :ARG2 (a / amr-unknown))"
I've never understood the concept of someones sexuality being an insult. Being Hitler or a nazi is the insulting enough on its own,"# ::snt I've never understood the concept of someones sexuality being an insult. Being Hitler or a nazi is the insulting enough on its own
(m / multi-sentence
      :snt1 (u / understand-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (c / concept
                  :topic (ii2 / insult-01
                        :ARG0 (s / sexuality
                              :poss (s2 / someone))))
            :time (e / ever))
      :snt2 (h / have-degree-91
            :ARG1 (o / or
                  :op1 (p / person
                        :name (n / name
                              :op1 ""Hitler""))
                  :op2 (p2 / person
                        :mod (p3 / political-movement
                              :name (n2 / name
                                    :op1 ""Nazism""))))
            :ARG2 (ii3 / insult-01
                  :ARG0 o)
            :ARG3 (e2 / enough)
            :mod (b / by-oneself)))"
Please refrain from using hate-fueled and derogatory language.,"# ::snt Please refrain from using hate-fueled and derogatory language.
(r / refrain-01
      :mode imperative
      :polite +
      :ARG0 (y / you)
      :ARG1 (u / use-01
            :ARG0 y
            :ARG1 (l / language
                  :mod (d / derogatory)
                  :ARG1-of (f / fuel-01
                        :ARG2 (h / hate-01)))))"
None of this hateful language is contributing to this conversation,"# ::snt None of this hateful language is contributing to this conversation
(c / contribute-01
      :ARG0 (l / language
            :ARG0-of (h / hate-01)
            :mod (t / this)
            :quant (n / none))
      :ARG2 (c2 / converse-01
            :mod (t2 / this)))"
