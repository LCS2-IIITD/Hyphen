comment,amr
"If you were given grapes and told two of them were poison, and you couldnt tell which two, would you eat any of them?","# ::snt If you were given grapes and told two of them were poison, and you couldnt tell which two, would you eat any of them?
(h / have-condition-91
      :ARG1 (e / eat-01
            :ARG0 (y / you)
            :ARG1 (g / grape
                  :mod (a / any))
            :polarity (a2 / amr-unknown))
      :ARG2 (a3 / and
            :op1 (a4 / and
                  :op1 (g2 / give-01
                        :ARG1 (g3 / grape
                              :quant 2
                              :ARG1-of (ii / include-91
                                    :ARG2 g))
                        :ARG2 y)
                  :op2 (t / tell-01
                        :ARG1 (p / poison-02
                              :ARG1 g3)
                        :ARG2 y))
            :op2 (p2 / possible-01
                  :polarity -
                  :ARG1 (t2 / tell-01
                        :ARG0 y
                        :ARG1 (t3 / thing
                              :quant 2
                              :ARG1-of ii
                              :ARG2 g3)))))"
Please do not use derogatory language for intellectual disabilities.,"# ::snt Please do not use derogatory language for intellectual disabilities.
(u / use-01
      :polarity -
      :mode imperative
      :polite +
      :ARG0 (y / you)
      :ARG1 (l / language
            :mod (d / derogatory))
      :ARG2 (d2 / disability
            :mod (ii / intellectual)))"
I think there's a better way to say. You should try to find it.,"# ::snt I think there's a better way to say. You should try to find it.
(m / multi-sentence
      :snt1 (t / think-01
            :ARG0 (ii / i)
            :ARG1 (w / way
                  :manner-of (s / say-01)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 w)
                        :ARG3 (m2 / more))))
      :snt2 (r / recommend-01
            :ARG1 (t2 / try-01
                  :ARG0 (y / you)
                  :ARG1 (f / find-01
                        :ARG0 y
                        :ARG1 (ii2 / it)))
            :ARG2 y))"
