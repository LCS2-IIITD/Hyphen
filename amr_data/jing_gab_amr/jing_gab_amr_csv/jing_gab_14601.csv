comment,amr
Europe is good at History because it is history,"# ::snt Europe is good at History because it is history
(c / cause-01
      :ARG0 (h / history
            :domain (c2 / continent
                  :name (n / name
                        :op1 ""Europe"")))
      :ARG1 (g / good-03
            :ARG1 c2
            :ARG2 (h2 / history)))"
People would understand your post better if it did not have such derogatory language.,"# ::snt People would understand your post better if it did not have such derogatory language.
(u / understand-01
      :ARG0 (p / person)
      :ARG1 (p2 / post-01
            :ARG0 (y / you))
      :condition (h / have-03
            :polarity -
            :ARG0 p2
            :ARG1 (l / language
                  :mod (d / derogatory
                        :degree (s / such))))
      :ARG1-of (g / good-02
            :ARG2-of (h2 / have-degree-91
                  :ARG1 u
                  :ARG3 (m / more))))"
Please do not use such disrespectful words which attacks someones sexual orientation.,"# ::snt Please do not use such disrespectful words which attacks someones sexual orientation.
(u / use-01
      :mode imperative
      :polite +
      :ARG0 (y / you)
      :ARG1 (w / word
            :ARG0-of (d / disrespect-01
                  :degree (s / such))
            :ARG0-of (a / attack-01
                  :ARG1 (o / orient-01
                        :ARG1 (s2 / someone)
                        :ARG2 (s3 / sex)))))"
"When responding to a statement, we should make sure that our answers are logical. If we just respond with insults that's all we get back.","# ::snt When responding to a statement, we should make sure that our answers are logical. If we just respond with insults that's all we get back.
(m / multi-sentence
      :snt1 (r / recommend-01
            :ARG1 (e / ensure-01
                  :ARG0 (w / we)
                  :ARG1 (l / logical
                        :domain (t / thing
                              :ARG2-of (a / answer-01
                                    :ARG0 w)))
                  :time (r2 / respond-01
                        :ARG0 w
                        :ARG1 (t2 / thing
                              :ARG1-of (s / state-01)))))
      :snt2 (g / get-back-19
            :ARG0 (w2 / we)
            :ARG1 (t3 / that)
            :condition (r3 / respond-01
                  :ARG0 w2
                  :ARG2 (ii / insult-01
                        :ARG0 w2)
                  :mod (j / just))))"
