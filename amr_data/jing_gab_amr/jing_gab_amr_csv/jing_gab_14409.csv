comment,amr
"LILY ALLEN ~ Singer. Catchphrase: ""I needed the money"" Wearing see-through top to perfectly match her see-through head","# ::snt LILY ALLEN ~ Singer. Catchphrase: ""I needed the money"" Wearing see-through top to perfectly match her see-through head
(m / multi-sentence
      :snt1 (p / person
            :name (n / name
                  :op1 ""LILY""
                  :op2 ""Allen"")
            :ARG0-of (s / sing-01))
      :snt2 (c / catchphrase
            :topic (n2 / need-01
                  :ARG0 (ii / i)
                  :ARG1 (m2 / money)))
      :snt3 (w / wear-01
            :ARG0 (s2 / she
                  :part (h / head))
            :ARG1 (t / top
                  :mod (s3 / see-through))
            :purpose (m3 / match-01
                  :ARG1 t
                  :ARG2 h
                  :ARG1-of (p2 / perfect-02))))"
she's so brave!!!,"# ::snt she's so brave!!!
(b / brave-02
      :mode expressive
      :ARG0 (s / she)
      :degree (s2 / so))"
That is an offensive name to call a woman and an attack on her character.,"# ::snt That is an offensive name to call a woman and an attack on her character.
(o / offend-01
      :ARG0 (c / call-01
            :ARG1 (w / woman)
            :ARG2 (n / name
                  :mod (t / that))
            :ARG0-of (a / attack-01
                  :ARG1 (c2 / character
                        :poss w))))"
"no need for the t word please, you can dislike something and still be polite, please try that next time","# ::snt no need for the t word please, you can dislike something and still be polite, please try that next time
(m / multi-sentence
      :snt1 (n / need-01
            :polarity -
            :polite +
            :ARG1 (w / word
                  :mod (s / string-entity
                        :value ""t"")))
      :snt2 (p / possible-01
            :ARG1 (a / and
                  :op1 (d / dislike-01
                        :ARG0 (y / you)
                        :ARG1 (s2 / something))
                  :op2 (p2 / polite-01
                        :ARG1 y
                        :mod (s3 / still)))
            :ARG0-of (c / cause-01
                  :ARG1 (t / try-01
                        :mode imperative
                        :polite +
                        :ARG0 y
                        :ARG1 a
                        :time (t2 / time
                              :mod (n2 / next))))))"
