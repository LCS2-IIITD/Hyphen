comment,amr
genders???? OK ....but categories are missing for sure.....,"# ::snt genders???? OK ....but categories are missing for sure.....
(m / multi-sentence
      :snt1 (o / okay-01
            :polarity (a / amr-unknown))
      :snt2 (c / contrast-01
            :ARG2 (m2 / miss-01
                  :ARG1 (c2 / category)
                  :ARG1-of (s / sure-02))))"
I am at a lost of words as to why we need 58 genders.,"# ::snt I am at a lost of words as to why we need 58 genders.
(l / lose-02
      :ARG0 (ii / i)
      :ARG1 (w / word-01
            :ARG0 ii
            :ARG1 (t / thing
                  :ARG0-of (c / cause-01
                        :ARG1 (n / need-01
                              :ARG0 (w2 / we)
                              :ARG1 (g / gender
                                    :quant 58))))))"
Trans people are really vulnerable and you are making the world more dangerous for them.,"# ::snt Trans people are really vulnerable and you are making the world more dangerous for them.
(a / and
      :op1 (v / vulnerable-01
            :ARG1 (p / person
                  :mod (t / transgender))
            :degree (r / really))
      :op2 (m / make-02
            :ARG0 (y / you)
            :ARG1 (h / have-degree-91
                  :ARG1 (w / world)
                  :ARG2 (d / dangerous
                        :beneficiary p)
                  :ARG3 (m2 / more))
            :beneficiary p))"
Use of the r-word here is totally unacceptable because it is hurtful and offensive as it demeans the mentally disabled.,"# ::snt Use of the r-word here is totally unacceptable because it is hurtful and offensive as it demeans the mentally disabled.
(c / cause-01
      :ARG0 (d / demean-01
            :ARG0 (u / use-01
                  :ARG1 (w / word
                        :mod (s / string-entity
                              :value ""r-word""))
                  :location (h / here))
            :ARG1 (p / person
                  :ARG1-of (d2 / disable-01
                        :mod (m / mental))))
      :ARG1 (p2 / possible-01
            :polarity -
            :ARG1 (a / accept-01
                  :ARG1 u)
            :mod (t / total)))"
