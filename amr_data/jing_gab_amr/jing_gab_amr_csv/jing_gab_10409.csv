comment,amr
"Dear vegans, I ate a cow today because if I didn't it would eat all your food. You're welcome.","# ::snt Dear vegans, I ate a cow today because if I didn't it would eat all your food. You're welcome.
(m / multi-sentence
      :snt1 (s / say-01
            :ARG1 (c / cause-01
                  :ARG0 (e / eat-01
                        :ARG0 (ii / i)
                        :ARG1 (c2 / cow)
                        :condition (e2 / eat-01
                              :polarity -
                              :ARG0 ii
                              :ARG1 (f / food
                                    :mod (a / all)
                                    :poss (y / you))))
                  :ARG1 (e3 / eat-01
                        :ARG0 ii
                        :ARG1 c2
                        :time (t / today)))
            :ARG2 (v / vegan
                  :mod (d / dear)))
      :snt2 (w / welcome-01
            :ARG1 (y2 / you)))"
Every action has a reaction but that does not mean that survival is a zero-sum game.,"# ::snt Every action has a reaction but that does not mean that survival is a zero-sum game.
(c / contrast-01
      :ARG1 (r / react-01
            :ARG0 (a / act-02
                  :mod (e / every)))
      :ARG2 (m / mean-01
            :polarity -
            :ARG1 r
            :ARG2 (g / game
                  :mod (z / zero)
                  :domain (s / survive-01))))"
"An inappropriate joke was made, but it didn't warrant this kind of attack.  I'm sure there was no intention to upset you to this extent.","# ::snt An inappropriate joke was made, but it didn't warrant this kind of attack.  I'm sure there was no intention to upset you to this extent.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (j / joke-01
                  :ARG1-of (a / appropriate-02
                        :polarity -))
            :ARG2 (w / warrant-01
                  :polarity -
                  :ARG0 j
                  :ARG1 (a2 / attack-01
                        :mod (k / kind
                              :mod (t / this)))))
      :snt2 (s / sure-02
            :ARG0 (ii / i)
            :ARG1 (ii2 / intend-01
                  :polarity -
                  :ARG1 (u / upset-01
                        :ARG1 (y / you)
                        :degree (e / extent
                              :mod (t2 / this))))))"
