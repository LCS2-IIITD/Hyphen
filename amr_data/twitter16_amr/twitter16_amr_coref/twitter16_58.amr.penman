# ::snt Where are the women? The bastards left them behind or these men are military. Take your pick: bad for USA
# ::tokens ["Where", "are", "the", "women", "?", "The", "bastards", "left", "them", "behind", "or", "these", "men", "are", "military", ".", "Take", "your", "pick", ":", "bad", "for", "USA"]
# ::lemmas ["where", "be", "the", "woman", "?", "the", "bastard", "leave", "they", "behind", "or", "these", "man", "be", "military", ".", "take", "your", "pick", ":", "bad", "for", "USA"]
(c1-7 / multi-sentence
      :snt1 (c1-14 / woman
                   :location (c1-0 / amr-unknown))
      :snt2 (c1-12 / or
                   :op1 (c1-15 / leave-12
                               :ARG0 (c1-3 / bastard)
                               :ARG1 (c1-2 / they)
                               :ARG2 (c1-6 / behind))
                   :op2 (c1-4 / military
                              :domain (c1-11 / man
                                             :mod (c1-5 / this))))
      :snt3 (c1-8 / take-01
                  :ARG0 (c1-9 / you)
                  :ARG1 (c1-10 / pick-01
                               :ARG0 c1-9
                               :ARG1 (c1-1 / bad-04
                                           :ARG2 (c1-16 / country
                                                        :name (c1-13 / name
                                                                     :op1 "USA"))))
                  :mode imperative))

# ::snt Yeah, look at all those woman and children in the pic. Oh wait, I see only men. Hmmm
# ::tokens ["Yeah", ",", "look", "at", "all", "those", "woman", "and", "children", "in", "the", "pic", ".", "Oh", "wait", ",", "I", "see", "only", "men", ".", "Hmmm"]
# ::lemmas ["yeah", ",", "look", "at", "all", "those", "woman", "and", "child", "in", "the", "pic", ".", "oh", "wait", ",", "i", "see", "only", "man", ".", "hmmm"]
(c2-6 / multi-sentence
      :snt1 (c2-13 / look-01
                   :ARG0 (c2-5 / you)
                   :ARG1 (c2-0 / and
                               :op1 (c2-12 / woman)
                               :op2 (c2-15 / child)
                               :mod (c2-1 / that)
                               :mod (c2-7 / all)
                               :location (c2-9 / pic))
                   :mode imperative)
      :snt2 (c2-3 / wait-01
                  :ARG1 (c2-8 / i)
                  :mod (c2-11 / oh))
      :snt3 (c2-10 / see-01
                   :ARG0 c2-8
                   :ARG1 (c2-2 / man
                               :mod (c2-4 / only))
                   :mod (c2-14 / hmm
                               :mode expressive)))

# ::snt Where are the and ? lying !
# ::tokens ["Where", "are", "the", "and", "?", "lying", "!"]
# ::lemmas ["where", "be", "the", "and", "?", "lie", "!"]
(c4-0 / and
      :op1 (c4-3 / amr-unknown)
      :op2 (c4-2 / amr-unknown)
      :ARG0-of (c4-1 / lie-08))

# ::snt i gotta buy more bullets now
# ::tokens ["i", "got", "ta", "buy", "more", "bullets", "now"]
# ::lemmas ["i", "got", "to", "buy", "more", "bullet", "now"]
(c5-5 / obligate-01
      :ARG2 (c5-0 / buy-01
                  :ARG0 (c5-3 / i)
                  :ARG1 (c5-1 / bullet
                              :quant (c5-2 / more))
                  :time (c5-4 / now)))

# ::snt lot's of widows and year old in the bunch, how sweet
# ::tokens ["lot", "'s", "of", "widows", "and", "year", "old", "in", "the", "bunch", ",", "how", "sweet"]
# ::lemmas ["lot", "'s", "of", "widow", "and", "year", "old", "in", "the", "bunch", ",", "how", "sweet"]
(c6-6 / sweet-03
      :ARG1 (c6-3 / bunch
                  :consist-of (c6-0 / and
                                    :op1 (c6-7 / person
                                               :ARG0-of (c6-10 / have-rel-role-91
                                                               :ARG2 (c6-8 / widow)))
                                    :op2 (c6-5 / person
                                               :age (c6-2 / temporal-quantity
                                                          :unit (c6-4 / year)
                                                          :quant 1))
                                    :quant (c6-9 / lot)))
      :degree (c6-1 / so))

# ::snt Just called one of my senators and his office could neither confirm or deny this story. Who knows the truth
# ::tokens ["Just", "called", "one", "of", "my", "senators", "and", "his", "office", "could", "neither", "confirm", "or", "deny", "this", "story", ".", "Who", "knows", "the", "truth"]
# ::lemmas ["just", "call", "one", "of", "my", "senator", "and", "his", "office", "could", "neither", "confirm", "or", "deny", "this", "story", ".", "who", "know", "the", "truth"]
(c7-22 / multi-sentence
       :snt1 (c7-14 / call-02
                    :ARG0 (c7-5 / i)
                    :ARG1 (c7-18 / possible-01
                                 :ARG1 (c7-23 / or
                                              :op1 (c7-17 / confirm-01
                                                          :ARG0 (c7-13 / and
                                                                       :op1 (c7-16 / person
                                                                                   :ARG1-of (c7-12 / include-91
                                                                                                   :ARG2 (c7-11 / and
                                                                                                                :op1 (c7-21 / person
                                                                                                                            :ARG0-of (c7-10 / have-org-role-91
                                                                                                                                            :ARG1 (c7-8 / government-organization
                                                                                                                                                        :name (c7-6 / name
                                                                                                                                                                    :op1 "Senate"))
                                                                                                                                            :ARG2 (c7-9 / senator))
                                                                                                                            :poss (c7-19 / i)))
                                                                                                   :op2 (c7-15 / office
                                                                                                               :poss c7-21))
                                                                                   :quant 1)
                                                                       :ARG1 (c7-0 / story
                                                                                   :mod (c7-1 / this)))
                                                          :op2 (c7-20 / deny-01
                                                                      :ARG0 c7-13
                                                                      :ARG1 c7-0)))
                                 :mod (c7-3 / just)
                                 :polarity -)
                    :snt2 (c7-7 / know-01
                                :ARG0 (c7-2 / amr-unknown)
                                :ARG1 (c7-4 / truth))))

# ::snt doesn't look like too many women or children. Hmmm.
# ::tokens ["does", "n't", "look", "like", "too", "many", "women", "or", "children", ".", "Hmmm", "."]
# ::lemmas ["do", "not", "look", "like", "too", "many", "woman", "or", "child", ".", "Hmmm", "."]
(c8-2 / multi-sentence
      :snt1 (c8-6 / look-02
                  :ARG1 (c8-4 / or
                              :op1 (c8-5 / woman)
                              :op2 (c8-8 / child)
                              :ARG1-of (c8-7 / have-quant-91
                                             :ARG2 (c8-1 / many)
                                             :ARG3 (c8-0 / too)))
                  :polarity -)
      :snt2 (c8-3 / hmm
                  :mode expressive))

# ::snt Where are the women &amp; kids???
# ::tokens ["Where", "are", "the", "women", "&", "amp", ";", "kids", "?", "?", "?"]
# ::lemmas ["where", "be", "the", "woman", "&", "amp", ";", "kid", "?", "?", "?"]
(c9-2 / be-located-at-91
      :ARG1 (c9-0 / and
                  :op1 (c9-4 / woman)
                  :op2 (c9-5 / amp)
                  :op3 (c9-3 / kid))
      :ARG2 (c9-1 / amr-unknown))

# ::snt This is why they have been trying to disarm us.
# ::tokens ["This", "is", "why", "they", "have", "been", "trying", "to", "disarm", "us", "."]
# ::lemmas ["this", "be", "why", "they", "have", "be", "try", "to", "disarm", "we", "."]
(c10-4 / cause-01
       :ARG0 (c10-0 / this)
       :ARG1 (c10-1 / try-01
                    :ARG0 (c10-2 / they)
                    :ARG1 (c10-5 / disarm-01
                                 :ARG0 c10-2
                                 :ARG1 (c10-3 / we))))

# ::snt where are the women, children and elderly?
# ::tokens ["where", "are", "the", "women", ",", "children", "and", "elderly", "?"]
# ::lemmas ["where", "be", "the", "woman", ",", "child", "and", "elderly", "?"]
(c11-0 / and
       :op1 (c11-2 / woman)
       :op2 (c11-3 / child)
       :op3 (c11-1 / elderly)
       :location (c11-4 / amr-unknown))

# ::snt Better arm up folks, looks like army is here.
# ::tokens ["Better", "arm", "up", "folks", ",", "looks", "like", "army", "is", "here", "."]
# ::lemmas ["well", "arm", "up", "folk", ",", "look", "like", "army", "be", "here", "."]
(c12-0 / and
       :op1 (c12-9 / arm-up-00
                   :ARG1 (c12-7 / folk)
                   :ARG1-of (c12-8 / have-degree-91
                                   :ARG2 (c12-3 / good-02
                                                :ARG1 c12-9)
                                   :ARG3 (c12-4 / more)))
       :op2 (c12-6 / look-02
                   :ARG1 (c12-2 / be-located-at-91
                                :ARG1 (c12-1 / army)
                                :ARG2 (c12-5 / here))))

# ::snt Sink the fucking boat.
# ::tokens ["Sink", "the", "fucking", "boat", "."]
# ::lemmas ["sink", "the", "fucking", "boat", "."]
(c13-3 / sink-01
       :ARG0 (c13-1 / you)
       :ARG1 (c13-0 / boat
                    :mod (c13-2 / fucking
                                :mode expressive))
       :mode imperative)

# ::snt haven't heard this one .around here . if so ...better fasten your freakin seatbelts. an load your guns
# ::tokens ["have", "n't", "heard", "this", "one", ".around", "here", ".", "if", "so", "...", "better", "fasten", "your", "freakin", "seatbelts", ".", "an", "load", "your", "guns"]
# ::lemmas ["have", "not", "hear", "this", "one", ".around", "here", ".", "if", "so", "...", "well", "fasten", "your", "freakin", "seatbelt", ".", "an", "load", "your", "gun"]
(c14-5 / multi-sentence
       :snt1 (c14-16 / hear-01
                     :ARG0 (c14-9 / i)
                     :ARG1 (c14-12 / one
                                   :mod (c14-1 / this))
                     :location (c14-0 / around
                                      :op1 (c14-8 / here))
                     :polarity -)
       :snt2 (c14-10 / have-condition-91
                     :ARG1 (c14-13 / have-degree-91
                                   :ARG1 (c14-15 / fasten-01
                                                 :ARG0 (c14-4 / you)
                                                 :ARG1 (c14-11 / seatbelts
                                                               :mod (c14-2 / freak)
                                                               :poss c14-4))
                                   :ARG2 (c14-6 / good-02
                                                :ARG1 c14-15)
                                   :ARG3 (c14-3 / more))
                     :ARG2 (c14-14 / load-01
                                   :ARG1 (c14-7 / gun
                                                :poss c14-4))))

# ::snt thats my question also they entered into your state. And all the places they'll be living in..
# ::tokens ["that", "s", "my", "question", "also", "they", "entered", "into", "your", "state", ".", "And", "all", "the", "places", "they", "'ll", "be", "living", "in", ".."]
# ::lemmas ["that", "s", "my", "question", "also", "they", "enter", "into", "your", "state", ".", "and", "all", "the", "place", "they", "'ll", "be", "live", "in", ".."]
(c15-6 / multi-sentence
       :snt1 (c15-7 / question-01
                    :ARG0 (c15-8 / i)
                    :ARG1 (c15-3 / enter-01
                                 :ARG0 (c15-1 / they)
                                 :ARG1 (c15-9 / state
                                              :poss (c15-5 / you))
                                 :mod (c15-0 / also)))
       :snt2 (c15-12 / and
                     :op2 (c15-10 / place
                                  :mod (c15-2 / all)
                                  :location-of (c15-11 / live-01
                                                       :ARG0 (c15-4 / they)))))

# ::snt OMG what planet am I on ? What happened to my country ???
# ::tokens ["OMG", "what", "planet", "am", "I", "on", "?", "What", "happened", "to", "my", "country", "?", "?", "?"]
# ::lemmas ["OMG", "what", "planet", "be", "i", "on", "?", "what", "happen", "to", "my", "country", "?", "?", "?"]
(c16-3 / multi-sentence
       :snt1 (c16-2 / be-located-at-91
                    :ARG1 (c16-4 / i)
                    :ARG2 (c16-5 / planet
                                 :mod (c16-0 / amr-unknown))
                    :mod (c16-6 / oh-my-god
                                :mode expressive))
       :snt2 (c16-1 / event
                    :mod (c16-9 / amr-unknown)
                    :beneficiary (c16-7 / country
                                        :poss (c16-8 / i))))

# ::snt Disgusting. Where are the governors and mayors? Why arnt they stopping this?
# ::tokens ["Disgusting", ".", "Where", "are", "the", "governors", "and", "mayors", "?", "Why", "arnt", "they", "stopping", "this", "?"]
# ::lemmas ["disgusting", ".", "where", "be", "the", "governor", "and", "mayor", "?", "why", "arnt", "they", "stop", "this", "?"]
(c17-5 / multi-sentence
       :snt1 (c17-14 / disgust-01)
       :snt2 (c17-2 / be-located-at-91
                    :ARG1 (c17-0 / and
                                 :op1 (c17-11 / person
                                              :ARG0-of (c17-13 / have-org-role-91
                                                               :ARG2 (c17-6 / governor)))
                                 :op2 (c17-7 / person
                                             :ARG0-of (c17-8 / have-org-role-91
                                                             :ARG2 (c17-3 / mayor))))
                    :ARG2 (c17-9 / amr-unknown))
       :snt3 (c17-12 / cause-01
                     :ARG0 c17-9)
       :ARG1 (c17-10 / stop-01
                     :ARG0 (c17-1 / they)
                     :ARG1 (c17-4 / this)
                     :polarity -))

# ::snt They'll run back to the boat once they discover Dumaine Street.
# ::tokens ["They", "'ll", "run", "back", "to", "the", "boat", "once", "they", "discover", "Dumaine", "Street", "."]
# ::lemmas ["they", "'ll", "run", "back", "to", "the", "boat", "once", "they", "discover", "Dumaine", "Street", "."]
(c18-1 / run-02
       :ARG0 (c18-0 / they)
       :direction (c18-2 / back)
       :destination (c18-3 / boat)
       :time (c18-6 / discover-01
                    :ARG0 c18-0
                    :ARG1 (c18-4 / street
                                 :name (c18-5 / name
                                              :op1 "Dumaine"
                                              :op2 "Street"))))

# ::snt Only six from Syria &amp; six from Afghanistan into NO, but hundreds into TX already.
# ::tokens ["Only", "six", "from", "Syria", "&", "amp", ";", "six", "from", "Afghanistan", "into", "NO", ",", "but", "hundreds", "into", "TX", "already", "."]
# ::lemmas ["Only", "six", "from", "Syria", "&", "amp", ";", "six", "from", "Afghanistan", "into", "no", ",", "but", "hundreds", "into", "TX", "already", "."]
(c19-12 / contrast-01
        :ARG1 (c19-13 / and
                      :op1 (c19-1 / be-from-91
                                  :ARG1 (c19-0 / thing
                                               :mod (c19-18 / only)
                                               :quant 6)
                                  :ARG2 (c19-15 / country
                                                :name (c19-3 / name
                                                             :op1 "Syria")))
                      :op2 (c19-9 / be-from-91
                                  :ARG1 (c19-2 / thing
                                               :mod (c19-6 / country
                                                           :name (c19-7 / name
                                                                        :op1 "Afghanistan"))
                                               :quant 6)
                                  :ARG2 (c19-5 / country
                                               :name (c19-16 / name
                                                             :op1 "No")))
                      :op3 (c19-4 / be-located-at-91
                                  :ARG1 (c19-8 / thing
                                               :quant (c19-17 / multiple
                                                              :op1 100))
                                  :ARG2 (c19-10 / state
                                                :name (c19-14 / name
                                                              :op1 "Texas"))
                                  :time (c19-11 / already))))

# ::snt We must truly be F'n crazy!
# ::tokens ["We", "must", "truly", "be", "F'n", "crazy", "!"]
# ::lemmas ["we", "must", "truly", "be", "F'n", "crazy", "!"]
(c20-1 / obligate-01
       :ARG1 (c20-4 / crazy-03
                    :ARG1 (c20-2 / we)
                    :degree (c20-3 / fuck
                                   :mode expressive)
                    :ARG1-of (c20-0 / true-01))
       :mode expressive)

# ::snt From Oct article about refugees in Hungary
# ::tokens ["From", "Oct", "article", "about", "refugees", "in", "Hungary"]
# ::lemmas ["from", "Oct", "article", "about", "refugee", "in", "Hungary"]
(c21-0 / article
       :topic (c21-1 / refugee
                     :location (c21-5 / country
                                      :name (c21-3 / name
                                                   :op1 "Hungary")))
       :time (c21-4 / from
                    :op1 (c21-2 / date-entity
                                :month 10)))

# ::snt We're poisoning our own well.
# ::tokens ["We", "'re", "poisoning", "our", "own", "well", "."]
# ::lemmas ["we", "be", "poison", "our", "own", "well", "."]
(c22-2 / poison-02
       :ARG0 (c22-1 / we)
       :ARG1 (c22-0 / well
                    :poss c22-1))

# ::snt Gov Jindal MUST prevent islamic immigrants Obama imported New Orleans from entering-dispersing via National Guard
# ::tokens ["Gov", "Jindal", "MUST", "prevent", "islamic", "immigrants", "Obama", "imported", "New", "Orleans", "from", "entering", "-", "dispersing", "via", "National", "Guard"]
# ::lemmas ["Gov", "Jindal", "must", "prevent", "islamic", "immigrant", "Obama", "import", "New", "Orleans", "from", "entering", "-", "dispersing", "via", "National", "Guard"]
(c23-13 / obligate-01
        :ARG1 (c23-11 / person
                      :name (c23-12 / name
                                    :op1 "Jindal")
                      :ARG0-of (c23-16 / have-org-role-91
                                       :ARG2 (c23-6 / governor)))
        :ARG2 (c23-7 / prevent-01
                     :ARG0 c23-11
                     :ARG1 (c23-0 / person
                                  :ARG0-of (c23-10 / immigrate-01
                                                   :mod (c23-1 / religious-group
                                                               :name (c23-4 / name
                                                                            :op1 "Islam")))
                                  :ARG1-of (c23-2 / import-01
                                                  :ARG0 (c23-9 / person
                                                               :name (c23-14 / name
                                                                             :op1 "Obama"))
                                                  :ARG2 (c23-17 / city
                                                                :name (c23-3 / name
                                                                             :op1 "New"
                                                                             :op2 "Orleans"))))
                     :ARG2 (c23-5 / enter-01
                                  :ARG0 c23-9
                                  :polarity -)
                     :instrument (c23-8 / military
                                        :name (c23-15 / name
                                                      :op1 "National"
                                                      :op2 "Guard"))))

# ::snt not a single woman
# ::tokens ["not", "a", "single", "woman"]
# ::lemmas ["not", "a", "single", "woman"]
(c24-0 / woman
       :ARG1-of (c24-1 / single-03)
       :polarity -)

# ::snt This is cultural suicide
# ::tokens ["This", "is", "cultural", "suicide"]
# ::lemmas ["this", "be", "cultural", "suicide"]
(c25-1 / suicide
       :mod (c25-2 / culture)
       :domain (c25-0 / this))

# ::snt This a result of that POS who occupies the White House..........
# ::tokens ["This", "a", "result", "of", "that", "POS", "who", "occupies", "the", "White", "House", ".........."]
# ::lemmas ["this", "a", "result", "of", "that", "POS", "who", "occupy", "the", "White", "House", ".........."]
(c26-1 / result-01
       :ARG1 (c26-6 / person
                    :mod (c26-0 / that)
                    :ARG0-of (c26-4 / post-01
                                    :manner (c26-8 / original))
                    :ARG0-of (c26-2 / occupy-01
                                    :ARG1 (c26-5 / government-organization
                                                 :name (c26-7 / name
                                                              :op1 "White"
                                                              :op2 "House"))))
       :ARG2 (c26-3 / this))

# ::snt I feel so much better knowing that.
# ::tokens ["I", "feel", "so", "much", "better", "knowing", "that", "."]
# ::lemmas ["i", "feel", "so", "much", "well", "know", "that", "."]
(c27-7 / feel-01
       :ARG0 (c27-5 / i)
       :ARG1 (c27-4 / good-02
                    :ARG2-of (c27-8 / have-degree-91
                                    :ARG1 c27-7
                                    :ARG3 (c27-3 / more
                                                 :quant (c27-1 / much
                                                               :degree (c27-6 / so)))))
       :manner (c27-2 / know-01
                      :ARG0 c27-5
                      :ARG1 (c27-0 / that)))

# ::snt reminds of song: People Get Ready... Is Comin'"
# ::tokens ["reminds", "of", "song", ":", "People", "Get", "Ready", "...", "Is", "Comin", "'", "\""]
# ::lemmas ["remind", "of", "song", ":", "people", "get", "ready", "...", "be", "Comin", "'", "\""]
(c28-1 / remind-01
       :ARG1 (c28-3 / song
                    :topic (c28-0 / and
                                  :op1 (c28-2 / ready-02
                                              :ARG1 (c28-4 / person))
                                  :op2 (c28-5 / come-01
                                              :ARG1 c28-4))))

# ::snt turn that boat around &amp; send it back from whence it came, or sink the bastard in the gulf.
# ::tokens ["turn", "that", "boat", "around", "&", "amp", ";", "send", "it", "back", "from", "whence", "it", "came", ",", "or", "sink", "the", "bastard", "in", "the", "gulf", "."]
# ::lemmas ["turn", "that", "boat", "around", "&", "amp", ";", "send", "it", "back", "from", "whence", "it", "come", ",", "or", "sink", "the", "bastard", "in", "the", "gulf", "."]
(c29-14 / or
        :op1 (c29-3 / turn-01
                    :ARG0 (c29-7 / you)
                    :ARG1 (c29-4 / boat
                                 :mod (c29-5 / that))
                    :path (c29-0 / around
                                 :op1 (c29-16 / and
                                              :op1 (c29-6 / thing
                                                          :name (c29-13 / name
                                                                        :op1 "&amp"))))
                    :mode imperative)
        :op2 (c29-12 / send-01
                     :ARG0 c29-7
                     :ARG1 c29-4
                     :ARG2 (c29-8 / back-02
                                  :ARG3 (c29-10 / thing
                                                :ARG2-of (c29-15 / come-01
                                                                 :ARG1 c29-4)))
                     :mode imperative)
        :op3 (c29-1 / sink-01
                    :ARG0 c29-7
                    :ARG1 (c29-2 / bastard)
                    :location (c29-9 / gulf
                                     :name (c29-11 / name
                                                   :op1 "Gulf"))
                    :mode imperative))

# ::snt there's a young boy in the lower right corner that probably already knows how to use AK-47 &amp; suicide belt.
# ::tokens ["there", "'s", "a", "young", "boy", "in", "the", "lower", "right", "corner", "that", "probably", "already", "knows", "how", "to", "use", "AK-47", "&", "amp", ";", "suicide", "belt", "."]
# ::lemmas ["there", "be", "a", "young", "boy", "in", "the", "low", "right", "corner", "that", "probably", "already", "know", "how", "to", "use", "AK-47", "&", "amp", ";", "suicide", "belt", "."]
(c30-2 / boy
       :mod (c30-5 / young)
       :location (c30-15 / corner
                         :ARG1-of (c30-1 / right-04)
                         :ARG1-of (c30-14 / have-degree-91
                                          :ARG2 (c30-13 / low-04
                                                        :ARG1 c30-15)
                                          :ARG3 (c30-6 / more)))
       :ARG0-of (c30-3 / know-03
                       :ARG1 (c30-9 / use-01
                                    :ARG1 (c30-11 / product
                                                  :name (c30-12 / name
                                                                :op1 "AK-47"
                                                                :op2 "&amp")
                                                  :ARG1-of (c30-4 / mean-01
                                                                  :ARG2 (c30-7 / belt
                                                                               :purpose (c30-10 / suicide)))))
                       :mod (c30-8 / probable)
                       :time (c30-0 / already)))

# ::snt Oh my ... Is that true ?
# ::tokens ["Oh", "my", "...", "Is", "that", "true", "?"]
# ::lemmas ["oh", "my", "...", "be", "that", "true", "?"]
(c31-3 / true-01
       :ARG1 (c31-1 / that)
       :polarity (c31-0 / amr-unknown)
       :mod (c31-2 / oh-my-god
                   :mode expressive))

# ::snt Send them back. No refugees, migrants or illegals.
# ::tokens ["Send", "them", "back", ".", "No", "refugees", ",", "migrants", "or", "illegals", "."]
# ::lemmas ["send", "they", "back", ".", "no", "refugee", ",", "migrant", "or", "illegal", "."]
(c32-5 / multi-sentence
       :snt1 (c32-7 / send-01
                    :ARG0 (c32-4 / you)
                    :ARG1 (c32-0 / they)
                    :ARG2 (c32-2 / back)
                    :mode imperative)
       :snt2 (c32-9 / or
                    :op1 (c32-1 / refugee)
                    :op2 (c32-8 / person
                                :ARG0-of (c32-3 / migrate-01))
                    :op3 (c32-6 / person
                                :ARG1-of (c32-10 / legal-02
                                                 :polarity -))
                    :polarity -))

# ::snt imagine how it'll change New Orleans immediately - to a city of
# ::tokens ["imagine", "how", "it", "'ll", "change", "New", "Orleans", "immediately", "-", "to", "a", "city", "of"]
# ::lemmas ["imagine", "how", "it", "'ll", "change", "New", "Orleans", "immediately", "-", "to", "a", "city", "of"]
(c33-5 / imagine-01
       :ARG0 (c33-3 / you)
       :ARG1 (c33-0 / thing
                    :manner-of (c33-9 / change-01
                                      :ARG0 (c33-8 / it)
                                      :ARG1 (c33-4 / city
                                                   :name (c33-6 / name
                                                                :op1 "New"
                                                                :op2 "Orleans"))
                                      :ARG2 (c33-2 / city
                                                   :location (c33-1 / country))
                                      :time (c33-7 / immediate)))
       :mode imperative)

# ::snt they are all young men
# ::tokens ["they", "are", "all", "young", "men"]
# ::lemmas ["they", "be", "all", "young", "man"]
(c34-3 / man
       :mod (c34-2 / young)
       :domain (c34-1 / they
                      :mod (c34-0 / all)))

# ::snt . In light of yesterday's events this sounds like a disaster in the making!
# ::tokens [".", "In", "light", "of", "yesterday", "'s", "events", "this", "sounds", "like", "a", "disaster", "in", "the", "making", "!"]
# ::lemmas [".", "in", "light", "of", "yesterday", "'s", "event", "this", "sound", "like", "a", "disaster", "in", "the", "making", "!"]
(c35-4 / sound-01
       :ARG1 (c35-0 / this)
       :ARG2 (c35-6 / disaster
                    :ARG1-of (c35-3 / make-01))
       :ARG1-of (c35-5 / cause-01
                       :ARG0 (c35-1 / event
                                    :time (c35-2 / yesterday)))
       :mode expressive)

# ::snt Relocate them all to no one is using the classrooms
# ::tokens ["Relocate", "them", "all", "to", "no", "one", "is", "using", "the", "classrooms"]
# ::lemmas ["relocate", "they", "all", "to", "no", "one", "be", "use", "the", "classroom"]
(c36-4 / multi-sentence
       :snt1 (c36-2 / relocate-01
                    :ARG0 (c36-3 / you)
                    :ARG1 (c36-1 / they
                                 :mod (c36-0 / all))
                    :mode imperative)
       :snt2 (c36-6 / no-one
                    :ARG0-of (c36-5 / use-01
                                    :ARG1 (c36-7 / classroom))))

# ::snt where are the women and children?
# ::tokens ["where", "are", "the", "women", "and", "children", "?"]
# ::lemmas ["where", "be", "the", "woman", "and", "child", "?"]
(c37-0 / and
       :op1 (c37-1 / woman)
       :op2 (c37-3 / child)
       :location (c37-2 / amr-unknown))

# ::snt When you send them to high crime areas, their crimes wont be noticed well played bama
# ::tokens ["When", "you", "send", "them", "to", "high", "crime", "areas", ",", "their", "crimes", "wo", "nt", "be", "noticed", "well", "played", "bama"]
# ::lemmas ["when", "you", "send", "they", "to", "high", "crime", "area", ",", "their", "crime", "will", "not", "be", "notice", "well", "play", "bama"]
(c38-5 / notice-01
       :ARG1 (c38-9 / crime-02
                    :ARG0 (c38-1 / they))
       :condition (c38-4 / send-03
                         :ARG0 (c38-3 / you)
                         :ARG1 c38-1
                         :ARG2 (c38-0 / area
                                      :location-of c38-9
                                      :ARG1-of (c38-8 / high-02)))
       :ARG1-of (c38-6 / play-01
                       :ARG0 (c38-2 / bama)
                       :ARG1-of (c38-7 / well-09))
       :polarity -)

# ::snt don't let them in. Turn them around and send them back.
# ::tokens ["do", "n't", "let", "them", "in", ".", "Turn", "them", "around", "and", "send", "them", "back", "."]
# ::lemmas ["do", "not", "let", "they", "in", ".", "turn", "they", "around", "and", "send", "they", "back", "."]
(c39-7 / multi-sentence
       :snt1 (c39-10 / let-01
                     :ARG0 (c39-6 / you)
                     :ARG1 (c39-2 / enter-01
                                  :ARG0 (c39-1 / they))
                     :polarity -
                     :mode imperative)
       :snt2 (c39-0 / and
                    :op1 (c39-4 / turn-01
                                :ARG0 (c39-3 / you)
                                :ARG1 (c39-5 / they)
                                :direction (c39-11 / around)
                                :mode imperative)
                    :op2 (c39-9 / send-01
                                :ARG0 c39-3
                                :ARG1 c39-5
                                :ARG5 (c39-8 / back)
                                :mode imperative)))

# ::snt Notice anything?? Like its % fighting age men?? We're Screwed.
# ::tokens ["Notice", "anything", "?", "?", "Like", "its", "%", "fighting", "age", "men", "?", "?", "We", "'re", "Screwed", "."]
# ::lemmas ["Notice", "anything", "?", "?", "like", "its", "%", "fight", "age", "man", "?", "?", "we", "be", "Screwed", "."]
(c40-7 / notice-01
       :polarity (c40-0 / amr-unknown)
       :ARG0 (c40-4 / you)
       :ARG1 (c40-11 / anything
                     :ARG1-of (c40-2 / resemble-01
                                     :ARG2 (c40-8 / percentage-entity
                                                  :value-of (c40-5 / man
                                                                   :mod (c40-1 / age
                                                                               :mod (c40-10 / fight-01))))))
       :ARG1-of (c40-3 / cause-01
                       :ARG0 (c40-6 / screw-02
                                    :ARG1 (c40-9 / we))))

# ::snt wow this is the stupidest shit omg
# ::tokens ["wow", "this", "is", "the", "stupidest", "shit", "omg"]
# ::lemmas ["wow", "this", "be", "the", "stupid", "shit", "omg"]
(c41-5 / have-degree-91
       :ARG1 (c41-3 / shit
                    :mod (c41-1 / this))
       :ARG2 (c41-0 / stupid)
       :ARG3 (c41-2 / most)
       :mod (c41-4 / wow
                   :mode expressive))

# ::snt Why the media is so quiet about it? If true, Trump will send them ALL back! He's the only One that can do it!
# ::tokens ["Why", "the", "media", "is", "so", "quiet", "about", "it", "?", "If", "true", ",", "Trump", "will", "send", "them", "ALL", "back", "!", "He", "'s", "the", "only", "One", "that", "can", "do", "it", "!"]
# ::lemmas ["why", "the", "medium", "be", "so", "quiet", "about", "it", "?", "if", "true", ",", "Trump", "will", "send", "they", "all", "back", "!", "he", "be", "the", "only", "one", "that", "can", "do", "it", "!"]
(c42-19 / multi-sentence
        :snt1 (c42-11 / cause-01
                      :ARG0 (c42-12 / amr-unknown)
                      :ARG1 (c42-7 / quiet-04
                                   :ARG1 (c42-6 / media)
                                   :ARG2 (c42-4 / it)
                                   :degree (c42-8 / so)))
        :snt2 (c42-0 / send-01
                     :ARG0 (c42-15 / person
                                   :name (c42-5 / name
                                                :op1 "Trump"))
                     :ARG1 (c42-1 / they
                                  :mod (c42-10 / all))
                     :ARG2 (c42-2 / back)
                     :condition (c42-3 / true-01
                                       :ARG1 (c42-9 / it)))
        :snt3 (c42-14 / possible-01
                      :ARG1 (c42-17 / do-02
                                    :ARG0 (c42-18 / person
                                                  :mod (c42-20 / only)
                                                  :domain (c42-13 / he))
                                    :ARG1 (c42-16 / it))))

# ::snt Invading army. The camp followers--i.e. women &amp; children--will come later.
# ::tokens ["Invading", "army", ".", "The", "camp", "followers", "--", "i.e.", "women", "&", "amp", ";", "children", "--", "will", "come", "later", "."]
# ::lemmas ["invade", "army", ".", "the", "camp", "follower", "--", "i.e.", "woman", "&", "amp", ";", "child", "--", "will", "come", "later", "."]
(c43-4 / multi-sentence
       :snt1 (c43-7 / invade-01
                    :ARG1 (c43-0 / army))
       :snt2 (c43-12 / come-01
                     :ARG1 (c43-9 / person
                                  :ARG0-of (c43-11 / follow-02
                                                   :ARG1 (c43-5 / camp))
                                  :ARG1-of (c43-2 / mean-01
                                                  :ARG2 (c43-8 / and
                                                               :op1 (c43-10 / woman)
                                                               :op2 (c43-1 / amp)
                                                               :op3 (c43-3 / child))))
                     :time (c43-6 / after)))

# ::snt can some one say "world domination!" The Trojan horse is in the city walls! Prepare yourselves!
# ::tokens ["can", "some", "one", "say", "\"", "world", "domination", "!", "\"", "The", "Trojan", "horse", "is", "in", "the", "city", "walls", "!", "Prepare", "yourselves", "!"]
# ::lemmas ["can", "some", "one", "say", "\"", "world", "domination", "!", "\"", "the", "Trojan", "horse", "be", "in", "the", "city", "wall", "!", "prepare", "yourself", "!"]
(c44-5 / multi-sentence
       :snt1 (c44-8 / possible-01
                    :polarity (c44-0 / amr-unknown)
                    :ARG1 (c44-7 / say-01
                                 :ARG0 (c44-1 / someone)
                                 :ARG1 (c44-13 / dominate-01
                                               :ARG0 (c44-10 / world))))
       :snt2 (c44-2 / be-located-at-91
                    :ARG1 (c44-12 / horse
                                  :name (c44-9 / name
                                               :op1 "Troy"))
                    :ARG2 (c44-3 / wall
                                 :mod (c44-11 / city)))
       :snt3 (c44-6 / prepare-02
                    :ARG0 (c44-4 / you
                                 :ARG1-of c44-6)
                    :mode imperative))

# ::snt we are f.....ing stupid asses!!!
# ::tokens ["we", "are", "f", ".....", "ing", "stupid", "asses", "!", "!", "!"]
# ::lemmas ["we", "be", "f", ".....", "e", "stupid", "ass", "!", "!", "!"]
(c45-0 / ass
       :mod (c45-2 / stupid)
       :domain (c45-1 / we)
       :mode expressive)

# ::snt Where are the ladies and children ?
# ::tokens ["Where", "are", "the", "ladies", "and", "children", "?"]
# ::lemmas ["where", "be", "the", "lady", "and", "child", "?"]
(c46-0 / and
       :op1 (c46-1 / lady)
       :op2 (c46-3 / child)
       :location (c46-2 / amr-unknown))

# ::snt Time to lock up the dogs ! Sodom Obama et al is coming to town .
# ::tokens ["Time", "to", "lock", "up", "the", "dogs", "!", "Sodom", "Obama", "et", "al", "is", "coming", "to", "town", "."]
# ::lemmas ["time", "to", "lock", "up", "the", "dog", "!", "Sodom", "Obama", "et", "al", "be", "come", "to", "town", "."]
(c47-4 / multi-sentence
       :snt1 (c47-1 / time
                    :time-of (c47-8 / lock-up-03
                                    :ARG1 (c47-2 / dog)))
       :snt2 (c47-9 / come-01
                    :ARG1 (c47-0 / and
                                 :op1 (c47-5 / person
                                             :name (c47-6 / name
                                                          :op1 "Sodom"
                                                          :op2 "Obama"))
                                 :op2 (c47-7 / other))
                    :ARG4 (c47-3 / town)))

# ::snt I can't verify the photo, but local news in New Orleans backs the story.
# ::tokens ["I", "ca", "n't", "verify", "the", "photo", ",", "but", "local", "news", "in", "New", "Orleans", "backs", "the", "story", "."]
# ::lemmas ["i", "can", "not", "verify", "the", "photo", ",", "but", "local", "news", "in", "New", "Orleans", "back", "the", "story", "."]
(c48-10 / contrast-01
        :ARG1 (c48-6 / possible-01
                     :ARG1 (c48-8 / verify-01
                                  :ARG0 (c48-4 / i)
                                  :ARG1 (c48-2 / photo))
                     :polarity -)
        :ARG2 (c48-0 / back-01
                     :ARG0 (c48-7 / news
                                  :ARG1-of (c48-9 / local-02)
                                  :location (c48-3 / city
                                                   :name (c48-1 / name
                                                                :op1 "New"
                                                                :op2 "Orleans")))
                     :ARG1 (c48-5 / story)))

# ::snt teroristsinparis,dothemath10000syriansobamabroutintousadivideby12=833.33citiesx158kiled=131,666 americansdead
# ::tokens ["teroristsinparis", ",", "dothemath10000syriansobamabroutintousadivideby12=833.33citiesx158kiled=131,666", "americansdead"]
# ::lemmas ["teroristsinparis", ",", "dothemath10000syriansobamabroutintousadivideby12=833.33citiesx158kiled=131,666", "americansdead"]
(c49-0 / and
       :op1 (c49-5 / person
                   :name (c49-6 / name
                                :op1 "teroristsinparis"))
       :op2 (c49-4 / person
                   :name (c49-2 / name
                                :op1 "dothemath10000syriansobamabroutintousadivideby12=833.33citiesx158kiled=131,666")
                   :op3 (c49-1 / person
                               :mod (c49-8 / country
                                           :name (c49-7 / name
                                                        :op1 "America"))
                               :ARG1-of (c49-3 / die-01))))

# ::snt Yes, more accurate. Or Colonists
# ::tokens ["Yes", ",", "more", "accurate", ".", "Or", "Colonists"]
# ::lemmas ["yes", ",", "more", "accurate", ".", "or", "Colonists"]
(c50-2 / multi-sentence
       :snt1 (c50-0 / accurate
                    :ARG2-of (c50-4 / have-degree-91
                                    :ARG3 (c50-1 / more)))
       :snt2 (c50-3 / or
                    :op2 (c50-5 / colonist)))
