# ::snt It's a joke, not true, Okay? ! Do not generalize it!
# ::tokens ["It", "'s", "a", "joke", ",", "not", "true", ",", "Okay", "?", "!", "Do", "not", "generalize", "it", "!"]
# ::lemmas ["it", "be", "a", "joke", ",", "not", "true", ",", "okay", "?", "!", "do", "not", "generalize", "it", "!"]
(c1-4 / multi-sentence
      :snt1 (c1-0 / and
                  :op1 (c1-2 / joke-01
                             :domain (c1-6 / it))
                  :op2 (c1-1 / true-01
                             :ARG1 c1-6
                             :polarity -)
                  :ARG1-of (c1-7 / okay-01
                                 :polarity (c1-9 / amr-unknown)))
      :snt2 (c1-5 / generalize-01
                  :ARG0 (c1-3 / you)
                  :ARG1 (c1-8 / it)
                  :mode imperative
                  :polarity -))

# ::snt Be careful
# ::tokens ["Be", "careful"]
# ::lemmas ["be", "careful"]
(c2-1 / care-04
      :ARG0 (c2-0 / you))

# ::snt I saw this!!
# ::tokens ["I", "saw", "this", "!", "!"]
# ::lemmas ["i", "see", "this", "!", "!"]
(c3-2 / see-01
      :ARG0 (c3-1 / i)
      :ARG1 (c3-0 / this))

# ::snt where are the stairs
# ::tokens ["where", "are", "the", "stairs"]
# ::lemmas ["where", "be", "the", "stair"]
(c5-1 / stair
      :location (c5-0 / amr-unknown))

# ::snt super. thank goodness the cameras are (still) there.
# ::tokens ["super", ".", "thank", "goodness", "the", "cameras", "are", "(", "still", ")", "there", "."]
# ::lemmas ["super", ".", "thank", "goodness", "the", "camera", "be", "(", "still", ")", "there", "."]
(c6-4 / multi-sentence
      :snt1 (c6-6 / super)
      :snt2 (c6-1 / thank-01
                  :ARG1 (c6-5 / goodness)
                  :ARG2 (c6-2 / be-located-at-91
                              :ARG1 (c6-7 / camera)
                              :ARG2 (c6-3 / there)
                              :mod (c6-0 / still))))

# ::snt maybe taking the stairs would be a little easier in these cases..
# ::tokens ["maybe", "taking", "the", "stairs", "would", "be", "a", "little", "easier", "in", "these", "cases", ".."]
# ::lemmas ["maybe", "take", "the", "stair", "would", "be", "a", "little", "easy", "in", "these", "case", ".."]
(c8-5 / possible-01
      :ARG1 (c8-7 / have-degree-91
                  :ARG1 (c8-0 / take-01
                              :ARG1 (c8-4 / stair))
                  :ARG2 (c8-1 / easy-05)
                  :ARG3 (c8-3 / more
                              :quant (c8-6 / little))
                  :time (c8-8 / case-04
                              :ARG1 (c8-2 / this))))

# ::snt o_O RT : This is how people in China are riding escalators after a horrific accident
# ::tokens ["o_O", "RT", ":", "This", "is", "how", "people", "in", "China", "are", "riding", "escalators", "after", "a", "horrific", "accident"]
# ::lemmas ["o_O", "RT", ":", "this", "be", "how", "people", "in", "China", "be", "ride", "escalator", "after", "a", "horrific", "accident"]
(c9-6 / say-01
      :ARG0 (c9-5 / i)
      :ARG1 (c9-2 / ride-01
                  :ARG0 (c9-7 / person
                              :location (c9-11 / country
                                               :name (c9-8 / name
                                                           :op1 "China")))
                  :ARG1 (c9-3 / escalator)
                  :time (c9-0 / after
                              :op1 (c9-9 / accident
                                         :mod (c9-10 / horrific)))
                  :manner (c9-1 / this))
      :ARG2 c9-7
      :name (c9-4 / name
                  :op1 "O_O"
                  :op2 "RT"))

# ::snt well that wouldn't help if the bottom fell out the way it did before lol.
# ::tokens ["well", "that", "would", "n't", "help", "if", "the", "bottom", "fell", "out", "the", "way", "it", "did", "before", "lol", "."]
# ::lemmas ["well", "that", "would", "not", "help", "if", "the", "bottom", "fall", "out", "the", "way", "it", "do", "before", "lol", "."]
(c10-10 / help-01
        :ARG0 (c10-0 / that)
        :condition (c10-9 / fall-01
                          :ARG1 (c10-3 / bottom)
                          :direction (c10-6 / out)
                          :manner (c10-7 / way
                                         :manner-of (c10-2 / fall-01
                                                           :ARG1 c10-3
                                                           :time (c10-4 / before))))
        :ARG2-of (c10-8 / laugh-01
                        :ARG0 (c10-5 / i)
                        :manner (c10-1 / loud)
                        :mode expressive)
        :polarity -)

# ::snt Yup.
# ::tokens ["Yup", "."]
# ::lemmas ["yup", "."]
(c11-0 / yup)

# ::snt i'd rather ride the stairs
# ::tokens ["i", "'d", "rather", "ride", "the", "stairs"]
# ::lemmas ["i", "would", "rather", "ride", "the", "stair"]
(c12-3 / prefer-01
       :ARG0 (c12-1 / i)
       :ARG1 (c12-0 / ride-01
                    :ARG0 c12-1
                    :ARG1 (c12-2 / stair)))

# ::snt same.
# ::tokens ["same", "."]
# ::lemmas ["same", "."]
(c13-0 / same-01)

# ::snt desde essa notcia tenho evitado todas as escadas rolantes aqui no Brasil mesmo sad
# ::tokens ["desde", "essa", "notcia", "tenho", "evitado", "todas", "as", "escadas", "rolantes", "aqui", "no", "Brasil", "mesmo", "sad"]
# ::lemmas ["desde", "essa", "notcia", "tenho", "evitado", "todas", "as", "escadas", "rolante", "aqui", "no", "Brasil", "mesmo", "sad"]
(c15-7 / say-01
       :ARG0 (c15-6 / i)
       :ARG1 (c15-11 / have-concession-91
                     :ARG1 (c15-2 / evade-01
                                  :ARG0 (c15-12 / country
                                                :name (c15-8 / name
                                                             :op1 "France"))
                                  :ARG1 (c15-9 / escada
                                               :mod (c15-0 / aqui)
                                               :ARG1-of c15-7
                                               :ARG0 (c15-10 / publication
                                                             :name (c15-3 / name
                                                                          :op1 "Brasil"
                                                                          :op2 "Mesmo")))))
       :ARG2 (c15-4 / deny-01
                    :ARG0 c15-12
                    :ARG1 (c15-1 / todas))
       :ARG2 (c15-5 / you))

# ::snt estou com medo de escadas rolantes agora
# ::tokens ["estou", "com", "medo", "de", "escadas", "rolantes", "agora"]
# ::lemmas ["estou", "com", "medo", "de", "escadas", "rolante", "agora"]
(c16-4 / multi-sentence
       :snt1 (c16-1 / estou-as-if
                    :ARG0 (c16-3 / you)
                    :ARG1 (c16-2 / medo
                                 :mod (c16-5 / escadas)))
       :snt2 (c16-0 / agora))

# ::snt told ya..
# ::tokens ["told", "ya", ".."]
# ::lemmas ["tell", "ya", ".."]
(c17-2 / tell-01
       :ARG0 (c17-0 / i)
       :ARG2 (c17-1 / you))

# ::snt so when do we start this trend? The answer is yesterday.
# ::tokens ["so", "when", "do", "we", "start", "this", "trend", "?", "The", "answer", "is", "yesterday", "."]
# ::lemmas ["so", "when", "do", "we", "start", "this", "trend", "?", "the", "answer", "be", "yesterday", "."]
(c19-4 / multi-sentence
       :snt1 (c19-8 / cause-01
                    :ARG1 (c19-6 / start-01
                                 :ARG0 (c19-7 / we)
                                 :ARG1 (c19-1 / trend-01
                                              :mod (c19-2 / this))
                                 :time (c19-0 / amr-unknown)))
       :snt2 (c19-5 / answer-01
                    :ARG2 (c19-3 / yesterday)))

# ::snt and this is somehow better than stairs.
# ::tokens ["and", "this", "is", "somehow", "better", "than", "stairs", "."]
# ::lemmas ["and", "this", "be", "somehow", "well", "than", "stair", "."]
(c20-0 / and
       :op2 (c20-6 / have-degree-91
                   :ARG1 (c20-2 / this)
                   :ARG2 (c20-4 / good-02
                                :ARG1 c20-2)
                   :ARG3 (c20-3 / more)
                   :ARG4 (c20-5 / stair)
                   :manner (c20-1 / somehow)))

# ::snt The lady that died on them didn't listen to the mechanic who was closing it. How about China shows courtesy and listen to people.
# ::tokens ["The", "lady", "that", "died", "on", "them", "did", "n't", "listen", "to", "the", "mechanic", "who", "was", "closing", "it", ".", "How", "about", "China", "shows", "courtesy", "and", "listen", "to", "people", "."]
# ::lemmas ["the", "lady", "that", "die", "on", "they", "do", "not", "listen", "to", "the", "mechanic", "who", "be", "close", "it", ".", "how", "about", "China", "show", "courtesy", "and", "listen", "to", "people", "."]
(c21-6 / multi-sentence
       :snt1 (c21-12 / listen-01
                     :ARG0 (c21-3 / lady
                                  :ARG1-of (c21-14 / die-01
                                                   :location (c21-2 / they)))
                     :ARG1 (c21-4 / mechanic
                                  :ARG0-of (c21-13 / close-01
                                                   :ARG1 c21-2))
                     :polarity -)
       :snt2 (c21-0 / amr-unknown
                    :topic (c21-8 / and
                                  :op1 (c21-9 / show-01
                                              :ARG0 (c21-7 / country
                                                           :name (c21-10 / name
                                                                         :op1 "China"))
                                              :ARG1 (c21-5 / courtesy))
                                  :op2 (c21-1 / listen-01
                                              :ARG0 c21-7
                                              :ARG1 (c21-11 / person)))))

# ::snt lol
# ::tokens ["lol"]
# ::lemmas ["lol"]
(c22-0 / laugh-01
       :manner (c22-1 / loud)
       :mode expressive)

# ::snt So I guess planking is gonna have its comeback in China these days.
# ::tokens ["So", "I", "guess", "planking", "is", "gon", "na", "have", "its", "comeback", "in", "China", "these", "days", "."]
# ::lemmas ["so", "i", "guess", "plank", "be", "going", "to", "have", "its", "comeback", "in", "China", "these", "days", "."]
(c23-3 / guess-01
       :ARG0 (c23-5 / i)
       :ARG1 (c23-8 / comeback-01
                    :ARG0 (c23-6 / political-party
                                 :name (c23-7 / name
                                              :op1 "Plank"))
                    :location (c23-4 / country
                                     :name (c23-1 / name
                                                  :op1 "China"))
                    :time (c23-2 / day
                                 :mod (c23-0 / this))))

# ::snt Well this is also dangerous. Are there any stairs?
# ::tokens ["Well", "this", "is", "also", "dangerous", ".", "Are", "there", "any", "stairs", "?"]
# ::lemmas ["well", "this", "be", "also", "dangerous", ".", "be", "there", "any", "stair", "?"]
(c24-4 / multi-sentence
       :snt1 (c24-3 / endanger-01
                    :ARG0 (c24-1 / this)
                    :mod (c24-0 / also)
                    :mod (c24-6 / well))
       :snt2 (c24-5 / stair
                    :polarity (c24-7 / amr-unknown)
                    :mod (c24-2 / any)))

# ::snt me in the morning.
# ::tokens ["me", "in", "the", "morning", "."]
# ::lemmas ["i", "in", "the", "morning", "."]
(c26-1 / i
       :time (c26-2 / date-entity
                    :dayperiod (c26-0 / morning)))

# ::snt wow.... I mean I'd definitely be scared to take the escalator after the accident, but this is taking it to a new level
# ::tokens ["wow", "....", "I", "mean", "I", "'d", "definitely", "be", "scared", "to", "take", "the", "escalator", "after", "the", "accident", ",", "but", "this", "is", "taking", "it", "to", "a", "new", "level"]
# ::lemmas ["wow", "....", "i", "mean", "i", "would", "definitely", "be", "scared", "to", "take", "the", "escalator", "after", "the", "accident", ",", "but", "this", "be", "take", "it", "to", "a", "new", "level"]
(c27-6 / mean-01
       :ARG0 (c27-7 / i)
       :ARG2 (c27-13 / contrast-01
                     :ARG1 (c27-8 / scare-01
                                  :ARG0 (c27-1 / take-01
                                               :ARG0 c27-7
                                               :ARG1 (c27-2 / escalator)
                                               :time (c27-0 / after
                                                            :op1 (c27-9 / accident)))
                                  :ARG1 c27-7
                                  :mod (c27-3 / definite))
                     :ARG2 (c27-4 / take-01
                                  :ARG0 c27-4
                                  :ARG0 (c27-5 / this)
                                  :ARG1 c27-2
                                  :ARG3 (c27-12 / level
                                                :ARG1-of (c27-10 / new-01))))
       :mod (c27-11 / wow
                    :mode expressive))

# ::snt Te disse que escada rolante perigosa!
# ::tokens ["Te", "disse", "que", "escada", "rolante", "perigosa", "!"]
# ::lemmas ["te", "disse", "que", "escada", "rolante", "perigosa", "!"]
(c28-2 / disse-00
       :ARG0 (c28-0 / you)
       :ARG1 (c28-3 / escada-
                    :mod (c28-1 / perigosa)))

# ::snt and the article needed to be made comedic why...? Very insensitive, buzzfeed. Wtf.
# ::tokens ["and", "the", "article", "needed", "to", "be", "made", "comedic", "why", "...", "?", "Very", "insensitive", ",", "buzzfeed", ".", "Wtf", "."]
# ::lemmas ["and", "the", "article", "need", "to", "be", "make", "comedic", "why", "...", "?", "very", "insensitive", ",", "buzzfeed", ".", "Wtf", "."]
(c29-4 / multi-sentence
       :snt1 (c29-0 / and
                    :op2 (c29-8 / need-01
                                :ARG0 (c29-13 / amr-unknown)
                                :ARG1 (c29-2 / make-02
                                             :ARG1 (c29-11 / comedic
                                                           :domain (c29-1 / article)))
                                :ARG1-of (c29-5 / cause-01
                                                :ARG0 (c29-6 / amr-unknown))))
       :snt2 (c29-7 / sensitive-03
                    :ARG0 (c29-9 / person
                                 :ARG0-of (c29-3 / buzzfeed-01))
                    :degree (c29-10 / very)
                    :polarity -)
       :snt3 (c29-12 / fuck-01
                     :mode expressive))

# ::snt the same way I do, what a coincidence
# ::tokens ["the", "same", "way", "I", "do", ",", "what", "a", "coincidence"]
# ::lemmas ["the", "same", "way", "i", "do", ",", "what", "a", "coincidence"]
(c30-3 / coincidence
       :degree (c30-2 / so)
       :ARG1-of (c30-0 / same-01
                       :ARG2 (c30-4 / do-02
                                    :ARG0 (c30-1 / i))))

# ::snt looks more like planking. Remember that stupid trend kids?
# ::tokens ["looks", "more", "like", "planking", ".", "Remember", "that", "stupid", "trend", "kids", "?"]
# ::lemmas ["look", "more", "like", "plank", ".", "remember", "that", "stupid", "trend", "kid", "?"]
(c31-7 / multi-sentence
       :snt1 (c31-10 / look-02
                     :ARG1 (c31-9 / plank-01)
                     :ARG2-of (c31-11 / have-degree-91
                                      :ARG3 (c31-3 / more)
                                      :ARG1 c31-10))
       :snt2 (c31-2 / remember-01
                    :ARG0 (c31-6 / you)
                    :ARG1 (c31-4 / kid
                                 :mod (c31-1 / trend
                                             :mod (c31-8 / stupid))
                                 :mod (c31-5 / that))
                    :polarity (c31-0 / amr-unknown)))

# ::snt is it ever like dat, i hope so
# ::tokens ["is", "it", "ever", "like", "dat", ",", "i", "hope", "so"]
# ::lemmas ["be", "it", "ever", "like", "dat", ",", "i", "hope", "so"]
(c32-6 / hope-01
       :ARG0 (c32-5 / i)
       :ARG1 (c32-2 / resemble-01
                    :ARG1 (c32-3 / it)
                    :ARG2 (c32-1 / that)
                    :time (c32-4 / ever))
       :polarity (c32-0 / amr-unknown))

# ::snt Methinks THAT is not going to go so well . . . idiots.
# ::tokens ["Methinks", "THAT", "is", "not", "going", "to", "go", "so", "well", ".", ".", ".", "idiots", "."]
# ::lemmas ["methink", "that", "be", "not", "go", "to", "go", "so", "well", ".", ".", ".", "idiot", "."]
(c34-0 / think-01
       :ARG1 (c34-2 / go-06
                    :ARG1 (c34-1 / that)
                    :ARG1-of (c34-5 / well-09
                                    :degree (c34-4 / so))
                    :polarity -)
       :ARG2 (c34-3 / idiot))
