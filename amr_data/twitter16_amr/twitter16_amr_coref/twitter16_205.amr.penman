# ::snt Hey, if that helped get a confession out of the murderous skunk faster, I got no problem with it.
# ::tokens ["Hey", ",", "if", "that", "helped", "get", "a", "confession", "out", "of", "the", "murderous", "skunk", "faster", ",", "I", "got", "no", "problem", "with", "it", "."]
# ::lemmas ["hey", ",", "if", "that", "help", "get", "a", "confession", "out", "of", "the", "murderous", "skunk", "fast", ",", "i", "get", "no", "problem", "with", "it", "."]
(c1-13 / have-condition-91
       :ARG1 (c1-6 / have-03
                   :ARG0 (c1-7 / i)
                   :ARG1 (c1-9 / problem
                               :topic (c1-1 / it))
                   :polarity -)
       :ARG2 (c1-8 / help-01
                   :ARG0 (c1-0 / that)
                   :ARG1 (c1-3 / get-out-07
                               :ARG0 c1-0
                               :ARG1 (c1-10 / skunk
                                            :ARG0-of (c1-4 / murder-01))
                               :ARG1-of (c1-11 / have-degree-91
                                               :ARG2 (c1-12 / fast-02
                                                            :ARG1 c1-3)
                                               :ARG3 (c1-2 / more))))
       :mod (c1-5 / hey
                  :mode expressive))

# ::snt private plane! Should have thrown him in the rear of a police van and let him roll around, maybe broken his neck by mistake
# ::tokens ["private", "plane", "!", "Should", "have", "thrown", "him", "in", "the", "rear", "of", "a", "police", "van", "and", "let", "him", "roll", "around", ",", "maybe", "broken", "his", "neck", "by", "mistake"]
# ::lemmas ["private", "plane", "!", "should", "have", "throw", "he", "in", "the", "rear", "of", "a", "police", "van", "and", "let", "he", "roll", "around", ",", "maybe", "break", "his", "neck", "by", "mistake"]
(c2-8 / multi-sentence
      :snt1 (c2-11 / plane
                   :ARG1-of (c2-7 / private-03))
      :snt2 (c2-4 / recommend-01
                  :ARG1 (c2-0 / and
                              :op1 (c2-3 / throw-01
                                         :ARG1 (c2-15 / he
                                                      :part (c2-12 / neck))
                                         :ARG2 (c2-9 / rear
                                                     :part-of (c2-13 / van
                                                                     :mod (c2-1 / police))))
                              :op2 (c2-14 / let-01
                                          :ARG1 (c2-2 / roll-01
                                                      :ARG1 c2-15
                                                      :direction (c2-16 / around)))
                              :op3 (c2-5 / break-01
                                         :ARG0 c2-15
                                         :ARG1 c2-12
                                         :ARG1-of (c2-10 / possible-01)
                                         :ARG1-of (c2-6 / mistake-02)))))

# ::snt Although BurgerKing
# ::tokens ["Although", "BurgerKing"]
# ::lemmas ["although", "BurgerKing"]
(c3-0 / have-concession-91
      :ARG1 (c3-1 / company
                  :name (c3-2 / name
                              :op1 "BurgerKing")))

# ::snt Don't think they had any mush, but get your point.
# ::tokens ["Do", "n't", "think", "they", "had", "any", "mush", ",", "but", "get", "your", "point", "."]
# ::lemmas ["do", "not", "think", "they", "have", "any", "mush", ",", "but", "get", "your", "point", "."]
(c4-9 / contrast-01
      :ARG1 (c4-1 / think-01
                  :ARG0 (c4-6 / i)
                  :ARG1 (c4-8 / have-03
                              :ARG0 (c4-2 / they)
                              :ARG1 (c4-4 / mush
                                          :mod (c4-0 / any)))
                  :polarity -)
      :ARG2 (c4-5 / get-30
                  :ARG0 (c4-3 / you)
                  :ARG1 (c4-7 / point-04
                              :ARG0 c4-3)))

# ::snt Is this a plane? First class? Is Zimmerman there to comfort him?
# ::tokens ["Is", "this", "a", "plane", "?", "First", "class", "?", "Is", "Zimmerman", "there", "to", "comfort", "him", "?"]
# ::lemmas ["be", "this", "a", "plane", "?", "First", "class", "?", "be", "zimmerman", "there", "to", "comfort", "he", "?"]
(c5-2 / multi-sentence
      :snt1 (c5-7 / plane
                  :domain (c5-1 / this)
                  :polarity (c5-0 / amr-unknown))
      :snt2 (c5-11 / class
                   :ord (c5-9 / ordinal-entity
                              :value 1))
      :snt3 (c5-10 / have-purpose-91
                   :ARG1 (c5-3 / person
                               :name (c5-8 / name
                                           :op1 "Zimmerman"))
                   :ARG2 (c5-4 / comfort-01
                               :ARG0 c5-3
                               :ARG1 (c5-5 / he))
                   :polarity (c5-6 / amr-unknown)))

# ::snt "asset" I think the operative word is "bought their 'asset' food"... It is already hitting the fan~
# ::tokens ["\"", "asset", "\"", "I", "think", "the", "operative", "word", "is", "\"", "bought", "their", "'", "asset", "'", "food", "\"", "...", "It", "is", "already", "hitting", "the", "fan~"]
# ::lemmas ["\"", "asset", "\"", "i", "think", "the", "operative", "word", "be", "\"", "buy", "their", "'", "asset", "'", "food", "\"", "...", "it", "be", "already", "hit", "the", "fan~"]
(c6-6 / multi-sentence
      :snt1 (c6-1 / think-01
                  :ARG0 (c6-7 / i)
                  :ARG1 (c6-9 / word-01
                              :ARG1 (c6-3 / buy-01
                                          :ARG1 (c6-10 / food
                                                       :poss (c6-4 / they)
                                                       :ARG1-of (c6-0 / asset-01)))
                              :ARG1-of (c6-8 / operative-02)))
      :snt2 (c6-11 / hit-01
                   :ARG0 (c6-2 / it)
                   :ARG1 (c6-5 / fan)
                   :time (c6-12 / already)))

# ::snt Murdered ppl, a y/o had presence of mind to play dead. If wasn't caught Jews, traitors?
# ::tokens ["Murdered", "ppl", ",", "a", "y", "/", "o", "had", "presence", "of", "mind", "to", "play", "dead", ".", "If", "was", "n't", "caught", "Jews", ",", "traitors", "?"]
# ::lemmas ["murder", "ppl", ",", "a", "y", "/", "o", "have", "presence", "of", "mind", "to", "play", "dead", ".", "if", "be", "not", "catch", "Jews", ",", "traitor", "?"]
(c7-18 / multi-sentence
       :snt1 (c7-8 / have-03
                   :ARG0 (c7-9 / and
                               :op1 (c7-14 / person
                                           :ARG1-of (c7-3 / murder-01))
                               :op2 (c7-11 / person
                                           :ARG0-of (c7-12 / have-rel-role-91
                                                           :ARG1 (c7-17 / you)
                                                           :ARG2 (c7-4 / significant-other))))
                   :ARG1 (c7-16 / present-02
                                :ARG1 (c7-5 / mind)
                                :purpose (c7-13 / play-02
                                                :ARG0 c7-9
                                                :ARG1 (c7-15 / die-01
                                                             :ARG1 c7-9))))
       :snt2 (c7-19 / person
                    :ARG0-of (c7-0 / betray-01)
                    :condition (c7-7 / catch-02
                                     :ARG1 (c7-6 / person
                                                 :mod (c7-2 / religious-group
                                                            :name (c7-1 / name
                                                                        :op1 "Jew")))
                                     :polarity -)
                    :polarity (c7-10 / amr-unknown)))

# ::snt Mush, like everyone else &amp; what make him special? Aldo sad he's so young, shld know better
# ::tokens ["Mush", ",", "like", "everyone", "else", "&", "amp", ";", "what", "make", "him", "special", "?", "Aldo", "sad", "he", "'s", "so", "young", ",", "shld", "know", "better"]
# ::lemmas ["Mush", ",", "like", "everyone", "else", "&", "amp", ";", "what", "make", "he", "special", "?", "aldo", "sad", "he", "be", "so", "young", ",", "shld", "know", "well"]
(c8-22 / multi-sentence
       :snt1 (c8-4 / make-02
                   :ARG0 (c8-14 / amr-unknown)
                   :ARG1 (c8-8 / special-02
                               :ARG1 (c8-17 / person
                                            :name (c8-2 / name
                                                        :op1 "Mush")))
                   :ARG1-of (c8-3 / resemble-01
                                  :ARG2 (c8-13 / and
                                               :op1 (c8-20 / everyone
                                                           :mod (c8-9 / else))
                                               :op2 (c8-15 / person
                                                           :name (c8-5 / name
                                                                       :op1 "amp")))))
       :snt2 (c8-0 / sad-02
                   :ARG0 (c8-21 / young
                                :domain (c8-11 / he)
                                :degree (c8-1 / so))
                   :ARG1 (c8-19 / person
                                :name (c8-18 / name
                                             :op1 "Aldo"))
                   :ARG1-of (c8-12 / cause-01
                                   :ARG0 (c8-6 / know-01
                                               :ARG0 c8-19
                                               :ARG1-of (c8-16 / have-degree-91
                                                               :ARG2 (c8-7 / good-02
                                                                           :ARG1 c8-6)
                                                               :ARG3 (c8-10 / more))))))

# ::snt Also law says they have to feed and house him.
# ::tokens ["Also", "law", "says", "they", "have", "to", "feed", "and", "house", "him", "."]
# ::lemmas ["also", "law", "say", "they", "have", "to", "feed", "and", "house", "he", "."]
(c9-3 / say-01
      :ARG0 (c9-5 / law)
      :ARG1 (c9-4 / obligate-01
                  :ARG1 (c9-1 / they)
                  :ARG2 (c9-0 / and
                              :op1 (c9-6 / feed-01
                                         :ARG0 c9-1
                                         :ARG2 (c9-7 / he))
                              :op2 (c9-2 / house-01
                                         :ARG0 c9-1
                                         :ARG1 c9-7)))
      :mod (c9-8 / also))

# ::snt Private plane, not a commercial flight.
# ::tokens ["Private", "plane", ",", "not", "a", "commercial", "flight", "."]
# ::lemmas ["private", "plane", ",", "not", "a", "commercial", "flight", "."]
(c10-4 / contrast-01
       :ARG1 (c10-2 / plane
                    :ARG1-of (c10-0 / private-03))
       :ARG2 (c10-3 / fly-01
                    :mod (c10-1 / commerce)
                    :polarity -))

# ::snt Nice, now we reward murderers &amp; white racists killing black people churches.Just what cops hired
# ::tokens ["Nice", ",", "now", "we", "reward", "murderers", "&", "amp", ";", "white", "racists", "killing", "black", "people", "churches", ".", "Just", "what", "cops", "hired"]
# ::lemmas ["nice", ",", "now", "we", "reward", "murderer", "&", "amp", ";", "white", "racist", "kill", "black", "people", "church", ".", "just", "what", "cop", "hire"]
(c11-7 / multi-sentence
       :snt1 (c11-13 / nice-01)
       :snt2 (c11-16 / contrast-01
                     :ARG1 (c11-2 / reward-01
                                  :ARG0 (c11-15 / we)
                                  :ARG1 (c11-0 / and
                                               :op1 (c11-14 / person
                                                            :ARG0-of (c11-3 / murder-01))
                                               :op2 (c11-8 / person
                                                           :ARG0-of (c11-12 / murder-01))))
                     :ARG2 (c11-4 / kill-01
                                  :ARG0 (c11-11 / racist
                                                :ARG1-of (c11-5 / white-02))
                                  :ARG1 (c11-9 / church
                                               :poss (c11-1 / person
                                                            :ARG1-of (c11-6 / black-05))))
                     :time (c11-10 / now)))

# ::snt The kind of cops we DON'T need,they should be Fired. That was a stamp of approval , murder Blacks
# ::tokens ["The", "kind", "of", "cops", "we", "DON'T", "need", ",", "they", "should", "be", "Fired", ".", "That", "was", "a", "stamp", "of", "approval", ",", "murder", "Blacks"]
# ::lemmas ["the", "kind", "of", "cop", "we", "don't", "need", ",", "they", "should", "be", "fire", ".", "that", "be", "a", "stamp", "of", "approval", ",", "murder", "Blacks"]
(c12-6 / multi-sentence
       :snt1 (c12-2 / recommend-01
                    :ARG1 (c12-12 / fire-02
                                  :ARG1 (c12-13 / cop
                                                :mod (c12-4 / kind)
                                                :ARG1-of (c12-9 / need-01
                                                                :ARG0 (c12-11 / we)
                                                                :polarity -))))
       :snt2 (c12-0 / and
                    :op1 (c12-8 / stamp
                                :mod (c12-7 / approve-01)
                                :domain (c12-1 / that))
                    :op2 (c12-3 / murder-01
                                :ARG1 (c12-10 / person
                                              :ARG1-of (c12-5 / black-05)))))

# ::snt white suspect, white police yeah they looked out for him
# ::tokens ["white", "suspect", ",", "white", "police", "yeah", "they", "looked", "out", "for", "him"]
# ::lemmas ["white", "suspect", ",", "white", "police", "yeah", "they", "look", "out", "for", "he"]
(c13-0 / and
       :op1 (c13-4 / person
                   :ARG2-of (c13-3 / suspect-01)
                   :ARG1-of (c13-5 / white-02
                                   :ARG1 (c13-2 / police
                                                :op2-of c13-0)))
       :op3 (c13-6 / look-out-08
                   :ARG0 c13-2
                   :ARG1 (c13-7 / he))
       :mod (c13-1 / yeah))

# ::snt giving shooter a hashtag is giving killer desired fame
# ::tokens ["giving", "shooter", "a", "hashtag", "is", "giving", "killer", "desired", "fame"]
# ::lemmas ["give", "shooter", "a", "hashtag", "be", "give", "killer", "desire", "fame"]
(c14-3 / give-01
       :ARG0 (c14-2 / give-01
                    :ARG0 (c14-1 / you)
                    :ARG1 (c14-8 / hashtag)
                    :ARG2 (c14-6 / person
                                 :ARG0-of (c14-5 / shoot-02)))
       :ARG1 (c14-7 / fame-01
                    :ARG1 (c14-4 / person
                                 :ARG0-of (c14-0 / kill-01))
                    :ARG1-of (c14-9 / desire-01
                                    :ARG0 c14-4))
       :ARG2 c14-4)

# ::snt soooo in others words negatively reinforcing this lunatics thoughts and actions
# ::tokens ["soooo", "in", "others", "words", "negatively", "reinforcing", "this", "lunatics", "thoughts", "and", "actions"]
# ::lemmas ["soooo", "in", "other", "word", "negatively", "reinforce", "this", "lunatic", "thought", "and", "action"]
(c15-2 / reinforce-01
       :ARG1 (c15-0 / and
                    :op1 (c15-1 / think-01)
                    :op2 (c15-9 / act-02)
                    :mod (c15-8 / lunatic)
                    :mod (c15-3 / this))
       :ARG2-of (c15-5 / negative-03)
       :location (c15-7 / word
                        :mod (c15-6 / other))
       :mod (c15-4 / so))

# ::snt The same way the Germanwings pilot was shown doing charity work. Racism stinls!
# ::tokens ["The", "same", "way", "the", "Germanwings", "pilot", "was", "shown", "doing", "charity", "work", ".", "Racism", "stinls", "!"]
# ::lemmas ["the", "same", "way", "the", "Germanwings", "pilot", "be", "show", "do", "charity", "work", ".", "racism", "stinls", "!"]
(c16-5 / multi-sentence
       :snt1 (c16-6 / show-01
                    :ARG1 (c16-12 / do-02
                                  :ARG0 (c16-7 / person
                                               :ARG0-of (c16-4 / pilot-01
                                                               :ARG1 (c16-2 / military
                                                                            :name (c16-8 / name
                                                                                         :op1 "Germanwings"))))
                                  :ARG1 (c16-10 / work-01
                                                :ARG0 c16-7
                                                :ARG1 (c16-11 / charity)))
                    :manner (c16-3 / way
                                   :ARG1-of (c16-0 / same-01)))
       :snt2 (c16-9 / stinkel
                    :mod (c16-1 / racism)
                    :mode expressive))
