# ::snt forget all the time, "innocent until proven guilty".
# ::tokens ["forget", "all", "the", "time", ",", "\"", "innocent", "until", "proven", "guilty", "\"", "."]
# ::lemmas ["forget", "all", "the", "time", ",", "\"", "innocent", "until", "prove", "guilty", "\"", "."]
(c2-7 / forget-01
      :ARG0 (c2-2 / you)
      :ARG1 (c2-4 / innocent-01
                  :time (c2-5 / until
                              :op1 (c2-6 / prove-01
                                         :ARG1 (c2-3 / guilty-01))))
      :time (c2-1 / time
                  :mod (c2-0 / all))
      :mode imperative)

# ::snt Yeah, that is saddening that he got that, but we also gotta wait to see what the end result is. We Americans
# ::tokens ["Yeah", ",", "that", "is", "saddening", "that", "he", "got", "that", ",", "but", "we", "also", "got", "ta", "wait", "to", "see", "what", "the", "end", "result", "is", ".", "We", "Americans"]
# ::lemmas ["yeah", ",", "that", "be", "sadden", "that", "he", "get", "that", ",", "but", "we", "also", "got", "to", "wait", "to", "see", "what", "the", "end", "result", "be", ".", "we", "Americans"]
(c3-8 / multi-sentence
      :snt1 (c3-17 / contrast-01
                   :ARG1 (c3-12 / sadden-01
                                :ARG0 (c3-7 / get-01
                                            :ARG0 (c3-16 / he)
                                            :ARG1 (c3-2 / that))
                                :ARG1 (c3-15 / we))
                   :ARG2 (c3-14 / obligate-01
                                :ARG1 (c3-5 / we)
                                :ARG2 (c3-9 / wait-01
                                            :ARG1 c3-5
                                            :ARG2 (c3-0 / see-01
                                                        :ARG0 c3-5
                                                        :ARG1 (c3-6 / thing
                                                                    :ARG2-of (c3-3 / result-01)
                                                                    :ARG1-of (c3-4 / end-01))))
                                :mod (c3-1 / also)))
      :snt2 (c3-11 / we
                   :mod (c3-10 / country
                               :name (c3-13 / name
                                            :op1 "America"))))

# ::snt I'm sick...smh
# ::tokens ["I", "'m", "sick", "...", "smh"]
# ::lemmas ["i", "be", "sick", "...", "smh"]
(c4-2 / sick-05
      :ARG1 (c4-1 / i)
      :mod (c4-0 / smh
                 :mode expressive))

# ::snt Rewarded and Burger King in the same sentence, wow.
# ::tokens ["Rewarded", "and", "Burger", "King", "in", "the", "same", "sentence", ",", "wow", "."]
# ::lemmas ["reward", "and", "Burger", "King", "in", "the", "same", "sentence", ",", "wow", "."]
(c5-5 / wow
      :mod (c5-0 / and
                 :op1 (c5-2 / reward-01)
                 :op2 (c5-6 / company
                            :name (c5-4 / name
                                        :op1 "Burger"
                                        :op2 "King"))
                 :location (c5-3 / sentence
                                 :ARG1-of (c5-1 / same-01)))
      :mode expressive)

# ::snt wow that's crazy!
# ::tokens ["wow", "that", "'s", "crazy", "!"]
# ::lemmas ["wow", "that", "be", "crazy", "!"]
(c6-2 / crazy-03
      :ARG1 (c6-1 / that)
      :mod (c6-0 / wow
                 :mode expressive))

# ::snt LOL
# ::tokens ["LOL"]
# ::lemmas ["LOL"]
(c7-0 / laugh-01
      :ARG0 (c7-1 / i)
      :manner (c7-2 / loud))

# ::snt I couldn't even get a soda when I got locked up
# ::tokens ["I", "could", "n't", "even", "get", "a", "soda", "when", "I", "got", "locked", "up"]
# ::lemmas ["i", "could", "not", "even", "get", "a", "soda", "when", "i", "got", "lock", "up"]
(c8-4 / possible-01
      :ARG1 (c8-1 / get-01
                  :ARG0 (c8-2 / i)
                  :ARG1 (c8-3 / soda)
                  :mod (c8-0 / even)
                  :time (c8-5 / lock-up-03
                              :ARG1 c8-2))
      :polarity -)

# ::snt EXACTLY! why this country isn't shit.
# ::tokens ["EXACTLY", "!", "why", "this", "country", "is", "n't", "shit", "."]
# ::lemmas ["exactly", "!", "why", "this", "country", "be", "not", "shit", "."]
(c9-0 / thing
      :ARG0-of (c9-5 / cause-01
                     :ARG1 (c9-4 / shit
                                 :domain (c9-3 / country
                                               :mod (c9-2 / this))
                                 :polarity -))
      :mod (c9-1 / exact)
      :mode expressive)

# ::snt you gotta be fucking kidding me ..
# ::tokens ["you", "got", "ta", "be", "fucking", "kidding", "me", ".."]
# ::lemmas ["you", "got", "to", "be", "fucking", "kid", "i", ".."]
(c10-2 / get-06
       :ARG0 (c10-1 / you)
       :ARG1 (c10-0 / kid-01
                    :ARG0 c10-1
                    :ARG1 (c10-3 / i)
                    :mod (c10-4 / fucking)))
