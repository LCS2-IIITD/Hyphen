# ::snt Just stop. Pick up a book and stop you're embarrassing yourselves
# ::tokens ["Just", "stop", ".", "Pick", "up", "a", "book", "and", "stop", "you", "'re", "embarrassing", "yourselves"]
# ::lemmas ["just", "stop", ".", "pick", "up", "a", "book", "and", "stop", "you", "be", "embarrassing", "yourself"]
(c1-7 / multi-sentence
      :snt1 (c1-8 / stop-01
                  :ARG0 (c1-6 / you)
                  :mod (c1-2 / just)
                  :mode imperative)
      :snt2 (c1-0 / and
                  :op1 (c1-9 / pick-up-04
                             :ARG0 (c1-3 / you)
                             :ARG1 (c1-4 / book)
                             :mode imperative)
                  :op2 (c1-1 / stop-01
                             :ARG0 c1-3
                             :ARG1 (c1-5 / embarrass-01
                                         :ARG0 c1-3
                                         :ARG1 c1-3)
                             :mode imperative)))

# ::snt :. How about this one?
# ::tokens [":", ".", "How", "about", "this", "one", "?"]
# ::lemmas [":", ".", "how", "about", "this", "one", "?"]
(c2-3 / say-01
      :ARG1 (c2-0 / amr-unknown)
      :ARG3 (c2-2 / one
                  :mod (c2-1 / this)))

# ::snt Angry Salmond reads The Torygraph???? How very strange.
# ::tokens ["Angry", "Salmond", "reads", "The", "Torygraph", "?", "?", "?", "?", "How", "very", "strange", "."]
# ::lemmas ["Angry", "Salmond", "read", "the", "Torygraph", "?", "?", "?", "?", "how", "very", "strange", "."]
(c3-4 / multi-sentence
      :snt1 (c3-1 / read-01
                  :ARG0 (c3-6 / person
                              :name (c3-7 / name
                                          :op1 "Angry"
                                          :op2 "Salmond"))
                  :ARG1 (c3-3 / publication
                              :name (c3-2 / name
                                          :op1 "The"
                                          :op2 "Torygraph")))
      :snt2 (c3-5 / strange
                  :degree (c3-8 / very
                                :degree (c3-0 / so))))

# ::snt both. They're both arseholes.
# ::tokens ["both", ".", "They", "'re", "both", "arseholes", "."]
# ::lemmas ["both", ".", "they", "be", "both", "arsehole", "."]
(c6-3 / multi-sentence
      :snt1 (c6-0 / both)
      :snt2 (c6-2 / asshole
                  :domain (c6-1 / they
                                :mod c6-0)))

# ::snt I got /10 on 's "Who Said It? Hitler or "
# ::tokens ["I", "got", "/10", "on", "'s", "\"", "Who", "Said", "It", "?", "Hitler", "or", "\""]
# ::lemmas ["i", "get", "/10", "on", "be", "\"", "who", "say", "it", "?", "Hitler", "or", "\""]
(c7-2 / get-01
      :ARG0 (c7-3 / i)
      :ARG1 (c7-4 / slash
                  :op1 (c7-5 / percentage-entity
                             :value 10)
                  :op2 (c7-1 / percentage-entity
                             :value 10))
      :location (c7-0 / broadcast-program
                      :name (c7-6 / name
                                  :op1 "Who"
                                  :op2 "Said"
                                  :op3 "It"
                                  :op4 "? :op5 ( person :name ( name_1 :op1 ")))

# ::snt they are both nuts
# ::tokens ["they", "are", "both", "nuts"]
# ::lemmas ["they", "be", "both", "nuts"]
(c8-2 / nuts
      :domain (c8-1 / they
                    :mod (c8-0 / both)))

# ::snt heil hitler
# ::tokens ["heil", "hitler"]
# ::lemmas ["heil", "hitler"]
(c9-0 / person
      :name (c9-1 / name
                  :op1 "Heil"
                  :op2 "Hitler"))

# ::snt If said it would help stop ,these clowns would sing a different tune.
# ::tokens ["If", "said", "it", "would", "help", "stop", ",", "these", "clowns", "would", "sing", "a", "different", "tune", "."]
# ::lemmas ["if", "say", "it", "would", "help", "stop", ",", "these", "clown", "would", "sing", "a", "different", "tune", "."]
(c10-4 / sing-01
       :ARG0 (c10-6 / clown
                    :mod (c10-1 / this))
       :ARG1 (c10-2 / tune
                    :ARG1-of (c10-8 / differ-02))
       :condition (c10-0 / say-01
                         :ARG1 (c10-7 / help-01
                                      :ARG0 (c10-3 / it)
                                      :ARG1 (c10-5 / stop-01))))

# ::snt one and the same
# ::tokens ["one", "and", "the", "same"]
# ::lemmas ["one", "and", "the", "same"]
(c11-0 / and
       :op1 (c11-1 / one)
       :op2 (c11-2 / same-01))

# ::snt I fear for the world if Trump becomes the next president. I thought Kanye and Kim were dangerous but this guy is mad.
# ::tokens ["I", "fear", "for", "the", "world", "if", "Trump", "becomes", "the", "next", "president", ".", "I", "thought", "Kanye", "and", "Kim", "were", "dangerous", "but", "this", "guy", "is", "mad", "."]
# ::lemmas ["i", "fear", "for", "the", "world", "if", "Trump", "become", "the", "next", "president", ".", "i", "think", "Kanye", "and", "Kim", "be", "dangerous", "but", "this", "guy", "be", "mad", "."]
(c12-21 / multi-sentence
        :snt1 (c12-6 / fear-01
                     :ARG0 (c12-3 / i)
                     :ARG1 (c12-5 / world)
                     :condition (c12-1 / become-01
                                       :ARG1 (c12-17 / person
                                                     :name (c12-4 / name
                                                                  :op1 "Trump"))
                                       :ARG2 (c12-15 / person
                                                     :ARG0-of (c12-11 / have-org-role-91
                                                                      :ARG2 (c12-20 / president
                                                                                    :mod (c12-8 / next))))))
        :snt2 (c12-12 / contrast-01
                      :ARG1 (c12-0 / think-01
                                   :ARG0 (c12-10 / i)
                                   :ARG1 (c12-19 / dangerous
                                                 :domain (c12-13 / and
                                                                 :op1 (c12-16 / person
                                                                              :name (c12-18 / name
                                                                                            :op1 "Kanye"))
                                                                 :op2 (c12-22 / person
                                                                              :name (c12-14 / name
                                                                                            :op1 "Kim")))))
                      :ARG2 (c12-7 / mad-04
                                   :ARG1 (c12-9 / guy
                                                :mod (c12-2 / this)))))

# ::snt Muslim ISIS?????
# ::tokens ["Muslim", "ISIS", "?", "?", "?", "?", "?"]
# ::lemmas ["Muslim", "ISIS", "?", "?", "?", "?", "?"]
(c13-4 / criminal-organization
       :name (c13-3 / name
                    :op1 "Islamic"
                    :op2 "organization")
       :mod (c13-1 / religious-group
                   :name (c13-2 / name
                                :op1 "Muslim"))
       :polarity (c13-0 / amr-unknown))

# ::snt is that the idiots who choose to be a politician
# ::tokens ["is", "that", "the", "idiots", "who", "choose", "to", "be", "a", "politician"]
# ::lemmas ["be", "that", "the", "idiot", "who", "choose", "to", "be", "a", "politician"]
(c14-0 / idiot
       :ARG0-of (c14-2 / choose-01
                       :ARG1 (c14-1 / politician
                                    :domain c14-0)))

# ::snt Godwin's Law applies
# ::tokens ["Godwin", "'s", "Law", "applies"]
# ::lemmas ["Godwin", "'s", "Law", "apply"]
(c15-0 / apply-02
       :ARG1 (c15-1 / law
                    :name (c15-2 / name
                                 :op1 "Godwin's"
                                 :op2 "Law")))
