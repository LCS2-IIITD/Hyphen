# ::snt Tarantado! MT : Uber hiked prices in Sydney to "encourage more drivers to come online &amp; pick up passengers."
# ::tokens ["Tarantado", "!", "MT", ":", "Uber", "hiked", "prices", "in", "Sydney", "to", "\"", "encourage", "more", "drivers", "to", "come", "online", "&", "amp", ";", "pick", "up", "passengers", ".", "\""]
# ::lemmas ["Tarantado", "!", "MT", ":", "Uber", "hike", "price", "in", "Sydney", "to", "\"", "encourage", "more", "driver", "to", "come", "online", "&", "amp", ";", "pick", "up", "passenger", ".", "\""]
(c1-20 / multi-sentence
       :snt1 (c1-8 / company
                   :name (c1-0 / name
                               :op1 "Tarantado")
                   :location (c1-5 / state
                                   :name (c1-3 / name
                                               :op1 "Montana")))
       :snt2 (c1-7 / hike-02
                   :ARG0 (c1-13 / company
                                :name (c1-16 / name
                                             :op1 " Uber"))
                   :ARG1 (c1-2 / monetary-quantity
                               :ARG2-of (c1-15 / price-01))
                   :location (c1-4 / city
                                   :name (c1-11 / name
                                                :op1 "Sydney"))
                   :purpose (c1-10 / and
                                   :op1 (c1-19 / encourage-01
                                               :ARG0 c1-13
                                               :ARG1 (c1-12 / person
                                                            :ARG0-of (c1-17 / drive-01)
                                                            :mod (c1-6 / more))
                                               :ARG2 (c1-1 / come-01
                                                           :ARG1 c1-12
                                                           :ARG4 (c1-21 / online)))
                                   :op2 (c1-9 / amp-00
                                              :ARG1 c1-12)
                                   :op3 (c1-18 / pick-up-04
                                               :ARG0 c1-12
                                               :ARG1 (c1-14 / passenger)))))

# ::snt they're free now after the twitter outrage
# ::tokens ["they", "'re", "free", "now", "after", "the", "twitter", "outrage"]
# ::lemmas ["they", "be", "free", "now", "after", "the", "twitter", "outrage"]
(c2-6 / free-04
      :ARG1 (c2-1 / they)
      :time (c2-3 / now)
      :time (c2-0 / after
                  :op1 (c2-5 / outrage-01
                             :ARG0 (c2-4 / publication
                                         :name (c2-2 / name
                                                     :op1 "Twitter")))))

# ::snt " Capitalism: efficiency minus humanity"
# ::tokens ["\"", "Capitalism", ":", "efficiency", "minus", "humanity", "\""]
# ::lemmas ["\"", "capitalism", ":", "efficiency", "minus", "humanity", "\""]
(c3-2 / mean-01
      :ARG1 (c3-4 / capitalism)
      :ARG2 (c3-0 / and
                  :op1 (c3-1 / efficient-01)
                  :op2 (c3-3 / humanity
                             :polarity -)))

# ::snt don't surge price just pay your drivers a premium, instead of gauging the public, wake up taxi scalper!
# ::tokens ["do", "n't", "surge", "price", "just", "pay", "your", "drivers", "a", "premium", ",", "instead", "of", "gauging", "the", "public", ",", "wake", "up", "taxi", "scalper", "!"]
# ::lemmas ["do", "not", "surge", "price", "just", "pay", "your", "driver", "a", "premium", ",", "instead", "of", "gauge", "the", "public", ",", "wake", "up", "taxi", "scalper", "!"]
(c4-10 / wake-up-02
       :ARG0 (c4-4 / you)
       :ARG1 (c4-9 / person
                   :ARG0-of (c4-8 / scalp-02
                                  :ARG1 (c4-1 / taxi)))
       :ARG1-of (c4-11 / cause-01
                       :ARG0 (c4-7 / instead-of-91
                                   :ARG1 (c4-5 / pay-01
                                               :ARG0 c4-4
                                               :ARG1 (c4-0 / premium)
                                               :ARG2 (c4-6 / person
                                                           :ARG0-of (c4-3 / drive-01
                                                                          :ARG1 c4-4))
                                               :mod (c4-2 / just))
                                   :ARG2 c4-6))
       :mode imperative)

# ::snt Did the quote come from someone on the ground in Sydney. If so- callous.
# ::tokens ["Did", "the", "quote", "come", "from", "someone", "on", "the", "ground", "in", "Sydney", ".", "If", "so-", "callous", "."]
# ::lemmas ["do", "the", "quote", "come", "from", "someone", "on", "the", "ground", "in", "Sydney", ".", "if", "so-", "callous", "."]
(c5-4 / multi-sentence
      :snt1 (c5-10 / come-03
                   :ARG1 (c5-6 / quote-01)
                   :ARG2 (c5-7 / someone
                               :location (c5-3 / ground
                                               :location (c5-5 / city
                                                               :name (c5-8 / name
                                                                           :op1 "Sydney"))))
                   :polarity (c5-0 / amr-unknown))
      :snt2 (c5-9 / have-condition-91
                  :ARG2 (c5-2 / callous
                              :degree (c5-1 / so))))

# ::snt Deplorable
# ::tokens ["Deplorable"]
# ::lemmas ["deplorable"]
(c6-0 / deplorable-02)
