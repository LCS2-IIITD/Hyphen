# ::snt KFC ur a joke.Do you feed that trash to ur families?What would you do if someone treated ur family the way u do ur chickens?
# ::tokens ["KFC", "ur", "a", "joke", ".", "Do", "you", "feed", "that", "trash", "to", "ur", "families?What", "would", "you", "do", "if", "someone", "treated", "ur", "family", "the", "way", "u", "do", "ur", "chickens", "?"]
# ::lemmas ["KFC", "ur", "a", "joke", ".", "do", "you", "feed", "that", "trash", "to", "ur", "families?what", "would", "you", "do", "if", "someone", "treat", "ur", "family", "the", "way", "u", "do", "ur", "chicken", "?"]
(c1-7 / multi-sentence
      :snt1 (c1-2 / joke-01
                  :ARG2 (c1-6 / you)
                  :source (c1-13 / organization
                                 :name (c1-12 / name
                                              :op1 "KFC")))
      :snt2 (c1-15 / feed-01
                   :ARG0 (c1-3 / you)
                   :ARG1 (c1-1 / trash
                               :mod (c1-4 / that))
                   :ARG2 (c1-5 / family
                               :poss c1-3)
                   :polarity (c1-0 / amr-unknown)
                   :condition (c1-8 / treat-01
                                    :ARG0 (c1-11 / someone)
                                    :ARG1 c1-3
                                    :ARG2 (c1-14 / way
                                                 :manner-of (c1-9 / treat-01
                                                                  :ARG0 c1-3
                                                                  :ARG1 (c1-16 / chicken
                                                                               :poss c1-3))))
                   :polarity (c1-10 / amr-unknown)))

# ::snt this has been going on for ages ....
# ::tokens ["this", "has", "been", "going", "on", "for", "ages", "...."]
# ::lemmas ["this", "have", "be", "go", "on", "for", "age", "...."]
(c2-2 / go-on-15
      :ARG1 (c2-1 / this)
      :duration (c2-0 / age))

# ::snt this yo spot lmfaoooo
# ::tokens ["this", "yo", "spot", "lmfaoooo"]
# ::lemmas ["this", "yo", "spot", "lmfaoooo"]
(c3-4 / say-01
      :ARG0 (c3-3 / i)
      :ARG1 (c3-0 / spot
                  :poss (c3-2 / you)
                  :mod (c3-1 / this))
      :ARG2 c3-2)

# ::snt fuckin disgusting !!!!
# ::tokens ["fuckin", "disgusting", "!", "!", "!", "!"]
# ::lemmas ["fuckin", "disgusting", "!", "!", "!", "!"]
(c5-1 / disgust-01
      :ARG0 (c5-0 / fuck)
      :mode expressive)

# ::snt that article is about holiday turkeys from November ....
# ::tokens ["that", "article", "is", "about", "holiday", "turkeys", "from", "November", "...."]
# ::lemmas ["that", "article", "be", "about", "holiday", "turkey", "from", "November", "...."]
(c8-5 / concern-02
      :ARG0 (c8-0 / article
                  :mod (c8-1 / that))
      :ARG1 (c8-2 / turkey
                  :mod (c8-4 / holiday)
                  :time (c8-3 / date-entity
                              :month 11)))

# ::snt even if it's fake Kfc is gross as fuck anyway.
# ::tokens ["even", "if", "it", "'s", "fake", "Kfc", "is", "gross", "as", "fuck", "anyway", "."]
# ::lemmas ["even", "if", "it", "be", "fake", "Kfc", "be", "gross", "as", "fuck", "anyway", "."]
(c9-2 / gross-04
      :ARG1 (c9-3 / product
                  :name (c9-4 / name
                              :op1 "KFC"))
      :concession (c9-1 / even-if
                        :op1 (c9-5 / fake-02
                                   :ARG1 c9-3))
      :mod (c9-0 / anyway)
      :degree (c9-6 / as-fuck))

# ::snt lmaoooooooooooo
# ::tokens ["lmaoooooooooooo"]
# ::lemmas ["lmaoooooooooooo"]
(c12-0 / laugh-01
       :ARG0 (c12-1 / i)
       :manner (c12-2 / loud)
       :mode expressive)

# ::snt you would know. you ate them last night
# ::tokens ["you", "would", "know", ".", "you", "ate", "them", "last", "night"]
# ::lemmas ["you", "would", "know", ".", "you", "eat", "they", "last", "night"]
(c13-5 / multi-sentence
       :snt1 (c13-3 / know-01
                    :ARG0 (c13-4 / you))
       :snt2 (c13-2 / eat-01
                    :ARG0 (c13-1 / you)
                    :ARG1 (c13-0 / they)
                    :time (c13-8 / date-entity
                                 :dayperiod (c13-7 / night)
                                 :mod (c13-6 / yesterday))))

# ::snt Buffalo Wild Wings? Wild ass chickens
# ::tokens ["Buffalo", "Wild", "Wings", "?", "Wild", "ass", "chickens"]
# ::lemmas ["Buffalo", "Wild", "Wings", "?", "wild", "ass", "chicken"]
(c14-2 / multi-sentence
       :snt1 (c14-6 / wing
                    :mod (c14-1 / wild)
                    :location (c14-7 / city
                                     :name (c14-5 / name
                                                  :op1 "Buffalo")))
       :snt2 (c14-3 / chicken
                    :mod (c14-4 / wild
                                :mod (c14-0 / ass))))

# ::snt bruh...
# ::tokens ["bruh", "..."]
# ::lemmas ["bruh", "..."]
(c15-0 / bruh
       :mode expressive)

# ::snt you think KFC is the only one getting these chickens
# ::tokens ["you", "think", "KFC", "is", "the", "only", "one", "getting", "these", "chickens"]
# ::lemmas ["you", "think", "KFC", "be", "the", "only", "one", "get", "these", "chicken"]
(c16-0 / think-01
       :ARG0 (c16-3 / you)
       :ARG1 (c16-4 / get-01
                    :ARG0 (c16-6 / organization
                                 :name (c16-5 / name
                                              :op1 "KFC")
                                 :mod (c16-1 / only))
                    :ARG1 (c16-7 / chicken
                                 :mod (c16-2 / this))))

# ::snt poor babies!!!!! I don't eat KFC though, that's for sure!
# ::tokens ["poor", "babies", "!", "!", "!", "!", "!", "I", "do", "n't", "eat", "KFC", "though", ",", "that", "'s", "for", "sure", "!"]
# ::lemmas ["poor", "baby", "!", "!", "!", "!", "!", "i", "do", "not", "eat", "KFC", "though", ",", "that", "be", "for", "sure", "!"]
(c17-2 / multi-sentence
       :snt1 (c17-1 / baby
                    :mod (c17-6 / poor))
       :snt2 (c17-0 / eat-01
                    :ARG0 (c17-4 / i)
                    :ARG1 (c17-3 / product
                                 :name (c17-7 / name
                                              :op1 "KFC"))
                    :ARG1-of (c17-5 / sure-02
                                    :mode expressive)
                    :polarity -))

# ::snt you Vegan now for sure?
# ::tokens ["you", "Vegan", "now", "for", "sure", "?"]
# ::lemmas ["you", "vegan", "now", "for", "sure", "?"]
(c18-4 / vegan
       :polarity (c18-0 / amr-unknown)
       :domain (c18-1 / you)
       :time (c18-3 / now)
       :ARG1-of (c18-2 / sure-02))

# ::snt poor chickens! I'm so glad u don't eat that ish
# ::tokens ["poor", "chickens", "!", "I", "'m", "so", "glad", "u", "do", "n't", "eat", "that", "ish"]
# ::lemmas ["poor", "chicken", "!", "i", "be", "so", "glad", "u", "do", "not", "eat", "that", "ish"]
(c19-4 / multi-sentence
       :snt1 (c19-9 / chicken
                    :mod (c19-7 / poor))
       :snt2 (c19-3 / glad-02
                    :ARG0 (c19-1 / eat-01
                                 :ARG0 (c19-2 / you)
                                 :ARG1 (c19-0 / that)
                                 :polarity -)
                    :ARG1 (c19-5 / i)
                    :degree (c19-6 / so)
                    :mod (c19-8 / ish)))

# ::snt I love KFC omf
# ::tokens ["I", "love", "KFC", "omf"]
# ::lemmas ["i", "love", "KFC", "omf"]
(c20-4 / love-01
       :ARG0 (c20-1 / i)
       :ARG1 (c20-3 / organization
                    :name (c20-2 / name
                                 :op1 "KFC"))
       :mod (c20-0 / also))

# ::snt that doesn't mean this still doesn't happen EVERYWHERE to chickens and other animals
# ::tokens ["that", "does", "n't", "mean", "this", "still", "does", "n't", "happen", "EVERYWHERE", "to", "chickens", "and", "other", "animals"]
# ::lemmas ["that", "do", "not", "mean", "this", "still", "do", "not", "happen", "EVERYWHERE", "to", "chicken", "and", "other", "animal"]
(c21-4 / mean-01
       :ARG1 (c21-1 / that)
       :ARG2 (c21-3 / this
                    :location (c21-2 / everywhere)
                    :mod (c21-6 / still)
                    :beneficiary (c21-0 / and
                                        :op1 (c21-8 / chicken)
                                        :op2 (c21-5 / animal
                                                    :mod (c21-7 / other))))
       :polarity -)

# ::snt smh kfc is shitty food but these reports are from an obviously fake website
# ::tokens ["smh", "kfc", "is", "shitty", "food", "but", "these", "reports", "are", "from", "an", "obviously", "fake", "website"]
# ::lemmas ["smh", "kfc", "be", "shitty", "food", "but", "these", "report", "be", "from", "an", "obviously", "fake", "website"]
(c22-10 / contrast-01
        :ARG1 (c22-9 / food
                     :mod (c22-5 / shitty)
                     :domain (c22-0 / thing
                                    :name (c22-6 / name
                                                 :op1 "smh"
                                                 :op2 "kfc")))
        :ARG2 (c22-3 / be-from-91
                     :ARG1 (c22-1 / report-01
                                  :mod (c22-4 / this))
                     :ARG2 (c22-8 / website
                                  :ARG1-of (c22-2 / fake-02
                                                  :ARG1-of (c22-7 / obvious-01)))))

# ::snt if that's what makes them taste so good I hope they grow feet and become a chicktopus
# ::tokens ["if", "that", "'s", "what", "makes", "them", "taste", "so", "good", "I", "hope", "they", "grow", "feet", "and", "become", "a", "chicktopus"]
# ::lemmas ["if", "that", "be", "what", "make", "they", "taste", "so", "good", "i", "hope", "they", "grow", "foot", "and", "become", "a", "chicktopus"]
(c23-12 / have-condition-91
        :ARG1 (c23-8 / hope-01
                     :ARG0 (c23-9 / i)
                     :ARG1 (c23-0 / and
                                  :op1 (c23-5 / grow-03
                                              :ARG1 (c23-1 / they
                                                           :part (c23-11 / foot
                                                                         :ARG2-of c23-5)))
                                  :op2 (c23-2 / become-01
                                              :ARG1 c23-1
                                              :ARG2 (c23-13 / chicktopus))))
        :ARG2 (c23-6 / make-02
                     :ARG0 (c23-3 / that)
                     :ARG1 (c23-4 / taste-02
                                  :ARG1 c23-1
                                  :ARG2 (c23-7 / good-02
                                               :ARG1 c23-1
                                               :degree (c23-10 / so)))))

# ::snt the further you delve into this life the harder it is to get out
# ::tokens ["the", "further", "you", "delve", "into", "this", "life", "the", "harder", "it", "is", "to", "get", "out"]
# ::lemmas ["the", "far", "you", "delve", "into", "this", "life", "the", "hard", "it", "be", "to", "get", "out"]
(c24-10 / correlate-91
        :ARG1 (c24-4 / more
                     :ARG3-of (c24-11 / have-degree-91
                                      :ARG1 (c24-12 / delve-01
                                                    :ARG0 (c24-3 / you)
                                                    :ARG1 (c24-9 / life
                                                                 :mod (c24-1 / this))
                                                    :extent (c24-0 / further))
                                      :ARG2 (c24-6 / hard-02
                                                   :ARG1 (c24-5 / get-05
                                                                :ARG1 c24-3
                                                                :ARG2 (c24-8 / out)))))
        :ARG2 (c24-2 / more
                     :ARG3-of (c24-7 / have-degree-91
                                     :ARG1 c24-5
                                     :ARG2 c24-6)))

# ::snt and also now8news is a fake news website
# ::tokens ["and", "also", "now8news", "is", "a", "fake", "news", "website"]
# ::lemmas ["and", "also", "now8news", "be", "a", "fake", "news", "website"]
(c25-0 / and
       :op2 (c25-3 / website
                   :domain (c25-2 / now8news)
                   :mod (c25-1 / news
                               :ARG1-of (c25-4 / fake-02))
                   :mod (c25-5 / also)))

# ::snt good thing I don't eat the food there
# ::tokens ["good", "thing", "I", "do", "n't", "eat", "the", "food", "there"]
# ::lemmas ["good", "thing", "i", "do", "not", "eat", "the", "food", "there"]
(c26-2 / good-02
       :ARG1 (c26-1 / eat-01
                    :ARG0 (c26-3 / i)
                    :ARG1 (c26-4 / food
                                 :location (c26-0 / there))
                    :polarity -))

# ::snt they're going to fucking burn all the turkeys that's so inhumane
# ::tokens ["they", "'re", "going", "to", "fucking", "burn", "all", "the", "turkeys", "that", "'s", "so", "inhumane"]
# ::lemmas ["they", "be", "go", "to", "fucking", "burn", "all", "the", "turkey", "that", "be", "so", "inhumane"]
(c27-2 / burn-01
       :ARG0 (c27-1 / they)
       :ARG1 (c27-3 / turkey
                    :mod (c27-0 / all))
       :mod (c27-6 / fucking)
       :ARG1-of (c27-7 / have-degree-91
                       :ARG2 (c27-4 / humane
                                    :polarity -)
                       :ARG3 (c27-5 / so)))

# ::snt Jesus
# ::tokens ["Jesus"]
# ::lemmas ["Jesus"]
(c28-0 / person
       :name (c28-1 / name
                    :op1 "Jesus")
       :mode expressive)

# ::snt Was that site or ?
# ::tokens ["Was", "that", "site", "or", "?"]
# ::lemmas ["be", "that", "site", "or", "?"]
(c29-0 / amr-choice
       :op1 (c29-2 / site
                   :mod (c29-1 / that))
       :op2 (c29-3 / event
                   :mod c29-1))

# ::snt We believe you Fast food is very safe...NOT
# ::tokens ["We", "believe", "you", "Fast", "food", "is", "very", "safe", "...", "NOT"]
# ::lemmas ["we", "believe", "you", "fast", "food", "be", "very", "safe", "...", "not"]
(c30-2 / multi-sentence
       :snt1 (c30-1 / believe-01
                    :ARG0 (c30-5 / we)
                    :ARG1 (c30-3 / safe-01
                                 :ARG0 (c30-6 / food
                                              :ARG1-of (c30-0 / fast-02))
                                 :degree (c30-4 / very)))
       :snt2 (c30-7 / have-polarity-91
                    :ARG2 -))

# ::snt Chicken Fried Fake No, the FDA hasn't confiscated mutated chickens from farms belonging to KFC
# ::tokens ["Chicken", "Fried", "Fake", "No", ",", "the", "FDA", "has", "n't", "confiscated", "mutated", "chickens", "from", "farms", "belonging", "to", "KFC"]
# ::lemmas ["Chicken", "Fried", "Fake", "no", ",", "the", "FDA", "have", "not", "confiscate", "mutate", "chicken", "from", "farm", "belong", "to", "KFC"]
(c32-10 / confiscate-01
        :ARG0 (c32-5 / government-organization
                     :name (c32-7 / name
                                  :op1 "FDA"))
        :ARG1 (c32-6 / chicken
                     :ARG1-of (c32-4 / mutate-01))
        :ARG2 (c32-9 / farm
                     :ARG0-of (c32-1 / belong-01
                                     :ARG1 (c32-8 / organization
                                                  :name (c32-2 / name
                                                               :op1 "KFC"))))
        :concession (c32-0 / fake-02
                           :ARG1 (c32-3 / chicken))
        :polarity -)

# ::snt that's the nigga that fought Peter
# ::tokens ["that", "'s", "the", "nigga", "that", "fought", "Peter"]
# ::lemmas ["that", "be", "the", "nigga", "that", "fight", "Peter"]
(c33-4 / fight-01
       :ARG0 (c33-3 / nigga
                    :domain (c33-0 / that))
       :ARG1 (c33-2 / person
                    :name (c33-1 / name
                                 :op1 "Peter")))

# ::snt guess so
# ::tokens ["guess", "so"]
# ::lemmas ["guess", "so"]
(c34-0 / guess-01
       :ARG1 (c34-1 / so))

# ::snt whoa. Did someone make them take it down?
# ::tokens ["whoa", ".", "Did", "someone", "make", "them", "take", "it", "down", "?"]
# ::lemmas ["whoa", ".", "do", "someone", "make", "they", "take", "it", "down", "?"]
(c35-3 / make-02
       :ARG0 (c35-5 / someone)
       :ARG1 (c35-1 / take-down-22
                    :ARG0 (c35-2 / they)
                    :ARG1 (c35-4 / it))
       :polarity (c35-0 / amr-unknown)
       :mod (c35-6 / whoa
                   :mode expressive))

# ::snt bro that looks sick.
# ::tokens ["bro", "that", "looks", "sick", "."]
# ::lemmas ["bro", "that", "look", "sick", "."]
(c36-2 / person
       :name (c36-3 / name
                    :op1 "bro")
       :ARG0-of (c36-0 / look-02
                       :ARG1 (c36-1 / sick-05
                                    :ARG1 c36-2)))

# ::snt look what you just ate.
# ::tokens ["look", "what", "you", "just", "ate", "."]
# ::lemmas ["look", "what", "you", "just", "eat", "."]
(c38-4 / look-01
       :ARG0 (c38-3 / you)
       :ARG1 (c38-0 / thing
                    :ARG1-of (c38-2 / eat-01
                                    :ARG0 c38-3
                                    :time (c38-1 / just)))
       :mode imperative)

# ::snt is sueing three chinese companies. Supposedly it's not True.
# ::tokens ["is", "sueing", "three", "chinese", "companies", ".", "Supposedly", "it", "'s", "not", "True", "."]
# ::lemmas ["be", "sue", "three", "chinese", "company", ".", "supposedly", "it", "be", "not", "true", "."]
(c39-2 / multi-sentence
       :snt1 (c39-5 / sue-02
                    :ARG1 (c39-7 / company
                                 :mod (c39-3 / country
                                             :name (c39-6 / name
                                                          :op1 "China"))
                                 :quant 3))
       :snt2 (c39-1 / true-01
                    :ARG1 (c39-4 / it)
                    :ARG1-of (c39-0 / suppose-01)
                    :polarity -))

# ::snt yooo y'all dirty asf
# ::tokens ["yooo", "y'", "all", "dirty", "asf"]
# ::lemmas ["yooo", "you", "all", "dirty", "asf"]
(c40-1 / dirty-02
       :ARG1 (c40-2 / you
                    :mod (c40-0 / all))
       :degree (c40-3 / so)
       :mod (c40-4 / asf))

# ::snt oh mt god
# ::tokens ["oh", "mt", "god"]
# ::lemmas ["oh", "mt", "god"]
(c41-1 / person
       :name (c41-2 / name
                    :op1 "God")
       :mod (c41-0 / oh
                   :mode expressive))

# ::snt these chickens wouldn't be on the farms for grow out b/c they would be culled at the hatchery this is probably false
# ::tokens ["these", "chickens", "would", "n't", "be", "on", "the", "farms", "for", "grow", "out", "b", "/", "c", "they", "would", "be", "culled", "at", "the", "hatchery", "this", "is", "probably", "false"]
# ::lemmas ["these", "chicken", "would", "not", "be", "on", "the", "farm", "for", "grow", "out", "b", "/", "c", "they", "would", "be", "cull", "at", "the", "hatchery", "this", "be", "probably", "false"]
(c42-0 / and
       :op1 (c42-3 / be-located-at-91
                   :ARG1 (c42-9 / chicken
                                :mod (c42-1 / this))
                   :ARG2 (c42-7 / farm)
                   :purpose (c42-4 / grow-out-03
                                   :ARG1 c42-9)
                   :polarity -)
       :op2 (c42-5 / cull-01
                   :ARG1 c42-9
                   :location (c42-8 / hatchery))
       :domain (c42-2 / false
                      :mod (c42-6 / probable)))

# ::snt WOW!
# ::tokens ["WOW", "!"]
# ::lemmas ["WOW", "!"]
(c43-0 / wow
       :mode expressive)

# ::snt apparently it's false
# ::tokens ["apparently", "it", "'s", "false"]
# ::lemmas ["apparently", "it", "be", "false"]
(c44-2 / false
       :domain (c44-1 / it)
       :ARG1-of (c44-0 / appear-02))

# ::snt bro you're so funny why can't I be like you please teach me your ways
# ::tokens ["bro", "you", "'re", "so", "funny", "why", "ca", "n't", "I", "be", "like", "you", "please", "teach", "me", "your", "ways"]
# ::lemmas ["bro", "you", "be", "so", "funny", "why", "can", "not", "i", "be", "like", "you", "please", "teach", "i", "your", "way"]
(c46-5 / say-01
       :ARG1 (c46-8 / cause-01
                    :ARG0 (c46-0 / amr-unknown)
                    :ARG1 (c46-6 / possible-01
                                 :ARG1 (c46-1 / resemble-01
                                              :ARG1 (c46-4 / i)
                                              :ARG2 (c46-2 / you))
                                 :polarity -))
       :ARG2 (c46-3 / person
                    :name (c46-7 / name
                                 :op1 "bro")))

# ::snt fucking drawlin
# ::tokens ["fucking", "drawlin"]
# ::lemmas ["fucking", "drawlin"]
(c47-1 / drawlin
       :mod (c47-0 / fucking
                   :mode expressive))

# ::snt holy shit this is some seriously funked up post natural chicken
# ::tokens ["holy", "shit", "this", "is", "some", "seriously", "funked", "up", "post", "natural", "chicken"]
# ::lemmas ["holy", "shit", "this", "be", "some", "seriously", "funk", "up", "post", "natural", "chicken"]
(c49-7 / fun-up-02
       :ARG1 (c49-1 / this
                    :ARG1-of (c49-4 / post-01
                                    :ARG2 (c49-2 / person
                                                 :name (c49-5 / name
                                                              :op1 "Natural"
                                                              :op2 "Chicken"))))
       :ARG1-of (c49-3 / serious-02)
       :mod (c49-0 / shit
                   :mod (c49-8 / holy)
                   :mode expressive)
       :mod (c49-6 / some))

# ::snt real?
# ::tokens ["real", "?"]
# ::lemmas ["real", "?"]
(c50-1 / real-04
       :polarity (c50-0 / amr-unknown))
