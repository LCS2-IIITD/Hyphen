# ::snt : Cops who arrested Dylann Roof treated him to a Burger King :/
# ::tokens [":", "Cops", "who", "arrested", "Dylann", "Roof", "treated", "him", "to", "a", "Burger", "King", ":/"]
# ::lemmas [":", "cop", "who", "arrest", "Dylann", "Roof", "treat", "he", "to", "a", "Burger", "King", ":/"]
(c1-1 / treat-01
      :ARG0 (c1-6 / cop
                  :ARG0-of (c1-0 / arrest-01
                                 :ARG1 (c1-4 / person
                                             :name (c1-5 / name
                                                         :op1 "Dylann"
                                                         :op2 "Roof")
                                             :ARG1-of c1-1)))
      :ARG2 (c1-3 / company
                  :name (c1-2 / name
                              :op1 "Burger"
                              :op2 "King")))

# ::snt I'm sorry I don't care America is a very racist place point blank period! This is crazy burger king?? For killing people! Wow
# ::tokens ["I", "'m", "sorry", "I", "do", "n't", "care", "America", "is", "a", "very", "racist", "place", "point", "blank", "period", "!", "This", "is", "crazy", "burger", "king", "?", "?", "For", "killing", "people", "!", "Wow"]
# ::lemmas ["i", "be", "sorry", "i", "do", "not", "care", "America", "be", "a", "very", "racist", "place", "point", "blank", "period", "!", "this", "be", "crazy", "burger", "king", "?", "?", "for", "kill", "people", "!", "wow"]
(c2-21 / multi-sentence
       :snt1 (c2-12 / sorry-01
                    :ARG1 (c2-3 / i)
                    :ARG2 (c2-14 / care-01
                                 :ARG0 c2-3
                                 :ARG1 (c2-19 / place
                                              :mod (c2-7 / racist
                                                         :degree (c2-5 / very))
                                              :domain (c2-17 / country
                                                             :name (c2-4 / name
                                                                         :op1 "America"))
                                              :mod (c2-16 / period
                                                          :mod (c2-20 / point
                                                                      :mod (c2-1 / blank)))))
                    :polarity -)
       :snt2 (c2-9 / crazy-03
                   :ARG1 (c2-18 / person
                                :mod (c2-0 / this)
                                :ARG0-of (c2-13 / have-org-role-91
                                                :ARG1 (c2-11 / burger)
                                                :ARG2 (c2-10 / king)))
                   :polarity (c2-15 / amr-unknown)
                   :ARG1-of (c2-8 / cause-01
                                  :ARG0 (c2-2 / kill-01
                                              :ARG0 c2-18
                                              :ARG1 (c2-22 / person))))
       :snt3 (c2-6 / wow
                   :mode expressive))

# ::snt I can't believe this!
# ::tokens ["I", "ca", "n't", "believe", "this", "!"]
# ::lemmas ["i", "can", "not", "believe", "this", "!"]
(c3-3 / possible-01
      :ARG1 (c3-0 / believe-01
                  :ARG0 (c3-2 / i)
                  :ARG1 (c3-1 / this))
      :polarity -)

# ::snt : Cops who arrested Dylann Roof treated him to a Burger King , Has to be bants
# ::tokens [":", "Cops", "who", "arrested", "Dylann", "Roof", "treated", "him", "to", "a", "Burger", "King", ",", "Has", "to", "be", "bants"]
# ::lemmas [":", "cop", "who", "arrest", "Dylann", "Roof", "treat", "he", "to", "a", "Burger", "King", ",", "have", "to", "be", "bant"]
(c4-5 / infer-01
      :ARG1 (c4-2 / bant
                  :domain (c4-8 / cop
                                :ARG0-of (c4-0 / arrest-01
                                               :ARG1 (c4-6 / person
                                                           :name (c4-7 / name
                                                                       :op1 "Dylann"
                                                                       :op2 "Roof")))
                                :ARG0-of (c4-1 / treat-01
                                               :ARG1 c4-6
                                               :ARG2 (c4-4 / company
                                                           :name (c4-3 / name
                                                                       :op1 "Burger"
                                                                       :op2 "King"))))))

# ::snt Blur murderer's face. Isn't newsworthy, doesn't add to story. You're giving him glory
# ::tokens ["Blur", "murderer", "'s", "face", ".", "Is", "n't", "newsworthy", ",", "does", "n't", "add", "to", "story", ".", "You", "'re", "giving", "him", "glory"]
# ::lemmas ["Blur", "murderer", "'s", "face", ".", "be", "not", "newsworthy", ",", "do", "not", "add", "to", "story", ".", "you", "be", "give", "he", "glory"]
(c5-4 / multi-sentence
      :snt1 (c5-10 / face
                   :part-of (c5-8 / person
                                  :ARG0-of (c5-1 / murder-01)
                                  :mod (c5-2 / blur)))
      :snt2 (c5-0 / and
                  :op1 (c5-9 / newsworthy
                             :polarity -)
                  :op2 (c5-12 / add-02
                              :ARG2 (c5-7 / story)
                              :polarity -))
      :snt3 (c5-5 / give-01
                  :ARG0 (c5-3 / you)
                  :ARG1 (c5-6 / glory)
                  :ARG2 (c5-11 / he)))

# ::snt but who does he work for ?
# ::tokens ["but", "who", "does", "he", "work", "for", "?"]
# ::lemmas ["but", "who", "do", "he", "work", "for", "?"]
(c6-3 / contrast-01
      :ARG2 (c6-1 / work-01
                  :ARG0 (c6-2 / he)
                  :ARG2 (c6-0 / amr-unknown)))

# ::snt wth
# ::tokens ["wth"]
# ::lemmas ["wth"]
(c7-1 / thing
      :mod (c7-0 / last))

# ::snt Would be surprised if he hadn't given police have statutory duty to feed prisoners. &lthrug&gt; Non story.
# ::tokens ["Would", "be", "surprised", "if", "he", "had", "n't", "given", "police", "have", "statutory", "duty", "to", "feed", "prisoners", ".", "&", "lthrug&gt", ";", "Non", "story", "."]
# ::lemmas ["would", "be", "surprised", "if", "he", "have", "not", "give", "police", "have", "statutory", "duty", "to", "feed", "prisoner", ".", "&", "lthrug&gt", ";", "Non", "story", "."]
(c8-1 / multi-sentence
      :snt1 (c8-6 / surprise-01
                  :ARG0 (c8-10 / have-condition-91
                               :ARG1 (c8-2 / give-01
                                           :ARG0 (c8-4 / he)
                                           :ARG1 (c8-11 / duty
                                                        :mod (c8-8 / law)
                                                        :purpose (c8-9 / feed-01
                                                                       :ARG0 (c8-7 / police
                                                                                   :ARG2 (c8-3 / person
                                                                                               :ARG1-of (c8-5 / imprison-01))
                                                                                   :ARG2-of c8-2)))
                                           :polarity -)))
      :snt2 (c8-0 / story
                  :polarity -))

# ::snt One serving of justice coming right up...
# ::tokens ["One", "serving", "of", "justice", "coming", "right", "up", "..."]
# ::lemmas ["One", "serve", "of", "justice", "come", "right", "up", "..."]
(c9-2 / come-up-13
      :ARG1 (c9-1 / serve-01
                  :ARG1 (c9-3 / justice)
                  :quant 1)
      :mod (c9-0 / right))

# ::snt what makes one humane hate so much when he is in a room full of love!
# ::tokens ["what", "makes", "one", "humane", "hate", "so", "much", "when", "he", "is", "in", "a", "room", "full", "of", "love", "!"]
# ::lemmas ["what", "make", "one", "humane", "hate", "so", "much", "when", "he", "be", "in", "a", "room", "full", "of", "love", "!"]
(c10-4 / make-02
       :ARG0 (c10-0 / amr-unknown)
       :ARG1 (c10-10 / hate-01
                     :ARG0 (c10-7 / one)
                     :mod (c10-5 / humane)
                     :degree (c10-2 / much
                                    :degree (c10-6 / so)))
       :condition (c10-3 / be-located-at-91
                         :ARG1 c10-7
                         :ARG2 (c10-1 / room
                                      :ARG1-of (c10-9 / full-09
                                                      :ARG2 (c10-8 / love-01)))))

# ::snt Hi, I invite you to get Burger King lunch (worth $1000) for a year! Take your chance now at . Good luck!
# ::tokens ["Hi", ",", "I", "invite", "you", "to", "get", "Burger", "King", "lunch", "(", "worth", "$", "1000", ")", "for", "a", "year", "!", "Take", "your", "chance", "now", "at", ".", "Good", "luck", "!"]
# ::lemmas ["hi", ",", "i", "invite", "you", "to", "get", "Burger", "King", "lunch", "(", "worth", "$", "1000", ")", "for", "a", "year", "!", "take", "your", "chance", "now", "at", ".", "good", "luck", "!"]
(c11-19 / multi-sentence
        :snt1 (c11-15 / and
                      :op1 (c11-13 / hi)
                      :op2 (c11-3 / invite-01
                                  :ARG0 (c11-12 / i)
                                  :ARG1 (c11-18 / you)
                                  :ARG2 (c11-9 / get-01
                                               :ARG0 c11-18
                                               :ARG1 (c11-11 / lunch
                                                             :source (c11-14 / company
                                                                             :name (c11-4 / name
                                                                                          :op1 "Burger"
                                                                                          :op2 "King"))
                                                             :ARG1-of (c11-5 / worth-01
                                                                             :ARG2 (c11-7 / monetary-quantity
                                                                                          :unit (c11-17 / dollar)
                                                                                          :quant 1000)))
                                               :duration (c11-0 / temporal-quantity
                                                                :unit (c11-1 / year)
                                                                :quant 1))))
        :snt2 (c11-2 / take-01
                     :ARG0 c11-18
                     :ARG1 (c11-16 / chance-02
                                   :ARG0 c11-18
                                   :ARG1 c11-11)
                     :time (c11-8 / now)
                     :mode imperative)
        :snt3 (c11-6 / luck
                     :ARG1-of (c11-10 / good-02)))

# ::snt He needed a few "waffles" not Burger King.
# ::tokens ["He", "needed", "a", "few", "\"", "waffles", "\"", "not", "Burger", "King", "."]
# ::lemmas ["he", "need", "a", "few", "\"", "waffle", "\"", "not", "Burger", "King", "."]
(c12-7 / contrast-01
       :ARG1 (c12-2 / need-01
                    :ARG0 (c12-6 / he)
                    :ARG1 (c12-4 / wafer
                                 :quant (c12-5 / few)))
       :ARG2 (c12-0 / need-01
                    :ARG0 c12-6
                    :ARG1 (c12-1 / company
                                 :name (c12-3 / name
                                              :op1 "Burger"
                                              :op2 "King"))
                    :polarity -))

# ::snt not at all what I said, but okay
# ::tokens ["not", "at", "all", "what", "I", "said", ",", "but", "okay"]
# ::lemmas ["not", "at", "all", "what", "i", "say", ",", "but", "okay"]
(c13-5 / contrast-01
       :ARG1 (c13-1 / thing
                    :ARG1-of (c13-3 / say-01
                                    :ARG0 (c13-2 / i))
                    :mod (c13-0 / at-all
                                :polarity -))
       :ARG2 (c13-4 / okay-04))

# ::snt I don't think it's a joke
# ::tokens ["I", "do", "n't", "think", "it", "'s", "a", "joke"]
# ::lemmas ["i", "do", "not", "think", "it", "be", "a", "joke"]
(c14-1 / think-01
       :ARG0 (c14-0 / i)
       :ARG1 (c14-3 / joke-01
                    :ARG2 (c14-2 / it))
       :polarity -)

# ::snt amazing what happens when you don't get into a firefight with the police or resist arrest
# ::tokens ["amazing", "what", "happens", "when", "you", "do", "n't", "get", "into", "a", "firefight", "with", "the", "police", "or", "resist", "arrest"]
# ::lemmas ["amazing", "what", "happen", "when", "you", "do", "not", "get", "into", "a", "firefight", "with", "the", "police", "or", "resist", "arrest"]
(c15-0 / amaze-01
       :ARG0 (c15-2 / event
                    :condition (c15-7 / or
                                      :op1 (c15-5 / get-05
                                                  :ARG1 (c15-4 / you)
                                                  :ARG2 (c15-8 / fight-01
                                                               :ARG0 c15-4
                                                               :ARG1 (c15-6 / police)
                                                               :mod (c15-3 / fire))
                                                  :polarity -)
                                      :op2 (c15-1 / resist-01
                                                  :ARG0 c15-4
                                                  :ARG1 (c15-9 / arrest-01
                                                               :ARG1 c15-4)
                                                  :polarity -))))

# ::snt indeed
# ::tokens ["indeed"]
# ::lemmas ["indeed"]
(c16-0 / indeed)

# ::snt ...treated him like every other arrested person, might be a more accurate but less sensational headline.
# ::tokens ["...", "treated", "him", "like", "every", "other", "arrested", "person", ",", "might", "be", "a", "more", "accurate", "but", "less", "sensational", "headline", "."]
# ::lemmas ["...", "treat", "he", "like", "every", "other", "arrest", "person", ",", "might", "be", "a", "more", "accurate", "but", "less", "sensational", "headline", "."]
(c17-8 / possible-01
       :ARG1 (c17-13 / have-degree-91
                     :ARG1 (c17-1 / treat-01
                                  :ARG1 (c17-6 / he)
                                  :ARG2 (c17-2 / resemble-01
                                               :ARG2 (c17-4 / person
                                                            :mod (c17-3 / every)
                                                            :mod (c17-10 / other)
                                                            :ARG1-of (c17-0 / arrest-01))))
                     :ARG2 (c17-14 / accurate)
                     :ARG3 (c17-5 / more)
                     :ARG4 (c17-7 / headline
                                  :ARG1-of (c17-11 / have-degree-91
                                                   :ARG2 (c17-9 / sensational)
                                                   :ARG3 (c17-12 / less)))))

# ::snt Did they take him to a spa ? no ? police brutality knows no limits !
# ::tokens ["Did", "they", "take", "him", "to", "a", "spa", "?", "no", "?", "police", "brutality", "knows", "no", "limits", "!"]
# ::lemmas ["do", "they", "take", "he", "to", "a", "spa", "?", "no", "?", "police", "brutality", "know", "no", "limit", "!"]
(c18-5 / multi-sentence
       :snt1 (c18-1 / take-01
                    :polarity (c18-0 / amr-unknown)
                    :ARG0 (c18-3 / they)
                    :ARG1 (c18-9 / he)
                    :ARG3 (c18-6 / spa))
       :snt2 (c18-4 / know-02
                    :ARG0 (c18-2 / brutalize-01
                                 :ARG0 (c18-7 / police))
                    :ARG1 (c18-8 / limit-01
                                 :polarity -)))

# ::snt Exposing fault lines we thought were long buried.Read comments v. interesting
# ::tokens ["Exposing", "fault", "lines", "we", "thought", "were", "long", "buried", ".", "Read", "comments", "v.", "interesting"]
# ::lemmas ["expose", "fault", "line", "we", "think", "be", "long", "bury", ".", "read", "comment", "v.", "interesting"]
(c19-6 / multi-sentence
       :snt1 (c19-3 / expose-01
                    :ARG1 (c19-10 / line
                                  :mod (c19-11 / fault)
                                  :ARG1-of (c19-4 / bury-01
                                                  :ARG1-of (c19-1 / long-03)
                                                  :ARG1-of (c19-0 / think-01
                                                                  :ARG0 (c19-9 / we)))))
       :snt2 (c19-2 / read-01
                    :ARG0 (c19-5 / you)
                    :ARG1 (c19-8 / versus
                                 :op1 (c19-12 / comment-01)
                                 :op2 (c19-7 / interest-01))
                    :mode imperative))

# ::snt disturbing... Just about every aspect of this tragedy
# ::tokens ["disturbing", "...", "Just", "about", "every", "aspect", "of", "this", "tragedy"]
# ::lemmas ["disturb", "...", "just", "about", "every", "aspect", "of", "this", "tragedy"]
(c20-0 / and
       :op1 (c20-4 / disturb-01)
       :op2 (c20-6 / aspect
                   :mod (c20-3 / every
                               :mod (c20-2 / just))
                   :part-of (c20-1 / tragedy
                                   :mod (c20-5 / this))))

# ::snt I am sure this occurs universally for every suspect apprehended though. WTF?
# ::tokens ["I", "am", "sure", "this", "occurs", "universally", "for", "every", "suspect", "apprehended", "though", ".", "WTF", "?"]
# ::lemmas ["i", "be", "sure", "this", "occur", "universally", "for", "every", "suspect", "apprehend", "though", ".", "WTF", "?"]
(c21-5 / multi-sentence
       :snt1 (c21-7 / sure-02
                    :ARG0 (c21-6 / i)
                    :ARG1 (c21-4 / be-temporally-at-91
                                 :ARG1 (c21-2 / this)
                                 :ARG2 (c21-8 / universally)
                                 :beneficiary (c21-9 / person
                                                     :ARG2-of (c21-0 / suspect-01)
                                                     :mod (c21-3 / every)
                                                     :ARG1-of (c21-1 / apprehend-01)))
                    :ARG1-of (c21-11 / have-concession-91))
       :snt2 (c21-12 / amr-unknown
                     :mod (c21-10 / fuck
                                  :mode expressive)))

# ::snt what did the victims get to eat before THAT shot them NOTHING
# ::tokens ["what", "did", "the", "victims", "get", "to", "eat", "before", "THAT", "shot", "them", "NOTHING"]
# ::lemmas ["what", "do", "the", "victim", "get", "to", "eat", "before", "that", "shoot", "they", "nothing"]
(c22-4 / get-22
       :ARG0 (c22-7 / victim)
       :ARG1 (c22-2 / eat-01
                    :ARG0 c22-7
                    :ARG1 (c22-0 / amr-unknown)
                    :time (c22-3 / before
                                 :op1 (c22-5 / shoot-01
                                             :ARG0 (c22-1 / that)
                                             :ARG1 c22-7
                                             :ARG2 (c22-6 / nothing)))))

# ::snt do they do that wen they arrest black murderers?
# ::tokens ["do", "they", "do", "that", "wen", "they", "arrest", "black", "murderers", "?"]
# ::lemmas ["do", "they", "do", "that", "wen", "they", "arrest", "black", "murderer", "?"]
(c23-4 / do-02
       :ARG0 (c23-1 / they)
       :ARG1 (c23-3 / that)
       :polarity (c23-0 / amr-unknown)
       :condition (c23-7 / arrest-01
                         :ARG0 c23-1
                         :ARG1 (c23-6 / person
                                      :ARG0-of (c23-5 / murder-01)
                                      :ARG1-of (c23-2 / black-05))))

# ::snt This is insane!
# ::tokens ["This", "is", "insane", "!"]
# ::lemmas ["this", "be", "insane", "!"]
(c24-1 / insane
       :domain (c24-0 / this))

# ::snt ": Cops who arrested Dylann Roof treated him to a Burger King "
# ::tokens ["\"", ":", "Cops", "who", "arrested", "Dylann", "Roof", "treated", "him", "to", "a", "Burger", "King", "\""]
# ::lemmas ["\"", ":", "cop", "who", "arrest", "Dylann", "Roof", "treat", "he", "to", "a", "Burger", "King", "\""]
(c25-1 / treat-01
       :ARG0 (c25-6 / cop
                    :ARG0-of (c25-0 / arrest-01
                                    :ARG1 (c25-4 / person
                                                 :name (c25-5 / name
                                                              :op1 "Dylann"
                                                              :op2 "Roof")
                                                 :ARG1-of c25-1)))
       :ARG2 (c25-3 / company
                    :name (c25-2 / name
                                 :op1 "Burger"
                                 :op2 "King")))

# ::snt I hope they poured him a glass of wine and treated him to some ice cream as well.
# ::tokens ["I", "hope", "they", "poured", "him", "a", "glass", "of", "wine", "and", "treated", "him", "to", "some", "ice", "cream", "as", "well", "."]
# ::lemmas ["i", "hope", "they", "pour", "he", "a", "glass", "of", "wine", "and", "treat", "he", "to", "some", "ice", "cream", "as", "well", "."]
(c26-11 / hope-01
        :ARG0 (c26-6 / i)
        :ARG1 (c26-0 / and
                     :op1 (c26-8 / pour-01
                                 :ARG0 (c26-1 / they)
                                 :ARG1 (c26-10 / wine
                                               :quant (c26-9 / volume-quantity
                                                             :unit (c26-4 / glass)
                                                             :quant 1))
                                 :ARG2 (c26-5 / he))
                     :op2 (c26-3 / treat-01
                                 :ARG0 c26-1
                                 :ARG1 c26-5
                                 :ARG2 (c26-2 / ice
                                              :quant (c26-7 / some))
                                 :mod (c26-12 / as-well))))

# ::snt keep him fit and well for the big drop or light up
# ::tokens ["keep", "him", "fit", "and", "well", "for", "the", "big", "drop", "or", "light", "up"]
# ::lemmas ["keep", "he", "fit", "and", "well", "for", "the", "big", "drop", "or", "light", "up"]
(c27-3 / or
       :op1 (c27-1 / keep-02
                   :ARG0 (c27-2 / you)
                   :ARG1 (c27-6 / fit-05
                                :ARG1 (c27-7 / he)
                                :ARG1-of (c27-4 / well-09)
                                :purpose (c27-8 / drop-01
                                                :mod (c27-0 / big)))
                   :mode imperative)
       :op2 (c27-5 / light-up-08
                   :ARG0 c27-2
                   :ARG1 c27-7
                   :mode imperative))

# ::snt joke? I hope so.
# ::tokens ["joke", "?", "I", "hope", "so", "."]
# ::lemmas ["joke", "?", "i", "hope", "so", "."]
(c29-2 / hope-01
       :polarity (c29-0 / amr-unknown)
       :ARG0 (c29-1 / i)
       :ARG1 (c29-3 / so))

# ::snt I would be more upset if he got carribean food tbh
# ::tokens ["I", "would", "be", "more", "upset", "if", "he", "got", "carribean", "food", "tbh"]
# ::lemmas ["i", "would", "be", "more", "upset", "if", "he", "get", "carribean", "food", "tbh"]
(c30-3 / upset-01
       :ARG0 (c30-0 / get-01
                    :ARG0 (c30-8 / he)
                    :ARG1 (c30-7 / food
                                 :source (c30-9 / country
                                                :name (c30-5 / name
                                                             :op1 "Carribean"))))
       :ARG1 (c30-4 / i)
       :condition (c30-2 / honest-01
                         :ARG0 c30-4)
       :ARG2-of (c30-6 / have-degree-91
                       :ARG1 c30-4
                       :ARG3 (c30-1 / more)))

# ::snt Ridiculous
# ::tokens ["Ridiculous"]
# ::lemmas ["ridiculous"]
(c31-0 / ridiculous-02)

# ::snt punishment before trial.
# ::tokens ["punishment", "before", "trial", "."]
# ::lemmas ["punishment", "before", "trial", "."]
(c32-2 / punish-01
       :time (c32-0 / before
                    :op1 (c32-1 / try-02)))

# ::snt How dare they
# ::tokens ["How", "dare", "they"]
# ::lemmas ["how", "dare", "they"]
(c33-2 / dare-01
       :ARG1 (c33-1 / they)
       :manner (c33-0 / amr-unknown))
