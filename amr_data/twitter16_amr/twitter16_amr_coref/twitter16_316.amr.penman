# ::snt talk to brian for me. "Heaven is a continuation of the Sabbath so Chick-fil-A may never be open in heaven" -
# ::tokens ["talk", "to", "brian", "for", "me", ".", "\"", "Heaven", "is", "a", "continuation", "of", "the", "Sabbath", "so", "Chick", "-", "fil", "-", "A", "may", "never", "be", "open", "in", "heaven", "\"", "-"]
# ::lemmas ["talk", "to", "brian", "for", "i", ".", "\"", "Heaven", "be", "a", "continuation", "of", "the", "Sabbath", "so", "Chick", "-", "fil", "-", "A", "may", "never", "be", "open", "in", "heaven", "\"", "-"]
(c1-5 / multi-sentence
      :snt1 (c1-0 / talk-01
                  :ARG0 (c1-4 / you)
                  :ARG2 (c1-11 / person
                               :name (c1-12 / name
                                            :op1 "Brian"))
                  :beneficiary (c1-9 / i)
                  :mode imperative)
      :snt2 (c1-15 / continue-01
                   :ARG1 (c1-10 / Sabbath)
                   :domain (c1-14 / heaven)
                   :ARG0-of (c1-7 / cause-01
                                  :ARG1 (c1-6 / possible-01
                                              :ARG1 (c1-13 / open-01
                                                           :ARG1 (c1-2 / company
                                                                       :name (c1-3 / name
                                                                                   :op1 "Chick-fil-A"))
                                                           :time (c1-1 / ever)
                                                           :location (c1-8 / heaven)
                                                           :polarity -)))))

# ::snt And open hours
# ::tokens ["And", "open", "hours"]
# ::lemmas ["and", "open", "hours"]
(c2-0 / and
      :op2 (c2-2 / hour
                 :ARG1-of (c2-1 / open-09)))

# ::snt Heaven is catered by Chick-fil-a
# ::tokens ["Heaven", "is", "catered", "by", "Chick", "-", "fil", "-", "a"]
# ::lemmas ["Heaven", "be", "cater", "by", "Chick", "-", "fil", "-", "a"]
(c3-2 / cater-01
      :ARG0 (c3-0 / company
                  :name (c3-3 / name
                              :op1 "Chick-fil-a"))
      :ARG1 (c3-1 / heaven))

# ::snt In heaven, Chick-Fil-A is all you can eat.
# ::tokens ["In", "heaven", ",", "Chick", "-", "Fil", "-", "A", "is", "all", "you", "can", "eat", "."]
# ::lemmas ["in", "heaven", ",", "Chick", "-", "Fil", "-", "A", "be", "all", "you", "can", "eat", "."]
(c4-0 / all
      :ARG1-of (c4-1 / eat-01
                     :ARG0 (c4-2 / you)
                     :ARG1-of (c4-3 / possible-01))
      :domain (c4-6 / company
                    :name (c4-4 / name
                                :op1 "Chick-Fil-A"))
      :location (c4-5 / heaven))

# ::snt And Chipotles have drive-thrus.
# ::tokens ["And", "Chipotles", "have", "drive", "-", "thrus", "."]
# ::lemmas ["and", "Chipotles", "have", "drive", "-", "thrus", "."]
(c5-0 / and
      :op2 (c5-3 / have-03
                 :ARG0 (c5-2 / company
                             :name (c5-1 / name
                                         :op1 "Chipotles"))
                 :ARG1 (c5-4 / drive-thrus)))

# ::snt hobby lobby too
# ::tokens ["hobby", "lobby", "too"]
# ::lemmas ["hobby", "lobby", "too"]
(c6-0 / lobby-01
      :mod (c6-1 / too)
      :ARG0 c6-0)

# ::snt If I find desires which nothing in this world can satisfy, the only logical explanation is I was made for another world. -CSL
# ::tokens ["If", "I", "find", "desires", "which", "nothing", "in", "this", "world", "can", "satisfy", ",", "the", "only", "logical", "explanation", "is", "I", "was", "made", "for", "another", "world", ".", "-CSL"]
# ::lemmas ["if", "i", "find", "desire", "which", "nothing", "in", "this", "world", "can", "satisfy", ",", "the", "only", "logical", "explanation", "be", "i", "be", "make", "for", "another", "world", ".", "-csl"]
(c7-11 / have-condition-91
       :ARG1 (c7-16 / explain-01
                    :ARG0 (c7-3 / i)
                    :ARG1 (c7-17 / make-01
                                 :ARG1 c7-3
                                 :ARG2 (c7-5 / world
                                             :mod (c7-12 / another)))
                    :mod (c7-10 / logical)
                    :mod (c7-18 / only))
       :ARG2 (c7-6 / find-01
                   :ARG0 c7-3
                   :ARG1 (c7-1 / thing
                               :ARG1-of (c7-15 / desire-01)
                               :ARG1-of (c7-9 / satisfy-01
                                              :ARG0 (c7-4 / nothing
                                                          :location (c7-7 / world
                                                                          :mod (c7-2 / this)))
                                              :ARG1-of (c7-14 / possible-01
                                                              :polarity -))))
       :ARG1-of (c7-0 / say-01
                      :ARG0 (c7-13 / person
                                   :name (c7-8 / name
                                               :op1 "CSL"))))

# ::snt . "I closed every Chick-Fil-A in the land every Sunday, and yet you did not return to me," said the Lord
# ::tokens [".", "\"", "I", "closed", "every", "Chick", "-", "Fil", "-", "A", "in", "the", "land", "every", "Sunday", ",", "and", "yet", "you", "did", "not", "return", "to", "me", ",", "\"", "said", "the", "Lord"]
# ::lemmas [".", "\"", "i", "close", "every", "Chick", "-", "Fil", "-", "A", "in", "the", "land", "every", "Sunday", ",", "and", "yet", "you", "do", "not", "return", "to", "i", ",", "\"", "say", "the", "Lord"]
(c8-8 / say-01
      :ARG0 (c8-9 / person
                  :name (c8-10 / name
                               :op1 "Lord"))
      :ARG1 (c8-13 / have-concession-91
                   :ARG1 (c8-14 / close-01
                                :ARG0 (c8-7 / i)
                                :ARG1 (c8-11 / organization
                                             :name (c8-3 / name
                                                         :op1 "Chick-Fil-A")
                                             :mod (c8-2 / every))
                                :location (c8-12 / land)
                                :frequency (c8-1 / rate-entity-91
                                                 :ARG4 (c8-4 / date-entity
                                                             :weekday (c8-0 / sunday))))
                   :ARG2 (c8-6 / return-01
                               :ARG1 (c8-5 / you)
                               :ARG4 c8-7
                               :polarity -)))

# ::snt &amp; in heaven, every day is Sunday.
# ::tokens ["&", "amp", ";", "in", "heaven", ",", "every", "day", "is", "Sunday", "."]
# ::lemmas ["&", "amp", ";", "in", "heaven", ",", "every", "day", "be", "Sunday", "."]
(c9-0 / and
      :op2 (c9-5 / date-entity
                 :weekday (c9-3 / sunday)
                 :domain (c9-1 / day
                               :mod (c9-2 / every))
                 :location (c9-4 / heaven)))

# ::snt and it's FREEEEEE
# ::tokens ["and", "it", "'s", "FREEEEEE"]
# ::lemmas ["and", "it", "be", "freeeeee"]
(c10-0 / and
       :op2 (c10-2 / free-04
                   :ARG1 (c10-1 / it)))
