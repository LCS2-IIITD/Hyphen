# ::snt : Police Chief Says Dylann Roof Was Taken to Burger King Shortly After Arrest WHAT the HELL?!?
# ::tokens [":", "Police", "Chief", "Says", "Dylann", "Roof", "Was", "Taken", "to", "Burger", "King", "Shortly", "After", "Arrest", "WHAT", "the", "HELL", "?", "!", "?"]
# ::lemmas [":", "Police", "Chief", "say", "Dylann", "Roof", "Was", "Taken", "to", "Burger", "King", "Shortly", "After", "Arrest", "what", "the", "HELL", "?", "!", "?"]
(c1-10 / say-01
       :ARG0 (c1-11 / person
                    :ARG0-of (c1-13 / have-org-role-91
                                    :ARG1 (c1-6 / police)
                                    :ARG2 (c1-14 / chief)))
       :ARG1 (c1-3 / take-01
                   :ARG1 (c1-1 / person
                               :name (c1-12 / name
                                            :op1 "Dylann"
                                            :op2 "Roof"))
                   :ARG3 (c1-7 / company
                               :name (c1-5 / name
                                           :op1 "Burger"
                                           :op2 "King"))
                   :time (c1-0 / after
                               :op1 (c1-9 / arrest-01
                                          :ARG1 c1-1)
                               :quant (c1-2 / short-07)))
       :mod (c1-4 / amr-unknown
                  :mod (c1-8 / hell
                             :mode expressive)))

# ::snt To put it in a more simple form ,just how many homeless people have those same police taken to Burger Kings?
# ::tokens ["To", "put", "it", "in", "a", "more", "simple", "form", ",", "just", "how", "many", "homeless", "people", "have", "those", "same", "police", "taken", "to", "Burger", "Kings", "?"]
# ::lemmas ["to", "put", "it", "in", "a", "more", "simple", "form", ",", "just", "how", "many", "homeless", "people", "have", "those", "same", "police", "take", "to", "Burger", "Kings", "?"]
(c2-16 / have-04
       :ARG0 (c2-11 / person
                    :ARG0-of (c2-7 / have-03
                                   :ARG1 (c2-10 / home)
                                   :polarity -)
                    :quant (c2-0 / amr-unknown))
       :ARG1 (c2-3 / take-01
                   :ARG1 (c2-5 / person
                               :ARG0-of c2-7
                               :ARG1 (c2-1 / police
                                           :ARG1-of (c2-12 / same-01)
                                           :mod (c2-4 / that))))
       :ARG3 (c2-17 / company
                    :name (c2-13 / name
                                 :op1 "Burger"
                                 :op2 "Kings"))
       :purpose (c2-8 / put-03
                      :ARG1 (c2-9 / it)
                      :ARG2 (c2-15 / form
                                   :ARG1-of (c2-14 / have-degree-91
                                                   :ARG2 (c2-2 / simple-02
                                                               :ARG1 c2-15)
                                                   :ARG3 (c2-6 / more)))))

# ::snt : Police Chief Says Dylann Roof Was Taken to Burger King Shortly After Arrest I can't comprehend this.
# ::tokens [":", "Police", "Chief", "Says", "Dylann", "Roof", "Was", "Taken", "to", "Burger", "King", "Shortly", "After", "Arrest", "I", "ca", "n't", "comprehend", "this", "."]
# ::lemmas [":", "Police", "Chief", "say", "Dylann", "Roof", "Was", "Taken", "to", "Burger", "King", "Shortly", "After", "Arrest", "i", "can", "not", "comprehend", "this", "."]
(c3-13 / possible-01
       :ARG1 (c3-17 / comprehend-01
                    :ARG0 (c3-11 / i)
                    :ARG1 (c3-3 / this))
       :ARG1-of (c3-9 / cause-01
                      :ARG0 (c3-12 / say-01
                                   :ARG0 (c3-8 / person
                                               :ARG0-of (c3-16 / have-org-role-91
                                                               :ARG1 (c3-1 / police)
                                                               :ARG2 (c3-5 / chief)))
                                   :ARG1 (c3-6 / take-01
                                               :ARG1 (c3-10 / person
                                                            :name (c3-14 / name
                                                                         :op1 "Dylann"
                                                                         :op2 "Roof"))
                                               :ARG3 (c3-4 / company
                                                           :name (c3-7 / name
                                                                       :op1 "Burger"
                                                                       :op2 "King"))
                                               :time (c3-0 / after
                                                           :op1 (c3-15 / arrest-01
                                                                       :ARG1 c3-10)
                                                           :quant (c3-2 / short-07)))))
       :polarity -)

# ::snt -________- that's the wildest thing ever. Ppl love to justify bs.
# ::tokens ["-________-", "that", "'s", "the", "wildest", "thing", "ever", ".", "Ppl", "love", "to", "justify", "bs", "."]
# ::lemmas ["-________-", "that", "be", "the", "wild", "thing", "ever", ".", "Ppl", "love", "to", "justify", "bs", "."]
(c4-6 / multi-sentence
      :snt1 (c4-10 / wild
                   :domain (c4-0 / thing
                                 :mod (c4-3 / that))
                   :time (c4-1 / ever)
                   :ARG2-of (c4-12 / have-degree-91
                                   :ARG1 c4-0
                                   :ARG3 (c4-2 / most)))
      :snt2 (c4-11 / love-02
                   :ARG0 (c4-8 / person
                               :ARG0-of (c4-7 / post-01
                                              :manner (c4-9 / original)))
                   :ARG1 (c4-4 / justify-01
                               :ARG0 c4-8
                               :ARG1 (c4-5 / bullshit))))

# ::snt "Have it your way."
# ::tokens ["\"", "Have", "it", "your", "way", ".", "\""]
# ::lemmas ["\"", "have", "it", "your", "way", ".", "\""]
(c5-2 / have-06
      :ARG0 (c5-1 / you)
      :ARG1 (c5-0 / way
                  :poss c5-1)
      :mode imperative)

# ::snt some are saying that it's a way to earn the trust of the shooter, make things easier in interrogation. I still dont agree tho
# ::tokens ["some", "are", "saying", "that", "it", "'s", "a", "way", "to", "earn", "the", "trust", "of", "the", "shooter", ",", "make", "things", "easier", "in", "interrogation", ".", "I", "still", "do", "nt", "agree", "tho"]
# ::lemmas ["some", "be", "say", "that", "it", "be", "a", "way", "to", "earn", "the", "trust", "of", "the", "shooter", ",", "make", "thing", "easy", "in", "interrogation", ".", "i", "still", "do", "not", "agree", "tho"]
(c6-18 / multi-sentence
       :snt1 (c6-7 / say-01
                   :ARG0 (c6-0 / some)
                   :ARG1 (c6-5 / way
                               :manner-of (c6-13 / and
                                                 :op1 (c6-17 / earn-01
                                                             :ARG1 (c6-1 / trust-01
                                                                         :ARG0 (c6-15 / person
                                                                                      :ARG0-of (c6-4 / shoot-02))
                                                                         :ARG1 (c6-3 / it)))
                                                 :op2 (c6-6 / make-02
                                                            :ARG1 (c6-8 / easy-05
                                                                        :ARG1 (c6-2 / thing)
                                                                        :time (c6-11 / interrogate-01)
                                                                        :ARG2-of (c6-10 / have-degree-91
                                                                                        :ARG1 c6-2
                                                                                        :ARG3 (c6-9 / more)))))))
       :snt2 (c6-12 / agree-01
                    :ARG0 (c6-16 / i)
                    :mod (c6-19 / still)
                    :ARG1-of (c6-14 / have-concession-91)
                    :polarity -))

# ::snt Yepp White privilege RT ": Police Chief Says Dylann Roof Was Taken to Burger King Shortly After Arrest "
# ::tokens ["Yepp", "White", "privilege", "RT", "\"", ":", "Police", "Chief", "Says", "Dylann", "Roof", "Was", "Taken", "to", "Burger", "King", "Shortly", "After", "Arrest", "\""]
# ::lemmas ["Yepp", "White", "privilege", "RT", "\"", ":", "Police", "Chief", "say", "Dylann", "Roof", "Was", "Taken", "to", "Burger", "King", "Shortly", "After", "Arrest", "\""]
(c7-10 / say-01
       :ARG0 (c7-11 / person
                    :name (c7-12 / name
                                 :op1 "Yepp"
                                 :op2 "White")
                    :ARG0-of (c7-14 / have-org-role-91
                                    :ARG1 (c7-6 / police)
                                    :ARG2 (c7-15 / chief)))
       :ARG1 (c7-3 / take-01
                   :ARG1 (c7-1 / person
                               :name (c7-5 / name
                                           :op1 "Dylann"
                                           :op2 "Roof"))
                   :ARG3 (c7-7 / company
                               :name (c7-13 / name
                                            :op1 "Burger"
                                            :op2 "King"))
                   :time (c7-0 / after
                               :op1 (c7-9 / arrest-01
                                          :ARG1 c7-1)
                               :quant (c7-2 / short-07)))
       :medium (c7-8 / publication
                     :name (c7-4 / name
                                 :op1 "RT")))

# ::snt Aww, he didn't get his food on a tray ?
# ::tokens ["Aww", ",", "he", "did", "n't", "get", "his", "food", "on", "a", "tray", "?"]
# ::lemmas ["Aww", ",", "he", "do", "not", "get", "his", "food", "on", "a", "tray", "?"]
(c8-2 / get-01
      :ARG0 (c8-4 / he)
      :ARG1 (c8-3 / food
                  :poss c8-4)
      :location (c8-1 / tray)
      :polarity (c8-0 / amr-unknown)
      :mod (c8-5 / aw
                 :mode expressive)
      :polarity -)
