# ::snt Let's talk and the and oh yea
# ::tokens ["Let", "'s", "talk", "and", "the", "and", "oh", "yea"]
# ::lemmas ["let", "us", "talk", "and", "the", "and", "oh", "yea"]
(c1-5 / let-01
      :ARG0 (c1-4 / we)
      :ARG1 (c1-1 / talk-01
                  :ARG0 c1-4
                  :ARG1 (c1-0 / and
                              :op1 (c1-3 / thing)
                              :op2 (c1-2 / et-cetera)))
      :mode imperative)

# ::snt that's not at all promising
# ::tokens ["that", "'s", "not", "at", "all", "promising"]
# ::lemmas ["that", "be", "not", "at", "all", "promise"]
(c2-2 / promise-01
      :ARG0 (c2-1 / that)
      :degree (c2-0 / at-all)
      :polarity -)

# ::snt Ummmm, a google search shows that photo was taken months ago in Europe... :-/
# ::tokens ["Ummmm", ",", "a", "google", "search", "shows", "that", "photo", "was", "taken", "months", "ago", "in", "Europe", "...", ":-/"]
# ::lemmas ["Ummmm", ",", "a", "google", "search", "show", "that", "photo", "be", "take", "months", "ago", "in", "Europe", "...", ":-/"]
(c3-9 / show-01
      :ARG0 (c3-0 / search-01
                  :medium (c3-13 / company
                                 :name (c3-11 / name
                                              :op1 "Google")))
      :ARG1 (c3-10 / photograph-01
                   :ARG1-of (c3-1 / take-01
                                  :location (c3-7 / continent
                                                  :name (c3-3 / name
                                                              :op1 "Europe"))
                                  :time (c3-2 / before
                                              :op1 (c3-12 / now)
                                              :quant (c3-6 / multiple
                                                           :op1 (c3-4 / temporal-quantity
                                                                      :unit (c3-5 / month)
                                                                      :quant 1)))))
      :mod (c3-8 / umm
                 :mode expressive))

# ::snt I wonder how many "refugees" arrived in London so far...
# ::tokens ["I", "wonder", "how", "many", "\"", "refugees", "\"", "arrived", "in", "London", "so", "far", "..."]
# ::lemmas ["i", "wonder", "how", "many", "\"", "refugee", "\"", "arrive", "in", "London", "so", "far", "..."]
(c4-6 / wonder-01
      :ARG0 (c4-3 / i)
      :ARG1 (c4-1 / thing
                  :quant-of (c4-2 / refugee
                                  :ARG1-of (c4-0 / arrive-01
                                                 :ARG4 (c4-7 / city
                                                             :name (c4-5 / name
                                                                         :op1 "London"))
                                                 :time (c4-4 / so-far)))))

# ::snt Not all refugees... how many killers are amongst them? This is a Trojan Horse.
# ::tokens ["Not", "all", "refugees", "...", "how", "many", "killers", "are", "amongst", "them", "?", "This", "is", "a", "Trojan", "Horse", "."]
# ::lemmas ["not", "all", "refugee", "...", "how", "many", "killer", "be", "amongst", "they", "?", "this", "be", "a", "Trojan", "Horse", "."]
(c5-4 / multi-sentence
      :snt1 (c5-2 / refugee
                  :mod (c5-0 / all
                             :polarity -))
      :snt2 (c5-5 / include-91
                  :ARG1 (c5-6 / person
                              :ARG0-of (c5-3 / kill-01)
                              :quant (c5-8 / amr-unknown))
                  :ARG2 c5-2)
      :snt3 (c5-7 / horse
                  :mod (c5-1 / this)))

# ::snt And the rest are cheering them on.
# ::tokens ["And", "the", "rest", "are", "cheering", "them", "on", "."]
# ::lemmas ["and", "the", "rest", "be", "cheer", "they", "on", "."]
(c6-0 / and
      :op2 (c6-3 / cheer-on-04
                 :ARG0 (c6-1 / rest)
                 :ARG1 (c6-2 / they)))

# ::snt Well, that just bumped up the "How many terrorists did Obama just import" column.
# ::tokens ["Well", ",", "that", "just", "bumped", "up", "the", "\"", "How", "many", "terrorists", "did", "Obama", "just", "import", "\"", "column", "."]
# ::lemmas ["well", ",", "that", "just", "bump", "up", "the", "\"", "how", "many", "terrorist", "do", "Obama", "just", "import", "\"", "column", "."]
(c7-3 / bump-01
      :ARG0 (c7-1 / that)
      :ARG1 (c7-10 / column
                   :topic (c7-5 / import-01
                                :ARG0 (c7-7 / person
                                            :name (c7-8 / name
                                                        :op1 "Obama"))
                                :ARG1 (c7-4 / terrorist
                                            :quant (c7-0 / amr-unknown))
                                :mod (c7-2 / just)))
      :ARG5 (c7-6 / up)
      :mod c7-2
      :mod (c7-9 / well))

# ::snt military-aged men just left the women and children in the warzone.
# ::tokens ["military", "-", "aged", "men", "just", "left", "the", "women", "and", "children", "in", "the", "warzone", "."]
# ::lemmas ["military", "-", "aged", "man", "just", "leave", "the", "woman", "and", "child", "in", "the", "warzone", "."]
(c8-8 / leave-15
      :ARG0 (c8-6 / man
                  :age (c8-1 / temporal-quantity
                             :unit (c8-5 / year)
                             :quant 4)
                  :mod (c8-3 / military))
      :ARG1 (c8-0 / and
                  :op1 (c8-7 / woman)
                  :op2 (c8-9 / child))
      :ARG2 (c8-4 / warzone)
      :mod (c8-2 / just))

# ::snt Where are all the women and children? All look like healthy young men to me.
# ::tokens ["Where", "are", "all", "the", "women", "and", "children", "?", "All", "look", "like", "healthy", "young", "men", "to", "me", "."]
# ::lemmas ["where", "be", "all", "the", "woman", "and", "child", "?", "all", "look", "like", "healthy", "young", "man", "to", "i", "."]
(c9-4 / multi-sentence
      :snt1 (c9-0 / and
                  :op1 (c9-7 / woman)
                  :op2 (c9-9 / child)
                  :mod (c9-11 / all)
                  :location (c9-1 / amr-unknown))
      :snt2 (c9-8 / look-02
                  :ARG0 (c9-5 / all)
                  :ARG1 (c9-2 / man
                              :mod (c9-3 / young)
                              :mod (c9-10 / healthy))
                  :ARG2 (c9-6 / i)))

# ::snt Yup, he said they were "able bodied men" he was concerned about
# ::tokens ["Yup", ",", "he", "said", "they", "were", "\"", "able", "bodied", "men", "\"", "he", "was", "concerned", "about"]
# ::lemmas ["yup", ",", "he", "say", "they", "be", "\"", "able", "bodied", "man", "\"", "he", "be", "concern", "about"]
(c10-4 / say-01
       :ARG0 (c10-5 / he)
       :ARG1 (c10-6 / concern-01
                    :ARG0 (c10-3 / man
                                 :mod (c10-0 / able-bodied)
                                 :domain (c10-1 / they))
                    :ARG1 c10-5)
       :mod (c10-2 / yup))

# ::snt If even % are extremists that's . The only conclusion is our leaders have gone insane.
# ::tokens ["If", "even", "%", "are", "extremists", "that", "'s", ".", "The", "only", "conclusion", "is", "our", "leaders", "have", "gone", "insane", "."]
# ::lemmas ["if", "even", "%", "be", "extremist", "that", "be", ".", "the", "only", "conclusion", "be", "our", "leader", "have", "go", "insane", "."]
(c11-2 / multi-sentence
       :snt1 (c11-0 / that
                    :condition (c11-1 / extremist
                                      :domain (c11-6 / percentage-entity
                                                     :value (c11-7 / even))))
       :snt2 (c11-11 / conclude-01
                     :ARG1 (c11-3 / go-08
                                  :ARG1 (c11-4 / person
                                               :ARG0-of (c11-10 / lead-02
                                                                :ARG1 (c11-9 / we)))
                                  :ARG2 (c11-5 / insane))
                     :mod (c11-8 / only)))

# ::snt oops meant NO invitation.
# ::tokens ["oops", "meant", "NO", "invitation", "."]
# ::lemmas ["oops", "mean", "no", "invitation", "."]
(c12-2 / mean-01
       :ARG0 (c12-0 / oops
                    :mode expressive)
       :ARG2 (c12-1 / invite-01
                    :polarity -))

# ::snt That's just plain wrong. All of it. New Orleans sent an invitation, no knock on the door. Yur town next?
# ::tokens ["That", "'s", "just", "plain", "wrong", ".", "All", "of", "it", ".", "New", "Orleans", "sent", "an", "invitation", ",", "no", "knock", "on", "the", "door", ".", "Yur", "town", "next", "?"]
# ::lemmas ["that", "be", "just", "plain", "wrong", ".", "all", "of", "it", ".", "New", "Orleans", "send", "an", "invitation", ",", "no", "knock", "on", "the", "door", ".", "yur", "town", "next", "?"]
(c13-6 / multi-sentence
       :snt1 (c13-13 / wrong-02
                     :ARG1 (c13-1 / that)
                     :mod (c13-11 / plain
                                  :mod (c13-2 / just))
                     :mod (c13-0 / all))
       :snt2 (c13-9 / it
                    :mod c13-0)
       :snt3 (c13-14 / invite-01
                     :ARG0 (c13-15 / city
                                   :name (c13-12 / name
                                                 :op1 "New"
                                                 :op2 "Orleans")
                                   :ARG1-of c13-14)
                     :ARG1-of (c13-3 / knock-01
                                     :location (c13-4 / door)
                                     :polarity -))
       :snt4 (c13-5 / town
                    :mod (c13-7 / next)
                    :mod (c13-8 / yur)
                    :polarity (c13-10 / amr-unknown)))

# ::snt Good thing New Orleans never has large crowds of people in the streets or stadiums...
# ::tokens ["Good", "thing", "New", "Orleans", "never", "has", "large", "crowds", "of", "people", "in", "the", "streets", "or", "stadiums", "..."]
# ::lemmas ["good", "thing", "New", "Orleans", "never", "have", "large", "crowd", "of", "people", "in", "the", "street", "or", "stadium", "..."]
(c14-2 / good-02
       :ARG1 (c14-9 / have-03
                    :ARG0 (c14-10 / city
                                  :name (c14-5 / name
                                               :op1 "New"
                                               :op2 "Orleans"))
                    :ARG1 (c14-3 / crowd
                                 :mod (c14-8 / large)
                                 :consist-of (c14-6 / person))
                    :time (c14-1 / ever)
                    :location (c14-7 / or
                                     :op1 (c14-4 / street)
                                     :op2 (c14-0 / stadium))
                    :polarity -))

# ::snt "Not all Muslims are terrorists!" so if only % of these guys are terrorists, that means we just imported .
# ::tokens ["\"", "Not", "all", "Muslims", "are", "terrorists", "!", "\"", "so", "if", "only", "%", "of", "these", "guys", "are", "terrorists", ",", "that", "means", "we", "just", "imported", "."]
# ::lemmas ["\"", "not", "all", "Muslims", "be", "terrorist", "!", "\"", "so", "if", "only", "%", "of", "these", "guy", "be", "terrorist", ",", "that", "mean", "we", "just", "import", "."]
(c15-16 / cause-01
        :ARG0 (c15-1 / terrorist
                     :domain (c15-11 / person
                                     :mod (c15-2 / religious-group
                                                 :name (c15-12 / name
                                                               :op1 "Islam"))
                                     :mod (c15-0 / all
                                                 :polarity -)))
        :ARG1 (c15-6 / mean-01
                     :ARG1 c15-1
                     :ARG2 (c15-10 / import-01
                                   :ARG0 (c15-14 / we)
                                   :mod (c15-3 / just))
                     :condition (c15-4 / terrorist
                                       :domain (c15-7 / guy
                                                      :ARG1-of (c15-15 / include-91
                                                                       :ARG2 (c15-8 / guy
                                                                                    :mod (c15-5 / this))
                                                                       :ARG3 (c15-9 / percentage-entity
                                                                                    :mod (c15-13 / only)))))))

# ::snt Put em back on the boat and ship them straight to Latakia.
# ::tokens ["Put", "em", "back", "on", "the", "boat", "and", "ship", "them", "straight", "to", "Latakia", "."]
# ::lemmas ["put", "em", "back", "on", "the", "boat", "and", "ship", "they", "straight", "to", "Latakia", "."]
(c16-0 / and
       :op1 (c16-7 / put-01
                   :ARG0 (c16-4 / you)
                   :ARG1 (c16-2 / they)
                   :ARG2 (c16-3 / back
                                :op1 (c16-5 / boat))
                   :mode imperative)
       :op2 (c16-6 / ship-01
                   :ARG0 c16-4
                   :ARG1 c16-2
                   :ARG2 (c16-9 / country
                                :name (c16-8 / name
                                             :op1 "Latakia"))
                   :ARG1-of (c16-1 / straight-04)
                   :mode imperative))

# ::snt what could possibly go wrong
# ::tokens ["what", "could", "possibly", "go", "wrong"]
# ::lemmas ["what", "could", "possibly", "go", "wrong"]
(c17-3 / possible-01
       :ARG1 (c17-2 / go-08
                    :ARG1 (c17-0 / thing)
                    :ARG2 (c17-1 / wrong-02
                                 :ARG1 c17-0)))

# ::snt ISIS isn't bringing the war to our shores, we are. O is primarily responsible, but we will all pay the price.
# ::tokens ["ISIS", "is", "n't", "bringing", "the", "war", "to", "our", "shores", ",", "we", "are", ".", "O", "is", "primarily", "responsible", ",", "but", "we", "will", "all", "pay", "the", "price", "."]
# ::lemmas ["ISIS", "be", "not", "bring", "the", "war", "to", "our", "shore", ",", "we", "be", ".", "o", "be", "primarily", "responsible", ",", "but", "we", "will", "all", "pay", "the", "price", "."]
(c18-6 / multi-sentence
       :snt1 (c18-3 / bring-01
                    :ARG0 (c18-15 / criminal-organization
                                  :name (c18-12 / name
                                                :op1 "Islamic"
                                                :op2 "organization"))
                    :ARG1 (c18-14 / war)
                    :ARG2 (c18-11 / shore
                                  :poss (c18-4 / we))
                    :polarity -)
       :snt2 (c18-8 / contrast-01
                    :ARG1 (c18-2 / responsible-01
                                 :ARG0 (c18-13 / person
                                               :name (c18-5 / name
                                                            :op1 "O"))
                                 :mod (c18-7 / primary))
                    :ARG2 (c18-1 / pay-01
                                 :ARG0 (c18-9 / we
                                              :mod (c18-0 / all))
                                 :ARG1 (c18-10 / price))))

# ::snt This Powdered Wig Society blog is bullsit. I suggest finding another source.
# ::tokens ["This", "Powdered", "Wig", "Society", "blog", "is", "bullsit", ".", "I", "suggest", "finding", "another", "source", "."]
# ::lemmas ["this", "Powdered", "Wig", "Society", "blog", "be", "bullsit", ".", "i", "suggest", "find", "another", "source", "."]
(c19-5 / multi-sentence
       :snt1 (c19-3 / bullshit
                    :domain (c19-4 / blog
                                   :mod (c19-9 / organization
                                               :name (c19-8 / name
                                                            :op1 "Powdered"
                                                            :op2 "Wig"
                                                            :op3 "Society"))
                                   :mod (c19-2 / this)))
       :snt2 (c19-7 / suggest-01
                    :ARG0 (c19-6 / i)
                    :ARG1 (c19-10 / find-01
                                  :ARG1 (c19-0 / source
                                               :mod (c19-1 / another)))))

# ::snt where the hell is ? It's his state?
# ::tokens ["where", "the", "hell", "is", "?", "It", "'s", "his", "state", "?"]
# ::lemmas ["where", "the", "hell", "be", "?", "it", "be", "his", "state", "?"]
(c20-3 / multi-sentence
       :snt1 (c20-2 / be-located-at-91
                    :ARG1 (c20-0 / amr-unknown)
                    :ARG2 (c20-8 / amr-unknown
                                 :mod (c20-7 / hell
                                             :mode expressive)))
       :snt2 (c20-6 / state
                    :domain (c20-5 / it)
                    :poss (c20-4 / he)
                    :polarity (c20-1 / amr-unknown)))

# ::snt Send the back!
# ::tokens ["Send", "the", "back", "!"]
# ::lemmas ["send", "the", "back", "!"]
(c21-2 / send-01
       :ARG0 (c21-1 / you)
       :ARG1 (c21-0 / back)
       :mode imperative)

# ::snt what are the gun laws in New Orleans?
# ::tokens ["what", "are", "the", "gun", "laws", "in", "New", "Orleans", "?"]
# ::lemmas ["what", "be", "the", "gun", "law", "in", "New", "Orleans", "?"]
(c22-3 / law
       :topic (c22-1 / gun)
       :location (c22-4 / city
                        :name (c22-2 / name
                                     :op1 "New"
                                     :op2 "Orleans"))
       :domain (c22-0 / amr-unknown))

# ::snt Where are all the women and children refugees?
# ::tokens ["Where", "are", "all", "the", "women", "and", "children", "refugees", "?"]
# ::lemmas ["where", "be", "all", "the", "woman", "and", "child", "refugee", "?"]
(c23-2 / refugee
       :domain (c23-0 / and
                      :op1 (c23-3 / woman)
                      :op2 (c23-4 / child))
       :mod (c23-5 / all)
       :location (c23-1 / amr-unknown))

# ::snt that is a picture from Hungary not New Orleans.
# ::tokens ["that", "is", "a", "picture", "from", "Hungary", "not", "New", "Orleans", "."]
# ::lemmas ["that", "be", "a", "picture", "from", "Hungary", "not", "New", "Orleans", "."]
(c24-7 / contrast-01
       :ARG1 (c24-5 / picture
                    :source (c24-4 / country
                                   :name (c24-6 / name
                                                :op1 "Hungary"))
                    :domain (c24-0 / that))
       :ARG2 (c24-3 / picture
                    :source (c24-1 / city
                                   :name (c24-2 / name
                                                :op1 "New"
                                                :op2 "Orleans"))
                    :domain c24-0
                    :polarity -))

# ::snt excellent timing Barack!
# ::tokens ["excellent", "timing", "Barack", "!"]
# ::lemmas ["excellent", "timing", "Barack", "!"]
(c25-2 / say-01
       :ARG1 (c25-1 / excellent-02
                    :ARG1 (c25-0 / time-02))
       :ARG2 (c25-4 / person
                    :name (c25-3 / name
                                 :op1 "Barack"))
       :mode expressive)

# ::snt Well they voted for it...wait they didn't?
# ::tokens ["Well", "they", "voted", "for", "it", "...", "wait", "they", "did", "n't", "?"]
# ::lemmas ["well", "they", "vote", "for", "it", "...", "wait", "they", "do", "not", "?"]
(c26-5 / multi-sentence
       :snt1 (c26-7 / vote-01
                    :ARG0 (c26-2 / they)
                    :ARG1 (c26-6 / it)
                    :mod (c26-8 / well))
       :snt2 (c26-1 / vote-01
                    :ARG0 (c26-3 / they)
                    :ARG1 c26-6
                    :time (c26-4 / wait-01
                                 :ARG1 (c26-0 / amr-unknown))
                    :polarity -))

# ::snt HOLY SHIT.
# ::tokens ["HOLY", "SHIT", "."]
# ::lemmas ["HOLY", "SHIT", "."]
(c27-1 / shit
       :mod (c27-0 / hey
                   :mode expressive))

# ::snt huh????
# ::tokens ["huh", "?", "?", "?", "?"]
# ::lemmas ["huh", "?", "?", "?", "?"]
(c28-1 / huh
       :polarity (c28-0 / amr-unknown))

# ::snt BETER TAR AN FEATHER WHO EVER LET THEM IN
# ::tokens ["BETER", "TAR", "AN", "FEATHER", "WHO", "EVER", "LET", "THEM", "IN"]
# ::lemmas ["BETER", "TAR", "AN", "FEATHER", "who", "ever", "let", "they", "in"]
(c29-0 / talk-01
       :ARG0 (c29-4 / person
                    :name (c29-5 / name
                                 :op1 "BETER"))
       :ARG2 (c29-3 / person
                    :ARG0-of (c29-8 / have-rel-role-91
                                    :ARG1 (c29-2 / they)
                                    :ARG2 (c29-7 / father))
                    :ARG0-of (c29-6 / let-01
                                    :ARG1 c29-2
                                    :time (c29-1 / ever))))

# ::snt If you are going based on looks you could have said that about the CEOs of and yea me too
# ::tokens ["If", "you", "are", "going", "based", "on", "looks", "you", "could", "have", "said", "that", "about", "the", "CEOs", "of", "and", "yea", "me", "too"]
# ::lemmas ["if", "you", "be", "going", "base", "on", "look", "you", "could", "have", "say", "that", "about", "the", "ceo", "of", "and", "yea", "i", "too"]
(c30-0 / and
       :op1 (c30-10 / possible-01
                    :ARG1 (c30-9 / say-01
                                 :ARG0 (c30-5 / you)
                                 :ARG1 (c30-1 / that)
                                 :ARG3 (c30-6 / person
                                              :ARG0-of (c30-13 / have-org-role-91
                                                               :ARG2 (c30-11 / officer
                                                                             :mod (c30-14 / chief)
                                                                             :mod (c30-2 / executive)))))
                    :condition (c30-7 / go-02
                                      :ARG0 c30-5
                                      :ARG1-of (c30-3 / base-02
                                                      :ARG2 (c30-12 / look-02))))
       :op2 c30-9
       :ARG0 (c30-8 / i)
       :ARG1 c30-1
       :mod (c30-4 / too))

# ::snt Kill them ASAP!
# ::tokens ["Kill", "them", "ASAP", "!"]
# ::lemmas ["kill", "they", "asap", "!"]
(c31-1 / kill-01
       :ARG0 (c31-2 / you)
       :ARG1 (c31-3 / they)
       :time (c31-0 / ASAP)
       :mode imperative)

# ::snt FOX WVUE also relates in the test that it will be primarily males -45 yrs. of age.
# ::tokens ["FOX", "WVUE", "also", "relates", "in", "the", "test", "that", "it", "will", "be", "primarily", "males", "-45", "yrs", ".", "of", "age", "."]
# ::lemmas ["FOX", "WVUE", "also", "relate", "in", "the", "test", "that", "it", "will", "be", "primarily", "male", "-45", "yrs", ".", "of", "age", "."]
(c32-2 / relate-01
       :ARG0 (c32-4 / broadcast-program
                    :name (c32-12 / name
                                  :op1 "FOX"
                                  :op2 "WVUE"))
       :ARG1 (c32-0 / age-01
                    :ARG1 (c32-11 / person
                                  :mod (c32-8 / male)
                                  :age (c32-7 / between
                                              :op1 (c32-1 / temporal-quantity
                                                          :unit (c32-9 / year)
                                                          :quant 45)
                                              :op2 (c32-5 / temporal-quantity
                                                          :unit (c32-3 / year)
                                                          :quant 45)))
                    :ARG2 (c32-6 / test-01)
                    :mod (c32-10 / primary))
       :mod (c32-13 / also))

# ::snt No, IT'S a liberal site aimed at misleading and fear tactics. tht is a pic of a refugee camp not in the USA.
# ::tokens ["No", ",", "IT", "'S", "a", "liberal", "site", "aimed", "at", "misleading", "and", "fear", "tactics", ".", "tht", "is", "a", "pic", "of", "a", "refugee", "camp", "not", "in", "the", "USA", "."]
# ::lemmas ["no", ",", "IT", "be", "a", "liberal", "site", "aim", "at", "misleading", "and", "fear", "tactic", ".", "tht", "be", "a", "pic", "of", "a", "refugee", "camp", "not", "in", "the", "USA", "."]
(c33-7 / multi-sentence
       :snt1 (c33-10 / site
                     :domain (c33-9 / it)
                     :ARG1-of (c33-13 / liberal-02)
                     :ARG1-of (c33-0 / aim-02
                                     :ARG2 (c33-15 / and
                                                   :op1 (c33-1 / tactic
                                                               :ARG0-of (c33-3 / mislead-01))
                                                   :op2 (c33-4 / tactic
                                                               :purpose (c33-14 / fear-01)))))
       :snt2 (c33-11 / pic
                     :topic (c33-5 / camp
                                   :mod (c33-2 / refugee)
                                   :location (c33-8 / country
                                                    :name (c33-12 / name
                                                                  :op1 "USA")
                                                    :polarity -))
                     :domain (c33-6 / this)))

# ::snt Unfortuneately!
# ::tokens ["Unfortuneately", "!"]
# ::lemmas ["unfortuneately", "!"]
(c34-0 / fortune
       :polarity -)

# ::snt They need to be chipped like Re-pug-licans then we know where they r at all times!
# ::tokens ["They", "need", "to", "be", "chipped", "like", "Re", "-", "pug", "-", "licans", "then", "we", "know", "where", "they", "r", "at", "all", "times", "!"]
# ::lemmas ["they", "need", "to", "be", "chip", "like", "re", "-", "pug", "-", "lican", "then", "we", "know", "where", "they", "r", "at", "all", "time", "!"]
(c35-10 / need-01
        :ARG0 (c35-1 / they)
        :ARG1 (c35-12 / chip-01
                      :ARG1 c35-1
                      :ARG1-of (c35-2 / resemble-01
                                      :ARG2 (c35-9 / person
                                                   :mod (c35-8 / country
                                                               :name (c35-4 / name
                                                                            :op1 "Rome"))
                                                   :mod (c35-7 / political-movement
                                                               :name c35-4
                                                               :op1 "Republican"))))
        :ARG0-of (c35-3 / cause-01
                        :ARG1 (c35-5 / know-01
                                     :ARG0 (c35-11 / we)
                                     :ARG1 (c35-6 / thing
                                                  :location-of c35-1
                                                  :time (c35-0 / all)))))

# ::snt hope they put chips in those future terrorists...BTW...where are the women and children?
# ::tokens ["hope", "they", "put", "chips", "in", "those", "future", "terrorists", "...", "BTW", "...", "where", "are", "the", "women", "and", "children", "?"]
# ::lemmas ["hope", "they", "put", "chip", "in", "those", "future", "terrorist", "...", "btw", "...", "where", "be", "the", "woman", "and", "child", "?"]
(c36-6 / multi-sentence
       :snt1 (c36-13 / hope-01
                     :ARG0 (c36-8 / i)
                     :ARG1 (c36-10 / put-01
                                   :ARG0 (c36-1 / they)
                                   :ARG1 (c36-14 / chip)
                                   :ARG2 (c36-3 / terrorist
                                                :mod (c36-4 / that)
                                                :time (c36-12 / future))))
       :snt2 (c36-2 / be-located-at-91
                    :ARG1 (c36-0 / and
                                 :op1 (c36-11 / woman)
                                 :op2 (c36-7 / child))
                    :ARG2 (c36-9 / amr-unknown)
                    :mod (c36-5 / by-the-way)))

# ::snt God help us
# ::tokens ["God", "help", "us"]
# ::lemmas ["God", "help", "we"]
(c37-1 / help-01
       :ARG0 (c37-2 / person
                    :name (c37-3 / name
                                 :op1 "God"))
       :ARG2 (c37-0 / we))
