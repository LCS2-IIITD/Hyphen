# ::snt The unintended consequences from the bleeding heart good intention decisions. The results of many government programs are often worse than the problem. A perfect example of the left's inability to critically think.
# ::tokens ["The", "unintended", "consequences", "from", "the", "bleeding", "heart", "good", "intention", "decisions", ".", "The", "results", "of", "many", "government", "programs", "are", "often", "worse", "than", "the", "problem", ".", "A", "perfect", "example", "of", "the", "left", "'s", "inability", "to", "critically", "think", "."]
# ::lemmas ["the", "unintended", "consequence", "from", "the", "bleed", "heart", "good", "intention", "decision", ".", "the", "result", "of", "many", "government", "program", "be", "often", "bad", "than", "the", "problem", ".", "a", "perfect", "example", "of", "the", "left", "'s", "inability", "to", "critically", "think", "."]
(c1-21 / multi-sentence
       :snt1 (c1-13 / consequence-03
                    :ARG1 (c1-18 / decide-01
                                 :ARG1 (c1-12 / heart
                                              :ARG1-of (c1-1 / bleed-01)))
                    :ARG1-of (c1-2 / intend-01
                                   :ARG1-of (c1-7 / good-02)
                                   :ARG1 c1-13)
                    :polarity -)
       :snt2 (c1-6 / bad-07
                   :ARG1 (c1-3 / result-01
                               :ARG1 (c1-17 / program
                                            :mod (c1-8 / government-organization
                                                       :ARG0-of (c1-10 / govern-01))
                                            :quant (c1-4 / many)))
                   :frequency (c1-22 / often)
                   :ARG2-of (c1-16 / have-degree-91
                                   :ARG1 c1-3
                                   :ARG3 (c1-9 / more)
                                   :ARG4 (c1-14 / problem)))
       :snt3 (c1-20 / exemplify-01
                    :ARG1 (c1-15 / capable-01
                                 :ARG1 (c1-11 / left-19)
                                 :ARG2 (c1-0 / think-01
                                             :manner (c1-5 / criticism-04))
                                 :polarity -)
                    :ARG1-of (c1-19 / perfect-02)))

# ::snt and then little Toby took his ball and went home...
# ::tokens ["and", "then", "little", "Toby", "took", "his", "ball", "and", "went", "home", "..."]
# ::lemmas ["and", "then", "little", "Toby", "take", "his", "ball", "and", "go", "home", "..."]
(c2-0 / and
      :op2 (c2-9 / and
                 :op1 (c2-1 / take-01
                            :ARG0 (c2-5 / person
                                        :name (c2-6 / name
                                                    :op1 "Toby")
                                        :mod (c2-7 / little))
                            :ARG1 (c2-2 / ball
                                        :poss c2-5))
                 :op2 (c2-4 / go-02
                            :ARG0 c2-5
                            :ARG4 (c2-8 / home))
                 :time (c2-3 / then)))

# ::snt High unemployment helps expand the welfare state. Everything's falling neatly into place. (Maniacal laugh.)
# ::tokens ["High", "unemployment", "helps", "expand", "the", "welfare", "state", ".", "Everything", "'s", "falling", "neatly", "into", "place", ".", "(", "Maniacal", "laugh", ".", ")"]
# ::lemmas ["high", "unemployment", "help", "expand", "the", "welfare", "state", ".", "everything", "be", "fall", "neatly", "into", "place", ".", "(", "maniacal", "laugh", ".", ")"]
(c3-3 / multi-sentence
      :snt1 (c3-13 / help-01
                   :ARG0 (c3-1 / employ-01
                               :ARG1-of (c3-5 / high-02)
                               :polarity -)
                   :ARG1 (c3-8 / expand-01
                               :ARG1 (c3-6 / state
                                           :mod (c3-10 / welfare))))
      :snt2 (c3-12 / fall-01
                   :ARG1 (c3-0 / everything)
                   :ARG4 (c3-7 / place)
                   :manner (c3-9 / neat))
      :snt3 (c3-11 / laugh-01
                   :mod (c3-4 / person
                              :name (c3-2 / name
                                          :op1 "Maniac")
                              :mode expressive)))

# ::snt Haha! the Biebs has million more followers than u. Logic says u have none. ?
# ::tokens ["Haha", "!", "the", "Biebs", "has", "million", "more", "followers", "than", "u.", "Logic", "says", "u", "have", "none", ".", "?"]
# ::lemmas ["Haha", "!", "the", "Biebs", "have", "million", "more", "follower", "than", "u.", "Logic", "say", "u", "have", "none", ".", "?"]
(c4-6 / multi-sentence
      :snt1 (c4-14 / haha
                   :mode expressive)
      :snt2 (c4-13 / follow-02
                   :ARG0 (c4-9 / person
                               :name (c4-10 / name
                                            :op1 "B Biebs"))
                   :ARG1-of (c4-7 / have-quant-91
                                  :ARG3 (c4-2 / more
                                              :quant 1000000)
                                  :ARG4 (c4-1 / follow-02
                                              :ARG0 (c4-5 / you))))
      :snt3 (c4-8 / say-01
                  :ARG0 (c4-12 / logic)
                  :ARG1 (c4-11 / have-03
                               :ARG0 (c4-3 / you)
                               :ARG1 (c4-4 / none)
                               :polarity -)
                  :polarity (c4-0 / amr-unknown)))

# ::snt well asshole, that is more followers then you. Apparently you can't follow logic. Take care or not.
# ::tokens ["well", "asshole", ",", "that", "is", "more", "followers", "then", "you", ".", "Apparently", "you", "ca", "n't", "follow", "logic", ".", "Take", "care", "or", "not", "."]
# ::lemmas ["well", "asshole", ",", "that", "be", "more", "follower", "then", "you", ".", "apparently", "you", "can", "not", "follow", "logic", ".", "take", "care", "or", "not", "."]
(c5-6 / multi-sentence
      :snt1 (c5-9 / say-01
                  :ARG0 (c5-8 / i)
                  :ARG1 (c5-15 / follow-02
                               :ARG0 (c5-0 / asshole)
                               :ARG1-of (c5-16 / have-quant-91
                                               :ARG3 (c5-2 / more)
                                               :ARG4 (c5-1 / follow-02
                                                           :ARG0 (c5-5 / you))))
                  :ARG2 c5-0
                  :mod (c5-13 / well))
      :snt2 (c5-17 / appear-02
                   :ARG1 (c5-10 / possible-01
                                :ARG1 (c5-11 / follow-02
                                             :ARG0 (c5-3 / you)
                                             :ARG1 (c5-14 / logic))
                                :polarity -))
      :snt3 (c5-12 / or
                   :op1 (c5-4 / care-03
                              :ARG0 c5-3)
                   :op2 (c5-7 / care-03
                              :ARG0 c5-3
                              :polarity -)))

# ::snt pretty sure you're arguing against yourself here... Re: your st argument that mcd's close when COMPUTERS introduced.
# ::tokens ["pretty", "sure", "you", "'re", "arguing", "against", "yourself", "here", "...", "Re", ":", "your", "st", "argument", "that", "mcd", "'s", "close", "when", "COMPUTERS", "introduced", "."]
# ::lemmas ["pretty", "sure", "you", "be", "argue", "against", "yourself", "here", "...", "re", ":", "your", "st", "argument", "that", "mcd", "'s", "close", "when", "computer", "introduce", "."]
(c6-7 / multi-sentence
      :snt1 (c6-11 / sure-02
                   :ARG0 (c6-10 / i)
                   :ARG1 (c6-0 / argue-01
                               :ARG0 (c6-6 / you)
                               :ARG2 (c6-14 / oppose-01
                                            :ARG0 c6-6
                                            :ARG1 c6-6)
                               :location (c6-16 / here))
                   :degree (c6-12 / pretty))
      :snt2 (c6-2 / reply-01
                  :ARG1 (c6-17 / argue-01
                               :ARG0 (c6-3 / you)
                               :ARG1 (c6-15 / close-06
                                            :ARG1 (c6-8 / product
                                                        :name (c6-13 / name
                                                                     :op1 "MCD"))
                                            :time (c6-4 / introduce-02
                                                        :ARG1 (c6-9 / company
                                                                    :name (c6-5 / name
                                                                                :op1 "CompUTERS"))))
                               :mod (c6-1 / st))))

# ::snt bro, u taught me mcd's demand is based on their employee supply. You're clearly in Mensa...
# ::tokens ["bro", ",", "u", "taught", "me", "mcd", "'s", "demand", "is", "based", "on", "their", "employee", "supply", ".", "You", "'re", "clearly", "in", "Mensa", "..."]
# ::lemmas ["bro", ",", "u", "teach", "i", "mcd", "'s", "demand", "be", "base", "on", "their", "employee", "supply", ".", "you", "be", "clearly", "in", "Mensa", "..."]
(c7-6 / multi-sentence
      :snt1 (c7-9 / say-01
                  :ARG0 (c7-8 / i)
                  :ARG1 (c7-1 / teach-01
                              :ARG0 (c7-10 / person
                                           :name (c7-11 / name
                                                        :op1 "bro"))
                              :ARG1 (c7-3 / base-02
                                          :ARG1 (c7-15 / demand-01
                                                       :ARG0 (c7-12 / organization
                                                                    :name (c7-4 / name
                                                                                :op1 "MCD")))
                                          :ARG2 (c7-0 / supply-01
                                                      :ARG0 c7-12
                                                      :ARG2 (c7-7 / person
                                                                  :ARG1-of (c7-2 / employ-01
                                                                                 :ARG0 c7-12))))
                              :ARG2 c7-8)
                  :ARG2 c7-10)
      :snt2 (c7-5 / you
                  :location c7-12
                  :name (c7-13 / name
                               :op1 "Mensa"))
      :ARG1-of (c7-14 / clear-06))

# ::snt who said anything about NO humans? Pretty dense interpretation even from a guy w/240 whopping followers.
# ::tokens ["who", "said", "anything", "about", "NO", "humans", "?", "Pretty", "dense", "interpretation", "even", "from", "a", "guy", "w/240", "whopping", "followers", "."]
# ::lemmas ["who", "say", "anything", "about", "no", "human", "?", "pretty", "dense", "interpretation", "even", "from", "a", "guy", "w/240", "whopping", "follower", "."]
(c8-3 / multi-sentence
      :snt1 (c8-6 / say-01
                  :ARG0 (c8-0 / amr-unknown)
                  :ARG1 (c8-11 / anything
                               :topic (c8-10 / human
                                             :polarity -)))
      :snt2 (c8-5 / interpret-01
                  :ARG0 (c8-4 / guy
                              :ARG0-of (c8-9 / follow-01
                                             :quant (c8-8 / whopping
                                                          :quant 240)
                                             :ARG1 c8-4))
                  :mod (c8-1 / even)
                  :mod (c8-2 / dense
                             :degree (c8-7 / pretty))))

# ::snt much like grocery stores. Computers are used to expand opportunity not restrict.
# ::tokens ["much", "like", "grocery", "stores", ".", "Computers", "are", "used", "to", "expand", "opportunity", "not", "restrict", "."]
# ::lemmas ["much", "like", "grocery", "store", ".", "computer", "be", "use", "to", "expand", "opportunity", "not", "restrict", "."]
(c9-5 / multi-sentence
      :snt1 (c9-1 / resemble-01
                  :ARG2 (c9-8 / store
                              :mod (c9-4 / grocery))
                  :degree (c9-3 / much))
      :snt2 (c9-7 / use-01
                  :ARG1 (c9-10 / computer)
                  :ARG2 (c9-0 / and
                              :op1 (c9-2 / expand-01
                                         :ARG0 c9-10
                                         :ARG1 (c9-9 / opportunity))
                              :op2 (c9-6 / restrict-01
                                         :ARG0 c9-10
                                         :ARG1 c9-9
                                         :polarity -))))

# ::snt there would be no residual income coming in. Think Henry Ford and his cars. Same model applies.
# ::tokens ["there", "would", "be", "no", "residual", "income", "coming", "in", ".", "Think", "Henry", "Ford", "and", "his", "cars", ".", "Same", "model", "applies", "."]
# ::lemmas ["there", "would", "be", "no", "residual", "income", "come", "in", ".", "think", "Henry", "Ford", "and", "his", "car", ".", "same", "model", "apply", "."]
(c10-6 / multi-sentence
       :snt1 (c10-13 / come-in-07
                     :ARG1 (c10-8 / income
                                  :mod (c10-2 / residual))
                     :polarity -)
       :snt2 (c10-1 / think-01
                    :ARG0 (c10-5 / you)
                    :ARG1 (c10-0 / and
                                 :op1 (c10-7 / car
                                             :poss (c10-10 / person
                                                           :name (c10-11 / name
                                                                         :op1 "Henry"
                                                                         :op2 "Ford")))
                                 :op2 (c10-3 / car
                                             :poss c10-10))
                    :mode imperative)
       :snt3 (c10-9 / apply-02
                    :ARG1 (c10-4 / model
                                 :ARG1-of (c10-12 / same-01))))

# ::snt oh hell, I am feeling generous and you have followers. If there were no humans working at McDonald's...
# ::tokens ["oh", "hell", ",", "I", "am", "feeling", "generous", "and", "you", "have", "followers", ".", "If", "there", "were", "no", "humans", "working", "at", "McDonald", "'s", "..."]
# ::lemmas ["oh", "hell", ",", "i", "be", "feel", "generous", "and", "you", "have", "follower", ".", "if", "there", "be", "no", "human", "work", "at", "McDonald", "'s", "..."]
(c11-3 / multi-sentence
       :snt1 (c11-0 / and
                    :op1 (c11-10 / feel-01
                                 :ARG0 (c11-6 / i)
                                 :ARG1 (c11-4 / generous-01
                                              :ARG0 c11-6))
                    :op2 (c11-1 / follow-02
                                :ARG0 (c11-2 / you))
                    :mod (c11-8 / oh-hell
                                :mode expressive))
       :snt2 (c11-11 / have-condition-91
                     :ARG2 (c11-9 / work-01
                                  :ARG0 (c11-5 / human)
                                  :ARG2 (c11-12 / company
                                                :name (c11-7 / name
                                                             :op1 "McDonald's"))
                                  :polarity -)))

# ::snt when did it suddenly become my problem to teach you supply and demand?
# ::tokens ["when", "did", "it", "suddenly", "become", "my", "problem", "to", "teach", "you", "supply", "and", "demand", "?"]
# ::lemmas ["when", "do", "it", "suddenly", "become", "my", "problem", "to", "teach", "you", "supply", "and", "demand", "?"]
(c12-3 / become-01
       :ARG1 (c12-2 / teach-01
                    :ARG0 (c12-5 / i)
                    :ARG1 (c12-0 / and
                                 :op1 (c12-6 / supply-01)
                                 :op2 (c12-9 / demand-01))
                    :ARG2 (c12-4 / you))
       :ARG2 (c12-7 / problem
                    :poss c12-5)
       :manner (c12-1 / sudden)
       :time (c12-8 / amr-unknown))

# ::snt does doubling workforce then naturally double their demand, too? I'd assign workers to every French fry...
# ::tokens ["does", "doubling", "workforce", "then", "naturally", "double", "their", "demand", ",", "too", "?", "I", "'d", "assign", "workers", "to", "every", "French", "fry", "..."]
# ::lemmas ["do", "double", "workforce", "then", "naturally", "double", "their", "demand", ",", "too", "?", "i", "would", "assign", "worker", "to", "every", "French", "fry", "..."]
(c13-8 / multi-sentence
       :snt1 (c13-5 / double-01
                    :ARG1 (c13-15 / workforce)
                    :ARG1-of (c13-13 / natural-03)
                    :ARG0-of (c13-17 / cause-01
                                     :ARG1 (c13-1 / double-01
                                                  :ARG1 (c13-4 / demand-01
                                                               :ARG0 (c13-2 / they))
                                                  :ARG1-of c13-13)
                                     :mod (c13-6 / too)))
       :polarity (c13-0 / amr-unknown)
       :snt2 (c13-11 / assign-01
                     :ARG0 (c13-12 / i)
                     :ARG1 (c13-14 / person
                                   :ARG0-of (c13-7 / work-01))
                     :ARG2 (c13-16 / fry-01
                                   :mod (c13-10 / country
                                                :name (c13-9 / name
                                                             :op1 "France"))
                                   :mod (c13-3 / every))))

# ::snt aw a supply side view of the world. Cause you know laying off your own workers is always smart.
# ::tokens ["aw", "a", "supply", "side", "view", "of", "the", "world", ".", "Cause", "you", "know", "laying", "off", "your", "own", "workers", "is", "always", "smart", "."]
# ::lemmas ["aw", "a", "supply", "side", "view", "of", "the", "world", ".", "cause", "you", "know", "lay", "off", "your", "own", "worker", "be", "always", "smart", "."]
(c14-5 / multi-sentence
       :snt1 (c14-10 / view-01
                     :ARG1 (c14-11 / world)
                     :mod (c14-7 / side
                                 :mod (c14-0 / supply-01))
                     :mod (c14-1 / aw
                                 :mode expressive))
       :snt2 (c14-13 / cause-01
                     :ARG0 (c14-2 / know-01
                                  :ARG0 (c14-4 / you)
                                  :ARG1 (c14-8 / smart-06
                                               :ARG1 (c14-12 / lay-off-02
                                                             :ARG0 c14-4
                                                             :ARG1 (c14-9 / person
                                                                          :ARG0-of (c14-3 / work-01)
                                                                          :poss c14-4))
                                               :time (c14-6 / always)))))

# ::snt and why this whole fucking post is a joke
# ::tokens ["and", "why", "this", "whole", "fucking", "post", "is", "a", "joke"]
# ::lemmas ["and", "why", "this", "whole", "fucking", "post", "be", "a", "joke"]
(c15-0 / and
       :op2 (c15-1 / thing
                   :ARG0-of (c15-7 / cause-01
                                   :ARG1 (c15-2 / joke-01
                                                :ARG2 (c15-4 / post-01
                                                             :mod (c15-6 / fucking
                                                                         :mode expressive)
                                                             :mod (c15-5 / whole)
                                                             :mod (c15-3 / this))))))

# ::snt that's why McDonald's hasn't replaced workers yet.
# ::tokens ["that", "'s", "why", "McDonald", "'s", "has", "n't", "replaced", "workers", "yet", "."]
# ::lemmas ["that", "be", "why", "McDonald", "'s", "have", "not", "replace", "worker", "yet", "."]
(c16-7 / cause-01
       :ARG0 (c16-0 / that)
       :ARG1 (c16-1 / replace-01
                    :ARG0 (c16-3 / company
                                 :name (c16-4 / name
                                              :op1 "McDonald's"))
                    :ARG1 (c16-5 / person
                                 :ARG0-of (c16-6 / work-01))
                    :time (c16-2 / yet)
                    :polarity -))

# ::snt if they lay of their workforce they cut their own demand.
# ::tokens ["if", "they", "lay", "of", "their", "workforce", "they", "cut", "their", "own", "demand", "."]
# ::lemmas ["if", "they", "lay", "of", "their", "workforce", "they", "cut", "their", "own", "demand", "."]
(c17-3 / cut-02
       :ARG0 (c17-0 / they)
       :ARG1 (c17-4 / demand-01
                    :ARG0 c17-0)
       :condition (c17-2 / lay-off-02
                         :ARG0 c17-0
                         :ARG1 (c17-1 / workforce
                                      :poss c17-0)))

# ::snt ya, show me any company that's been able to successfully integrate COMPUTERS...
# ::tokens ["ya", ",", "show", "me", "any", "company", "that", "'s", "been", "able", "to", "successfully", "integrate", "COMPUTERS", "..."]
# ::lemmas ["ya", ",", "show", "i", "any", "company", "that", "be", "be", "able", "to", "successfully", "integrate", "computer", "..."]
(c18-6 / show-01
       :ARG0 (c18-3 / you)
       :ARG1 (c18-9 / company
                    :mod (c18-0 / any)
                    :ARG1-of (c18-4 / capable-01
                                    :ARG2 (c18-5 / integrate-01
                                                 :ARG0 c18-9
                                                 :ARG1 (c18-2 / company
                                                              :name (c18-7 / name
                                                                           :op1 "CompUTERS"))
                                                 :ARG1-of (c18-1 / succeed-01))))
       :ARG2 (c18-8 / i)
       :mode imperative)

# ::snt Robotize wherever possible. Only way to keep cheap food bizs going... unless ppl accept less beef/chicken/fish/etc.
# ::tokens ["Robotize", "wherever", "possible", ".", "Only", "way", "to", "keep", "cheap", "food", "bizs", "going", "...", "unless", "ppl", "accept", "less", "beef", "/", "chicken", "/", "fish", "/", "etc", "."]
# ::lemmas ["robotize", "wherever", "possible", ".", "only", "way", "to", "keep", "cheap", "food", "bizs", "go", "...", "unless", "ppl", "accept", "less", "beef", "/", "chicken", "/", "fish", "/", "etc", "."]
(c19-18 / multi-sentence
        :snt1 (c19-3 / rob-01
                     :ARG0 (c19-17 / you)
                     :location (c19-1 / wherever
                                      :ARG1-of (c19-14 / possible-01))
                     :mode imperative)
        :snt2 (c19-4 / way
                     :mod (c19-19 / only)
                     :manner-of (c19-5 / keep-02
                                       :ARG1 (c19-7 / go-01
                                                    :ARG1 (c19-0 / business
                                                                 :mod (c19-2 / food)
                                                                 :ARG1-of (c19-10 / cheap-02))))
                     :condition (c19-11 / accept-01
                                        :ARG0 (c19-12 / we)
                                        :ARG1 (c19-8 / slash
                                                     :op1 (c19-6 / beef)
                                                     :op2 (c19-13 / chicken)
                                                     :op3 (c19-15 / fish)
                                                     :op4 (c19-16 / et-cetera)
                                                     :quant (c19-9 / less))
                                        :polarity -)))

# ::snt - Wait! Did say "creating" jobs, or "crating" jobs?! Better play that tape back...
# ::tokens ["-", "Wait", "!", "Did", "say", "\"", "creating", "\"", "jobs", ",", "or", "\"", "crating", "\"", "jobs", "?", "!", "Better", "play", "that", "tape", "back", "..."]
# ::lemmas ["-", "Wait", "!", "do", "say", "\"", "create", "\"", "job", ",", "or", "\"", "crate", "\"", "job", "?", "!", "well", "play", "that", "tape", "back", "..."]
(c20-7 / multi-sentence
       :snt1 (c20-15 / wait-01
                     :ARG1 (c20-6 / you)
                     :mode imperative)
       :snt2 (c20-12 / say-01
                     :ARG0 (c20-2 / you)
                     :ARG1 (c20-14 / or
                                   :op1 (c20-17 / create-01
                                                :ARG1 (c20-3 / job))
                                   :op2 (c20-13 / punish-01
                                                :ARG1 c20-3))
                     :polarity (c20-0 / amr-unknown)
                     :polarity (c20-11 / amr-unknown))
       :snt3 (c20-8 / play-back-04
                    :ARG0 (c20-10 / you)
                    :ARG1 (c20-1 / tape-02
                                 :mod (c20-4 / that))
                    :ARG1-of (c20-16 / have-degree-91
                                     :ARG2 (c20-9 / good-02
                                                  :ARG1 c20-8)
                                     :ARG3 (c20-5 / more))
                    :mode imperative))

# ::snt As predicted in the film "Idiocracy"
# ::tokens ["As", "predicted", "in", "the", "film", "\"", "Idiocracy", "\""]
# ::lemmas ["as", "predict", "in", "the", "film", "\"", "Idiocracy", "\""]
(c21-2 / resemble-01
       :ARG2 (c21-1 / predict-01
                    :location (c21-0 / film
                                     :name (c21-3 / name
                                                  :op1 "Idiocracy"))))

# ::snt Here is another pic if they do use computers
# ::tokens ["Here", "is", "another", "pic", "if", "they", "do", "use", "computers"]
# ::lemmas ["here", "be", "another", "pic", "if", "they", "do", "use", "computer"]
(c22-5 / have-condition-91
       :ARG1 (c22-4 / picture
                    :mod (c22-0 / another)
                    :location (c22-2 / here))
       :ARG2 (c22-3 / use-01
                    :ARG0 (c22-1 / they)
                    :ARG1 (c22-6 / computer)))

# ::snt the problem isn't rising minimum wage, it's that there already aren't enough jobs for everyone to work hours bc automation
# ::tokens ["the", "problem", "is", "n't", "rising", "minimum", "wage", ",", "it", "'s", "that", "there", "already", "are", "n't", "enough", "jobs", "for", "everyone", "to", "work", "hours", "bc", "automation"]
# ::lemmas ["the", "problem", "be", "not", "rise", "minimum", "wage", ",", "it", "be", "that", "there", "already", "be", "not", "enough", "job", "for", "everyone", "to", "work", "hours", "bc", "automation"]
(c23-16 / contrast-01
        :ARG1 (c23-12 / problem
                      :domain (c23-2 / rise-01
                                     :ARG1 (c23-14 / wage
                                                   :mod (c23-7 / minimum)))
                      :polarity -)
        :ARG2 (c23-8 / problem
                     :domain (c23-3 / job
                                    :ARG1-of (c23-15 / have-quant-91
                                                     :ARG3 (c23-4 / enough)
                                                     :ARG6 (c23-5 / work-01
                                                                  :ARG0 (c23-13 / everyone)
                                                                  :duration (c23-6 / multiple
                                                                                   :op1 (c23-1 / temporal-quantity
                                                                                               :unit (c23-10 / hour)
                                                                                               :quant 1)))
                                                     :time (c23-0 / already)
                                                     :ARG1-of (c23-9 / cause-01
                                                                     :ARG0 (c23-11 / automate-01))
                                                     :polarity -))))
