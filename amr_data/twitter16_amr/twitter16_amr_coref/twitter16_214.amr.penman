# ::snt Asparagus water = PEE!!
# ::tokens ["Asparagus", "water", "=", "PEE", "!", "!"]
# ::lemmas ["asparagus", "water", "=", "PEE", "!", "!"]
(c1-3 / equal-01
      :ARG1 (c1-1 / water
                  :source (c1-0 / asparagus))
      :ARG2 (c1-2 / pee))

# ::snt oh my god this cracked me up
# ::tokens ["oh", "my", "god", "this", "cracked", "me", "up"]
# ::lemmas ["oh", "my", "god", "this", "crack", "i", "up"]
(c2-3 / crack-up-03
      :ARG0 (c2-2 / this)
      :ARG1 (c2-1 / i)
      :mod (c2-0 / oh-my-god
                 :mode expressive))

# ::snt I have toilet water here, varities: clean, yellow and brown. $2 Canadian/litre
# ::tokens ["I", "have", "toilet", "water", "here", ",", "varities", ":", "clean", ",", "yellow", "and", "brown", ".", "$", "2", "Canadian", "/", "litre"]
# ::lemmas ["i", "have", "toilet", "water", "here", ",", "varitie", ":", "clean", ",", "yellow", "and", "brown", ".", "$", "2", "Canadian", "/", "litre"]
(c3-18 / multi-sentence
       :snt1 (c3-10 / have-03
                    :ARG0 (c3-2 / i)
                    :ARG1 (c3-5 / water
                                :purpose (c3-0 / toilet)
                                :mod (c3-4 / varities
                                           :ARG1-of (c3-7 / mean-01
                                                          :ARG2 (c3-12 / and
                                                                       :op1 (c3-11 / clean-04)
                                                                       :op2 (c3-17 / yellow)
                                                                       :op3 (c3-1 / brown)))))
                    :location (c3-14 / here))
       :snt2 (c3-6 / rate-entity-91
                   :ARG1 (c3-8 / monetary-quantity
                               :unit (c3-15 / dollar)
                               :quant 2)
                   :ARG2 (c3-16 / volume-quantity
                                :unit (c3-9 / liter)
                                :quant 1)
                   :mod (c3-13 / country
                               :name (c3-3 / name
                                           :op1 "Canada"))))

# ::snt hahahah ew, who wants their pee to smell like that all day?
# ::tokens ["hahahah", "ew", ",", "who", "wants", "their", "pee", "to", "smell", "like", "that", "all", "day", "?"]
# ::lemmas ["hahahah", "ew", ",", "who", "want", "their", "pee", "to", "smell", "like", "that", "all", "day", "?"]
(c4-8 / want-01
      :ARG0 (c4-0 / amr-unknown)
      :ARG1 (c4-6 / smell-02
                  :ARG1 (c4-7 / pee-01
                              :ARG0 (c4-1 / they))
                  :ARG2 (c4-4 / that)
                  :time (c4-9 / day
                              :mod (c4-5 / all)))
      :mod (c4-2 / ah
                 :mode expressive)
      :mod (c4-3 / ew
                 :mode expressive))

# ::snt whole foods RT Whole Foods' $6 asparagus water is just water with three stalks of asparagus
# ::tokens ["whole", "foods", "RT", "Whole", "Foods", "'", "$", "6", "asparagus", "water", "is", "just", "water", "with", "three", "stalks", "of", "asparagus"]
# ::lemmas ["whole", "food", "RT", "Whole", "Foods", "'", "$", "6", "asparagus", "water", "be", "just", "water", "with", "three", "stalk", "of", "asparagus"]
(c5-5 / multi-sentence
      :snt1 (c5-11 / food
                   :mod (c5-10 / whole))
      :snt2 (c5-3 / water
                  :mod (c5-1 / just)
                  :ARG0-of (c5-12 / have-03
                                  :ARG1 (c5-8 / stalk
                                              :part-of (c5-0 / asparagus)
                                              :quant 3))
                  :domain (c5-6 / water
                                :mod c5-0)
                  :ARG1-of (c5-13 / cost-01
                                  :ARG2 (c5-2 / monetary-quantity
                                              :unit (c5-4 / dollar)
                                              :quant 6))
                  :poss (c5-7 / company
                              :name (c5-9 / name
                                          :op1 "Whole"
                                          :op2 "Foods"))))

# ::snt that's incredible
# ::tokens ["that", "'s", "incredible"]
# ::lemmas ["that", "be", "incredible"]
(c6-1 / incredible
      :domain (c6-0 / that))

# ::snt Brilliant. If people are dumb enough to pay for it kudos to WF for taking advantage of idiots
# ::tokens ["Brilliant", ".", "If", "people", "are", "dumb", "enough", "to", "pay", "for", "it", "kudos", "to", "WF", "for", "taking", "advantage", "of", "idiots"]
# ::lemmas ["brilliant", ".", "if", "people", "be", "dumb", "enough", "to", "pay", "for", "it", "kudo", "to", "WF", "for", "take", "advantage", "of", "idiot"]
(c9-7 / multi-sentence
      :snt1 (c9-3 / brilliant-01)
      :snt2 (c9-14 / have-condition-91
                   :ARG1 (c9-4 / kudos
                               :beneficiary (c9-12 / person
                                                   :name (c9-13 / name
                                                                :op1 "WF"))
                               :ARG1-of (c9-15 / cause-01
                                               :ARG0 (c9-1 / take-advantage-02
                                                           :ARG0 (c9-8 / person)
                                                           :ARG1 (c9-11 / idiot))))
                   :ARG2 (c9-9 / have-degree-91
                               :ARG1 (c9-0 / person)
                               :ARG2 (c9-5 / dumb)
                               :ARG3 (c9-2 / enough)
                               :ARG6 (c9-10 / pay-01
                                            :ARG0 c9-0
                                            :ARG3 (c9-6 / it)))))

# ::snt I love this list. ORNAMENTAL KALE.
# ::tokens ["I", "love", "this", "list", ".", "ORNAMENTAL", "KALE", "."]
# ::lemmas ["i", "love", "this", "list", ".", "ORNAMENTAL", "KALE", "."]
(c10-2 / multi-sentence
       :snt1 (c10-7 / love-01
                    :ARG0 (c10-3 / i)
                    :ARG1 (c10-1 / list
                                 :mod (c10-0 / this)))
       :snt2 (c10-4 / sell-01
                    :ARG1 (c10-5 / product
                                 :name (c10-6 / name
                                              :op1 "Orleans"
                                              :op2 "Kale"))))

# ::snt YUK!
# ::tokens ["YUK", "!"]
# ::lemmas ["YUK", "!"]
(c11-0 / country
       :name (c11-1 / name
                    :op1 "UK"))

# ::snt those sound good though lol
# ::tokens ["those", "sound", "good", "though", "lol"]
# ::lemmas ["those", "sound", "good", "though", "lol"]
(c12-6 / have-concession-91
       :ARG1 (c12-4 / sound-01
                    :ARG1 (c12-0 / that)
                    :ARG2 (c12-2 / good-02)
                    :ARG3 (c12-5 / laugh-01
                                 :ARG0 (c12-3 / i)
                                 :manner (c12-1 / loud)
                                 :mode expressive)))

# ::snt you get what you pay for
# ::tokens ["you", "get", "what", "you", "pay", "for"]
# ::lemmas ["you", "get", "what", "you", "pay", "for"]
(c14-2 / get-01
       :ARG0 (c14-1 / you)
       :ARG1 (c14-0 / thing
                    :ARG1-of (c14-3 / pay-01
                                    :ARG0 c14-1)))

# ::snt : times Whole Foods went too damn far
# ::tokens [":", "times", "Whole", "Foods", "went", "too", "damn", "far"]
# ::lemmas [":", "time", "Whole", "Foods", "go", "too", "damn", "far"]
(c15-3 / go-01
       :ARG1 (c15-7 / company
                    :name (c15-4 / name
                                 :op1 "Whole"
                                 :op2 "Foods"))
       :ARG4 (c15-5 / far
                    :ARG1-of (c15-6 / have-degree-91
                                    :ARG2 (c15-1 / damn)
                                    :ARG3 (c15-0 / too)))
       :time (c15-2 / time))

# ::snt I've never heard of this and I work for Whole Foods.
# ::tokens ["I", "'ve", "never", "heard", "of", "this", "and", "I", "work", "for", "Whole", "Foods", "."]
# ::lemmas ["i", "'ve", "never", "hear", "of", "this", "and", "i", "work", "for", "Whole", "Foods", "."]
(c16-0 / and
       :op1 (c16-6 / hear-01
                   :ARG0 (c16-3 / i)
                   :ARG1 (c16-1 / this)
                   :time (c16-2 / ever)
                   :polarity -)
       :op2 (c16-5 / work-01
                   :ARG0 c16-3
                   :ARG2 (c16-7 / company
                                :name (c16-4 / name
                                             :op1 "Whole"
                                             :op2 "Foods"))))

# ::snt - and there are plenty of douchey people who are happy to buy it. Suckers deserve to be swindled.
# ::tokens ["-", "and", "there", "are", "plenty", "of", "douchey", "people", "who", "are", "happy", "to", "buy", "it", ".", "Suckers", "deserve", "to", "be", "swindled", "."]
# ::lemmas ["-", "and", "there", "be", "plenty", "of", "douchey", "people", "who", "be", "happy", "to", "buy", "it", ".", "sucker", "deserve", "to", "be", "swindle", "."]
(c18-5 / multi-sentence
       :snt1 (c18-0 / and
                    :op2 (c18-10 / happy-01
                                 :ARG0 (c18-4 / buy-01
                                              :ARG0 (c18-9 / person
                                                           :mod (c18-11 / douchey)
                                                           :quant (c18-6 / plenty))
                                              :ARG1 (c18-7 / it))
                                 :ARG1 c18-9))
       :snt2 (c18-3 / deserve-01
                    :ARG0 (c18-1 / person
                                 :ARG0-of (c18-8 / suck-03))
                    :ARG1 (c18-2 / swindle-01
                                 :ARG1 c18-1)))

# ::snt if people are willing to pay that much, they deserve that money.
# ::tokens ["if", "people", "are", "willing", "to", "pay", "that", "much", ",", "they", "deserve", "that", "money", "."]
# ::lemmas ["if", "people", "be", "willing", "to", "pay", "that", "much", ",", "they", "deserve", "that", "money", "."]
(c19-7 / deserve-01
       :ARG0 (c19-5 / person)
       :ARG1 (c19-3 / money
                    :mod (c19-0 / that))
       :condition (c19-6 / will-02
                         :ARG0 c19-5
                         :ARG1 (c19-4 / pay-01
                                      :ARG0 c19-5
                                      :ARG1 (c19-1 / much
                                                   :mod (c19-2 / that)))))

# ::snt loooool
# ::tokens ["loooool"]
# ::lemmas ["loooool"]
(c20-0 / oooool
       :mode expressive)

# ::snt nothing to write home about
# ::tokens ["nothing", "to", "write", "home", "about"]
# ::lemmas ["nothing", "to", "write", "home", "about"]
(c21-2 / nothing
       :ARG1-of (c21-0 / write-01
                       :location (c21-1 / home)))

# ::snt times Whole Foods went too damn far
# ::tokens ["times", "Whole", "Foods", "went", "too", "damn", "far"]
# ::lemmas ["time", "Whole", "Foods", "go", "too", "damn", "far"]
(c22-0 / time
       :time-of (c22-3 / go-01
                       :ARG1 (c22-7 / company
                                    :name (c22-4 / name
                                                 :op1 "Whole"
                                                 :op2 "Foods"))
                       :ARG4 (c22-5 / far
                                    :ARG2-of (c22-6 / have-degree-91
                                                    :ARG1 c22-3
                                                    :ARG3 (c22-1 / too)
                                                    :ARG6 (c22-2 / damn)))))

# ::snt article mentions "bone broth", that's all I need to know.
# ::tokens ["article", "mentions", "\"", "bone", "broth", "\"", ",", "that", "'s", "all", "I", "need", "to", "know", "."]
# ::lemmas ["article", "mention", "\"", "bone", "broth", "\"", ",", "that", "be", "all", "i", "need", "to", "know", "."]
(c23-4 / mention-01
       :ARG0 (c23-0 / article)
       :ARG1 (c23-1 / broth
                    :mod (c23-3 / bone))
       :ARG1-of (c23-2 / know-01
                       :ARG0 (c23-5 / i)
                       :ARG1-of (c23-6 / need-01
                                       :ARG0 c23-5)
                       :mod (c23-7 / all)))

# ::snt Out of control RT Whole Foods' $6 asparagus water is just water with three stalks of asparagus in it
# ::tokens ["Out", "of", "control", "RT", "Whole", "Foods", "'", "$", "6", "asparagus", "water", "is", "just", "water", "with", "three", "stalks", "of", "asparagus", "in", "it"]
# ::lemmas ["out", "of", "control", "RT", "Whole", "Foods", "'", "$", "6", "asparagus", "water", "be", "just", "water", "with", "three", "stalk", "of", "asparagus", "in", "it"]
(c24-10 / water
        :mod (c24-1 / just)
        :ARG0-of (c24-11 / have-03
                         :ARG1 (c24-7 / stalk
                                      :part-of (c24-0 / asparagus)
                                      :quant 3))
        :domain (c24-3 / water
                       :ARG1-of (c24-12 / cost-01
                                        :ARG2 (c24-5 / monetary-quantity
                                                     :unit (c24-4 / dollar)
                                                     :quant 6))
                       :poss (c24-6 / company
                                    :name (c24-8 / name
                                                 :op1 "Whole"
                                                 :op2 "Foods")
                                    :ARG1-of (c24-9 / out-06)))
        :ARG1-of (c24-2 / control-01
                        :polarity -))

# ::snt I got my hands on the recipe and could be persuaded to share
# ::tokens ["I", "got", "my", "hands", "on", "the", "recipe", "and", "could", "be", "persuaded", "to", "share"]
# ::lemmas ["i", "get", "my", "hand", "on", "the", "recipe", "and", "could", "be", "persuade", "to", "share"]
(c25-0 / and
       :op1 (c25-2 / get-04
                   :ARG0 (c25-4 / i)
                   :ARG1 (c25-7 / in-ones-hands-04
                                :ARG0 c25-4
                                :ARG1 (c25-1 / recipe)))
       :op2 (c25-6 / possible-01
                   :ARG1 (c25-3 / persuade-01
                                :ARG1 c25-4
                                :ARG2 (c25-5 / share-01
                                             :ARG0 c25-4
                                             :ARG1 c25-1))))

# ::snt I have a great business plan if you want in: $7 carrot water.
# ::tokens ["I", "have", "a", "great", "business", "plan", "if", "you", "want", "in", ":", "$", "7", "carrot", "water", "."]
# ::lemmas ["i", "have", "a", "great", "business", "plan", "if", "you", "want", "in", ":", "$", "7", "carrot", "water", "."]
(c26-11 / have-03
        :ARG0 (c26-8 / i)
        :ARG1 (c26-9 / plan-01
                     :ARG0 c26-8
                     :ARG1 (c26-0 / business)
                     :mod (c26-4 / great))
        :ARG1-of (c26-5 / mean-01
                        :ARG2 (c26-10 / water
                                      :mod (c26-12 / carrot)
                                      :ARG1-of (c26-6 / cost-01
                                                      :ARG2 (c26-1 / monetary-quantity
                                                                   :unit (c26-2 / dollar)
                                                                   :quant 7))))
        :condition (c26-3 / want-01
                          :ARG0 (c26-7 / you)
                          :ARG1 c26-9))

# ::snt And America claims it's losing its middle class
# ::tokens ["And", "America", "claims", "it", "'s", "losing", "its", "middle", "class"]
# ::lemmas ["and", "America", "claim", "it", "be", "lose", "its", "middle", "class"]
(c28-0 / and
       :op2 (c28-6 / claim-01
                   :ARG0 (c28-3 / country
                                :name (c28-4 / name
                                             :op1 "America"))
                   :ARG1 (c28-5 / lose-02
                                :ARG0 c28-3
                                :ARG1 (c28-1 / class
                                             :mod (c28-2 / middle)
                                             :poss c28-3))))

# ::snt Quite innovative. Why didn't l think of this! Lol.
# ::tokens ["Quite", "innovative", ".", "Why", "did", "n't", "l", "think", "of", "this", "!", "Lol", "."]
# ::lemmas ["quite", "innovative", ".", "why", "do", "not", "l", "think", "of", "this", "!", "Lol", "."]
(c29-4 / multi-sentence
       :snt1 (c29-6 / innovate-01
                    :degree (c29-5 / quite))
       :snt2 (c29-1 / think-01
                    :ARG0 (c29-8 / i)
                    :ARG1 (c29-3 / this)
                    :ARG1-of (c29-9 / cause-01
                                    :ARG0 (c29-0 / amr-unknown))
                    :polarity -)
       :snt3 (c29-7 / laugh-01
                    :ARG0 c29-8
                    :manner (c29-2 / loud)
                    :mode expressive))

# ::snt The "well-monied" will truly buy anything!
# ::tokens ["The", "\"", "well", "-", "monied", "\"", "will", "truly", "buy", "anything", "!"]
# ::lemmas ["the", "\"", "well", "-", "monied", "\"", "will", "truly", "buy", "anything", "!"]
(c30-2 / buy-01
       :ARG0 (c30-4 / person
                    :ARG1-of (c30-3 / private-03))
       :ARG1 (c30-0 / anything)
       :ARG1-of (c30-1 / true-01)
       :mode expressive)

# ::snt INGENIOUS RT : Whole Foods' $6 asparagus water is just water w stalks of asparagus
# ::tokens ["INGENIOUS", "RT", ":", "Whole", "Foods", "'", "$", "6", "asparagus", "water", "is", "just", "water", "w", "stalks", "of", "asparagus"]
# ::lemmas ["INGENIOUS", "RT", ":", "Whole", "Foods", "'", "$", "6", "asparagus", "water", "be", "just", "water", "w", "stalk", "of", "asparagus"]
(c31-0 / and
       :op1 (c31-10 / publication
                    :name (c31-11 / name
                                  :op1 "INGENIOUS"
                                  :op2 "RT"))
       :op2 (c31-12 / water
                    :ARG1-of (c31-13 / cost-01
                                     :ARG2 (c31-5 / monetary-quantity
                                                  :unit (c31-2 / dollar)
                                                  :quant 6))
                    :domain (c31-3 / water
                                   :source (c31-8 / asparagus)
                                   :mod (c31-1 / just)
                                   :ARG0-of (c31-6 / wade-01
                                                   :ARG1 (c31-9 / stalk
                                                                :part-of c31-8)))
                    :poss (c31-7 / company
                                 :name (c31-4 / name
                                              :op1 "Whole"
                                              :op2 "Foods"))))

# ::snt I can make a whole bunch of asparagus water for . What's next? $8 for mushroom water?
# ::tokens ["I", "can", "make", "a", "whole", "bunch", "of", "asparagus", "water", "for", ".", "What", "'s", "next", "?", "$", "8", "for", "mushroom", "water", "?"]
# ::lemmas ["i", "can", "make", "a", "whole", "bunch", "of", "asparagus", "water", "for", ".", "what", "be", "next", "?", "$", "8", "for", "mushroom", "water", "?"]
(c32-6 / multi-sentence
       :snt1 (c32-10 / possible-01
                     :ARG1 (c32-2 / make-01
                                  :ARG0 (c32-8 / i)
                                  :ARG1 (c32-13 / water
                                                :source (c32-0 / asparagus)
                                                :quant (c32-3 / bunch
                                                              :mod (c32-4 / whole)))
                                  :purpose (c32-15 / amr-unknown)))
       :snt2 (c32-1 / amr-unknown
                    :mod (c32-11 / next)
                    :domain (c32-9 / monetary-quantity
                                   :unit (c32-5 / dollar)
                                   :ARG3-of (c32-14 / cost-01
                                                    :ARG1 (c32-7 / water
                                                                 :source (c32-12 / mushroom)))
                                   :quant 8)))

# ::snt what on earth!??? Also, I see bruce getting this ala smart water
# ::tokens ["what", "on", "earth", "!", "?", "?", "?", "Also", ",", "I", "see", "bruce", "getting", "this", "ala", "smart", "water"]
# ::lemmas ["what", "on", "earth", "!", "?", "?", "?", "also", ",", "i", "see", "bruce", "get", "this", "ala", "smart", "water"]
(c33-6 / multi-sentence
       :snt1 (c33-0 / amr-unknown
                    :location (c33-4 / earth))
       :snt2 (c33-9 / see-01
                    :ARG0 (c33-8 / i)
                    :ARG1 (c33-7 / get-01
                                 :ARG0 (c33-5 / bruce)
                                 :ARG1 (c33-10 / water
                                               :ARG1-of (c33-1 / smart-06)
                                               :mod (c33-2 / this)
                                               :mod (c33-11 / ala)))
                    :mod (c33-3 / also)))

# ::snt or take a page from Charlie Kelly's book..... Milk Steak.
# ::tokens ["or", "take", "a", "page", "from", "Charlie", "Kelly", "'s", "book", ".....", "Milk", "Steak", "."]
# ::lemmas ["or", "take", "a", "page", "from", "Charlie", "Kelly", "'s", "book", ".....", "Milk", "Steak", "."]
(c34-7 / or
       :op2 (c34-0 / take-01
                   :ARG0 (c34-3 / you)
                   :ARG1 (c34-5 / page)
                   :ARG2 (c34-1 / book
                                :name (c34-6 / name
                                             :op1 "Milk"
                                             :op2 "Steak")
                                :source (c34-4 / person
                                               :name (c34-2 / name
                                                            :op1 "Charlie"
                                                            :op2 "Kelly")))
                   :mode imperative))

# ::snt Time to short asparagus?
# ::tokens ["Time", "to", "short", "asparagus", "?"]
# ::lemmas ["time", "to", "short", "asparagus", "?"]
(c35-1 / time
       :time-of (c35-2 / short-06
                       :ARG1 (c35-0 / asparagus))
       :polarity (c35-3 / amr-unknown))

# ::snt it still makes your pee stink...
# ::tokens ["it", "still", "makes", "your", "pee", "stink", "..."]
# ::lemmas ["it", "still", "make", "your", "pee", "stink", "..."]
(c36-3 / stink-01
       :ARG0 (c36-2 / it)
       :ARG1 (c36-4 / pee
                    :poss (c36-1 / you))
       :mod (c36-0 / still))

# ::snt given that I dislike asparagus, I'd never even contemplate buying a product like this. just nasty.
# ::tokens ["given", "that", "I", "dislike", "asparagus", ",", "I", "'d", "never", "even", "contemplate", "buying", "a", "product", "like", "this", ".", "just", "nasty", "."]
# ::lemmas ["give", "that", "i", "dislike", "asparagus", ",", "i", "would", "never", "even", "contemplate", "buy", "a", "product", "like", "this", ".", "just", "nasty", "."]
(c37-7 / multi-sentence
       :snt1 (c37-13 / consider-02
                     :ARG0 (c37-9 / i)
                     :ARG1 (c37-4 / buy-01
                                  :ARG0 c37-9
                                  :ARG1 (c37-10 / product
                                                :ARG1-of (c37-2 / resemble-01
                                                                :ARG2 (c37-1 / this))))
                     :time (c37-3 / ever)
                     :mod (c37-11 / even)
                     :ARG1-of (c37-8 / cause-01
                                     :ARG0 (c37-5 / dislike-01
                                                  :ARG0 c37-9
                                                  :ARG1 (c37-0 / asparagus)))
                     :polarity -)
       :snt2 (c37-12 / nasty
                     :mod (c37-6 / just)))

# ::snt let's not talk about it
# ::tokens ["let", "'s", "not", "talk", "about", "it"]
# ::lemmas ["let", "us", "not", "talk", "about", "it"]
(c38-2 / talk-01
       :ARG0 (c38-1 / we)
       :ARG1 (c38-0 / it)
       :polarity -
       :mode imperative)

# ::snt I wonder if just drinking the water that they soaked in affects the smell too...
# ::tokens ["I", "wonder", "if", "just", "drinking", "the", "water", "that", "they", "soaked", "in", "affects", "the", "smell", "too", "..."]
# ::lemmas ["i", "wonder", "if", "just", "drink", "the", "water", "that", "they", "soak", "in", "affect", "the", "smell", "too", "..."]
(c39-9 / wonder-01
       :ARG0 (c39-7 / i)
       :ARG1 (c39-2 / truth-value
                    :polarity-of (c39-0 / affect-01
                                        :ARG0 (c39-10 / drink-01
                                                      :ARG0 (c39-4 / they)
                                                      :ARG1 (c39-5 / water
                                                                   :ARG1-of (c39-8 / soak-01
                                                                                   :ARG0 c39-4))
                                                      :mod (c39-3 / just))
                                        :ARG1 (c39-1 / smell-02)
                                        :mod (c39-6 / too))))

# ::snt LMAO!!
# ::tokens ["LMAO", "!", "!"]
# ::lemmas ["lmao", "!", "!"]
(c40-2 / laugh-01
       :ARG1 (c40-0 / ass
                    :part-of (c40-3 / i))
       :mod (c40-1 / off)
       :mode expressive)

# ::snt vegetables soaking and sitting in water, is basically just dirty fungus and bacteria filled water...
# ::tokens ["vegetables", "soaking", "and", "sitting", "in", "water", ",", "is", "basically", "just", "dirty", "fungus", "and", "bacteria", "filled", "water", "..."]
# ::lemmas ["vegetable", "soak", "and", "sit", "in", "water", ",", "be", "basically", "just", "dirty", "fungus", "and", "bacteria", "fill", "water", "..."]
(c42-0 / and
       :op1 (c42-8 / soak-01
                   :ARG1 (c42-9 / vegetable)
                   :ARG2 (c42-10 / water))
       :op2 (c42-1 / sit-01
                   :ARG1 c42-9
                   :ARG2 (c42-4 / water))
       :domain (c42-12 / and
                       :op1 (c42-11 / fungus
                                    :ARG1-of (c42-5 / dirty-02))
                       :op2 (c42-2 / fill-01
                                   :ARG1 c42-4
                                   :ARG2 (c42-3 / bacterium))
                       :mod (c42-6 / just)
                       :mod (c42-7 / basic)))

# ::snt Is the water made of Unicorn tears?
# ::tokens ["Is", "the", "water", "made", "of", "Unicorn", "tears", "?"]
# ::lemmas ["be", "the", "water", "make", "of", "Unicorn", "tear", "?"]
(c43-2 / make-01
       :polarity (c43-0 / amr-unknown)
       :ARG1 (c43-4 / water)
       :ARG2 (c43-1 / tear
                    :mod (c43-3 / unicorn)))

# ::snt I didn't even know I need this.
# ::tokens ["I", "did", "n't", "even", "know", "I", "need", "this", "."]
# ::lemmas ["i", "do", "not", "even", "know", "i", "need", "this", "."]
(c44-2 / know-01
       :ARG0 (c44-3 / i)
       :ARG1 (c44-4 / need-01
                    :ARG0 c44-3
                    :ARG1 (c44-0 / this))
       :mod (c44-1 / even)
       :polarity -)

# ::snt Wait, don't they stock that next to the reverse osmosis glacier melt bong water?
# ::tokens ["Wait", ",", "do", "n't", "they", "stock", "that", "next", "to", "the", "reverse", "osmosis", "glacier", "melt", "bong", "water", "?"]
# ::lemmas ["wait", ",", "do", "not", "they", "stock", "that", "next", "to", "the", "reverse", "osmosis", "glaci", "melt", "bong", "water", "?"]
(c45-0 / and
       :op1 (c45-12 / wait-01
                    :ARG1 (c45-6 / you)
                    :mode imperative)
       :op2 (c45-9 / stock-01
                   :ARG0 (c45-1 / they)
                   :ARG1 (c45-4 / that)
                   :location (c45-10 / next-to
                                     :op1 (c45-7 / melt-01
                                                 :ARG1 (c45-8 / glacier)
                                                 :mod (c45-11 / osmosis)
                                                 :ARG1-of (c45-2 / reverse-01))
                                     :mod (c45-5 / water
                                                 :mod (c45-3 / bong)))
                   :polarity (c45-13 / amr-unknown)
                   :polarity -))

# ::snt what!
# ::tokens ["what", "!"]
# ::lemmas ["what", "!"]
(c46-0 / amr-unknown
       :mode expressive)

# ::snt "$6 asparagus water"
# ::tokens ["\"", "$", "6", "asparagus", "water", "\""]
# ::lemmas ["\"", "$", "6", "asparagus", "water", "\""]
(c47-2 / water
       :mod (c47-0 / asparagus)
       :ARG1-of (c47-3 / cost-01
                       :ARG2 (c47-1 / monetary-quantity
                                    :unit (c47-4 / dollar)
                                    :quant 6)))

# ::snt I guess you can just combine any items and call it those two things, like Tire Pear or Atheism Pudding or Leaf Steak
# ::tokens ["I", "guess", "you", "can", "just", "combine", "any", "items", "and", "call", "it", "those", "two", "things", ",", "like", "Tire", "Pear", "or", "Atheism", "Pudding", "or", "Leaf", "Steak"]
# ::lemmas ["i", "guess", "you", "can", "just", "combine", "any", "item", "and", "call", "it", "those", "two", "thing", ",", "like", "Tire", "Pear", "or", "Atheism", "Pudding", "or", "Leaf", "Steak"]
(c48-7 / guess-01
       :ARG0 (c48-3 / i)
       :ARG1 (c48-14 / possible-01
                     :ARG1 (c48-11 / and
                                   :op1 (c48-10 / combine-01
                                                :ARG0 (c48-16 / you)
                                                :ARG1 (c48-8 / item
                                                             :mod (c48-9 / any))
                                                :mod (c48-1 / just))
                                   :op2 (c48-13 / call-01
                                                :ARG0 c48-16
                                                :ARG1 c48-8
                                                :ARG2 (c48-0 / thing
                                                             :mod (c48-2 / that)
                                                             :example (c48-18 / or
                                                                              :op1 (c48-6 / thing
                                                                                          :name (c48-4 / name
                                                                                                       :op1 "Tire"
                                                                                                       :op2 "Pear"))
                                                                              :op2 (c48-17 / thing
                                                                                           :name (c48-5 / name
                                                                                                        :op1 "Atheism"
                                                                                                        :op2 "Pudding"))
                                                                              :op3 (c48-12 / thing
                                                                                           :name (c48-15 / name
                                                                                                         :op1 "Leak"
                                                                                                         :op2 "Steak")))
                                                             :quant 2)))))

# ::snt If people fall for it, can you blame the sellers?
# ::tokens ["If", "people", "fall", "for", "it", ",", "can", "you", "blame", "the", "sellers", "?"]
# ::lemmas ["if", "people", "fall", "for", "it", ",", "can", "you", "blame", "the", "seller", "?"]
(c50-7 / possible-01
       :ARG1 (c50-2 / blame-01
                    :ARG0 (c50-3 / you)
                    :ARG1 (c50-4 / person
                                 :ARG0-of (c50-6 / sell-01)))
       :polarity (c50-0 / amr-unknown)
       :condition (c50-8 / fall-10
                         :ARG1 (c50-1 / person)
                         :ARG2 (c50-5 / it)))
