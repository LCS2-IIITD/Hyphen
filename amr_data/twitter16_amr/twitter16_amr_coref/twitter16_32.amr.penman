# ::snt Great news from fbi. Our livelihood is based on some percentage game. Omg. Smh.
# ::tokens ["Great", "news", "from", "fbi", ".", "Our", "livelihood", "is", "based", "on", "some", "percentage", "game", ".", "Omg", ".", "Smh", "."]
# ::lemmas ["great", "news", "from", "fbi", ".", "our", "livelihood", "be", "base", "on", "some", "percentage", "game", ".", "Omg", ".", "Smh", "."]
(c1-4 / multi-sentence
      :snt1 (c1-9 / news
                  :mod (c1-3 / great)
                  :source (c1-8 / publication
                                :name (c1-2 / name
                                            :op1 "Fbi")))
      :snt2 (c1-1 / base-02
                  :ARG1 (c1-12 / livelihood
                               :poss (c1-11 / we))
                  :ARG2 (c1-5 / game
                              :mod (c1-6 / percentage
                                         :mod (c1-7 / some))))
      :snt3 (c1-10 / omg
                   :mode expressive)
      :snt4 (c1-0 / smh
                  :mode expressive))

# ::snt Jindal can't act like this is news to him, I've known the hadjis were coming for weeks.
# ::tokens ["Jindal", "ca", "n't", "act", "like", "this", "is", "news", "to", "him", ",", "I", "'ve", "known", "the", "hadjis", "were", "coming", "for", "weeks", "."]
# ::lemmas ["jindal", "can", "not", "act", "like", "this", "be", "news", "to", "he", ",", "i", "'ve", "know", "the", "hadji", "be", "come", "for", "weeks", "."]
(c2-0 / and
      :op1 (c2-8 / possible-01
                 :ARG1 (c2-13 / act-01
                              :ARG0 (c2-5 / person
                                          :name (c2-9 / name
                                                      :op1 "Jindal"))
                              :ARG1 (c2-2 / news
                                          :domain (c2-1 / this)
                                          :beneficiary c2-5))
                 :polarity -)
      :op2 (c2-3 / know-01
                 :ARG0 (c2-7 / i)
                 :ARG1 (c2-11 / come-01
                              :ARG1 (c2-12 / hadjis)
                              :duration (c2-6 / multiple
                                              :op1 (c2-4 / temporal-quantity
                                                         :unit (c2-10 / week)
                                                         :quant 1)))))

# ::snt What I don't understand is why he was totally unaware-suspicious or incompetent
# ::tokens ["What", "I", "do", "n't", "understand", "is", "why", "he", "was", "totally", "unaware", "-", "suspicious", "or", "incompetent"]
# ::lemmas ["what", "i", "do", "not", "understand", "be", "why", "he", "be", "totally", "unaware", "-", "suspicious", "or", "incompetent"]
(c3-5 / understand-01
      :ARG0 (c3-4 / i)
      :ARG1 (c3-0 / thing
                  :ARG0-of (c3-9 / cause-01
                                 :ARG1 (c3-1 / realize-01
                                             :ARG0 (c3-8 / he)
                                             :ARG1 (c3-7 / or
                                                         :op1 (c3-6 / suspicious-03
                                                                    :ARG0 c3-8)
                                                         :op2 (c3-3 / competent-01
                                                                    :ARG1 c3-8
                                                                    :polarity -))
                                             :degree (c3-2 / total)
                                             :polarity -)))
      :polarity -)

# ::snt what a fool! What info? The made up papers they have? Idiot!
# ::tokens ["what", "a", "fool", "!", "What", "info", "?", "The", "made", "up", "papers", "they", "have", "?", "Idiot", "!"]
# ::lemmas ["what", "a", "fool", "!", "what", "info", "?", "the", "make", "up", "paper", "they", "have", "?", "Idiot", "!"]
(c4-4 / multi-sentence
      :snt1 (c4-8 / fool
                  :degree (c4-6 / so))
      :snt2 (c4-5 / information
                  :mod (c4-0 / amr-unknown))
      :snt3 (c4-7 / paper
                  :ARG1-of (c4-3 / make-up-10)
                  :ARG1-of (c4-9 / have-03
                                 :ARG0 (c4-1 / they)))
      :snt4 (c4-2 / idiot
                  :mode expressive))

# ::snt WOW just WOW
# ::tokens ["WOW", "just", "WOW"]
# ::lemmas ["WOW", "just", "WOW"]
(c5-0 / warm-07
      :mod (c5-1 / just))

# ::snt Shld have been governing ur state instead of running for prez with %. Get real....! Now you have to take 'em!
# ::tokens ["Shld", "have", "been", "governing", "ur", "state", "instead", "of", "running", "for", "prez", "with", "%", ".", "Get", "real", "....", "!", "Now", "you", "have", "to", "take", "'em", "!"]
# ::lemmas ["Shld", "have", "be", "govern", "ur", "state", "instead", "of", "run", "for", "prez", "with", "%", ".", "get", "real", "....", "!", "now", "you", "have", "to", "take", "'em", "!"]
(c6-6 / multi-sentence
      :snt1 (c6-7 / govern-01
                  :ARG0 (c6-0 / they)
                  :ARG1 (c6-13 / state
                               :poss (c6-5 / you))
                  :ARG1-of (c6-12 / instead-of-91
                                  :ARG2 (c6-1 / run-02
                                              :ARG0 c6-5
                                              :ARG1 (c6-14 / prez)
                                              :manner (c6-8 / percentage))))
      :snt2 (c6-9 / get-03
                  :ARG1 (c6-2 / you)
                  :ARG2 (c6-11 / real-04
                               :ARG1 c6-2)
                  :mode imperative)
      :snt3 (c6-16 / obligate-01
                   :ARG1 (c6-10 / you)
                   :ARG2 (c6-3 / take-01
                               :ARG0 c6-10
                               :ARG1 (c6-4 / they))
                   :time (c6-15 / now)))

# ::snt Too late idiot.
# ::tokens ["Too", "late", "idiot", "."]
# ::lemmas ["too", "late", "idiot", "."]
(c7-2 / say-01
      :ARG1 (c7-4 / have-degree-91
                  :ARG2 (c7-3 / late)
                  :ARG3 (c7-0 / too))
      :ARG2 (c7-1 / idiot))

# ::snt Each state has the right to refuse refugees. I wouldn't be surprised if he's just trying to look tough for the people.
# ::tokens ["Each", "state", "has", "the", "right", "to", "refuse", "refugees", ".", "I", "would", "n't", "be", "surprised", "if", "he", "'s", "just", "trying", "to", "look", "tough", "for", "the", "people", "."]
# ::lemmas ["each", "state", "have", "the", "right", "to", "refuse", "refugee", ".", "i", "would", "not", "be", "surprised", "if", "he", "be", "just", "try", "to", "look", "tough", "for", "the", "people", "."]
(c8-7 / multi-sentence
      :snt1 (c8-3 / right-05
                  :ARG1 (c8-10 / state
                               :mod (c8-4 / each))
                  :ARG2 (c8-8 / refuse-01
                              :ARG0 c8-10
                              :ARG1 (c8-1 / refugee)))
      :snt2 (c8-0 / surprise-01
                  :ARG0 (c8-2 / try-01
                              :ARG0 (c8-13 / he)
                              :ARG1 (c8-12 / look-02
                                           :ARG0 c8-13
                                           :ARG1 (c8-6 / tough-03
                                                       :ARG0 c8-13)
                                           :ARG2 (c8-11 / people))
                              :mod (c8-5 / just))
                  :ARG1 (c8-9 / i)
                  :polarity -))

# ::snt Really Jindal? Tell Obama No. You're going to trust this Administration? God help us!!!!
# ::tokens ["Really", "Jindal", "?", "Tell", "Obama", "No", ".", "You", "'re", "going", "to", "trust", "this", "Administration", "?", "God", "help", "us", "!", "!", "!", "!"]
# ::lemmas ["really", "jindal", "?", "tell", "Obama", "no", ".", "you", "be", "go", "to", "trust", "this", "Administration", "?", "God", "help", "we", "!", "!", "!", "!"]
(c9-19 / multi-sentence
       :snt1 (c9-15 / person
                    :name (c9-4 / name
                                :op1 "Jindal")
                    :ARG1-of (c9-6 / real-04)
                    :polarity (c9-12 / amr-unknown))
       :snt2 (c9-0 / tell-01
                   :ARG0 (c9-18 / you)
                   :ARG1 (c9-7 / no)
                   :ARG2 (c9-14 / person
                                :name (c9-16 / name
                                             :op1 "Obama"))
                   :mode imperative)
       :snt3 (c9-3 / trust-02
                   :ARG0 (c9-2 / you)
                   :ARG1 (c9-9 / government-organization
                               :ARG0-of (c9-11 / administrate-01)
                               :mod (c9-8 / this))
                   :polarity (c9-1 / amr-unknown))
       :snt4 (c9-10 / help-01
                    :ARG0 (c9-17 / person
                                 :name (c9-13 / name
                                              :op1 "God"))
                    :ARG2 (c9-5 / we)
                    :mode imperative))

# ::snt How this can in any way be judged to be an unfair or politically motivated request is beyond me.
# ::tokens ["How", "this", "can", "in", "any", "way", "be", "judged", "to", "be", "an", "unfair", "or", "politically", "motivated", "request", "is", "beyond", "me", "."]
# ::lemmas ["how", "this", "can", "in", "any", "way", "be", "judge", "to", "be", "an", "unfair", "or", "politically", "motivated", "request", "be", "beyond", "i", "."]
(c10-4 / beyond
       :op1 (c10-8 / i)
       :topic (c10-1 / thing
                     :manner-of (c10-3 / judge-01
                                       :ARG1 (c10-5 / this)
                                       :ARG2 (c10-2 / request-01
                                                    :ARG1-of (c10-10 / fair-01
                                                                     :polarity -)
                                                    :ARG1-of (c10-6 / motivate-01
                                                                    :manner (c10-9 / politics)))
                                       :ARG1-of (c10-7 / possible-01)
                                       :manner (c10-0 / any))))

# ::snt Refuse to let them into your State. All governors should do the same. Keep America safe.
# ::tokens ["Refuse", "to", "let", "them", "into", "your", "State", ".", "All", "governors", "should", "do", "the", "same", ".", "Keep", "America", "safe", "."]
# ::lemmas ["refuse", "to", "let", "they", "into", "your", "State", ".", "all", "governor", "should", "do", "the", "same", ".", "keep", "America", "safe", "."]
(c11-7 / multi-sentence
       :snt1 (c11-3 / refuse-01
                    :ARG0 (c11-6 / you)
                    :ARG1 (c11-14 / let-01
                                  :ARG0 c11-6
                                  :ARG1 (c11-2 / they)
                                  :destination (c11-10 / state
                                                       :poss c11-6))
                    :mode imperative)
       :snt2 (c11-9 / recommend-01
                    :ARG1 (c11-17 / do-02
                                  :ARG0 (c11-11 / person
                                                :ARG0-of (c11-16 / have-org-role-91
                                                                 :ARG2 (c11-8 / governor))
                                                :mod (c11-0 / all))
                                  :ARG1 (c11-4 / thing
                                               :ARG1-of (c11-1 / same-01))))
       :snt3 (c11-5 / keep-02
                    :ARG1 (c11-12 / safe-01
                                  :ARG1 (c11-15 / country
                                                :name (c11-13 / name
                                                              :op1 "America")))))

# ::snt Well thank heaven! Another letter written to Obama. I'm sure that will put a stop to this madness.
# ::tokens ["Well", "thank", "heaven", "!", "Another", "letter", "written", "to", "Obama", ".", "I", "'m", "sure", "that", "will", "put", "a", "stop", "to", "this", "madness", "."]
# ::lemmas ["well", "thank", "heaven", "!", "another", "letter", "write", "to", "Obama", ".", "i", "be", "sure", "that", "will", "put", "a", "stop", "to", "this", "madness", "."]
(c12-7 / multi-sentence
       :snt1 (c12-2 / thank-01
                    :ARG0 (c12-8 / i)
                    :ARG1 (c12-14 / heaven)
                    :mod (c12-12 / well))
       :snt2 (c12-13 / letter
                     :ARG1-of (c12-5 / write-01
                                     :ARG2 (c12-10 / person
                                                   :name (c12-11 / name
                                                                 :op1 "Obama")))
                     :mod (c12-0 / another))
       :snt3 (c12-9 / sure-02
                    :ARG0 (c12-3 / i)
                    :ARG1 (c12-1 / stop-01
                                 :ARG0 c12-13
                                 :ARG1 (c12-4 / madness
                                              :mod (c12-6 / this)))))

# ::snt why doesn't he stop them?he has the power.
# ::tokens ["why", "does", "n't", "he", "stop", "them?he", "has", "the", "power", "."]
# ::lemmas ["why", "do", "not", "he", "stop", "them?he", "have", "the", "power", "."]
(c13-2 / multi-sentence
       :snt1 (c13-8 / cause-01
                    :ARG0 (c13-0 / amr-unknown)
                    :ARG1 (c13-4 / stop-01
                                 :ARG0 (c13-7 / he)
                                 :ARG1 (c13-1 / they)
                                 :polarity -))
       :snt2 (c13-3 / have-03
                    :ARG0 (c13-5 / he)
                    :ARG1 (c13-6 / power)))

# ::snt . Now he wants this? We want leaders who think about this BEFORE an attack!!
# ::tokens [".", "Now", "he", "wants", "this", "?", "We", "want", "leaders", "who", "think", "about", "this", "BEFORE", "an", "attack", "!", "!"]
# ::lemmas [".", "now", "he", "want", "this", "?", "we", "want", "leader", "who", "think", "about", "this", "before", "an", "attack", "!", "!"]
(c14-6 / multi-sentence
       :snt1 (c14-10 / want-01
                     :polarity (c14-0 / amr-unknown)
                     :ARG0 (c14-12 / he)
                     :ARG1 (c14-1 / this)
                     :time (c14-8 / now))
       :snt2 (c14-3 / want-01
                    :ARG0 (c14-7 / we)
                    :ARG1 (c14-9 / person
                                 :ARG0-of (c14-11 / lead-02)
                                 :ARG0-of (c14-4 / think-01
                                                 :ARG2 (c14-5 / this)
                                                 :time (c14-2 / before
                                                              :op1 (c14-13 / attack-01))))))

# ::snt Jindal demands information. Pretty damn late for that. Call out the National Guard and stop the problem now
# ::tokens ["Jindal", "demands", "information", ".", "Pretty", "damn", "late", "for", "that", ".", "Call", "out", "the", "National", "Guard", "and", "stop", "the", "problem", "now"]
# ::lemmas ["jindal", "demand", "information", ".", "pretty", "damn", "late", "for", "that", ".", "call", "out", "the", "National", "Guard", "and", "stop", "the", "problem", "now"]
(c15-6 / multi-sentence
       :snt1 (c15-16 / demand-01
                     :ARG0 (c15-11 / person
                                   :name (c15-12 / name
                                                 :op1 "Jindal"))
                     :ARG1 (c15-9 / information))
       :snt2 (c15-14 / late
                     :mod (c15-7 / pretty)
                     :ARG1-of (c15-15 / cause-01
                                      :ARG0 (c15-2 / that)))
       :snt3 (c15-0 / and
                    :op1 (c15-8 / call-out-15
                                :ARG0 (c15-5 / you)
                                :ARG1 (c15-3 / military
                                             :name (c15-4 / name
                                                          :op1 "National"
                                                          :op2 "Guard"))
                                :mode imperative)
                    :op2 (c15-10 / stop-01
                                 :ARG0 c15-5
                                 :ARG1 (c15-1 / problem)
                                 :time (c15-13 / now)
                                 :mode imperative)))

# ::snt No "refugees".
# ::tokens ["No", "\"", "refugees", "\"", "."]
# ::lemmas ["no", "\"", "refugee", "\"", "."]
(c16-0 / refugee
       :polarity -)

# ::snt Jindal needs to man up &amp; block entry until vetting can be guaranteed like Michigan is doing. Not prez maaterial.
# ::tokens ["Jindal", "needs", "to", "man", "up", "&", "amp", ";", "block", "entry", "until", "vetting", "can", "be", "guaranteed", "like", "Michigan", "is", "doing", ".", "Not", "prez", "maaterial", "."]
# ::lemmas ["jindal", "need", "to", "man", "up", "&", "amp", ";", "block", "entry", "until", "vetting", "can", "be", "guarantee", "like", "Michigan", "be", "do", ".", "not", "prez", "maaterial", "."]
(c17-18 / multi-sentence
        :snt1 (c17-1 / need-01
                     :ARG0 (c17-12 / person
                                   :name (c17-5 / name
                                                :op1 "Jindal"))
                     :ARG1 (c17-9 / and
                                  :op1 (c17-4 / man-up-00
                                              :ARG0 c17-12)
                                  :op2 (c17-8 / amp-00
                                              :ARG0 c17-12)))
        :snt2 (c17-0 / block-01
                     :ARG0 (c17-17 / you)
                     :ARG1 (c17-16 / enter-01
                                   :ARG0 c17-17)
                     :time (c17-11 / until
                                   :op1 (c17-10 / possible-01
                                                :ARG1 (c17-6 / guarantee-01
                                                             :ARG1 (c17-2 / vet-01))))
                     :ARG1-of (c17-3 / resemble-01
                                     :ARG2 (c17-14 / do-02
                                                   :ARG0 (c17-7 / state
                                                                :name (c17-13 / name
                                                                              :op1 "Michigan")))))
        :snt3 (c17-15 / prepubescent
                      :polarity -))

# ::snt . doesn't Louisiana have a State police force ? Why send a letter?
# ::tokens [".", "does", "n't", "Louisiana", "have", "a", "State", "police", "force", "?", "Why", "send", "a", "letter", "?"]
# ::lemmas [".", "do", "not", "Louisiana", "have", "a", "State", "police", "force", "?", "why", "send", "a", "letter", "?"]
(c18-2 / multi-sentence
       :snt1 (c18-10 / have-03
                     :ARG0 (c18-4 / state
                                  :name (c18-5 / name
                                               :op1 "Louisiana"))
                     :ARG1 (c18-9 / force
                                  :mod (c18-6 / police)
                                  :mod (c18-0 / state))
                     :polarity (c18-1 / amr-unknown)
                     :polarity -)
       :snt2 (c18-11 / cause-01
                     :ARG0 (c18-3 / amr-unknown)
                     :ARG1 (c18-7 / send-01
                                  :ARG1 (c18-8 / letter))))

# ::snt Wow I for once totally agree with Jindal!
# ::tokens ["Wow", "I", "for", "once", "totally", "agree", "with", "Jindal", "!"]
# ::lemmas ["wow", "i", "for", "once", "totally", "agree", "with", "jindal", "!"]
(c19-0 / agree-01
       :ARG0 (c19-2 / i)
       :ARG2 (c19-3 / person
                    :name (c19-4 / name
                                 :op1 "Jindal"))
       :mod (c19-5 / wow
                   :mode expressive)
       :degree (c19-1 / total)
       :mod (c19-6 / for-once)
       :mode expressive)

# ::snt huh?
# ::tokens ["huh", "?"]
# ::lemmas ["huh", "?"]
(c20-1 / huh
       :polarity (c20-0 / amr-unknown))

# ::snt Is he just now getting it?
# ::tokens ["Is", "he", "just", "now", "getting", "it", "?"]
# ::lemmas ["be", "he", "just", "now", "get", "it", "?"]
(c21-2 / get-01
       :polarity (c21-0 / amr-unknown)
       :ARG0 (c21-5 / he)
       :ARG1 (c21-3 / it)
       :time (c21-4 / now
                    :mod (c21-1 / just)))

# ::snt Info? So the EFFING what. Demand that they be sent back. Round them up &amp; by the th Amendment SEND THEM HOMR
# ::tokens ["Info", "?", "So", "the", "EFFING", "what", ".", "Demand", "that", "they", "be", "sent", "back", ".", "Round", "them", "up", "&", "amp", ";", "by", "the", "th", "Amendment", "SEND", "THEM", "HOMR"]
# ::lemmas ["Info", "?", "so", "the", "EFFING", "what", ".", "demand", "that", "they", "be", "send", "back", ".", "round", "they", "up", "&", "amp", ";", "by", "the", "th", "Amendment", "send", "they", "homr"]
(c22-9 / multi-sentence
       :snt1 (c22-11 / information
                     :polarity (c22-0 / amr-unknown))
       :snt2 (c22-16 / infer-01
                     :ARG1 (c22-17 / amr-unknown))
       :snt3 (c22-6 / demand-01
                    :ARG1 (c22-12 / send-01
                                  :ARG1 (c22-1 / they)
                                  :ARG2 (c22-5 / back)))
       :snt4 (c22-2 / and
                    :op1 (c22-3 / round-up-02
                                :ARG1 (c22-7 / they))
                    :op2 (c22-10 / amp))
       :snt5 c22-12
       :ARG0 (c22-15 / law
                     :name (c22-13 / name
                                   :op1 "Th"
                                   :op2 "Amendment"))
       :ARG1 (c22-8 / they)
       :snt6 (c22-4 / end-01
                    :ARG0 c22-15)
       :ARG1 (c22-14 / person
                     :name c22-13
                     :op1 "Hormr")
       :ARG2 c22-8)

# ::snt LA isn't a big state, how does anything this big happen without him knowing ?
# ::tokens ["LA", "is", "n't", "a", "big", "state", ",", "how", "does", "anything", "this", "big", "happen", "without", "him", "knowing", "?"]
# ::lemmas ["LA", "be", "not", "a", "big", "state", ",", "how", "do", "anything", "this", "big", "happen", "without", "he", "know", "?"]
(c23-6 / multi-sentence
       :snt1 (c23-8 / state
                    :mod (c23-3 / big)
                    :domain (c23-0 / state
                                   :name (c23-9 / name
                                                :op1 "LA"))
                    :polarity -)
       :snt2 (c23-10 / have-manner-91
                     :ARG1 (c23-1 / anything
                                  :mod (c23-2 / this)
                                  :mod (c23-5 / big))
                     :ARG2 (c23-4 / know-01
                                  :ARG0 (c23-7 / he)
                                  :polarity -)
                     :manner (c23-11 / amr-unknown)))

# ::snt Zero chance Obama responds.No one can put demands on a king
# ::tokens ["Zero", "chance", "Obama", "responds", ".", "No", "one", "can", "put", "demands", "on", "a", "king"]
# ::lemmas ["Zero", "chance", "Obama", "respond", ".", "no", "one", "can", "put", "demand", "on", "a", "king"]
(c24-5 / multi-sentence
       :snt1 (c24-11 / chance-02
                     :ARG1 (c24-1 / respond-01
                                  :ARG0 (c24-8 / person
                                               :name (c24-9 / name
                                                            :op1 "Obama")))
                     :ARG2 (c24-7 / zero)
                     :polarity -)
       :snt2 (c24-6 / possible-01
                    :ARG1 (c24-2 / demand-01
                                 :ARG0 (c24-3 / no-one)
                                 :ARG2 (c24-0 / person
                                              :ARG0-of (c24-10 / have-org-role-91
                                                               :ARG2 (c24-4 / king))))))

# ::snt u go Bobby!
# ::tokens ["u", "go", "Bobby", "!"]
# ::lemmas ["u", "go", "Bobby", "!"]
(c25-0 / go-03
       :ARG0 (c25-1 / person
                    :name (c25-2 / name
                                 :op1 "Bobby"))
       :mode imperative)

# ::snt as if didn't know. He needs to put his guards around that place. I'm sure some will/have leaked out.
# ::tokens ["as", "if", "did", "n't", "know", ".", "He", "needs", "to", "put", "his", "guards", "around", "that", "place", ".", "I", "'m", "sure", "some", "will", "/", "have", "leaked", "out", "."]
# ::lemmas ["as", "if", "do", "not", "know", ".", "he", "need", "to", "put", "his", "guard", "around", "that", "place", ".", "i", "be", "sure", "some", "will", "/", "have", "leak", "out", "."]
(c26-17 / multi-sentence
        :snt1 (c26-5 / resemble-01
                     :ARG2 (c26-6 / know-01
                                  :ARG0 (c26-2 / i)
                                  :polarity -))
        :snt2 (c26-3 / need-01
                     :ARG0 (c26-11 / he)
                     :ARG1 (c26-15 / put-01
                                   :ARG0 (c26-14 / he)
                                   :ARG1 (c26-13 / person
                                                 :ARG0-of (c26-7 / guard-01
                                                                 :ARG1 c26-14))
                                   :ARG2 (c26-12 / around
                                                 :op1 (c26-16 / place
                                                              :mod (c26-1 / that)))))
        :snt3 (c26-8 / sure-02
                     :ARG0 (c26-10 / i)
                     :ARG1 (c26-18 / or
                                   :op1 (c26-9 / leak-01
                                               :ARG0 (c26-0 / some))
                                   :op2 (c26-4 / leak-01
                                               :ARG0 c26-0))))

# ::snt so it's true
# ::tokens ["so", "it", "'s", "true"]
# ::lemmas ["so", "it", "be", "true"]
(c27-1 / true-01
       :ARG1 (c27-0 / it))

# ::snt put them back on a plane and send them to WDC, San Fransico, Hawaii and Kenya. That should cover all the bases.
# ::tokens ["put", "them", "back", "on", "a", "plane", "and", "send", "them", "to", "WDC", ",", "San", "Fransico", ",", "Hawaii", "and", "Kenya", ".", "That", "should", "cover", "all", "the", "bases", "."]
# ::lemmas ["put", "they", "back", "on", "a", "plane", "and", "send", "they", "to", "WDC", ",", "San", "Fransico", ",", "Hawaii", "and", "Kenya", ".", "that", "should", "cover", "all", "the", "basis", "."]
(c28-21 / multi-sentence
        :snt1 (c28-14 / and
                      :op1 (c28-18 / put-01
                                   :ARG0 (c28-20 / you)
                                   :ARG1 (c28-1 / they)
                                   :ARG2 (c28-16 / plane)
                                   :direction (c28-3 / back)
                                   :mode imperative)
                      :op2 (c28-11 / send-01
                                   :ARG0 c28-20
                                   :ARG1 c28-1
                                   :ARG2 (c28-13 / and
                                                 :op1 (c28-10 / government-organization
                                                              :name (c28-5 / name
                                                                           :op1 "WDC"))
                                                 :op2 (c28-12 / city
                                                              :name (c28-8 / name
                                                                           :op1 "San"
                                                                           :op2 "Fransico"))
                                                 :op3 (c28-0 / state
                                                             :name (c28-19 / name
                                                                           :op1 "Hawaii"))
                                                 :op4 (c28-17 / country
                                                              :name (c28-15 / name
                                                                            :op1 "Kenya")))
                                   :mode imperative))
        :snt2 (c28-6 / recommend-01
                     :ARG1 (c28-7 / cover-01
                                  :ARG0 (c28-4 / that)
                                  :ARG1 (c28-9 / base
                                               :mod (c28-2 / all)))))

# ::snt he should have listened to from the get go
# ::tokens ["he", "should", "have", "listened", "to", "from", "the", "get", "go"]
# ::lemmas ["he", "should", "have", "listen", "to", "from", "the", "get", "go"]
(c29-0 / recommend-01
       :ARG1 (c29-2 / listen-01
                    :ARG0 (c29-4 / he)
                    :time (c29-3 / from
                                 :op1 (c29-1 / get-go))))

# ::snt You're just here to incite hate. Have fun with that. Nice try.
# ::tokens ["You", "'re", "just", "here", "to", "incite", "hate", ".", "Have", "fun", "with", "that", ".", "Nice", "try", "."]
# ::lemmas ["you", "be", "just", "here", "to", "incite", "hate", ".", "have", "fun", "with", "that", ".", "nice", "try", "."]
(c30-6 / multi-sentence
       :snt1 (c30-2 / be-located-at-91
                    :ARG1 (c30-5 / you)
                    :ARG2 (c30-12 / here)
                    :mod (c30-1 / just)
                    :purpose (c30-8 / incite-01
                                    :ARG0 c30-5
                                    :ARG1 (c30-7 / hate-01)))
       :snt2 (c30-9 / have-06
                    :ARG0 (c30-3 / you)
                    :ARG1 (c30-11 / fun-01
                                  :ARG0 c30-3
                                  :ARG1 (c30-0 / that)))
       :snt3 (c30-4 / try-01
                    :ARG1-of (c30-10 / nice-01)))

# ::snt anchor... baby!
# ::tokens ["anchor", "...", "baby", "!"]
# ::lemmas ["anchor", "...", "baby", "!"]
(c31-0 / and
       :op1 (c31-2 / anchor)
       :op2 (c31-1 / baby))

# ::snt . Jindal doesn't need to demand info from anyone. Maybe just check at .
# ::tokens [".", "Jindal", "does", "n't", "need", "to", "demand", "info", "from", "anyone", ".", "Maybe", "just", "check", "at", "."]
# ::lemmas [".", "jindal", "do", "not", "need", "to", "demand", "info", "from", "anyone", ".", "maybe", "just", "check", "at", "."]
(c32-4 / multi-sentence
       :snt1 (c32-8 / need-01
                    :ARG0 (c32-7 / person
                                 :name (c32-2 / name
                                              :op1 "Jindal"))
                    :ARG1 (c32-10 / demand-01
                                  :ARG0 c32-7
                                  :ARG1 (c32-6 / information)
                                  :ARG2 (c32-0 / anyone))
                    :polarity -)
       :snt2 (c32-5 / possible-01
                    :ARG1 (c32-9 / check-01
                                 :ARG0 (c32-3 / you)
                                 :mod (c32-1 / just)
                                 :mode imperative)))

# ::snt Every Governor, Police Dept, and FBI needs to assert themselves to take steps for Identifying these people.
# ::tokens ["Every", "Governor", ",", "Police", "Dept", ",", "and", "FBI", "needs", "to", "assert", "themselves", "to", "take", "steps", "for", "Identifying", "these", "people", "."]
# ::lemmas ["every", "Governor", ",", "Police", "Dept", ",", "and", "FBI", "need", "to", "assert", "themselves", "to", "take", "step", "for", "identify", "these", "people", "."]
(c33-11 / need-01
        :ARG0 (c33-0 / and
                     :op1 (c33-10 / person
                                  :ARG0-of (c33-13 / have-org-role-91
                                                   :ARG2 (c33-5 / governor)))
                     :op2 (c33-14 / department
                                  :topic (c33-6 / police))
                     :op3 (c33-7 / government-organization
                                 :name (c33-4 / name
                                              :op1 "FBI"))
                     :mod (c33-3 / every))
        :ARG1 (c33-8 / assert-02
                     :ARG0 c33-0
                     :ARG1 (c33-9 / step-01
                                  :ARG1 c33-0
                                  :ARG2 (c33-12 / identify-01
                                                :ARG0 c33-0
                                                :ARG1 (c33-1 / person
                                                             :mod (c33-2 / this))))))

# ::snt Jindal's parents came legally. He should be celebrated, not hated upon. Do some homework.
# ::tokens ["Jindal", "'s", "parents", "came", "legally", ".", "He", "should", "be", "celebrated", ",", "not", "hated", "upon", ".", "Do", "some", "homework", "."]
# ::lemmas ["jindal", "'s", "parent", "come", "legally", ".", "he", "should", "be", "celebrate", ",", "not", "hate", "upon", ".", "do", "some", "homework", "."]
(c34-6 / multi-sentence
       :snt1 (c34-16 / come-01
                     :ARG1 (c34-10 / person
                                   :ARG0-of (c34-15 / have-rel-role-91
                                                    :ARG1 (c34-5 / person
                                                                 :name (c34-11 / name
                                                                               :op1 "Jindal"))
                                                    :ARG2 (c34-0 / parent)))
                     :ARG1-of (c34-14 / legal-02))
       :snt2 (c34-7 / contrast-01
                    :ARG1 (c34-1 / recommend-01
                                 :ARG1 (c34-2 / celebrate-01
                                              :ARG1 (c34-8 / he)))
                    :ARG2 (c34-9 / hate-01
                                 :ARG1 c34-8
                                 :polarity -))
       :snt3 (c34-3 / do-02
                    :ARG0 (c34-4 / you)
                    :ARG1 (c34-13 / homework
                                  :quant (c34-12 / some))
                    :mode imperative))

# ::snt Call out the Louisiana guard and seal your borders. Raise the stars and bars and dare the bastard to take it.
# ::tokens ["Call", "out", "the", "Louisiana", "guard", "and", "seal", "your", "borders", ".", "Raise", "the", "stars", "and", "bars", "and", "dare", "the", "bastard", "to", "take", "it", "."]
# ::lemmas ["call", "out", "the", "Louisiana", "guard", "and", "seal", "your", "border", ".", "raise", "the", "star", "and", "bar", "and", "dare", "the", "bastard", "to", "take", "it", "."]
(c35-10 / multi-sentence
        :snt1 (c35-0 / and
                     :op1 (c35-17 / call-out-15
                                  :ARG0 (c35-8 / you)
                                  :ARG1 (c35-9 / guard-01
                                               :ARG0 (c35-13 / state
                                                             :name (c35-14 / name
                                                                           :op1 "Louisiana"))))
                     :op2 (c35-1 / seal-01
                                 :ARG0 c35-8
                                 :ARG1 (c35-6 / border
                                              :poss c35-8)))
        :snt2 (c35-12 / and
                      :op1 (c35-5 / raise-01
                                  :ARG1 (c35-3 / and
                                               :op1 (c35-15 / star)
                                               :op2 (c35-11 / bar)))
                      :op2 (c35-7 / dare-01
                                  :ARG1 (c35-2 / bastard)
                                  :ARG2 (c35-4 / take-01
                                               :ARG0 c35-2
                                               :ARG1 (c35-16 / it)))))

# ::snt We all want to know. But, better yet, let's not take them in
# ::tokens ["We", "all", "want", "to", "know", ".", "But", ",", "better", "yet", ",", "let", "'s", "not", "take", "them", "in"]
# ::lemmas ["we", "all", "want", "to", "know", ".", "but", ",", "well", "yet", ",", "let", "us", "not", "take", "they", "in"]
(c36-6 / multi-sentence
       :snt1 (c36-9 / want-01
                    :ARG0 (c36-3 / we
                                 :mod (c36-0 / all))
                    :ARG1 (c36-4 / know-01
                                 :ARG0 c36-3))
       :snt2 (c36-11 / contrast-01
                     :ARG2 (c36-1 / take-01
                                  :ARG0 c36-3
                                  :polarity -
                                  :mode imperative)
                     :ARG1 (c36-5 / they)
                     :ARG3 (c36-8 / inside)
                     :ARG1-of (c36-10 / have-degree-91
                                      :ARG2 (c36-7 / good-02
                                                   :ARG1 c36-1)
                                      :ARG3 (c36-2 / more))))

# ::snt there isn't any info Bobby
# ::tokens ["there", "is", "n't", "any", "info", "Bobby"]
# ::lemmas ["there", "be", "not", "any", "info", "Bobby"]
(c37-2 / say-01
       :ARG0 (c37-1 / i)
       :ARG1 (c37-5 / information
                    :mod (c37-0 / any)
                    :polarity -)
       :ARG2 (c37-3 / person
                    :name (c37-4 / name
                                 :op1 "Bobby")))

# ::snt Bobby Jindal was born in Baton Rouge, LA. Genius. You really need to research, race baiter troll.
# ::tokens ["Bobby", "Jindal", "was", "born", "in", "Baton", "Rouge", ",", "LA", ".", "Genius", ".", "You", "really", "need", "to", "research", ",", "race", "baiter", "troll", "."]
# ::lemmas ["Bobby", "Jindal", "be", "bear", "in", "Baton", "Rouge", ",", "LA", ".", "Genius", ".", "you", "really", "need", "to", "research", ",", "race", "baiter", "troll", "."]
(c38-7 / multi-sentence
       :snt1 (c38-4 / bear-02
                    :ARG1 (c38-12 / person
                                  :name (c38-13 / name
                                                :op1 "Bobby"
                                                :op2 "Jindal"))
                    :location (c38-15 / city
                                      :name (c38-5 / name
                                                   :op1 "Baton"
                                                   :op2 "Rouge")
                                      :location c38-15
                                      :name (c38-14 / name
                                                    :op1 "LA")))
       :snt2 (c38-8 / genius)
       :snt3 (c38-2 / need-01
                    :ARG0 (c38-6 / you)
                    :ARG1 (c38-3 / research-01
                                 :ARG0 c38-6
                                 :ARG1 (c38-1 / troll-01
                                              :ARG2 (c38-9 / person
                                                           :ARG0-of (c38-10 / bait-01
                                                                            :ARG2 (c38-11 / race)))))
                    :degree (c38-0 / really)))

# ::snt Governors take control of your states. F$! The DHS they are an Obama puppet
# ::tokens ["Governors", "take", "control", "of", "your", "states", ".", "F$", "!", "The", "DHS", "they", "are", "an", "Obama", "puppet"]
# ::lemmas ["governor", "take", "control", "of", "your", "state", ".", "f$", "!", "the", "DHS", "they", "be", "an", "Obama", "puppet"]
(c39-5 / multi-sentence
       :snt1 (c39-1 / take-01
                    :ARG0 (c39-9 / person
                                 :ARG0-of (c39-12 / have-org-role-91
                                                  :ARG2 (c39-4 / governor)))
                    :ARG1 (c39-13 / control-01
                                  :ARG0 c39-9
                                  :ARG1 (c39-8 / state
                                               :poss (c39-3 / you))))
       :snt2 (c39-11 / fuck-01
                     :mode expressive)
       :snt3 (c39-6 / puppet
                    :domain (c39-7 / government-organization
                                   :name (c39-10 / name
                                                 :op1 "DHS"))
                    :mod (c39-0 / person
                                :name (c39-2 / name
                                             :op1 "Obama"))))

# ::snt American's should be in New Orleans to make sure refugees are turned away.
# ::tokens ["American", "'s", "should", "be", "in", "New", "Orleans", "to", "make", "sure", "refugees", "are", "turned", "away", "."]
# ::lemmas ["American", "'s", "should", "be", "in", "New", "Orleans", "to", "make", "sure", "refugee", "be", "turn", "away", "."]
(c40-1 / recommend-01
       :ARG1 (c40-3 / be-located-at-91
                    :ARG1 (c40-7 / person
                                 :mod (c40-9 / country
                                             :name (c40-8 / name
                                                          :op1 "America")))
                    :ARG2 (c40-5 / city
                                 :name (c40-4 / name
                                              :op1 "New"
                                              :op2 "Orleans"))
                    :purpose (c40-2 / ensure-01
                                    :ARG0 c40-7
                                    :ARG1 (c40-0 / turn-away-05
                                                 :ARG1 (c40-6 / refugee)))))

# ::snt as he and everyone should..... For ther benefit of the citizens of the United States benefit
# ::tokens ["as", "he", "and", "everyone", "should", ".....", "For", "ther", "benefit", "of", "the", "citizens", "of", "the", "United", "States", "benefit"]
# ::lemmas ["as", "he", "and", "everyone", "should", ".....", "for", "ther", "benefit", "of", "the", "citizen", "of", "the", "United", "States", "benefit"]
(c41-5 / multi-sentence
       :snt1 (c41-1 / resemble-01
                    :ARG2 (c41-7 / recommend-01
                                 :ARG2 (c41-0 / and
                                              :op1 (c41-9 / he)
                                              :op2 (c41-2 / everyone))))
       :snt2 (c41-3 / benefit-01
                    :ARG1 (c41-10 / citizen
                                  :mod (c41-6 / country
                                              :name (c41-8 / name
                                                           :op1 "United"
                                                           :op2 "States")))
                    :purpose (c41-4 / benefit-01
                                    :ARG1 c41-10)))

# ::snt That's what I'm talking about!! Even Jendal doesn't know.!!
# ::tokens ["That", "'s", "what", "I", "'m", "talking", "about", "!", "!", "Even", "Jendal", "does", "n't", "know", ".", "!", "!"]
# ::lemmas ["that", "be", "what", "i", "be", "talk", "about", "!", "!", "even", "Jendal", "do", "not", "know", ".", "!", "!"]
(c42-4 / multi-sentence
       :snt1 (c42-0 / talk-01
                    :ARG0 (c42-5 / i)
                    :ARG1 (c42-2 / that))
       :snt2 (c42-3 / know-01
                    :ARG0 (c42-6 / person
                                 :name (c42-7 / name
                                              :op1 "Jendal")
                                 :mod (c42-1 / even))
                    :polarity -))

# ::snt A Jindal rejection would be nullification, or interposition or Obamaism!
# ::tokens ["A", "Jindal", "rejection", "would", "be", "nullification", ",", "or", "interposition", "or", "Obamaism", "!"]
# ::lemmas ["a", "jindal", "rejection", "would", "be", "nullification", ",", "or", "interposition", "or", "Obamaism", "!"]
(c43-6 / or
       :op1 (c43-5 / nullify-01)
       :op2 (c43-3 / interposition)
       :op3 (c43-4 / person
                   :name (c43-1 / name
                                :op1 "Obamaism"))
       :domain (c43-0 / reject-01
                      :ARG0 (c43-2 / person
                                   :name (c43-7 / name
                                                :op1 "Jindal"))))

# ::snt Jindal is stupid what info???
# ::tokens ["Jindal", "is", "stupid", "what", "info", "?", "?", "?"]
# ::lemmas ["jindal", "be", "stupid", "what", "info", "?", "?", "?"]
(c44-2 / stupid
       :domain (c44-3 / person
                      :name (c44-4 / name
                                   :op1 "Jindal"))
       :topic (c44-1 / information
                     :mod (c44-0 / amr-unknown)))

# ::snt if EVER DOES ANYTHING IN HIS LIFE HE NEEDS TO STOP THE IMMIGRATION OF SYRIAN REFUGEES THROUGH LOUISIANA!
# ::tokens ["if", "EVER", "DOES", "ANYTHING", "IN", "HIS", "LIFE", "HE", "NEEDS", "TO", "STOP", "THE", "IMMIGRATION", "OF", "SYRIAN", "REFUGEES", "THROUGH", "LOUISIANA", "!"]
# ::lemmas ["if", "EVER", "do", "anything", "in", "his", "life", "he", "need", "to", "stop", "the", "immigration", "of", "SYRIAN", "REFUGEES", "through", "LOUISIANA", "!"]
(c45-12 / have-condition-91
        :ARG1 (c45-9 / need-01
                     :ARG0 (c45-6 / he)
                     :ARG1 (c45-7 / stop-01
                                  :ARG0 c45-6
                                  :ARG1 (c45-8 / perpetuate-01
                                               :ARG0 (c45-5 / person
                                                            :ARG0-of (c45-11 / flee-05
                                                                             :ARG1 (c45-13 / country
                                                                                           :name (c45-3 / name
                                                                                                        :op1 "Syria"))))
                                               :ARG1 (c45-0 / state
                                                            :name c45-3
                                                            :op1 "Louisiana"))))
        :ARG2 (c45-4 / do-02
                     :ARG0 c45-6
                     :ARG1 (c45-1 / anything)
                     :time (c45-2 / ever)
                     :location (c45-10 / life
                                       :poss c45-6)))

# ::snt Jindal should have said "Not here, not in our state.. Return to Sender" but Is weak.
# ::tokens ["Jindal", "should", "have", "said", "\"", "Not", "here", ",", "not", "in", "our", "state", "..", "Return", "to", "Sender", "\"", "but", "Is", "weak", "."]
# ::lemmas ["jindal", "should", "have", "say", "\"", "not", "here", ",", "not", "in", "our", "state", "..", "return", "to", "Sender", "\"", "but", "be", "weak", "."]
(c46-3 / recommend-01
       :ARG1 (c46-8 / say-01
                    :ARG0 (c46-9 / person
                                 :name (c46-10 / name
                                               :op1 "Jindal"))
                    :ARG1 (c46-13 / contrast-01
                                  :ARG1 (c46-0 / and
                                               :op1 (c46-4 / be-located-at-91
                                                           :ARG2 (c46-12 / here)
                                                           :polarity -)
                                               :op2 (c46-6 / be-located-at-91
                                                           :ARG1 c46-9
                                                           :ARG2 (c46-1 / state
                                                                        :poss (c46-11 / we))
                                                           :polarity -)
                                               :op3 (c46-7 / return-01
                                                           :ARG1 c46-9
                                                           :ARG4 (c46-2 / thing
                                                                        :name c46-10
                                                                        :op1 "Sender"))))
                    :ARG2 (c46-5 / weak-02
                                 :ARG1 c46-9)))

# ::snt He should send the National Guard down to keep them from leaving the detention area until they go back.
# ::tokens ["He", "should", "send", "the", "National", "Guard", "down", "to", "keep", "them", "from", "leaving", "the", "detention", "area", "until", "they", "go", "back", "."]
# ::lemmas ["he", "should", "send", "the", "National", "Guard", "down", "to", "keep", "they", "from", "leave", "the", "detention", "area", "until", "they", "go", "back", "."]
(c47-2 / recommend-01
       :ARG1 (c47-7 / send-01
                    :ARG0 (c47-10 / he)
                    :ARG1 (c47-4 / military
                                 :name (c47-8 / name
                                              :op1 "National"
                                              :op2 "Guard"))
                    :ARG4 (c47-11 / down)
                    :purpose (c47-3 / keep-04
                                    :ARG0 c47-4
                                    :ARG1 c47-4
                                    :ARG2 (c47-9 / leave-11
                                                 :ARG0 c47-4
                                                 :ARG1 (c47-0 / area
                                                              :location-of (c47-1 / detain-01))
                                                 :time (c47-6 / until
                                                              :op1 (c47-5 / go-back-19
                                                                          :ARG1 c47-4))
                                                 :polarity -))))

# ::snt Isn't it a bit late to ask now that the Muslims have already arrived?
# ::tokens ["Is", "n't", "it", "a", "bit", "late", "to", "ask", "now", "that", "the", "Muslims", "have", "already", "arrived", "?"]
# ::lemmas ["be", "not", "it", "a", "bit", "late", "to", "ask", "now", "that", "the", "Muslims", "have", "already", "arrive", "?"]
(c48-8 / late
       :domain (c48-0 / ask-01
                      :ARG1 (c48-9 / arrive-01
                                   :ARG1 (c48-6 / person
                                                :mod (c48-2 / religious-group
                                                            :name (c48-7 / name
                                                                         :op1 "Muslim")))
                                   :time (c48-1 / already))
                      :time (c48-4 / now))
       :degree (c48-3 / bit)
       :ARG1-of (c48-5 / request-confirmation-91))

# ::snt Jindal is an anchor baby! How dare he!
# ::tokens ["Jindal", "is", "an", "anchor", "baby", "!", "How", "dare", "he", "!"]
# ::lemmas ["jindal", "be", "an", "anchor", "baby", "!", "how", "dare", "he", "!"]
(c49-2 / multi-sentence
       :snt1 (c49-1 / baby
                    :ARG0-of (c49-0 / anchor-01)
                    :domain (c49-4 / person
                                   :name (c49-5 / name
                                                :op1 "Jindal")))
       :snt2 (c49-7 / dare-01
                    :ARG1 (c49-6 / he)
                    :manner (c49-3 / amr-unknown)))

# ::snt So tell me again why Jindal doesn't meet them and stop them from entering Louisiana?
# ::tokens ["So", "tell", "me", "again", "why", "Jindal", "does", "n't", "meet", "them", "and", "stop", "them", "from", "entering", "Louisiana", "?"]
# ::lemmas ["so", "tell", "i", "again", "why", "Jindal", "do", "not", "meet", "they", "and", "stop", "they", "from", "enter", "Louisiana", "?"]
(c50-2 / tell-01
       :ARG0 (c50-6 / you)
       :ARG1 (c50-4 / thing
                    :ARG0-of (c50-14 / cause-01
                                     :ARG1 (c50-0 / and
                                                  :op1 (c50-7 / meet-03
                                                              :ARG0 (c50-11 / person
                                                                            :name (c50-12 / name
                                                                                          :op1 "Jindal"))
                                                              :ARG1 (c50-5 / they)
                                                              :polarity -)
                                                  :op2 (c50-10 / stop-03
                                                               :ARG0 c50-11
                                                               :ARG1 c50-5
                                                               :ARG2 (c50-3 / enter-01
                                                                            :ARG0 c50-5
                                                                            :ARG1 (c50-1 / state
                                                                                         :name (c50-8 / name
                                                                                                      :op1 "Louisiana")))))))
       :ARG2 (c50-9 / i)
       :mod (c50-13 / again)
       :mode imperative)
