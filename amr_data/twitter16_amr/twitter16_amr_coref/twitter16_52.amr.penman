# ::snt we may need to look that shit up. Anyone who spoke to empty chairs had to be on their way out.
# ::tokens ["we", "may", "need", "to", "look", "that", "shit", "up", ".", "Anyone", "who", "spoke", "to", "empty", "chairs", "had", "to", "be", "on", "their", "way", "out", "."]
# ::lemmas ["we", "may", "need", "to", "look", "that", "shit", "up", ".", "anyone", "who", "speak", "to", "empty", "chair", "have", "to", "be", "on", "their", "way", "out", "."]
(c1-5 / multi-sentence
      :snt1 (c1-8 / possible-01
                  :ARG1 (c1-9 / need-01
                              :ARG0 (c1-11 / we)
                              :ARG1 (c1-12 / look-up-05
                                           :ARG0 c1-11
                                           :ARG1 (c1-7 / shit
                                                       :mod (c1-2 / that)))))
      :snt2 (c1-10 / obligate-01
                   :ARG1 (c1-0 / anyone
                               :ARG0-of (c1-1 / speak-01
                                              :ARG2 (c1-13 / chair
                                                           :ARG1-of (c1-3 / empty-02))))
                   :ARG2 (c1-6 / go-02
                               :ARG0 c1-0
                               :ARG4 (c1-4 / out))))

# ::snt 'm pretty sure that Clint Eastwood is still alive too.
# ::tokens ["'", "m", "pretty", "sure", "that", "Clint", "Eastwood", "is", "still", "alive", "too", "."]
# ::lemmas ["'", "m", "pretty", "sure", "that", "Clint", "Eastwood", "be", "still", "alive", "too", "."]
(c2-4 / sure-02
      :ARG0 (c2-3 / i)
      :ARG1 (c2-7 / live-01
                  :ARG0 (c2-5 / person
                              :name (c2-6 / name
                                          :op1 "Clint"
                                          :op2 "Eastwood"))
                  :mod (c2-0 / still)
                  :mod (c2-1 / too))
      :degree (c2-2 / pretty))

# ::snt Thulsa Doom Lives
# ::tokens ["Thulsa", "Doom", "Lives"]
# ::lemmas ["Thulsa", "Doom", "live"]
(c3-0 / live-01
      :ARG0 (c3-1 / person
                  :name (c3-2 / name
                              :op1 "Thulsa"
                              :op2 "Doom")))

# ::snt nor is Lando
# ::tokens ["nor", "is", "Lando"]
# ::lemmas ["nor", "be", "Lando"]
(c5-0 / and
      :op2 (c5-1 / person
                 :name (c5-2 / name
                             :op1 "Lando")))

# ::snt I bet hes pleased to read that tweet
# ::tokens ["I", "bet", "he", "s", "pleased", "to", "read", "that", "tweet"]
# ::lemmas ["i", "bet", "he", "s", "pleased", "to", "read", "that", "tweet"]
(c6-2 / bet-01
      :ARG0 (c6-5 / i)
      :ARG2 (c6-6 / please-01
                  :ARG0 (c6-1 / read-01
                              :ARG0 (c6-7 / he)
                              :ARG1 (c6-0 / thing
                                          :ARG1-of (c6-3 / tweet-01)
                                          :mod (c6-4 / that)))
                  :ARG1 c6-7))

# ::snt ok
# ::tokens ["ok"]
# ::lemmas ["ok"]
(c7-0 / okay-04)
