# ::snt you are fucking disgusting. "Flame the race war, it's good for hits!" I hope this writer beaten to death with his keyboard.
# ::tokens ["you", "are", "fucking", "disgusting", ".", "\"", "Flame", "the", "race", "war", ",", "it", "'s", "good", "for", "hits", "!", "\"", "I", "hope", "this", "writer", "beaten", "to", "death", "with", "his", "keyboard", "."]
# ::lemmas ["you", "be", "fuck", "disgusting", ".", "\"", "flame", "the", "race", "war", ",", "it", "be", "good", "for", "hit", "!", "\"", "i", "hope", "this", "writer", "beat", "to", "death", "with", "his", "keyboard", "."]
(c2-20 / multi-sentence
       :snt1 (c2-18 / disgust-01
                    :ARG0 (c2-19 / you)
                    :mod (c2-6 / fucking))
       :snt2 (c2-12 / say-01
                    :ARG0 (c2-4 / i)
                    :ARG1 (c2-15 / and
                                 :op1 (c2-3 / blame-01
                                            :ARG0 (c2-2 / you)
                                            :ARG1 (c2-5 / war-01
                                                        :ARG2 (c2-7 / race))
                                            :mode imperative)
                                 :op2 (c2-11 / good-04
                                             :ARG1 c2-3
                                             :ARG2 (c2-14 / hit))))
       :snt3 (c2-16 / hope-01
                    :ARG0 (c2-13 / i)
                    :ARG1 (c2-10 / beat-01
                                 :ARG1 (c2-17 / person
                                              :ARG0-of (c2-8 / write-01)
                                              :mod (c2-0 / this))
                                 :ARG2 (c2-1 / die-01
                                             :ARG1 c2-17)
                                 :instrument (c2-9 / keyboard
                                                   :poss c2-17))))

# ::snt look at this fucking lizard he's so disgusting and just oozes "serial killer"
# ::tokens ["look", "at", "this", "fucking", "lizard", "he", "'s", "so", "disgusting", "and", "just", "oozes", "\"", "serial", "killer", "\""]
# ::lemmas ["look", "at", "this", "fucking", "lizard", "he", "be", "so", "disgusting", "and", "just", "ooze", "\"", "serial", "killer", "\""]
(c3-8 / look-01
      :ARG0 (c3-4 / you)
      :ARG1 (c3-0 / and
                  :op1 (c3-10 / disgust-01
                              :ARG0 (c3-9 / he)
                              :degree (c3-5 / so))
                  :op2 (c3-7 / ooze-01
                             :ARG0 c3-9
                             :ARG1 (c3-6 / person
                                         :ARG0-of (c3-3 / kill-01
                                                        :mod (c3-1 / serial)))
                             :mod (c3-2 / just)))
      :mode imperative)

# ::snt exactly !
# ::tokens ["exactly", "!"]
# ::lemmas ["exactly", "!"]
(c4-0 / exact
      :mode expressive)

# ::snt no worries.
# ::tokens ["no", "worries", "."]
# ::lemmas ["no", "worry", "."]
(c5-0 / worry-02
      :polarity -)

# ::snt I wish we could spend more time with this. I'll not be able to do much for next cpl weeks, but would sure like to look into.
# ::tokens ["I", "wish", "we", "could", "spend", "more", "time", "with", "this", ".", "I", "'ll", "not", "be", "able", "to", "do", "much", "for", "next", "cpl", "weeks", ",", "but", "would", "sure", "like", "to", "look", "into", "."]
# ::lemmas ["i", "wish", "we", "could", "spend", "more", "time", "with", "this", ".", "i", "'ll", "not", "be", "able", "to", "do", "much", "for", "next", "cpl", "weeks", ",", "but", "would", "sure", "like", "to", "look", "into", "."]
(c6-21 / multi-sentence
       :snt1 (c6-5 / wish-01
                   :ARG0 (c6-3 / i)
                   :ARG1 (c6-19 / possible-01
                                :ARG1 (c6-10 / spend-02
                                             :ARG0 (c6-8 / we)
                                             :ARG1 (c6-1 / time
                                                         :mod (c6-7 / more))
                                             :ARG2 (c6-2 / this))))
       :snt2 (c6-15 / contrast-01
                    :ARG1 (c6-17 / possible-01
                                 :ARG1 (c6-20 / do-02
                                              :ARG0 (c6-14 / i)
                                              :ARG1 (c6-12 / much)
                                              :time (c6-16 / after
                                                           :op1 (c6-4 / now)
                                                           :duration (c6-11 / multiple
                                                                            :op1 (c6-9 / temporal-quantity
                                                                                       :unit (c6-18 / week)
                                                                                       :quant 1))))
                                 :polarity -)
                    :ARG2 (c6-13 / like-02
                                 :ARG0 c6-14
                                 :ARG1 (c6-6 / look-into-11
                                             :ARG0 c6-14)
                                 :ARG1-of (c6-0 / sure-02))))

# ::snt Thanks for the reply
# ::tokens ["Thanks", "for", "the", "reply"]
# ::lemmas ["thank", "for", "the", "reply"]
(c7-1 / thank-01
      :ARG0 (c7-0 / i)
      :ARG2 (c7-2 / reply-01))

# ::snt who follows who. And lastly, one that can detect fake accts, etc.
# ::tokens ["who", "follows", "who", ".", "And", "lastly", ",", "one", "that", "can", "detect", "fake", "accts", ",", "etc", "."]
# ::lemmas ["who", "follow", "who", ".", "and", "lastly", ",", "one", "that", "can", "detect", "fake", "acct", ",", "etc", "."]
(c8-6 / multi-sentence
      :snt1 (c8-9 / follow-02
                  :ARG0 (c8-0 / amr-unknown)
                  :ARG1 (c8-10 / amr-unknown))
      :snt2 (c8-1 / and
                  :op2 (c8-3 / capable-01
                             :ARG1 (c8-8 / one)
                             :ARG2 (c8-4 / detect-01
                                         :ARG0 c8-8
                                         :ARG1 c8-1
                                         :op1 (c8-7 / acct
                                                    :ARG1-of (c8-2 / fake-02))
                                         :op2 (c8-5 / et-cetera)))
                  :li "-1"))

# ::snt *found* Kindle app that shoes me age of acct and other data. Another app will tell you about &gt;
# ::tokens ["*", "found", "*", "Kindle", "app", "that", "shoes", "me", "age", "of", "acct", "and", "other", "data", ".", "Another", "app", "will", "tell", "you", "about", "&", "gt", ";"]
# ::lemmas ["*", "find", "*", "Kindle", "app", "that", "shoe", "i", "age", "of", "acct", "and", "other", "datum", ".", "another", "app", "will", "tell", "you", "about", "&", "gt", ";"]
(c9-18 / multi-sentence
       :snt1 (c9-7 / find-01
                   :ARG1 (c9-14 / app
                                :name (c9-6 / name
                                            :op1 "Kindle")
                                :ARG0-of (c9-11 / shoe-01
                                                :ARG1 (c9-13 / age-01
                                                             :ARG1 (c9-5 / i)
                                                             :ARG2 (c9-1 / and
                                                                         :op1 (c9-10 / acct)
                                                                         :op2 (c9-16 / data
                                                                                     :mod (c9-19 / other))))
                                                :ARG2 c9-5)))
       :snt2 (c9-2 / tell-01
                   :ARG0 (c9-0 / app
                               :mod (c9-4 / another))
                   :ARG1 (c9-12 / and
                                :op1 (c9-3 / thing
                                           :name (c9-8 / name
                                                       :op1 "&gt"))
                                :op2 (c9-9 / thing
                                           :name (c9-15 / name
                                                        :op1 "&gt")))
                   :ARG2 (c9-17 / you)))

# ::snt are tools in your App store that are free or small cost that offer options. I find a Kindle &gt;
# ::tokens ["are", "tools", "in", "your", "App", "store", "that", "are", "free", "or", "small", "cost", "that", "offer", "options", ".", "I", "find", "a", "Kindle", "&", "gt", ";"]
# ::lemmas ["be", "tool", "in", "your", "App", "store", "that", "be", "free", "or", "small", "cost", "that", "offer", "option", ".", "i", "find", "a", "Kindle", "&", "gt", ";"]
(c10-7 / multi-sentence
       :snt1 (c10-2 / tool
                    :domain (c10-12 / or
                                    :op1 (c10-13 / free-03)
                                    :op2 (c10-14 / cost-01
                                                 :mod (c10-9 / small)))
                    :ARG0-of (c10-4 / offer-01
                                    :ARG1 (c10-11 / option))
                    :location (c10-0 / store
                                     :mod (c10-1 / app)
                                     :poss (c10-6 / you)))
       :snt2 (c10-3 / find-01
                    :ARG0 (c10-8 / i)
                    :ARG1 (c10-5 / thing
                                 :name (c10-10 / name
                                               :op1 "Kindle"
                                               :op2 "&gt"))))

# ::snt Thx for reminding me. Dealing with unexpected health issue so can't do research. But, there &gt;
# ::tokens ["Thx", "for", "reminding", "me", ".", "Dealing", "with", "unexpected", "health", "issue", "so", "ca", "n't", "do", "research", ".", "But", ",", "there", "&", "gt", ";"]
# ::lemmas ["thx", "for", "remind", "i", ".", "deal", "with", "unexpected", "health", "issue", "so", "can", "not", "do", "research", ".", "but", ",", "there", "&", "gt", ";"]
(c11-5 / multi-sentence
       :snt1 (c11-0 / thank-01
                    :ARG0 (c11-10 / i)
                    :ARG1 (c11-11 / person
                                  :name (c11-12 / name
                                                :op1 "Thx"))
                    :ARG2 (c11-1 / remind-01
                                 :ARG0 c11-11
                                 :ARG1 c11-10))
       :snt2 (c11-14 / cause-01
                     :ARG0 (c11-3 / deal-01
                                  :ARG2 (c11-13 / issue-02
                                                :ARG0 (c11-9 / health)
                                                :ARG1-of (c11-2 / expect-01
                                                                :polarity -)))
                     :ARG1 (c11-6 / possible-01
                                  :ARG1 (c11-8 / research-01)
                                  :polarity -))
       :snt3 (c11-7 / contrast-01
                    :ARG2 (c11-4 / there)))

# ::snt Never got back on what said tools/apps that u use...
# ::tokens ["Never", "got", "back", "on", "what", "said", "tools", "/", "apps", "that", "u", "use", "..."]
# ::lemmas ["never", "get", "back", "on", "what", "say", "tool", "/", "app", "that", "u", "use", "..."]
(c12-5 / get-back-10
       :ARG1 (c12-4 / you)
       :ARG2 (c12-7 / slash
                    :op1 (c12-2 / tool)
                    :op2 (c12-0 / app)
                    :ARG1-of (c12-1 / say-01)
                    :ARG1-of (c12-6 / use-01
                                    :ARG0 c12-4))
       :time (c12-3 / ever)
       :polarity -)

# ::snt "we're going to kill him to show that killing is wrong"
# ::tokens ["\"", "we", "'re", "going", "to", "kill", "him", "to", "show", "that", "killing", "is", "wrong", "\""]
# ::lemmas ["\"", "we", "be", "go", "to", "kill", "he", "to", "show", "that", "killing", "be", "wrong", "\""]
(c14-0 / kill-01
       :ARG0 (c14-4 / we)
       :ARG1 (c14-5 / he)
       :purpose (c14-3 / show-01
                       :ARG0 c14-4
                       :ARG1 (c14-1 / wrong-02
                                    :ARG1 (c14-2 / kill-01))))

# ::snt it costs more to put someone to death than to just give him life in prison.
# ::tokens ["it", "costs", "more", "to", "put", "someone", "to", "death", "than", "to", "just", "give", "him", "life", "in", "prison", "."]
# ::lemmas ["it", "cost", "more", "to", "put", "someone", "to", "death", "than", "to", "just", "give", "he", "life", "in", "prison", "."]
(c15-9 / have-quant-91
       :ARG1 (c15-8 / cost-01
                    :ARG1 (c15-6 / put-03
                                 :ARG1 (c15-5 / someone)
                                 :ARG2 (c15-10 / die-01
                                               :ARG1 c15-5)))
       :ARG3 (c15-1 / more)
       :ARG4 (c15-3 / cost-01
                    :ARG1 (c15-2 / give-01
                                 :ARG1 (c15-7 / life)
                                 :ARG2 c15-5
                                 :location (c15-4 / prison)
                                 :mod (c15-0 / just))))

# ::snt I'm glad I've been hoaxed And thanks Internet, for adding Too Fucked Up To Be True to the list of things to watch for.
# ::tokens ["I", "'m", "glad", "I", "'ve", "been", "hoaxed", "And", "thanks", "Internet", ",", "for", "adding", "Too", "Fucked", "Up", "To", "Be", "True", "to", "the", "list", "of", "things", "to", "watch", "for", "."]
# ::lemmas ["i", "be", "glad", "i", "'ve", "be", "hoax", "and", "thank", "internet", ",", "for", "add", "Too", "Fucked", "up", "to", "be", "true", "to", "the", "list", "of", "thing", "to", "watch", "for", "."]
(c16-0 / and
       :op1 (c16-5 / glad-02
                   :ARG0 (c16-12 / hoax-01
                                 :ARG1 (c16-8 / i
                                              :ARG1-of c16-5)))
       :op2 (c16-1 / thank-01
                   :ARG0 c16-8
                   :ARG1 (c16-2 / internet)
                   :ARG2 (c16-13 / add-02
                                 :ARG0 c16-2
                                 :ARG1 (c16-3 / thing
                                              :ARG1-of (c16-7 / have-degree-91
                                                              :ARG2 (c16-11 / fuck-up-02
                                                                            :ARG1 c16-3)
                                                              :ARG3 (c16-4 / too)))
                                 :ARG2 (c16-10 / list-01
                                               :ARG1 (c16-6 / thing
                                                            :ARG1-of (c16-9 / watch-01))))))

# ::snt why you tweeting this bullshit
# ::tokens ["why", "you", "tweeting", "this", "bullshit"]
# ::lemmas ["why", "you", "tweet", "this", "bullshit"]
(c18-5 / cause-01
       :ARG0 (c18-0 / amr-unknown)
       :ARG1 (c18-1 / tweet-01
                    :ARG0 (c18-4 / you)
                    :ARG1 (c18-2 / bullshit
                                 :mod (c18-3 / this))))

# ::snt "Black organisations looking to make our client guilty". Wow.
# ::tokens ["\"", "Black", "organisations", "looking", "to", "make", "our", "client", "guilty", "\"", ".", "Wow", "."]
# ::lemmas ["\"", "black", "organisation", "look", "to", "make", "our", "client", "guilty", "\"", ".", "wow", "."]
(c19-3 / multi-sentence
       :snt1 (c19-7 / look-04
                    :ARG0 (c19-5 / organization
                                 :ARG1-of (c19-1 / black-05))
                    :ARG1 (c19-0 / make-02
                                 :ARG0 c19-5
                                 :ARG1 (c19-4 / guilty-01
                                              :ARG1 (c19-8 / client
                                                           :poss (c19-6 / we)))))
       :snt2 (c19-2 / wow
                    :mode expressive))

# ::snt ja ikkesant ?? Dem er sikkert rasister selv de som donerte as!!!
# ::tokens ["ja", "ikkesant", "?", "?", "Dem", "er", "sikkert", "rasister", "selv", "de", "som", "donerte", "as", "!", "!", "!"]
# ::lemmas ["ja", "ikkesant", "?", "?", "dem", "er", "sikkert", "rasister", "selv", "de", "som", "donerte", "as", "!", "!", "!"]
(c20-5 / multi-sentence
       :snt1 (c20-8 / person
                    :name (c20-9 / name
                                 :op1 "ja"
                                 :op2 "ikkesant"))
       :snt2 (c20-10 / have-mod-91
                     :ARG1 (c20-4 / person
                                  :name (c20-3 / name
                                               :op1 "Dem"))
                     :ARG2 (c20-1 / person
                                  :ARG0-of (c20-6 / have-org-role-91
                                                  :ARG2 (c20-2 / rasister)))
                     :snt3-of c20-5)
       :ARG1 (c20-7 / person)
       :ARG2 (c20-0 / as))

# ::snt I just don't understand how people think. They don't even seem to be part of this country.
# ::tokens ["I", "just", "do", "n't", "understand", "how", "people", "think", ".", "They", "do", "n't", "even", "seem", "to", "be", "part", "of", "this", "country", "."]
# ::lemmas ["i", "just", "do", "not", "understand", "how", "people", "think", ".", "they", "do", "not", "even", "seem", "to", "be", "part", "of", "this", "country", "."]
(c21-5 / multi-sentence
       :snt1 (c21-8 / understand-01
                    :ARG0 (c21-7 / i)
                    :ARG1 (c21-0 / thing
                                 :manner-of (c21-3 / think-01
                                                   :ARG0 (c21-9 / person)))
                    :mod (c21-1 / just)
                    :polarity -)
       :snt2 (c21-10 / seem-01
                     :ARG1 (c21-4 / they
                                  :part-of (c21-11 / country
                                                   :mod (c21-6 / this)))
                     :mod (c21-2 / even)
                     :polarity -))

# ::snt no, forgiveness is important but so is punishment. New examples are always needed. Murder is not to be taken lightly.
# ::tokens ["no", ",", "forgiveness", "is", "important", "but", "so", "is", "punishment", ".", "New", "examples", "are", "always", "needed", ".", "Murder", "is", "not", "to", "be", "taken", "lightly", "."]
# ::lemmas ["no", ",", "forgiveness", "be", "important", "but", "so", "be", "punishment", ".", "new", "example", "be", "always", "need", ".", "murder", "be", "not", "to", "be", "take", "lightly", "."]
(c22-5 / multi-sentence
       :snt1 (c22-12 / contrast-01
                     :ARG1 (c22-6 / important-01
                                  :ARG1 (c22-10 / forgive-01))
                     :ARG2 (c22-11 / important-01
                                   :ARG1 (c22-7 / punish-01)))
       :snt2 (c22-8 / need-01
                    :ARG1 (c22-2 / example
                                 :ARG1-of (c22-4 / new-01))
                    :time (c22-0 / always))
       :snt3 (c22-1 / take-04
                    :ARG1 (c22-3 / murder-01)
                    :ARG2 (c22-9 / light-06)
                    :polarity -))

# ::snt WHAT is this shit ?????
# ::tokens ["WHAT", "is", "this", "shit", "?", "?", "?", "?", "?"]
# ::lemmas ["what", "be", "this", "shit", "?", "?", "?", "?", "?"]
(c23-2 / shit
       :mod (c23-1 / this)
       :mod (c23-0 / amr-unknown))

# ::snt those funds are proceeds of crime. Attach the money and donate it to the community or victim's families
# ::tokens ["those", "funds", "are", "proceeds", "of", "crime", ".", "Attach", "the", "money", "and", "donate", "it", "to", "the", "community", "or", "victim", "'s", "families"]
# ::lemmas ["those", "fund", "be", "proceed", "of", "crime", ".", "attach", "the", "money", "and", "donate", "it", "to", "the", "community", "or", "victim", "'s", "family"]
(c24-5 / multi-sentence
       :snt1 (c24-8 / proceeds
                    :source (c24-14 / crime-02)
                    :domain (c24-12 / fund
                                    :mod (c24-1 / that)))
       :snt2 (c24-0 / and
                    :op1 (c24-7 / attract-01
                                :ARG1 (c24-3 / money))
                    :op2 (c24-4 / donate-01
                                :ARG1 c24-3
                                :ARG2 (c24-10 / or
                                              :op1 (c24-6 / community)
                                              :op2 (c24-2 / family
                                                          :ARG1-of (c24-13 / have-org-role-91
                                                                           :ARG0 (c24-11 / victim)
                                                                           :ARG2 (c24-9 / member)))))))

# ::snt this is completely disgusting."
# ::tokens ["this", "is", "completely", "disgusting", ".", "\""]
# ::lemmas ["this", "be", "completely", "disgusting", ".", "\""]
(c25-2 / disgust-01
       :ARG0 (c25-1 / this)
       :ARG1-of (c25-0 / complete-02))

# ::snt is this real???
# ::tokens ["is", "this", "real", "?", "?", "?"]
# ::lemmas ["be", "this", "real", "?", "?", "?"]
(c26-2 / real-04
       :polarity (c26-0 / amr-unknown)
       :ARG1 (c26-1 / this))

# ::snt This is exactly what is wrong with some ppl in this country. Someone please sue, prevent him from getting one penny.
# ::tokens ["This", "is", "exactly", "what", "is", "wrong", "with", "some", "ppl", "in", "this", "country", ".", "Someone", "please", "sue", ",", "prevent", "him", "from", "getting", "one", "penny", "."]
# ::lemmas ["this", "be", "exactly", "what", "be", "wrong", "with", "some", "ppl", "in", "this", "country", ".", "someone", "please", "sue", ",", "prevent", "he", "from", "get", "one", "penny", "."]
(c27-7 / multi-sentence
       :snt1 (c27-13 / wrong-02
                     :ARG1 (c27-3 / this)
                     :ARG2 (c27-11 / person
                                   :quant (c27-10 / some)
                                   :location (c27-14 / country
                                                     :mod (c27-5 / this)))
                     :mod (c27-4 / exact))
       :snt2 (c27-0 / and
                    :op1 (c27-1 / sue-02
                                :ARG0 (c27-6 / you)
                                :ARG1 (c27-12 / someone)
                                :polite +
                                :mode imperative)
                    :op2 (c27-8 / prevent-01
                                :ARG0 c27-6
                                :ARG1 c27-12
                                :ARG2 (c27-9 / get-01
                                             :ARG0 c27-12
                                             :ARG1 (c27-2 / penny
                                                          :quant 1))
                                :mode imperative)))

# ::snt You are white in America. What more do You need?
# ::tokens ["You", "are", "white", "in", "America", ".", "What", "more", "do", "You", "need", "?"]
# ::lemmas ["you", "be", "white", "in", "America", ".", "what", "more", "do", "you", "need", "?"]
(c28-5 / multi-sentence
       :snt1 (c28-7 / white-02
                    :ARG1 (c28-4 / you)
                    :location (c28-8 / country
                                     :name (c28-6 / name
                                                  :op1 "America")))
       :snt2 (c28-3 / need-01
                    :ARG0 (c28-1 / you)
                    :ARG1 (c28-0 / amr-unknown
                                 :mod (c28-2 / more))))

# ::snt What the fuck? These Americans are evil people...
# ::tokens ["What", "the", "fuck", "?", "These", "Americans", "are", "evil", "people", "..."]
# ::lemmas ["what", "the", "fuck", "?", "these", "Americans", "be", "evil", "people", "..."]
(c29-3 / multi-sentence
       :snt1 (c29-0 / amr-unknown
                    :mod (c29-7 / fuck
                                :mode expressive))
       :snt2 (c29-5 / person
                    :mod (c29-2 / evil)
                    :domain (c29-4 / person
                                   :mod (c29-8 / country
                                               :name (c29-6 / name
                                                            :op1 "America"))
                                   :mod (c29-1 / this))))

# ::snt Showing he wasn't a lone wolf as white supremacist media would like to purport. He was an executor of a vision many harbour.
# ::tokens ["Showing", "he", "was", "n't", "a", "lone", "wolf", "as", "white", "supremacist", "media", "would", "like", "to", "purport", ".", "He", "was", "an", "executor", "of", "a", "vision", "many", "harbour", "."]
# ::lemmas ["show", "he", "be", "not", "a", "lone", "wolf", "as", "white", "supremacist", "medium", "would", "like", "to", "purport", ".", "he", "be", "an", "executor", "of", "a", "vision", "many", "harbour", "."]
(c30-5 / multi-sentence
       :snt1 (c30-7 / show-01
                    :ARG1 (c30-12 / wolf
                                  :mod (c30-13 / lone)
                                  :domain (c30-14 / he)
                                  :ARG1-of (c30-8 / purport-01
                                                  :ARG0 (c30-3 / media
                                                               :ARG1-of (c30-4 / white-02)
                                                               :mod (c30-0 / supremacist))
                                                  :ARG1-of (c30-1 / like-02
                                                                  :ARG0 c30-3))
                                  :polarity -))
       :snt2 (c30-2 / execute-02
                    :ARG0 (c30-6 / he)
                    :ARG1 (c30-9 / envision-01
                                 :ARG1-of (c30-10 / harbor-01
                                                  :ARG0 (c30-11 / many)))))

# ::snt More like News Comments writers raising money for Steve Hofmeyer court case against Chester Messing
# ::tokens ["More", "like", "News", "Comments", "writers", "raising", "money", "for", "Steve", "Hofmeyer", "court", "case", "against", "Chester", "Messing"]
# ::lemmas ["more", "like", "News", "Comments", "writer", "raise", "money", "for", "Steve", "Hofmeyer", "court", "case", "against", "Chester", "Messing"]
(c31-12 / have-degree-of-resemblance-91
        :ARG1 (c31-1 / raise-02
                     :ARG0 (c31-8 / person
                                  :ARG0-of (c31-11 / write-01
                                                   :ARG1 (c31-13 / comment-01
                                                                 :ARG3 (c31-9 / news))))
                     :ARG1 (c31-5 / money)
                     :purpose (c31-7 / case-03
                                     :ARG0 (c31-6 / person
                                                  :name (c31-3 / name
                                                               :op1 "Steve"
                                                               :op2 "Hofmeyer"))
                                     :ARG2 (c31-0 / person
                                                  :name (c31-10 / name
                                                                :op1 "Chester"
                                                                :op2 "Messing"))
                                     :mod (c31-2 / court)))
        :ARG2 (c31-4 / more))

# ::snt twisted world.
# ::tokens ["twisted", "world", "."]
# ::lemmas ["twisted", "world", "."]
(c32-0 / world
       :ARG2-of (c32-1 / twist-01))

# ::snt u must be kidding me
# ::tokens ["u", "must", "be", "kidding", "me"]
# ::lemmas ["u", "must", "be", "kid", "i"]
(c33-2 / infer-01
       :ARG0 (c33-3 / i)
       :ARG1 (c33-0 / kid-01
                    :ARG0 (c33-1 / you)
                    :ARG1 c33-3))

# ::snt wtf.....
# ::tokens ["wtf", "....."]
# ::lemmas ["wtf", "....."]
(c34-0 / amr-unknown
       :mod (c34-1 / fuck))

# ::snt NO disrespect to , NO one else reported adopting alien
# ::tokens ["NO", "disrespect", "to", ",", "NO", "one", "else", "reported", "adopting", "alien"]
# ::lemmas ["no", "disrespect", "to", ",", "no", "one", "else", "report", "adopt", "alien"]
(c35-0 / and
       :op1 (c35-7 / disrespect-01
                   :polarity -)
       :op2 (c35-2 / report-01
                   :ARG0 (c35-5 / no-one
                                :mod (c35-3 / else))
                   :ARG1 (c35-4 / adopt-01
                                :ARG0 c35-5
                                :ARG1 (c35-6 / person
                                             :ARG1-of (c35-1 / alien-01)))))

# ::snt yah quick check of website appears to be as accurate as
# ::tokens ["yah", "quick", "check", "of", "website", "appears", "to", "be", "as", "accurate", "as"]
# ::lemmas ["yah", "quick", "check", "of", "website", "appear", "to", "be", "as", "accurate", "as"]
(c36-0 / appear-02
       :ARG1 (c36-5 / accurate
                    :ARG2-of (c36-7 / have-degree-91
                                    :ARG1 (c36-8 / check-01
                                                 :ARG1 (c36-6 / website)
                                                 :ARG1-of (c36-4 / quick-02))
                                    :ARG3 (c36-2 / equal)
                                    :ARG4 (c36-1 / thing)))
       :mod (c36-3 / yah
                   :mode expressive))

# ::snt *Twitter*
# ::tokens ["*", "Twitter", "*"]
# ::lemmas ["*", "Twitter", "*"]
(c37-0 / publication
       :name (c37-1 / name
                    :op1 "Twitter"))

# ::snt Twotter Bot listed me last night! My twotter has issues!
# ::tokens ["Twotter", "Bot", "listed", "me", "last", "night", "!", "My", "twotter", "has", "issues", "!"]
# ::lemmas ["Twotter", "Bot", "list", "i", "last", "night", "!", "my", "twotter", "have", "issue", "!"]
(c38-2 / multi-sentence
       :snt1 (c38-6 / list-01
                    :ARG0 (c38-4 / person
                                 :name (c38-5 / name
                                              :op1 "Twotter"
                                              :op2 "Bot"))
                    :ARG1 (c38-3 / i)
                    :time (c38-9 / date-entity
                                 :dayperiod (c38-0 / night)
                                 :mod (c38-1 / yesterday)))
       :snt2 (c38-8 / issue-02
                    :ARG1 (c38-7 / i)))

# ::snt back at ya!
# ::tokens ["back", "at", "ya", "!"]
# ::lemmas ["back", "at", "ya", "!"]
(c39-0 / back-02
       :ARG1 (c39-1 / you)
       :mode expressive)

# ::snt Very good news! Glued TV (&amp; following you)
# ::tokens ["Very", "good", "news", "!", "Glued", "TV", "(", "&", "amp", ";", "following", "you", ")"]
# ::lemmas ["very", "good", "news", "!", "Glued", "TV", "(", "&", "amp", ";", "follow", "you", ")"]
(c40-5 / multi-sentence
       :snt1 (c40-7 / news
                    :ARG1-of (c40-4 / good-02
                                    :degree (c40-9 / very)))
       :snt2 (c40-0 / and
                    :op1 (c40-1 / television
                                :ARG1-of (c40-6 / green-03))
                    :op2 (c40-8 / person
                                :name (c40-2 / name
                                             :op1 "amp"))
                    :op3 (c40-10 / follow-02
                                 :ARG1 (c40-3 / you))))

# ::snt True. If you're around long enough you get on a few.
# ::tokens ["True", ".", "If", "you", "'re", "around", "long", "enough", "you", "get", "on", "a", "few", "."]
# ::lemmas ["true", ".", "if", "you", "be", "around", "long", "enough", "you", "get", "on", "a", "few", "."]
(c41-5 / multi-sentence
       :snt1 (c41-1 / true-01)
       :snt2 (c41-6 / get-on-21
                    :ARG0 (c41-4 / you)
                    :ARG1 (c41-8 / few)
                    :condition (c41-3 / be-located-at-91
                                      :ARG1 c41-4
                                      :ARG2 (c41-0 / around)
                                      :ARG1-of (c41-9 / have-degree-91
                                                      :ARG2 (c41-7 / long-03
                                                                   :ARG1 c41-3)
                                                      :ARG3 (c41-2 / enough)))))

# ::snt Looks like good news! MARRIAGE EQUALITY!!!!
# ::tokens ["Looks", "like", "good", "news", "!", "MARRIAGE", "EQUALITY", "!", "!", "!", "!"]
# ::lemmas ["look", "like", "good", "news", "!", "MARRIAGE", "EQUALITY", "!", "!", "!", "!"]
(c42-3 / multi-sentence
       :snt1 (c42-5 / look-02
                    :ARG1 (c42-4 / news
                                 :ARG1-of (c42-2 / good-02)))
       :snt2 (c42-0 / equal-01
                    :ARG3 (c42-1 / marry-01)))

# ::snt You don't live unless you get listed or blocked!
# ::tokens ["You", "do", "n't", "live", "unless", "you", "get", "listed", "or", "blocked", "!"]
# ::lemmas ["you", "do", "not", "live", "unless", "you", "get", "list", "or", "block", "!"]
(c43-4 / live-01
       :ARG0 (c43-2 / you)
       :condition (c43-3 / or
                         :op1 (c43-0 / list-01
                                     :ARG1 c43-2
                                     :polarity -)
                         :op2 (c43-1 / block-01
                                     :ARG1 c43-2
                                     :polarity -))
       :polarity -)

# ::snt we'll make it happen next year, amiga!
# ::tokens ["we", "'ll", "make", "it", "happen", "next", "year", ",", "amiga", "!"]
# ::lemmas ["we", "'ll", "make", "it", "happen", "next", "year", ",", "amiga", "!"]
(c44-4 / say-01
       :ARG0 (c44-3 / i)
       :ARG1 (c44-2 / make-02
                    :ARG0 (c44-6 / we)
                    :ARG1 (c44-7 / it)
                    :time (c44-1 / year
                                 :mod (c44-5 / next)))
       :ARG2 (c44-0 / amiga)
       :mode expressive)

# ::snt It's on my bucket list! Would love to meet you all in person.
# ::tokens ["It", "'s", "on", "my", "bucket", "list", "!", "Would", "love", "to", "meet", "you", "all", "in", "person", "."]
# ::lemmas ["it", "be", "on", "my", "bucket", "list", "!", "would", "love", "to", "meet", "you", "all", "in", "person", "."]
(c45-5 / multi-sentence
       :snt1 (c45-7 / list-01
                    :ARG0 (c45-6 / i)
                    :ARG1 (c45-9 / it)
                    :ARG2 (c45-2 / bucket))
       :snt2 (c45-1 / love-02
                    :ARG0 c45-6
                    :ARG1 (c45-3 / meet-02
                                 :ARG0 c45-6
                                 :ARG1 (c45-4 / you
                                              :mod (c45-0 / all))
                                 :mod (c45-8 / in-person))))

# ::snt Wish you were coming to DC, too. Next tribe party?
# ::tokens ["Wish", "you", "were", "coming", "to", "DC", ",", "too", ".", "Next", "tribe", "party", "?"]
# ::lemmas ["wish", "you", "be", "come", "to", "DC", ",", "too", ".", "next", "tribe", "party", "?"]
(c46-5 / multi-sentence
       :snt1 (c46-10 / wish-01
                     :ARG0 (c46-7 / i)
                     :ARG1 (c46-11 / come-01
                                   :ARG1 (c46-4 / you)
                                   :ARG4 (c46-6 / city
                                                :name (c46-8 / name
                                                             :op1 "DC"))
                                   :mod (c46-1 / too)))
       :snt2 (c46-9 / party-01
                    :mod (c46-2 / tribe)
                    :mod (c46-3 / next)
                    :polarity (c46-0 / amr-unknown)))

# ::snt Got to be!
# ::tokens ["Got", "to", "be", "!"]
# ::lemmas ["got", "to", "be", "!"]
(c47-0 / obligate-01
       :mode expressive)

# ::snt Winning
# ::tokens ["Winning"]
# ::lemmas ["win"]
(c48-0 / win-01)

# ::snt By someone on the Con Douchebag list I suspect.
# ::tokens ["By", "someone", "on", "the", "Con", "Douchebag", "list", "I", "suspect", "."]
# ::lemmas ["by", "someone", "on", "the", "Con", "Douchebag", "list", "i", "suspect", "."]
(c49-3 / suspect-01
       :ARG0 (c49-2 / i)
       :ARG1 (c49-1 / thing
                    :source (c49-0 / someone
                                   :ARG1-of (c49-4 / list-01
                                                   :ARG2 (c49-6 / douchebag
                                                                :mod (c49-5 / con))))))

# ::snt I must be doing something right
# ::tokens ["I", "must", "be", "doing", "something", "right"]
# ::lemmas ["i", "must", "be", "do", "something", "right"]
(c50-1 / infer-01
       :ARG1 (c50-4 / do-02
                    :ARG0 (c50-3 / i)
                    :ARG1 (c50-2 / something)
                    :ARG2-of (c50-0 / right-06
                                    :ARG1 c50-3)))
