# ::snt thanks for sharing NewsWatch33, have a great Friday
# ::tokens ["thanks", "for", "sharing", "NewsWatch33", ",", "have", "a", "great", "Friday"]
# ::lemmas ["thank", "for", "share", "newswatch33", ",", "have", "a", "great", "Friday"]
(c1-0 / and
      :op1 (c1-1 / thank-01
                 :ARG0 (c1-5 / i)
                 :ARG1 (c1-7 / person
                             :name (c1-8 / name
                                         :op1 "NewsWatch33"))
                 :ARG2 (c1-6 / share-01
                             :ARG0 c1-7
                             :ARG1 (c1-2 / event)))
      :op2 (c1-10 / have-03
                  :ARG0 (c1-3 / you)
                  :ARG1 (c1-11 / date-entity
                               :weekday (c1-9 / friday)
                               :mod (c1-4 / great))
                  :mode imperative))

# ::snt lets goooo!!!
# ::tokens ["lets", "goooo", "!", "!", "!"]
# ::lemmas ["let", "goooo", "!", "!", "!"]
(c2-1 / go-01
      :ARG1 (c2-0 / we)
      :ARG4 (c2-2 / so)
      :mode imperative)

# ::snt society wonders why our youth act the way they do
# ::tokens ["society", "wonders", "why", "our", "youth", "act", "the", "way", "they", "do"]
# ::lemmas ["society", "wonder", "why", "our", "youth", "act", "the", "way", "they", "do"]
(c3-7 / wonder-01
      :ARG0 (c3-6 / society)
      :ARG1 (c3-1 / thing
                  :ARG0-of (c3-8 / cause-01
                                 :ARG1 (c3-0 / act-01
                                             :ARG0 (c3-3 / youth
                                                         :poss (c3-2 / we))
                                             :ARG1 (c3-4 / way
                                                         :manner-of (c3-5 / act-01
                                                                          :ARG0 c3-3))))))

# ::snt don't mine the marijuana its weed. But this picture not cool kids eat there kid don't need to see that
# ::tokens ["do", "n't", "mine", "the", "marijuana", "its", "weed", ".", "But", "this", "picture", "not", "cool", "kids", "eat", "there", "kid", "do", "n't", "need", "to", "see", "that"]
# ::lemmas ["do", "not", "mine", "the", "marijuana", "its", "weed", ".", "but", "this", "picture", "not", "cool", "kid", "eat", "there", "kid", "do", "not", "need", "to", "see", "that"]
(c4-6 / multi-sentence
      :snt1 (c4-9 / i
                  :ARG0-of (c4-3 / mine-01
                                 :ARG1 (c4-12 / marijuana))
                  :polarity -)
      :snt2 (c4-14 / weed
                   :domain (c4-15 / it))
      :snt3 (c4-16 / contrast-01
                   :ARG2 (c4-0 / and
                               :op1 (c4-11 / picture
                                           :ARG1-of (c4-7 / cool-04
                                                          :polarity -)
                                           :topic (c4-2 / eat-01
                                                        :ARG0 (c4-4 / kid)
                                                        :location (c4-1 / there)))
                               :op2 (c4-13 / need-01
                                           :ARG0 (c4-8 / kid)
                                           :ARG1 (c4-10 / see-01
                                                        :ARG0 c4-8
                                                        :ARG1 (c4-5 / that))
                                           :polarity -))))

# ::snt this can't be true
# ::tokens ["this", "ca", "n't", "be", "true"]
# ::lemmas ["this", "can", "not", "be", "true"]
(c5-2 / possible-01
      :ARG1 (c5-1 / true-01
                  :ARG1 (c5-0 / this))
      :polarity -)

# ::snt wow
# ::tokens ["wow"]
# ::lemmas ["wow"]
(c6-0 / wow
      :mode expressive)

# ::snt Detox designed for marijuana will flush your system of built up toxins!
# ::tokens ["Detox", "designed", "for", "marijuana", "will", "flush", "your", "system", "of", "built", "up", "toxins", "!"]
# ::lemmas ["detox", "design", "for", "marijuana", "will", "flush", "your", "system", "of", "build", "up", "toxin", "!"]
(c7-7 / flush-01
      :ARG0 (c7-5 / product
                  :name (c7-6 / name
                              :op1 "Detox")
                  :ARG1-of (c7-8 / design-01
                                 :ARG3 (c7-3 / marijuana)))
      :ARG1 (c7-4 / system
                  :poss (c7-2 / you))
      :ARG2 (c7-0 / toxin
                  :ARG1-of (c7-1 / build-up-05)))

# ::snt Detox designed for marijuana will flush your system of built up toxins!
# ::tokens ["Detox", "designed", "for", "marijuana", "will", "flush", "your", "system", "of", "built", "up", "toxins", "!"]
# ::lemmas ["detox", "design", "for", "marijuana", "will", "flush", "your", "system", "of", "build", "up", "toxin", "!"]
(c8-7 / flush-01
      :ARG0 (c8-5 / product
                  :name (c8-6 / name
                              :op1 "Detox")
                  :ARG1-of (c8-8 / design-01
                                 :ARG3 (c8-3 / marijuana)))
      :ARG1 (c8-4 / system
                  :poss (c8-2 / you))
      :ARG2 (c8-0 / toxin
                  :ARG1-of (c8-1 / build-up-05)))

# ::snt Detox designed for marijuana will flush your system of built up toxins!
# ::tokens ["Detox", "designed", "for", "marijuana", "will", "flush", "your", "system", "of", "built", "up", "toxins", "!"]
# ::lemmas ["detox", "design", "for", "marijuana", "will", "flush", "your", "system", "of", "build", "up", "toxin", "!"]
(c9-7 / flush-01
      :ARG0 (c9-5 / product
                  :name (c9-6 / name
                              :op1 "Detox")
                  :ARG1-of (c9-8 / design-01
                                 :ARG3 (c9-3 / marijuana)))
      :ARG1 (c9-4 / system
                  :poss (c9-2 / you))
      :ARG2 (c9-0 / toxin
                  :ARG1-of (c9-1 / build-up-05)))

# ::snt Detox designed for marijuana will flush your system of built up toxins!
# ::tokens ["Detox", "designed", "for", "marijuana", "will", "flush", "your", "system", "of", "built", "up", "toxins", "!"]
# ::lemmas ["detox", "design", "for", "marijuana", "will", "flush", "your", "system", "of", "build", "up", "toxin", "!"]
(c10-7 / flush-01
       :ARG0 (c10-5 / product
                    :name (c10-6 / name
                                 :op1 "Detox")
                    :ARG1-of (c10-8 / design-01
                                    :ARG3 (c10-3 / marijuana)))
       :ARG1 (c10-4 / system
                    :poss (c10-2 / you))
       :ARG2 (c10-0 / toxin
                    :ARG1-of (c10-1 / build-up-05)))

# ::snt VIDEO OUT NOW! ON THE WAY! (Link in Bio)
# ::tokens ["VIDEO", "OUT", "NOW", "!", "ON", "THE", "WAY", "!", "(", "Link", "in", "Bio", ")"]
# ::lemmas ["video", "out", "now", "!", "on", "the", "WAY", "!", "(", "link", "in", "Bio", ")"]
(c11-0 / and
       :op1 (c11-5 / out-01
                   :ARG1 (c11-6 / video)
                   :time (c11-4 / now))
       :op2 (c11-7 / way
                   :direction (c11-2 / on))
       :ARG1-of (c11-8 / hyperlink-01
                       :ARG3 (c11-1 / thing
                                    :name (c11-3 / name
                                                 :op1 "Bio"))))

# ::snt Fake. It's illegal to consume Mary Jane in public in Denver.
# ::tokens ["Fake", ".", "It", "'s", "illegal", "to", "consume", "Mary", "Jane", "in", "public", "in", "Denver", "."]
# ::lemmas ["fake", ".", "it", "be", "illegal", "to", "consume", "Mary", "Jane", "in", "public", "in", "Denver", "."]
(c12-1 / multi-sentence
       :snt1 (c12-7 / fake-02)
       :snt2 (c12-6 / legal-02
                    :ARG1 (c12-8 / consume-01
                                 :ARG1 (c12-4 / person
                                              :name (c12-5 / name
                                                           :op1 "Mary"
                                                           :op2 "Jane"))
                                 :location (c12-3 / city
                                                  :name (c12-0 / name
                                                               :op1 "Denver"))
                                 :ARG1-of (c12-2 / public-02))
                    :polarity -))
