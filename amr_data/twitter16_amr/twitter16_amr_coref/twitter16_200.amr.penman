# ::snt China has outlawed stairs
# ::tokens ["China", "has", "outlawed", "stairs"]
# ::lemmas ["China", "have", "outlaw", "stair"]
(c1-0 / outlaw-01
      :ARG0 (c1-2 / country
                  :name (c1-3 / name
                              :op1 "China"))
      :ARG1 (c1-1 / stair))

# ::snt Chinese 'planking'
# ::tokens ["Chinese", "'", "planking", "'"]
# ::lemmas ["Chinese", "'", "plank", "'"]
(c2-1 / plunder-01
      :ARG0 (c2-0 / country
                  :name (c2-2 / name
                              :op1 "China")))

# ::snt why wouldn't they just take the stairs?
# ::tokens ["why", "would", "n't", "they", "just", "take", "the", "stairs", "?"]
# ::lemmas ["why", "would", "not", "they", "just", "take", "the", "stair", "?"]
(c3-1 / take-01
      :ARG0 (c3-3 / they)
      :ARG1 (c3-4 / stair)
      :mod (c3-2 / just)
      :ARG1-of (c3-5 / cause-01
                     :ARG0 (c3-0 / amr-unknown))
      :polarity -)

# ::snt Lol ": This is how people in China are riding escalators after a horrific accident "
# ::tokens ["Lol", "\"", ":", "This", "is", "how", "people", "in", "China", "are", "riding", "escalators", "after", "a", "horrific", "accident", "\""]
# ::lemmas ["Lol", "\"", ":", "this", "be", "how", "people", "in", "China", "be", "ride", "escalator", "after", "a", "horrific", "accident", "\""]
(c4-3 / ride-01
      :ARG0 (c4-6 / person
                  :location (c4-10 / country
                                   :name (c4-7 / name
                                               :op1 "China")))
      :ARG1 (c4-4 / escalator)
      :time (c4-0 / after
                  :op1 (c4-5 / accident
                             :mod (c4-9 / horrific)))
      :manner (c4-1 / this)
      :mod (c4-8 / laugh-01
                 :manner (c4-2 / loud)
                 :mode expressive))

# ::snt or just take the stairs
# ::tokens ["or", "just", "take", "the", "stairs"]
# ::lemmas ["or", "just", "take", "the", "stair"]
(c6-4 / or
      :op2 (c6-0 / take-01
                 :ARG0 (c6-2 / you)
                 :ARG1 (c6-3 / stair)
                 :mod (c6-1 / just)
                 :mode imperative))

# ::snt so I hope these people are careful!!!
# ::tokens ["so", "I", "hope", "these", "people", "are", "careful", "!", "!", "!"]
# ::lemmas ["so", "i", "hope", "these", "people", "be", "careful", "!", "!", "!"]
(c7-3 / hope-01
      :ARG0 (c7-1 / i)
      :ARG1 (c7-4 / care-04
                  :ARG0 (c7-2 / person
                              :mod (c7-0 / this))))

# ::snt he flew face first onto the escalator &amp; had to get a tetanus shot
# ::tokens ["he", "flew", "face", "first", "onto", "the", "escalator", "&", "amp", ";", "had", "to", "get", "a", "tetanus", "shot"]
# ::lemmas ["he", "fly", "face", "first", "onto", "the", "escalator", "&", "amp", ";", "have", "to", "get", "a", "tetanus", "shot"]
(c8-4 / multi-sentence
      :snt1 (c8-9 / fly-01
                  :ARG1 (c8-10 / he)
                  :destination (c8-8 / onto
                                     :op1 (c8-1 / escalator))
                  :manner (c8-2 / face
                                :ord (c8-3 / ordinal-entity
                                           :value 1)))
      :snt2 (c8-7 / obligate-01
                  :ARG2 (c8-5 / get-01
                              :ARG0 c8-10
                              :ARG1 (c8-6 / shoot-01
                                          :ARG1 c8-10
                                          :ARG2 (c8-0 / tetanus)))))

# ::snt reminds me of a friend of mine who slid down an escalator rail!
# ::tokens ["reminds", "me", "of", "a", "friend", "of", "mine", "who", "slid", "down", "an", "escalator", "rail", "!"]
# ::lemmas ["remind", "i", "of", "a", "friend", "of", "mine", "who", "slide", "down", "an", "escalator", "rail", "!"]
(c9-0 / remind-01
      :ARG1 (c9-5 / person
                  :ARG0-of (c9-7 / have-rel-role-91
                                 :ARG1 (c9-3 / i)
                                 :ARG2 (c9-6 / friend))
                  :ARG1-of (c9-4 / slide-01
                                 :ARG4 (c9-2 / rail
                                             :mod (c9-1 / escalator))
                                 :direction (c9-8 / down)))
      :ARG2 c9-3)

# ::snt don't you think they'll get hurt quicker doing this?
# ::tokens ["do", "n't", "you", "think", "they", "'ll", "get", "hurt", "quicker", "doing", "this", "?"]
# ::lemmas ["do", "not", "you", "think", "they", "'ll", "get", "hurt", "quick", "do", "this", "?"]
(c10-1 / think-01
       :polarity (c10-0 / amr-unknown)
       :ARG0 (c10-4 / you)
       :ARG1 (c10-9 / hurt-01
                    :ARG1 (c10-2 / they)
                    :ARG1-of (c10-10 / cause-01
                                     :ARG0 (c10-3 / do-02
                                                  :ARG1 (c10-5 / this)))
                    :ARG1-of (c10-8 / have-degree-91
                                    :ARG2 (c10-7 / quick-02
                                                 :ARG1 c10-9)
                                    :ARG3 (c10-6 / more))))

# ::snt Please Check out this
# ::tokens ["Please", "Check", "out", "this"]
# ::lemmas ["please", "check", "out", "this"]
(c11-2 / check-out-05
       :ARG0 (c11-0 / you)
       :ARG1 (c11-1 / this)
       :mode imperative
       :polite +)

# ::snt :couldn't they just take the stairs??
# ::tokens [":", "could", "n't", "they", "just", "take", "the", "stairs", "?", "?"]
# ::lemmas [":", "could", "not", "they", "just", "take", "the", "stair", "?", "?"]
(c12-5 / possible-01
       :ARG1 (c12-0 / take-01
                    :ARG0 (c12-3 / they)
                    :ARG1 (c12-4 / stair)
                    :mod (c12-2 / just))
       :ARG1-of (c12-1 / request-confirmation-91)
       :polarity -)

# ::snt here's an idea... take the stairs
# ::tokens ["here", "'s", "an", "idea", "...", "take", "the", "stairs"]
# ::lemmas ["here", "be", "an", "idea", "...", "take", "the", "stair"]
(c13-2 / multi-sentence
       :snt1 (c13-3 / idea
                    :location (c13-5 / here))
       :snt2 (c13-0 / take-01
                    :ARG0 (c13-1 / you)
                    :ARG1 (c13-4 / stair)
                    :mode imperative))

# ::snt what if your legs not long enough to do that grounded forever
# ::tokens ["what", "if", "your", "legs", "not", "long", "enough", "to", "do", "that", "grounded", "forever"]
# ::lemmas ["what", "if", "your", "leg", "not", "long", "enough", "to", "do", "that", "ground", "forever"]
(c14-8 / have-condition-91
       :ARG1 (c14-0 / amr-unknown)
       :ARG2 (c14-5 / have-degree-91
                    :ARG1 (c14-6 / leg
                                 :part-of (c14-3 / you))
                    :ARG2 (c14-1 / long-03
                                 :ARG1 c14-6)
                    :ARG3 (c14-2 / enough)
                    :ARG6 (c14-4 / ground-01
                                 :ARG1 c14-6
                                 :duration (c14-7 / forever))
                    :polarity -))

# ::snt I guess stairs aren't an option in China
# ::tokens ["I", "guess", "stairs", "are", "n't", "an", "option", "in", "China"]
# ::lemmas ["i", "guess", "stair", "be", "not", "an", "option", "in", "China"]
(c15-0 / guess-01
       :ARG0 (c15-1 / i)
       :ARG1 (c15-4 / opt-01
                    :ARG1 (c15-2 / stair)
                    :location (c15-5 / country
                                     :name (c15-3 / name
                                                  :op1 "China"))
                    :polarity -))

# ::snt what is this?!? People should just take the stairs
# ::tokens ["what", "is", "this", "?", "!", "?", "People", "should", "just", "take", "the", "stairs"]
# ::lemmas ["what", "be", "this", "?", "!", "?", "people", "should", "just", "take", "the", "stair"]
(c16-5 / multi-sentence
       :snt1 (c16-1 / this
                    :mod (c16-0 / amr-unknown))
       :snt2 (c16-2 / recommend-01
                    :ARG1 (c16-4 / take-01
                                 :ARG0 (c16-7 / person)
                                 :ARG1 (c16-6 / stair)
                                 :mod (c16-3 / just))))

# ::snt maybe they should just take the stairs
# ::tokens ["maybe", "they", "should", "just", "take", "the", "stairs"]
# ::lemmas ["maybe", "they", "should", "just", "take", "the", "stair"]
(c17-5 / possible-01
       :ARG1 (c17-1 / recommend-01
                    :ARG1 (c17-0 / take-01
                                 :ARG0 (c17-3 / they)
                                 :ARG1 (c17-4 / stair)
                                 :mod (c17-2 / just))
                    :ARG2 c17-3))

# ::snt How about just taking the STAIRS ??
# ::tokens ["How", "about", "just", "taking", "the", "STAIRS", "?", "?"]
# ::lemmas ["how", "about", "just", "take", "the", "stairs", "?", "?"]
(c19-1 / take-01
       :ARG1 (c19-2 / roof)
       :mod (c19-3 / just)
       :mod (c19-0 / amr-unknown))

# ::snt come on
# ::tokens ["come", "on"]
# ::lemmas ["come", "on"]
(c20-1 / come-on-25
       :ARG1 (c20-0 / you)
       :mode imperative)

# ::snt isn't that how you're supposed to ride the escalator tho??
# ::tokens ["is", "n't", "that", "how", "you", "'re", "supposed", "to", "ride", "the", "escalator", "tho", "?", "?"]
# ::lemmas ["be", "not", "that", "how", "you", "be", "suppose", "to", "ride", "the", "escalator", "tho", "?", "?"]
(c21-6 / have-concession-91
       :ARG1 (c21-5 / suppose-02
                    :ARG1 (c21-3 / you)
                    :ARG2 (c21-1 / ride-01
                                 :ARG0 c21-3
                                 :ARG1 (c21-2 / escalator))
                    :manner (c21-0 / that)
                    :ARG1-of (c21-4 / request-confirmation-91)))
