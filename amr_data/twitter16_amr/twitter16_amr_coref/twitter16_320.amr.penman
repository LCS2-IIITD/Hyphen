# ::snt LA PROCEDENCIA TNICA NO TIENE NADA QUE VER CON LA NACIONALIDAD Y LAS COSTUMBRE CULTURALES DE TU PAS DE NACIMIENTO
# ::tokens ["LA", "PROCEDENCIA", "TNICA", "NO", "TIENE", "NADA", "QUE", "VER", "CON", "LA", "NACIONALIDAD", "Y", "LAS", "COSTUMBRE", "CULTURALES", "DE", "TU", "PAS", "DE", "NACIMIENTO"]
# ::lemmas ["LA", "PROCEDENCIA", "TNICA", "no", "TIENE", "NADA", "QUE", "VER", "CON", "LA", "NACIONALIDAD", "Y", "LAS", "COSTUMBRE", "CULTURALES", "DE", "TU", "PAS", "DE", "NACIMIENTO"]
(c1-0 / and
      :op1 (c1-4 / deny-01
                 :ARG0 (c1-8 / country
                             :name (c1-6 / name
                                         :op1 "LA"))
                 :ARG1 (c1-3 / nation))
      :op2 (c1-5 / criminal-organization
                 :name (c1-7 / name
                             :op1 "La"
                             :op2 "Criminal"
                             :op3 "Assistance"))
      :op3 (c1-2 / civilize-01
                 :ARG0 c1-8)
      :op4 c1-5
      :name (c1-1 / name
                  :op1 "LAS"
                  :op2 "COSTUMBRE"))

# ::snt Sharp and Stupid in the same mind to the extreme
# ::tokens ["Sharp", "and", "Stupid", "in", "the", "same", "mind", "to", "the", "extreme"]
# ::lemmas ["sharp", "and", "Stupid", "in", "the", "same", "mind", "to", "the", "extreme"]
(c2-0 / and
      :op1 (c2-4 / sharp-02)
      :op2 (c2-1 / stupid)
      :manner (c2-3 / mind
                    :ARG1-of (c2-5 / same-01))
      :degree (c2-2 / extreme))

# ::snt not every body hace such a bad intentions like isis. De hace To protector our way Of life no matter what!
# ::tokens ["not", "every", "body", "hace", "such", "a", "bad", "intentions", "like", "isis", ".", "De", "hace", "To", "protector", "our", "way", "Of", "life", "no", "matter", "what", "!"]
# ::lemmas ["not", "every", "body", "hace", "such", "a", "bad", "intention", "like", "isis", ".", "De", "hace", "to", "protector", "our", "way", "of", "life", "no", "matter", "what", "!"]
(c3-6 / multi-sentence
      :snt1 (c3-15 / hace-01
                   :ARG0 (c3-2 / body
                               :mod (c3-1 / every
                                          :polarity -))
                   :ARG1 (c3-10 / intend-01
                                :ARG1-of (c3-5 / bad-07
                                               :degree (c3-11 / such))
                                :example (c3-3 / isis)))
      :snt2 (c3-9 / hace-01
                  :ARG0 (c3-7 / you)
                  :ARG2 (c3-12 / person
                               :ARG0-of (c3-8 / protect-01
                                              :ARG1 (c3-13 / way
                                                           :manner-of (c3-14 / live-01
                                                                             :ARG0 (c3-4 / we
                                                                                         :poss-of c3-13)))))
                  :ARG1-of (c3-0 / regardless-91)
                  :mode imperative))

# ::snt Terror attack over, dead at Kenya university
# ::tokens ["Terror", "attack", "over", ",", "dead", "at", "Kenya", "university"]
# ::lemmas ["terror", "attack", "over", ",", "dead", "at", "Kenya", "university"]
(c4-0 / and
      :op1 (c4-2 / attack-01
                 :mod (c4-1 / terrorism))
      :op2 (c4-7 / die-01
                 :ARG1 (c4-4 / person))
      :location (c4-3 / university
                      :location (c4-6 / country
                                      :name (c4-5 / name
                                                  :op1 "Kenya"))))

# ::snt And today's Republinut Govs &amp; Prez candidates want to stop this from happening again!
# ::tokens ["And", "today", "'s", "Republinut", "Govs", "&", "amp", ";", "Prez", "candidates", "want", "to", "stop", "this", "from", "happening", "again", "!"]
# ::lemmas ["and", "today", "'s", "Republinut", "Govs", "&", "amp", ";", "Prez", "candidate", "want", "to", "stop", "this", "from", "happen", "again", "!"]
(c5-0 / and
      :op2 (c5-11 / want-01
                  :ARG0 (c5-14 / and
                               :op1 (c5-9 / person
                                          :ARG0-of (c5-13 / have-org-role-91
                                                          :ARG2 (c5-5 / governor)))
                               :op2 (c5-6 / person
                                          :ARG0-of (c5-7 / have-org-role-91
                                                         :ARG2 (c5-1 / president)))
                               :time (c5-2 / today))
                  :ARG1 (c5-8 / stop-03
                              :ARG0 (c5-12 / candidate
                                           :ARG0-of (c5-10 / have-org-role-91
                                                           :ARG2 c5-1))
                              :ARG1 (c5-4 / this)
                              :ARG2 (c5-3 / again))))

# ::snt There's this thing called irony... you should try it. Jeez
# ::tokens ["There", "'s", "this", "thing", "called", "irony", "...", "you", "should", "try", "it", ".", "Jeez"]
# ::lemmas ["there", "be", "this", "thing", "call", "irony", "...", "you", "should", "try", "it", ".", "jeez"]
(c6-6 / multi-sentence
      :snt1 (c6-7 / irony
                  :domain (c6-0 / thing
                                :mod (c6-3 / this)))
      :snt2 (c6-1 / recommend-01
                  :ARG1 (c6-4 / try-01
                              :ARG0 (c6-5 / you)
                              :ARG1 c6-0)
                  :ARG2 c6-5)
      :snt3 (c6-2 / jeez
                  :mode expressive))

# ::snt Well then, come on in!
# ::tokens ["Well", "then", ",", "come", "on", "in", "!"]
# ::lemmas ["well", "then", ",", "come", "on", "in", "!"]
(c7-3 / come-on-25
      :ARG1 (c7-1 / you)
      :mod (c7-0 / well)
      :mod (c7-2 / then)
      :mode imperative)

# ::snt What do you mean "remember"?? Last I checked, you're supposed to be the MEDIA, not the morality of a nation. REPORT the news.
# ::tokens ["What", "do", "you", "mean", "\"", "remember", "\"", "?", "?", "Last", "I", "checked", ",", "you", "'re", "supposed", "to", "be", "the", "MEDIA", ",", "not", "the", "morality", "of", "a", "nation", ".", "REPORT", "the", "news", "."]
# ::lemmas ["what", "do", "you", "mean", "\"", "remember", "\"", "?", "?", "last", "i", "check", ",", "you", "be", "suppose", "to", "be", "the", "MEDIA", ",", "not", "the", "morality", "of", "a", "nation", ".", "report", "the", "news", "."]
(c8-7 / multi-sentence
      :snt1 (c8-4 / mean-01
                  :ARG0 (c8-6 / you)
                  :ARG1 (c8-0 / amr-unknown)
                  :ARG2 (c8-2 / remember-01
                              :ARG0 c8-6))
      :snt2 (c8-17 / contrast-01
                   :ARG1 (c8-12 / suppose-02
                                :ARG1 (c8-3 / you)
                                :ARG2 (c8-14 / media))
                   :ARG2 (c8-1 / suppose-02
                               :ARG1 c8-3
                               :ARG2 (c8-13 / morality
                                            :poss (c8-15 / nation))
                               :polarity -)
                   :time (c8-8 / check-01
                               :ARG0 (c8-11 / i)
                               :time (c8-16 / last)))
      :snt3 (c8-10 / report-01
                   :ARG0 (c8-9 / you)
                   :ARG1 (c8-5 / news)
                   :mode imperative))

# ::snt '...and there was no ISIS in his time.' Maybe you should be adding that phrase too.
# ::tokens ["'", "...", "and", "there", "was", "no", "ISIS", "in", "his", "time", ".", "'", "Maybe", "you", "should", "be", "adding", "that", "phrase", "too", "."]
# ::lemmas ["'", "...", "and", "there", "be", "no", "ISIS", "in", "his", "time", ".", "'", "maybe", "you", "should", "be", "add", "that", "phrase", "too", "."]
(c9-6 / multi-sentence
      :snt1 (c9-0 / and
                  :op2 (c9-12 / have-polarity-91
                              :ARG1 (c9-13 / criminal-organization
                                           :name (c9-10 / name
                                                        :op1 "Islamic"
                                                        :op2 "organization"))
                              :time (c9-1 / time
                                          :poss (c9-8 / he))
                              :ARG2 -))
      :snt2 (c9-11 / possible-01
                   :ARG1 (c9-2 / recommend-01
                               :ARG1 (c9-9 / add-01
                                           :ARG0 (c9-5 / you)
                                           :ARG1 (c9-7 / phrase
                                                       :mod (c9-3 / that))
                                           :mod (c9-4 / too)))))

# ::snt So what?
# ::tokens ["So", "what", "?"]
# ::lemmas ["so", "what", "?"]
(c10-1 / infer-01
       :ARG1 (c10-0 / amr-unknown))

# ::snt its not the immigrants that are the problem...its the radicals that are mixed in that we cant discern
# ::tokens ["its", "not", "the", "immigrants", "that", "are", "the", "problem", "...", "its", "the", "radicals", "that", "are", "mixed", "in", "that", "we", "ca", "nt", "discern"]
# ::lemmas ["its", "not", "the", "immigrant", "that", "be", "the", "problem", "...", "its", "the", "radical", "that", "be", "mix", "in", "that", "we", "can", "not", "discern"]
(c11-9 / contrast-01
       :ARG1 (c11-7 / problem
                    :domain (c11-3 / person
                                   :ARG0-of (c11-6 / immigrate-01))
                    :polarity -)
       :ARG2 (c11-0 / possible-01
                    :ARG1 (c11-2 / discern-01
                                 :ARG0 (c11-8 / we)
                                 :ARG1 (c11-5 / person
                                              :ARG1-of (c11-1 / radical-02)
                                              :ARG1-of (c11-4 / mix-01)))
                    :polarity -))

# ::snt Remember: The two Boston bombers were refugees
# ::tokens ["Remember", ":", "The", "two", "Boston", "bombers", "were", "refugees"]
# ::lemmas ["remember", ":", "the", "two", "Boston", "bomber", "be", "refugee"]
(c12-1 / remember-01
       :ARG0 (c12-3 / you)
       :ARG1 (c12-4 / refugee
                    :domain (c12-0 / aircraft
                                   :ARG0-of (c12-2 / bomb-01)
                                   :location (c12-6 / city
                                                    :name (c12-5 / name
                                                                 :op1 "Boston"))
                                   :quant 2))
       :mode imperative)

# ::snt Correct, not all migrants, foreigners or citizens are terrorists. We need to Find the ones who are.
# ::tokens ["Correct", ",", "not", "all", "migrants", ",", "foreigners", "or", "citizens", "are", "terrorists", ".", "We", "need", "to", "Find", "the", "ones", "who", "are", "."]
# ::lemmas ["correct", ",", "not", "all", "migrant", ",", "foreigner", "or", "citizen", "be", "terrorist", ".", "we", "need", "to", "find", "the", "one", "who", "be", "."]
(c13-5 / multi-sentence
       :snt1 (c13-13 / correct-02
                     :concession (c13-1 / terrorist
                                        :domain (c13-10 / or
                                                        :op1 (c13-8 / person
                                                                    :ARG0-of (c13-3 / migrate-01))
                                                        :op2 (c13-6 / person
                                                                    :mod (c13-12 / foreign))
                                                        :op3 (c13-7 / citizen)
                                                        :mod (c13-0 / all
                                                                    :polarity -))))
       :snt2 (c13-9 / need-01
                    :ARG0 (c13-11 / we)
                    :ARG1 (c13-2 / find-01
                                 :ARG0 c13-11
                                 :ARG1 (c13-4 / terrorist
                                              :domain c13-10))))

# ::snt Oh Snap!
# ::tokens ["Oh", "Snap", "!"]
# ::lemmas ["oh", "snap", "!"]
(c15-1 / snap-01
       :mod (c15-0 / oh)
       :mode expressive)

# ::snt what are you doing for them?
# ::tokens ["what", "are", "you", "doing", "for", "them", "?"]
# ::lemmas ["what", "be", "you", "do", "for", "they", "?"]
(c16-3 / do-02
       :ARG0 (c16-1 / you)
       :ARG1 (c16-0 / amr-unknown)
       :ARG2 (c16-2 / they))

# ::snt is it supposed to be funny? Cause it's not.
# ::tokens ["is", "it", "supposed", "to", "be", "funny", "?", "Cause", "it", "'s", "not", "."]
# ::lemmas ["be", "it", "suppose", "to", "be", "funny", "?", "cause", "it", "be", "not", "."]
(c17-2 / multi-sentence
       :snt1 (c17-4 / suppose-02
                    :polarity (c17-0 / amr-unknown)
                    :ARG1 (c17-3 / it)
                    :ARG2 (c17-5 / funny-02
                                 :ARG1 c17-3))
       :snt2 (c17-7 / cause-01
                    :ARG0 (c17-1 / funny-02
                                 :ARG1 (c17-6 / it)
                                 :polarity -)))

# ::snt Remember: Steve Jobs' biological father was a Syrian migrant.
# ::tokens ["Remember", ":", "Steve", "Jobs", "'", "biological", "father", "was", "a", "Syrian", "migrant", "."]
# ::lemmas ["remember", ":", "Steve", "Jobs", "'", "biological", "father", "be", "a", "Syrian", "migrant", "."]
(c18-0 / remember-01
       :ARG0 (c18-3 / you)
       :ARG1 (c18-4 / migrate-01
                    :ARG0 (c18-6 / person
                                 :mod (c18-10 / country
                                              :name (c18-7 / name
                                                           :op1 "Syria"))
                                 :ARG0-of (c18-9 / have-rel-role-91
                                                 :ARG1 (c18-5 / person
                                                              :name (c18-2 / name
                                                                           :op1 "Steve"
                                                                           :op2 "Jobs"))
                                                 :ARG2 (c18-8 / father
                                                              :mod (c18-1 / biology)))))
       :mode imperative)

# ::snt However, He Isn't A Terrorist, Nor Has He Murdered Anyone. Plenty of Syrians Are NOT Terrorists. But This Is , &amp; Many Are.
# ::tokens ["However", ",", "He", "Is", "n't", "A", "Terrorist", ",", "Nor", "Has", "He", "Murdered", "Anyone", ".", "Plenty", "of", "Syrians", "Are", "NOT", "Terrorists", ".", "But", "This", "Is", ",", "&", "amp", ";", "Many", "Are", "."]
# ::lemmas ["however", ",", "he", "be", "not", "a", "Terrorist", ",", "nor", "have", "he", "murder", "Anyone", ".", "plenty", "of", "Syrians", "be", "not", "Terrorists", ".", "but", "This", "Is", ",", "&", "amp", ";", "many", "be", "."]
(c19-7 / multi-sentence
       :snt1 (c19-16 / contrast-01
                     :ARG2 (c19-0 / and
                                  :op1 (c19-2 / terrorist
                                              :domain (c19-15 / he)
                                              :polarity -)
                                  :op2 (c19-3 / murder-01
                                              :ARG0 c19-15
                                              :ARG1 (c19-11 / anyone)
                                              :polarity -)))
       :snt2 (c19-4 / terrorist
                    :domain (c19-13 / person
                                    :quant (c19-8 / plenty)
                                    :mod (c19-9 / country
                                                :name (c19-14 / name
                                                              :op1 "Syria")))
                    :polarity -)
       :snt3 (c19-5 / contrast-01
                    :ARG2 c19-0
                    :op1 (c19-6 / this)
                    :op2 (c19-10 / terrorist
                                 :domain (c19-1 / person
                                                :quant (c19-12 / many)))))

# ::snt who abandoned him? And who he chose not to see before death
# ::tokens ["who", "abandoned", "him", "?", "And", "who", "he", "chose", "not", "to", "see", "before", "death"]
# ::lemmas ["who", "abandon", "he", "?", "and", "who", "he", "choose", "not", "to", "see", "before", "death"]
(c20-4 / multi-sentence
       :snt1 (c20-0 / abandon-01
                    :ARG0 (c20-10 / amr-unknown)
                    :ARG1 (c20-9 / he))
       :snt2 (c20-1 / and
                    :op2 (c20-7 / person
                                :ARG1-of (c20-6 / see-01
                                                :ARG0 (c20-5 / he)
                                                :ARG1-of (c20-8 / choose-01
                                                                :ARG0 c20-5
                                                                :polarity -)
                                                :time (c20-2 / before
                                                             :op1 (c20-3 / die-01
                                                                         :ARG1 c20-5))))))

# ::snt and his adaptive parents who raised him were Armenian Christians.
# ::tokens ["and", "his", "adaptive", "parents", "who", "raised", "him", "were", "Armenian", "Christians", "."]
# ::lemmas ["and", "his", "adaptive", "parent", "who", "raise", "he", "be", "Armenian", "Christians", "."]
(c22-0 / and
       :op2 (c22-8 / person
                   :mod (c22-2 / religious-group
                               :name (c22-9 / name
                                            :op1 "Christian"))
                   :mod (c22-11 / country
                                :name (c22-4 / name
                                             :op1 "Armenia"))
                   :domain (c22-5 / person
                                  :ARG0-of (c22-10 / have-rel-role-91
                                                   :ARG1 (c22-7 / he)
                                                   :ARG2 (c22-1 / parent
                                                                :ARG0-of (c22-3 / enable-01)))
                                  :ARG0-of (c22-6 / raise-03
                                                  :ARG1 c22-7))))

# ::snt lol. Thanks. Let them all in now. Ask if they can fix your shitty app
# ::tokens ["lol", ".", "Thanks", ".", "Let", "them", "all", "in", "now", ".", "Ask", "if", "they", "can", "fix", "your", "shitty", "app"]
# ::lemmas ["lol", ".", "thank", ".", "let", "they", "all", "in", "now", ".", "ask", "if", "they", "can", "fix", "your", "shitty", "app"]
(c23-7 / multi-sentence
       :snt1 (c23-1 / thank-01
                    :ARG0 (c23-9 / i)
                    :ARG1 (c23-6 / you)
                    :manner (c23-13 / loud))
       :snt2 (c23-2 / let-01
                    :ARG0 (c23-4 / you)
                    :ARG1 (c23-5 / they
                                 :mod (c23-0 / all))
                    :time (c23-11 / now)
                    :mode imperative)
       :snt3 (c23-15 / ask-01
                     :ARG0 (c23-8 / you)
                     :ARG1 (c23-12 / possible-01
                                   :ARG1 (c23-14 / fix-02
                                                 :ARG0 c23-5
                                                 :ARG1 (c23-3 / app
                                                              :poss c23-8
                                                              :mod (c23-10 / shitty))))
                     :ARG2 c23-5
                     :mode imperative))

# ::snt what an irony that U slammed the door in their faces.
# ::tokens ["what", "an", "irony", "that", "U", "slammed", "the", "door", "in", "their", "faces", "."]
# ::lemmas ["what", "an", "irony", "that", "U", "slam", "the", "door", "in", "their", "face", "."]
(c24-2 / irony
       :domain (c24-3 / slam-02
                      :ARG0 (c24-4 / person
                                   :name (c24-5 / name
                                                :op1 "U"))
                      :ARG1 (c24-7 / door)
                      :ARG2 (c24-6 / face
                                   :part-of (c24-1 / they)))
       :degree (c24-0 / so))

# ::snt If we're going to use that logic, let's stop aborting all of the unborn humans that could potentially cure cancer
# ::tokens ["If", "we", "'re", "going", "to", "use", "that", "logic", ",", "let", "'s", "stop", "aborting", "all", "of", "the", "unborn", "humans", "that", "could", "potentially", "cure", "cancer"]
# ::lemmas ["if", "we", "be", "go", "to", "use", "that", "logic", ",", "let", "us", "stop", "abort", "all", "of", "the", "unborn", "human", "that", "could", "potentially", "cure", "cancer"]
(c25-6 / stop-01
       :ARG0 (c25-8 / we)
       :ARG1 (c25-0 / abort-01
                    :ARG0 c25-8
                    :ARG1 (c25-11 / human
                                  :ARG1-of (c25-2 / bear-02
                                                  :polarity -)
                                  :mod (c25-12 / all)
                                  :ARG0-of (c25-10 / cure-01
                                                   :ARG1 (c25-4 / cancer)
                                                   :ARG1-of (c25-7 / possible-01)
                                                   :mod (c25-3 / potential))))
       :condition (c25-5 / use-01
                         :ARG0 c25-8
                         :ARG1 (c25-9 / logic
                                      :mod (c25-1 / that)))
       :mode imperative)

# ::snt and our Vets are on the streets with corrupt health care for them that pay themselves $170 million in bonuses.But no money for Vet
# ::tokens ["and", "our", "Vets", "are", "on", "the", "streets", "with", "corrupt", "health", "care", "for", "them", "that", "pay", "themselves", "$", "170", "million", "in", "bonuses", ".", "But", "no", "money", "for", "Vet"]
# ::lemmas ["and", "our", "vet", "be", "on", "the", "street", "with", "corrupt", "health", "care", "for", "they", "that", "pay", "themselves", "$", "170", "million", "in", "bonus", ".", "but", "no", "money", "for", "Vet"]
(c26-0 / and
       :op2 (c26-1 / be-located-at-91
                   :ARG1 (c26-8 / person
                                :ARG0-of (c26-13 / have-org-role-91
                                                 :ARG1 (c26-11 / we)
                                                 :ARG2 (c26-10 / veteran))
                                :poss c26-11
                                :ARG0-of (c26-3 / pay-01
                                                :ARG1 (c26-4 / monetary-quantity
                                                             :unit (c26-14 / dollar)
                                                             :ARG1-of (c26-2 / bonus-01)
                                                             :quant 170000000)
                                                :ARG2 c26-8)
                                :ARG0-of (c26-6 / have-03
                                                :ARG1 (c26-12 / care-03
                                                              :ARG1 (c26-7 / health)
                                                              :ARG1-of (c26-5 / corrupt-01))))
                   :ARG2 (c26-9 / street)))

# ::snt Different world...Different day.
# ::tokens ["Different", "world", "...", "Different", "day", "."]
# ::lemmas ["different", "world", "...", "different", "day", "."]
(c27-0 / and
       :op1 (c27-1 / world
                   :ARG1-of (c27-3 / differ-02
                                   :ARG1 (c27-2 / day
                                                :op2-of c27-0))))

# ::snt ohh... Ok then, let's embrace those suicide bombers!
# ::tokens ["ohh", "...", "Ok", "then", ",", "let", "'s", "embrace", "those", "suicide", "bombers", "!"]
# ::lemmas ["ohh", "...", "ok", "then", ",", "let", "us", "embrace", "those", "suicide", "bomber", "!"]
(c28-5 / multi-sentence
       :snt1 (c28-8 / oh
                    :mode expressive)
       :snt2 (c28-1 / embrace-01
                    :ARG0 (c28-9 / we)
                    :ARG1 (c28-7 / person
                                 :ARG0-of (c28-2 / bomb-01
                                                 :mod (c28-6 / suicide))
                                 :mod (c28-0 / that))
                    :mod (c28-3 / then)
                    :ARG1-of (c28-4 / okay-01)
                    :mode imperative))

# ::snt and so dumb ass no understood the POINT.
# ::tokens ["and", "so", "dumb", "ass", "no", "understood", "the", "POINT", "."]
# ::lemmas ["and", "so", "dumb", "ass", "no", "understand", "the", "POINT", "."]
(c29-0 / and
       :op2 (c29-1 / understand-01
                   :ARG0 (c29-3 / ass
                                :mod (c29-5 / dumb)
                                :degree (c29-2 / so))
                   :ARG1 (c29-4 / point-04)
                   :polarity -))

# ::snt It is a small world after all.
# ::tokens ["It", "is", "a", "small", "world", "after", "all", "."]
# ::lemmas ["it", "be", "a", "small", "world", "after", "all", "."]
(c30-1 / world
       :mod (c30-3 / small)
       :mod (c30-0 / after-all)
       :domain (c30-2 / it))

# ::snt USA like many nations land of immigrants How u live grow and utilize ur life in any country decide ur success in life or its doom
# ::tokens ["USA", "like", "many", "nations", "land", "of", "immigrants", "How", "u", "live", "grow", "and", "utilize", "ur", "life", "in", "any", "country", "decide", "ur", "success", "in", "life", "or", "its", "doom"]
# ::lemmas ["USA", "like", "many", "nation", "land", "of", "immigrant", "how", "u", "live", "grow", "and", "utilize", "ur", "life", "in", "any", "country", "decide", "ur", "success", "in", "life", "or", "its", "doom"]
(c31-8 / multi-sentence
       :snt1 (c31-3 / resemble-01
                    :ARG1 (c31-17 / country
                                  :name (c31-13 / name
                                                :op1 "USA"))
                    :ARG2 (c31-10 / country
                                  :name c31-13
                                  :op1 "Land"
                                  :op2 "of"
                                  :op3 "Immigration")
                    :poss (c31-5 / nation
                                 :quant (c31-4 / many)))
       :snt2 (c31-0 / and
                    :op1 (c31-9 / grow-03
                                :ARG1 (c31-7 / you))
                    :op2 (c31-11 / utilize-01
                                 :ARG1 (c31-16 / life
                                               :poss c31-7))
                    :manner (c31-12 / amr-unknown)
                    :condition-of (c31-6 / decide-01
                                         :ARG0 c31-7
                                         :ARG1 (c31-15 / or
                                                       :op1 (c31-14 / succeed-01
                                                                    :ARG0 c31-7
                                                                    :ARG1 (c31-2 / life))
                                                       :op2 (c31-1 / doom
                                                                   :poss c31-2)))))

# ::snt --and his dad still works in .
# ::tokens ["--and", "his", "dad", "still", "works", "in", "."]
# ::lemmas ["--and", "his", "dad", "still", "work", "in", "."]
(c32-0 / and
       :op2 (c32-4 / work-01
                   :ARG0 (c32-3 / person
                                :ARG0-of (c32-5 / have-rel-role-91
                                                :ARG1 (c32-1 / he)
                                                :ARG2 (c32-6 / dad)))
                   :mod (c32-2 / still)))

# ::snt Aren't we all products of somewhere along the line?
# ::tokens ["Are", "n't", "we", "all", "products", "of", "somewhere", "along", "the", "line", "?"]
# ::lemmas ["be", "not", "we", "all", "product", "of", "somewhere", "along", "the", "line", "?"]
(c33-1 / thing
       :polarity (c33-0 / amr-unknown)
       :ARG1-of (c33-4 / produce-01
                       :location (c33-3 / somewhere
                                        :mod (c33-7 / along
                                                    :op1 (c33-6 / line))))
       :domain (c33-5 / we
                      :mod (c33-2 / all)))

# ::snt Remember exceptions don't make the rule.
# ::tokens ["Remember", "exceptions", "do", "n't", "make", "the", "rule", "."]
# ::lemmas ["remember", "exception", "do", "not", "make", "the", "rule", "."]
(c34-1 / remember-01
       :ARG0 (c34-3 / you)
       :ARG1 (c34-4 / rule-01
                    :ARG0 (c34-0 / thing
                                 :ARG1-of (c34-2 / except-01))
                    :polarity -)
       :mode imperative)
