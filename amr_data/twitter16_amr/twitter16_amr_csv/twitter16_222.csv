comment,amr
"Father was far from today's migrants. Jobs did meet him, unknowingly. Read","# ::snt Father was far from today's migrants. Jobs did meet him, unknowingly. Read
(m / multi-sentence
      :snt1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG2 (f / father))
            :location (r / relative-position
                  :op1 (p2 / person
                        :ARG0-of (m2 / migrate-01)
                        :time (t / today))
                  :quant (f2 / far)))
      :snt2 (m3 / meet-02
            :ARG0 (j / job)
            :ARG1 (h2 / he)
            :ARG1-of (k / know-01
                  :polarity -
                  :ARG0 j))
      :snt3 (r2 / read-01
            :mode imperative
            :ARG0 (y / you)))"
:And?,"# ::snt :And?
(a / and
      :polarity (a2 / amr-unknown))"
But not the potential product of a global terrorist organization. Big difference there.,"# ::snt But not the potential product of a global terrorist organization. Big difference there.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG2 (p / product
                  :polarity -
                  :mod (p2 / potential)
                  :poss (o / organization
                        :mod (t / terrorism)
                        :mod (g / globe))))
      :snt2 (d / differ-02
            :degree (b / big)
            :location (t2 / there)))"
worth remembering: Anne Frank was a Refugee Who Was Denied Entrance to the United States,"# ::snt worth remembering: Anne Frank was a Refugee Who Was Denied Entrance to the United States
(w / worth-02
      :ARG2 (r / remember-01
            :ARG1 (r2 / refugee
                  :domain (p / person
                        :name (n / name
                              :op1 ""Anne""
                              :op2 ""Frank""))
                  :ARG1-of (d / deny-01
                        :ARG2 (e / enter-01
                              :ARG0 r2
                              :ARG1 (c / country
                                    :name (n2 / name
                                          :op1 ""United""
                                          :op2 ""States"")))))))"
son of Syrian refugee?,"# ::snt son of Syrian refugee?
(p / person
      :polarity (a / amr-unknown)
      :ARG0-of (h / have-rel-role-91
            :ARG1 (r / refugee
                  :mod (c / country
                        :name (n / name
                              :op1 ""Syria"")))
            :ARG2 (s / son)))"
Not according to any actual evidence.,"# ::snt Not according to any actual evidence.
(s / say-01
      :polarity -
      :ARG0 (e / evidence-01
            :ARG1-of (a / actual-02)
            :mod (a2 / any)))"
I don't know why this is considered valid argument. The probability of a Syrian refugee being a terrorist is higher.,"# ::snt I don't know why this is considered valid argument. The probability of a Syrian refugee being a terrorist is higher.
(m / multi-sentence
      :snt1 (k / know-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG0-of (c / cause-01
                        :ARG1 (c2 / consider-01
                              :ARG1 (t2 / thing
                                    :ARG1-of (a / argue-01)
                                    :ARG1-of (v / valid-02)
                                    :domain (t3 / this))))))
      :snt2 (h / have-degree-91
            :ARG1 (p / probability
                  :mod (t4 / terrorist
                        :domain (r / refugee
                              :mod (c3 / country
                                    :name (n / name
                                          :op1 ""Syria"")))))
            :ARG2 (h2 / high-02
                  :ARG1 p)
            :ARG3 (m2 / more)))"
A well-known terrorist.,"# ::snt A well-known terrorist.
(t / terrorist
      :ARG1-of (k / know-02
            :degree (w / well)))"
"Yes, and Lib logic tells us it is so for all. Pleeze. This is a child's argument.","# ::snt Yes, and Lib logic tells us it is so for all. Pleeze. This is a child's argument.
(m / multi-sentence
      :snt1 (a / and
            :op2 (t / tell-01
                  :ARG0 (l / logic
                        :ARG1-of (l2 / liberal-02))
                  :ARG1 (s / so
                        :mod (f / for-all))
                  :ARG2 (w / we)))
      :snt2 (p / please-01)
      :snt3 (a2 / argue-01
            :ARG0 (c / child)
            :ARG1 (t2 / this)))"
