# ::snt Yeah Mike , why won't you just be a one-dimensional puppet who only talks about your work ?
# ::tokens ["Yeah", "Mike", ",", "why", "wo", "n't", "you", "just", "be", "a", "one", "-", "dimensional", "puppet", "who", "only", "talks", "about", "your", "work", "?"]
# ::lemmas ["yeah", "Mike", ",", "why", "will", "not", "you", "just", "be", "a", "one", "-", "dimensional", "puppet", "who", "only", "talk", "about", "your", "work", "?"]
(c1-0 / say-01
      :ARG1 (c1-3 / cause-01
                  :ARG0 (c1-2 / amr-unknown)
                  :ARG1 (c1-9 / puppet
                              :mod (c1-1 / dimension
                                         :quant 1)
                              :domain (c1-6 / person
                                            :name (c1-10 / name
                                                         :op1 "Mike"))
                              :ARG0-of (c1-7 / talk-01
                                             :ARG1 (c1-4 / work-01
                                                         :ARG0 c1-6)
                                             :mod (c1-5 / only))
                              :mod (c1-8 / just)))
      :ARG2 c1-6)

# ::snt It's a profession account , right ? Sports . . No ? Like Hollywooders abusing fame . M <URL>
# ::tokens ["It", "'s", "a", "profession", "account", ",", "right", "?", "Sports", ".", ".", "No", "?", "Like", "Hollywooders", "abusing", "fame", ".", "M", "<", "URL", ">"]
# ::lemmas ["it", "be", "a", "profession", "account", ",", "right", "?", "sport", ".", ".", "no", "?", "like", "hollywooder", "abuse", "fame", ".", "M", "<", "URL", ">"]
(c2-11 / multi-sentence
       :snt1 (c2-1 / account
                   :domain (c2-3 / it)
                   :mod (c2-10 / profession)
                   :ARG1-of (c2-8 / request-confirmation-91))
       :snt2 (c2-0 / sport)
       :snt3 (c2-12 / no
                    :ARG1-of (c2-5 / resemble-01
                                   :ARG2 (c2-13 / abuse-02
                                                :ARG0 (c2-7 / person
                                                            :mod (c2-4 / market-sector
                                                                       :name (c2-9 / name
                                                                                   :op1 "Hollywood")))
                                                :ARG1 (c2-2 / fame-01))))
       :snt4 (c2-6 / url-entity
                   :value "M"))

# ::snt Josh ... come on . I commented on the press secretary's commentary . I think I'm qualified , merely as a citizen .
# ::tokens ["Josh", "...", "come", "on", ".", "I", "commented", "on", "the", "press", "secretary", "'s", "commentary", ".", "I", "think", "I", "'m", "qualified", ",", "merely", "as", "a", "citizen", "."]
# ::lemmas ["Josh", "...", "come", "on", ".", "i", "comment", "on", "the", "press", "secretary", "'s", "commentary", ".", "i", "think", "i", "be", "qualified", ",", "merely", "as", "a", "citizen", "."]
(c3-12 / multi-sentence
       :snt1 (c3-2 / come-on-25
                   :ARG1 (c3-11 / person
                                :name (c3-13 / name
                                             :op1 "Josh"))
                   :mode imperative)
       :snt2 (c3-0 / comment-01
                   :ARG0 (c3-3 / i)
                   :ARG3 (c3-7 / comment-01
                               :ARG0 (c3-1 / secretary
                                           :mod (c3-8 / press))))
       :snt3 (c3-9 / think-01
                   :ARG0 (c3-6 / i)
                   :ARG1 (c3-4 / qualify-02
                               :ARG1 c3-6
                               :ARG2 (c3-10 / citizen
                                            :domain c3-6
                                            :mod (c3-5 / mere)))))

# ::snt Ok . You are qualified as a citizen . Speak up . Speak out ! Expect to be challenged and <URL>
# ::tokens ["Ok", ".", "You", "are", "qualified", "as", "a", "citizen", ".", "Speak", "up", ".", "Speak", "out", "!", "Expect", "to", "be", "challenged", "and", "<", "URL", ">"]
# ::lemmas ["ok", ".", "you", "be", "qualified", "as", "a", "citizen", ".", "speak", "up", ".", "speak", "out", "!", "expect", "to", "be", "challenge", "and", "<", "URL", ">"]
(c4-9 / multi-sentence
      :snt1 (c4-5 / qualify-02
                  :ARG1 (c4-10 / you)
                  :ARG2 (c4-4 / citizen))
      :snt2 (c4-0 / speak-up-02
                  :ARG0 (c4-11 / you)
                  :mode imperative)
      :snt3 (c4-8 / speak-out-03
                  :ARG0 c4-11
                  :mode imperative)
      :snt4 (c4-12 / expect-01
                   :ARG0 (c4-1 / you)
                   :ARG1 (c4-3 / and
                               :op1 (c4-2 / challenge-01
                                          :ARG1 c4-1)
                               :op2 (c4-6 / URL-00
                                          :ARG1 c4-1)))
      :snt1 (c4-7 / okay-01))

# ::snt I hope that if he intends to challenge you , he has demonstrable " expertise " in the area of policy in which he does so .
# ::tokens ["I", "hope", "that", "if", "he", "intends", "to", "challenge", "you", ",", "he", "has", "demonstrable", "\"", "expertise", "\"", "in", "the", "area", "of", "policy", "in", "which", "he", "does", "so", "."]
# ::lemmas ["i", "hope", "that", "if", "he", "intend", "to", "challenge", "you", ",", "he", "have", "demonstrable", "\"", "expertise", "\"", "in", "the", "area", "of", "policy", "in", "which", "he", "do", "so", "."]
(c5-3 / hope-01
      :ARG0 (c5-9 / i)
      :ARG1 (c5-8 / have-condition-91
                  :ARG1 (c5-1 / have-03
                              :ARG0 (c5-5 / he)
                              :ARG1 (c5-11 / expertise
                                           :ARG1-of (c5-0 / demonstrate-01
                                                          :ARG1-of (c5-7 / possible-01))
                                           :topic (c5-6 / policy-01
                                                        :ARG2-of (c5-2 / challenge-01
                                                                       :ARG0 c5-5
                                                                       :ARG1 (c5-10 / you)))))
                  :ARG2 (c5-4 / intend-01
                              :ARG0 c5-5
                              :ARG1 c5-2)))

# ::snt Hold on - this dude is saying that Mike wants a safe space AFTER demanding tha <URL>
# ::tokens ["Hold", "on", "-", "this", "dude", "is", "saying", "that", "Mike", "wants", "a", "safe", "space", "AFTER", "demanding", "tha", "<", "URL", ">"]
# ::lemmas ["hold", "on", "-", "this", "dude", "be", "say", "that", "Mike", "want", "a", "safe", "space", "after", "demand", "tha", "<", "URL", ">"]
(c6-6 / hold-on-05
      :ARG1 (c6-0 / dude
                  :mod (c6-8 / this))
      :ARG1-of (c6-3 / cause-01
                     :ARG0 (c6-1 / say-01
                                 :ARG0 c6-0
                                 :ARG1 (c6-4 / want-01
                                             :ARG0 (c6-10 / person
                                                          :name (c6-11 / name
                                                                       :op1 "Mike"))
                                             :ARG1 (c6-9 / space
                                                         :ARG1-of (c6-7 / safe-01))
                                             :time (c6-2 / after
                                                         :op1 (c6-5 / demand-01
                                                                    :ARG0 c6-0
                                                                    :ARG1 c6-9)))))
      :mode imperative)
