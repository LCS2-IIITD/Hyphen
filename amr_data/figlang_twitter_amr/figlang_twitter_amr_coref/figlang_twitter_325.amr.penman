# ::snt murder M + people from -87 ... That probably does NOT include intentional food poisoning ...
# ::tokens ["murder", "M", "+", "people", "from", "-87", "...", "That", "probably", "does", "NOT", "include", "intentional", "food", "poisoning", "..."]
# ::lemmas ["murder", "M", "+", "people", "from", "-87", "...", "that", "probably", "do", "not", "include", "intentional", "food", "poisoning", "..."]
(c1-11 / multi-sentence
       :snt1 (c1-1 / and
                   :op1 (c1-3 / murder-01
                              :ARG1 (c1-10 / person
                                           :source (c1-0 / date-entity
                                                         :year 1987)))
                   :op2 (c1-8 / person
                              :source c1-0))
       :snt2 (c1-6 / probable
                   :domain (c1-4 / include-01
                                 :ARG1 (c1-5 / poison-02
                                             :ARG2 (c1-2 / food)
                                             :ARG1-of (c1-7 / intend-01))
                                 :ARG2 (c1-9 / that)
                                 :polarity -)))

# ::snt Given . In truth , there's been no limit to their devising techniques to implement mass murder .
# ::tokens ["Given", ".", "In", "truth", ",", "there", "'s", "been", "no", "limit", "to", "their", "devising", "techniques", "to", "implement", "mass", "murder", "."]
# ::lemmas ["give", ".", "in", "truth", ",", "there", "be", "be", "no", "limit", "to", "their", "devise", "technique", "to", "implement", "mass", "murder", "."]
(c2-9 / multi-sentence
      :snt1 (c2-7 / give-01)
      :snt2 (c2-6 / limit-01
                  :ARG1 (c2-5 / technique
                              :mod (c2-0 / deviate-01)
                              :poss (c2-2 / they)
                              :purpose (c2-8 / implement-01
                                             :ARG0 c2-2
                                             :ARG1 (c2-1 / murder-01
                                                         :degree (c2-4 / mass))))
                  :mod (c2-3 / in-fact)
                  :polarity -))
