# ::snt Future generations will ask " where were you ? How did you vote ? " They'll recall what we lost , the hardships to follow with anger .
# ::tokens ["Future", "generations", "will", "ask", "\"", "where", "were", "you", "?", "How", "did", "you", "vote", "?", "\"", "They", "'ll", "recall", "what", "we", "lost", ",", "the", "hardships", "to", "follow", "with", "anger", "."]
# ::lemmas ["future", "generation", "will", "ask", "\"", "where", "be", "you", "?", "how", "do", "you", "vote", "?", "\"", "they", "'ll", "recall", "what", "we", "lose", ",", "the", "hardship", "to", "follow", "with", "anger", "."]
(c1-8 / multi-sentence
      :snt1 (c1-14 / ask-01
                   :ARG0 (c1-7 / generation
                               :time (c1-15 / future))
                   :ARG1 (c1-9 / and
                               :op1 (c1-18 / be-located-at-91
                                           :ARG1 (c1-12 / you)
                                           :ARG2 (c1-0 / amr-unknown))
                               :op2 (c1-4 / vote-01
                                          :ARG0 (c1-13 / you)
                                          :manner (c1-19 / amr-unknown))))
      :snt2 (c1-6 / recall-02
                  :ARG0 (c1-5 / they)
                  :ARG1 (c1-1 / and
                              :op1 (c1-3 / thing
                                         :ARG1-of (c1-17 / lose-02
                                                         :ARG0 (c1-2 / we)))
                              :op2 (c1-16 / hardship
                                          :ARG1-of (c1-10 / follow-01
                                                          :manner (c1-11 / anger-01))))))

# ::snt oh give over , what we've lost ? , take a good luck at the EU it's a joke
# ::tokens ["oh", "give", "over", ",", "what", "we", "'ve", "lost", "?", ",", "take", "a", "good", "luck", "at", "the", "EU", "it", "'s", "a", "joke"]
# ::lemmas ["oh", "give", "over", ",", "what", "we", "'ve", "lose", "?", ",", "take", "a", "good", "luck", "at", "the", "EU", "it", "be", "a", "joke"]
(c2-10 / multi-sentence
       :snt1 (c2-8 / give-over-12
                   :ARG0 (c2-12 / you)
                   :mod (c2-4 / oh)
                   :mode imperative)
       :snt2 (c2-6 / lose-02
                   :ARG0 (c2-2 / we)
                   :ARG1 (c2-0 / amr-unknown))
       :snt3 (c2-5 / take-01
                   :ARG0 (c2-13 / you)
                   :ARG1 (c2-7 / luck
                               :ARG1-of (c2-1 / good-02))
                   :ARG2 (c2-3 / organization
                               :name (c2-11 / name
                                            :op1 "EU"))
                   :ARG1-of (c2-9 / joke-01)
                   :mode imperative))

# ::snt Take a good look at Manchester & Salford - reaped rich EU benefits , and continuing until
# ::tokens ["Take", "a", "good", "look", "at", "Manchester", "&", "Salford", "-", "reaped", "rich", "EU", "benefits", ",", "and", "continuing", "until"]
# ::lemmas ["take", "a", "good", "look", "at", "Manchester", "&", "Salford", "-", "reap", "rich", "EU", "benefit", ",", "and", "continue", "until"]
(c3-9 / look-01
      :ARG0 (c3-14 / you)
      :ARG1 (c3-1 / and
                  :op1 (c3-2 / city
                             :name (c3-13 / name
                                          :op1 "Manchester"))
                  :op2 (c3-0 / city
                             :name (c3-8 / name
                                         :op1 "Salford"))
                  :ARG0-of (c3-10 / reap-01
                                  :ARG1 (c3-11 / benefit
                                               :mod (c3-6 / organization
                                                          :name (c3-7 / name
                                                                      :op1 "EU"))
                                               :mod (c3-3 / rich)))
                  :ARG1-of (c3-4 / continue-01
                                 :time (c3-5 / until
                                             :op1 c3-9)))
      :ARG1-of (c3-12 / good-02)
      :mode imperative)

# ::snt okay you do know ' EU Funding ' is our own money to begin with . In Manchester every we pay in we get back
# ::tokens ["okay", "you", "do", "know", "'", "EU", "Funding", "'", "is", "our", "own", "money", "to", "begin", "with", ".", "In", "Manchester", "every", "we", "pay", "in", "we", "get", "back"]
# ::lemmas ["okay", "you", "do", "know", "'", "EU", "Funding", "'", "be", "our", "own", "money", "to", "begin", "with", ".", "in", "Manchester", "every", "we", "pay", "in", "we", "get", "back"]
(c4-12 / multi-sentence
       :snt1 (c4-5 / okay-04
                   :ARG1 (c4-13 / know-01
                                :ARG0 (c4-14 / you)
                                :ARG1 (c4-1 / money
                                            :poss (c4-2 / we)
                                            :domain (c4-0 / fund-01
                                                          :ARG0 (c4-4 / organization
                                                                      :name (c4-11 / name
                                                                                   :op1 "EU")))
                                            :ARG2-of (c4-9 / begin-01))))
       :snt2 (c4-7 / get-back-09
                   :ARG0 (c4-15 / we)
                   :ARG1 (c4-8 / we)
                   :location (c4-3 / city
                                   :name (c4-6 / name
                                               :op1 "Manchester"))
                   :frequency (c4-10 / rate-entity-91
                                     :ARG3 (c4-16 / pay-01
                                                  :ARG0 c4-8))))

# ::snt and how much investment do you think you'll recoup from Westminster post ?
# ::tokens ["and", "how", "much", "investment", "do", "you", "think", "you", "'ll", "recoup", "from", "Westminster", "post", "?"]
# ::lemmas ["and", "how", "much", "investment", "do", "you", "think", "you", "'ll", "recoup", "from", "Westminster", "post", "?"]
(c5-0 / and
      :op2 (c5-2 / recoup-01
                 :ARG0 (c5-8 / you)
                 :ARG1 (c5-6 / monetary-quantity
                             :ARG1-of (c5-5 / invest-01)
                             :source (c5-3 / post
                                           :mod (c5-4 / government-organization
                                                      :name (c5-7 / name
                                                                  :op1 "Westminster"))))
                 :ARG3 (c5-9 / amr-unknown)
                 :ARG1-of (c5-1 / think-01
                                :ARG0 c5-8)))

# ::snt well the good thing about that is we can vote and elect governments or vote them out if not happy , can't do that with eu
# ::tokens ["well", "the", "good", "thing", "about", "that", "is", "we", "can", "vote", "and", "elect", "governments", "or", "vote", "them", "out", "if", "not", "happy", ",", "ca", "n't", "do", "that", "with", "eu"]
# ::lemmas ["well", "the", "good", "thing", "about", "that", "be", "we", "can", "vote", "and", "elect", "government", "or", "vote", "they", "out", "if", "not", "happy", ",", "can", "not", "do", "that", "with", "eu"]
(c6-2 / and
      :op1 (c6-12 / possible-01
                  :ARG1 (c6-14 / and
                               :op1 (c6-8 / vote-01
                                          :ARG0 (c6-4 / we)
                                          :ARG1 (c6-11 / government-organization
                                                       :ARG0-of (c6-13 / govern-01)))
                               :op2 (c6-15 / elect-01
                                           :ARG0 c6-4
                                           :ARG1 c6-11)
                               :condition (c6-5 / happy-01
                                                :ARG1 c6-11
                                                :polarity -)))
      :op2 (c6-9 / possible-01
                 :ARG1 (c6-0 / and
                             :op1 (c6-3 / vote-01
                                        :ARG0 c6-4
                                        :ARG1 c6-11)
                             :op2 (c6-7 / vote-down-03
                                        :ARG0 c6-4
                                        :ARG1 c6-11))
                 :condition c6-5
                 :ARG0 (c6-6 / electronics)
                 :ARG1 c6-4
                 :polarity -
                 :polarity -)
      :topic (c6-10 / that)
      :ARG1-of (c6-1 / good-02))
