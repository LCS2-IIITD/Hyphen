# ::snt : Donald Trump says vote push for election recounts is a scam <URL> via
# ::tokens [":", "Donald", "Trump", "says", "vote", "push", "for", "election", "recounts", "is", "a", "scam", "<", "URL", ">", "via"]
# ::lemmas [":", "Donald", "Trump", "say", "vote", "push", "for", "election", "recount", "be", "a", "scam", "<", "URL", ">", "via"]
(c1-0 / say-01
      :ARG0 (c1-5 / person
                  :name (c1-6 / name
                              :op1 "Donald"
                              :op2 "Trump"))
      :ARG1 (c1-4 / scam-01
                  :ARG1 (c1-2 / push-04
                              :ARG1 (c1-3 / recount-01
                                          :ARG1 (c1-7 / elect-01))))
      :medium (c1-1 / url-entity
                    :value "URL"))

# ::snt FRAUDULENT Trump votes were found in only one out of voting precincts of W <URL>
# ::tokens ["FRAUDULENT", "Trump", "votes", "were", "found", "in", "only", "one", "out", "of", "voting", "precincts", "of", "W", "<", "URL", ">"]
# ::lemmas ["FRAUDULENT", "Trump", "vote", "be", "find", "in", "only", "one", "out", "of", "voting", "precinct", "of", "W", "<", "URL", ">"]
(c2-1 / find-01
      :ARG1 (c2-6 / vote-01
                  :ARG1 (c2-10 / person
                               :name (c2-11 / name
                                            :op1 "Trump"))
                  :ARG0-of (c2-8 / protest-01))
      :location (c2-5 / precinct
                      :mod (c2-7 / only)
                      :ARG1-of (c2-2 / include-91
                                     :ARG2 (c2-3 / precinct
                                                 :mod (c2-4 / vote-01)
                                                 :location (c2-0 / state
                                                                 :name (c2-9 / name
                                                                             :op1 "W"))))
                      :quant 1))

# ::snt and many fraudulent votes for Clinton were found during the election from machines owned by Soros .
# ::tokens ["and", "many", "fraudulent", "votes", "for", "Clinton", "were", "found", "during", "the", "election", "from", "machines", "owned", "by", "Soros", "."]
# ::lemmas ["and", "many", "fraudulent", "vote", "for", "Clinton", "be", "find", "during", "the", "election", "from", "machine", "own", "by", "Soros", "."]
(c3-0 / and
      :op2 (c3-1 / find-01
                 :ARG1 (c3-4 / vote-01
                             :ARG1 (c3-8 / person
                                         :name (c3-10 / name
                                                      :op1 "Clinton"))
                             :mod (c3-3 / fraudulent)
                             :quant (c3-9 / many))
                 :time (c3-11 / elect-01)
                 :instrument (c3-2 / machine
                                   :ARG1-of (c3-5 / own-01
                                                  :ARG0 (c3-6 / person
                                                              :name (c3-7 / name
                                                                          :op1 "Soros"))))))

# ::snt State who has now had to adjust Trump lead from to to reflect the FRAUD
# ::tokens ["State", "who", "has", "now", "had", "to", "adjust", "Trump", "lead", "from", "to", "to", "reflect", "the", "FRAUD"]
# ::lemmas ["state", "who", "have", "now", "have", "to", "adjust", "Trump", "lead", "from", "to", "to", "reflect", "the", "FRAUD"]
(c4-0 / state
      :ARG0-of (c4-2 / obligate-01
                     :ARG2 (c4-1 / adjust-01
                                 :ARG0 c4-0
                                 :ARG1 (c4-4 / lead-02
                                             :ARG0 (c4-7 / person
                                                         :name (c4-8 / name
                                                                     :op1 "Trump")))
                                 :ARG2 (c4-3 / reflect-01
                                             :ARG1 c4-4
                                             :ARG2 (c4-5 / law
                                                         :name c4-8
                                                         :op1 "FRAUD"))))
      :time (c4-6 / now))

# ::snt and where is the reliable source to this ? Give a link please .
# ::tokens ["and", "where", "is", "the", "reliable", "source", "to", "this", "?", "Give", "a", "link", "please", "."]
# ::lemmas ["and", "where", "be", "the", "reliable", "source", "to", "this", "?", "give", "a", "link", "please", "."]
(c5-8 / multi-sentence
      :snt1 (c5-1 / and
                  :op2 (c5-6 / be-located-at-91
                             :ARG1 (c5-0 / source-02
                                         :ARG1 (c5-2 / this)
                                         :ARG1-of (c5-3 / rely-01
                                                        :ARG1-of (c5-7 / possible-01)))
                             :ARG2 (c5-10 / amr-unknown)))
      :snt2 (c5-4 / give-01
                  :ARG0 (c5-9 / you)
                  :ARG1 (c5-5 / link)
                  :mode imperative
                  :polite +))

# ::snt Again proof , with Jill Stein paying for a recount , they had to admit the FRAUD
# ::tokens ["Again", "proof", ",", "with", "Jill", "Stein", "paying", "for", "a", "recount", ",", "they", "had", "to", "admit", "the", "FRAUD"]
# ::lemmas ["again", "proof", ",", "with", "Jill", "Stein", "pay", "for", "a", "recount", ",", "they", "have", "to", "admit", "the", "FRAUD"]
(c6-8 / prove-01
      :ARG1 (c6-3 / obligate-01
                  :ARG1 (c6-5 / they)
                  :ARG2 (c6-0 / admit-01
                              :ARG0 c6-5
                              :ARG1 (c6-7 / blame-01))
                  :ARG1-of (c6-1 / cause-01
                                 :ARG0 (c6-4 / pay-01
                                             :ARG0 (c6-2 / person
                                                         :name (c6-9 / name
                                                                     :op1 "Jill"
                                                                     :op2 "Stein"))
                                             :ARG3 (c6-6 / recount-01))))
      :mod (c6-10 / again))

# ::snt Jill Stein is just a pawn under Soros , who's funneling her money . Not proof of fraud .
# ::tokens ["Jill", "Stein", "is", "just", "a", "pawn", "under", "Soros", ",", "who", "'s", "funneling", "her", "money", ".", "Not", "proof", "of", "fraud", "."]
# ::lemmas ["Jill", "Stein", "be", "just", "a", "pawn", "under", "Soros", ",", "who", "be", "funnel", "her", "money", ".", "not", "proof", "of", "fraud", "."]
(c7-9 / multi-sentence
      :snt1 (c7-8 / pawn
                  :domain (c7-5 / person
                                :name (c7-10 / name
                                             :op1 "Jill"
                                             :op2 "Stein"))
                  :prep-under (c7-4 / person
                                    :name (c7-6 / name
                                                :op1 "Soros")
                                    :ARG0-of (c7-1 / funnel-01
                                                   :ARG1 (c7-2 / money
                                                               :poss c7-5)
                                                   :ARG2 c7-5))
                  :mod (c7-7 / just))
      :snt2 (c7-3 / prove-01
                  :ARG1 (c7-0 / defraud-01)
                  :polarity -))

# ::snt and what about the many illegal immigrant votes for Clinton ? I wonder .
# ::tokens ["and", "what", "about", "the", "many", "illegal", "immigrant", "votes", "for", "Clinton", "?", "I", "wonder", "."]
# ::lemmas ["and", "what", "about", "the", "many", "illegal", "immigrant", "vote", "for", "Clinton", "?", "i", "wonder", "."]
(c8-1 / wonder-01
      :ARG0 (c8-7 / i)
      :ARG1 (c8-0 / and
                  :op2 (c8-10 / amr-unknown
                              :topic (c8-3 / vote-01
                                           :ARG0 (c8-5 / person
                                                       :ARG0-of (c8-2 / immigrate-01)
                                                       :ARG1-of (c8-6 / legal-02
                                                                      :polarity -))
                                           :ARG1 (c8-4 / person
                                                       :name (c8-9 / name
                                                                   :op1 "Clinton"))
                                           :quant (c8-8 / many)))))

# ::snt proof . Get to work on it or be man enough to admit you can't and you were wrong .
# ::tokens ["proof", ".", "Get", "to", "work", "on", "it", "or", "be", "man", "enough", "to", "admit", "you", "ca", "n't", "and", "you", "were", "wrong", "."]
# ::lemmas ["proof", ".", "get", "to", "work", "on", "it", "or", "be", "man", "enough", "to", "admit", "you", "can", "not", "and", "you", "be", "wrong", "."]
(c9-11 / multi-sentence
       :snt1 (c9-10 / prove-01)
       :snt2 (c9-7 / or
                   :op1 (c9-9 / get-05
                              :ARG0 (c9-12 / you
                                           :ARG1-of c9-9)
                              :ARG2 (c9-4 / work-01
                                          :ARG0 c9-12
                                          :ARG1 (c9-3 / it))
                              :mode imperative)
                   :op2 (c9-6 / have-degree-91
                              :ARG1 c9-12
                              :ARG2 (c9-5 / man)
                              :ARG3 (c9-14 / enough)
                              :ARG6 (c9-1 / admit-01
                                          :ARG0 c9-12
                                          :ARG1 (c9-8 / possible-01
                                                      :ARG1 (c9-0 / do-02
                                                                  :ARG0 c9-12)
                                                      :polarity -))
                              :mode imperative))
       :snt3 (c9-13 / wrong-04
                    :ARG1 (c9-2 / you)))
