# ::snt For the next Survivor series , let s get politicians and force them to live on the current minimum wage without access to their current bank account , house , car , or luxuries . They must pay rent , feed a family , clothe a family , work a minimum wage job , etc . for months .
# ::tokens ["For", "the", "next", "Survivor", "series", ",", "let", "s", "get", "politicians", "and", "force", "them", "to", "live", "on", "the", "current", "minimum", "wage", "without", "access", "to", "their", "current", "bank", "account", ",", "house", ",", "car", ",", "or", "luxuries", ".", "They", "must", "pay", "rent", ",", "feed", "a", "family", ",", "clothe", "a", "family", ",", "work", "a", "minimum", "wage", "job", ",", "etc", ".", "for", "months", "."]
# ::lemmas ["for", "the", "next", "Survivor", "series", ",", "let", "s", "get", "politician", "and", "force", "they", "to", "live", "on", "the", "current", "minimum", "wage", "without", "access", "to", "their", "current", "bank", "account", ",", "house", ",", "car", ",", "or", "luxury", ".", "they", "must", "pay", "rent", ",", "feed", "a", "family", ",", "clothe", "a", "family", ",", "work", "a", "minimum", "wage", "job", ",", "etc", ".", "for", "months", "."]
(c1-15 / multi-sentence
       :snt1 (c1-25 / and
                    :op1 (c1-13 / get-01
                                :ARG0 (c1-7 / we)
                                :ARG1 (c1-34 / politician)
                                :mode imperative)
                    :op2 (c1-26 / force-01
                                :ARG0 c1-7
                                :ARG1 c1-34
                                :ARG2 (c1-31 / live-01
                                             :ARG0 c1-34
                                             :ARG1 (c1-18 / wage
                                                          :mod (c1-27 / minimum)
                                                          :time (c1-6 / current))
                                             :manner (c1-17 / access-01
                                                            :ARG0 c1-34
                                                            :ARG1 (c1-10 / or
                                                                         :op1 (c1-1 / account
                                                                                    :mod (c1-32 / bank)
                                                                                    :time c1-6))
                                                            :op2 (c1-28 / house)
                                                            :op3 (c1-0 / car)
                                                            :op4 (c1-4 / luxury)
                                                            :polarity -))
                                :mode imperative))
       :snt2 (c1-29 / obligate-01
                    :ARG1 (c1-11 / they)
                    :ARG2 (c1-35 / and
                                 :op1 (c1-30 / pay-01
                                             :ARG0 c1-11
                                             :ARG1 (c1-12 / rent))
                                 :op2 (c1-23 / feed-01
                                             :ARG0 c1-11
                                             :ARG2 (c1-24 / family))
                                 :op3 (c1-9 / clothe-01
                                            :ARG0 c1-11
                                            :ARG1 c1-24)
                                 :op4 (c1-5 / work-01
                                            :ARG0 c1-11
                                            :ARG1 (c1-33 / job
                                                         :mod c1-18))
                                 :op5 (c1-19 / et-cetera)
                                 :duration (c1-22 / multiple
                                                  :op1 (c1-8 / temporal-quantity
                                                             :unit (c1-14 / month)
                                                             :quant 1)))
                    :snt3-of c1-15)
       :ARG1 c1-11
       :ARG2 (c1-2 / and
                   :op1 c1-30
                   :ARG0 c1-11
                   :ARG3 c1-12)
       :op2 c1-5
       :ARG0 c1-11
       :ARG1 c1-33
       :op3 c1-19
       :time (c1-20 / series
                    :mod (c1-21 / person
                                :name (c1-16 / name
                                             :op1 "Survivor"))
                    :mod (c1-3 / next)))

# ::snt Don t forget the lack of good health insurance and a decent car .
# ::tokens ["Don", "t", "forget", "the", "lack", "of", "good", "health", "insurance", "and", "a", "decent", "car", "."]
# ::lemmas ["Don", "t", "forget", "the", "lack", "of", "good", "health", "insurance", "and", "a", "decent", "car", "."]
(c2-2 / forget-01
      :ARG0 (c2-8 / you)
      :ARG1 (c2-5 / lack-01
                  :ARG0 c2-8
                  :ARG1 (c2-1 / and
                              :op1 (c2-7 / insure-02
                                         :ARG1 (c2-4 / health)
                                         :ARG3 c2-8
                                         :ARG1-of (c2-6 / good-02))
                              :op2 (c2-3 / car
                                         :mod (c2-0 / decent))))
      :polarity -
      :mode imperative)

# ::snt And an area with no public transportation - like most of America !
# ::tokens ["And", "an", "area", "with", "no", "public", "transportation", "-", "like", "most", "of", "America", "!"]
# ::lemmas ["and", "an", "area", "with", "no", "public", "transportation", "-", "like", "most", "of", "America", "!"]
(c3-0 / and
      :op2 (c3-7 / area
                 :ARG0-of (c3-2 / transport-01
                                :ARG1-of (c3-4 / public-02)
                                :polarity -)
                 :ARG1-of (c3-3 / resemble-01
                                :ARG2 (c3-1 / country
                                            :name (c3-6 / name
                                                        :op1 "America")
                                            :quant (c3-5 / most)))))
