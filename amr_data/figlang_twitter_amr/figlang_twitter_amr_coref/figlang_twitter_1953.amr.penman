# ::snt Sigh , Dear , I don't think I will ever associate Finder's smiley face with ' this is where I go when Cmd + Tab to get to my folders ' ...
# ::tokens ["Sigh", ",", "Dear", ",", "I", "do", "n't", "think", "I", "will", "ever", "associate", "Finder", "'s", "smiley", "face", "with", "'", "this", "is", "where", "I", "go", "when", "Cmd", "+", "Tab", "to", "get", "to", "my", "folders", "'", "..."]
# ::lemmas ["sigh", ",", "Dear", ",", "i", "do", "not", "think", "i", "will", "ever", "associate", "Finder", "'s", "smiley", "face", "with", "'", "this", "be", "where", "i", "go", "when", "Cmd", "+", "Tab", "to", "get", "to", "my", "folder", "'", "..."]
(c1-0 / say-01
      :ARG0 (c1-13 / i)
      :ARG1 (c1-7 / think-01
                  :ARG0 c1-13
                  :ARG1 (c1-1 / associate-01
                              :ARG0 c1-13
                              :ARG1 (c1-2 / face
                                          :ARG0-of (c1-12 / smile-01)
                                          :poss (c1-9 / person
                                                      :name (c1-14 / name
                                                                   :op1 "F Finder")))
                              :ARG2 (c1-10 / location
                                           :location-of (c1-11 / go-02
                                                               :ARG0 c1-13
                                                               :ARG4 (c1-5 / file
                                                                           :poss c1-13)
                                                               :time (c1-15 / get-05
                                                                            :ARG0 c1-13
                                                                            :ARG1 c1-13
                                                                            :ARG2 c1-5))
                                           :domain (c1-3 / this))
                              :time (c1-16 / ever)
                              :polarity -))
      :ARG2 (c1-6 / person
                  :name (c1-8 / name
                              :op1 "Dear"))
      :mod (c1-4 / sigh-02
                 :ARG0 c1-13))

# ::snt It doesn't really shout ' files live here ' does it ?
# ::tokens ["It", "does", "n't", "really", "shout", "'", "files", "live", "here", "'", "does", "it", "?"]
# ::lemmas ["it", "do", "not", "really", "shout", "'", "file", "live", "here", "'", "do", "it", "?"]
(c2-0 / shout-01
      :ARG0 (c2-6 / it)
      :ARG1 (c2-5 / live-01
                  :ARG0 (c2-1 / file)
                  :location (c2-2 / here))
      :ARG1-of (c2-4 / real-04)
      :ARG1-of (c2-3 / request-confirmation-91)
      :polarity -)

# ::snt Come back to the Windows side , boys . Come back . Clippy has gone , but File Explorer lives on
# ::tokens ["Come", "back", "to", "the", "Windows", "side", ",", "boys", ".", "Come", "back", ".", "Clippy", "has", "gone", ",", "but", "File", "Explorer", "lives", "on"]
# ::lemmas ["come", "back", "to", "the", "Windows", "side", ",", "boy", ".", "come", "back", ".", "Clippy", "have", "go", ",", "but", "File", "Explorer", "live", "on"]
(c3-15 / multi-sentence
       :snt1 (c3-0 / say-01
                   :ARG0 (c3-14 / i)
                   :ARG1 (c3-3 / come-01
                               :ARG1 (c3-12 / boy)
                               :ARG4 (c3-13 / side
                                            :mod (c3-10 / product
                                                        :name (c3-16 / name
                                                                     :op1 "Windows")))
                               :direction (c3-1 / back)
                               :mode imperative)
                   :ARG2 c3-12)
       :snt2 (c3-2 / come-01
                   :ARG1 c3-12
                   :ARG4 (c3-4 / back)
                   :mode imperative)
       :snt3 (c3-6 / contrast-01
                   :ARG1 (c3-11 / go-02
                                :ARG0 (c3-8 / person
                                            :name (c3-9 / name
                                                        :op1 "Clippy")))
                   :ARG2 (c3-17 / live-on-03
                                :ARG1 (c3-5 / product
                                            :name (c3-7 / name
                                                        :op1 " File"
                                                        :op2 "Expl Explorer")))))

# ::snt I would if our collective employer offered Windows ... it's sooooo good ( and so less irritating than OSX )
# ::tokens ["I", "would", "if", "our", "collective", "employer", "offered", "Windows", "...", "it", "'s", "sooooo", "good", "(", "and", "so", "less", "irritating", "than", "OSX", ")"]
# ::lemmas ["i", "would", "if", "our", "collective", "employer", "offer", "Windows", "...", "it", "be", "sooooo", "good", "(", "and", "so", "less", "irritate", "than", "OSX", ")"]
(c4-0 / do-02
      :ARG0 (c4-14 / i)
      :ARG1 (c4-3 / and
                  :op1 (c4-13 / good-02
                              :ARG1 (c4-11 / product
                                           :name (c4-15 / name
                                                        :op1 "Windows"))
                              :degree (c4-1 / so))
                  :op2 (c4-6 / have-degree-91
                             :ARG1 c4-11
                             :ARG2 (c4-7 / irritate-01
                                         :ARG0 c4-11)
                             :ARG3 (c4-12 / less)
                             :ARG4 (c4-9 / product
                                         :name (c4-10 / name
                                                      :op1 "OSX"))))
      :condition (c4-8 / offer-01
                       :ARG0 (c4-4 / company
                                   :ARG0-of (c4-16 / employ-01)
                                   :mod (c4-2 / collective)
                                   :poss (c4-5 / we))
                       :ARG1 c4-11))

# ::snt It'll take more than Win to bring me back I'm afraid . Keynote a million times better than PPT is the main one
# ::tokens ["It", "'ll", "take", "more", "than", "Win", "to", "bring", "me", "back", "I", "'m", "afraid", ".", "Keynote", "a", "million", "times", "better", "than", "PPT", "is", "the", "main", "one"]
# ::lemmas ["it", "'ll", "take", "more", "than", "Win", "to", "bring", "i", "back", "i", "be", "afraid", ".", "keynote", "a", "million", "time", "well", "than", "PPT", "be", "the", "main", "one"]
(c5-13 / multi-sentence
       :snt1 (c5-1 / fear-01
                   :ARG0 (c5-12 / i)
                   :ARG1 (c5-8 / take-10
                               :ARG0 (c5-11 / bring-01
                                            :ARG1 c5-12
                                            :ARG2 (c5-0 / back))
                               :ARG1 (c5-2 / more-than
                                           :op1 (c5-3 / win-01))))
       :snt2 (c5-7 / one
                   :mod (c5-6 / main)
                   :domain (c5-14 / Keynote
                                  :ARG1-of (c5-5 / have-degree-91
                                                 :ARG2 (c5-9 / good-02
                                                             :ARG1 c5-14)
                                                 :ARG3 (c5-4 / times
                                                             :quant 1000000)
                                                 :ARG4 (c5-15 / thing
                                                              :name (c5-10 / name
                                                                           :op1 "PPT"))))))

# ::snt how has your job role changed if Keynote is your main tool ...
# ::tokens ["how", "has", "your", "job", "role", "changed", "if", "Keynote", "is", "your", "main", "tool", "..."]
# ::lemmas ["how", "have", "your", "job", "role", "change", "if", "Keynote", "be", "your", "main", "tool", "..."]
(c6-2 / change-01
      :ARG1 (c6-4 / role
                  :mod (c6-5 / job)
                  :poss (c6-8 / you))
      :ARG2 (c6-1 / amr-unknown)
      :condition (c6-3 / tool
                       :mod (c6-6 / main)
                       :poss c6-8
                       :domain (c6-0 / company
                                     :name (c6-7 / name
                                                 :op1 "Keynote"))))

# ::snt architecture diagrams , communicating vision , design thinking , even creating videos . Also Mac dev tools are good .
# ::tokens ["architecture", "diagrams", ",", "communicating", "vision", ",", "design", "thinking", ",", "even", "creating", "videos", ".", "Also", "Mac", "dev", "tools", "are", "good", "."]
# ::lemmas ["architecture", "diagram", ",", "communicate", "vision", ",", "design", "thinking", ",", "even", "create", "video", ".", "also", "Mac", "dev", "tool", "be", "good", "."]
(c7-13 / multi-sentence
       :snt1 (c7-3 / and
                   :op1 (c7-0 / diagram
                              :mod (c7-15 / architect))
                   :op2 (c7-4 / communicate-01
                              :ARG1 (c7-16 / envision-01))
                   :op3 (c7-9 / think-01
                              :manner (c7-12 / design-01))
                   :op4 (c7-1 / create-01
                              :ARG1 (c7-8 / video)
                              :mod (c7-7 / even)))
       :snt2 (c7-11 / good-02
                    :ARG1 (c7-6 / tool
                                :mod (c7-10 / product
                                            :name (c7-14 / name
                                                         :op1 "Mac"))
                                :ARG0-of (c7-5 / deviate-01))
                    :mod (c7-2 / also)))

# ::snt " design thinking " <shudder> implies you've never given thought to your job before .. which us false
# ::tokens ["\"", "design", "thinking", "\"", "<", "shudder", ">", "implies", "you", "'ve", "never", "given", "thought", "to", "your", "job", "before", "..", "which", "us", "false"]
# ::lemmas ["\"", "design", "thinking", "\"", "<", "shudder", ">", "imply", "you", "'ve", "never", "give", "think", "to", "your", "job", "before", "..", "which", "we", "false"]
(c8-8 / imply-01
      :ARG0 (c8-5 / think-01
                  :ARG1 (c8-0 / design-01))
      :ARG1 (c8-4 / think-01
                  :ARG0 (c8-9 / you)
                  :ARG1 (c8-7 / job
                              :poss c8-9)
                  :time (c8-10 / ever)
                  :time (c8-6 / before)
                  :polarity -)
      :ARG1-of (c8-2 / false
                     :domain (c8-3 / we))
      :ARG0-of (c8-1 / shudder-01))
