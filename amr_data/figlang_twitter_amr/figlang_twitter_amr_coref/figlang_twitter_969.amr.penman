# ::snt He literally said that the entire space back to the Washington Monument was full of people . It was not . <URL>
# ::tokens ["He", "literally", "said", "that", "the", "entire", "space", "back", "to", "the", "Washington", "Monument", "was", "full", "of", "people", ".", "It", "was", "not", ".", "<", "URL", ">"]
# ::lemmas ["he", "literally", "say", "that", "the", "entire", "space", "back", "to", "the", "Washington", "Monument", "be", "full", "of", "people", ".", "it", "be", "not", ".", "<", "URL", ">"]
(c1-10 / multi-sentence
       :snt1 (c1-0 / say-01
                   :ARG0 (c1-4 / he)
                   :ARG1 (c1-2 / full-09
                               :ARG1 (c1-8 / space
                                           :mod (c1-12 / entire)
                                           :direction (c1-7 / back
                                                            :op1 (c1-1 / building
                                                                       :name (c1-11 / name
                                                                                    :op1 "Washington"
                                                                                    :op2 "Monument"))))
                               :ARG2 (c1-9 / person))
                   :manner (c1-6 / literal))
       :snt2 (c1-5 / full-09
                   :ARG1 (c1-3 / it)
                   :polarity -))

# ::snt They can say anything because their base has been trained to ignore evidence . This is just them telling the base they're WINNING
# ::tokens ["They", "can", "say", "anything", "because", "their", "base", "has", "been", "trained", "to", "ignore", "evidence", ".", "This", "is", "just", "them", "telling", "the", "base", "they", "'re", "WINNING"]
# ::lemmas ["they", "can", "say", "anything", "because", "their", "base", "have", "be", "train", "to", "ignore", "evidence", ".", "this", "be", "just", "they", "tell", "the", "base", "they", "be", "win"]
(c2-14 / multi-sentence
       :snt1 (c2-4 / cause-01
                   :ARG0 (c2-9 / train-01
                               :ARG1 (c2-13 / ignore-01
                                            :ARG0 (c2-11 / base
                                                         :poss (c2-6 / they))
                                            :ARG1 (c2-16 / evidence-01))
                               :ARG2 c2-6)
                   :ARG1 (c2-10 / possible-01
                                :ARG1 (c2-0 / say-01
                                            :ARG0 (c2-15 / they)
                                            :ARG1 (c2-2 / anything))))
       :snt2 (c2-7 / tell-01
                   :ARG0 (c2-3 / they)
                   :ARG1 (c2-5 / win-01
                               :ARG0 (c2-1 / base
                                           :ARG2-of c2-7))
                   :mod (c2-12 / just)
                   :domain (c2-8 / this)))
