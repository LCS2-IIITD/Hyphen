# ::snt " It is equally impossible to feign or divulge irony . To a person who hasn't got it , it will remain a riddle even after it is openly confessed " - Schlegel <URL>
# ::tokens ["\"", "It", "is", "equally", "impossible", "to", "feign", "or", "divulge", "irony", ".", "To", "a", "person", "who", "has", "n't", "got", "it", ",", "it", "will", "remain", "a", "riddle", "even", "after", "it", "is", "openly", "confessed", "\"", "-", "Schlegel", "<", "URL", ">"]
# ::lemmas ["\"", "it", "be", "equally", "impossible", "to", "feign", "or", "divulge", "irony", ".", "to", "a", "person", "who", "have", "not", "get", "it", ",", "it", "will", "remain", "a", "riddle", "even", "after", "it", "be", "openly", "confess", "\"", "-", "Schlegel", "<", "URL", ">"]
(c1-14 / multi-sentence
       :snt1 (c1-13 / possible-01
                    :ARG1 (c1-9 / or
                                :op1 (c1-1 / feign-01
                                           :ARG1 (c1-2 / irony))
                                :op2 (c1-0 / divulge-01
                                           :ARG1 c1-2))
                    :ARG1-of (c1-16 / equal-01)
                    :polarity -)
       :snt2 (c1-11 / remain-01
                    :ARG1 (c1-5 / it)
                    :ARG3 (c1-8 / riddle)
                    :ARG4 (c1-10 / person
                                 :ARG0-of (c1-12 / get-01
                                                 :ARG1 c1-5
                                                 :polarity -))
                    :concession (c1-6 / even-when
                                      :op1 (c1-3 / confess-01
                                                 :ARG0 c1-10
                                                 :ARG1 c1-5
                                                 :ARG1-of (c1-7 / open-04))))
       :ARG1-of (c1-4 / describe-01
                      :ARG0 c1-10
                      :name (c1-15 / name
                                   :op1 "Schlegel")))

# ::snt Researchers have been building datasets of ironic and unironic speech ( to train Natural Language Processing algorithms ) by looking for the </s> tag on reddit or the and hashtags on twitter
# ::tokens ["Researchers", "have", "been", "building", "datasets", "of", "ironic", "and", "unironic", "speech", "(", "to", "train", "Natural", "Language", "Processing", "algorithms", ")", "by", "looking", "for", "the", "<", "/s", ">", "tag", "on", "reddit", "or", "the", "and", "hashtags", "on", "twitter"]
# ::lemmas ["researcher", "have", "be", "build", "dataset", "of", "ironic", "and", "unironic", "speech", "(", "to", "train", "Natural", "Language", "Processing", "algorithm", ")", "by", "look", "for", "the", "<", "/s", ">", "tag", "on", "reddit", "or", "the", "and", "hashtag", "on", "twitter"]
(c2-17 / build-01
       :ARG0 (c2-18 / person
                    :ARG0-of (c2-6 / research-01))
       :ARG1 (c2-0 / dataset
                   :topic (c2-9 / speak-01
                                :mod (c2-3 / ironic
                                           :mod-of c2-9)
                                :polarity -))
       :purpose (c2-5 / train-01
                      :ARG0 c2-18
                      :ARG1 (c2-13 / algorithm
                                   :ARG0-of (c2-15 / process-01
                                                   :ARG1 (c2-16 / language
                                                                :name (c2-7 / name
                                                                            :op1 "Natural"
                                                                            :op2 "Language")))))
       :manner (c2-2 / look-01
                     :ARG0 c2-18
                     :ARG1 (c2-8 / and
                                 :op1 (c2-4 / tag
                                            :location (c2-11 / publication
                                                             :name (c2-1 / name
                                                                         :op1 "Facebook")))
                                 :op2 c2-8
                                 :op1 c2-4
                                 :op2 (c2-14 / hashtag
                                             :location (c2-10 / publication
                                                              :name (c2-12 / name
                                                                           :op1 "Twitter"))))))
