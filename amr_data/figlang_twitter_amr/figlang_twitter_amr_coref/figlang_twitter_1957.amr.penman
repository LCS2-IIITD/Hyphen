# ::snt Never changes ? Neither does your inability to not resort to playground insults . I keep my language clean on here . B <URL>
# ::tokens ["Never", "changes", "?", "Neither", "does", "your", "inability", "to", "not", "resort", "to", "playground", "insults", ".", "I", "keep", "my", "language", "clean", "on", "here", ".", "B", "<", "URL", ">"]
# ::lemmas ["never", "change", "?", "neither", "do", "your", "inability", "to", "not", "resort", "to", "playground", "insult", ".", "i", "keep", "my", "language", "clean", "on", "here", ".", "b", "<", "URL", ">"]
(c1-10 / multi-sentence
       :snt1 (c1-2 / change-01
                   :time (c1-13 / ever)
                   :concession (c1-0 / capable-01
                                     :ARG1 (c1-12 / you)
                                     :ARG2 (c1-6 / resort-01
                                                 :ARG0 c1-12
                                                 :ARG1 (c1-9 / insult-01
                                                             :location (c1-7 / playground)))
                                     :polarity -)
                   :polarity -)
       :snt2 (c1-11 / keep-02
                    :ARG0 (c1-3 / i)
                    :ARG1 (c1-5 / clean-04
                                :ARG1 (c1-8 / language
                                            :poss c1-3)
                                :location (c1-4 / here)))
       :snt3 (c1-1 / string-entity
                   :value "b"))

# ::snt the mans an idiot , I wouldn't give him the time of day .
# ::tokens ["the", "mans", "an", "idiot", ",", "I", "would", "n't", "give", "him", "the", "time", "of", "day", "."]
# ::lemmas ["the", "mans", "an", "idiot", ",", "i", "would", "not", "give", "he", "the", "time", "of", "day", "."]
(c2-1 / and
      :op1 (c2-5 / idiot
                 :domain (c2-6 / man))
      :op2 (c2-4 / give-01
                 :ARG0 (c2-2 / i)
                 :ARG1 (c2-3 / time
                             :part-of (c2-0 / day))
                 :ARG2 c2-6
                 :polarity -))

# ::snt just saying it how it is , if you don't like it , don't read it
# ::tokens ["just", "saying", "it", "how", "it", "is", ",", "if", "you", "do", "n't", "like", "it", ",", "do", "n't", "read", "it"]
# ::lemmas ["just", "say", "it", "how", "it", "be", ",", "if", "you", "do", "not", "like", "it", ",", "do", "not", "read", "it"]
(c3-8 / multi-sentence
      :snt1 (c3-0 / say-01
                  :ARG0 (c3-7 / i)
                  :ARG1 (c3-2 / have-manner-91
                              :ARG1 (c3-3 / it))
                  :mod (c3-6 / just))
      :snt2 (c3-5 / read-01
                  :ARG0 (c3-9 / you)
                  :ARG1 (c3-4 / it)
                  :condition (c3-1 / dislike-01
                                   :ARG0 c3-9
                                   :ARG1 c3-4)
                  :mode imperative
                  :polarity -))

# ::snt and that's what frozen steel was doing so maybe keep your nose out buttercup
# ::tokens ["and", "that", "'s", "what", "frozen", "steel", "was", "doing", "so", "maybe", "keep", "your", "nose", "out", "buttercup"]
# ::lemmas ["and", "that", "be", "what", "frozen", "steel", "be", "do", "so", "maybe", "keep", "your", "nose", "out", "buttercup"]
(c4-2 / and
      :op2 (c4-0 / do-02
                 :ARG0 (c4-1 / steel
                             :ARG1-of (c4-3 / freeze-01))
                 :ARG1 (c4-6 / that)
                 :ARG0-of (c4-4 / cause-01
                                :ARG1 (c4-9 / possible-01
                                            :ARG1 (c4-10 / keep-01
                                                         :ARG0 (c4-11 / you
                                                                      :part (c4-7 / nose
                                                                                  :ARG1-of c4-10))
                                                         :ARG2 (c4-5 / out
                                                                     :op1 (c4-8 / buttercup)))))))

# ::snt oh my mistake , thought he'd tweeted it for anyone to read and respond to . Kind Regards , ' buttercup ' .
# ::tokens ["oh", "my", "mistake", ",", "thought", "he", "'d", "tweeted", "it", "for", "anyone", "to", "read", "and", "respond", "to", ".", "Kind", "Regards", ",", "'", "buttercup", "'", "."]
# ::lemmas ["oh", "my", "mistake", ",", "think", "he", "have", "tweet", "it", "for", "anyone", "to", "read", "and", "respond", "to", ".", "Kind", "Regards", ",", "'", "buttercup", "'", "."]
(c5-12 / multi-sentence
       :snt1 (c5-1 / mistake-02
                   :ARG0 (c5-11 / i)
                   :ARG1 (c5-8 / think-01
                               :ARG0 c5-11
                               :ARG1 (c5-2 / tweet-02
                                           :ARG0 (c5-3 / he)
                                           :ARG1 (c5-4 / it)
                                           :purpose (c5-0 / and
                                                          :op1 (c5-9 / read-01
                                                                     :ARG0 (c5-14 / anyone)
                                                                     :ARG1 c5-4)
                                                          :op2 (c5-6 / respond-01
                                                                     :ARG0 c5-14
                                                                     :ARG1 c5-4)))
                               :mod (c5-7 / oh
                                          :mode expressive)))
       :snt2 (c5-10 / regard
                    :mod (c5-13 / kind)
                    :mod (c5-5 / buttercup)))
