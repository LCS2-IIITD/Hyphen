# ::snt nah . He doesn't even know what form of govt he's under , so this would fly right by .
# ::tokens ["nah", ".", "He", "does", "n't", "even", "know", "what", "form", "of", "govt", "he", "'s", "under", ",", "so", "this", "would", "fly", "right", "by", "."]
# ::lemmas ["nah", ".", "he", "do", "not", "even", "know", "what", "form", "of", "govt", "he", "be", "under", ",", "so", "this", "would", "fly", "right", "by", "."]
(c1-10 / multi-sentence
       :snt1 (c1-9 / nah
                   :mode expressive)
       :snt2 (c1-11 / know-01
                    :ARG0 (c1-2 / he)
                    :ARG1 (c1-0 / form
                                :mod (c1-8 / government-organization
                                           :ARG0-of (c1-12 / govern-01))
                                :mod (c1-4 / under)
                                :domain c1-2)
                    :mod (c1-13 / even)
                    :ARG0-of (c1-1 / cause-01
                                   :ARG1 (c1-5 / fly-01
                                               :ARG1 (c1-6 / this)
                                               :path (c1-3 / by)
                                               :mod (c1-7 / right)))
                    :polarity -))

# ::snt It's a representative democracy , not direct democracy . But sure , let's all revel in our assumptions . YAY !
# ::tokens ["It", "'s", "a", "representative", "democracy", ",", "not", "direct", "democracy", ".", "But", "sure", ",", "let", "'s", "all", "revel", "in", "our", "assumptions", ".", "YAY", "!"]
# ::lemmas ["it", "be", "a", "representative", "democracy", ",", "not", "direct", "democracy", ".", "but", "sure", ",", "let", "us", "all", "revel", "in", "our", "assumption", ".", "YAY", "!"]
(c2-10 / multi-sentence
       :snt1 (c2-3 / contrast-01
                   :ARG1 (c2-0 / democracy
                               :mod (c2-8 / represent-01)
                               :domain (c2-9 / it))
                   :ARG2 (c2-5 / democracy
                               :ARG1-of (c2-4 / direct-02)
                               :domain c2-9
                               :polarity -))
       :snt2 c2-3
       :ARG2 (c2-7 / revel-01
                   :ARG0 (c2-6 / we
                               :mod (c2-2 / all))
                   :ARG1 (c2-12 / assume-02
                                :ARG0 c2-6)
                   :ARG1-of (c2-1 / sure-02)
                   :mode imperative)
       :snt3 (c2-11 / yay
                    :mode expressive))

# ::snt top to bottom , left to right , put words together to form sentences , Tylenol for any headaches , Midol for cramps .
# ::tokens ["top", "to", "bottom", ",", "left", "to", "right", ",", "put", "words", "together", "to", "form", "sentences", ",", "Tylenol", "for", "any", "headaches", ",", "Midol", "for", "cramps", "."]
# ::lemmas ["top", "to", "bottom", ",", "leave", "to", "right", ",", "put", "word", "together", "to", "form", "sentence", ",", "Tylenol", "for", "any", "headache", ",", "Midol", "for", "cramp", "."]
(c3-1 / and
      :op1 (c3-9 / top-to-bottom)
      :op2 (c3-11 / left-to-right)
      :op3 (c3-12 / put-01
                  :ARG1 (c3-4 / word)
                  :ARG2 (c3-5 / together)
                  :purpose (c3-2 / form-01
                                 :ARG0 c3-4
                                 :ARG1 (c3-0 / sentence)))
      :op4 (c3-8 / product
                 :name (c3-13 / name
                              :op1 "Tylenol")
                 :purpose (c3-7 / headache
                                :mod (c3-14 / any)))
      :op5 (c3-6 / product
                 :name (c3-10 / name
                              :op1 "Midol")
                 :purpose (c3-3 / cramp-01)))
