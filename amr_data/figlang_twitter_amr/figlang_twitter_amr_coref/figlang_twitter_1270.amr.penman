# ::snt newsflash the conservatives are going to get reelected whenever they call the ge , labour are hated
# ::tokens ["newsflash", "the", "conservatives", "are", "going", "to", "get", "reelected", "whenever", "they", "call", "the", "ge", ",", "labour", "are", "hated"]
# ::lemmas ["newsflash", "the", "conservative", "be", "go", "to", "get", "reelect", "whenever", "they", "call", "the", "ge", ",", "labour", "be", "hate"]
(c1-10 / newsflash
       :domain (c1-7 / reelect-01
                     :ARG1 (c1-9 / person
                                 :mod (c1-3 / conservative))
                     :ARG1-of (c1-0 / cause-01
                                    :ARG0 (c1-4 / hate-01
                                                :ARG0 (c1-6 / political-party
                                                            :name (c1-8 / name
                                                                        :op1 "Labour"))))
                     :time (c1-5 / call-01
                                 :ARG0 c1-9
                                 :ARG1 (c1-1 / string-entity
                                             :value "ge")
                                 :mod (c1-2 / any))))

# ::snt And that my friend is what all this nonsense is all about , Tory delay tacks to secure a re-election
# ::tokens ["And", "that", "my", "friend", "is", "what", "all", "this", "nonsense", "is", "all", "about", ",", "Tory", "delay", "tacks", "to", "secure", "a", "re", "-", "election"]
# ::lemmas ["and", "that", "my", "friend", "be", "what", "all", "this", "nonsense", "be", "all", "about", ",", "Tory", "delay", "tack", "to", "secure", "a", "re", "-", "election"]
(c2-1 / and
      :op2 (c2-3 / concern-02
                 :ARG0 (c2-13 / all
                              :mod (c2-8 / this)
                              :mod (c2-12 / nonsense))
                 :ARG1 (c2-11 / person
                              :ARG0-of (c2-6 / have-rel-role-91
                                             :ARG1 (c2-4 / i)
                                             :ARG2 (c2-2 / friend))))
      :op3 (c2-5 / tack-01
                 :ARG0 (c2-7 / political-party
                             :name (c2-9 / name
                                         :op1 "Tory"))
                 :purpose (c2-0 / secure-01
                                :ARG0 c2-7
                                :ARG1 (c2-10 / reelect-01
                                             :ARG1 c2-11))))

# ::snt the conservatives are assured of a landslide victory already as labour R unelectable , the gov have impliment
# ::tokens ["the", "conservatives", "are", "assured", "of", "a", "landslide", "victory", "already", "as", "labour", "R", "unelectable", ",", "the", "gov", "have", "impliment"]
# ::lemmas ["the", "conservatives", "be", "assure", "of", "a", "landslide", "victory", "already", "as", "labour", "r", "unelectable", ",", "the", "gov", "have", "impliment"]
(c3-0 / assure-01
      :ARG1 (c3-9 / political-party
                  :name (c3-10 / name
                               :op1 "Conservative"))
      :ARG2 (c3-2 / win-01
                  :ARG0 c3-9
                  :mod (c3-7 / landslide))
      :time (c3-12 / already)
      :ARG1-of (c3-1 / cause-01
                     :ARG0 (c3-5 / possible-01
                                 :ARG1 (c3-13 / elect-01
                                              :ARG1 (c3-4 / political-party
                                                          :name (c3-6 / name
                                                                      :op1 "Labour")))
                                 :polarity -))
      :ARG1-of (c3-3 / implicate-01
                     :ARG0 (c3-8 / government-organization
                                 :ARG0-of (c3-11 / govern-01))))

# ::snt which still doesn't alter the fact that simply repealing ECA would be a breach of a signed treaty
# ::tokens ["which", "still", "does", "n't", "alter", "the", "fact", "that", "simply", "repealing", "ECA", "would", "be", "a", "breach", "of", "a", "signed", "treaty"]
# ::lemmas ["which", "still", "do", "not", "alter", "the", "fact", "that", "simply", "repeal", "ECA", "would", "be", "a", "breach", "of", "a", "sign", "treaty"]
(c4-1 / alter-01
      :ARG0 (c4-4 / repeal-01
                  :ARG1 (c4-5 / law
                              :name (c4-8 / name
                                          :op1 "ECA"))
                  :ARG1-of (c4-0 / simple-02)
                  :ARG0-of (c4-6 / breach-01
                                 :ARG1 (c4-3 / treaty
                                             :ARG1-of (c4-7 / sign-01))))
      :mod (c4-2 / still)
      :polarity -)

# ::snt your statements i willPut + theAdvice of cannot b dismised
# ::tokens ["your", "statements", "i", "willPut", "+", "theAdvice", "of", "can", "not", "b", "dismised"]
# ::lemmas ["your", "statement", "i", "willput", "+", "theadvice", "of", "can", "not", "b", "dismise"]
(c5-4 / possible-01
      :ARG1 (c5-0 / dismember-01
                  :ARG1 (c5-2 / and
                              :op1 (c5-1 / state-01
                                         :ARG0 (c5-3 / i))
                              :op2 (c5-5 / advise-01
                                         :ARG0 c5-3)))
      :polarity -)

# ::snt Invoke Article then repeal ECA , its the safest option
# ::tokens ["Invoke", "Article", "then", "repeal", "ECA", ",", "its", "the", "safest", "option"]
# ::lemmas ["Invoke", "Article", "then", "repeal", "ECA", ",", "its", "the", "safe", "option"]
(c6-1 / and
      :op1 (c6-7 / invoke-01
                 :ARG0 (c6-10 / you)
                 :ARG1 (c6-11 / article)
                 :mode imperative)
      :op2 (c6-5 / repeal-01
                 :ARG0 c6-10
                 :ARG1 (c6-6 / law
                             :name (c6-9 / name
                                         :op1 "ECA"))
                 :ARG1-of (c6-8 / mean-01
                                :ARG2 (c6-4 / option
                                            :ARG1-of (c6-3 / have-degree-91
                                                           :ARG2 (c6-0 / safe-01)
                                                           :ARG3 (c6-2 / most))))
                 :mode imperative))

# ::snt can i ask can you give me legal advice ?
# ::tokens ["can", "i", "ask", "can", "you", "give", "me", "legal", "advice", "?"]
# ::lemmas ["can", "i", "ask", "can", "you", "give", "i", "legal", "advice", "?"]
(c7-5 / possible-01
      :polarity (c7-1 / amr-unknown)
      :ARG1 (c7-7 / ask-02
                  :ARG0 (c7-2 / i)
                  :ARG1 (c7-3 / possible-01
                              :ARG1 (c7-0 / advise-01
                                          :ARG0 (c7-6 / you)
                                          :ARG1 c7-2
                                          :ARG1-of (c7-4 / legal-02)))
                  :ARG2 c7-6))

# ::snt That sentence clearly proves I am no Lawyer
# ::tokens ["That", "sentence", "clearly", "proves", "I", "am", "no", "Lawyer"]
# ::lemmas ["that", "sentence", "clearly", "prove", "i", "be", "no", "lawyer"]
(c8-5 / prove-01
      :ARG0 (c8-0 / sentence
                  :mod (c8-3 / that))
      :ARG1 (c8-4 / lawyer
                  :domain (c8-1 / i)
                  :polarity -)
      :ARG1-of (c8-2 / clear-06))

# ::snt thats what i thought you are not qualified give legal advive
# ::tokens ["that", "s", "what", "i", "thought", "you", "are", "not", "qualified", "give", "legal", "advive"]
# ::lemmas ["that", "s", "what", "i", "think", "you", "be", "not", "qualified", "give", "legal", "advive"]
(c9-3 / think-01
      :ARG0 (c9-6 / i)
      :ARG1 (c9-2 / qualify-02
                  :ARG1 (c9-7 / you)
                  :ARG1-of (c9-1 / cause-01
                                 :ARG0 (c9-5 / give-01
                                             :ARG0 c9-7
                                             :ARG1 (c9-0 / advise-01
                                                         :ARG0 c9-7
                                                         :ARG1-of (c9-4 / legal-02))))
                  :polarity -))

# ::snt + as such express your own opinnionns of law without knowledge
# ::tokens ["+", "as", "such", "express", "your", "own", "opinnionns", "of", "law", "without", "knowledge"]
# ::lemmas ["+", "as", "such", "express", "your", "own", "opinnionn", "of", "law", "without", "knowledge"]
(c10-5 / express-01
       :ARG0 (c10-4 / you)
       :ARG1 (c10-1 / opine-01
                    :ARG0 c10-4
                    :topic (c10-2 / law))
       :manner (c10-3 / know-01
                      :ARG0 c10-4
                      :polarity -)
       :mod (c10-0 / as-such))

# ::snt But has you are not actually in any position yourself its all irrelevant
# ::tokens ["But", "has", "you", "are", "not", "actually", "in", "any", "position", "yourself", "its", "all", "irrelevant"]
# ::lemmas ["but", "have", "you", "be", "not", "actually", "in", "any", "position", "yourself", "its", "all", "irrelevant"]
(c11-1 / contrast-01
       :ARG2 (c11-2 / relevant-01
                    :ARG1 (c11-3 / position-01
                                 :ARG0 (c11-4 / you
                                              :ARG1-of c11-3)
                                 :mod (c11-0 / any)
                                 :ARG1-of (c11-5 / actual-02)
                                 :polarity -)
                    :polarity -))

# ::snt to take the advice of a fool is to be a bigger fool , thats why i listed
# ::tokens ["to", "take", "the", "advice", "of", "a", "fool", "is", "to", "be", "a", "bigger", "fool", ",", "that", "s", "why", "i", "listed"]
# ::lemmas ["to", "take", "the", "advice", "of", "a", "fool", "be", "to", "be", "a", "big", "fool", ",", "that", "s", "why", "i", "list"]
(c12-2 / cause-01
       :ARG0 (c12-3 / have-degree-91
                    :ARG1 (c12-1 / fool)
                    :ARG2 (c12-7 / big)
                    :ARG3 (c12-9 / more)
                    :domain (c12-5 / take-01
                                   :ARG1 (c12-0 / advise-01
                                                :ARG0 (c12-4 / fool))))
       :ARG1 (c12-6 / list-01
                    :ARG0 (c12-8 / i)))

# ::snt So if they say A50 then repeal is the safest option will I still be a fool ?
# ::tokens ["So", "if", "they", "say", "A50", "then", "repeal", "is", "the", "safest", "option", "will", "I", "still", "be", "a", "fool", "?"]
# ::lemmas ["so", "if", "they", "say", "A50", "then", "repeal", "be", "the", "safe", "option", "will", "i", "still", "be", "a", "fool", "?"]
(c13-2 / fool
       :polarity (c13-1 / amr-unknown)
       :domain (c13-9 / i)
       :mod (c13-0 / still)
       :condition (c13-8 / say-01
                         :ARG0 (c13-5 / they)
                         :ARG1 (c13-3 / have-degree-91
                                      :ARG1 (c13-6 / repeal-01
                                                   :ARG1 (c13-7 / product
                                                                :name (c13-11 / name
                                                                              :op1 "A50")))
                                      :ARG2 (c13-4 / safe-01
                                                   :ARG0 c13-7)
                                      :ARG3 (c13-10 / most))))

# ::snt Art is a notice that establishes process , any fail to accord we can walk away
# ::tokens ["Art", "is", "a", "notice", "that", "establishes", "process", ",", "any", "fail", "to", "accord", "we", "can", "walk", "away"]
# ::lemmas ["art", "be", "a", "notice", "that", "establishe", "process", ",", "any", "fail", "to", "accord", "we", "can", "walk", "away"]
(c14-1 / and
       :op1 (c14-9 / notice-03
                   :ARG0 (c14-10 / art)
                   :ARG0-of (c14-11 / establish-01
                                    :ARG1 (c14-8 / process-02)))
       :op2 (c14-7 / possible-01
                   :ARG1 (c14-4 / walk-01
                                :ARG0 (c14-5 / we)
                                :ARG2 (c14-0 / away))
                   :condition (c14-2 / fail-01
                                     :ARG1 c14-5
                                     :ARG2 (c14-6 / accord-03
                                                  :ARG0 c14-5)
                                     :mod (c14-3 / any))))

# ::snt big question is why take an unnecessary risk when both result in fast Brexit
# ::tokens ["big", "question", "is", "why", "take", "an", "unnecessary", "risk", "when", "both", "result", "in", "fast", "Brexit"]
# ::lemmas ["big", "question", "be", "why", "take", "an", "unnecessary", "risk", "when", "both", "result", "in", "fast", "Brexit"]
(c15-4 / question-01
       :ARG1 (c15-6 / thing
                    :ARG0-of (c15-3 / cause-01
                                    :ARG1 (c15-7 / risk-01
                                                 :ARG1-of (c15-10 / need-01
                                                                  :polarity -)
                                                 :condition (c15-5 / result-01
                                                                   :ARG1 (c15-9 / both)
                                                                   :ARG2 (c15-0 / country
                                                                                :name (c15-8 / name
                                                                                             :op1 "Britain")
                                                                                :ARG1-of (c15-2 / fast-02))))))
       :mod (c15-1 / big))

# ::snt thats the object the quickest way out , no delay ,
# ::tokens ["that", "s", "the", "object", "the", "quickest", "way", "out", ",", "no", "delay", ","]
# ::lemmas ["that", "s", "the", "object", "the", "quick", "way", "out", ",", "no", "delay", ","]
(c16-1 / and
       :op1 (c16-2 / way
                   :direction (c16-5 / out)
                   :ARG1-of (c16-4 / have-degree-91
                                   :ARG2 (c16-3 / quick-02
                                                :ARG1 c16-2)
                                   :ARG3 (c16-7 / most))
                   :domain (c16-6 / that))
       :op2 (c16-0 / delay-01
                   :domain c16-6
                   :polarity -))

# ::snt I know I'm a fool for thinking this but the safest way is generally the best
# ::tokens ["I", "know", "I", "'m", "a", "fool", "for", "thinking", "this", "but", "the", "safest", "way", "is", "generally", "the", "best"]
# ::lemmas ["i", "know", "i", "be", "a", "fool", "for", "think", "this", "but", "the", "safe", "way", "be", "generally", "the", "good"]
(c17-3 / contrast-01
       :ARG1 (c17-13 / know-01
                     :ARG0 (c17-11 / i)
                     :ARG1 (c17-2 / fool
                                  :domain c17-11
                                  :ARG1-of (c17-0 / cause-01
                                                  :ARG0 (c17-8 / think-01
                                                               :ARG0 c17-11
                                                               :ARG1 (c17-5 / this)))))
       :ARG2 (c17-4 / way
                    :ARG1-of (c17-7 / have-degree-91
                                    :ARG2 (c17-1 / safe-01
                                                 :ARG0 c17-4)
                                    :ARG3 (c17-12 / most)
                                    :ARG5 (c17-15 / way
                                                  :ARG1-of (c17-9 / general-02)))
                    :ARG1-of (c17-10 / have-degree-91
                                     :ARG2 (c17-14 / good-02
                                                   :ARG1 c17-4)
                                     :ARG3 (c17-6 / most))))

# ::snt i doubt your sincerity or the veracity of your arguments and ponder your advice
# ::tokens ["i", "doubt", "your", "sincerity", "or", "the", "veracity", "of", "your", "arguments", "and", "ponder", "your", "advice"]
# ::lemmas ["i", "doubt", "your", "sincerity", "or", "the", "veracity", "of", "your", "argument", "and", "ponder", "your", "advice"]
(c18-3 / and
       :op1 (c18-0 / doubt-01
                   :ARG0 (c18-7 / i)
                   :ARG1 (c18-5 / or
                                :op1 (c18-1 / sincerity
                                            :poss (c18-8 / you))
                                :op2 (c18-4 / veracity
                                            :poss (c18-9 / argue-01
                                                         :ARG0 c18-8))))
       :op2 (c18-6 / ponder-01
                   :ARG0 c18-7
                   :ARG1 (c18-2 / advise-01
                                :ARG0 c18-8)))

# ::snt Don't worry about my sincerity , do some research and think logically
# ::tokens ["Do", "n't", "worry", "about", "my", "sincerity", ",", "do", "some", "research", "and", "think", "logically"]
# ::lemmas ["do", "not", "worry", "about", "my", "sincerity", ",", "do", "some", "research", "and", "think", "logically"]
(c19-1 / and
       :op1 (c19-2 / worry-02
                   :ARG0 (c19-8 / you)
                   :ARG1 (c19-0 / sincerity
                                :poss (c19-7 / i))
                   :polarity -
                   :mode imperative)
       :op2 (c19-4 / research-01
                   :ARG0 c19-8
                   :quant (c19-6 / some)
                   :mode imperative)
       :op3 (c19-3 / think-01
                   :ARG0 c19-8
                   :manner (c19-5 / logical)
                   :mode imperative))

# ::snt im happy consult the listed my worry is that theres a dangerous rush A50
# ::tokens ["i", "m", "happy", "consult", "the", "listed", "my", "worry", "is", "that", "there", "s", "a", "dangerous", "rush", "A50"]
# ::lemmas ["i", "m", "happy", "consult", "the", "listed", "my", "worry", "be", "that", "there", "s", "a", "dangerous", "rush", "A50"]
(c20-1 / and
       :op1 (c20-2 / consult-01
                   :ARG0 (c20-9 / i)
                   :ARG1 (c20-5 / thing
                                :ARG1-of (c20-7 / list-01))
                   :ARG1-of (c20-4 / happy-01
                                   :ARG0 c20-9))
       :op2 (c20-3 / worry-01
                   :ARG0 (c20-6 / rush-01
                                :mod (c20-0 / dangerous)
                                :domain (c20-8 / product
                                               :name (c20-10 / name
                                                             :op1 "A50")))
                   :ARG1 c20-9))
