# ::snt On the negative side , that Williams earns $ m for that win , same as the men , is an embarrassment .
# ::tokens ["On", "the", "negative", "side", ",", "that", "Williams", "earns", "$", "m", "for", "that", "win", ",", "same", "as", "the", "men", ",", "is", "an", "embarrassment", "."]
# ::lemmas ["on", "the", "negative", "side", ",", "that", "Williams", "earn", "$", "m", "for", "that", "win", ",", "same", "as", "the", "man", ",", "be", "an", "embarrassment", "."]
(c1-11 / embarrass-01
       :ARG0 (c1-4 / earn-01
                   :ARG0 (c1-8 / person
                               :name (c1-10 / name
                                            :op1 "Williams"))
                   :ARG1 (c1-9 / monetary-quantity
                               :unit (c1-0 / dollar)
                               :quant 1000000)
                   :ARG3 (c1-3 / win-01
                               :ARG0 c1-8
                               :mod (c1-5 / that))
                   :ARG1-of (c1-1 / same-01
                                  :ARG2 (c1-2 / man)))
       :prep-on (c1-7 / side
                      :ARG0-of (c1-6 / negative-03)))

# ::snt % agree , nothing to do with equal pay at all , women just do not have as many sets ( i . e . Workload ) as men in grand slams
# ::tokens ["%", "agree", ",", "nothing", "to", "do", "with", "equal", "pay", "at", "all", ",", "women", "just", "do", "not", "have", "as", "many", "sets", "(", "i", ".", "e", ".", "Workload", ")", "as", "men", "in", "grand", "slams"]
# ::lemmas ["%", "agree", ",", "nothing", "to", "do", "with", "equal", "pay", "at", "all", ",", "woman", "just", "do", "not", "have", "as", "many", "set", "(", "i", ".", "e", ".", "workload", ")", "as", "man", "in", "grand", "slam"]
(c2-2 / agree-01
      :ARG0 (c2-13 / person
                   :quant (c2-10 / percentage-entity
                                 :value 90))
      :ARG1 (c2-7 / have-to-do-with-04
                  :ARG0 (c2-4 / woman)
                  :ARG1 (c2-6 / pay-01
                              :ARG1-of (c2-17 / equal-01))
                  :ARG2 (c2-15 / nothing)
                  :mod (c2-16 / at-all)
                  :ARG1-of (c2-3 / cause-01
                                 :ARG0 (c2-12 / have-quant-91
                                              :ARG1 (c2-0 / set
                                                          :example (c2-5 / workload))
                                              :ARG3 (c2-8 / equal)
                                              :ARG4 (c2-14 / man
                                                           :location (c2-1 / slam
                                                                           :mod (c2-11 / grand))))
                                 :ARG2 (c2-9 / many)
                                 :ARG3 c2-8)
                  :polarity -))
