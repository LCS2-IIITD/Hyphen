# ::snt See , that's what happens when I try to ignore the $ et and go it on my own
# ::tokens ["See", ",", "that", "'s", "what", "happens", "when", "I", "try", "to", "ignore", "the", "$", "et", "and", "go", "it", "on", "my", "own"]
# ::lemmas ["see", ",", "that", "be", "what", "happen", "when", "i", "try", "to", "ignore", "the", "$", "et", "and", "go", "it", "on", "my", "own"]
(c1-9 / event
      :domain (c1-4 / that)
      :time (c1-1 / and
                  :op1 (c1-2 / try-01
                             :ARG0 (c1-6 / i)
                             :ARG1 (c1-3 / ignore-01
                                         :ARG0 c1-6
                                         :ARG1 (c1-7 / money)))
                  :op2 (c1-5 / go-02
                             :ARG0 c1-6
                             :ARG1 c1-3
                             :mod (c1-8 / by-oneself)))
      :ARG1-of (c1-0 / see-01
                     :ARG0 c1-6))

# ::snt Don t feel bad mate many have tried and I do make it look easy
# ::tokens ["Don", "t", "feel", "bad", "mate", "many", "have", "tried", "and", "I", "do", "make", "it", "look", "easy"]
# ::lemmas ["Don", "t", "feel", "bad", "mate", "many", "have", "try", "and", "i", "do", "make", "it", "look", "easy"]
(c2-0 / say-01
      :ARG0 (c2-9 / i)
      :ARG1 (c2-1 / and
                  :op1 (c2-2 / feel-01
                             :ARG0 (c2-10 / mate)
                             :ARG1 (c2-8 / bad-07)
                             :polarity -
                             :mode imperative)
                  :op2 (c2-6 / try-01
                             :ARG0 (c2-3 / many))
                  :op3 (c2-5 / make-02
                             :ARG0 c2-9
                             :ARG1 (c2-7 / look-02
                                         :ARG0 (c2-4 / it)
                                         :ARG1 (c2-11 / easy-05
                                                      :ARG1 c2-4))))
      :ARG2 c2-10)
