# ::snt When you come across that only hurt innocent people to make themselves feel better what is wrong with people then cant or wont even talk to the person they literally this person will never be the same <URL>
# ::tokens ["When", "you", "come", "across", "that", "only", "hurt", "innocent", "people", "to", "make", "themselves", "feel", "better", "what", "is", "wrong", "with", "people", "then", "ca", "nt", "or", "wo", "nt", "even", "talk", "to", "the", "person", "they", "literally", "this", "person", "will", "never", "be", "the", "same", "<", "URL", ">"]
# ::lemmas ["when", "you", "come", "across", "that", "only", "hurt", "innocent", "people", "to", "make", "themselves", "feel", "well", "what", "be", "wrong", "with", "people", "then", "can", "not", "or", "will", "not", "even", "talk", "to", "the", "person", "they", "literally", "this", "person", "will", "never", "be", "the", "same", "<", "url", ">"]
(c1-14 / have-condition-91
       :ARG1 (c1-4 / or
                   :op1 (c1-18 / possible-01
                               :ARG1 (c1-5 / talk-01
                                           :ARG0 (c1-16 / person
                                                        :ARG1-of (c1-1 / innocent-01))
                                           :ARG2 (c1-10 / person))
                               :polarity -)
                   :op2 (c1-9 / same-01
                              :ARG1 c1-16
                              :mod (c1-17 / literal)
                              :time (c1-8 / ever)
                              :polarity -))
       :ARG2 (c1-3 / come-across-21
                   :ARG0 (c1-11 / you)
                   :ARG1 (c1-0 / hurt-01
                               :ARG0 c1-16
                               :ARG1 c1-16
                               :mod (c1-15 / only)
                               :purpose (c1-7 / make-02
                                              :ARG0 c1-16
                                              :ARG1 (c1-12 / feel-01
                                                           :ARG0 c1-16
                                                           :ARG1 (c1-6 / good-02
                                                                       :ARG2-of (c1-2 / have-degree-91
                                                                                      :ARG1 c1-12
                                                                                      :ARG3 (c1-13 / more))))))))

# ::snt will be single the rest of his life because of a person cant even the person they made believe loved them your actions have own them
# ::tokens ["will", "be", "single", "the", "rest", "of", "his", "life", "because", "of", "a", "person", "ca", "nt", "even", "the", "person", "they", "made", "believe", "loved", "them", "your", "actions", "have", "own", "them"]
# ::lemmas ["will", "be", "single", "the", "rest", "of", "his", "life", "because", "of", "a", "person", "can", "nt", "even", "the", "person", "they", "make", "believe", "love", "they", "your", "action", "have", "own", "they"]
(c2-0 / single-03
      :ARG1 (c2-2 / he)
      :duration (c2-4 / rest
                      :part-of (c2-5 / live-01
                                     :ARG1 c2-2))
      :ARG1-of (c2-1 / cause-01
                     :ARG0 (c2-8 / possible-01
                                 :ARG1 (c2-6 / love-01
                                             :ARG0 (c2-3 / person
                                                         :mod (c2-10 / even)
                                                         :ARG1-of (c2-7 / believe-01
                                                                        :ARG0 c2-2
                                                                        :ARG1-of (c2-9 / make-02
                                                                                       :ARG0 c2-2)))
                                             :ARG1 c2-3)
                                 :polarity -)))

# ::snt And the who is causing this damage cant get off were he be ran on him you will get what you deserve one day
# ::tokens ["And", "the", "who", "is", "causing", "this", "damage", "ca", "nt", "get", "off", "were", "he", "be", "ran", "on", "him", "you", "will", "get", "what", "you", "deserve", "one", "day"]
# ::lemmas ["and", "the", "who", "be", "cause", "this", "damage", "can", "not", "get", "off", "be", "he", "be", "run", "on", "he", "you", "will", "get", "what", "you", "deserve", "one", "day"]
(c3-1 / and
      :op2 (c3-12 / possible-01
                  :ARG1 (c3-11 / get-off-23
                               :ARG1 (c3-7 / person
                                           :ARG0-of (c3-2 / cause-01
                                                          :ARG1 (c3-0 / damage-01
                                                                      :mod (c3-8 / this)))))
                  :condition (c3-9 / run-08
                                   :ARG1 c3-7)
                  :ARG0-of c3-2
                  :ARG1 (c3-13 / get-01
                               :ARG0 (c3-10 / you)
                               :ARG1 (c3-4 / thing
                                           :ARG1-of (c3-5 / deserve-01
                                                          :ARG0 c3-10))
                               :time (c3-3 / day
                                           :mod (c3-6 / one)))
                  :polarity -))

# ::snt This kind of of another human being is what causes and they and onto their next people its time to
# ::tokens ["This", "kind", "of", "of", "another", "human", "being", "is", "what", "causes", "and", "they", "and", "onto", "their", "next", "people", "its", "time", "to"]
# ::lemmas ["this", "kind", "of", "of", "another", "human", "being", "be", "what", "cause", "and", "they", "and", "onto", "their", "next", "people", "its", "time", "to"]
(c4-1 / and
      :op1 (c4-7 / thing
                 :ARG0-of (c4-2 / cause-01)
                 :domain (c4-9 / being
                               :mod (c4-4 / human)
                               :mod (c4-13 / another)
                               :mod (c4-11 / kind
                                           :mod (c4-3 / this))))
      :op2 (c4-0 / and
                 :op1 (c4-12 / they)
                 :op2 (c4-6 / onto
                            :op1 (c4-10 / person
                                        :mod (c4-8 / next)
                                        :poss c4-12)))
      :time (c4-5 / to))
