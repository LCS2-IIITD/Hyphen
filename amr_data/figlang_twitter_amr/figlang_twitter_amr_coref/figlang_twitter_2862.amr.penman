# ::snt Tucker Carlson DESTROYS Tariq Nasheed : FREAKS When Tucker Carlson Reads Passages From His Own Book <URL>
# ::tokens ["Tucker", "Carlson", "DESTROYS", "Tariq", "Nasheed", ":", "FREAKS", "When", "Tucker", "Carlson", "Reads", "Passages", "From", "His", "Own", "Book", "<", "URL", ">"]
# ::lemmas ["Tucker", "Carlson", "DESTROYS", "Tariq", "Nasheed", ":", "FREAKS", "when", "Tucker", "Carlson", "Reads", "Passages", "from", "his", "own", "Book", "<", "URL", ">"]
(c1-0 / deserve-01
      :ARG0 (c1-8 / person
                  :name (c1-9 / name
                              :op1 "Tucker"
                              :op2 "Carlson"))
      :ARG1 (c1-4 / person
                  :name (c1-5 / name
                              :op1 "Tariq"
                              :op2 "Nasheed"))
      :ARG2 (c1-1 / freak-01
                  :time (c1-6 / read-01
                              :ARG0 c1-8
                              :ARG1 (c1-2 / passage
                                          :source (c1-7 / book
                                                        :poss c1-8))))
      :medium (c1-3 / url-entity
                    :value "URL"))

# ::snt , that man will take no responsibility for the destruction he causes instead he kept the hate alive making him $ $ $
# ::tokens [",", "that", "man", "will", "take", "no", "responsibility", "for", "the", "destruction", "he", "causes", "instead", "he", "kept", "the", "hate", "alive", "making", "him", "$", "$", "$"]
# ::lemmas [",", "that", "man", "will", "take", "no", "responsibility", "for", "the", "destruction", "he", "cause", "instead", "he", "keep", "the", "hate", "alive", "make", "he", "$", "$", "$"]
(c2-10 / instead-of-91
       :ARG1 (c2-12 / keep-02
                    :ARG0 (c2-11 / man
                                 :mod (c2-6 / that))
                    :ARG1 (c2-8 / live-01
                                :ARG0 c2-11
                                :ARG1 (c2-4 / hate-01
                                            :ARG0 c2-11))
                    :ARG0-of (c2-1 / make-05
                                   :ARG1 (c2-5 / monetary-quantity
                                               :quant (c2-9 / $
                                                            :unit (c2-0 / dollar))
                                               :ARG2 c2-11))
                    :ARG2 (c2-7 / responsible-01
                                :ARG0 c2-11
                                :ARG1 (c2-3 / destroy-01
                                            :ARG1 c2-11
                                            :ARG1-of (c2-2 / cause-01
                                                           :ARG0 c2-11))
                                :polarity -)))
