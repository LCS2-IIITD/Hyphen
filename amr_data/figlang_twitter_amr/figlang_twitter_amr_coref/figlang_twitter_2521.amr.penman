# ::snt Spare The Rod , Spoil The Child . Gee , I Wonder Where That Came From ? ( sarcasm ) <URL>
# ::tokens ["Spare", "The", "Rod", ",", "Spoil", "The", "Child", ".", "Gee", ",", "I", "Wonder", "Where", "That", "Came", "From", "?", "(", "sarcasm", ")", "<", "URL", ">"]
# ::lemmas ["Spare", "the", "Rod", ",", "Spoil", "the", "Child", ".", "Gee", ",", "i", "wonder", "where", "that", "come", "from", "?", "(", "sarcasm", ")", "<", "URL", ">"]
(c1-12 / multi-sentence
       :snt1 (c1-2 / and
                   :op1 (c1-0 / spin-03
                              :ARG0 (c1-13 / you)
                              :ARG1 (c1-7 / rod)
                              :mode imperative)
                   :op2 (c1-10 / spoil-01
                               :ARG0 c1-13
                               :ARG1 (c1-3 / child)
                               :mode imperative))
       :snt2 (c1-4 / wonder-01
                   :ARG0 (c1-11 / i)
                   :ARG1 (c1-8 / location
                               :ARG2-of (c1-1 / come-03
                                              :ARG1 (c1-6 / that)
                                              :source (c1-14 / amr-unknown)))
                   :mod (c1-9 / gee
                              :mode expressive)
                   :mode expressive)
       :snt3 (c1-5 / sarcasm))

# ::snt No jokes Joe . This is where all things started to go wrong
# ::tokens ["No", "jokes", "Joe", ".", "This", "is", "where", "all", "things", "started", "to", "go", "wrong"]
# ::lemmas ["no", "joke", "Joe", ".", "this", "be", "where", "all", "thing", "start", "to", "go", "wrong"]
(c2-10 / multi-sentence
       :snt1 (c2-0 / say-01
                   :ARG0 (c2-9 / i)
                   :ARG1 (c2-8 / joke-01
                               :ARG0 c2-9
                               :polarity -)
                   :ARG2 (c2-6 / person
                               :name (c2-11 / name
                                            :op1 "Joe")))
       :snt2 (c2-1 / start-01
                   :ARG1 (c2-7 / go-08
                               :ARG1 (c2-5 / thing
                                           :mod (c2-2 / all))
                               :ARG2 (c2-3 / wrong-02
                                           :ARG1 c2-5))
                   :location (c2-4 / this)))
