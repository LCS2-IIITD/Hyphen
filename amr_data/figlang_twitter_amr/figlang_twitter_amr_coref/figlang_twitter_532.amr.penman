# ::snt Heads or tails ? Kick , receive , defend a goal , or defer ? How in the hell do you simply the most simplistic thing in all of sports ? <URL>
# ::tokens ["Heads", "or", "tails", "?", "Kick", ",", "receive", ",", "defend", "a", "goal", ",", "or", "defer", "?", "How", "in", "the", "hell", "do", "you", "simply", "the", "most", "simplistic", "thing", "in", "all", "of", "sports", "?", "<", "URL", ">"]
# ::lemmas ["head", "or", "tail", "?", "Kick", ",", "receive", ",", "defend", "a", "goal", ",", "or", "defer", "?", "how", "in", "the", "hell", "do", "you", "simply", "the", "most", "simplistic", "thing", "in", "all", "of", "sport", "?", "<", "URL", ">"]
(c1-14 / multi-sentence
       :snt1 (c1-8 / or
                   :op1 (c1-7 / head)
                   :op2 (c1-9 / tail)
                   :polarity (c1-3 / amr-unknown)
                   :snt2-of c1-14)
       :op1 (c1-15 / kick-01)
       :op2 (c1-10 / receive-01)
       :op3 (c1-0 / defend-01
                  :ARG1 (c1-11 / goal))
       :op4 (c1-13 / defer-02)
       :op5 (c1-16 / amr-unknown
                   :manner-of (c1-12 / have-degree-91
                                     :ARG1 (c1-6 / thing)
                                     :ARG2 (c1-1 / simplistic)
                                     :ARG3 (c1-5 / most)
                                     :ARG5 (c1-2 / sport
                                                 :mod (c1-4 / all)))))

# ::snt Make it like blackjack in a casino . Simple hand motion to go with words . If words and motion don't match , get clarification . Or , you know , say " This has happened once in X years . Let's just let this one go and see if it ever happens again before we go messing with the system . "
# ::tokens ["Make", "it", "like", "blackjack", "in", "a", "casino", ".", "Simple", "hand", "motion", "to", "go", "with", "words", ".", "If", "words", "and", "motion", "do", "n't", "match", ",", "get", "clarification", ".", "Or", ",", "you", "know", ",", "say", "\"", "This", "has", "happened", "once", "in", "X", "years", ".", "Let", "'s", "just", "let", "this", "one", "go", "and", "see", "if", "it", "ever", "happens", "again", "before", "we", "go", "messing", "with", "the", "system", ".", "\""]
# ::lemmas ["make", "it", "like", "blackjack", "in", "a", "casino", ".", "simple", "hand", "motion", "to", "go", "with", "word", ".", "if", "word", "and", "motion", "do", "not", "match", ",", "get", "clarification", ".", "or", ",", "you", "know", ",", "say", "\"", "this", "have", "happen", "once", "in", "X", "year", ".", "let", "us", "just", "let", "this", "one", "go", "and", "see", "if", "it", "ever", "happen", "again", "before", "we", "go", "mess", "with", "the", "system", ".", "\""]
(c2-14 / multi-sentence
       :snt1 (c2-26 / make-02
                    :ARG0 (c2-21 / you)
                    :ARG1 (c2-11 / resemble-01
                                 :ARG1 (c2-4 / it)
                                 :ARG2 (c2-30 / blackjack
                                              :location (c2-6 / casino)))
                    :mode imperative)
       :snt2 (c2-12 / get-01
                    :ARG0 (c2-22 / you)
                    :ARG1 (c2-0 / clarify-10)
                    :condition (c2-19 / match-01
                                      :ARG1 (c2-7 / word)
                                      :ARG2 (c2-13 / motion)
                                      :polarity -))
       :snt3 (c2-9 / or
                   :op2 (c2-32 / know-01
                               :ARG0 c2-22)
                   :snt4 (c2-18 / say-01
                                :ARG0 c2-22
                                :ARG1 (c2-25 / and
                                             :op1 (c2-29 / let-01
                                                         :ARG0 (c2-16 / we)
                                                         :ARG1 (c2-23 / go-02
                                                                      :ARG0 (c2-27 / one
                                                                                   :mod (c2-10 / this)))
                                                         :time (c2-5 / once
                                                                     :op1 (c2-8 / temporal-quantity
                                                                                :unit (c2-1 / year)
                                                                                :quant 1))
                                                         :mode imperative)
                                             :op2 (c2-3 / let-01
                                                        :ARG0 c2-16
                                                        :ARG1 (c2-2 / go-02
                                                                    :ARG0 c2-27
                                                                    :mod (c2-17 / again))
                                                        :time (c2-24 / before
                                                                     :op1 (c2-20 / go-02
                                                                                 :ARG0 c2-16
                                                                                 :ARG1 (c2-15 / mess-01
                                                                                              :ARG0 c2-16
                                                                                              :ARG1 (c2-31 / system))))
                                                        :mod (c2-28 / just)
                                                        :mode imperative)))))
