# ::snt doesn't only MOCK the disabled . Apparently , he KICKS THEM OUT of his rallies ! Keep HIM out of . <URL>
# ::tokens ["does", "n't", "only", "MOCK", "the", "disabled", ".", "Apparently", ",", "he", "KICKS", "THEM", "OUT", "of", "his", "rallies", "!", "Keep", "HIM", "out", "of", ".", "<", "URL", ">"]
# ::lemmas ["do", "not", "only", "mock", "the", "disabled", ".", "apparently", ",", "he", "kick", "they", "out", "of", "his", "rally", "!", "keep", "he", "out", "of", ".", "<", "URL", ">"]
(c1-11 / multi-sentence
       :snt1 (c1-2 / crack-down-06
                   :ARG1 (c1-10 / person
                                :ARG1-of (c1-0 / disable-01))
                   :mod (c1-6 / only)
                   :polarity -)
       :snt2 (c1-7 / throw-out-06
                   :ARG0 (c1-4 / he)
                   :ARG1 (c1-3 / they)
                   :source (c1-8 / rally-01
                                 :ARG1 c1-4)
                   :ARG1-of (c1-1 / appear-02))
       :snt3 (c1-12 / keep-04
                    :ARG1 (c1-9 / he)
                    :ARG2 (c1-5 / out-06
                                :ARG2 c1-9)))

# ::snt that was proven false . He never met that reporter and couldn't have known of his disability .
# ::tokens ["that", "was", "proven", "false", ".", "He", "never", "met", "that", "reporter", "and", "could", "n't", "have", "known", "of", "his", "disability", "."]
# ::lemmas ["that", "be", "prove", "false", ".", "he", "never", "meet", "that", "reporter", "and", "could", "not", "have", "know", "of", "his", "disability", "."]
(c2-11 / multi-sentence
       :snt1 (c2-10 / prove-01
                    :ARG1 (c2-2 / false
                                :domain (c2-8 / that)))
       :snt2 (c2-1 / and
                   :op1 (c2-3 / meet-02
                              :ARG0 (c2-6 / he)
                              :ARG1 (c2-7 / person
                                          :ARG0-of (c2-9 / report-01)
                                          :mod (c2-4 / that))
                              :time (c2-13 / ever)
                              :polarity -)
                   :op2 (c2-5 / possible-01
                              :ARG1 (c2-12 / know-01
                                           :ARG0 c2-6
                                           :ARG1 (c2-0 / disability
                                                       :poss c2-6))
                              :polarity -)))
