# ::snt Ok , it s out . Who s gonna be the first one to pull the trigger on a review ?
# ::tokens ["Ok", ",", "it", "s", "out", ".", "Who", "s", "gon", "na", "be", "the", "first", "one", "to", "pull", "the", "trigger", "on", "a", "review", "?"]
# ::lemmas ["ok", ",", "it", "s", "out", ".", "who", "s", "going", "to", "be", "the", "first", "one", "to", "pull", "the", "trigger", "on", "a", "review", "?"]
(c1-9 / multi-sentence
      :snt1 (c1-4 / out-01
                  :ARG1 (c1-2 / it)
                  :ARG1-of (c1-3 / okay-04))
      :snt2 (c1-8 / person
                  :ord (c1-0 / ordinal-entity
                             :value 1)
                  :ARG0-of (c1-5 / pull-01
                                 :ARG1 (c1-6 / trigger)
                                 :time (c1-7 / review-01))
                  :domain (c1-1 / amr-unknown)))

# ::snt I hope AD is . I certainly know he's had time to prepare
# ::tokens ["I", "hope", "AD", "is", ".", "I", "certainly", "know", "he", "'s", "had", "time", "to", "prepare"]
# ::lemmas ["i", "hope", "ad", "be", ".", "i", "certainly", "know", "he", "be", "have", "time", "to", "prepare"]
(c2-10 / multi-sentence
       :snt1 (c2-3 / hope-01
                   :ARG0 (c2-9 / i)
                   :ARG1 (c2-7 / person
                               :name (c2-11 / name
                                            :op1 "AD")))
       :snt2 (c2-1 / know-01
                   :ARG0 (c2-4 / i)
                   :ARG1 (c2-8 / have-03
                               :ARG0 (c2-0 / he)
                               :ARG1 (c2-6 / time
                                           :purpose (c2-5 / prepare-02
                                                          :ARG0 c2-0)))
                   :manner (c2-2 / certain)))

# ::snt im too busy making movies about Ghostbusters and Demon Hunters
# ::tokens ["i", "m", "too", "busy", "making", "movies", "about", "Ghostbusters", "and", "Demon", "Hunters"]
# ::lemmas ["i", "m", "too", "busy", "make", "movie", "about", "Ghostbusters", "and", "Demon", "Hunters"]
(c3-7 / busy-01
      :ARG1 (c3-8 / i)
      :ARG2 (c3-9 / make-01
                  :ARG0 c3-8
                  :ARG1 (c3-2 / movie
                              :topic (c3-1 / and
                                           :op1 (c3-0 / book
                                                      :name (c3-10 / name
                                                                   :op1 "Ghostbusters"))
                                           :op2 (c3-3 / book
                                                      :name (c3-6 / name
                                                                  :op1 "Demon"
                                                                  :op2 "Hunters")))))
      :ARG2-of (c3-4 / have-degree-91
                     :ARG1 c3-8
                     :ARG3 (c3-5 / too)))

# ::snt Don t get him started or our next episode will have half the show wasted
# ::tokens ["Don", "t", "get", "him", "started", "or", "our", "next", "episode", "will", "have", "half", "the", "show", "wasted"]
# ::lemmas ["Don", "t", "get", "he", "start", "or", "our", "next", "episode", "will", "have", "half", "the", "show", "waste"]
(c4-4 / or
      :op1 (c4-5 / get-04
                 :ARG0 (c4-8 / you)
                 :ARG1 (c4-0 / start-01
                             :ARG0 (c4-3 / he))
                 :polarity -
                 :mode imperative)
      :op2 (c4-2 / waste-01
                 :ARG0 (c4-10 / episode
                              :poss (c4-9 / we)
                              :mod (c4-7 / next))
                 :ARG1 (c4-6 / half
                             :part-of (c4-1 / show-04))))

# ::snt H I m totally going to get AD started .
# ::tokens ["H", "I", "m", "totally", "going", "to", "get", "AD", "started", "."]
# ::lemmas ["h", "i", "m", "totally", "go", "to", "get", "ad", "start", "."]
(c5-4 / get-04
      :ARG0 (c5-5 / i)
      :ARG1 (c5-0 / start-01
                  :ARG1 (c5-3 / program
                              :name (c5-6 / name
                                          :op1 "AD")))
      :degree (c5-2 / total)
      :mod (c5-1 / huh
                 :mode expressive))
