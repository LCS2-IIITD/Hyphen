# ::snt Some pals I ain t seen much of at all recently & Sumetimes hoomans just get so bizzy .
# ::tokens ["Some", "pals", "I", "ain", "t", "seen", "much", "of", "at", "all", "recently", "&", "Sumetimes", "hoomans", "just", "get", "so", "bizzy", "."]
# ::lemmas ["some", "pal", "i", "ain", "t", "see", "much", "of", "at", "all", "recently", "&", "Sumetimes", "hooman", "just", "get", "so", "bizzy", "."]
(c1-1 / and
      :op1 (c1-0 / see-01
                 :ARG0 (c1-13 / i)
                 :ARG1 (c1-9 / person
                             :ARG1-of (c1-4 / include-91
                                            :ARG2 (c1-7 / pal)
                                            :ARG3 (c1-14 / much))
                             :quant (c1-12 / some))
                 :time (c1-8 / recent)
                 :degree (c1-16 / at-all)
                 :polarity -)
      :op2 (c1-11 / get-03
                  :ARG1 (c1-3 / person
                              :mod (c1-2 / country
                                         :name (c1-15 / name
                                                      :op1 "Great"
                                                      :op2 "Britain")))
                  :ARG2 (c1-6 / bizzy
                              :degree (c1-5 / so))
                  :mod (c1-10 / just)))

# ::snt I know Dugal been super busy . Hopefully he be back soon !
# ::tokens ["I", "know", "Dugal", "been", "super", "busy", ".", "Hopefully", "he", "be", "back", "soon", "!"]
# ::lemmas ["i", "know", "Dugal", "be", "super", "busy", ".", "hopefully", "he", "be", "back", "soon", "!"]
(c2-9 / multi-sentence
      :snt1 (c2-10 / know-01
                   :ARG0 (c2-8 / i)
                   :ARG1 (c2-6 / busy-01
                               :ARG1 (c2-4 / person
                                           :name (c2-5 / name
                                                       :op1 "Dugal"))
                               :degree (c2-0 / super)))
      :snt2 (c2-2 / hope-01
                  :ARG1 (c2-3 / return-01
                              :ARG1 (c2-7 / he)
                              :time (c2-1 / soon))))

# ::snt Dugal s family has sooo many things going on , , they are super human ! ! !
# ::tokens ["Dugal", "s", "family", "has", "sooo", "many", "things", "going", "on", ",", ",", "they", "are", "super", "human", "!", "!", "!"]
# ::lemmas ["Dugal", "s", "family", "have", "sooo", "many", "thing", "go", "on", ",", ",", "they", "be", "super", "human", "!", "!", "!"]
(c3-12 / multi-sentence
       :snt1 (c3-6 / have-03
                   :ARG0 (c3-3 / family
                               :ARG1-of (c3-10 / have-org-role-91
                                               :ARG0 (c3-11 / person
                                                            :name (c3-13 / name
                                                                         :op1 "Dugal"))
                                               :ARG2 (c3-4 / member)))
                   :ARG1 (c3-8 / thing
                               :quant (c3-7 / many
                                            :degree (c3-0 / so))
                               :ARG1-of (c3-9 / go-on-15)))
       :snt2 (c3-1 / human
                   :degree (c3-2 / super)
                   :domain (c3-5 / they)
                   :mode expressive))

# ::snt They are sooper smart family too . Maybe JS got exams & stuff now or soon ?
# ::tokens ["They", "are", "sooper", "smart", "family", "too", ".", "Maybe", "JS", "got", "exams", "&", "stuff", "now", "or", "soon", "?"]
# ::lemmas ["they", "be", "sooper", "smart", "family", "too", ".", "maybe", "JS", "get", "exam", "&", "stuff", "now", "or", "soon", "?"]
(c4-13 / multi-sentence
       :snt1 (c4-2 / family
                   :domain (c4-7 / they)
                   :ARG1-of (c4-0 / smart-06
                                  :mod (c4-11 / sooper))
                   :mod (c4-3 / too))
       :snt2 (c4-12 / possible-01
                    :ARG1 (c4-10 / get-01
                                 :ARG0 (c4-6 / person
                                             :name (c4-14 / name
                                                          :op1 "JS"))
                                 :ARG1 (c4-1 / and
                                             :op1 (c4-16 / exam)
                                             :op2 (c4-4 / stuff))
                                 :time (c4-5 / or
                                             :op1 (c4-8 / now)
                                             :op2 (c4-9 / soon)))
                    :polarity (c4-15 / amr-unknown)))

# ::snt exams , learning to drive , all excelling , how are they not exhausted ?
# ::tokens ["exams", ",", "learning", "to", "drive", ",", "all", "excelling", ",", "how", "are", "they", "not", "exhausted", "?"]
# ::lemmas ["exam", ",", "learn", "to", "drive", ",", "all", "excel", ",", "how", "be", "they", "not", "exhausted", "?"]
(c5-7 / multi-sentence
      :snt1 (c5-2 / and
                  :op1 (c5-9 / exercise-02)
                  :op2 (c5-6 / learn-01
                             :ARG1 (c5-0 / drive-01))
                  :op3 (c5-3 / excel-01
                             :ARG0 (c5-5 / they)
                             :mod (c5-8 / all)))
      :snt2 (c5-4 / exhaust-01
                  :ARG1 c5-5
                  :manner (c5-1 / amr-unknown)
                  :polarity -))

# ::snt nope . JS been on his Ps since May . He s driving himself . And driving mymstaff up the wall
# ::tokens ["nope", ".", "JS", "been", "on", "his", "Ps", "since", "May", ".", "He", "s", "driving", "himself", ".", "And", "driving", "mymstaff", "up", "the", "wall"]
# ::lemmas ["nope", ".", "JS", "be", "on", "his", "Ps", "since", "May", ".", "he", "s", "drive", "himself", ".", "and", "drive", "mymstaff", "up", "the", "wall"]
(c6-6 / multi-sentence
      :snt1 (c6-7 / nope)
      :snt2 (c6-16 / be-located-at-91
                   :ARG1 (c6-18 / person
                                :name (c6-1 / name
                                            :op1 "JS"))
                   :ARG2 (c6-5 / thing
                               :name (c6-10 / name
                                            :op1 "Ps")
                               :poss c6-18)
                   :time (c6-8 / since
                               :op1 (c6-0 / date-entity
                                          :month 5)))
      :snt3 (c6-11 / drive-01
                   :ARG0 (c6-13 / he
                                :ARG1-of c6-11))
      :snt4 (c6-12 / and
                   :op2 (c6-9 / drive-01
                              :ARG0 (c6-3 / i)
                              :ARG1 (c6-15 / person
                                           :ARG0-of (c6-2 / have-org-role-91
                                                          :ARG2 (c6-17 / staff
                                                                       :poss c6-3)))
                              :direction (c6-14 / up
                                                :op1 (c6-4 / wall)))))

# ::snt hee hee wow , is there nothing he cannot do ? ! Must be looking forward to Italy .
# ::tokens ["hee", "hee", "wow", ",", "is", "there", "nothing", "he", "can", "not", "do", "?", "!", "Must", "be", "looking", "forward", "to", "Italy", "."]
# ::lemmas ["hee", "hee", "wow", ",", "be", "there", "nothing", "he", "can", "not", "do", "?", "!", "must", "be", "look", "forward", "to", "Italy", "."]
(c7-9 / multi-sentence
      :snt1 (c7-3 / wow
                  :mod (c7-5 / he)
                  :mode expressive)
      :snt2 (c7-8 / possible-01
                  :ARG1 (c7-0 / do-02
                              :ARG0 c7-5)
                  :ARG1 (c7-1 / anything)
                  :polarity -)
      :polarity (c7-11 / amr-unknown)
      :snt3 (c7-2 / infer-01
                  :ARG1 (c7-7 / look-forward-03
                              :ARG0 (c7-6 / i)
                              :ARG1 (c7-4 / country
                                          :name (c7-10 / name
                                                       :op1 "Italy")))))

# ::snt he sure is . And a week at the beach with his nana
# ::tokens ["he", "sure", "is", ".", "And", "a", "week", "at", "the", "beach", "with", "his", "nana"]
# ::lemmas ["he", "sure", "be", ".", "and", "a", "week", "at", "the", "beach", "with", "his", "nana"]
(c8-10 / multi-sentence
       :snt1 (c8-0 / sure-02
                   :ARG0 (c8-5 / he))
       :snt2 (c8-3 / and
                   :op2 (c8-7 / be-located-at-91
                              :ARG1 (c8-8 / he)
                              :ARG2 (c8-1 / beach)
                              :duration (c8-6 / temporal-quantity
                                              :unit (c8-4 / week)
                                              :quant 1)
                              :accompanier (c8-9 / person
                                                 :ARG0-of (c8-2 / have-rel-role-91
                                                                :ARG1 c8-8
                                                                :ARG2 (c8-11 / nana))))))

# ::snt And then a week at the Gold Coast with me !
# ::tokens ["And", "then", "a", "week", "at", "the", "Gold", "Coast", "with", "me", "!"]
# ::lemmas ["and", "then", "a", "week", "at", "the", "Gold", "Coast", "with", "i", "!"]
(c9-0 / and
      :op2 (c9-4 / temporal-quantity
                 :unit (c9-2 / week)
                 :location (c9-1 / coast
                                 :mod (c9-5 / gold))
                 :accompanier (c9-6 / i)
                 :time (c9-3 / then)
                 :quant 1))

# ::snt oh that s right ! Just ssssshhbso that staff doesn t find out
# ::tokens ["oh", "that", "s", "right", "!", "Just", "ssssshhbso", "that", "staff", "doesn", "t", "find", "out"]
# ::lemmas ["oh", "that", "s", "right", "!", "just", "ssssshhbso", "that", "staff", "doesn", "t", "find", "out"]
(c10-8 / multi-sentence
       :snt1 (c10-6 / right-06
                    :ARG1 (c10-5 / that)
                    :mod (c10-4 / oh))
       :snt2 (c10-2 / cause-01
                    :ARG1 (c10-1 / find-out-03
                                 :ARG0 (c10-0 / staff
                                              :mod (c10-3 / that))
                                 :polarity -)
                    :mod (c10-7 / just)))

# ::snt You know my brofur Tom ? He does turn tomorrow !
# ::tokens ["You", "know", "my", "brofur", "Tom", "?", "He", "does", "turn", "tomorrow", "!"]
# ::lemmas ["you", "know", "my", "brofur", "Tom", "?", "he", "do", "turn", "tomorrow", "!"]
(c11-9 / multi-sentence
       :snt1 (c11-10 / know-02
                     :ARG0 (c11-11 / you)
                     :ARG1 (c11-8 / person
                                  :name (c11-5 / name
                                               :op1 "Tom")
                                  :ARG0-of (c11-3 / have-rel-role-91
                                                  :ARG1 (c11-1 / i)
                                                  :ARG2 (c11-6 / brofur)))
                     :polarity (c11-0 / amr-unknown))
       :snt2 (c11-4 / turn-01
                    :ARG1 (c11-7 / he)
                    :time (c11-2 / tomorrow)))

# ::snt wow ! ! ! Happy birthday Tom ! What sort of cake is he getting ?
# ::tokens ["wow", "!", "!", "!", "Happy", "birthday", "Tom", "!", "What", "sort", "of", "cake", "is", "he", "getting", "?"]
# ::lemmas ["wow", "!", "!", "!", "happy", "birthday", "Tom", "!", "what", "sort", "of", "cake", "be", "he", "get", "?"]
(c12-10 / multi-sentence
        :snt1 (c12-4 / wow
                     :mode expressive)
        :snt2 (c12-0 / say-01
                     :ARG1 (c12-5 / happy-01
                                  :ARG1 (c12-7 / birthday
                                               :poss (c12-9 / person
                                                            :name (c12-11 / name
                                                                          :op1 "Tom")
                                                            :ARG2-of c12-0))))
        :snt3 (c12-6 / get-01
                     :ARG0 (c12-8 / he)
                     :ARG1 (c12-3 / cake
                                  :mod (c12-1 / sort
                                              :mod (c12-2 / amr-unknown)))))

# ::snt Orange cake with Bryce cream & grain free treats
# ::tokens ["Orange", "cake", "with", "Bryce", "cream", "&", "grain", "free", "treats"]
# ::lemmas ["Orange", "cake", "with", "Bryce", "cream", "&", "grain", "free", "treat"]
(c13-1 / and
       :op1 (c13-3 / cake
                   :ARG1-of (c13-4 / orange-02))
       :op2 (c13-0 / cream
                   :mod (c13-7 / person
                               :name (c13-8 / name
                                            :op1 "Bryce")))
       :op3 (c13-5 / treat
                   :ARG1-of (c13-2 / free-04
                                   :ARG2 (c13-6 / grain))))
