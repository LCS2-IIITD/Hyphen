# ::snt Well said . Sadly , some will never acknowledge this ' dereliction of duty ' <URL>
# ::tokens ["Well", "said", ".", "Sadly", ",", "some", "will", "never", "acknowledge", "this", "'", "dereliction", "of", "duty", "'", "<", "URL", ">"]
# ::lemmas ["well", "say", ".", "sadly", ",", "some", "will", "never", "acknowledge", "this", "'", "dereliction", "of", "duty", "'", "<", "URL", ">"]
(c1-8 / multi-sentence
      :snt1 (c1-0 / say-01
                  :manner (c1-4 / well-09))
      :snt2 (c1-2 / acknowledge-01
                  :ARG0 (c1-6 / some)
                  :ARG1 (c1-1 / dereliction
                              :mod (c1-7 / duty)
                              :mod (c1-5 / this))
                  :time (c1-9 / ever)
                  :ARG2-of (c1-3 / fortunate-01
                                 :polarity -)
                  :polarity -))

# ::snt years ago they investigated the Poppy Appeal and found only p from every collected went to good causes
# ::tokens ["years", "ago", "they", "investigated", "the", "Poppy", "Appeal", "and", "found", "only", "p", "from", "every", "collected", "went", "to", "good", "causes"]
# ::lemmas ["years", "ago", "they", "investigate", "the", "Poppy", "Appeal", "and", "find", "only", "p", "from", "every", "collect", "go", "to", "good", "cause"]
(c2-1 / and
      :op1 (c2-13 / investigate-01
                  :ARG0 (c2-9 / they)
                  :ARG1 (c2-8 / organization
                              :name (c2-15 / name
                                           :op1 "Poppy"
                                           :op2 "Appeals"))
                  :time (c2-12 / before
                               :op1 (c2-10 / now)
                               :quant (c2-14 / multiple
                                             :op1 (c2-6 / temporal-quantity
                                                        :unit (c2-16 / year)
                                                        :quant 1))))
      :op2 (c2-3 / find-01
                 :ARG0 c2-9
                 :ARG1 (c2-11 / go-10
                              :ARG1 (c2-4 / thing
                                          :mod (c2-7 / only)
                                          :ARG1-of (c2-5 / collect-01))
                              :ARG2 (c2-0 / cause
                                          :ARG1-of (c2-2 / good-02)))))
