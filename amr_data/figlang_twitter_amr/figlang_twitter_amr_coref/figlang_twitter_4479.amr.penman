# ::snt Sadly , so many find happiness in others unhappiness . That has been a nagging platitude in so much of their rhetoric ; remoaners tears ! I don't hear or see the same from Remainers ! Yet none can define what a brexit success is ! And none can see the irony <URL>
# ::tokens ["Sadly", ",", "so", "many", "find", "happiness", "in", "others", "unhappiness", ".", "That", "has", "been", "a", "nagging", "platitude", "in", "so", "much", "of", "their", "rhetoric", ";", "remoaners", "tears", "!", "I", "do", "n't", "hear", "or", "see", "the", "same", "from", "Remainers", "!", "Yet", "none", "can", "define", "what", "a", "brexit", "success", "is", "!", "And", "none", "can", "see", "the", "irony", "<", "URL", ">"]
# ::lemmas ["sadly", ",", "so", "many", "find", "happiness", "in", "other", "unhappiness", ".", "that", "have", "be", "a", "nagging", "platitude", "in", "so", "much", "of", "their", "rhetoric", ";", "remoaner", "tear", "!", "i", "do", "not", "hear", "or", "see", "the", "same", "from", "Remainers", "!", "yet", "none", "can", "define", "what", "a", "brexit", "success", "be", "!", "and", "none", "can", "see", "the", "irony", "<", "URL", ">"]
(c1-15 / multi-sentence
       :snt1 (c1-26 / find-01
                    :ARG0 (c1-33 / person
                                 :ARG1-of (c1-28 / have-quant-91
                                                 :ARG2 (c1-27 / many)
                                                 :ARG3 (c1-18 / so)))
                    :ARG1 (c1-3 / happy-01
                                :ARG1 c1-33)
                    :ARG0-of (c1-32 / sad-02))
       :snt2 (c1-29 / platitude
                    :ARG0-of (c1-16 / nag-01)
                    :domain (c1-13 / that)
                    :location (c1-14 / rhetoric
                                     :poss (c1-10 / they)
                                     :ARG1-of c1-28
                                     :ARG2 (c1-24 / much)
                                     :ARG3 (c1-22 / so)))
       :snt3 (c1-17 / tear-03
                    :ARG0 (c1-20 / person
                                 :ARG0-of (c1-11 / remoaner-01)))
       :snt4 (c1-12 / or
                    :op1 (c1-8 / hear-01
                               :ARG0 (c1-4 / i)
                               :ARG1 (c1-23 / thing
                                            :ARG1-of (c1-5 / same-01))
                               :ARG2 c1-20
                               :polarity -)
                    :op2 (c1-6 / see-01
                               :ARG0 c1-4
                               :ARG1 c1-23
                               :polarity -))
       :snt5 (c1-9 / contrast-01
                   :ARG2 (c1-19 / possible-01
                                :ARG1 (c1-0 / define-01
                                            :ARG0 (c1-2 / none)
                                            :ARG1 (c1-30 / succeed-01
                                                         :ARG1 (c1-31 / brexit)))))
       :snt6 (c1-25 / and
                    :op2 (c1-1 / possible-01
                               :ARG1 (c1-7 / see-01
                                           :ARG0 c1-2
                                           :ARG1 (c1-21 / irony))
                               :polarity -)))

# ::snt deluded , spiteful AND another brexshitter who has trouble with written english * sighs
# ::tokens ["deluded", ",", "spiteful", "AND", "another", "brexshitter", "who", "has", "trouble", "with", "written", "english", "*", "sighs"]
# ::lemmas ["delude", ",", "spiteful", "and", "another", "brexshitter", "who", "have", "trouble", "with", "write", "english", "*", "sigh"]
(c2-0 / sigh-02
      :ARG0 (c2-2 / and
                  :op1 (c2-1 / delude-01)
                  :op2 (c2-7 / spiteful)
                  :op3 (c2-6 / brexshitter
                             :mod (c2-9 / another)
                             :ARG0-of (c2-4 / have-trouble-04
                                            :ARG1 (c2-3 / write-01
                                                        :ARG0 c2-6
                                                        :ARG1 (c2-5 / language
                                                                    :name (c2-8 / name
                                                                                :op1 "English")))))))

# ::snt Oh dear you must be perfect ... all fbpe are perfect ... they keep telling us .
# ::tokens ["Oh", "dear", "you", "must", "be", "perfect", "...", "all", "fbpe", "are", "perfect", "...", "they", "keep", "telling", "us", "."]
# ::lemmas ["oh", "dear", "you", "must", "be", "perfect", "...", "all", "fbpe", "be", "perfect", "...", "they", "keep", "tell", "we", "."]
(c3-10 / multi-sentence
       :snt1 (c3-6 / obligate-01
                   :ARG1 (c3-9 / perfect-02
                               :ARG1 (c3-12 / you))
                   :mod (c3-5 / oh
                              :mode expressive))
       :snt2 (c3-7 / perfect-02
                   :ARG1 (c3-8 / thing
                               :mod (c3-0 / all)
                               :ARG1-of (c3-4 / personal-02)))
       :snt3 (c3-11 / keep-02
                    :ARG0 (c3-3 / they)
                    :ARG1 (c3-1 / tell-01
                                :ARG0 c3-3
                                :ARG2 (c3-2 / we))))

# ::snt Who can I give you examples ... FBPE told us we are stupid to vote brexit
# ::tokens ["Who", "can", "I", "give", "you", "examples", "...", "FBPE", "told", "us", "we", "are", "stupid", "to", "vote", "brexit"]
# ::lemmas ["who", "can", "i", "give", "you", "example", "...", "FBPE", "tell", "we", "we", "be", "stupid", "to", "vote", "brexit"]
(c4-10 / multi-sentence
       :snt1 (c4-9 / possible-01
                   :ARG1 (c4-8 / give-01
                               :ARG0 (c4-1 / i)
                               :ARG1 (c4-13 / example)
                               :ARG2 (c4-12 / you)))
       :snt2 (c4-7 / tell-01
                   :ARG0 (c4-6 / publication
                               :name (c4-11 / name
                                            :op1 "Facebook"
                                            :op2 "PE"))
                   :ARG1 (c4-0 / stupid
                               :domain (c4-2 / we)
                               :ARG0-of (c4-3 / cause-01
                                              :ARG1 (c4-5 / vote-01
                                                          :ARG0 c4-2
                                                          :ARG1 (c4-4 / brexit))))
                   :ARG2 c4-2))

# ::snt Hmm don't think that counts as telling you that I'm perfect lol
# ::tokens ["Hmm", "do", "n't", "think", "that", "counts", "as", "telling", "you", "that", "I", "'m", "perfect", "lol"]
# ::lemmas ["hmm", "do", "not", "think", "that", "count", "as", "tell", "you", "that", "i", "be", "perfect", "lol"]
(c5-4 / think-01
      :ARG0 (c5-8 / i)
      :ARG1 (c5-1 / count-04
                  :ARG1 (c5-2 / that)
                  :ARG2 (c5-9 / tell-01
                              :ARG0 c5-2
                              :ARG1 (c5-6 / perfect-02
                                          :ARG1 c5-8)
                              :ARG2 (c5-5 / you)))
      :mod (c5-3 / hmm
                 :mode expressive)
      :ARG2-of (c5-7 / laugh-01
                     :ARG0 c5-8
                     :manner (c5-0 / loud))
      :polarity -
      :mode expressive)
