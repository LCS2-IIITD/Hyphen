# ::snt don't you love how your words get twisted to fit their agenda
# ::tokens ["do", "n't", "you", "love", "how", "your", "words", "get", "twisted", "to", "fit", "their", "agenda"]
# ::lemmas ["do", "not", "you", "love", "how", "your", "word", "get", "twist", "to", "fit", "their", "agenda"]
(c1-7 / love-01
      :ARG0 (c1-8 / you)
      :ARG1 (c1-5 / thing
                  :manner-of (c1-4 / twist-01
                                   :ARG1 (c1-3 / word
                                               :poss c1-8)
                                   :purpose (c1-1 / fit-06
                                                  :ARG1 c1-3
                                                  :ARG2 (c1-0 / agenda
                                                              :poss (c1-2 / they)))))
      :ARG1-of (c1-6 / request-confirmation-91))

# ::snt yeah , more badged cowards should slaughter " thugs . " White power !
# ::tokens ["yeah", ",", "more", "badged", "cowards", "should", "slaughter", "\"", "thugs", ".", "\"", "White", "power", "!"]
# ::lemmas ["yeah", ",", "more", "badged", "coward", "should", "slaughter", "\"", "thug", ".", "\"", "white", "power", "!"]
(c2-8 / multi-sentence
      :snt1 (c2-5 / recommend-01
                  :ARG1 (c2-0 / slaughter-01
                              :ARG0 (c2-1 / coward
                                          :ARG1-of (c2-6 / badge-01)
                                          :quant (c2-2 / more))
                              :ARG1 (c2-4 / thug))
                  :mod (c2-9 / yeah
                             :mode expressive))
      :snt2 (c2-7 / power
                  :ARG1-of (c2-3 / white-02)))

# ::snt - Comply , it's simple - They aren't cowards - That goes for all races , but thanks for assuming
# ::tokens ["-", "Comply", ",", "it", "'s", "simple", "-", "They", "are", "n't", "cowards", "-", "That", "goes", "for", "all", "races", ",", "but", "thanks", "for", "assuming"]
# ::lemmas ["-", "comply", ",", "it", "be", "simple", "-", "they", "be", "not", "coward", "-", "that", "go", "for", "all", "race", ",", "but", "thank", "for", "assume"]
(c3-0 / simple-02
      :ARG1 (c3-11 / it)
      :ARG1-of (c3-9 / regardless-91
                     :ARG2 (c3-3 / and
                                 :op1 (c3-4 / coward
                                            :domain (c3-8 / they)
                                            :polarity -)
                                 :op2 (c3-10 / go-10
                                             :ARG1 (c3-5 / that)
                                             :ARG2 (c3-7 / race
                                                         :mod (c3-13 / all))
                                             :ARG1-of (c3-1 / contrast-01
                                                            :ARG2 (c3-12 / thank-01
                                                                         :ARG0 (c3-6 / i)
                                                                         :ARG2 (c3-2 / assume-02
                                                                                     :ARG0 c3-6
                                                                                     :ARG1 c3-5)))))))

# ::snt you are going riot wether there was concrete evidence that it was justified or not
# ::tokens ["you", "are", "going", "riot", "wether", "there", "was", "concrete", "evidence", "that", "it", "was", "justified", "or", "not"]
# ::lemmas ["you", "be", "go", "riot", "wether", "there", "be", "concrete", "evidence", "that", "it", "be", "justify", "or", "not"]
(c4-3 / riot-01
      :ARG0 (c4-7 / you)
      :condition (c4-2 / truth-value
                       :polarity-of (c4-8 / evidence-01
                                          :ARG1 (c4-1 / or
                                                      :op1 (c4-5 / justify-01
                                                                 :ARG1 (c4-6 / it))
                                                      :op2 (c4-4 / justify-01
                                                                 :ARG1 c4-6
                                                                 :polarity -))
                                          :ARG1-of (c4-0 / concrete-02))))
