# ::snt so much classier than what Trump said . Proud to be Canadian .
# ::tokens ["so", "much", "classier", "than", "what", "Trump", "said", ".", "Proud", "to", "be", "Canadian", "."]
# ::lemmas ["so", "much", "classier", "than", "what", "Trump", "say", ".", "proud", "to", "be", "Canadian", "."]
(c1-13 / multi-sentence
       :snt1 (c1-6 / have-degree-91
                   :ARG2 (c1-3 / classier)
                   :ARG3 (c1-2 / more
                               :quant (c1-7 / much
                                            :degree (c1-0 / so)))
                   :ARG4 (c1-9 / thing
                               :ARG1-of (c1-11 / say-01
                                               :ARG0 (c1-12 / person
                                                            :name (c1-14 / name
                                                                         :op1 "Trump")))))
       :snt2 (c1-8 / pride-01
                   :ARG0 (c1-4 / i)
                   :ARG1 (c1-5 / person
                               :mod (c1-1 / country
                                          :name (c1-10 / name
                                                       :op1 "Canada")))))

# ::snt So you would rather your leaders whitewash what Castro was than speak the truth . Glad you are Canadian too .
# ::tokens ["So", "you", "would", "rather", "your", "leaders", "whitewash", "what", "Castro", "was", "than", "speak", "the", "truth", ".", "Glad", "you", "are", "Canadian", "too", "."]
# ::lemmas ["so", "you", "would", "rather", "your", "leader", "whitewash", "what", "Castro", "be", "than", "speak", "the", "truth", ".", "glad", "you", "be", "Canadian", "too", "."]
(c2-14 / multi-sentence
       :snt1 (c2-13 / prefer-01
                    :ARG0 (c2-16 / you)
                    :ARG1 (c2-2 / whitewash-01
                                :ARG0 (c2-7 / person
                                            :ARG0-of (c2-10 / lead-02
                                                            :ARG1 c2-16))
                                :ARG1 (c2-8 / thing
                                            :domain (c2-4 / person
                                                          :name (c2-15 / name
                                                                       :op1 "Castro"))))
                    :ARG2 (c2-0 / speak-01
                                :ARG0 c2-7
                                :ARG1 (c2-3 / truth))
                    :mod (c2-12 / so))
       :snt2 (c2-11 / glad-02
                    :ARG0 (c2-1 / country
                                :name (c2-9 / name
                                            :op1 "Canada")
                                :domain (c2-17 / you)
                                :mod (c2-5 / too))
                    :ARG1 (c2-6 / i)))

# ::snt never heard any of you people stand up for Cubans before now . You wanted to deport them .
# ::tokens ["never", "heard", "any", "of", "you", "people", "stand", "up", "for", "Cubans", "before", "now", ".", "You", "wanted", "to", "deport", "them", "."]
# ::lemmas ["never", "hear", "any", "of", "you", "people", "stand", "up", "for", "Cubans", "before", "now", ".", "you", "want", "to", "deport", "they", "."]
(c3-13 / multi-sentence
       :snt1 (c3-5 / hear-01
                   :ARG0 (c3-12 / i)
                   :ARG1 (c3-0 / stand-up-07
                               :ARG1 (c3-10 / person
                                            :mod (c3-2 / any)
                                            :ARG1-of (c3-6 / include-91
                                                           :ARG2 (c3-15 / you)))
                               :beneficiary (c3-7 / person
                                                  :mod (c3-3 / country
                                                             :name (c3-14 / name
                                                                          :op1 "Cuba")))
                               :time (c3-11 / before
                                            :op1 (c3-9 / now)))
                   :time (c3-17 / ever)
                   :polarity -)
       :snt2 (c3-4 / want-01
                   :ARG0 (c3-16 / you)
                   :ARG1 (c3-1 / deport-01
                               :ARG0 c3-16
                               :ARG1 (c3-8 / they))))

# ::snt I am all for overthrowing that government and allowing freedom back in .
# ::tokens ["I", "am", "all", "for", "overthrowing", "that", "government", "and", "allowing", "freedom", "back", "in", "."]
# ::lemmas ["i", "be", "all", "for", "overthrow", "that", "government", "and", "allow", "freedom", "back", "in", "."]
(c4-0 / support-01
      :ARG0 (c4-7 / i)
      :ARG1 (c4-2 / and
                  :op1 (c4-4 / overthrow-01
                             :ARG1 (c4-6 / government-organization
                                         :ARG0-of (c4-9 / govern-01)
                                         :mod (c4-5 / that)))
                  :op2 (c4-10 / allow-01
                              :ARG1 (c4-8 / back-02
                                          :ARG1 (c4-3 / free-04))))
      :degree (c4-1 / all))

# ::snt not everyone in Cuba is unhappy with their government . A lot of it is media spin .
# ::tokens ["not", "everyone", "in", "Cuba", "is", "unhappy", "with", "their", "government", ".", "A", "lot", "of", "it", "is", "media", "spin", "."]
# ::lemmas ["not", "everyone", "in", "Cuba", "be", "unhappy", "with", "their", "government", ".", "a", "lot", "of", "it", "be", "medium", "spin", "."]
(c5-7 / multi-sentence
      :snt1 (c5-3 / happy-01
                  :ARG1 (c5-10 / everyone
                               :location (c5-1 / country
                                               :name (c5-8 / name
                                                           :op1 "Cuba")))
                  :ARG2 (c5-5 / government-organization
                              :ARG0-of (c5-9 / govern-01
                                             :ARG1 c5-10))
                  :polarity -)
      :snt2 (c5-0 / spin-03
                  :ARG0 (c5-2 / media)
                  :ARG1 (c5-6 / it
                              :quant (c5-4 / lot))))
