# ::snt Too ignorant to be satire and too ridiculous to be serious . But what do I know about Canada's dangers , eh ? <URL>
# ::tokens ["Too", "ignorant", "to", "be", "satire", "and", "too", "ridiculous", "to", "be", "serious", ".", "But", "what", "do", "I", "know", "about", "Canada", "'s", "dangers", ",", "eh", "?", "<", "URL", ">"]
# ::lemmas ["too", "ignorant", "to", "be", "satire", "and", "too", "ridiculous", "to", "be", "serious", ".", "but", "what", "do", "i", "know", "about", "Canada", "'s", "danger", ",", "eh", "?", "<", "URL", ">"]
(c1-15 / multi-sentence
       :snt1 (c1-3 / and
                   :op1 (c1-7 / have-degree-91
                              :ARG2 (c1-14 / ignorant-02)
                              :ARG3 (c1-10 / too)
                              :ARG6 (c1-0 / satire))
                   :op2 (c1-13 / have-degree-91
                               :ARG2 (c1-11 / ridiculous-02)
                               :ARG3 (c1-6 / too)
                               :ARG6 (c1-1 / serious-01
                                           :ARG2 c1-3
                                           :polarity -)))
       :snt2 (c1-5 / contrast-01
                   :ARG2 (c1-16 / know-01
                                :ARG0 (c1-8 / i)
                                :ARG1 (c1-2 / danger
                                            :poss (c1-4 / country
                                                        :name (c1-12 / name
                                                                     :op1 "Canada")))
                                :ARG1-of (c1-9 / request-confirmation-91))))

# ::snt Don't forget the Loch Ness , I heard it moved here a while back too .
# ::tokens ["Do", "n't", "forget", "the", "Loch", "Ness", ",", "I", "heard", "it", "moved", "here", "a", "while", "back", "too", "."]
# ::lemmas ["do", "not", "forget", "the", "Loch", "Ness", ",", "i", "hear", "it", "move", "here", "a", "while", "back", "too", "."]
(c2-0 / forget-01
      :ARG0 (c2-11 / you)
      :ARG1 (c2-8 / island
                  :name (c2-10 / name
                               :op1 "Loch"
                               :op2 "Ness"))
      :ARG1-of (c2-1 / cause-01
                     :ARG0 (c2-3 / hear-01
                                 :ARG0 (c2-4 / i)
                                 :ARG1 (c2-9 / move-01
                                             :ARG1 c2-8
                                             :ARG2 (c2-7 / here)
                                             :time (c2-6 / before
                                                         :quant (c2-2 / while))
                                             :mod (c2-5 / too))))
      :polarity -
      :mode imperative)
