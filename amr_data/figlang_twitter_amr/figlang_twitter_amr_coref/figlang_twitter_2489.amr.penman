# ::snt I want to share an AMAZING BIT OF IDIOCY with you all , from our old friend hackenslash . <URL>
# ::tokens ["I", "want", "to", "share", "an", "AMAZING", "BIT", "OF", "IDIOCY", "with", "you", "all", ",", "from", "our", "old", "friend", "hackenslash", ".", "<", "URL", ">"]
# ::lemmas ["i", "want", "to", "share", "an", "amazing", "bit", "of", "IDIOCY", "with", "you", "all", ",", "from", "our", "old", "friend", "hackenslash", ".", "<", "URL", ">"]
(c1-3 / want-01
      :ARG0 (c1-9 / i)
      :ARG1 (c1-0 / share-01
                  :ARG0 c1-9
                  :ARG1 (c1-8 / bit
                              :quant-of (c1-5 / idiot)
                              :ARG0-of (c1-1 / amaze-01))
                  :ARG2 (c1-10 / you
                               :mod (c1-11 / all))
                  :source (c1-6 / hackenslash
                                :mod (c1-2 / friend
                                           :poss (c1-4 / we)
                                           :time (c1-7 / old)))))

# ::snt > " God doesn't exist is the negative position THAT IS NOT WHAT ' AFFIRMATIVE ' AND ' NEGATIVE ' POSITIONS MEAN IN THIS CONTEXT FFS
# ::tokens [">", "\"", "God", "does", "n't", "exist", "is", "the", "negative", "position", "THAT", "IS", "NOT", "WHAT", "'", "AFFIRMATIVE", "'", "AND", "'", "NEGATIVE", "'", "POSITIONS", "MEAN", "IN", "THIS", "CONTEXT", "FFS"]
# ::lemmas [">", "\"", "God", "do", "not", "exist", "be", "the", "negative", "position", "that", "be", "not", "what", "'", "AFFIRMATIVE", "'", "and", "'", "NEGATIVE", "'", "position", "mean", "in", "this", "CONTEXT", "FFS"]
(c2-11 / exist-01
       :ARG1 (c2-8 / person
                   :name (c2-10 / name
                                :op1 "God"))
       :ARG1-of (c2-2 / cause-01
                      :ARG0 (c2-5 / position-02
                                  :ARG2 (c2-7 / negative-03)
                                  :ARG1-of (c2-9 / mean-01
                                                 :ARG2 (c2-6 / thing
                                                             :ARG1-of (c2-4 / hypothetical-02)
                                                             :ARG1-of c2-5)
                                                 :polarity -)
                                  :location (c2-0 / context
                                                  :mod (c2-3 / this))))
       :mod (c2-1 / fucking
                  :mode expressive)
       :polarity -)

# ::snt Obviously , like me , you need to LRN LOGIC and how real logic works .
# ::tokens ["Obviously", ",", "like", "me", ",", "you", "need", "to", "LRN", "LOGIC", "and", "how", "real", "logic", "works", "."]
# ::lemmas ["obviously", ",", "like", "i", ",", "you", "need", "to", "lrn", "logic", "and", "how", "real", "logic", "work", "."]
(c3-10 / need-01
       :ARG0 (c3-11 / you
                    :ARG1-of (c3-6 / resemble-01
                                   :ARG2 (c3-9 / i)))
       :ARG1 (c3-1 / and
                   :op1 (c3-7 / LRN-00
                              :ARG0 c3-11
                              :ARG1 (c3-8 / logic
                                          :ARG1-of (c3-3 / real-04)))
                   :op2 (c3-5 / thing
                              :manner-of (c3-2 / work-09
                                               :ARG1 (c3-0 / logic))))
       :ARG1-of (c3-4 / obvious-01))

# ::snt but wait , I thought there was no burden of proof eve ... so why should he have to back up anything ?
# ::tokens ["but", "wait", ",", "I", "thought", "there", "was", "no", "burden", "of", "proof", "eve", "...", "so", "why", "should", "he", "have", "to", "back", "up", "anything", "?"]
# ::lemmas ["but", "wait", ",", "i", "think", "there", "be", "no", "burden", "of", "proof", "eve", "...", "so", "why", "should", "he", "have", "to", "back", "up", "anything", "?"]
(c4-4 / contrast-01
      :ARG2 (c4-5 / wait-01
                  :ARG1-of (c4-0 / cause-01
                                 :ARG0 (c4-9 / think-01
                                             :ARG0 (c4-13 / i)
                                             :ARG1 (c4-12 / burden-01
                                                          :ARG2 (c4-11 / prove-01
                                                                       :time (c4-15 / eve))
                                                          :polarity -)
                                             :ARG0-of (c4-7 / cause-01
                                                            :ARG1 (c4-10 / recommend-01
                                                                         :ARG1 (c4-8 / obligate-01
                                                                                     :ARG1 (c4-6 / he)
                                                                                     :ARG2 (c4-1 / back-up-04
                                                                                                 :ARG0 c4-6
                                                                                                 :ARG1 (c4-2 / anything))
                                                                                     :ARG1-of (c4-3 / cause-01
                                                                                                    :ARG0 (c4-14 / amr-unknown)))))))))

# ::snt He doesn t . He can say all the false , stupid things he wants to . I ll just point out they are false and stupid .
# ::tokens ["He", "doesn", "t", ".", "He", "can", "say", "all", "the", "false", ",", "stupid", "things", "he", "wants", "to", ".", "I", "ll", "just", "point", "out", "they", "are", "false", "and", "stupid", "."]
# ::lemmas ["he", "doesn", "t", ".", "he", "can", "you", "all", "the", "false", ",", "stupid", "thing", "he", "want", "to", ".", "i", "ll", "just", "point", "out", "they", "be", "false", "and", "stupid", "."]
(c5-14 / multi-sentence
       :snt1 (c5-0 / do-02
                   :ARG0 (c5-8 / he)
                   :polarity -)
       :snt2 (c5-13 / possible-01
                    :ARG1 (c5-1 / say-01
                                :ARG0 (c5-12 / he)
                                :ARG1 (c5-10 / thing
                                             :mod (c5-4 / false)
                                             :mod (c5-2 / stupid)
                                             :mod (c5-3 / all)
                                             :ARG1-of (c5-6 / want-01
                                                            :ARG0 c5-12))))
       :snt3 (c5-9 / point-out-02
                   :ARG0 (c5-5 / i)
                   :ARG1 (c5-15 / and
                                :op1 c5-4
                                :op2 c5-2
                                :domain (c5-7 / they))
                   :mod (c5-11 / just)))

# ::snt also , you seem to have the memory of a gold fish ... so why are you claiming to be a auth <URL>
# ::tokens ["also", ",", "you", "seem", "to", "have", "the", "memory", "of", "a", "gold", "fish", "...", "so", "why", "are", "you", "claiming", "to", "be", "a", "auth", "<", "URL", ">"]
# ::lemmas ["also", ",", "you", "seem", "to", "have", "the", "memory", "of", "a", "gold", "fish", "...", "so", "why", "be", "you", "claim", "to", "be", "a", "auth", "<", "URL", ">"]
(c6-0 / seem-01
      :ARG1 (c6-6 / have-03
                  :ARG0 (c6-11 / you)
                  :ARG1 (c6-10 / memory
                               :topic (c6-4 / fish
                                            :mod (c6-8 / gold))))
      :mod (c6-3 / also)
      :ARG0-of (c6-5 / cause-01
                     :ARG1 (c6-1 / claim-01
                                 :ARG0 c6-11
                                 :ARG1 (c6-9 / person
                                             :ARG0-of (c6-12 / assist-01)
                                             :domain c6-11)
                                 :ARG1-of (c6-7 / cause-01
                                                :ARG0 (c6-2 / amr-unknown)))))

# ::snt As usual , you re confused . Here you are confusing X is true no matter what anyone believes with I can tell you what to do . "
# ::tokens ["As", "usual", ",", "you", "re", "confused", ".", "Here", "you", "are", "confusing", "X", "is", "true", "no", "matter", "what", "anyone", "believes", "with", "I", "can", "tell", "you", "what", "to", "do", ".", "\""]
# ::lemmas ["as", "usual", ",", "you", "re", "confused", ".", "here", "you", "be", "confuse", "x", "be", "true", "no", "matter", "what", "anyone", "believe", "with", "i", "can", "tell", "you", "what", "to", "do", ".", "\""]
(c7-11 / multi-sentence
       :snt1 (c7-4 / confuse-01
                   :ARG1 (c7-13 / you)
                   :mod (c7-2 / as-usual)
                   :mod (c7-14 / again))
       :snt2 (c7-0 / confuse-01
                   :ARG1 (c7-3 / you)
                   :ARG2 (c7-7 / true-01
                               :ARG1 (c7-10 / person
                                            :name (c7-12 / name
                                                         :op1 "X"))
                               :ARG1-of (c7-8 / regardless-91
                                              :ARG2 (c7-5 / thing
                                                          :ARG1-of (c7-9 / believe-01
                                                                         :ARG0 (c7-1 / anyone)))))
                   :location (c7-6 / here)))
