# ::snt ah fervour - it fills the holes you don't wish to admit you have .
# ::tokens ["ah", "fervour", "-", "it", "fills", "the", "holes", "you", "do", "n't", "wish", "to", "admit", "you", "have", "."]
# ::lemmas ["ah", "fervour", "-", "it", "fill", "the", "hole", "you", "do", "not", "wish", "to", "admit", "you", "have", "."]
(c1-1 / fill-01
      :ARG0 (c1-6 / it)
      :ARG1 (c1-3 / hole
                  :ARG1-of (c1-5 / have-03
                                 :ARG0 (c1-7 / you)
                                 :ARG1-of (c1-2 / wish-01
                                                :ARG0 c1-7
                                                :ARG1-of (c1-0 / admit-01
                                                               :ARG0 c1-7)
                                                :polarity -)))
      :mod (c1-4 / fervour
                 :mod (c1-8 / ah
                            :mode expressive)))

# ::snt it's nice of the preacher to give you permission
# ::tokens ["it", "'s", "nice", "of", "the", "preacher", "to", "give", "you", "permission"]
# ::lemmas ["it", "be", "nice", "of", "the", "preacher", "to", "give", "you", "permission"]
(c2-3 / nice-01
      :ARG1 (c2-2 / permit-01
                  :ARG0 (c2-1 / person
                              :ARG0-of (c2-0 / preach-01))
                  :ARG2 (c2-4 / you)))

# ::snt Not permission , but if you don't want to seek God then don't . No need to make excuses ad nauseam
# ::tokens ["Not", "permission", ",", "but", "if", "you", "do", "n't", "want", "to", "seek", "God", "then", "do", "n't", ".", "No", "need", "to", "make", "excuses", "ad", "nauseam"]
# ::lemmas ["not", "permission", ",", "but", "if", "you", "do", "not", "want", "to", "seek", "God", "then", "do", "not", ".", "no", "need", "to", "make", "excuse", "ad", "nauseam"]
(c3-7 / multi-sentence
      :snt1 (c3-6 / permit-01
                  :concession-of (c3-2 / want-01
                                       :ARG0 (c3-9 / you)
                                       :ARG1 (c3-0 / seek-01
                                                   :ARG0 c3-9
                                                   :ARG1 (c3-3 / person
                                                               :name (c3-8 / name
                                                                           :op1 "God")))
                                       :time (c3-4 / then)
                                       :polarity -)
                  :polarity -)
      :snt2 (c3-5 / need-01
                  :ARG1 (c3-10 / excuse-02
                               :ARG0 c3-9
                               :manner (c3-1 / ad-nauseam))
                  :polarity -))

# ::snt that would then be abstruseness , but don't let me interrupt you .
# ::tokens ["that", "would", "then", "be", "abstruseness", ",", "but", "do", "n't", "let", "me", "interrupt", "you", "."]
# ::lemmas ["that", "would", "then", "be", "abstruseness", ",", "but", "do", "not", "let", "i", "interrupt", "you", "."]
(c4-1 / contrast-01
      :ARG1 (c4-0 / abstruseness
                  :domain (c4-4 / that)
                  :time (c4-2 / then))
      :ARG2 (c4-5 / let-01
                  :ARG0 (c4-7 / you)
                  :ARG1 (c4-6 / interrupt-01
                              :ARG0 (c4-3 / i)
                              :ARG1 c4-7)
                  :polarity -
                  :mode imperative))

# ::snt why would you consider after one post that I would be referring to you making excuses ?
# ::tokens ["why", "would", "you", "consider", "after", "one", "post", "that", "I", "would", "be", "referring", "to", "you", "making", "excuses", "?"]
# ::lemmas ["why", "would", "you", "consider", "after", "one", "post", "that", "i", "would", "be", "refer", "to", "you", "make", "excuse", "?"]
(c5-2 / cause-01
      :ARG0 (c5-1 / amr-unknown)
      :ARG1 (c5-0 / consider-02
                  :ARG0 (c5-8 / you)
                  :ARG1 (c5-4 / refer-01
                              :ARG0 (c5-6 / i)
                              :ARG1 (c5-7 / make-01
                                          :ARG0 c5-8
                                          :ARG1 (c5-3 / thing
                                                      :ARG2-of (c5-10 / excuse-02))))
                  :time (c5-9 / after
                              :op1 (c5-5 / post-01
                                         :quant 1))))

# ::snt because that is exactly what you wrote . Perhaps you didn't mean to direct it toward me ?
# ::tokens ["because", "that", "is", "exactly", "what", "you", "wrote", ".", "Perhaps", "you", "did", "n't", "mean", "to", "direct", "it", "toward", "me", "?"]
# ::lemmas ["because", "that", "be", "exactly", "what", "you", "write", ".", "perhaps", "you", "do", "not", "mean", "to", "direct", "it", "toward", "i", "?"]
(c6-9 / multi-sentence
      :snt1 (c6-2 / cause-01
                  :ARG0 (c6-7 / that
                              :ARG1-of (c6-3 / write-01
                                             :ARG0 (c6-10 / you))
                              :mod (c6-12 / exact)))
      :snt2 (c6-8 / possible-01
                  :ARG1 (c6-4 / mean-02
                              :ARG0 (c6-11 / you)
                              :ARG1 (c6-0 / direct-01
                                          :ARG0 c6-11
                                          :ARG1 (c6-5 / it)
                                          :ARG2 (c6-6 / i))
                              :polarity -)
                  :polarity (c6-1 / amr-unknown)))

# ::snt apparently you just want to fight . go fight someone else .
# ::tokens ["apparently", "you", "just", "want", "to", "fight", ".", "go", "fight", "someone", "else", "."]
# ::lemmas ["apparently", "you", "just", "want", "to", "fight", ".", "go", "fight", "someone", "else", "."]
(c7-7 / multi-sentence
      :snt1 (c7-3 / want-01
                  :ARG0 (c7-8 / you)
                  :ARG1 (c7-2 / fight-01
                              :ARG0 c7-8)
                  :mod (c7-6 / just)
                  :ARG1-of (c7-1 / appear-02))
      :snt2 (c7-5 / go-05
                  :ARG0 (c7-9 / you)
                  :ARG1 (c7-4 / fight-01
                              :ARG0 c7-9
                              :ARG1 (c7-0 / someone
                                          :mod (c7-10 / else)))
                  :mode imperative))

# ::snt If the irony is that you are resisting Christianity by any and all means , then so be it .
# ::tokens ["If", "the", "irony", "is", "that", "you", "are", "resisting", "Christianity", "by", "any", "and", "all", "means", ",", "then", "so", "be", "it", "."]
# ::lemmas ["if", "the", "irony", "be", "that", "you", "be", "resist", "Christianity", "by", "any", "and", "all", "mean", ",", "then", "so", "be", "it", "."]
(c8-1 / have-condition-91
      :ARG1 (c8-3 / resist-01
                  :ARG0 (c8-6 / you)
                  :ARG1 (c8-2 / religious-group
                              :name (c8-5 / name
                                          :op1 "Christianity"))
                  :mod (c8-4 / by-no-means
                             :mod (c8-0 / any))
                  :ARG2-of c8-1))

# ::snt resisting incoherent argument and weird behaviour ? Sure am !
# ::tokens ["resisting", "incoherent", "argument", "and", "weird", "behaviour", "?", "Sure", "am", "!"]
# ::lemmas ["resist", "incoherent", "argument", "and", "weird", "behaviour", "?", "sure", "am", "!"]
(c9-7 / multi-sentence
      :snt1 (c9-4 / resist-01
                  :polarity (c9-2 / amr-unknown)
                  :ARG1 (c9-8 / and
                              :op1 (c9-1 / argue-01
                                         :mod (c9-6 / incoherent))
                              :op2 (c9-5 / behave-01
                                         :mod (c9-3 / weird))))
      :snt2 (c9-0 / sure-02
                  :mode expressive))

# ::snt Well , have fun flying through space pretending to have all the answers . Peace .
# ::tokens ["Well", ",", "have", "fun", "flying", "through", "space", "pretending", "to", "have", "all", "the", "answers", ".", "Peace", "."]
# ::lemmas ["well", ",", "have", "fun", "fly", "through", "space", "pretend", "to", "have", "all", "the", "answer", ".", "peace", "."]
(c10-9 / multi-sentence
       :snt1 (c10-2 / fun-01
                    :ARG0 (c10-10 / you)
                    :ARG1 (c10-5 / fly-01
                                 :ARG0 c10-10
                                 :path (c10-0 / space)
                                 :manner (c10-8 / pretend-01
                                                :ARG0 c10-10
                                                :ARG1 (c10-4 / have-03
                                                             :ARG0 c10-10
                                                             :ARG1 (c10-7 / thing
                                                                          :ARG2-of (c10-1 / answer-01)
                                                                          :mod (c10-11 / all)))))
                    :mod (c10-3 / well)
                    :mode imperative)
       :snt2 (c10-6 / peace))

# ::snt where have i said i have all the answers ? Sight and cite . Ta
# ::tokens ["where", "have", "i", "said", "i", "have", "all", "the", "answers", "?", "Sight", "and", "cite", ".", "Ta"]
# ::lemmas ["where", "have", "i", "say", "i", "have", "all", "the", "answer", "?", "sight", "and", "cite", ".", "Ta"]
(c11-11 / multi-sentence
        :snt1 (c11-0 / say-01
                     :ARG0 (c11-10 / i)
                     :ARG1 (c11-5 / have-03
                                  :ARG0 c11-10
                                  :ARG1 (c11-7 / thing
                                               :ARG2-of (c11-2 / answer-01)
                                               :mod (c11-13 / all))
                                  :location (c11-1 / amr-unknown)))
        :snt2 (c11-6 / and
                     :op1 (c11-9 / sight-01)
                     :op2 (c11-3 / cite-01)
                     :polarity (c11-4 / amr-unknown))
        :snt3 (c11-8 / person
                     :name (c11-12 / name
                                   :op1 "Ta")))

# ::snt You know there is no afterlife and there is no God , and there are no miracles . Anything else ?
# ::tokens ["You", "know", "there", "is", "no", "afterlife", "and", "there", "is", "no", "God", ",", "and", "there", "are", "no", "miracles", ".", "Anything", "else", "?"]
# ::lemmas ["you", "know", "there", "be", "no", "afterlife", "and", "there", "be", "no", "God", ",", "and", "there", "be", "no", "miracle", ".", "anything", "else", "?"]
(c12-6 / multi-sentence
       :snt1 (c12-7 / know-01
                    :ARG0 (c12-8 / you)
                    :ARG1 (c12-1 / and
                                 :op1 (c12-9 / afterlife
                                             :polarity -)
                                 :op2 (c12-5 / person
                                             :name (c12-4 / name
                                                          :op1 "God")
                                             :polarity -)
                                 :op3 (c12-2 / miracle
                                             :polarity -)))
       :snt2 (c12-0 / anything
                    :polarity (c12-3 / amr-unknown)
                    :mod (c12-10 / else)))

# ::snt Like we said already , we lack evidences . We take no shortcuts . Thank you .
# ::tokens ["Like", "we", "said", "already", ",", "we", "lack", "evidences", ".", "We", "take", "no", "shortcuts", ".", "Thank", "you", "."]
# ::lemmas ["like", "we", "say", "already", ",", "we", "lack", "evidence", ".", "we", "take", "no", "shortcut", ".", "thank", "you", "."]
(c13-9 / multi-sentence
       :snt1 (c13-6 / lack-01
                    :ARG0 (c13-2 / we)
                    :ARG1 (c13-4 / thing
                                 :ARG0-of (c13-12 / evidence-01))
                    :ARG1-of (c13-5 / resemble-01
                                    :ARG2 c13-4
                                    :ARG1-of (c13-0 / say-01
                                                    :ARG0 c13-2
                                                    :time (c13-1 / already))))
       :snt2 (c13-7 / shortcut-00
                    :ARG0 (c13-11 / we)
                    :polarity -)
       :snt3 (c13-3 / thank-01
                    :ARG0 (c13-8 / i)
                    :ARG1 (c13-10 / you)))

# ::snt If you cannot understand a meme meant for a child to comprehend then you are Ignorant .
# ::tokens ["If", "you", "can", "not", "understand", "a", "meme", "meant", "for", "a", "child", "to", "comprehend", "then", "you", "are", "Ignorant", "."]
# ::lemmas ["if", "you", "can", "not", "understand", "a", "meme", "meant", "for", "a", "child", "to", "comprehend", "then", "you", "be", "ignorant", "."]
(c14-5 / ignorant-02
       :ARG1 (c14-7 / you)
       :condition (c14-4 / possible-01
                         :ARG1 (c14-3 / understand-01
                                      :ARG0 c14-7
                                      :ARG1 (c14-6 / meme
                                                   :ARG1-of (c14-1 / comprehend-01
                                                                   :ARG0 (c14-0 / child)
                                                                   :ARG2-of (c14-2 / mean-02
                                                                                   :ARG1 c14-1))))
                         :polarity -))

# ::snt Ignorant , is when different christian denominations can't even agree on evolution .
# ::tokens ["Ignorant", ",", "is", "when", "different", "christian", "denominations", "ca", "n't", "even", "agree", "on", "evolution", "."]
# ::lemmas ["ignorant", ",", "be", "when", "different", "christian", "denomination", "can", "not", "even", "agree", "on", "evolution", "."]
(c15-7 / ignore-01
       :ARG1 (c15-6 / possible-01
                    :ARG1 (c15-1 / agree-01
                                 :ARG0 (c15-4 / thing
                                              :ARG2-of (c15-0 / denominations-02
                                                              :ARG1 (c15-5 / religious-group
                                                                           :name (c15-8 / name
                                                                                        :op1 "Christian")))
                                              :ARG1-of (c15-2 / differ-02))
                                 :ARG1 (c15-9 / evolve-01)
                                 :mod (c15-3 / even))
                    :polarity -))
