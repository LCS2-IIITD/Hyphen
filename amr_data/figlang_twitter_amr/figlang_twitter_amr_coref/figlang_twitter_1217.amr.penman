# ::snt Finally managed to find Cutting Edge : Touts on Tour doc on You Tube last night . Quality telly from
# ::tokens ["Finally", "managed", "to", "find", "Cutting", "Edge", ":", "Touts", "on", "Tour", "doc", "on", "You", "Tube", "last", "night", ".", "Quality", "telly", "from"]
# ::lemmas ["finally", "manage", "to", "find", "cut", "edge", ":", "tout", "on", "Tour", "doc", "on", "you", "Tube", "last", "night", ".", "quality", "telly", "from"]
(c1-11 / multi-sentence
       :snt1 (c1-2 / manage-02
                   :ARG1 (c1-1 / find-01
                               :ARG1 (c1-0 / document
                                           :name (c1-12 / name
                                                        :op1 "Cutting"
                                                        :op2 "Edge"
                                                        :op3 ":"
                                                        :op4 "Touts"
                                                        :op5 "on"
                                                        :op6 "Tour"))
                               :medium (c1-10 / publication
                                              :name (c1-9 / name
                                                          :op1 "YouTube"))
                               :time (c1-4 / date-entity
                                           :dayperiod (c1-7 / night)
                                           :mod (c1-13 / yesterday)))
                   :mod (c1-6 / final))
       :snt2 (c1-8 / telly
                   :mod (c1-3 / quality)
                   :source-of (c1-5 / work-of-art)))

# ::snt ' Oi ate the Welsh .. nevva dan naffink for the union . Celts aint they , not like the English and Scots '
# ::tokens ["'", "Oi", "ate", "the", "Welsh", "..", "nevva", "dan", "naffink", "for", "the", "union", ".", "Celts", "ai", "nt", "they", ",", "not", "like", "the", "English", "and", "Scots", "'"]
# ::lemmas ["'", "Oi", "eat", "the", "Welsh", "..", "nevva", "dan", "naffink", "for", "the", "union", ".", "celt", "be", "not", "they", ",", "not", "like", "the", "English", "and", "Scots", "'"]
(c2-14 / multi-sentence
       :snt1 (c2-16 / eat-01
                    :ARG0 (c2-13 / person
                                 :name (c2-15 / name
                                              :op1 "Oi"))
                    :ARG1 (c2-9 / person
                                :mod (c2-3 / country
                                           :name (c2-10 / name
                                                        :op1 "Wales")))
                    :purpose (c2-7 / union-02))
       :snt2 (c2-4 / have-polarity-91
                   :ARG1 (c2-5 / ethnic-group
                               :name (c2-8 / name
                                           :op1 "Celt"))
                   :ARG1-of (c2-11 / resemble-01
                                   :ARG2 (c2-1 / and
                                               :op1 (c2-6 / ethnic-group
                                                          :name (c2-2 / name
                                                                      :op1 "England"))
                                               :op2 (c2-0 / ethnic-group
                                                          :name (c2-12 / name
                                                                       :op1 "Scots")))
                                   :polarity -)
                   :ARG2 -))

# ::snt Comedy gold . The fellar ringing up for Stones tickets wanting to know what star hotel was included for
# ::tokens ["Comedy", "gold", ".", "The", "fellar", "ringing", "up", "for", "Stones", "tickets", "wanting", "to", "know", "what", "star", "hotel", "was", "included", "for"]
# ::lemmas ["comedy", "gold", ".", "the", "fellar", "ring", "up", "for", "stone", "ticket", "want", "to", "know", "what", "star", "hotel", "be", "include", "for"]
(c3-13 / multi-sentence
       :snt1 (c3-11 / gold
                    :mod (c3-4 / comic))
       :snt2 (c3-10 / ring-up-03
                    :ARG1 (c3-3 / fellar)
                    :purpose (c3-9 / ticket
                                   :poss (c3-12 / person
                                                :name (c3-14 / name
                                                             :op1 "Stone")))
                    :ARG0-of (c3-0 / cause-01
                                   :ARG1 (c3-5 / want-01
                                               :ARG0 c3-3
                                               :ARG1 (c3-2 / know-01
                                                           :ARG0 c3-3
                                                           :ARG1 (c3-6 / thing
                                                                       :ARG2-of (c3-7 / include-01
                                                                                      :ARG1 (c3-8 / hotel
                                                                                                  :mod (c3-1 / star)))))))))
