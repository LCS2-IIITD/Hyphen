# ::snt DaddyJ went gility comp today ; which is to say he didn't do gility at all which made humummy mad ; he just wanted to snif , sniff , sniffff bah
# ::tokens ["DaddyJ", "went", "gility", "comp", "today", ";", "which", "is", "to", "say", "he", "did", "n't", "do", "gility", "at", "all", "which", "made", "humummy", "mad", ";", "he", "just", "wanted", "to", "snif", ",", "sniff", ",", "sniffff", "bah"]
# ::lemmas ["daddyj", "go", "gility", "comp", "today", ";", "which", "be", "to", "say", "he", "do", "not", "do", "gility", "at", "all", "which", "make", "humummy", "mad", ";", "he", "just", "want", "to", "snif", ",", "sniff", ",", "sniffff", "bah"]
(c1-9 / multi-sentence
      :snt1 (c1-7 / go-01
                  :ARG1 (c1-22 / person
                               :name (c1-10 / name
                                            :op1 "DaddyJ"))
                  :ARG4 (c1-4 / comp
                              :mod (c1-15 / gility))
                  :time (c1-6 / today)
                  :ARG1-of (c1-17 / mean-01
                                  :ARG2 (c1-12 / say-01
                                               :ARG1 (c1-0 / do-02
                                                           :ARG0 c1-22
                                                           :ARG1 (c1-1 / gility)
                                                           :degree (c1-16 / at-all)
                                                           :ARG0-of (c1-14 / make-02
                                                                           :ARG1 (c1-8 / mad-04
                                                                                       :ARG1 (c1-18 / humummy)))
                                                           :polarity -))))
      :snt2 (c1-5 / want-01
                  :ARG0 (c1-2 / he)
                  :ARG1 (c1-11 / and
                               :op1 (c1-21 / snif)
                               :op2 (c1-13 / sniff-01)
                               :op3 (c1-3 / snif)
                               :op4 (c1-20 / bah
                                           :mode expressive))
                  :mod (c1-19 / just)))

# ::snt Oh dear perhaps he should be out workin instead
# ::tokens ["Oh", "dear", "perhaps", "he", "should", "be", "out", "workin", "instead"]
# ::lemmas ["oh", "dear", "perhaps", "he", "should", "be", "out", "workin", "instead"]
(c2-7 / possible-01
      :ARG1 (c2-6 / recommend-01
                  :ARG1 (c2-5 / out-06
                              :ARG1 (c2-3 / he)
                              :ARG2 (c2-2 / work-01
                                          :ARG0 c2-3)
                              :ARG1-of (c2-1 / instead-of-91)))
      :mod (c2-0 / dear
                 :mod (c2-4 / oh)
                 :mode expressive))
