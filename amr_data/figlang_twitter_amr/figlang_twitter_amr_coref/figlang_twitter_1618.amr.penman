# ::snt . Nobody here proposes a pure democracy . We need representatives .
# ::tokens [".", "Nobody", "here", "proposes", "a", "pure", "democracy", ".", "We", "need", "representatives", "."]
# ::lemmas [".", "nobody", "here", "propose", "a", "pure", "democracy", ".", "we", "need", "representative", "."]
(c1-8 / multi-sentence
      :snt1 (c1-7 / propose-01
                  :ARG0 (c1-9 / nobody)
                  :ARG1 (c1-0 / democracy
                              :ARG1-of (c1-4 / pure-02))
                  :location (c1-3 / here))
      :snt2 (c1-5 / need-01
                  :ARG0 (c1-1 / we)
                  :ARG1 (c1-2 / person
                              :ARG0-of (c1-6 / represent-01))))

# ::snt . Our st past post , winner takes all way virtually ensures parties .
# ::tokens [".", "Our", "st", "past", "post", ",", "winner", "takes", "all", "way", "virtually", "ensures", "parties", "."]
# ::lemmas [".", "our", "st", "past", "post", ",", "winner", "take", "all", "way", "virtually", "ensure", "party", "."]
(c2-8 / multi-sentence
      :snt1 (c2-7 / post-01
                  :ARG0 (c2-1 / we)
                  :time (c2-5 / past))
      :snt2 (c2-6 / take-01
                  :ARG0 (c2-3 / person
                              :ARG0-of (c2-9 / win-01))
                  :ARG1 (c2-10 / ensure-01
                               :ARG0 c2-3
                               :ARG1 (c2-2 / party)
                               :manner (c2-4 / virtual)
                               :extent (c2-0 / all-the-way))))

# ::snt If post was % then few elections would be valid .
# ::tokens ["If", "post", "was", "%", "then", "few", "elections", "would", "be", "valid", "."]
# ::lemmas ["if", "post", "be", "%", "then", "few", "election", "would", "be", "valid", "."]
(c3-1 / valid-02
      :ARG1 (c3-4 / elect-01
                  :quant (c3-0 / few))
      :condition (c3-3 / percentage-entity
                       :value (c3-2 / post)))

# ::snt b / c well established theory is always right ...
# ::tokens ["b", "/", "c", "well", "established", "theory", "is", "always", "right", "..."]
# ::lemmas ["b", "/", "c", "well", "establish", "theory", "be", "always", "right", "..."]
(c4-4 / right-06
      :ARG1 (c4-3 / theory
                  :ARG1-of (c4-6 / establish-01
                                 :manner (c4-2 / well)))
      :time (c4-0 / always)
      :ARG1-of (c4-1 / cause-01
                     :ARG0 (c4-5 / amr-unknown)))

# ::snt Until it isn't . Incorrect cliches are a problem , no ?
# ::tokens ["Until", "it", "is", "n't", ".", "Incorrect", "cliches", "are", "a", "problem", ",", "no", "?"]
# ::lemmas ["until", "it", "be", "not", ".", "incorrect", "cliche", "be", "a", "problem", ",", "no", "?"]
(c5-8 / multi-sentence
      :snt1 (c5-6 / be-temporally-at-91
                  :ARG1 (c5-7 / it)
                  :ARG2 (c5-3 / until
                              :op1 (c5-2 / have-polarity-91
                                         :ARG1 c5-7
                                         :ARG2 -))
                  :polarity -)
      :snt2 (c5-5 / problem
                  :domain (c5-1 / cliche
                                :ARG1-of (c5-0 / correct-02
                                               :polarity -))
                  :ARG1-of (c5-4 / request-confirmation-91)))

# ::snt . Every country like ours has this feature , Tim .
# ::tokens [".", "Every", "country", "like", "ours", "has", "this", "feature", ",", "Tim", "."]
# ::lemmas [".", "every", "country", "like", "ours", "have", "this", "feature", ",", "Tim", "."]
(c6-0 / say-01
      :ARG1 (c6-5 / have-03
                  :ARG0 (c6-3 / country
                              :mod (c6-10 / every)
                              :ARG1-of (c6-7 / resemble-01
                                             :ARG2 (c6-1 / country
                                                         :poss (c6-4 / we))))
                  :ARG1 (c6-2 / feature
                              :mod (c6-6 / this)))
      :ARG2 (c6-8 / person
                  :name (c6-9 / name
                              :op1 "Tim")))

# ::snt . Exceptions are minor . Party rule is near certain .
# ::tokens [".", "Exceptions", "are", "minor", ".", "Party", "rule", "is", "near", "certain", "."]
# ::lemmas [".", "exception", "be", "minor", ".", "party", "rule", "be", "near", "certain", "."]
(c7-5 / multi-sentence
      :snt1 (c7-1 / minor-01
                  :ARG1 (c7-2 / thing
                              :ARG1-of (c7-7 / exclude-01)))
      :snt2 (c7-0 / certain
                  :domain (c7-3 / rule-01
                                :ARG0 (c7-4 / party))
                  :degree (c7-6 / near)))
