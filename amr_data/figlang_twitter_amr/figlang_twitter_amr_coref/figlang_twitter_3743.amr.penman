# ::snt It s a good question , let s share resources ! <URL>
# ::tokens ["It", "s", "a", "good", "question", ",", "let", "s", "share", "resources", "!", "<", "URL", ">"]
# ::lemmas ["it", "s", "a", "good", "question", ",", "let", "s", "share", "resource", "!", "<", "URL", ">"]
(c1-1 / and
      :op1 (c1-2 / question
                 :ARG1-of (c1-5 / good-02)
                 :domain (c1-6 / it))
      :op2 (c1-0 / share-01
                 :ARG0 (c1-3 / we)
                 :ARG1 (c1-4 / resource)
                 :mode imperative))

# ::snt Honestly some great ones in the list above you tagged . Some others that come to mind right off
# ::tokens ["Honestly", "some", "great", "ones", "in", "the", "list", "above", "you", "tagged", ".", "Some", "others", "that", "come", "to", "mind", "right", "off"]
# ::lemmas ["honestly", "some", "great", "one", "in", "the", "list", "above", "you", "tag", ".", "some", "other", "that", "come", "to", "mind", "right", "off"]
(c2-11 / multi-sentence
       :snt1 (c2-6 / tag-01
                   :ARG0 (c2-12 / you)
                   :ARG1 (c2-5 / one
                               :mod (c2-9 / great)
                               :quant (c2-0 / some)
                               :location (c2-8 / list
                                               :location (c2-1 / above
                                                               :op1 (c2-13 / you))))
                   :ARG1-of (c2-3 / honest-01))
       :snt2 (c2-2 / come-to-mind-09
                   :ARG2 (c2-4 / other
                               :quant (c2-10 / some))
                   :time (c2-7 / right-off)))

# ::snt :If you re going that way , you can t leave out
# ::tokens [":", "If", "you", "re", "going", "that", "way", ",", "you", "can", "t", "leave", "out"]
# ::lemmas [":", "if", "you", "re", "go", "that", "way", ",", "you", "can", "t", "leave", "out"]
(c3-4 / possible-01
      :ARG1 (c3-2 / leave-out-03
                  :ARG0 (c3-5 / you))
      :condition (c3-3 / go-06
                       :ARG0 c3-5
                       :ARG1 (c3-0 / way
                                   :mod (c3-1 / that)))
      :polarity -)
