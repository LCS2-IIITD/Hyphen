# ::snt Also , he lost the popular vote so don't get too excited GB
# ::tokens ["Also", ",", "he", "lost", "the", "popular", "vote", "so", "do", "n't", "get", "too", "excited", "GB"]
# ::lemmas ["also", ",", "he", "lose", "the", "popular", "vote", "so", "do", "not", "get", "too", "excited", "GB"]
(c1-0 / say-01
      :ARG0 (c1-11 / i)
      :ARG1 (c1-2 / cause-01
                  :ARG0 (c1-7 / lose-03
                              :ARG0 (c1-3 / he)
                              :ARG1 (c1-4 / vote-01
                                          :ARG0 (c1-8 / populace))
                              :mod (c1-1 / also))
                  :ARG1 (c1-9 / get-03
                              :ARG1 (c1-5 / person
                                          :name (c1-12 / name
                                                       :op1 "GB"))
                              :ARG2 (c1-13 / excite-01
                                           :ARG0 c1-7
                                           :ARG1 c1-5
                                           :ARG2-of (c1-10 / have-degree-91
                                                           :ARG1 c1-7
                                                           :ARG3 (c1-6 / too)))
                              :polarity -
                              :mode imperative))
      :ARG2 c1-5)

# ::snt i see his popularity rising over next yrs as he gets things done for every citizen
# ::tokens ["i", "see", "his", "popularity", "rising", "over", "next", "yrs", "as", "he", "gets", "things", "done", "for", "every", "citizen"]
# ::lemmas ["i", "see", "his", "popularity", "rise", "over", "next", "yr", "as", "he", "get", "thing", "do", "for", "every", "citizen"]
(c2-0 / see-01
      :ARG0 (c2-10 / i)
      :ARG1 (c2-7 / rise-01
                  :ARG1 (c2-8 / popularity
                              :poss (c2-4 / he))
                  :time (c2-5 / over
                              :op1 (c2-11 / multiple
                                          :op1 (c2-6 / temporal-quantity
                                                     :unit (c2-12 / year)
                                                     :quant 1)))
                  :time (c2-9 / get-04
                              :ARG0 c2-4
                              :ARG1 (c2-1 / do-02
                                          :ARG0 c2-4
                                          :ARG1 (c2-3 / thing)
                                          :ARG2 (c2-2 / citizen
                                                      :mod (c2-13 / every))))))
