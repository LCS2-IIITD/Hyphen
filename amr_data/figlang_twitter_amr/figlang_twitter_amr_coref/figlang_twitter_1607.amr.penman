# ::snt if they're beliefs are hateful and hurting , would you want to feel unsafe at work ... ? Just a thought
# ::tokens ["if", "they", "'re", "beliefs", "are", "hateful", "and", "hurting", ",", "would", "you", "want", "to", "feel", "unsafe", "at", "work", "...", "?", "Just", "a", "thought"]
# ::lemmas ["if", "they", "be", "belief", "be", "hateful", "and", "hurt", ",", "would", "you", "want", "to", "feel", "unsafe", "at", "work", "...", "?", "just", "a", "thought"]
(c1-14 / multi-sentence
       :snt1 (c1-8 / have-condition-91
                   :ARG1 (c1-6 / want-01
                               :ARG0 (c1-15 / you)
                               :ARG1 (c1-4 / feel-01
                                           :ARG0 c1-15
                                           :ARG1 (c1-0 / safe-01
                                                       :ARG1 c1-15
                                                       :polarity -)
                                           :location (c1-16 / work))
                               :polarity (c1-3 / amr-unknown))
                   :ARG2 (c1-9 / and
                               :op1 (c1-13 / hate-01
                                           :ARG0 (c1-10 / thing
                                                        :ARG1-of (c1-12 / believe-01
                                                                        :ARG0 (c1-7 / they
                                                                                    :ARG1-of c1-13))))
                               :op2 (c1-1 / hurt-01
                                          :ARG0 c1-10))
                   :polarity (c1-2 / amr-unknown))
       :snt2 c1-10
       :ARG1-of (c1-5 / think-01)
       :mod (c1-11 / just))

# ::snt do you work at grubhub ? Unless you do please don't say anything about the workplace
# ::tokens ["do", "you", "work", "at", "grubhub", "?", "Unless", "you", "do", "please", "do", "n't", "say", "anything", "about", "the", "workplace"]
# ::lemmas ["do", "you", "work", "at", "grubhub", "?", "unless", "you", "do", "please", "do", "not", "say", "anything", "about", "the", "workplace"]
(c2-7 / multi-sentence
      :snt1 (c2-4 / work-01
                  :ARG0 (c2-9 / you)
                  :ARG2 (c2-3 / company
                              :name (c2-8 / name
                                          :op1 "Grubhub"))
                  :polarity (c2-2 / amr-unknown))
      :snt2 (c2-0 / say-01
                  :ARG0 (c2-10 / you)
                  :ARG1 (c2-6 / anything
                              :topic (c2-5 / workplace))
                  :condition (c2-1 / do-02
                                   :ARG0 c2-10
                                   :polarity -)
                  :polite +
                  :mode imperative))

# ::snt bc if there was it would've been told . Wake up
# ::tokens ["bc", "if", "there", "was", "it", "would", "'ve", "been", "told", ".", "Wake", "up"]
# ::lemmas ["bc", "if", "there", "be", "it", "would", "'ve", "be", "tell", ".", "wake", "up"]
(c3-4 / multi-sentence
      :snt1 (c3-1 / tell-01
                  :ARG1 (c3-3 / it)
                  :ARG2 (c3-2 / publication
                              :name (c3-5 / name
                                          :op1 "bc"))
                  :condition (c3-7 / exist-01
                                   :ARG1 c3-3))
      :snt2 (c3-0 / wake-up-02
                  :ARG0 (c3-6 / you
                              :ARG1-of c3-0)
                  :mode imperative))

# ::snt yeah we saw what Hillary did to Willy's victims
# ::tokens ["yeah", "we", "saw", "what", "Hillary", "did", "to", "Willy", "'s", "victims"]
# ::lemmas ["yeah", "we", "see", "what", "Hillary", "do", "to", "Willy", "'s", "victim"]
(c4-0 / see-01
      :ARG0 (c4-2 / we)
      :ARG1 (c4-5 / thing
                  :ARG1-of (c4-1 / do-02
                                 :ARG0 (c4-7 / person
                                             :name (c4-8 / name
                                                         :op1 "Hillary"))
                                 :ARG2 (c4-3 / victim
                                             :poss (c4-4 / person
                                                         :name (c4-6 / name
                                                                     :op1 "Willy")))))
      :mod (c4-9 / yeah
                 :mode expressive))
