# ::snt VOTER FRAUD WATCH Obama tell illegals they can vote . Sorry but he did ! <URL>
# ::tokens ["VOTER", "FRAUD", "WATCH", "Obama", "tell", "illegals", "they", "can", "vote", ".", "Sorry", "but", "he", "did", "!", "<", "URL", ">"]
# ::lemmas ["VOTER", "FRAUD", "WATCH", "Obama", "tell", "illegal", "they", "can", "vote", ".", "sorry", "but", "he", "do", "!", "<", "URL", ">"]
(c1-13 / multi-sentence
       :snt1 (c1-4 / watch-01
                   :ARG0 (c1-12 / person
                                :ARG0-of (c1-8 / vote-01))
                   :ARG1 (c1-10 / tell-01
                                :ARG0 (c1-9 / person
                                            :name (c1-14 / name
                                                         :op1 "Obama"))
                                :ARG1 (c1-6 / possible-01
                                            :ARG1 (c1-2 / vote-01
                                                        :ARG0 (c1-5 / person
                                                                    :ARG1-of (c1-11 / legal-02
                                                                                    :polarity -)
                                                                    :ARG2-of c1-10))))
                   :snt2 (c1-3 / contrast-01
                               :ARG1 (c1-0 / sorry-01
                                           :ARG1 (c1-7 / i))
                               :ARG2 (c1-1 / do-02
                                           :ARG0 c1-9))))

# ::snt is so corrupt - that host literally trying to mock them while trying to " alter the <URL>
# ::tokens ["is", "so", "corrupt", "-", "that", "host", "literally", "trying", "to", "mock", "them", "while", "trying", "to", "\"", "alter", "the", "<", "URL", ">"]
# ::lemmas ["be", "so", "corrupt", "-", "that", "host", "literally", "try", "to", "mock", "they", "while", "try", "to", "\"", "alter", "the", "<", "URL", ">"]
(c2-4 / have-degree-91
      :ARG2 (c2-2 / corrupt-01)
      :ARG3 (c2-0 / so)
      :ARG6 (c2-6 / try-01
                  :ARG0 (c2-9 / person
                              :ARG0-of (c2-8 / host-01))
                  :ARG1 (c2-10 / mock-01
                               :ARG0 c2-9
                               :ARG1 (c2-3 / they))
                  :time (c2-11 / try-01
                               :ARG0 c2-9
                               :ARG1 (c2-1 / alter-01
                                           :ARG0 c2-9
                                           :ARG1 (c2-5 / url-entity)))
                  :manner (c2-7 / literal)))

# ::snt Extraordinary claims require extraordinary evidence . People are often swayed by what feel to be true
# ::tokens ["Extraordinary", "claims", "require", "extraordinary", "evidence", ".", "People", "are", "often", "swayed", "by", "what", "feel", "to", "be", "true"]
# ::lemmas ["extraordinary", "claim", "require", "extraordinary", "evidence", ".", "people", "be", "often", "sway", "by", "what", "feel", "to", "be", "true"]
(c3-10 / multi-sentence
       :snt1 (c3-8 / require-01
                   :ARG0 (c3-2 / claim-01
                               :mod (c3-11 / extraordinary))
                   :ARG1 (c3-4 / evidence-01
                               :mod (c3-5 / extraordinary)))
       :snt2 (c3-0 / sway-02
                   :ARG0 (c3-7 / thing
                               :ARG1-of (c3-3 / true-01
                                              :ARG1-of (c3-1 / feel-02
                                                             :ARG0 (c3-9 / person
                                                                         :ARG1-of c3-0))))
                   :frequency (c3-6 / often)))

# ::snt Claiming that there is voter fraud is most definitely not an extraordinary claim .
# ::tokens ["Claiming", "that", "there", "is", "voter", "fraud", "is", "most", "definitely", "not", "an", "extraordinary", "claim", "."]
# ::lemmas ["claim", "that", "there", "be", "voter", "fraud", "be", "most", "definitely", "not", "an", "extraordinary", "claim", "."]
(c4-1 / claim-01
      :ARG1 (c4-0 / defraud-01
                  :ARG0 (c4-5 / person
                              :ARG0-of (c4-4 / vote-01)))
      :mod (c4-7 / extraordinary
                 :mod (c4-2 / definite
                            :ARG2-of (c4-3 / have-degree-91
                                           :ARG1 c4-1
                                           :ARG3 (c4-6 / most)))
                 :polarity -))

# ::snt Millions ? And enough to sway the popular vote ? That's the embodiment of extraordinary
# ::tokens ["Millions", "?", "And", "enough", "to", "sway", "the", "popular", "vote", "?", "That", "'s", "the", "embodiment", "of", "extraordinary"]
# ::lemmas ["million", "?", "and", "enough", "to", "sway", "the", "popular", "vote", "?", "that", "be", "the", "embodiment", "of", "extraordinary"]
(c5-10 / multi-sentence
       :snt1 (c5-3 / multiple
                   :op1 1000000)
       :snt2 (c5-2 / and
                   :op2 (c5-4 / have-quant-91
                              :ARG3 (c5-12 / enough)
                              :ARG6 (c5-0 / sway-02
                                          :ARG1 (c5-7 / vote-01
                                                      :ARG0 (c5-9 / populace))))
                   :polarity (c5-11 / amr-unknown))
       :snt3 (c5-5 / embody-01
                   :ARG1 (c5-8 / that)
                   :ARG2 (c5-6 / extraordinary)
                   :polarity (c5-1 / amr-unknown)))

# ::snt Don't get hung up on popular vote . Neither Hillary , nor DJT , <URL>
# ::tokens ["Do", "n't", "get", "hung", "up", "on", "popular", "vote", ".", "Neither", "Hillary", ",", "nor", "DJT", ",", "<", "URL", ">"]
# ::lemmas ["do", "not", "get", "hang", "up", "on", "popular", "vote", ".", "neither", "Hillary", ",", "nor", "DJT", ",", "<", "URL", ">"]
(c6-7 / multi-sentence
      :snt1 (c6-1 / hang-up-06
                  :ARG1 (c6-9 / you)
                  :ARG2 (c6-2 / vote-01
                              :ARG0 (c6-6 / populace))
                  :polarity -
                  :mode imperative)
      :snt2 (c6-8 / nor
                  :op1 (c6-4 / person
                             :name (c6-5 / name
                                         :op1 "Hillary"))
                  :op2 (c6-0 / person
                             :name (c6-3 / name
                                         :op1 "DjT"))))
