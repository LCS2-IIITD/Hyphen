# ::snt The reason we have these is that businesses realized it was the fair , honorable and decent thing to do
# ::tokens ["The", "reason", "we", "have", "these", "is", "that", "businesses", "realized", "it", "was", "the", "fair", ",", "honorable", "and", "decent", "thing", "to", "do"]
# ::lemmas ["the", "reason", "we", "have", "these", "be", "that", "business", "realize", "it", "be", "the", "fair", ",", "honorable", "and", "decent", "thing", "to", "do"]
(c1-2 / cause-01
      :ARG0 (c1-7 / realize-01
                  :ARG0 (c1-8 / business)
                  :ARG1 (c1-6 / thing
                              :ARG1-of (c1-1 / fair-01)
                              :ARG1-of (c1-5 / honorable-03)
                              :mod (c1-0 / decent)
                              :ARG1-of (c1-10 / do-02)))
      :ARG1 (c1-9 / have-03
                  :ARG0 (c1-3 / we)
                  :ARG1 (c1-4 / this)))

# ::snt Business never gave anything without pressure from workers and Unions to negotiate better pay , conditions
# ::tokens ["Business", "never", "gave", "anything", "without", "pressure", "from", "workers", "and", "Unions", "to", "negotiate", "better", "pay", ",", "conditions"]
# ::lemmas ["business", "never", "give", "anything", "without", "pressure", "from", "worker", "and", "Unions", "to", "negotiate", "well", "pay", ",", "condition"]
(c2-9 / give-01
      :ARG0 (c2-12 / business)
      :ARG1 (c2-1 / anything)
      :time (c2-15 / ever)
      :manner (c2-10 / pressure-01
                     :ARG0 (c2-14 / and
                                  :op1 (c2-7 / person
                                             :ARG0-of (c2-3 / work-01))
                                  :op2 (c2-6 / union))
                     :ARG1 c2-12
                     :ARG2 (c2-8 / negotiate-01
                                 :ARG0 c2-12
                                 :ARG2 (c2-0 / and
                                             :op1 (c2-4 / pay-01
                                                        :ARG1-of (c2-5 / have-degree-91
                                                                       :ARG2 (c2-13 / good-02
                                                                                    :ARG1 c2-4)
                                                                       :ARG3 (c2-11 / more)))
                                             :op2 (c2-2 / condition)))
                     :polarity -)
      :polarity -)

# ::snt . I've discovered that the only way to reliably convey sarcasm on twitter is with the hashtag
# ::tokens [".", "I", "'ve", "discovered", "that", "the", "only", "way", "to", "reliably", "convey", "sarcasm", "on", "twitter", "is", "with", "the", "hashtag"]
# ::lemmas [".", "i", "'ve", "discover", "that", "the", "only", "way", "to", "reliably", "convey", "sarcasm", "on", "twitter", "be", "with", "the", "hashtag"]
(c3-0 / discover-01
      :ARG0 (c3-9 / i)
      :ARG1 (c3-4 / way
                  :mod (c3-6 / only)
                  :manner-of (c3-3 / convey-01
                                   :ARG1 (c3-1 / sarcasm)
                                   :medium (c3-8 / publication
                                                 :name (c3-10 / name
                                                              :op1 "Twitter"))
                                   :ARG1-of (c3-7 / possible-01)
                                   :manner (c3-2 / consistent-02))
                  :domain (c3-5 / hashtag)))

# ::snt if you can ignore the soft bigotry of emoji , this can work well
# ::tokens ["if", "you", "can", "ignore", "the", "soft", "bigotry", "of", "emoji", ",", "this", "can", "work", "well"]
# ::lemmas ["if", "you", "can", "ignore", "the", "soft", "bigotry", "of", "emoji", ",", "this", "can", "work", "well"]
(c4-6 / possible-01
      :ARG1 (c4-2 / work-09
                  :ARG1 (c4-4 / this)
                  :ARG1-of (c4-8 / well-09))
      :condition (c4-3 / possible-01
                       :ARG1 (c4-1 / ignore-01
                                   :ARG0 (c4-7 / you)
                                   :ARG1 (c4-5 / bigotry
                                               :ARG1-of (c4-0 / soft-02)
                                               :poss (c4-9 / emojis)))))

# ::snt I like my sarcasm to be like raw alcohol on an open wound . I did realise that some people wouldn't get it
# ::tokens ["I", "like", "my", "sarcasm", "to", "be", "like", "raw", "alcohol", "on", "an", "open", "wound", ".", "I", "did", "realise", "that", "some", "people", "would", "n't", "get", "it"]
# ::lemmas ["i", "like", "my", "sarcasm", "to", "be", "like", "raw", "alcohol", "on", "an", "open", "wound", ".", "i", "do", "realise", "that", "some", "people", "would", "not", "get", "it"]
(c5-14 / multi-sentence
       :snt1 (c5-9 / like-01
                   :ARG0 (c5-13 / i)
                   :ARG1 (c5-0 / sarcasm
                               :poss c5-13
                               :ARG1-of (c5-8 / resemble-01
                                              :ARG2 (c5-2 / alcohol
                                                          :mod (c5-6 / raw)
                                                          :location (c5-3 / wound
                                                                          :ARG1-of (c5-7 / open-01))))))
       :snt2 (c5-11 / realize-01
                    :ARG0 (c5-4 / i)
                    :ARG1 (c5-10 / get-01
                                 :ARG0 (c5-12 / person
                                              :mod (c5-1 / some))
                                 :ARG1 (c5-5 / sarcasm
                                             :poss c5-4)
                                 :polarity -)))

# ::snt For sarcasm to work , it first must be perceived - Jillpoll's law .
# ::tokens ["For", "sarcasm", "to", "work", ",", "it", "first", "must", "be", "perceived", "-", "Jillpoll", "'s", "law", "."]
# ::lemmas ["for", "sarcasm", "to", "work", ",", "it", "first", "must", "be", "perceive", "-", "Jillpoll", "'s", "law", "."]
(c6-3 / obligate-01
      :ARG2 (c6-6 / perceive-01
                  :ARG1 (c6-0 / sarcasm)
                  :ord (c6-2 / ordinal-entity
                             :value 1))
      :purpose (c6-1 / work-09
                     :ARG1 c6-0)
      :ARG1-of (c6-7 / mean-01
                     :ARG2 (c6-5 / law
                                 :poss (c6-4 / person
                                             :name (c6-8 / name
                                                         :op1 "Jillpoll")))))
