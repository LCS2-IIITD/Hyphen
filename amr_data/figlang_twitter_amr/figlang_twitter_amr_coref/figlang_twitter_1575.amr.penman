# ::snt more nonsense . Anyone can drive to Florida and witness a launch and re-entry live . Paranoid much ?
# ::tokens ["more", "nonsense", ".", "Anyone", "can", "drive", "to", "Florida", "and", "witness", "a", "launch", "and", "re", "-", "entry", "live", ".", "Paranoid", "much", "?"]
# ::lemmas ["more", "nonsense", ".", "anyone", "can", "drive", "to", "Florida", "and", "witness", "a", "launch", "and", "re", "-", "entry", "live", ".", "paranoid", "much", "?"]
(c1-14 / multi-sentence
       :snt1 (c1-0 / sense-02
                   :mod (c1-4 / more)
                   :polarity -)
       :snt2 (c1-13 / possible-01
                    :ARG1 (c1-3 / and
                                :op1 (c1-1 / drive-01
                                           :ARG0 (c1-16 / anyone)
                                           :destination (c1-12 / state
                                                               :name (c1-15 / name
                                                                            :op1 "Florida")))
                                :op2 (c1-5 / witness-01
                                           :ARG0 c1-16
                                           :ARG1 (c1-2 / and
                                                       :op1 (c1-10 / launch-01)
                                                       :op2 (c1-9 / reenter-01))
                                           :manner (c1-11 / live))))
       :snt3 (c1-8 / Paranoid
                   :degree (c1-6 / much)
                   :polarity (c1-7 / amr-unknown)))

# ::snt Did U ever watch a re-entry landing live ? If so , I'll watch that video . I don't want elon's fake video .
# ::tokens ["Did", "U", "ever", "watch", "a", "re", "-", "entry", "landing", "live", "?", "If", "so", ",", "I", "'ll", "watch", "that", "video", ".", "I", "do", "n't", "want", "elon", "'s", "fake", "video", "."]
# ::lemmas ["do", "u", "ever", "watch", "a", "re", "-", "entry", "landing", "live", "?", "if", "so", ",", "i", "'ll", "watch", "that", "video", ".", "i", "do", "not", "want", "elon", "'s", "fake", "video", "."]
(c2-7 / multi-sentence
      :snt1 (c2-3 / watch-01
                  :polarity (c2-14 / amr-unknown)
                  :ARG0 (c2-13 / you)
                  :ARG1 (c2-17 / land-01
                               :manner (c2-6 / reenter-01))
                  :time (c2-10 / ever)
                  :manner (c2-0 / live))
      :snt2 (c2-9 / watch-01
                  :ARG0 (c2-2 / i)
                  :ARG1 (c2-4 / video
                              :mod (c2-5 / that))
                  :condition (c2-11 / so))
      :snt3 (c2-1 / want-01
                  :ARG0 (c2-12 / i)
                  :ARG1 (c2-15 / video
                               :ARG1-of (c2-16 / fake-02)
                               :poss (c2-18 / person
                                            :name (c2-8 / name
                                                        :op1 "Elon")))
                  :polarity -))

# ::snt the ' s called they want their search engine back . See who goes to nearly every launch
# ::tokens ["the", "'", "s", "called", "they", "want", "their", "search", "engine", "back", ".", "See", "who", "goes", "to", "nearly", "every", "launch"]
# ::lemmas ["the", "'", "s", "call", "they", "want", "their", "search", "engine", "back", ".", "see", "who", "go", "to", "nearly", "every", "launch"]
(c3-10 / multi-sentence
       :snt1 (c3-2 / want-01
                   :ARG0 (c3-4 / they
                               :ARG1-of (c3-1 / call-01
                                              :ARG2 (c3-3 / they)))
                   :ARG1 (c3-7 / back-02
                               :ARG1 (c3-0 / search-engine
                                           :poss c3-4)))
       :snt2 (c3-8 / see-01
                   :ARG0 (c3-12 / you)
                   :ARG1 (c3-9 / person
                               :ARG0-of (c3-5 / go-02
                                              :ARG4 (c3-6 / launch-01
                                                          :mod (c3-13 / every
                                                                      :degree (c3-11 / near)))))
                   :mode imperative))

# ::snt Rockets are launched up , they go horizontal , then down into the ocean . Every time .
# ::tokens ["Rockets", "are", "launched", "up", ",", "they", "go", "horizontal", ",", "then", "down", "into", "the", "ocean", ".", "Every", "time", "."]
# ::lemmas ["rocket", "be", "launch", "up", ",", "they", "go", "horizontal", ",", "then", "down", "into", "the", "ocean", ".", "every", "time", "."]
(c4-1 / and
      :op1 (c4-8 / launch-01
                 :ARG1 (c4-7 / rocket)
                 :direction (c4-4 / up))
      :op2 (c4-9 / go-01
                 :ARG1 c4-7
                 :ARG4 (c4-3 / horizontal))
      :op3 (c4-0 / down-03
                 :ARG1 c4-7
                 :location (c4-5 / ocean)
                 :time (c4-6 / then))
      :frequency (c4-2 / time
                       :mod (c4-10 / every)))

# ::snt No , they go horizontal and then around the curve of the earth . U lack d spacial understanding
# ::tokens ["No", ",", "they", "go", "horizontal", "and", "then", "around", "the", "curve", "of", "the", "earth", ".", "U", "lack", "d", "spacial", "understanding"]
# ::lemmas ["no", ",", "they", "go", "horizontal", "and", "then", "around", "the", "curve", "of", "the", "earth", ".", "u", "lack", "d", "spacial", "understanding"]
(c5-10 / multi-sentence
       :snt1 (c5-1 / and
                   :op1 (c5-8 / go-01
                              :ARG1 (c5-6 / they)
                              :ARG4 (c5-4 / horizontal))
                   :op2 (c5-13 / around
                               :op1 (c5-2 / curve-01
                                          :ARG1 (c5-9 / planet
                                                      :name (c5-11 / name
                                                                   :op1 "Earth")))
                               :time (c5-3 / then)))
       :snt2 (c5-7 / lack-01
                   :ARG0 (c5-0 / country
                               :name c5-11
                               :op1 "U"))
       :ARG1 (c5-5 / understand-01
                   :mod (c5-12 / globe)))

# ::snt That's the lie space agencies would like you to believe . You are a gullible one . Hahahaha
# ::tokens ["That", "'s", "the", "lie", "space", "agencies", "would", "like", "you", "to", "believe", ".", "You", "are", "a", "gullible", "one", ".", "Hahahaha"]
# ::lemmas ["that", "be", "the", "lie", "space", "agency", "would", "like", "you", "to", "believe", ".", "you", "be", "a", "gullible", "one", ".", "Hahahaha"]
(c6-8 / multi-sentence
      :snt1 (c6-4 / like-02
                  :ARG0 (c6-1 / agency
                              :mod (c6-0 / space))
                  :ARG1 (c6-6 / believe-01
                              :ARG0 (c6-9 / you)
                              :ARG1 (c6-5 / lie-08
                                          :ARG1 (c6-3 / that))))
      :snt2 (c6-7 / gullible
                  :domain (c6-10 / you))
      :snt3 (c6-2 / haha
                  :mode expressive))

# ::snt so NASA wants me believe people go Florida , which anyone is free do . Please keep talking
# ::tokens ["so", "NASA", "wants", "me", "believe", "people", "go", "Florida", ",", "which", "anyone", "is", "free", "do", ".", "Please", "keep", "talking"]
# ::lemmas ["so", "NASA", "want", "i", "believe", "people", "go", "Florida", ",", "which", "anyone", "be", "free", "do", ".", "please", "keep", "talk"]
(c7-13 / multi-sentence
       :snt1 (c7-5 / want-01
                   :ARG0 (c7-7 / research-institute
                               :name (c7-14 / name
                                            :op1 "NASA"))
                   :ARG1 (c7-10 / believe-01
                                :ARG0 (c7-12 / i)
                                :ARG1 (c7-8 / go-02
                                            :ARG0 (c7-9 / person)
                                            :ARG4 (c7-0 / state
                                                        :name (c7-11 / name
                                                                     :op1 "Florida"))
                                            :ARG1-of (c7-1 / do-02
                                                           :ARG0 (c7-2 / anyone)
                                                           :ARG1-of (c7-4 / free-04)))))
       :snt2 (c7-3 / keep-02
                   :ARG0 (c7-15 / you)
                   :ARG1 (c7-6 / talk-01
                               :ARG0 c7-15)
                   :mode imperative
                   :polite +))

# ::snt Show me launch video that goes from ground to space w / single camera view . I'll watch that for sure .
# ::tokens ["Show", "me", "launch", "video", "that", "goes", "from", "ground", "to", "space", "w", "/", "single", "camera", "view", ".", "I", "'ll", "watch", "that", "for", "sure", "."]
# ::lemmas ["show", "i", "launch", "video", "that", "go", "from", "ground", "to", "space", "w", "/", "single", "camera", "view", ".", "i", "'ll", "watch", "that", "for", "sure", "."]
(c8-14 / multi-sentence
       :snt1 (c8-0 / show-01
                   :ARG0 (c8-15 / you)
                   :ARG1 (c8-7 / video
                               :ARG0-of (c8-10 / launch-01)
                               :ARG1-of (c8-11 / go-01
                                               :ARG3 (c8-1 / ground)
                                               :ARG4 (c8-12 / space)
                                               :manner (c8-2 / view-01
                                                             :ARG1 (c8-3 / camera
                                                                         :ARG1-of (c8-6 / single-02)))))
                   :ARG2 (c8-13 / i)
                   :mode imperative)
       :snt2 (c8-4 / watch-01
                   :ARG0 (c8-5 / i)
                   :ARG1 (c8-8 / that)
                   :ARG1-of (c8-9 / sure-02
                                  :ARG0 c8-5)))

# ::snt At :47 , switches cameras multiple times in seconds . - :56 images get all pixelated so it shows nothing . Gullible .
# ::tokens ["At", ":", "47", ",", "switches", "cameras", "multiple", "times", "in", "seconds", ".", "-", ":", "56", "images", "get", "all", "pixelated", "so", "it", "shows", "nothing", ".", "Gullible", "."]
# ::lemmas ["at", ":", "47", ",", "switch", "camera", "multiple", "time", "in", "seconds", ".", "-", ":", "56", "image", "get", "all", "pixelate", "so", "it", "show", "nothing", ".", "Gullible", "."]
(c9-13 / multi-sentence
       :snt1 (c9-0 / switch-01
                   :ARG1 (c9-4 / camera)
                   :frequency (c9-9 / rate-entity-91
                                    :ARG1 (c9-3 / multiple)
                                    :ARG2 (c9-8 / temporal-quantity
                                                :unit (c9-11 / second)
                                                :quant 1)))
       :snt2 (c9-12 / pixelate-01
                    :ARG1 (c9-5 / image
                                :mod (c9-2 / all))
                    :ARG0-of (c9-1 / cause-01
                                   :ARG1 (c9-7 / show-01
                                               :ARG0 (c9-6 / it)
                                               :ARG1 (c9-14 / nothing))))
       :snt3 (c9-10 / gullible))

# ::snt there is no amount of evidence that can convince you . I challenge to produce CGI this realistic .
# ::tokens ["there", "is", "no", "amount", "of", "evidence", "that", "can", "convince", "you", ".", "I", "challenge", "to", "produce", "CGI", "this", "realistic", "."]
# ::lemmas ["there", "be", "no", "amount", "of", "evidence", "that", "can", "convince", "you", ".", "i", "challenge", "to", "produce", "CGI", "this", "realistic", "."]
(c10-9 / multi-sentence
       :snt1 (c10-1 / amount
                    :quant-of (c10-12 / evidence-01
                                      :ARG0-of (c10-2 / convince-01
                                                      :ARG1 (c10-11 / you)
                                                      :ARG1-of (c10-8 / possible-01)))
                    :polarity -)
       :snt2 (c10-0 / challenge-01
                    :ARG0 (c10-3 / i)
                    :ARG2 (c10-5 / produce-01
                                 :ARG0 c10-3
                                 :ARG1 (c10-7 / realistic-03
                                              :ARG1 (c10-4 / product
                                                           :name (c10-10 / name
                                                                         :op1 "CGI"))
                                              :degree (c10-6 / this)))))

# ::snt You've seen the film Gravity , right ? Or did you think that was real . lmao
# ::tokens ["You", "'ve", "seen", "the", "film", "Gravity", ",", "right", "?", "Or", "did", "you", "think", "that", "was", "real", ".", "lmao"]
# ::lemmas ["you", "'ve", "see", "the", "film", "gravity", ",", "right", "?", "or", "do", "you", "think", "that", "be", "real", ".", "lmao"]
(c11-11 / multi-sentence
        :snt1 (c11-7 / request-confirmation-91
                     :ARG1 (c11-0 / see-01
                                  :ARG0 (c11-13 / you)
                                  :ARG1 (c11-2 / film
                                               :name (c11-12 / name
                                                             :op1 "Gravity")))
                     :ARG2 c11-13)
        :snt2 (c11-5 / or
                     :op2 (c11-6 / think-01
                                 :ARG0 (c11-14 / you)
                                 :ARG1 (c11-4 / real-04
                                              :ARG1 (c11-3 / that))
                                 :polarity (c11-1 / amr-unknown)))
        :snt3 (c11-8 / laugh-01
                     :ARG0 (c11-10 / i)
                     :manner (c11-9 / loud)
                     :mode expressive))

# ::snt again I challenge to produce CGI that is so realistic that scientist actually use it as data . Like
# ::tokens ["again", "I", "challenge", "to", "produce", "CGI", "that", "is", "so", "realistic", "that", "scientist", "actually", "use", "it", "as", "data", ".", "Like"]
# ::lemmas ["again", "i", "challenge", "to", "produce", "CGI", "that", "be", "so", "realistic", "that", "scientist", "actually", "use", "it", "as", "datum", ".", "like"]
(c12-3 / challenge-01
       :ARG0 (c12-10 / i)
       :ARG1 (c12-8 / produce-01
                    :ARG0 c12-10
                    :ARG1 (c12-4 / have-degree-91
                                 :ARG1 (c12-6 / thing
                                              :name (c12-11 / name
                                                            :op1 "CGI"))
                                 :ARG2 (c12-7 / realistic-03
                                              :ARG1 c12-6)
                                 :ARG3 (c12-0 / so)
                                 :ARG6 (c12-5 / use-01
                                              :ARG0 (c12-9 / scientist)
                                              :ARG1 c12-6
                                              :ARG2 (c12-1 / data)
                                              :ARG1-of (c12-2 / actual-02))))
       :mod (c12-12 / again))

# ::snt give me NASA's budget and I'll show the real thing , not crap CGI Wakey wakey
# ::tokens ["give", "me", "NASA", "'s", "budget", "and", "I", "'ll", "show", "the", "real", "thing", ",", "not", "crap", "CGI", "Wakey", "wakey"]
# ::lemmas ["give", "i", "NASA", "'s", "budget", "and", "i", "'ll", "show", "the", "real", "thing", ",", "not", "crap", "CGI", "Wakey", "wakey"]
(c13-2 / and
       :op1 (c13-10 / give-01
                    :ARG0 (c13-14 / you)
                    :ARG1 (c13-13 / budget-01
                                  :ARG0 (c13-7 / research-institute
                                               :name (c13-12 / name
                                                             :op1 "NASA")))
                    :ARG2 (c13-3 / i)
                    :mode imperative)
       :op2 (c13-4 / contrast-01
                   :ARG1 (c13-0 / show-01
                                :ARG0 c13-3
                                :ARG1 (c13-6 / thing
                                             :ARG1-of (c13-5 / real-04)))
                   :ARG2 (c13-11 / show-01
                                 :ARG0 c13-3
                                 :ARG1 (c13-8 / person
                                              :name (c13-9 / name
                                                           :op1 "Wakey"
                                                           :op2 "Wakey")
                                              :ARG1-of (c13-1 / crap-01))
                                 :polarity -)))

# ::snt how do you suppose would clone the data stream from given an unlimited budget ?
# ::tokens ["how", "do", "you", "suppose", "would", "clone", "the", "data", "stream", "from", "given", "an", "unlimited", "budget", "?"]
# ::lemmas ["how", "do", "you", "suppose", "would", "clone", "the", "data", "stream", "from", "give", "an", "unlimited", "budget", "?"]
(c14-0 / suppose-01
       :ARG0 (c14-7 / you)
       :ARG1 (c14-3 / clone-01
                    :ARG0 (c14-2 / amr-unknown)
                    :ARG1 (c14-6 / stream
                                 :mod (c14-1 / data))
                    :source (c14-5 / budget
                                   :ARG1-of (c14-4 / limit-01
                                                   :polarity -))))

# ::snt This data is not coming from a satellite in space . I don't know how else to explain it . Do your own research
# ::tokens ["This", "data", "is", "not", "coming", "from", "a", "satellite", "in", "space", ".", "I", "do", "n't", "know", "how", "else", "to", "explain", "it", ".", "Do", "your", "own", "research"]
# ::lemmas ["this", "data", "be", "not", "come", "from", "a", "satellite", "in", "space", ".", "i", "do", "not", "know", "how", "else", "to", "explain", "it", ".", "do", "your", "own", "research"]
(c15-9 / multi-sentence
       :snt1 (c15-2 / come-03
                    :ARG1 (c15-0 / data
                                 :mod (c15-5 / this))
                    :ARG2 (c15-1 / satellite
                                 :location (c15-7 / space))
                    :polarity -)
       :snt2 (c15-10 / know-01
                     :ARG0 (c15-8 / i)
                     :ARG1 (c15-3 / thing
                                  :manner-of (c15-12 / explain-01
                                                     :ARG0 c15-8
                                                     :ARG1 c15-0))
                     :polarity -)
       :snt3 (c15-4 / do-02
                    :ARG0 (c15-11 / you)
                    :ARG1 (c15-6 / research-01
                                 :ARG0 c15-11)
                    :mode imperative))

# ::snt " do your own research " what beauty there is in this meme . Garnished with irony accentuate hints of
# ::tokens ["\"", "do", "your", "own", "research", "\"", "what", "beauty", "there", "is", "in", "this", "meme", ".", "Garnished", "with", "irony", "accentuate", "hints", "of"]
# ::lemmas ["\"", "do", "your", "own", "research", "\"", "what", "beauty", "there", "be", "in", "this", "meme", ".", "garnish", "with", "irony", "accentuate", "hint", "of"]
(c16-9 / multi-sentence
       :snt1 (c16-5 / research-01
                    :ARG0 (c16-10 / you)
                    :ARG1 (c16-4 / thing
                                 :domain (c16-7 / beauty
                                                :location (c16-1 / meme
                                                                 :mod (c16-2 / this))))
                    :mode imperative)
       :snt2 (c16-0 / accentuate-01
                    :ARG0 (c16-6 / Garnish-01
                                 :manner (c16-8 / irony))
                    :ARG1 (c16-3 / hint-01)))

# ::snt Seriously , you're ' Soundly ' asleep , I wouldn't know how to wake you up . Beyond caring bth
# ::tokens ["Seriously", ",", "you", "'re", "'", "Soundly", "'", "asleep", ",", "I", "would", "n't", "know", "how", "to", "wake", "you", "up", ".", "Beyond", "caring", "bth"]
# ::lemmas ["seriously", ",", "you", "be", "'", "soundly", "'", "asleep", ",", "i", "would", "not", "know", "how", "to", "wake", "you", "up", ".", "beyond", "care", "bth"]
(c17-9 / multi-sentence
       :snt1 (c17-0 / sleep-01
                    :ARG0 (c17-11 / you)
                    :manner (c17-7 / sound)
                    :ARG2-of (c17-4 / serious-01)
                    :ARG1-of (c17-10 / know-01
                                     :ARG0 (c17-8 / i)
                                     :ARG1 (c17-5 / thing
                                                  :manner-of (c17-3 / wake-up-02
                                                                    :ARG1 c17-11))
                                     :polarity -))
       :snt2 (c17-2 / care-01
                    :ARG0 (c17-12 / you)
                    :degree (c17-6 / beyond
                                   :op1 (c17-1 / care-03))))

# ::snt can not explain . Photo every minutes , plus other spectrum data . * Which matches ground reality *
# ::tokens ["can", "not", "explain", ".", "Photo", "every", "minutes", ",", "plus", "other", "spectrum", "data", ".", "*", "Which", "matches", "ground", "reality", "*"]
# ::lemmas ["can", "not", "explain", ".", "photo", "every", "minute", ",", "plus", "other", "spectrum", "datum", ".", "*", "which", "match", "ground", "reality", "*"]
(c18-14 / multi-sentence
        :snt1 (c18-13 / possible-01
                      :ARG1 (c18-15 / explain-01
                                    :ARG0 (c18-3 / i))
                      :polarity -)
        :snt2 (c18-2 / and
                     :op1 (c18-9 / photograph-01
                                 :frequency (c18-11 / rate-entity-91
                                                    :ARG3 (c18-10 / temporal-quantity
                                                                  :unit (c18-4 / minute)
                                                                  :quant 1)))
                     :op2 (c18-0 / data
                                 :mod (c18-1 / spectrum)
                                 :mod (c18-8 / other))
                     :op3 (c18-6 / match-01
                                 :ARG1 (c18-5 / thing)
                                 :ARG2 (c18-7 / reality
                                              :mod (c18-12 / ground)))))

# ::snt You believe anything they say so you can believe in the fantasy they easily sell you . U make it easy for their fraud .
# ::tokens ["You", "believe", "anything", "they", "say", "so", "you", "can", "believe", "in", "the", "fantasy", "they", "easily", "sell", "you", ".", "U", "make", "it", "easy", "for", "their", "fraud", "."]
# ::lemmas ["you", "believe", "anything", "they", "say", "so", "you", "can", "believe", "in", "the", "fantasy", "they", "easily", "sell", "you", ".", "u", "make", "it", "easy", "for", "their", "fraud", "."]
(c19-13 / multi-sentence
        :snt1 (c19-10 / believe-01
                      :ARG0 (c19-14 / you)
                      :ARG1 (c19-3 / anything
                                   :ARG1-of (c19-0 / say-01
                                                   :ARG0 (c19-9 / they)))
                      :purpose (c19-12 / possible-01
                                       :ARG1 (c19-1 / believe-01
                                                    :ARG0 c19-14
                                                    :ARG1 (c19-4 / fantasy
                                                                 :ARG1-of (c19-11 / sell-01
                                                                                  :ARG0 (c19-7 / they)
                                                                                  :ARG2 c19-14
                                                                                  :ARG1-of (c19-16 / easy-05))))))
        :snt2 (c19-5 / make-02
                     :ARG0 (c19-15 / you)
                     :ARG1 (c19-8 / easy-05
                                  :ARG1 (c19-2 / defraud-01
                                               :ARG0 (c19-6 / they)))))
