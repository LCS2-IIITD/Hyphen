# ::snt Define " disparate gene " : how much difference is required ? And why ?
# ::tokens ["Define", "\"", "disparate", "gene", "\"", ":", "how", "much", "difference", "is", "required", "?", "And", "why", "?"]
# ::lemmas ["define", "\"", "disparate", "gene", "\"", ":", "how", "much", "difference", "be", "require", "?", "and", "why", "?"]
(c1-7 / multi-sentence
      :snt1 (c1-0 / define-01
                  :ARG0 (c1-8 / you)
                  :ARG1 (c1-5 / gene
                              :mod (c1-6 / disparate))
                  :mode imperative)
      :snt2 (c1-4 / require-01
                  :ARG1 (c1-3 / differ-02
                              :quant (c1-1 / amr-unknown)))
      :snt3 (c1-9 / and
                  :op2 c1-1
                  :ARG0-of (c1-2 / cause-01)))

# ::snt Given two genetic sequences , how would you establish if they are related or not ? Can you do this at all ?
# ::tokens ["Given", "two", "genetic", "sequences", ",", "how", "would", "you", "establish", "if", "they", "are", "related", "or", "not", "?", "Can", "you", "do", "this", "at", "all", "?"]
# ::lemmas ["give", "two", "genetic", "sequence", ",", "how", "would", "you", "establish", "if", "they", "be", "related", "or", "not", "?", "can", "you", "do", "this", "at", "all", "?"]
(c2-12 / multi-sentence
       :snt1 (c2-15 / establish-01
                    :ARG0 (c2-13 / you)
                    :ARG1 (c2-8 / truth-value
                                :polarity-of (c2-9 / relate-01
                                                   :ARG1 (c2-0 / sequence
                                                               :mod (c2-10 / genetics)
                                                               :quant 2)
                                                   :polarity -))
                    :manner (c2-3 / amr-unknown)
                    :ARG1-of (c2-5 / cause-01
                                   :ARG0 (c2-4 / give-01
                                               :ARG1 c2-0)))
       :snt2 (c2-11 / possible-01
                    :ARG1 (c2-1 / do-02
                                :ARG0 (c2-14 / you)
                                :ARG1 (c2-6 / this)
                                :mod (c2-7 / at-all)
                                :polarity (c2-2 / amr-unknown))))

# ::snt if you assume evolution and that genomes are linear ( which they're not ) then it's just % matching
# ::tokens ["if", "you", "assume", "evolution", "and", "that", "genomes", "are", "linear", "(", "which", "they", "'re", "not", ")", "then", "it", "'s", "just", "%", "matching"]
# ::lemmas ["if", "you", "assume", "evolution", "and", "that", "genome", "be", "linear", "(", "which", "they", "be", "not", ")", "then", "it", "be", "just", "%", "match"]
(c3-7 / match-01
      :mod (c3-6 / percentage-entity
                 :value (c3-5 / just))
      :condition (c3-0 / assume-02
                       :ARG0 (c3-8 / you)
                       :ARG1 (c3-9 / and
                                   :op1 (c3-10 / evolve-01)
                                   :op2 (c3-2 / linear
                                              :domain (c3-4 / genomes)
                                              :ARG1-of (c3-1 / contrast-01
                                                             :ARG2 (c3-3 / linear
                                                                         :domain c3-4
                                                                         :polarity -))))))

# ::snt parts of the genome control expression of other parts , it is self-editing and i <URL>
# ::tokens ["parts", "of", "the", "genome", "control", "expression", "of", "other", "parts", ",", "it", "is", "self", "-", "editing", "and", "i", "<", "URL", ">"]
# ::lemmas ["part", "of", "the", "genome", "control", "expression", "of", "other", "part", ",", "it", "be", "self", "-", "editing", "and", "i", "<", "URL", ">"]
(c4-0 / and
      :op1 (c4-8 / part
                 :part-of (c4-9 / express-01
                                :ARG0 (c4-6 / part
                                            :part-of (c4-7 / genome))
                                :ARG1 (c4-3 / part
                                            :part-of (c4-2 / part
                                                           :mod (c4-5 / other)))))
      :op2 (c4-4 / edit-01
                 :ARG0 (c4-1 / i)
                 :ARG1 c4-6))

# ::snt " Self-editing " ? Also , very few genes use multiple reading frames . And again : <URL>
# ::tokens ["\"", "Self", "-", "editing", "\"", "?", "Also", ",", "very", "few", "genes", "use", "multiple", "reading", "frames", ".", "And", "again", ":", "<", "URL", ">"]
# ::lemmas ["\"", "self", "-", "editing", "\"", "?", "also", ",", "very", "few", "gene", "use", "multiple", "reading", "frame", ".", "and", "again", ":", "<", "URL", ">"]
(c5-11 / multi-sentence
       :snt1 (c5-5 / use-01
                   :ARG0 (c5-10 / gene
                                :quant (c5-2 / few
                                             :degree (c5-7 / very)))
                   :ARG1 (c5-6 / frame
                               :mod (c5-9 / read-01)
                               :quant (c5-3 / multiple))
                   :polarity (c5-1 / amr-unknown)
                   :mod (c5-12 / also))
       :snt2 (c5-0 / and
                   :op2 (c5-8 / again)
                   :polarity (c5-4 / amr-unknown)))

# ::snt so NO ! in general you can not know if sequences are related unless they're al <URL>
# ::tokens ["so", "NO", "!", "in", "general", "you", "can", "not", "know", "if", "sequences", "are", "related", "unless", "they", "'re", "al", "<", "URL", ">"]
# ::lemmas ["so", "no", "!", "in", "general", "you", "can", "not", "know", "if", "sequence", "be", "relate", "unless", "they", "be", "al", "<", "URL", ">"]
(c6-2 / cause-01
      :ARG1 (c6-6 / possible-01
                  :ARG1 (c6-7 / know-01
                              :ARG0 (c6-8 / you)
                              :ARG1 (c6-3 / truth-value
                                          :polarity-of (c6-4 / relate-01
                                                             :ARG1 (c6-0 / sequence))))
                  :ARG1-of (c6-5 / general-02)
                  :condition (c6-1 / al
                                   :polarity -)
                  :polarity -))

# ::snt More waffle . How close is " almost identical " ? What % sequence identity ? What % homology ?
# ::tokens ["More", "waffle", ".", "How", "close", "is", "\"", "almost", "identical", "\"", "?", "What", "%", "sequence", "identity", "?", "What", "%", "homology", "?"]
# ::lemmas ["more", "waffle", ".", "how", "close", "be", "\"", "almost", "identical", "\"", "?", "what", "%", "sequence", "identity", "?", "what", "%", "homology", "?"]
(c7-10 / multi-sentence
       :snt1 (c7-4 / waffle
                   :quant (c7-5 / more))
       :snt2 (c7-9 / identical-01
                   :ARG1-of (c7-3 / close-10
                                  :degree (c7-2 / amr-unknown))
                   :mod (c7-11 / almost))
       :snt3 (c7-6 / identity
                   :mod (c7-0 / sequence)
                   :quant (c7-1 / amr-unknown))
       :snt4 (c7-7 / homology
                   :quant (c7-8 / amr-unknown)))

# ::snt At least has some biochem background . You appear to be making this up as you go along .
# ::tokens ["At", "least", "has", "some", "biochem", "background", ".", "You", "appear", "to", "be", "making", "this", "up", "as", "you", "go", "along", "."]
# ::lemmas ["at", "least", "have", "some", "biochem", "background", ".", "you", "appear", "to", "be", "make", "this", "up", "as", "you", "go", "along", "."]
(c8-9 / multi-sentence
      :snt1 (c8-5 / have-03
                  :ARG1 (c8-8 / background
                              :mod (c8-1 / biochemistry)
                              :quant (c8-0 / some))
                  :mod (c8-3 / at-least))
      :snt2 (c8-11 / appear-02
                   :ARG1 (c8-4 / make-up-10
                               :ARG0 (c8-10 / you)
                               :ARG1 (c8-6 / this)
                               :time (c8-7 / go-06
                                           :ARG0 c8-10
                                           :ARG2 (c8-2 / along)))))

# ::snt ( my microbiology , organic chem & biochem professors would lose their minds reading this thread ) .
# ::tokens ["(", "my", "microbiology", ",", "organic", "chem", "&", "biochem", "professors", "would", "lose", "their", "minds", "reading", "this", "thread", ")", "."]
# ::lemmas ["(", "my", "microbiology", ",", "organic", "chem", "&", "biochem", "professor", "would", "lose", "their", "mind", "read", "this", "thread", ")", "."]
(c9-13 / lose-mind-09
       :ARG0 (c9-2 / and
                   :op1 (c9-16 / person
                               :ARG0-of (c9-7 / have-org-role-91
                                              :ARG1 (c9-3 / i)
                                              :ARG2 (c9-10 / professor
                                                           :topic (c9-17 / microbiology))))
                   :op2 (c9-6 / person
                              :ARG0-of (c9-15 / have-org-role-91
                                              :ARG1 c9-3
                                              :ARG2 (c9-4 / professor
                                                          :topic (c9-5 / chemistry))))
                   :op3 (c9-1 / person
                              :ARG0-of (c9-0 / have-org-role-91
                                             :ARG1 c9-3
                                             :ARG2 (c9-9 / professor
                                                         :topic (c9-14 / biochemistry)))))
       :ARG1 (c9-12 / read-01
                    :ARG0 c9-2
                    :ARG1 (c9-11 / thread
                                 :mod (c9-8 / this))))

# ::snt they probably already lost their minds when they submitted to evo theory ; promising never to question it
# ::tokens ["they", "probably", "already", "lost", "their", "minds", "when", "they", "submitted", "to", "evo", "theory", ";", "promising", "never", "to", "question", "it"]
# ::lemmas ["they", "probably", "already", "lose", "their", "mind", "when", "they", "submit", "to", "evo", "theory", ";", "promise", "never", "to", "question", "it"]
(c10-1 / and
       :op1 (c10-6 / lose-02
                   :ARG0 (c10-5 / they
                                :part (c10-8 / mind
                                             :ARG1-of c10-6))
                   :time (c10-0 / submit-01
                                :ARG0 c10-5
                                :ARG2 (c10-3 / theory
                                             :name (c10-9 / name
                                                          :op1 "Evo")))
                   :mod (c10-7 / probable)
                   :time (c10-10 / already))
       :op2 (c10-4 / promise-01
                   :ARG0 c10-5
                   :ARG2 (c10-2 / question-03
                                :ARG0 c10-5
                                :ARG1 c10-3
                                :time (c10-11 / ever)
                                :polarity -)))

# ::snt Evolution is continuously questioned and tested . And it holds . You ? You can't even submit a hypothesis .
# ::tokens ["Evolution", "is", "continuously", "questioned", "and", "tested", ".", "And", "it", "holds", ".", "You", "?", "You", "ca", "n't", "even", "submit", "a", "hypothesis", "."]
# ::lemmas ["evolution", "be", "continuously", "question", "and", "test", ".", "and", "it", "hold", ".", "you", "?", "you", "can", "not", "even", "submit", "a", "hypothesis", "."]
(c11-12 / multi-sentence
        :snt1 (c11-2 / and
                     :op1 (c11-4 / question-01
                                 :ARG1 (c11-15 / evolution)
                                 :ARG1-of (c11-3 / continue-01))
                     :op2 (c11-8 / test-01
                                 :ARG1 c11-15))
        :snt2 (c11-14 / and
                      :op2 (c11-6 / hold-13
                                  :ARG0 (c11-11 / it)))
        :snt3 (c11-13 / you
                      :polarity (c11-1 / amr-unknown)
                      :mod (c11-7 / even)
                      :ARG1-of (c11-0 / submit-01
                                      :ARG1 (c11-5 / thing
                                                   :ARG1-of (c11-10 / hypothesize-01))
                                      :ARG1-of (c11-9 / possible-01
                                                      :polarity -)
                                      :ARG0 c11-13)))

# ::snt glad you inserted that there ... it's been a while since you threw a prayer to evolution in this thread .
# ::tokens ["glad", "you", "inserted", "that", "there", "...", "it", "'s", "been", "a", "while", "since", "you", "threw", "a", "prayer", "to", "evolution", "in", "this", "thread", "."]
# ::lemmas ["glad", "you", "insert", "that", "there", "...", "it", "be", "be", "a", "while", "since", "you", "throw", "a", "prayer", "to", "evolution", "in", "this", "thread", "."]
(c12-12 / multi-sentence
        :snt1 (c12-10 / glad-02
                      :ARG0 (c12-11 / insert-01
                                    :ARG0 (c12-13 / you)
                                    :ARG1 (c12-8 / that)
                                    :ARG2 (c12-4 / there)))
        :snt2 (c12-9 / pass-03
                     :ARG1 (c12-3 / while)
                     :time (c12-0 / since
                                  :op1 (c12-2 / throw-01
                                              :ARG0 (c12-14 / you)
                                              :ARG1 (c12-5 / thing
                                                           :ARG1-of (c12-7 / pray-01
                                                                           :beneficiary (c12-15 / evolve-01)))
                                              :location (c12-1 / thread
                                                               :mod (c12-6 / this))))))

# ::snt apologies , I was just reminded of the " peace be upon him " compulsion of Muslims after naming Muhammad .
# ::tokens ["apologies", ",", "I", "was", "just", "reminded", "of", "the", "\"", "peace", "be", "upon", "him", "\"", "compulsion", "of", "Muslims", "after", "naming", "Muhammad", "."]
# ::lemmas ["apology", ",", "i", "be", "just", "remind", "of", "the", "\"", "peace", "be", "upon", "he", "\"", "compulsion", "of", "Muslims", "after", "name", "Muhammad", "."]
(c13-1 / and
       :op1 (c13-15 / apologize-01
                    :ARG0 (c13-13 / i))
       :op2 (c13-9 / remind-01
                   :ARG1 (c13-2 / compel-01
                                :ARG1 (c13-10 / person
                                              :mod (c13-5 / religious-group
                                                          :name (c13-14 / name
                                                                        :op1 "Muslim")))
                                :ARG2 (c13-8 / peace
                                             :location (c13-6 / upon
                                                              :op1 (c13-4 / he)))
                                :time (c13-0 / after
                                             :op1 (c13-11 / name-01
                                                          :ARG0 c13-10
                                                          :ARG1 (c13-3 / person
                                                                       :name (c13-7 / name
                                                                                    :op1 "Muhammad")))))
                   :ARG2 c13-13
                   :mod (c13-12 / just)))

# ::snt You are displaying odd & paranoid thinking & then typing these thoughts & hitting " send . " Are you ok ?
# ::tokens ["You", "are", "displaying", "odd", "&", "paranoid", "thinking", "&", "then", "typing", "these", "thoughts", "&", "hitting", "\"", "send", ".", "\"", "Are", "you", "ok", "?"]
# ::lemmas ["you", "be", "display", "odd", "&", "paranoid", "thinking", "&", "then", "type", "these", "thought", "&", "hit", "\"", "send", ".", "\"", "be", "you", "ok", "?"]
(c14-14 / multi-sentence
        :snt1 (c14-3 / and
                     :op1 (c14-0 / display-01
                                 :ARG0 (c14-15 / you)
                                 :ARG1 (c14-12 / think-01
                                               :mod (c14-11 / odd)
                                               :mod (c14-13 / paranoid)))
                     :op2 (c14-16 / and
                                  :op1 (c14-7 / type-01
                                              :ARG0 c14-15
                                              :ARG1 (c14-6 / think-01
                                                           :mod (c14-9 / this)))
                                  :op2 (c14-8 / hit-02
                                              :ARG0 c14-15
                                              :ARG1 (c14-1 / send-01))
                                  :time (c14-4 / then)))
        :snt2 (c14-10 / okay-04
                      :polarity (c14-2 / amr-unknown)
                      :ARG1 (c14-5 / you)))

# ::snt that type of dialog in my country is known as banter , and considered humorous ... As you were
# ::tokens ["that", "type", "of", "dialog", "in", "my", "country", "is", "known", "as", "banter", ",", "and", "considered", "humorous", "...", "As", "you", "were"]
# ::lemmas ["that", "type", "of", "dialog", "in", "my", "country", "be", "know", "as", "banter", ",", "and", "consider", "humorous", "...", "as", "you", "be"]
(c15-2 / and
       :op1 (c15-10 / know-02
                    :ARG1 (c15-0 / dialog
                                 :mod (c15-7 / type
                                             :mod (c15-4 / that))
                                 :location (c15-3 / country
                                                  :poss (c15-9 / i)))
                    :ARG2 (c15-8 / banter-01))
       :op2 (c15-1 / consider-01
                   :ARG1 (c15-5 / humor-01
                                :ARG0 c15-0))
       :ARG1-of (c15-6 / cause-01
                       :ARG0 (c15-11 / you
                                     :domain c15-11)))

# ::snt If you say so . So your thoughts on my professors was just " humorous banter " ? <URL>
# ::tokens ["If", "you", "say", "so", ".", "So", "your", "thoughts", "on", "my", "professors", "was", "just", "\"", "humorous", "banter", "\"", "?", "<", "URL", ">"]
# ::lemmas ["if", "you", "say", "so", ".", "so", "your", "thought", "on", "my", "professor", "be", "just", "\"", "humorous", "banter", "\"", "?", "<", "URL", ">"]
(c16-13 / multi-sentence
        :snt1 (c16-5 / have-condition-91
                     :ARG2 (c16-0 / say-01
                                  :ARG0 (c16-14 / you)
                                  :ARG1 (c16-11 / so)))
        :snt2 (c16-3 / cause-01
                     :ARG1 (c16-8 / think-01
                                  :ARG0 (c16-15 / you)
                                  :ARG1 (c16-10 / banter-01
                                                :ARG0 (c16-12 / person
                                                              :ARG0-of (c16-6 / have-rel-role-91
                                                                              :ARG1 (c16-4 / i)
                                                                              :ARG2 (c16-7 / professor)))
                                                :ARG2-of (c16-1 / humor-01)
                                                :mod (c16-9 / just))
                                  :polarity (c16-2 / amr-unknown))))
