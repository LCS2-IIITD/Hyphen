# ::snt Not sure it'd work though . Would be difficult to continue the conversation with drool coming out of my mouth ...
# ::tokens ["Not", "sure", "it", "'d", "work", "though", ".", "Would", "be", "difficult", "to", "continue", "the", "conversation", "with", "drool", "coming", "out", "of", "my", "mouth", "..."]
# ::lemmas ["not", "sure", "it", "would", "work", "though", ".", "would", "be", "difficult", "to", "continue", "the", "conversation", "with", "drool", "come", "out", "of", "my", "mouth", "..."]
(c1-11 / multi-sentence
       :snt1 (c1-7 / have-concession-91
                   :ARG2 (c1-0 / sure-02
                               :ARG0 (c1-10 / i
                                            :part (c1-3 / mouth))
                               :ARG1 (c1-4 / work-09
                                           :ARG1 (c1-8 / it))
                               :polarity -))
       :snt2 (c1-1 / difficult
                   :domain (c1-5 / continue-01
                                 :ARG1 (c1-2 / converse-01)
                                 :manner (c1-9 / come-out-09
                                               :ARG1 (c1-6 / drool)
                                               :source c1-3))))

# ::snt Though , as I think about it , the subsequent fainting would HAVE to cause him to bend over me.That ' s something !
# ::tokens ["Though", ",", "as", "I", "think", "about", "it", ",", "the", "subsequent", "fainting", "would", "HAVE", "to", "cause", "him", "to", "bend", "over", "me", ".", "That", "'", "s", "something", "!"]
# ::lemmas ["though", ",", "as", "i", "think", "about", "it", ",", "the", "subsequent", "fainting", "would", "have", "to", "cause", "he", "to", "bend", "over", "i", ".", "that", "'", "s", "something", "!"]
(c2-13 / multi-sentence
       :snt1 (c2-5 / have-concession-91
                   :ARG2 (c2-8 / obligate-01
                               :ARG2 (c2-3 / cause-01
                                           :ARG0 (c2-2 / faint-01
                                                       :time (c2-0 / subsequent))
                                           :ARG1 (c2-10 / bend-01
                                                        :ARG1 (c2-11 / he)
                                                        :location (c2-6 / over
                                                                        :op1 (c2-12 / i))))
                               :time (c2-9 / think-01
                                           :ARG0 c2-12
                                           :ARG1 (c2-7 / it))))
       :snt2 (c2-1 / something
                   :domain (c2-4 / that)))

# ::snt Definitely ! He may even have to carry u to the closest chair then get u water & stick by to make sure u r ok
# ::tokens ["Definitely", "!", "He", "may", "even", "have", "to", "carry", "u", "to", "the", "closest", "chair", "then", "get", "u", "water", "&", "stick", "by", "to", "make", "sure", "u", "r", "ok"]
# ::lemmas ["definitely", "!", "he", "may", "even", "have", "to", "carry", "u", "to", "the", "close", "chair", "then", "get", "u", "water", "&", "stick", "by", "to", "make", "sure", "u", "r", "ok"]
(c3-13 / possible-01
       :ARG1 (c3-9 / obligate-01
                   :ARG1 (c3-5 / he)
                   :ARG2 (c3-3 / carry-01
                               :ARG0 c3-5
                               :ARG1 (c3-16 / you)
                               :ARG3 (c3-0 / chair
                                           :ARG1-of (c3-8 / close-06
                                                          :ARG2-of (c3-12 / have-degree-91
                                                                          :ARG1 c3-0
                                                                          :ARG3 (c3-14 / most)))))
                   :mod (c3-17 / even)
                   :time (c3-10 / then
                                :op1 (c3-11 / get-05
                                            :ARG0 c3-5
                                            :ARG1 c3-16
                                            :ARG2 (c3-4 / water))
                                :op2 (c3-1 / stick-01
                                           :ARG1 c3-5
                                           :ARG2 (c3-15 / by)
                                           :purpose (c3-6 / ensure-01
                                                          :ARG0 c3-5
                                                          :ARG1 (c3-7 / okay-03
                                                                      :ARG1 c3-16)))))
       :mod (c3-2 / definite)
       :mode expressive)
