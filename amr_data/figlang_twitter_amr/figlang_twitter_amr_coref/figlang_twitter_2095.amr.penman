# ::snt . it's people like this that ensures all the amazing jobs you are doing with via <URL>
# ::tokens [".", "it", "'s", "people", "like", "this", "that", "ensures", "all", "the", "amazing", "jobs", "you", "are", "doing", "with", "via", "<", "URL", ">"]
# ::lemmas [".", "it", "be", "people", "like", "this", "that", "ensure", "all", "the", "amazing", "job", "you", "be", "do", "with", "via", "<", "URL", ">"]
(c1-9 / ensure-01
      :ARG0 (c1-6 / person
                  :ARG1-of (c1-4 / resemble-01
                                 :ARG2 (c1-3 / this)))
      :ARG1 (c1-5 / job
                  :ARG1-of (c1-0 / do-02
                                 :ARG0 (c1-7 / you))
                  :ARG0-of (c1-1 / amaze-01)
                  :mod (c1-8 / all))
      :medium (c1-2 / url-entity))

# ::snt No need . The bad eggs are the majority . If I tell you my experiences , you'll lock up .
# ::tokens ["No", "need", ".", "The", "bad", "eggs", "are", "the", "majority", ".", "If", "I", "tell", "you", "my", "experiences", ",", "you", "'ll", "lock", "up", "."]
# ::lemmas ["no", "need", ".", "the", "bad", "egg", "be", "the", "majority", ".", "if", "i", "tell", "you", "my", "experience", ",", "you", "'ll", "lock", "up", "."]
(c2-7 / multi-sentence
      :snt1 (c2-8 / need-01
                  :polarity -)
      :snt2 (c2-0 / majority
                  :domain (c2-10 / egg
                                 :ARG1-of (c2-5 / bad-07)))
      :snt3 (c2-4 / lock-up-03
                  :ARG1 (c2-9 / you)
                  :condition (c2-3 / tell-01
                                   :ARG0 (c2-6 / i)
                                   :ARG1 (c2-1 / thing
                                               :ARG1-of (c2-2 / experience-01
                                                              :ARG0 c2-6))
                                   :ARG2 c2-9)))

# ::snt I had an experience in ' . Under the stadium in surulere . Was heading home one night so I stopped at the red light .
# ::tokens ["I", "had", "an", "experience", "in", "'", ".", "Under", "the", "stadium", "in", "surulere", ".", "Was", "heading", "home", "one", "night", "so", "I", "stopped", "at", "the", "red", "light", "."]
# ::lemmas ["i", "have", "an", "experience", "in", "'", ".", "under", "the", "stadium", "in", "surulere", ".", "be", "head", "home", "one", "night", "so", "i", "stop", "at", "the", "red", "light", "."]
(c3-13 / multi-sentence
       :snt1 (c3-15 / experience-01
                    :ARG0 (c3-12 / i)
                    :location (c3-7 / under
                                    :op1 (c3-0 / stadium
                                               :location (c3-11 / surulere))))
       :snt2 (c3-2 / cause-01
                   :ARG0 (c3-3 / head-02
                               :ARG0 (c3-4 / i)
                               :ARG1 (c3-6 / home)
                               :time (c3-1 / date-entity
                                           :dayperiod (c3-14 / night)
                                           :mod (c3-8 / one)))
                   :ARG1 (c3-5 / stop-01
                               :ARG0 c3-4
                               :location (c3-10 / light
                                                :ARG1-of (c3-9 / red-02)))))

# ::snt when it went green , I moved like the others , only to have a physically challenged man wave me down so he could cross .
# ::tokens ["when", "it", "went", "green", ",", "I", "moved", "like", "the", "others", ",", "only", "to", "have", "a", "physically", "challenged", "man", "wave", "me", "down", "so", "he", "could", "cross", "."]
# ::lemmas ["when", "it", "go", "green", ",", "i", "move", "like", "the", "other", ",", "only", "to", "have", "a", "physically", "challenge", "man", "wave", "i", "down", "so", "he", "could", "cross", "."]
(c4-15 / move-01
       :ARG0 (c4-14 / i)
       :ARG1-of (c4-11 / resemble-01
                       :ARG2 (c4-2 / move-01
                                   :ARG0 (c4-9 / other)))
       :time (c4-13 / go-08
                    :ARG1 (c4-5 / it)
                    :ARG2 (c4-16 / green-02
                                 :ARG1 c4-5))
       :purpose (c4-6 / have-04
                      :ARG0 c4-14
                      :ARG1 (c4-3 / wave-01
                                  :ARG0 (c4-8 / man
                                              :ARG1-of (c4-4 / challenge-01
                                                             :manner (c4-12 / physical)))
                                  :ARG1 c4-14
                                  :direction (c4-0 / down)
                                  :purpose (c4-10 / possible-01
                                                  :ARG1 (c4-1 / cross-02
                                                              :ARG0 c4-8)))
                      :mod (c4-7 / only)))

# ::snt as good person , I complied , but by the time he crossed , light was back on red . So I was stuck .
# ::tokens ["as", "good", "person", ",", "I", "complied", ",", "but", "by", "the", "time", "he", "crossed", ",", "light", "was", "back", "on", "red", ".", "So", "I", "was", "stuck", "."]
# ::lemmas ["as", "good", "person", ",", "i", "comply", ",", "but", "by", "the", "time", "he", "cross", ",", "light", "be", "back", "on", "red", ".", "so", "i", "be", "stuck", "."]
(c5-12 / multi-sentence
       :snt1 (c5-2 / comply-01
                   :ARG0 (c5-11 / i)
                   :concession-of (c5-9 / back-02
                                        :ARG1 (c5-7 / light)
                                        :location (c5-6 / red)
                                        :time (c5-0 / cross-02
                                                    :ARG0 (c5-3 / he)))
                   :prep-as (c5-8 / person
                                  :ARG1-of (c5-10 / good-02)))
       :snt2 (c5-5 / cause-01
                   :ARG1 (c5-1 / stick-01
                               :ARG1 (c5-4 / i))))

# ::snt guess what ? They surrounded me and were hitting on my door . Apparently the crippled man was part of the team .
# ::tokens ["guess", "what", "?", "They", "surrounded", "me", "and", "were", "hitting", "on", "my", "door", ".", "Apparently", "the", "crippled", "man", "was", "part", "of", "the", "team", "."]
# ::lemmas ["guess", "what", "?", "they", "surround", "i", "and", "be", "hit", "on", "my", "door", ".", "apparently", "the", "crippled", "man", "be", "part", "of", "the", "team", "."]
(c6-14 / multi-sentence
       :snt1 (c6-11 / guess-01
                    :ARG0 (c6-13 / i)
                    :ARG1 (c6-3 / amr-unknown))
       :snt2 (c6-15 / and
                    :op1 (c6-0 / surround-01
                               :ARG0 (c6-9 / they)
                               :ARG1 (c6-7 / i))
                    :op2 (c6-8 / hit-on-06
                               :ARG0 c6-9
                               :ARG1 (c6-1 / door
                                           :poss c6-7)))
       :snt3 (c6-12 / have-org-role-91
                    :ARG0 (c6-4 / man
                                :ARG1-of (c6-5 / cripple-01))
                    :ARG1 (c6-6 / team)
                    :ARG2 (c6-10 / part)
                    :ARG1-of (c6-2 / appear-02)))

# ::snt next thing , dey took me into the stadium . When I knew they weren't taking me to the station , I raised hell .
# ::tokens ["next", "thing", ",", "dey", "took", "me", "into", "the", "stadium", ".", "When", "I", "knew", "they", "were", "n't", "taking", "me", "to", "the", "station", ",", "I", "raised", "hell", "."]
# ::lemmas ["next", "thing", ",", "dey", "take", "i", "into", "the", "stadium", ".", "when", "i", "know", "they", "be", "not", "take", "i", "to", "the", "station", ",", "i", "raise", "hell", "."]
(c7-11 / multi-sentence
       :snt1 (c7-7 / take-01
                   :ARG0 (c7-3 / they)
                   :ARG1 (c7-10 / i)
                   :ARG3 (c7-0 / stadium)
                   :mod (c7-13 / thing
                               :mod (c7-12 / next)))
       :snt2 (c7-8 / raise-01
                   :ARG0 (c7-4 / i)
                   :ARG1 (c7-5 / hell)
                   :time (c7-1 / know-01
                               :ARG0 c7-4
                               :ARG1 (c7-6 / take-01
                                           :ARG0 (c7-2 / they)
                                           :ARG1 c7-4
                                           :ARG3 (c7-9 / station)
                                           :polarity -))))

# ::snt NPF are trash ! I will not be convinced otherwise .
# ::tokens ["NPF", "are", "trash", "!", "I", "will", "not", "be", "convinced", "otherwise", "."]
# ::lemmas ["NPF", "be", "trash", "!", "i", "will", "not", "be", "convince", "otherwise", "."]
(c8-5 / multi-sentence
      :snt1 (c8-3 / trash
                  :domain (c8-4 / political-party
                                :name (c8-6 / name
                                            :op1 "NPF")))
      :snt2 (c8-0 / convince-01
                  :ARG1 (c8-1 / i)
                  :ARG2 (c8-2 / have-polarity-91
                              :ARG2 -)
                  :polarity -))

# ::snt yes majority tend to swing that way but there are a few good ones and we've got to help them whether we like it or not .
# ::tokens ["yes", "majority", "tend", "to", "swing", "that", "way", "but", "there", "are", "a", "few", "good", "ones", "and", "we", "'ve", "got", "to", "help", "them", "whether", "we", "like", "it", "or", "not", "."]
# ::lemmas ["yes", "majority", "tend", "to", "swing", "that", "way", "but", "there", "be", "a", "few", "good", "one", "and", "we", "'ve", "get", "to", "help", "they", "whether", "we", "like", "it", "or", "not", "."]
(c9-3 / contrast-01
      :ARG1 (c9-9 / tend-02
                  :ARG1 (c9-13 / majority)
                  :ARG2 (c9-0 / swing-01
                              :ARG0 c9-13
                              :ARG1 (c9-4 / way
                                          :mod (c9-5 / that))))
      :ARG2 (c9-1 / and
                  :op1 (c9-12 / good-02
                              :ARG1 (c9-8 / one
                                          :quant (c9-2 / few)))
                  :op2 (c9-7 / obligate-01
                             :ARG1 (c9-14 / we)
                             :ARG2 (c9-6 / help-01
                                         :ARG0 c9-14
                                         :ARG2 c9-8)
                             :ARG1-of (c9-10 / regardless-91
                                             :ARG2 (c9-11 / like-01
                                                          :ARG0 c9-14
                                                          :ARG1 c9-0)))))

# ::snt they are not from Mars or Saturn . They are from us . The Nigerian Police are one us . We've got to report issues like this
# ::tokens ["they", "are", "not", "from", "Mars", "or", "Saturn", ".", "They", "are", "from", "us", ".", "The", "Nigerian", "Police", "are", "one", "us", ".", "We", "'ve", "got", "to", "report", "issues", "like", "this"]
# ::lemmas ["they", "be", "not", "from", "Mars", "or", "Saturn", ".", "they", "be", "from", "we", ".", "The", "Nigerian", "Police", "be", "one", "we", ".", "we", "'ve", "get", "to", "report", "issue", "like", "this"]
(c10-10 / multi-sentence
        :snt1 (c10-8 / they
                     :source (c10-7 / or
                                    :op1 (c10-20 / planet
                                                 :name (c10-11 / name
                                                               :op1 "Mars"))
                                    :op2 (c10-18 / planet
                                                 :name (c10-0 / name
                                                              :op1 "Saturn"))))
        :snt2 (c10-19 / be-from-91
                      :ARG1 (c10-5 / they)
                      :ARG2 (c10-4 / we))
        :snt3 (c10-16 / be-from-91
                      :ARG1 (c10-14 / police
                                    :mod (c10-3 / country
                                                :name (c10-15 / name
                                                              :op1 "Nigeria")))
                      :ARG2 (c10-13 / we))
        :snt4 (c10-17 / obligate-01
                      :ARG1 (c10-2 / we)
                      :ARG2 (c10-9 / report-01
                                   :ARG0 c10-2
                                   :ARG1 (c10-1 / issue-02
                                                :ARG1-of (c10-6 / resemble-01
                                                                :ARG2 (c10-12 / this))))))

# ::snt and follow it up until justice is served so they know they can't do stuff with impunity anymore .
# ::tokens ["and", "follow", "it", "up", "until", "justice", "is", "served", "so", "they", "know", "they", "ca", "n't", "do", "stuff", "with", "impunity", "anymore", "."]
# ::lemmas ["and", "follow", "it", "up", "until", "justice", "be", "serve", "so", "they", "know", "they", "can", "not", "do", "stuff", "with", "impunity", "anymore", "."]
(c11-3 / and
       :op2 (c11-4 / follow-up-03
                   :ARG1 (c11-10 / it)
                   :time (c11-6 / until
                                :op1 (c11-0 / serve-01
                                            :ARG1 (c11-9 / justice)))
                   :purpose (c11-11 / know-01
                                    :ARG0 (c11-7 / they)
                                    :ARG1 (c11-8 / possible-01
                                                 :ARG1 (c11-1 / do-02
                                                              :ARG0 c11-7
                                                              :ARG1 (c11-2 / stuff)
                                                              :manner (c11-5 / impunity)
                                                              :time (c11-12 / anymore))
                                                 :polarity -))))

# ::snt how can justice be served ? Which policeman has gone to jail for ' accidental discharge ' ?
# ::tokens ["how", "can", "justice", "be", "served", "?", "Which", "policeman", "has", "gone", "to", "jail", "for", "'", "accidental", "discharge", "'", "?"]
# ::lemmas ["how", "can", "justice", "be", "serve", "?", "which", "policeman", "have", "go", "to", "jail", "for", "'", "accidental", "discharge", "'", "?"]
(c12-9 / multi-sentence
       :snt1 (c12-8 / possible-01
                    :ARG1 (c12-0 / serve-01
                                 :ARG1 (c12-7 / justice)
                                 :manner (c12-3 / amr-unknown)))
       :snt2 (c12-6 / go-02
                    :ARG0 (c12-11 / amr-unknown
                                  :mod (c12-5 / policeman))
                    :ARG4 (c12-10 / jail)
                    :ARG1-of (c12-4 / cause-01
                                    :ARG0 (c12-1 / discharge-01
                                                 :ARG0 c12-11
                                                 :mod (c12-2 / accident)))))

# ::snt do they take action ? Or it's the simple , we'll look into it & then transfer him to another state / division ?
# ::tokens ["do", "they", "take", "action", "?", "Or", "it", "'s", "the", "simple", ",", "we", "'ll", "look", "into", "it", "&", "then", "transfer", "him", "to", "another", "state", "/", "division", "?"]
# ::lemmas ["do", "they", "take", "action", "?", "or", "it", "be", "the", "simple", ",", "we", "'ll", "look", "into", "it", "&", "then", "transfer", "he", "to", "another", "state", "/", "division", "?"]
(c13-14 / multi-sentence
        :snt1 (c13-3 / act-02
                     :polarity (c13-16 / amr-unknown)
                     :ARG0 (c13-10 / they))
        :snt2 (c13-8 / or
                     :op1 (c13-0 / simple-02
                                 :ARG1 (c13-13 / it))
                     :op2 (c13-1 / and
                                 :op1 (c13-11 / look-into-11
                                              :ARG0 (c13-4 / we)
                                              :ARG1 c13-13)
                                 :op2 (c13-5 / transfer-01
                                             :ARG0 c13-4
                                             :ARG1 (c13-6 / he)
                                             :ARG2 (c13-12 / slash
                                                           :op1 (c13-7 / state)
                                                           :op2 (c13-2 / division)
                                                           :mod (c13-9 / another))
                                             :time (c13-15 / then)))))
