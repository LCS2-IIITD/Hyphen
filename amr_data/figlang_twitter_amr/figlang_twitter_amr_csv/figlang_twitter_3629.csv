comment,amr
Woke up this morning thinking about flip sequins ... Coded this real quick and now I'm thinking about making an ASMR app <URL>,"# ::snt Woke up this morning thinking about flip sequins ... Coded this real quick and now I'm thinking about making an ASMR app <URL>
(m / multi-sentence
      :snt1 (w / wake-up-02
            :ARG1 (ii / i)
            :ARG3 (t / think-01
                  :ARG0 ii
                  :ARG1 (s / sequin
                        :mod (f / flip)))
            :time (d / date-entity
                  :dayperiod (m2 / morning)
                  :mod (t2 / today)))
      :snt2 (a / and
            :op1 (d2 / decode-01
                  :ARG0 (ii2 / i)
                  :ARG1 (t3 / this)
                  :ARG1-of (q / quick-02
                        :degree (r / really)))
            :op2 (t4 / think-01
                  :ARG0 ii2
                  :ARG1 (m3 / make-01
                        :ARG0 ii2
                        :ARG1 (a2 / app
                              :name (n / name
                                    :op1 ""ASMR"")))
                  :time (n2 / now))))"
No question this is the best thing out of the year so far .,"# ::snt No question this is the best thing out of the year so far .
(q / question-03
      :polarity -
      :ARG1 (h / have-degree-91
            :ARG1 (t / thing
                  :mod (t2 / this)
                  :time (o / out-06
                        :ARG2 (y / year)))
            :ARG2 (g / good-02
                  :ARG1 t)
            :ARG3 (m / most)))"
Haha . Let s end the year now while we re ahead . let s go !,"# ::snt Haha . Let s end the year now while we re ahead . let s go !
(m / multi-sentence
      :snt1 (h / haha
            :mode expressive)
      :snt2 (c / contrast-01
            :ARG1 (l / let-01
                  :mode imperative
                  :ARG0 (w / we)
                  :ARG1 (e / end-01
                        :ARG0 w
                        :ARG1 (y / year)
                        :time (n / now)))
            :ARG2 (l2 / let-01
                  :mode imperative
                  :ARG0 w
                  :ARG1 (g / go-02
                        :ARG0 w))))"
