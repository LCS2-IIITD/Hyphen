comment,amr
. Nobody here proposes a pure democracy . We need representatives .,"# ::snt . Nobody here proposes a pure democracy . We need representatives .
(m / multi-sentence
      :snt1 (p / propose-01
            :ARG0 (n / nobody)
            :ARG1 (d / democracy
                  :ARG1-of (p2 / pure-02))
            :location (h / here))
      :snt2 (n2 / need-01
            :ARG0 (w / we)
            :ARG1 (p3 / person
                  :ARG0-of (r / represent-01))))"
". Our st past post , winner takes all way virtually ensures parties .","# ::snt . Our st past post , winner takes all way virtually ensures parties .
(m / multi-sentence
      :snt1 (p / post-01
            :ARG0 (w / we)
            :time (p2 / past))
      :snt2 (t / take-01
            :ARG0 (p3 / person
                  :ARG0-of (w2 / win-01))
            :ARG1 (e / ensure-01
                  :ARG0 p3
                  :ARG1 (p4 / party)
                  :manner (v / virtual)
                  :extent (a / all-the-way))))"
If post was % then few elections would be valid .,"# ::snt If post was % then few elections would be valid .
(v / valid-02
      :ARG1 (e / elect-01
            :quant (f / few))
      :condition (p / percentage-entity
            :value (p2 / post)))"
b / c well established theory is always right ...,"# ::snt b / c well established theory is always right ...
(r / right-06
      :ARG1 (t / theory
            :ARG1-of (e / establish-01
                  :manner (w / well)))
      :time (a / always)
      :ARG1-of (c / cause-01
            :ARG0 (a2 / amr-unknown)))"
"Until it isn't . Incorrect cliches are a problem , no ?","# ::snt Until it isn't . Incorrect cliches are a problem , no ?
(m / multi-sentence
      :snt1 (b / be-temporally-at-91
            :polarity -
            :ARG1 (ii / it)
            :ARG2 (u / until
                  :op1 (h / have-polarity-91
                        :ARG1 ii
                        :ARG2 -)))
      :snt2 (p / problem
            :domain (c / cliche
                  :ARG1-of (c2 / correct-02
                        :polarity -))
            :ARG1-of (r / request-confirmation-91)))"
". Every country like ours has this feature , Tim .","# ::snt . Every country like ours has this feature , Tim .
(s / say-01
      :ARG1 (h / have-03
            :ARG0 (c / country
                  :mod (e / every)
                  :ARG1-of (r / resemble-01
                        :ARG2 (c2 / country
                              :poss (w / we))))
            :ARG1 (f / feature
                  :mod (t / this)))
      :ARG2 (p / person
            :name (n / name
                  :op1 ""Tim"")))"
. Exceptions are minor . Party rule is near certain .,"# ::snt . Exceptions are minor . Party rule is near certain .
(m / multi-sentence
      :snt1 (m2 / minor-01
            :ARG1 (t / thing
                  :ARG1-of (e / exclude-01)))
      :snt2 (c / certain
            :domain (r / rule-01
                  :ARG0 (p / party))
            :degree (n / near)))"
