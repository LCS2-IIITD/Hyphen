comment,amr
"Sigh , Dear , I don't think I will ever associate Finder's smiley face with ' this is where I go when Cmd + Tab to get to my folders ' ...","# ::snt Sigh , Dear , I don't think I will ever associate Finder's smiley face with ' this is where I go when Cmd + Tab to get to my folders ' ...
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (t / think-01
            :ARG0 ii
            :ARG1 (a / associate-01
                  :polarity -
                  :ARG0 ii
                  :ARG1 (f / face
                        :ARG0-of (s2 / smile-01)
                        :poss (p / person
                              :name (n / name
                                    :op1 ""F Finder"")))
                  :ARG2 (l / location
                        :location-of (g / go-02
                              :ARG0 ii
                              :ARG4 (f2 / file
                                    :poss ii)
                              :time (g2 / get-05
                                    :ARG0 ii
                                    :ARG1 ii
                                    :ARG2 f2))
                        :domain (t2 / this))
                  :time (e / ever)))
      :ARG2 (p2 / person
            :name (n2 / name
                  :op1 ""Dear""))
      :mod (s3 / sigh-02
            :ARG0 ii))"
It doesn't really shout ' files live here ' does it ?,"# ::snt It doesn't really shout ' files live here ' does it ?
(s / shout-01
      :polarity -
      :ARG0 (ii / it)
      :ARG1 (l / live-01
            :ARG0 (f / file)
            :location (h / here))
      :ARG1-of (r / real-04)
      :ARG1-of (r2 / request-confirmation-91))"
"Come back to the Windows side , boys . Come back . Clippy has gone , but File Explorer lives on","# ::snt Come back to the Windows side , boys . Come back . Clippy has gone , but File Explorer lives on
(m / multi-sentence
      :snt1 (s / say-01
            :ARG0 (ii / i)
            :ARG1 (c / come-01
                  :mode imperative
                  :ARG1 (b / boy)
                  :ARG4 (s2 / side
                        :mod (p / product
                              :name (n / name
                                    :op1 ""Windows"")))
                  :direction (b2 / back))
            :ARG2 b)
      :snt2 (c2 / come-01
            :mode imperative
            :ARG1 b
            :ARG4 (b3 / back))
      :snt3 (c3 / contrast-01
            :ARG1 (g / go-02
                  :ARG0 (p2 / person
                        :name (n2 / name
                              :op1 ""Clippy"")))
            :ARG2 (l / live-on-03
                  :ARG1 (p3 / product
                        :name (n3 / name
                              :op1 "" File""
                              :op2 ""Expl Explorer"")))))"
I would if our collective employer offered Windows ... it's sooooo good ( and so less irritating than OSX ),"# ::snt I would if our collective employer offered Windows ... it's sooooo good ( and so less irritating than OSX )
(d / do-02
      :ARG0 (ii / i)
      :ARG1 (a / and
            :op1 (g / good-02
                  :ARG1 (p / product
                        :name (n / name
                              :op1 ""Windows""))
                  :degree (s / so))
            :op2 (h / have-degree-91
                  :ARG1 p
                  :ARG2 (ii2 / irritate-01
                        :ARG0 p)
                  :ARG3 (l / less)
                  :ARG4 (p2 / product
                        :name (n2 / name
                              :op1 ""OSX""))))
      :condition (o / offer-01
            :ARG0 (c / company
                  :ARG0-of (e / employ-01)
                  :mod (c2 / collective)
                  :poss (w / we))
            :ARG1 p))"
It'll take more than Win to bring me back I'm afraid . Keynote a million times better than PPT is the main one,"# ::snt It'll take more than Win to bring me back I'm afraid . Keynote a million times better than PPT is the main one
(m / multi-sentence
      :snt1 (f / fear-01
            :ARG0 (ii / i)
            :ARG1 (t / take-10
                  :ARG0 (b / bring-01
                        :ARG1 ii
                        :ARG2 (b2 / back))
                  :ARG1 (m2 / more-than
                        :op1 (w / win-01))))
      :snt2 (o / one
            :mod (m3 / main)
            :domain (k / Keynote
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 k)
                        :ARG3 (t2 / times
                              :quant 1000000)
                        :ARG4 (t3 / thing
                              :name (n / name
                                    :op1 ""PPT""))))))"
how has your job role changed if Keynote is your main tool ...,"# ::snt how has your job role changed if Keynote is your main tool ...
(c / change-01
      :ARG1 (r / role
            :mod (j / job)
            :poss (y / you))
      :ARG2 (a / amr-unknown)
      :condition (t / tool
            :mod (m / main)
            :poss y
            :domain (c2 / company
                  :name (n / name
                        :op1 ""Keynote""))))"
"architecture diagrams , communicating vision , design thinking , even creating videos . Also Mac dev tools are good .","# ::snt architecture diagrams , communicating vision , design thinking , even creating videos . Also Mac dev tools are good .
(m / multi-sentence
      :snt1 (a / and
            :op1 (d / diagram
                  :mod (a2 / architect))
            :op2 (c / communicate-01
                  :ARG1 (e / envision-01))
            :op3 (t / think-01
                  :manner (d2 / design-01))
            :op4 (c2 / create-01
                  :ARG1 (v / video)
                  :mod (e2 / even)))
      :snt2 (g / good-02
            :ARG1 (t2 / tool
                  :mod (p / product
                        :name (n / name
                              :op1 ""Mac""))
                  :ARG0-of (d3 / deviate-01))
            :mod (a3 / also)))"
""" design thinking "" <shudder> implies you've never given thought to your job before .. which us false","# ::snt "" design thinking "" <shudder> implies you've never given thought to your job before .. which us false
(ii / imply-01
      :ARG0 (t / think-01
            :ARG1 (d / design-01))
      :ARG1 (t2 / think-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (j / job
                  :poss y)
            :time (e / ever)
            :time (b / before))
      :ARG1-of (f / false
            :domain (w / we))
      :ARG0-of (s / shudder-01))"
