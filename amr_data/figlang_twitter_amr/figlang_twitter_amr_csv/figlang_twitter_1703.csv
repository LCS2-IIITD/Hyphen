comment,amr
to anyone else who STILL HAS A WEEK TO GO UNTIL HALF TERM .,"# ::snt to anyone else who STILL HAS A WEEK TO GO UNTIL HALF TERM .
(s / say-01
      :ARG2 (a / anyone
            :mod (e / else)
            :ARG0-of (h / have-03
                  :ARG1 (t / temporal-quantity
                        :quant 1
                        :unit (w / week)
                        :duration-of (g / go-01
                              :ARG1 a
                              :ARG4 (h2 / half)))
                  :mod (s2 / still))))"
of nationality ( Britishness ) - with focus on film language & terminology - that is as far as my tired brain has got,"# ::snt of nationality ( Britishness ) - with focus on film language & terminology - that is as far as my tired brain has got
(h / have-degree-91
      :ARG1 (n / nationality
            :ARG1-of (m / mean-01
                  :ARG2 (c / country
                        :name (n2 / name
                              :op1 ""Great""
                              :op2 ""Britain"")))
            :ARG0-of (f / focus-01
                  :ARG2 (a / and
                        :op1 (l / language
                              :mod (f2 / film))
                        :op2 (t / terminology))))
      :ARG2 (f3 / far)
      :ARG3 (e / equal)
      :ARG4 (g / get-03
            :ARG1 (b / brain
                  :part-of (ii / i)
                  :ARG1-of (t2 / tire-01))))"
"I'd start with stereotypes , then think of others in other ( British ) films , then use film lang to analyse how they're created .","# ::snt I'd start with stereotypes , then think of others in other ( British ) films , then use film lang to analyse how they're created .
(a / and
      :op1 (s / start-01
            :ARG0 (ii / i)
            :ARG2 (s2 / stereotype-01))
      :op2 (t / think-01
            :ARG0 ii
            :ARG2 (o / other
                  :location (f / film
                        :mod (o2 / other)
                        :ARG1-of (m / mean-01
                              :ARG2 (f2 / film
                                    :mod (c / country
                                          :name (n / name
                                                :op1 ""Great""
                                                :op2 ""Britain""))))))
            :op3 (u / use-01
                  :ARG0 ii
                  :ARG1 (l / language
                        :name (n2 / name
                              :op1 ""Film""
                              :op2 ""Lang""))
                  :ARG2 (a2 / analyze-01
                        :ARG0 ii
                        :ARG1 (t2 / thing
                              :manner-of (c2 / create-01
                                    :ARG1 (t3 / they))))
                  :time (t4 / then))))"
Would be useful to recap audience demographics re social class & get them to visualise the class stereotypes somehow,"# ::snt Would be useful to recap audience demographics re social class & get them to visualise the class stereotypes somehow
(u / useful-05
      :ARG1 (a / and
            :op1 (r / recap-01
                  :ARG1 (d / demographics
                        :mod (a2 / audience)
                        :topic (c / class
                              :mod (s / social))))
            :op2 (g / get-04
                  :ARG1 (v / visualize-01
                        :ARG0 a2
                        :ARG1 (s2 / stereotype-01
                              :ARG1 (c2 / class))
                        :manner (s3 / somehow)))))"
"Yep , I think actually providing them with social class & audience demogs would save time also = more time allocated on analysis .","# ::snt Yep , I think actually providing them with social class & audience demogs would save time also = more time allocated on analysis .
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (s / save-01
            :ARG0 (p / provide-01
                  :ARG1 (a / and
                        :op1 (d / demogog
                              :mod (c / class
                                    :mod (s2 / society)))
                        :op2 (d2 / demog
                              :mod (a2 / audience)))
                  :ARG2 (t2 / they)
                  :ARG1-of (a3 / actual-02))
            :ARG1 (t3 / time)
            :ARG1-of (e / equal-01
                  :ARG2 (t4 / time
                        :ARG1-of (a4 / allocate-01
                              :ARG0 (a5 / analyze-01))
                        :ARG1-of (h / have-quant-91
                              :ARG3 (m / more)))))
      :mod (y / yep))"
Oh glad you think that - useful revision for them too . Sometimes I think they all have memories like Dory .,"# ::snt Oh glad you think that - useful revision for them too . Sometimes I think they all have memories like Dory .
(m / multi-sentence
      :snt1 (g / glad-02
            :ARG0 (t / think-01
                  :ARG0 (y / you)
                  :ARG1 (t2 / that))
            :ARG1 (ii / i)
            :mod (o / oh))
      :snt2 (t3 / think-01
            :ARG0 (ii2 / i)
            :ARG1 (h / have-03
                  :ARG0 (t4 / they
                        :mod (a / all))
                  :ARG1 (m2 / memory
                        :ARG1-of (r / resemble-01
                              :ARG2 (t5 / thing
                                    :name (n / name
                                          :op1 ""Dory""))))
                  :frequency (s / sometimes))))"
< I'm fascinated by the Michaela ' drilling ' method and why I'm such an advocate of persistent and repeated use of Quizlet .,"# ::snt < I'm fascinated by the Michaela ' drilling ' method and why I'm such an advocate of persistent and repeated use of Quizlet .
(f / fascinate-01
      :ARG0 (a / and
            :op1 (m / method
                  :mod (d / drill-01
                        :ARG0 (p / person
                              :name (n / name
                                    :op1 ""Michaela""))))
            :op2 (t / thing
                  :ARG0-of (c / cause-01
                        :ARG1 (a2 / advocate-01
                              :ARG0 (ii / i)
                              :ARG1 (u / use-01
                                    :ARG1 (p2 / product
                                          :name (n2 / name
                                                :op1 ""Quizlet""))
                                    :ARG1-of (p3 / persist-01)
                                    :ARG1-of (r / repeat-01))
                              :degree (s / such)))))
      :ARG1 ii)"
