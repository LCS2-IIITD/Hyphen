comment,amr
So does that mean the lunatic liberals won't sit next to me on a plane ... ? ? ?,"# ::snt So does that mean the lunatic liberals won't sit next to me on a plane ... ? ? ?
(m / mean-01
      :polarity (a / amr-unknown)
      :ARG1 (t / that)
      :ARG2 (s / sit-01
            :polarity -
            :ARG1 (p / person
                  :ARG1-of (l / liberal-02)
                  :mod (l2 / lunatic))
            :ARG2 (n / next-to
                  :op1 (ii / i))
            :location (p2 / plane)))"
I'm gonna give that because no idea what your asking .,"# ::snt I'm gonna give that because no idea what your asking .
(c / cause-01
      :ARG0 (h / have-03
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (ii2 / idea
                  :topic (t / thing
                        :ARG1-of (a / ask-02
                              :ARG0 (y / you)))))
      :ARG1 (g / give-01
            :ARG0 ii
            :ARG1 (t2 / that)))"
Oh that's right .. U only watch fake Clown News Network ... never mind ... I'll let U stay in Ur dungeon & sm <URL>,"# ::snt Oh that's right .. U only watch fake Clown News Network ... never mind ... I'll let U stay in Ur dungeon & sm <URL>
(m / multi-sentence
      :snt1 (r / right-06
            :ARG1 (t / that)
            :mod (o / oh))
      :snt2 (c / contrast-01
            :ARG1 (w / watch-01
                  :ARG0 (w2 / we)
                  :ARG1 (b / broadcast-program
                        :name (n / name
                              :op1 ""Clown""
                              :op2 ""News""
                              :op3 ""Network"")
                        :ARG1-of (f / fake-02))
                  :mod (o2 / only))
            :ARG2 (m2 / mind-15
                  :polarity -
                  :mode imperative
                  :ARG0 (y / you)
                  :time (e / ever)))
      :snt3 (l / let-01
            :ARG0 (ii / i)
            :ARG1 (a / and
                  :op1 (s / stay-01
                        :ARG1 w2
                        :location (l2 / location
                              :name n
                              :op1 ""Ur""
                              :op2 "" dungeon"")))
            :op2 (s2 / sm)))"
