comment,amr
. You have a unique voice . Be bold and fearless . Trust your instincts . Forgive others . Forgive yourself,"# ::snt . You have a unique voice . Be bold and fearless . Trust your instincts . Forgive others . Forgive yourself
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (y / you)
            :ARG1 (v / voice
                  :ARG1-of (u / unique-01)))
      :snt2 (a / and
            :op1 (b / bold-02
                  :mode imperative
                  :ARG0 (y2 / you))
            :op2 (f / fearless
                  :mode imperative
                  :domain y2))
      :snt3 (t / trust-02
            :mode imperative
            :ARG0 (y3 / you)
            :ARG1 (ii / instinct
                  :poss y3))
      :snt4 (f2 / forgive-01
            :mode imperative
            :ARG0 y3
            :ARG1 (o / other))
      :snt5 (f3 / forgive-01
            :mode imperative
            :ARG0 (y4 / you)
            :ARG1 y4))"
. realize not all terminal degrees are a waste of time,"# ::snt . realize not all terminal degrees are a waste of time
(r / realize-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (w / waste-01
            :ARG0 (d / degree
                  :mod (t / terminal)
                  :mod (a / all
                        :polarity -))
            :ARG1 (t2 / time)))"
". Realize some lists are incomplete until deep wisdom has been shared . Thank you , Chris .","# ::snt . Realize some lists are incomplete until deep wisdom has been shared . Thank you , Chris .
(m / multi-sentence
      :snt1 (r / realize-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (c / complete-02
                  :polarity -
                  :ARG1 (l / list
                        :quant (s / some))
                  :time (u / until
                        :op1 (s2 / share-01
                              :ARG1 (w / wisdom
                                    :ARG1-of (d / deep-02))))))
      :snt2 (t / thank-01
            :ARG0 (ii / i)
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Chris""))))"
