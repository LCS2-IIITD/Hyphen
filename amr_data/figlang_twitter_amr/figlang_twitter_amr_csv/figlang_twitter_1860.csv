comment,amr
"Define "" disparate gene "" : how much difference is required ? And why ?","# ::snt Define "" disparate gene "" : how much difference is required ? And why ?
(m / multi-sentence
      :snt1 (d / define-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (g / gene
                  :mod (d2 / disparate)))
      :snt2 (r / require-01
            :ARG1 (d3 / differ-02
                  :quant (a / amr-unknown)))
      :snt3 (a2 / and
            :op2 a
            :ARG0-of (c / cause-01)))"
"Given two genetic sequences , how would you establish if they are related or not ? Can you do this at all ?","# ::snt Given two genetic sequences , how would you establish if they are related or not ? Can you do this at all ?
(m / multi-sentence
      :snt1 (e / establish-01
            :ARG0 (y / you)
            :ARG1 (t / truth-value
                  :polarity-of (r / relate-01
                        :polarity -
                        :ARG1 (s / sequence
                              :quant 2
                              :mod (g / genetics))))
            :manner (a / amr-unknown)
            :ARG1-of (c / cause-01
                  :ARG0 (g2 / give-01
                        :ARG1 s)))
      :snt2 (p / possible-01
            :ARG1 (d / do-02
                  :ARG0 (y2 / you)
                  :ARG1 (t2 / this)
                  :mod (a2 / at-all)
                  :polarity (a3 / amr-unknown))))"
if you assume evolution and that genomes are linear ( which they're not ) then it's just % matching,"# ::snt if you assume evolution and that genomes are linear ( which they're not ) then it's just % matching
(m / match-01
      :mod (p / percentage-entity
            :value (j / just))
      :condition (a / assume-02
            :ARG0 (y / you)
            :ARG1 (a2 / and
                  :op1 (e / evolve-01)
                  :op2 (l / linear
                        :domain (g / genomes)
                        :ARG1-of (c / contrast-01
                              :ARG2 (l2 / linear
                                    :polarity -
                                    :domain g))))))"
"parts of the genome control expression of other parts , it is self-editing and i <URL>","# ::snt parts of the genome control expression of other parts , it is self-editing and i <URL>
(a / and
      :op1 (p / part
            :part-of (e / express-01
                  :ARG0 (p2 / part
                        :part-of (g / genome))
                  :ARG1 (p3 / part
                        :part-of (p4 / part
                              :mod (o / other)))))
      :op2 (e2 / edit-01
            :ARG0 (ii / i)
            :ARG1 p2))"
""" Self-editing "" ? Also , very few genes use multiple reading frames . And again : <URL>","# ::snt "" Self-editing "" ? Also , very few genes use multiple reading frames . And again : <URL>
(m / multi-sentence
      :snt1 (u / use-01
            :ARG0 (g / gene
                  :quant (f / few
                        :degree (v / very)))
            :ARG1 (f2 / frame
                  :mod (r / read-01)
                  :quant (m2 / multiple))
            :polarity (a / amr-unknown)
            :mod (a2 / also))
      :snt2 (a3 / and
            :op2 (a4 / again)
            :polarity (a5 / amr-unknown)))"
so NO ! in general you can not know if sequences are related unless they're al <URL>,"# ::snt so NO ! in general you can not know if sequences are related unless they're al <URL>
(c / cause-01
      :ARG1 (p / possible-01
            :polarity -
            :ARG1 (k / know-01
                  :ARG0 (y / you)
                  :ARG1 (t / truth-value
                        :polarity-of (r / relate-01
                              :ARG1 (s / sequence))))
            :ARG1-of (g / general-02)
            :condition (a / al
                  :polarity -)))"
"More waffle . How close is "" almost identical "" ? What % sequence identity ? What % homology ?","# ::snt More waffle . How close is "" almost identical "" ? What % sequence identity ? What % homology ?
(m / multi-sentence
      :snt1 (w / waffle
            :quant (m2 / more))
      :snt2 (ii / identical-01
            :ARG1-of (c / close-10
                  :degree (a / amr-unknown))
            :mod (a2 / almost))
      :snt3 (ii2 / identity
            :mod (s / sequence)
            :quant (a3 / amr-unknown))
      :snt4 (h / homology
            :quant (a4 / amr-unknown)))"
At least has some biochem background . You appear to be making this up as you go along .,"# ::snt At least has some biochem background . You appear to be making this up as you go along .
(m / multi-sentence
      :snt1 (h / have-03
            :ARG1 (b / background
                  :mod (b2 / biochemistry)
                  :quant (s / some))
            :mod (a / at-least))
      :snt2 (a2 / appear-02
            :ARG1 (m2 / make-up-10
                  :ARG0 (y / you)
                  :ARG1 (t / this)
                  :time (g / go-06
                        :ARG0 y
                        :ARG2 (a3 / along)))))"
"( my microbiology , organic chem & biochem professors would lose their minds reading this thread ) .","# ::snt ( my microbiology , organic chem & biochem professors would lose their minds reading this thread ) .
(l / lose-mind-09
      :ARG0 (a / and
            :op1 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (ii / i)
                        :ARG2 (p2 / professor
                              :topic (m / microbiology))))
            :op2 (p3 / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG1 ii
                        :ARG2 (p4 / professor
                              :topic (c / chemistry))))
            :op3 (p5 / person
                  :ARG0-of (h3 / have-org-role-91
                        :ARG1 ii
                        :ARG2 (p6 / professor
                              :topic (b / biochemistry)))))
      :ARG1 (r / read-01
            :ARG0 a
            :ARG1 (t / thread
                  :mod (t2 / this))))"
they probably already lost their minds when they submitted to evo theory ; promising never to question it,"# ::snt they probably already lost their minds when they submitted to evo theory ; promising never to question it
(a / and
      :op1 (l / lose-02
            :ARG0 (t / they
                  :part (m / mind))
            :ARG1 m
            :time (s / submit-01
                  :ARG0 t
                  :ARG2 (t2 / theory
                        :name (n / name
                              :op1 ""Evo"")))
            :mod (p / probable)
            :time (a2 / already))
      :op2 (p2 / promise-01
            :ARG0 t
            :ARG2 (q / question-03
                  :polarity -
                  :ARG0 t
                  :ARG1 t2
                  :time (e / ever))))"
Evolution is continuously questioned and tested . And it holds . You ? You can't even submit a hypothesis .,"# ::snt Evolution is continuously questioned and tested . And it holds . You ? You can't even submit a hypothesis .
(m / multi-sentence
      :snt1 (a / and
            :op1 (q / question-01
                  :ARG1 (e / evolution)
                  :ARG1-of (c / continue-01))
            :op2 (t / test-01
                  :ARG1 e))
      :snt2 (a2 / and
            :op2 (h / hold-13
                  :ARG0 (ii / it)))
      :snt3 (y / you
            :polarity (a3 / amr-unknown)
            :mod (e2 / even)
            :ARG1-of (s / submit-01
                  :ARG1 (t2 / thing
                        :ARG1-of (h2 / hypothesize-01))
                  :ARG1-of (p / possible-01
                        :polarity -))
            :ARG0-of s))"
glad you inserted that there ... it's been a while since you threw a prayer to evolution in this thread .,"# ::snt glad you inserted that there ... it's been a while since you threw a prayer to evolution in this thread .
(m / multi-sentence
      :snt1 (g / glad-02
            :ARG0 (ii / insert-01
                  :ARG0 (y / you)
                  :ARG1 (t / that)
                  :ARG2 (t2 / there)))
      :snt2 (p / pass-03
            :ARG1 (w / while)
            :time (s / since
                  :op1 (t3 / throw-01
                        :ARG0 (y2 / you)
                        :ARG1 (t4 / thing
                              :ARG1-of (p2 / pray-01
                                    :beneficiary (e / evolve-01)))
                        :location (t5 / thread
                              :mod (t6 / this))))))"
"apologies , I was just reminded of the "" peace be upon him "" compulsion of Muslims after naming Muhammad .","# ::snt apologies , I was just reminded of the "" peace be upon him "" compulsion of Muslims after naming Muhammad .
(a / and
      :op1 (a2 / apologize-01
            :ARG0 (ii / i))
      :op2 (r / remind-01
            :ARG1 (c / compel-01
                  :ARG1 (p / person
                        :mod (r2 / religious-group
                              :name (n / name
                                    :op1 ""Muslim"")))
                  :ARG2 (p2 / peace
                        :location (u / upon
                              :op1 (h / he)))
                  :time (a3 / after
                        :op1 (n2 / name-01
                              :ARG0 p
                              :ARG1 (p3 / person
                                    :name (n3 / name
                                          :op1 ""Muhammad"")))))
            :ARG2 ii
            :mod (j / just)))"
"You are displaying odd & paranoid thinking & then typing these thoughts & hitting "" send . "" Are you ok ?","# ::snt You are displaying odd & paranoid thinking & then typing these thoughts & hitting "" send . "" Are you ok ?
(m / multi-sentence
      :snt1 (a / and
            :op1 (d / display-01
                  :ARG0 (y / you)
                  :ARG1 (t / think-01
                        :mod (o / odd)
                        :mod (p / paranoid)))
            :op2 (a2 / and
                  :op1 (t2 / type-01
                        :ARG0 y
                        :ARG1 (t3 / think-01
                              :mod (t4 / this)))
                  :op2 (h / hit-02
                        :ARG0 y
                        :ARG1 (s / send-01))
                  :time (t5 / then)))
      :snt2 (o2 / okay-04
            :polarity (a3 / amr-unknown)
            :ARG1 (y2 / you)))"
"that type of dialog in my country is known as banter , and considered humorous ... As you were","# ::snt that type of dialog in my country is known as banter , and considered humorous ... As you were
(a / and
      :op1 (k / know-02
            :ARG1 (d / dialog
                  :mod (t / type
                        :mod (t2 / that))
                  :location (c / country
                        :poss (ii / i)))
            :ARG2 (b / banter-01))
      :op2 (c2 / consider-01
            :ARG1 (h / humor-01
                  :ARG0 d))
      :ARG1-of (c3 / cause-01
            :ARG0 (y / you
                  :domain y)))"
"If you say so . So your thoughts on my professors was just "" humorous banter "" ? <URL>","# ::snt If you say so . So your thoughts on my professors was just "" humorous banter "" ? <URL>
(m / multi-sentence
      :snt1 (h / have-condition-91
            :ARG2 (s / say-01
                  :ARG0 (y / you)
                  :ARG1 (s2 / so)))
      :snt2 (c / cause-01
            :ARG1 (t / think-01
                  :ARG0 (y2 / you)
                  :ARG1 (b / banter-01
                        :ARG0 (p / person
                              :ARG0-of (h2 / have-rel-role-91
                                    :ARG1 (ii / i)
                                    :ARG2 (p2 / professor)))
                        :ARG2-of (h3 / humor-01)
                        :mod (j / just))
                  :polarity (a / amr-unknown))))"
