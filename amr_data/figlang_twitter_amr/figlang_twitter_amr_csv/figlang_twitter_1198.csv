comment,amr
"So , what you're agreeing with is : healthcare is a right when it's life or death , right ?","# ::snt So , what you're agreeing with is : healthcare is a right when it's life or death , right ?
(a / agree-01
      :ARG0 (y / you)
      :ARG1 (r / right-05
            :ARG2 (h / healthcare)
            :time (o / or
                  :op1 (l / live-01)
                  :op2 (d / die-01)))
      :ARG1-of (r2 / request-confirmation-91))"
I am saying that is what the law is . Do not agree that even in life or death you can force another to do something .,"# ::snt I am saying that is what the law is . Do not agree that even in life or death you can force another to do something .
(m / multi-sentence
      :snt1 (s / say-01
            :ARG0 (ii / i)
            :ARG1 (l / law
                  :domain (t / that)))
      :snt2 (a / agree-01
            :polarity -
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (p / possible-01
                  :ARG1 (f / force-01
                        :ARG0 y
                        :ARG1 (a2 / another)
                        :ARG2 (d / do-02
                              :ARG0 a2
                              :ARG1 (s2 / something))
                        :time (o / or
                              :op1 (l2 / live-01)
                              :op2 (d2 / die-01)
                              :mod (e / even))))))"
"is not about "" forcing "" , it's about "" paying for "" . It would remove a reason to deny treatment , the Dr volunteers B a Dr","# ::snt is not about "" forcing "" , it's about "" paying for "" . It would remove a reason to deny treatment , the Dr volunteers B a Dr
(m / multi-sentence
      :snt1 (c / concern-02
            :polarity -
            :ARG0 (ii / it)
            :ARG1 (f / force-01))
      :snt2 (c2 / concern-02
            :ARG0 (ii2 / it)
            :ARG1 (p / pay-01
                  :ARG3 (m2 / monetary-quantity)
                  :ARG3 m2))
      :snt3 (r / remove-01
            :ARG0 (ii3 / it)
            :ARG1 (r2 / reason
                  :ARG0-of (c3 / cause-01
                        :ARG1 (d / deny-01
                              :ARG1 (t / treat-03)))))
      :snt4 (p2 / person
            :ARG0-of (v / volunteer-01)
            :mod (d2 / doctor)
            :mod (d3 / doctor)))"
"% of doctors enter into medicine for the money . Ok so "" paying for "" . Who is responsible for paying for YOUR health ?","# ::snt % of doctors enter into medicine for the money . Ok so "" paying for "" . Who is responsible for paying for YOUR health ?
(m / multi-sentence
      :snt1 (e / enter-01
            :ARG0 (p / person
                  :ARG1-of (ii / include-91
                        :ARG2 (p2 / person
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (d / doctor)))
                        :ARG3 (p3 / percentage-entity
                              :value 90)))
            :ARG1 (m2 / medicine)
            :purpose (m3 / money))
      :snt2 (c / cause-01
            :ARG1 (o / okay-01
                  :ARG1 (p4 / pay-01)))
      :snt3 (r / responsible-03
            :ARG0 (a / amr-unknown)
            :ARG1 (p5 / pay-01
                  :ARG3 (h2 / health
                        :poss (y / you)))))"
"Nice statistic ! Too bad it's % false . We're in it together , our costs are linked , & we can get more less if we pool resources","# ::snt Nice statistic ! Too bad it's % false . We're in it together , our costs are linked , & we can get more less if we pool resources
(m / multi-sentence
      :snt1 (s / statistic
            :ARG1-of (n / nice-01))
      :snt2 (h / have-degree-91
            :ARG1 (ii / it)
            :ARG2 (b / bad-07
                  :ARG1 ii)
            :ARG3 (t / too))
      :snt3 (a / and
            :op1 (b2 / be-located-at-91
                  :ARG1 (w / we)
                  :ARG2 (ii2 / it)
                  :mod (t2 / together))
            :op2 (l / link-01
                  :ARG1 (c / cost-01
                        :ARG2 w))
            :op3 (p / possible-01
                  :ARG1 (g / get-01
                        :ARG0 w
                        :ARG1 (l2 / less
                              :ARG1-of (h2 / have-quant-91
                                    :ARG3 (m2 / more))))
                  :condition (p2 / pool-01
                        :ARG0 w
                        :ARG1 (r / resource)))))"
and why is that ? That is the problem with your arguments .,"# ::snt and why is that ? That is the problem with your arguments .
(m / multi-sentence
      :snt1 (a / and
            :op2 (a2 / amr-unknown
                  :ARG0-of (c / cause-01
                        :ARG1 (t / that))))
      :snt2 (p / problem
            :domain (t2 / that)
            :topic (a3 / argue-01
                  :ARG0 (y / you))))"
"cuz when I don't pay , you pay more . When my ins comp denies coverage & I go on medicare , your taxes pay for it anyway .","# ::snt cuz when I don't pay , you pay more . When my ins comp denies coverage & I go on medicare , your taxes pay for it anyway .
(m / multi-sentence
      :snt1 (c / cause-01
            :ARG0 (p / pay-01
                  :ARG0 (y / you)
                  :mod (m2 / more)
                  :time (p2 / pay-01
                        :polarity -
                        :ARG0 (ii / i))))
      :snt2 (p3 / pay-01
            :ARG0 (y2 / you)
            :ARG3 (a / and
                  :op1 (d / deny-01
                        :ARG0 (c2 / comp
                              :mod (ii2 / insure-02)
                              :poss (ii3 / i))
                        :ARG1 (c3 / cover-01))
                  :op2 (g / go-06
                        :ARG0 ii3
                        :ARG1 (p4 / program
                              :name (n / name
                                    :op1 ""Medicare""))))
            :mod (a2 / anyway)))"
no that is NOT why . That is one part of why . Keep guessing . Your whole argument is superficial rhetoric your were told to believe .,"# ::snt no that is NOT why . That is one part of why . Keep guessing . Your whole argument is superficial rhetoric your were told to believe .
(m / multi-sentence
      :snt1 (c / cause-01
            :polarity -
            :ARG0 (t / that))
      :snt2 (p / part
            :quant 1
            :part-of (c2 / cause-01)
            :domain (t2 / that))
      :snt3 (k / keep-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (g / guess-01
                  :ARG0 y))
      :snt4 (r / rhetoric
            :mod (s / superficial)
            :ARG1-of (b / believe-01
                  :ARG0 (y2 / you)
                  :ARG1-of (t3 / tell-01
                        :ARG2 y2))
            :domain (a / argue-01
                  :ARG0 y2
                  :mod (w / whole))))"
"lol , you're not countering my arguments by simply calling them rhetoric . I'm using logic , you're trying to label it something else","# ::snt lol , you're not countering my arguments by simply calling them rhetoric . I'm using logic , you're trying to label it something else
(m / multi-sentence
      :snt1 (c / counter-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :ARG1-of (a / argue-01
                        :ARG0 (ii / i)))
            :manner (c2 / call-01
                  :ARG0 y
                  :ARG1 t
                  :ARG2 (r / rhetoric)
                  :ARG1-of (s / simple-02))
            :ARG2-of (l / laugh-01
                  :mode expressive
                  :ARG0 (ii2 / i)
                  :manner (l2 / loud)))
      :snt2 (u / use-01
            :ARG0 (ii3 / i)
            :ARG1 (l3 / logic))
      :snt3 (t2 / try-01
            :ARG0 (y2 / you)
            :ARG1 (l4 / label-01
                  :ARG0 y2
                  :ARG1 (ii4 / it)
                  :ARG2 (s2 / something
                        :mod (e / else)))))"
no you are not using logic . If you were you would not be FOR the ACA . You are just regurgitating rhetoric .,"# ::snt no you are not using logic . If you were you would not be FOR the ACA . You are just regurgitating rhetoric .
(m / multi-sentence
      :snt1 (u / use-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (l / logic))
      :snt2 (h / have-condition-91
            :ARG1 (s / support-01
                  :polarity -
                  :ARG0 (y2 / you)
                  :ARG1 (l2 / law
                        :name (n / name
                              :op1 ""ACA"")))
            :ARG2 (p / person
                  :domain y2))
      :snt3 (r / regurgitate-01
            :ARG0 (y3 / you)
            :ARG1 (r2 / rhetoric)
            :mod (j / just)))"
Who's talking about the ACA ? I'm arguing for a system . ACA not even close to where we should be .,"# ::snt Who's talking about the ACA ? I'm arguing for a system . ACA not even close to where we should be .
(m / multi-sentence
      :snt1 (t / talk-01
            :ARG0 (a / amr-unknown)
            :ARG1 (l / law
                  :name (n / name
                        :op1 ""ACA"")))
      :snt2 (a2 / argue-02
            :ARG0 (ii / i)
            :ARG2 (s / system))
      :snt3 (c / close-10
            :polarity -
            :ARG1 l
            :ARG2 (t2 / thing
                  :ARG2-of (r / recommend-01
                        :ARG1 (b / be-located-at-91
                              :ARG1 (w / we))))
            :mod (e / even)))"
hahaha . Oh you're serious . Now I understand why you don't get a simple request to end the conversation .,"# ::snt hahaha . Oh you're serious . Now I understand why you don't get a simple request to end the conversation .
(m / multi-sentence
      :snt1 (s / serious-01
            :ARG1 (y / you)
            :mod (o / oh
                  :mode expressive))
      :snt2 (u / understand-01
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG0-of (c / cause-01
                        :ARG1 (g / get-01
                              :polarity -
                              :ARG0 (y2 / you)
                              :ARG1 (r / request-01
                                    :ARG1 (e / end-01
                                          :ARG0 y2
                                          :ARG1 (c2 / converse-01))
                                    :ARG1-of (s2 / simple-02)))))
            :time (n / now)))"
"I care enough to not let points stand uncountered so that when others see , they will get why I'm right and you're wrong .","# ::snt I care enough to not let points stand uncountered so that when others see , they will get why I'm right and you're wrong .
(c / care-01
      :ARG0 (ii / i)
      :ARG1-of (h / have-quant-91
            :ARG3 (e / enough)
            :ARG6 (l / let-01
                  :polarity -
                  :ARG0 ii
                  :ARG1 (s / stand-04
                        :ARG1 (p / point)
                        :ARG2 (u / uncount-01
                              :ARG1 p))
                  :purpose (g / get-01
                        :ARG0 (o / other)
                        :ARG1 (t / thing
                              :ARG0-of (c2 / cause-01
                                    :ARG1 (a / and
                                          :op1 (r / right-06
                                                :ARG1 ii)
                                          :op2 (w / wrong-04
                                                :ARG1 (y / you)))))
                        :time (s2 / see-01
                              :ARG0 o)))))"
Didn't you have a family to get to ? Wasn't that your whole reason for running away ? go ahead now . go on .,"# ::snt Didn't you have a family to get to ? Wasn't that your whole reason for running away ? go ahead now . go on .
(m / multi-sentence
      :snt1 (h / have-03
            :polarity -
            :ARG0 (y / you)
            :ARG1 (f / family)
            :purpose (g / get-05
                  :ARG1 y
                  :ARG2 f)
            :polarity (a / amr-unknown))
      :snt2 (c / cause-01
            :polarity (a2 / amr-unknown)
            :ARG0 (t / that)
            :ARG1 (r / run-02
                  :ARG0 (y2 / you)
                  :direction (a3 / away))
            :mod (w / whole))
      :snt3 (g2 / go-06
            :mode imperative
            :ARG0 (y3 / you)
            :ARG2 (a4 / ahead)
            :time (n / now))
      :snt4 (g3 / go-on-15
            :mode imperative
            :ARG0 y3))"
"wow so clueless he doesn't even realize he is being mocked . Running away ? Nah . Critical thinking , hit the books now .","# ::snt wow so clueless he doesn't even realize he is being mocked . Running away ? Nah . Critical thinking , hit the books now .
(m / multi-sentence
      :snt1 (h / have-degree-91
            :ARG1 (h2 / he)
            :ARG2 (c / clueless)
            :ARG3 (s / so)
            :ARG6 (r / realize-01
                  :polarity -
                  :ARG0 h2
                  :ARG1 (m2 / mock-01
                        :ARG1 h2)
                  :mod (e / even))
            :mod (w / wow
                  :mode expressive))
      :snt2 (r2 / run-02
            :polarity (a / amr-unknown)
            :direction (a2 / away)
            :polarity (a3 / amr-unknown))
      :snt3 (h3 / hit-01
            :ARG1 (b / book)
            :ARG2 (t / think-01
                  :manner (c2 / criticism-04))
            :time (n / now)))"
"either that , or your mocking has no effect ... Believe what you want , and run away all you want . Nobody's stopping you .","# ::snt either that , or your mocking has no effect ... Believe what you want , and run away all you want . Nobody's stopping you .
(m / multi-sentence
      :snt1 (a / affect-01
            :polarity -
            :ARG0 (o / or
                  :op1 (t / that)
                  :op2 (m2 / mock-01
                        :ARG0 (y / you))))
      :snt2 (a2 / and
            :op1 (b / believe-01
                  :mode imperative
                  :ARG0 (y2 / you)
                  :ARG1 (t2 / thing
                        :ARG1-of (w / want-01
                              :ARG0 y2)))
            :op2 (r / run-02
                  :mode imperative
                  :ARG0 y2
                  :direction (a3 / away)
                  :mod (a4 / all
                        :ARG1-of (w2 / want-01
                              :ARG0 y2))))
      :snt3 (s / stop-01
            :ARG0 (n / nobody)
            :ARG1 (y3 / you)))"
