comment,amr
"Basically , Jews moving into town caused otherwise good people to murder Jews ? What kind of sick analysis is this from the ? Since when do you blame murder victims for murder ? ! Only when it s a Jew ? ! Shameful <URL>","# ::snt Basically , Jews moving into town caused otherwise good people to murder Jews ? What kind of sick analysis is this from the ? Since when do you blame murder victims for murder ? ! Only when it s a Jew ? ! Shameful <URL>
(m / multi-sentence
      :snt1 (c / cause-01
            :ARG0 (m2 / move-01
                  :ARG0 (p / person
                        :mod (r / religious-group
                              :name (n / name
                                    :op1 ""Jew"")))
                  :ARG2 (t / town))
            :ARG1 (m3 / murder-01
                  :ARG0 (p2 / person
                        :ARG1-of (g / good-02)
                        :ARG2-of (e / except-01
                              :ARG1 m2))
                  :ARG1 p)
            :mod (b / basic))
      :snt2 (a / analyze-01
            :ARG0 (a2 / amr-unknown)
            :ARG1 (t2 / this)
            :ARG1-of (s / sick-02))
      :snt3 (b2 / blame-01
            :ARG0 (y / you)
            :ARG1 (v / victim
                  :ARG1-of (m4 / murder-01))
            :ARG2 (m5 / murder-01)
            :time (s2 / since
                  :op1 a2))
      :time (o / only
            :op1 (p3 / person
                  :mod r))
      :snt4 (s3 / shame-02))"
If a large group of ppl I do not like move into my town then violence is acceptable ?,"# ::snt If a large group of ppl I do not like move into my town then violence is acceptable ?
(p / possible-01
      :ARG1 (a / accept-01
            :ARG1 (v / violence))
      :polarity (a2 / amr-unknown)
      :condition (d / dislike-01
            :ARG0 (g / group
                  :mod (l / large)
                  :consist-of (p2 / person
                        :mod (m / multiple)))
            :ARG1 (m2 / move-01
                  :ARG1 p2
                  :ARG2 (t / town
                        :poss (ii / i)))))"
