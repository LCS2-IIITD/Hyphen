comment,amr
"newsflash the conservatives are going to get reelected whenever they call the ge , labour are hated","# ::snt newsflash the conservatives are going to get reelected whenever they call the ge , labour are hated
(n / newsflash
      :domain (r / reelect-01
            :ARG1 (p / person
                  :mod (c / conservative))
            :ARG1-of (c2 / cause-01
                  :ARG0 (h / hate-01
                        :ARG0 (p2 / political-party
                              :name (n2 / name
                                    :op1 ""Labour""))))
            :time (c3 / call-01
                  :ARG0 p
                  :ARG1 (s / string-entity
                        :value ""ge"")
                  :mod (a / any))))"
"And that my friend is what all this nonsense is all about , Tory delay tacks to secure a re-election","# ::snt And that my friend is what all this nonsense is all about , Tory delay tacks to secure a re-election
(a / and
      :op2 (c / concern-02
            :ARG0 (a2 / all
                  :mod (t / this)
                  :mod (n / nonsense))
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (ii / i)
                        :ARG2 (f / friend))))
      :op3 (t2 / tack-01
            :ARG0 (p2 / political-party
                  :name (n2 / name
                        :op1 ""Tory""))
            :purpose (s / secure-01
                  :ARG0 p2
                  :ARG1 (r / reelect-01
                        :ARG1 p))))"
"the conservatives are assured of a landslide victory already as labour R unelectable , the gov have impliment","# ::snt the conservatives are assured of a landslide victory already as labour R unelectable , the gov have impliment
(a / assure-01
      :ARG1 (p / political-party
            :name (n / name
                  :op1 ""Conservative""))
      :ARG2 (w / win-01
            :ARG0 p
            :mod (l / landslide))
      :time (a2 / already)
      :ARG1-of (c / cause-01
            :ARG0 (p2 / possible-01
                  :polarity -
                  :ARG1 (e / elect-01
                        :ARG1 (p3 / political-party
                              :name (n2 / name
                                    :op1 ""Labour"")))))
      :ARG1-of (ii / implicate-01
            :ARG0 (g / government-organization
                  :ARG0-of (g2 / govern-01))))"
which still doesn't alter the fact that simply repealing ECA would be a breach of a signed treaty,"# ::snt which still doesn't alter the fact that simply repealing ECA would be a breach of a signed treaty
(a / alter-01
      :polarity -
      :ARG0 (r / repeal-01
            :ARG1 (l / law
                  :name (n / name
                        :op1 ""ECA""))
            :ARG1-of (s / simple-02)
            :ARG0-of (b / breach-01
                  :ARG1 (t / treaty
                        :ARG1-of (s2 / sign-01))))
      :mod (s3 / still))"
your statements i willPut + theAdvice of cannot b dismised,"# ::snt your statements i willPut + theAdvice of cannot b dismised
(p / possible-01
      :polarity -
      :ARG1 (d / dismember-01
            :ARG1 (a / and
                  :op1 (s / state-01
                        :ARG0 (ii / i))
                  :op2 (a2 / advise-01
                        :ARG0 ii))))"
"Invoke Article then repeal ECA , its the safest option","# ::snt Invoke Article then repeal ECA , its the safest option
(a / and
      :op1 (ii / invoke-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a2 / article))
      :op2 (r / repeal-01
            :mode imperative
            :ARG0 y
            :ARG1 (l / law
                  :name (n / name
                        :op1 ""ECA""))
            :ARG1-of (m / mean-01
                  :ARG2 (o / option
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / safe-01)
                              :ARG3 (m2 / most))))))"
can i ask can you give me legal advice ?,"# ::snt can i ask can you give me legal advice ?
(p / possible-01
      :polarity (a / amr-unknown)
      :ARG1 (a2 / ask-02
            :ARG0 (ii / i)
            :ARG1 (p2 / possible-01
                  :ARG1 (a3 / advise-01
                        :ARG0 (y / you)
                        :ARG1 ii
                        :ARG1-of (l / legal-02)))
            :ARG2 y))"
That sentence clearly proves I am no Lawyer,"# ::snt That sentence clearly proves I am no Lawyer
(p / prove-01
      :ARG0 (s / sentence
            :mod (t / that))
      :ARG1 (l / lawyer
            :polarity -
            :domain (ii / i))
      :ARG1-of (c / clear-06))"
thats what i thought you are not qualified give legal advive,"# ::snt thats what i thought you are not qualified give legal advive
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (q / qualify-02
            :polarity -
            :ARG1 (y / you)
            :ARG1-of (c / cause-01
                  :ARG0 (g / give-01
                        :ARG0 y
                        :ARG1 (a / advise-01
                              :ARG0 y
                              :ARG1-of (l / legal-02))))))"
+ as such express your own opinnionns of law without knowledge,"# ::snt + as such express your own opinnionns of law without knowledge
(e / express-01
      :ARG0 (y / you)
      :ARG1 (o / opine-01
            :ARG0 y
            :topic (l / law))
      :manner (k / know-01
            :polarity -
            :ARG0 y)
      :mod (a / as-such))"
But has you are not actually in any position yourself its all irrelevant,"# ::snt But has you are not actually in any position yourself its all irrelevant
(c / contrast-01
      :ARG2 (r / relevant-01
            :polarity -
            :ARG1 (p / position-01
                  :polarity -
                  :ARG0 (y / you)
                  :ARG1 y
                  :mod (a / any)
                  :ARG1-of (a2 / actual-02))))"
"to take the advice of a fool is to be a bigger fool , thats why i listed","# ::snt to take the advice of a fool is to be a bigger fool , thats why i listed
(c / cause-01
      :ARG0 (h / have-degree-91
            :ARG1 (f / fool)
            :ARG2 (b / big)
            :ARG3 (m / more)
            :domain (t / take-01
                  :ARG1 (a / advise-01
                        :ARG0 (f2 / fool))))
      :ARG1 (l / list-01
            :ARG0 (ii / i)))"
So if they say A50 then repeal is the safest option will I still be a fool ?,"# ::snt So if they say A50 then repeal is the safest option will I still be a fool ?
(f / fool
      :polarity (a / amr-unknown)
      :domain (ii / i)
      :mod (s / still)
      :condition (s2 / say-01
            :ARG0 (t / they)
            :ARG1 (h / have-degree-91
                  :ARG1 (r / repeal-01
                        :ARG1 (p / product
                              :name (n / name
                                    :op1 ""A50"")))
                  :ARG2 (s3 / safe-01
                        :ARG0 p)
                  :ARG3 (m / most))))"
"Art is a notice that establishes process , any fail to accord we can walk away","# ::snt Art is a notice that establishes process , any fail to accord we can walk away
(a / and
      :op1 (n / notice-03
            :ARG0 (a2 / art)
            :ARG0-of (e / establish-01
                  :ARG1 (p / process-02)))
      :op2 (p2 / possible-01
            :ARG1 (w / walk-01
                  :ARG0 (w2 / we)
                  :ARG2 (a3 / away))
            :condition (f / fail-01
                  :ARG1 w2
                  :ARG2 (a4 / accord-03
                        :ARG0 w2)
                  :mod (a5 / any))))"
big question is why take an unnecessary risk when both result in fast Brexit,"# ::snt big question is why take an unnecessary risk when both result in fast Brexit
(q / question-01
      :ARG1 (t / thing
            :ARG0-of (c / cause-01
                  :ARG1 (r / risk-01
                        :ARG1-of (n / need-01
                              :polarity -)
                        :condition (r2 / result-01
                              :ARG1 (b / both)
                              :ARG2 (c2 / country
                                    :name (n2 / name
                                          :op1 ""Britain"")
                                    :ARG1-of (f / fast-02))))))
      :mod (b2 / big))"
"thats the object the quickest way out , no delay ,","# ::snt thats the object the quickest way out , no delay ,
(a / and
      :op1 (w / way
            :direction (o / out)
            :ARG1-of (h / have-degree-91
                  :ARG2 (q / quick-02
                        :ARG1 w)
                  :ARG3 (m / most))
            :domain (t / that))
      :op2 (d / delay-01
            :polarity -
            :domain t))"
I know I'm a fool for thinking this but the safest way is generally the best,"# ::snt I know I'm a fool for thinking this but the safest way is generally the best
(c / contrast-01
      :ARG1 (k / know-01
            :ARG0 (ii / i)
            :ARG1 (f / fool
                  :domain ii
                  :ARG1-of (c2 / cause-01
                        :ARG0 (t / think-01
                              :ARG0 ii
                              :ARG1 (t2 / this)))))
      :ARG2 (w / way
            :ARG1-of (h / have-degree-91
                  :ARG2 (s / safe-01
                        :ARG0 w)
                  :ARG3 (m / most)
                  :ARG5 (w2 / way
                        :ARG1-of (g / general-02)))
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (g2 / good-02
                        :ARG1 w)
                  :ARG3 (m2 / most))))"
i doubt your sincerity or the veracity of your arguments and ponder your advice,"# ::snt i doubt your sincerity or the veracity of your arguments and ponder your advice
(a / and
      :op1 (d / doubt-01
            :ARG0 (ii / i)
            :ARG1 (o / or
                  :op1 (s / sincerity
                        :poss (y / you))
                  :op2 (v / veracity
                        :poss (a2 / argue-01
                              :ARG0 y))))
      :op2 (p / ponder-01
            :ARG0 ii
            :ARG1 (a3 / advise-01
                  :ARG0 y)))"
"Don't worry about my sincerity , do some research and think logically","# ::snt Don't worry about my sincerity , do some research and think logically
(a / and
      :op1 (w / worry-02
            :polarity -
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (s / sincerity
                  :poss (ii / i)))
      :op2 (r / research-01
            :mode imperative
            :ARG0 y
            :quant (s2 / some))
      :op3 (t / think-01
            :mode imperative
            :ARG0 y
            :manner (l / logical)))"
im happy consult the listed my worry is that theres a dangerous rush A50,"# ::snt im happy consult the listed my worry is that theres a dangerous rush A50
(a / and
      :op1 (c / consult-01
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG1-of (l / list-01))
            :ARG1-of (h / happy-01
                  :ARG0 ii))
      :op2 (w / worry-01
            :ARG0 (r / rush-01
                  :mod (d / dangerous)
                  :domain (p / product
                        :name (n / name
                              :op1 ""A50"")))
            :ARG1 ii))"
