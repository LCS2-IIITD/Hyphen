# ::snt Not just “no” but “Hell no who the fuck are you kiddin’”
# ::tokens ["Not", "just", "\u201c", "no", "\u201d", "but", "\u201c", "Hell", "no", "who", "the", "fuck", "are", "you", "kiddin", "\u2019", "\u201d"]
# ::lemmas ["not", "just", "\"", "no", "\"", "but", "\"", "Hell", "no", "who", "the", "fuck", "be", "you", "kiddin", "'", "\""]
(c1-0 / contrast-01
      :ARG1 (c1-4 / say-01
                  :ARG1 (c1-7 / no)
                  :mod (c1-8 / just
                             :polarity -))
      :ARG2 (c1-1 / say-01
                  :ARG1 (c1-5 / kid-01
                              :ARG0 (c1-9 / you)
                              :ARG1 (c1-2 / amr-unknown
                                          :mod (c1-3 / fuck
                                                     :mode expressive)))
                  :mod (c1-6 / hell)))

# ::snt thats more like the amount Trump has to pay back from emoluments per month
# ::tokens ["that", "s", "more", "like", "the", "amount", "Trump", "has", "to", "pay", "back", "from", "emoluments", "per", "month"]
# ::lemmas ["that", "s", "more", "like", "the", "amount", "Trump", "have", "to", "pay", "back", "from", "emolument", "per", "month"]
(c2-9 / have-degree-of-resemblance-91
      :ARG1 (c2-7 / that)
      :ARG2 (c2-8 / amount
                  :ARG1-of (c2-4 / pay-01
                                 :ARG0 (c2-1 / person
                                             :name (c2-11 / name
                                                          :op1 "Trump"))
                                 :ARG3 (c2-5 / emolument)
                                 :ARG2-of (c2-0 / obligate-01
                                                :ARG1 c2-1)
                                 :mod (c2-12 / back)
                                 :frequency (c2-2 / rate-entity-91
                                                  :ARG3 (c2-6 / temporal-quantity
                                                              :unit (c2-10 / month)
                                                              :quant 1))))
      :ARG3 (c2-3 / more))

# ::snt FakeNews to give excuse for Drumpf and his minions not to repay the wasted taxpayer dollars
# ::tokens ["FakeNews", "to", "give", "excuse", "for", "Drumpf", "and", "his", "minions", "not", "to", "repay", "the", "wasted", "taxpayer", "dollars"]
# ::lemmas ["fakenews", "to", "give", "excuse", "for", "Drumpf", "and", "his", "minion", "not", "to", "repay", "the", "waste", "taxpayer", "dollar"]
(c3-9 / fake-News
      :purpose (c3-4 / excuse-02
                     :ARG1 (c3-8 / and
                                 :op1 (c3-5 / person
                                            :name (c3-11 / name
                                                         :op1 "Drumpf"))
                                 :op2 (c3-10 / minion
                                             :poss c3-5))
                     :ARG2 (c3-1 / repay-01
                                 :ARG0 c3-8
                                 :ARG1 (c3-3 / dollar
                                             :ARG1-of (c3-7 / waste-01)
                                             :source (c3-2 / person
                                                           :ARG0-of (c3-0 / pay-01
                                                                          :ARG1 (c3-6 / tax))))
                                 :polarity -)))

# ::snt Lies
# ::tokens ["Lies"]
# ::lemmas ["lie"]
(c4-0 / thing
      :ARG1-of (c4-1 / lie-08))

# ::snt Of course not
# ::tokens ["Of", "course", "not"]
# ::lemmas ["of", "course", "not"]
(c5-1 / have-polarity-91
      :mod (c5-0 / of-course)
      :ARG2 -)

# ::snt NO WAY
# ::tokens ["NO", "WAY"]
# ::lemmas ["no", "way"]
(c6-0 / way
      :polarity -)

# ::snt No of course not Ppl dont check veracity or source of bullshit news Best to ignore not publicize
# ::tokens ["No", "of", "course", "not", "Ppl", "do", "nt", "check", "veracity", "or", "source", "of", "bullshit", "news", "Best", "to", "ignore", "not", "publicize"]
# ::lemmas ["no", "of", "course", "not", "Ppl", "do", "not", "check", "veracity", "or", "source", "of", "bullshit", "news", "well", "to", "ignore", "not", "publicize"]
(c7-7 / and
      :op1 (c7-9 / have-polarity-91
                 :mod (c7-0 / of-course)
                 :ARG2 -)
      :op2 (c7-4 / check-01
                 :ARG0 (c7-3 / person)
                 :ARG1 (c7-1 / or
                             :op1 (c7-6 / veracity
                                        :poss (c7-12 / news
                                                     :ARG1-of (c7-14 / bullshit-01)))
                             :op2 (c7-8 / source
                                        :poss c7-12))
                 :ARG1-of (c7-13 / ignore-01
                                 :ARG1-of (c7-5 / have-degree-91
                                                :ARG2 (c7-11 / good-02
                                                             :ARG1 c7-13)
                                                :ARG3 (c7-10 / most)))
                 :polarity -)
      :op3 (c7-2 / publicize-01
                 :ARG1 c7-1
                 :polarity -))

# ::snt Lol
# ::tokens ["Lol"]
# ::lemmas ["Lol"]
(c8-1 / laugh-01
      :manner (c8-0 / loud)
      :mode expressive)

# ::snt Big Amen to that but dont hold your breath
# ::tokens ["Big", "Amen", "to", "that", "but", "do", "nt", "hold", "your", "breath"]
# ::lemmas ["big", "amen", "to", "that", "but", "do", "not", "hold", "your", "breath"]
(c9-1 / contrast-01
      :ARG1 (c9-4 / say-01
                  :ARG1 (c9-3 / Amen
                              :mod (c9-6 / big))
                  :ARG2 (c9-2 / that))
      :ARG2 (c9-5 / hold-01
                  :ARG0 (c9-7 / you)
                  :ARG1 (c9-0 / breathe-01
                              :ARG0 c9-7)
                  :polarity -
                  :mode imperative))

# ::snt Too good to be true
# ::tokens ["Too", "good", "to", "be", "true"]
# ::lemmas ["too", "good", "to", "be", "true"]
(c10-2 / have-degree-91
       :ARG2 (c10-3 / good-02)
       :ARG3 (c10-1 / too)
       :ARG6 (c10-0 / possible-01
                    :ARG1 (c10-4 / true-01)
                    :polarity -))
