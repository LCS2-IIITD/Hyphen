# ::snt WAS nuts
# ::tokens ["WAS", "nuts"]
# ::lemmas ["be", "nuts"]
(c1-1 / nuts
      :domain (c1-0 / person))

# ::snt Snopes says that story is fake just as an FYI punniness notwithstanding
# ::tokens ["Snopes", "says", "that", "story", "is", "fake", "just", "as", "an", "FYI", "punniness", "notwithstanding"]
# ::lemmas ["Snopes", "say", "that", "story", "be", "fake", "just", "as", "an", "FYI", "punniness", "notwithstanding"]
(c2-5 / say-01
      :ARG0 (c2-1 / publication
                  :name (c2-7 / name
                              :op1 "Snopes"))
      :ARG1 (c2-4 / fake-02
                  :ARG1 (c2-3 / story
                              :mod (c2-2 / that))
                  :ARG1-of (c2-6 / have-purpose-91
                                 :ARG2 (c2-8 / inform-01
                                             :ARG1 (c2-10 / you)
                                             :ARG2 (c2-0 / punniness))
                                 :mod (c2-9 / just))))

# ::snt What Would Wile E Coyote do
# ::tokens ["What", "Would", "Wile", "E", "Coyote", "do"]
# ::lemmas ["what", "Would", "Wile", "E", "Coyote", "do"]
(c3-0 / do-02
      :ARG0 (c3-1 / person
                  :name (c3-2 / name
                              :op1 "Wile"
                              :op2 "E"
                              :op3 "Coyote"))
      :ARG1 (c3-3 / amr-unknown))

# ::snt Please find evidence that he is a Republican I want to believe it badly
# ::tokens ["Please", "find", "evidence", "that", "he", "is", "a", "Republican", "I", "want", "to", "believe", "it", "badly"]
# ::lemmas ["please", "find", "evidence", "that", "he", "be", "a", "Republican", "i", "want", "to", "believe", "it", "badly"]
(c4-1 / cause-01
      :ARG0 (c4-5 / want-01
                  :ARG0 (c4-9 / i)
                  :ARG1 (c4-10 / believe-01
                               :ARG0 c4-9
                               :ARG1 (c4-2 / evidence-01
                                           :ARG1 (c4-7 / have-org-role-91
                                                       :ARG0 (c4-3 / he)
                                                       :ARG1 (c4-4 / political-party
                                                                   :name (c4-8 / name
                                                                               :op1 "Republican"))))
                               :ARG1-of (c4-0 / bad-05)))
      :ARG1 (c4-6 / find-01
                  :ARG0 (c4-11 / you)
                  :ARG1 c4-2
                  :mode imperative
                  :polite +))

# ::snt And Im not mad about it
# ::tokens ["And", "I", "m", "not", "mad", "about", "it"]
# ::lemmas ["and", "i", "be", "not", "mad", "about", "it"]
(c5-0 / and
      :op2 (c5-3 / mad-04
                 :ARG0 (c5-1 / it)
                 :ARG1 (c5-2 / i)
                 :polarity -))

# ::snt Clearly it wasnt a bong at all but he was so enamoured with that name we thought best not to correct him
# ::tokens ["Clearly", "it", "was", "nt", "a", "bong", "at", "all", "but", "he", "was", "so", "enamoured", "with", "that", "name", "we", "thought", "best", "not", "to", "correct", "him"]
# ::lemmas ["clearly", "it", "be", "not", "a", "bong", "at", "all", "but", "he", "be", "so", "enamour", "with", "that", "name", "we", "think", "well", "not", "to", "correct", "him"]
(c6-1 / contrast-01
      :ARG1 (c6-15 / bong
                   :domain (c6-14 / it)
                   :mod (c6-7 / at-all)
                   :ARG1-of (c6-8 / clear-06)
                   :polarity -)
      :ARG2 (c6-9 / have-degree-91
                  :ARG1 (c6-3 / he)
                  :ARG2 (c6-2 / enamour-01
                              :ARG0 (c6-13 / name
                                           :mod (c6-5 / that))
                              :ARG1 c6-3)
                  :ARG3 (c6-10 / so)
                  :ARG6 (c6-4 / think-01
                              :ARG0 (c6-6 / we)
                              :ARG1 (c6-0 / correct-01
                                          :ARG0 c6-6
                                          :ARG1 c6-3
                                          :ARG1-of c6-9
                                          :ARG2 (c6-11 / good-02)
                                          :ARG3 (c6-12 / most)
                                          :polarity -))))

# ::snt A very Florida story
# ::tokens ["A", "very", "Florida", "story"]
# ::lemmas ["a", "very", "Florida", "story"]
(c7-1 / story
      :location (c7-3 / state
                      :name (c7-0 / name
                                  :op1 "Florida")
                      :degree (c7-2 / very)))

# ::snt Hehe nuts
# ::tokens ["Hehe", "nuts"]
# ::lemmas ["Hehe", "nut"]
(c8-0 / nuts
      :domain (c8-1 / hehe
                    :mode expressive))

# ::snt Fake story Dont trust anything from that publication Dont spread it either
# ::tokens ["Fake", "story", "Do", "nt", "trust", "anything", "from", "that", "publication", "Do", "nt", "spread", "it", "either"]
# ::lemmas ["fake", "story", "do", "not", "trust", "anything", "from", "that", "publication", "do", "not", "spread", "it", "either"]
(c9-5 / and
      :op1 (c9-3 / trust-02
                 :ARG0 (c9-9 / you)
                 :ARG1 (c9-2 / anything
                             :source (c9-0 / publication
                                           :mod (c9-8 / that)))
                 :polarity -
                 :mode imperative)
      :op2 (c9-7 / spread-03
                 :ARG0 c9-9
                 :ARG1 c9-2
                 :mod (c9-1 / either)
                 :polarity -
                 :mode imperative)
      :topic (c9-4 / story
                   :ARG1-of (c9-6 / fake-02)))

# ::snt Its less nuts than when he started
# ::tokens ["Its", "less", "nuts", "than", "when", "he", "started"]
# ::lemmas ["its", "less", "nuts", "than", "when", "he", "start"]
(c10-4 / have-degree-91
       :ARG1 (c10-6 / it)
       :ARG2 (c10-5 / nuts)
       :ARG3 (c10-3 / less)
       :ARG4 (c10-1 / time
                    :time-of (c10-2 / start-01
                                    :ARG0 (c10-0 / he))))

# ::snt Florida
# ::tokens ["Florida"]
# ::lemmas ["Florida"]
(c11-1 / state
       :name (c11-0 / name
                    :op1 "Florida"))

# ::snt oh Florida
# ::tokens ["oh", "Florida"]
# ::lemmas ["oh", "Florida"]
(c12-2 / state
       :name (c12-1 / name
                    :op1 "Florida")
       :mod (c12-0 / oh
                   :mode expressive))

# ::snt Imani
# ::tokens ["Imani"]
# ::lemmas ["Imani"]
(c13-0 / person
       :name (c13-1 / name
                    :op1 "Imani"))

# ::snt OMG Still laughing OK First  you said this is nuts Hilarious Second His future generations of parttime pizza workers are no more
# ::tokens ["OMG", "Still", "laughing", "OK", "First", " ", "you", "said", "this", "is", "nuts", "Hilarious", "Second", "His", "future", "generations", "of", "parttime", "pizza", "workers", "are", "no", "more"]
# ::lemmas ["OMG", "still", "laugh", "ok", "First", " ", "you", "say", "this", "be", "nuts", "Hilarious", "Second", "his", "future", "generation", "of", "parttime", "pizza", "worker", "be", "no", "more"]
(c14-14 / multi-sentence
        :snt1 (c14-13 / laugh-01
                      :ARG0 (c14-18 / i)
                      :mod (c14-12 / still)
                      :mod (c14-0 / oh-my-god
                                  :mode expressive)
                      :ARG1-of (c14-2 / okay-01))
        :snt2 (c14-9 / say-01
                     :ARG0 (c14-19 / you)
                     :ARG1 (c14-17 / nuts
                                   :domain (c14-7 / this))
                     :li 1)
        :snt3 (c14-15 / hilarious
                      :li 2)
        :snt4 (c14-8 / say-01
                     :ARG0 (c14-6 / he)
                     :ARG1 (c14-16 / generation
                                   :consist-of (c14-5 / person
                                                      :ARG0-of (c14-10 / work-01
                                                                       :ARG1 (c14-3 / pizza))
                                                      :mod (c14-1 / part-time))
                                   :time (c14-11 / future)
                                   :mod (c14-4 / more
                                               :polarity -))
                     :li 2))

# ::snt Darwin Award Runner  Up
# ::tokens ["Darwin", "Award", "Runner", " ", "Up"]
# ::lemmas ["Darwin", "Award", "Runner", " ", "up"]
(c15-1 / person
       :ARG0-of (c15-0 / run-02
                       :ARG1 (c15-3 / award
                                    :name (c15-4 / name
                                                 :op1 "Darwin"
                                                 :op2 "Award")))
       :ARG1-of (c15-2 / up-03))

# ::snt I think that makes him eligible for a Darwin Award
# ::tokens ["I", "think", "that", "makes", "him", "eligible", "for", "a", "Darwin", "Award"]
# ::lemmas ["i", "think", "that", "make", "him", "eligible", "for", "a", "Darwin", "Award"]
(c16-0 / think-01
       :ARG0 (c16-6 / i)
       :ARG1 (c16-3 / make-02
                    :ARG0 (c16-7 / that)
                    :ARG1 (c16-1 / qualify-02
                                 :ARG1 (c16-4 / he)
                                 :ARG2 (c16-2 / award
                                              :name (c16-5 / name
                                                           :op1 "Darwin"
                                                           :op2 "Award")))))

# ::snt Wait what How Do I even want to know P
# ::tokens ["Wait", "what", "How", "Do", "I", "even", "want", "to", "know", "P"]
# ::lemmas ["wait", "what", "how", "do", "i", "even", "want", "to", "know", "p"]
(c17-6 / multi-sentence
       :snt1 (c17-3 / wait-01
                    :ARG1 (c17-9 / you)
                    :mode imperative)
       :snt2 (c17-0 / want-01
                    :ARG0 (c17-8 / i)
                    :ARG1 (c17-5 / know-01
                                 :ARG0 c17-8
                                 :ARG1 (c17-1 / person
                                              :name (c17-7 / name
                                                           :op1 "P")))
                    :mod (c17-2 / even)
                    :manner (c17-4 / amr-unknown)))

# ::snt Ouch
# ::tokens ["Ouch"]
# ::lemmas ["ouch"]
(c18-0 / ouch
       :mode expressive)

# ::snt Dont try this at home kids
# ::tokens ["Do", "nt", "try", "this", "at", "home", "kids"]
# ::lemmas ["do", "not", "try", "this", "at", "home", "kid"]
(c19-2 / say-01
       :ARG0 (c19-4 / i)
       :ARG1 (c19-0 / try-01
                    :ARG0 (c19-1 / kid)
                    :ARG1 (c19-5 / this)
                    :location (c19-3 / home)
                    :polarity -
                    :mode imperative)
       :ARG2 c19-1)

# ::snt At least he qualifies for a Darwin Award without dying though
# ::tokens ["At", "least", "he", "qualifies", "for", "a", "Darwin", "Award", "without", "dying", "though"]
# ::lemmas ["at", "least", "he", "qualify", "for", "a", "Darwin", "Award", "without", "die", "though"]
(c20-3 / qualify-02
       :ARG1 (c20-5 / he)
       :ARG2 (c20-4 / award
                    :name (c20-6 / name
                                 :op1 "Darwin"
                                 :op2 "Award"))
       :mod (c20-2 / at-least)
       :manner (c20-0 / die-01
                      :ARG1 c20-5
                      :polarity -)
       :ARG1-of (c20-1 / have-concession-91))

# ::snt whatever happened to just using wrapping paperJob 15s BabyBoomer
# ::tokens ["whatever", "happened", "to", "just", "using", "wrapping", "paperJob", "15s", "BabyBoomer"]
# ::lemmas ["whatever", "happen", "to", "just", "use", "wrapping", "paperjob", "15s", "BabyBoomer"]
(c21-3 / event
       :mod (c21-6 / whatever)
       :mod (c21-4 / use-01
                   :ARG0 (c21-5 / person
                                :name (c21-8 / name
                                             :op1 "Job"
                                             :op2 15)
                                :ARG0-of (c21-7 / have-rel-role-91
                                                :ARG2 (c21-9 / babyBoomer)))
                   :ARG1 (c21-0 / paper
                                :ARG2-of (c21-1 / wrap-01))
                   :mod (c21-2 / just)))

# ::snt I understand the separate parts of the headline but fear how one led to the other
# ::tokens ["I", "understand", "the", "separate", "parts", "of", "the", "headline", "but", "fear", "how", "one", "led", "to", "the", "other"]
# ::lemmas ["i", "understand", "the", "separate", "part", "of", "the", "headline", "but", "fear", "how", "one", "lead", "to", "the", "other"]
(c22-2 / contrast-01
       :ARG1 (c22-3 / understand-01
                    :ARG0 (c22-11 / i)
                    :ARG1 (c22-4 / part
                                 :ARG1-of (c22-8 / separate-02)
                                 :part-of (c22-5 / thing
                                                 :ARG2-of (c22-9 / headline-01))))
       :ARG2 (c22-7 / fear-01
                    :ARG0 c22-11
                    :ARG1 (c22-12 / thing
                                  :manner-of (c22-10 / lead-01
                                                     :ARG0 (c22-0 / one)
                                                     :ARG4 (c22-6 / thing
                                                                  :mod (c22-1 / other))))))

# ::snt Well they were nuts
# ::tokens ["Well", "they", "were", "nuts"]
# ::lemmas ["well", "they", "be", "nuts"]
(c23-0 / nuts
       :domain (c23-1 / they)
       :mod (c23-2 / well))

# ::snt SwiftOnSecurity Amusing that the fundamental concept of the scuba bong itself wasn’t unsound… just a bad tank
# ::tokens ["SwiftOnSecurity", "Amusing", "that", "the", "fundamental", "concept", "of", "the", "scuba", "bong", "itself", "was", "n\u2019t", "unsound", "\u2026", "just", "a", "bad", "tank"]
# ::lemmas ["SwiftOnSecurity", "Amusing", "that", "the", "fundamental", "concept", "of", "the", "scuba", "bong", "itself", "be", "not", "unsound", "\u2026", "just", "a", "bad", "tank"]
(c24-7 / and
       :op1 (c24-5 / amend-01
                   :ARG0 (c24-3 / person
                                :name (c24-10 / name
                                              :op1 "SwiftOnSecurity"))
                   :ARG1 (c24-0 / ound-00
                                :ARG1 (c24-4 / concept
                                             :mod (c24-8 / fundamental)
                                             :topic (c24-11 / bong
                                                            :mod (c24-9 / scuba)))
                                :polarity -))
       :op2 (c24-6 / tank
                   :ARG1-of (c24-1 / bad-07)
                   :mod (c24-2 / just)
                   :domain c24-11))

# ::snt Fake news But a crazy read
# ::tokens ["Fake", "news", "But", "a", "crazy", "read"]
# ::lemmas ["fake", "news", "but", "a", "crazy", "read"]
(c25-1 / contrast-01
       :ARG1 (c25-4 / news
                    :ARG1-of (c25-2 / fake-02))
       :ARG2 (c25-0 / read-01
                    :ARG1-of (c25-3 / crazy-03)))

# ::snt I wont have child So hes meeting the criteria for the Darwin awards Hurra
# ::tokens ["I", "wo", "nt", "have", "child", "So", "he", "s", "meeting", "the", "criteria", "for", "the", "Darwin", "awards", "Hurra"]
# ::lemmas ["i", "will", "not", "have", "child", "so", "he", "s", "meet", "the", "criterion", "for", "the", "Darwin", "award", "Hurra"]
(c26-7 / multi-sentence
       :snt1 (c26-6 / have-05
                    :ARG0 (c26-9 / i)
                    :ARG1 (c26-1 / child)
                    :polarity -)
       :snt2 (c26-0 / meet-01
                    :ARG0 (c26-3 / he)
                    :ARG1 (c26-5 / criteria
                                 :ARG2-of (c26-4 / award-01
                                                 :ARG3 (c26-2 / event
                                                              :name (c26-8 / name
                                                                           :op1 "Hurra"))))))

# ::snt Makes sense Floridawas it EricTrump
# ::tokens ["Makes", "sense", "Floridawas", "it", "EricTrump"]
# ::lemmas ["make", "sense", "floridawas", "it", "erictrump"]
(c27-4 / say-01
       :ARG1 (c27-3 / sense-02
                    :ARG1 (c27-6 / it)
                    :ARG2 (c27-1 / person
                                 :name (c27-5 / name
                                              :op1 "EricTrump")))
       :ARG2 (c27-0 / person
                    :name (c27-2 / name
                                 :op1 "Florida")))

# ::snt Fake site sadly
# ::tokens ["Fake", "site", "sadly"]
# ::lemmas ["fake", "site", "sadly"]
(c28-1 / sad-02
       :ARG0 (c28-2 / site
                    :ARG1-of (c28-0 / fake-02)))

# ::snt Because Stoopid never takes a day off
# ::tokens ["Because", "Stoopid", "never", "takes", "a", "day", "off"]
# ::lemmas ["because", "Stoopid", "never", "take", "a", "day", "off"]
(c29-2 / cause-01
       :ARG0 (c29-5 / take-01
                    :ARG0 (c29-3 / person
                                 :name (c29-6 / name
                                              :op1 "Stoopid"))
                    :ARG1 (c29-1 / day
                                 :mod (c29-0 / off))
                    :time (c29-4 / ever)
                    :polarity -))

# ::snt To be true to journalistic formatting Florida man loses testicles after trying to fill scuba tank with weed smoke
# ::tokens ["To", "be", "true", "to", "journalistic", "formatting", "Florida", "man", "loses", "testicles", "after", "trying", "to", "fill", "scuba", "tank", "with", "weed", "smoke"]
# ::lemmas ["to", "be", "true", "to", "journalistic", "format", "Florida", "man", "lose", "testicle", "after", "try", "to", "fill", "scuba", "tank", "with", "weed", "smoke"]
(c30-11 / lose-02
        :ARG0 (c30-10 / man
                      :mod (c30-9 / state
                                  :name (c30-12 / name
                                                :op1 "Florida"))
                      :part (c30-2 / testicle
                                   :ARG1-of c30-11))
        :time (c30-5 / after
                     :op1 (c30-13 / try-01
                                  :ARG0 c30-10
                                  :ARG1 (c30-8 / fill-01
                                               :ARG0 c30-10
                                               :ARG1 (c30-7 / tank
                                                            :mod (c30-4 / scuba))
                                               :ARG2 (c30-3 / smoke-02
                                                            :ARG0 c30-10
                                                            :ARG1 (c30-6 / weed)))))
        :purpose (c30-14 / true-03
                         :ARG2 (c30-0 / format
                                      :mod (c30-1 / journalism))))

# ::snt Oh Florida man
# ::tokens ["Oh", "Florida", "man"]
# ::lemmas ["oh", "Florida", "man"]
(c31-3 / man
       :mod (c31-2 / state
                   :name (c31-1 / name
                                :op1 "Florida"))
       :mod (c31-0 / oh
                   :mode expressive))

# ::snt At least there wont be any little Winters critters to follow in dads footsteps
# ::tokens ["At", "least", "there", "wo", "nt", "be", "any", "little", "Winters", "critters", "to", "follow", "in", "dads", "footsteps"]
# ::lemmas ["at", "least", "there", "will", "not", "be", "any", "little", "Winters", "critter", "to", "follow", "in", "dad", "footstep"]
(c32-2 / critter
       :mod (c32-6 / little)
       :ARG0-of (c32-5 / follow-01
                       :ARG1 (c32-0 / footsteps
                                    :poss (c32-3 / person
                                                 :ARG0-of (c32-7 / have-rel-role-91
                                                                 :ARG2 (c32-1 / dad)))))
       :mod (c32-4 / at-least)
       :mod c32-6
       :polarity -)

# ::snt Somebody like Sessions will use this example as justification why weed is bad for Americayou watch
# ::tokens ["Somebody", "like", "Sessions", "will", "use", "this", "example", "as", "justification", "why", "weed", "is", "bad", "for", "Americayou", "watch"]
# ::lemmas ["somebody", "like", "Sessions", "will", "use", "this", "example", "as", "justification", "why", "weed", "be", "bad", "for", "Americayou", "watch"]
(c33-4 / use-01
       :ARG0 (c33-12 / somebody
                     :ARG1-of (c33-1 / resemble-01
                                     :ARG2 (c33-3 / person
                                                  :name (c33-13 / name
                                                                :op1 "Sessions"))))
       :ARG1 (c33-5 / example
                    :mod (c33-7 / this))
       :ARG2 (c33-14 / justify-01
                     :ARG0 c33-12
                     :ARG1 (c33-6 / thing
                                  :ARG0-of (c33-8 / cause-01
                                                  :ARG1 (c33-0 / bad-04
                                                               :ARG1 (c33-9 / weed)
                                                               :ARG2 (c33-2 / watch-01
                                                                            :mod (c33-11 / ethnic-group
                                                                                         :name (c33-10 / name
                                                                                                       :op1 "Americayou"))))))))

# ::snt At least he had the balls to do it
# ::tokens ["At", "least", "he", "had", "the", "balls", "to", "do", "it"]
# ::lemmas ["at", "least", "he", "have", "the", "ball", "to", "do", "it"]
(c34-3 / have-03
       :ARG0 (c34-1 / he)
       :ARG1 (c34-5 / ball)
       :mod (c34-2 / at-least)
       :purpose (c34-0 / do-02
                       :ARG0 c34-1
                       :ARG1 (c34-4 / it)))

# ::snt This was nuts
# ::tokens ["This", "was", "nuts"]
# ::lemmas ["this", "be", "nuts"]
(c35-0 / nuts
       :domain (c35-1 / this))

# ::snt Takeaway Your friends will totally snark on you to the press if you mess up big time
# ::tokens ["Takeaway", "Your", "friends", "will", "totally", "snark", "on", "you", "to", "the", "press", "if", "you", "mess", "up", "big", "time"]
# ::lemmas ["Takeaway", "your", "friend", "will", "totally", "snark", "on", "you", "to", "the", "press", "if", "you", "mess", "up", "big", "time"]
(c36-5 / snark-02
       :ARG0 (c36-1 / person
                    :ARG0-of (c36-6 / have-rel-role-91
                                    :ARG1 (c36-9 / you)
                                    :ARG2 (c36-4 / friend)))
       :ARG1 c36-9
       :ARG3 (c36-0 / press)
       :mod (c36-3 / total)
       :condition (c36-7 / mess-up-02
                         :ARG0 c36-9
                         :degree (c36-8 / big-time))
       :ARG1-of (c36-2 / take-away-05))

# ::snt SwiftOnSecurity Deez nuts are gone
# ::tokens ["SwiftOnSecurity", "Deez", "nuts", "are", "gone"]
# ::lemmas ["SwiftOnSecurity", "Deez", "nut", "be", "go"]
(c37-1 / go-02
       :ARG0 (c37-0 / person
                    :name (c37-3 / name
                                 :op1 "SwiftOnSecurity"
                                 :op2 "Deez")
                    :mod (c37-2 / nuts)))

# ::snt Thats one way to eliminate his gene pool D
# ::tokens ["That", "s", "one", "way", "to", "eliminate", "his", "gene", "pool", "D"]
# ::lemmas ["that", "s", "one", "way", "to", "eliminate", "his", "gene", "pool", "d"]
(c38-3 / way
       :domain (c38-2 / that)
       :manner-of (c38-0 / eliminate-01
                         :ARG1 (c38-1 / pool
                                      :mod (c38-5 / gene)
                                      :poss (c38-4 / he)))
       :quant 1)

# ::snt I see what you did there
# ::tokens ["I", "see", "what", "you", "did", "there"]
# ::lemmas ["i", "see", "what", "you", "do", "there"]
(c39-2 / see-01
       :ARG0 (c39-3 / i)
       :ARG1 (c39-1 / thing
                    :ARG1-of (c39-0 / do-02
                                    :ARG0 (c39-5 / you)
                                    :location (c39-4 / there))))

# ::snt This shit was written shady AF
# ::tokens ["This", "shit", "was", "written", "shady", "AF"]
# ::lemmas ["this", "shit", "be", "write", "shady", "AF"]
(c40-1 / write-01
       :ARG1 (c40-3 / shit
                    :mod (c40-0 / this))
       :manner (c40-2 / shady-03)
       :ARG1-of (c40-4 / honest-01
                       :ARG0 (c40-5 / i)))

# ::snt Florida and alcohol who could have guessed
# ::tokens ["Florida", "and", "alcohol", "who", "could", "have", "guessed"]
# ::lemmas ["Florida", "and", "alcohol", "who", "could", "have", "guess"]
(c41-2 / and
       :op1 (c41-3 / state
                   :name (c41-5 / name
                                :op1 "Florida"))
       :op2 (c41-1 / alcohol)
       :ARG1-of (c41-4 / guess-01
                       :ARG0 (c41-6 / amr-unknown)
                       :ARG1-of (c41-0 / possible-01)))

# ::snt Yes I actually read the whole article   Hope its fake but I could see how that could happen
# ::tokens ["Yes", "I", "actually", "read", "the", "whole", "article", "  ", "Hope", "its", "fake", "but", "I", "could", "see", "how", "that", "could", "happen"]
# ::lemmas ["yes", "i", "actually", "read", "the", "whole", "article", "  ", "Hope", "its", "fake", "but", "i", "could", "see", "how", "that", "could", "happen"]
(c42-11 / multi-sentence
        :snt1 (c42-0 / read-01
                     :ARG0 (c42-14 / i)
                     :ARG1 (c42-8 / article
                                  :mod (c42-7 / whole))
                     :ARG1-of (c42-5 / actual-02))
        :snt2 (c42-3 / contrast-01
                     :ARG1 (c42-12 / hope-01
                                   :ARG0 (c42-1 / i)
                                   :ARG1 (c42-9 / fake-02
                                                :ARG1 (c42-13 / it)))
                     :ARG2 (c42-4 / possible-01
                                  :ARG1 (c42-10 / see-01
                                                :ARG0 c42-1
                                                :ARG1 (c42-6 / thing
                                                             :manner-of (c42-2 / possible-01
                                                                               :ARG1 c42-9))))))

# ::snt Its a fake story Snopes has debunked it This website publishes fake stuff to get clicks for advertising Dont fall for it
# ::tokens ["Its", "a", "fake", "story", "Snopes", "has", "debunked", "it", "This", "website", "publishes", "fake", "stuff", "to", "get", "clicks", "for", "advertising", "Do", "nt", "fall", "for", "it"]
# ::lemmas ["its", "a", "fake", "story", "Snopes", "have", "debunk", "it", "this", "website", "publish", "fake", "stuff", "to", "get", "click", "for", "advertising", "do", "not", "fall", "for", "it"]
(c43-13 / multi-sentence
        :snt1 (c43-12 / story
                      :ARG1-of (c43-11 / fake-02)
                      :domain (c43-17 / it))
        :snt2 (c43-3 / debunk-01
                     :ARG0 (c43-4 / publication
                                  :name (c43-16 / name
                                                :op1 "Snopes"))
                     :ARG1 (c43-0 / it))
        :snt3 (c43-10 / and
                      :op1 (c43-1 / publish-01
                                  :ARG0 (c43-8 / website
                                               :mod (c43-7 / this))
                                  :ARG1 (c43-9 / stuff
                                               :ARG1-of (c43-2 / fake-02))
                                  :purpose (c43-15 / get-01
                                                   :ARG0 c43-8
                                                   :ARG1 (c43-5 / click-01
                                                                :purpose (c43-6 / advertise-01))))
                      :op2 (c43-14 / fall-10
                                   :ARG1 (c43-18 / you)
                                   :ARG2 c43-0
                                   :polarity -
                                   :mode imperative)))

# ::snt and just when you this the article is bad by itself
# ::tokens ["and", "just", "when", "you", "this", "the", "article", "is", "bad", "by", "itself"]
# ::lemmas ["and", "just", "when", "you", "this", "the", "article", "be", "bad", "by", "itself"]
(c44-4 / and
       :op2 (c44-5 / bad-07
                   :ARG1 (c44-2 / article)
                   :mod (c44-0 / by-oneself)
                   :time (c44-3 / this
                                :mod (c44-6 / you))
                   :mod (c44-1 / just)))

# ::snt Never heard of it and Ive lived in Florida for 20 years
# ::tokens ["Never", "heard", "of", "it", "and", "I", "ve", "lived", "in", "Florida", "for", "20", "years"]
# ::lemmas ["never", "hear", "of", "it", "and", "i", "have", "live", "in", "Florida", "for", "20", "years"]
(c45-3 / and
       :op1 (c45-5 / hear-01
                   :ARG1 (c45-8 / it)
                   :time (c45-1 / ever)
                   :polarity -)
       :op2 (c45-6 / live-01
                   :ARG0 (c45-0 / i)
                   :location (c45-4 / state
                                    :name (c45-7 / name
                                                 :op1 "Florida"))
                   :duration (c45-2 / temporal-quantity
                                    :unit (c45-9 / year)
                                    :quant 20)))

# ::snt I think this is fake  I cant find evidence that the Florida Sun Post exists in the real world
# ::tokens ["I", "think", "this", "is", "fake", " ", "I", "ca", "nt", "find", "evidence", "that", "the", "Florida", "Sun", "Post", "exists", "in", "the", "real", "world"]
# ::lemmas ["i", "think", "this", "be", "fake", " ", "i", "can", "not", "find", "evidence", "that", "the", "Florida", "Sun", "Post", "exist", "in", "the", "real", "world"]
(c46-7 / and
       :op1 (c46-5 / think-01
                   :ARG0 (c46-12 / i)
                   :ARG1 (c46-10 / fake-02
                                 :ARG1 (c46-13 / this)))
       :op2 (c46-2 / possible-01
                   :ARG1 (c46-1 / find-01
                                :ARG0 c46-12
                                :ARG1 (c46-9 / thing
                                             :ARG0-of (c46-3 / evidence-01
                                                             :ARG1 (c46-8 / exist-01
                                                                          :ARG1 (c46-11 / newspaper
                                                                                        :name (c46-4 / name
                                                                                                     :op1 "Florida"
                                                                                                     :op2 "Sun"
                                                                                                     :op3 "Post"))
                                                                          :location (c46-6 / world
                                                                                           :ARG1-of (c46-0 / real-04))))))
                   :polarity -))

# ::snt LangstonITaylor
# ::tokens ["LangstonITaylor"]
# ::lemmas ["langstonitaylor"]
(c47-0 / person
       :name (c47-1 / name
                    :op1 "LangstonITaylor"))

# ::snt Please God let this be satire
# ::tokens ["Please", "God", "let", "this", "be", "satire"]
# ::lemmas ["please", "God", "let", "this", "be", "satire"]
(c48-3 / let-01
       :ARG0 (c48-0 / person
                    :name (c48-4 / name
                                 :op1 "God"))
       :ARG1 (c48-2 / satire
                    :domain (c48-1 / this))
       :polite +
       :mode imperative)

# ::snt PlausibleSatire
# ::tokens ["PlausibleSatire"]
# ::lemmas ["PlausibleSatire"]
(c49-0 / person
       :name (c49-1 / name
                    :op1 "PlausibleSatire"))

# ::snt Peak FloridaMan and Darwin Award to boot
# ::tokens ["Peak", "FloridaMan", "and", "Darwin", "Award", "to", "boot"]
# ::lemmas ["Peak", "FloridaMan", "and", "Darwin", "Award", "to", "boot"]
(c50-4 / boot-02
       :ARG1 (c50-2 / and
                    :op1 (c50-1 / award
                                :name (c50-3 / name
                                             :op1 "Peak"
                                             :op2 "FloridaMan"))
                    :op2 (c50-5 / award
                                :name (c50-0 / name
                                             :op1 "Darwin"
                                             :op2 "Award"))))
