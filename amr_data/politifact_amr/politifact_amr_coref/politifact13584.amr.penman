# ::snt I wish As do WHO KNOWS how many others
# ::tokens ["I", "wish", "As", "do", "WHO", "KNOWS", "how", "many", "others"]
# ::lemmas ["i", "wish", "as", "do", "who", "knows", "how", "many", "other"]
(c1-3 / wish-01
      :ARG0 (c1-7 / i)
      :ARG1 (c1-5 / know-01
                  :ARG0 (c1-4 / and
                              :op1 c1-7
                              :op2 (c1-2 / person
                                         :ARG0-of (c1-1 / realize-01
                                                        :ARG1 (c1-6 / number
                                                                    :quant-of (c1-0 / other)))))))

# ::snt damn stop with the false hopes for a moment there I actually thought the US was SAFE from the shortfingeredvulgarian
# ::tokens ["damn", "stop", "with", "the", "false", "hopes", "for", "a", "moment", "there", "I", "actually", "thought", "the", "US", "was", "SAFE", "from", "the", "shortfingeredvulgarian"]
# ::lemmas ["damn", "stop", "with", "the", "false", "hope", "for", "a", "moment", "there", "i", "actually", "think", "the", "US", "be", "SAFE", "from", "the", "shortfingeredvulgarian"]
(c2-1 / cause-01
      :ARG0 (c2-3 / think-01
                  :ARG0 (c2-13 / i)
                  :ARG1 (c2-8 / safe-01
                              :ARG1 (c2-9 / country
                                          :name (c2-12 / name
                                                       :op1 "US"))
                              :ARG2 (c2-2 / person
                                          :ARG0-of (c2-5 / shortfinger-00)))
                  :ARG1-of (c2-6 / actual-02))
      :ARG1 (c2-4 / stop-01
                  :ARG0 (c2-15 / you)
                  :ARG1 (c2-10 / hope-01
                               :ARG0 c2-15
                               :mod (c2-7 / false)
                               :duration (c2-11 / moment
                                                :quant 1)
                               :location (c2-14 / there))
                  :mod (c2-0 / damn
                             :mode expressive)
                  :mode imperative))

# ::snt Hasnt tweeted today sooo Im guessing the SOB is dead
# ::tokens ["Has", "nt", "tweeted", "today", "sooo", "I", "m", "guessing", "the", "SOB", "is", "dead"]
# ::lemmas ["have", "not", "tweet", "today", "sooo", "i", "be", "guess", "the", "SOB", "be", "dead"]
(c3-2 / tweet-02
      :ARG0 (c3-5 / i)
      :time (c3-6 / today)
      :ARG0-of (c3-1 / cause-01
                     :ARG1 (c3-4 / guess-01
                                 :ARG0 c3-5
                                 :ARG1 (c3-0 / die-01
                                             :ARG1 (c3-3 / son-of-a-bitch))))
      :polarity -)

# ::snt trumpcardiac
# ::tokens ["trumpcardiac"]
# ::lemmas ["trumpcardiac"]
(c4-0 / person
      :name (c4-1 / name
                  :op1 "Trumpcardiac"))

# ::snt trumpcardiac
# ::tokens ["trumpcardiac"]
# ::lemmas ["trumpcardiac"]
(c5-0 / person
      :name (c5-1 / name
                  :op1 "Trumpcardiac"))

# ::snt trumpcardiac
# ::tokens ["trumpcardiac"]
# ::lemmas ["trumpcardiac"]
(c6-0 / person
      :name (c6-1 / name
                  :op1 "Trumpcardiac"))

# ::snt trumpcardiac
# ::tokens ["trumpcardiac"]
# ::lemmas ["trumpcardiac"]
(c7-0 / person
      :name (c7-1 / name
                  :op1 "Trumpcardiac"))

# ::snt He too bad clever Israel s  Jewish  First Line of Defense  JewsChooseTrump
# ::tokens ["He", "too", "bad", "clever", "Israel", "s", " ", "Jewish", " ", "First", "Line", "of", "Defense", " ", "JewsChooseTrump"]
# ::lemmas ["he", "too", "bad", "clever", "Israel", "s", " ", "Jewish", " ", "First", "Line", "of", "defense", " ", "jewschoosetrump"]
(c8-5 / person
      :ARG0-of (c8-6 / clever-01)
      :ARG1-of (c8-10 / have-degree-91
                      :ARG2 (c8-14 / bad-07
                                   :ARG1 c8-5)
                      :ARG3 (c8-8 / too))
      :mod (c8-9 / country
                 :name (c8-13 / name
                              :op1 "Israel"))
      :mod (c8-1 / religious-group
                 :name (c8-7 / name
                             :op1 "Jew"))
      :mod (c8-11 / line
                  :mod (c8-4 / defend-01)
                  :ord (c8-0 / ordinal-entity
                             :value 1)
                  :poss c8-9)
      :ARG1-of (c8-12 / say-01
                      :ARG0 (c8-2 / person
                                  :name (c8-3 / name
                                              :op1 "JewChooseTrump"))))

# ::snt this will give him more votesâ€¦
# ::tokens ["this", "will", "give", "him", "more", "votes", "\u2026"]
# ::lemmas ["this", "will", "give", "him", "more", "vote", "\u2026"]
(c9-4 / give-01
      :ARG0 (c9-0 / this)
      :ARG1 (c9-1 / vote-01
                  :ARG1 (c9-3 / he)
                  :mod (c9-2 / more))
      :ARG2 c9-3)

# ::snt Rest In Peace  GOD blessleehsienloong  hcsghcsg  joschooling  nigelelijah  omgSG50 OMGloveAHkong
# ::tokens ["Rest", "In", "Peace", " ", "GOD", "blessleehsienloong", " ", "hcsghcsg", " ", "joschooling", " ", "nigelelijah", " ", "omgSG50", "OMGloveAHkong"]
# ::lemmas ["rest", "in", "Peace", " ", "GOD", "blessleehsienloong", " ", "hcsghcsg", " ", "joschooling", " ", "nigelelijah", " ", "omgSG50", "omgloveahkong"]
(c10-10 / and
        :op1 (c10-2 / rest-01
                    :manner (c10-6 / peace))
        :op2 (c10-15 / bless-01
                     :ARG0 (c10-1 / person
                                  :name (c10-14 / name
                                                :op1 "God"))
                     :ARG1 (c10-0 / person
                                  :name (c10-7 / name
                                               :op1 "leehsienloong")))
        :op3 (c10-12 / hcsghcsg)
        :op4 (c10-11 / school-01)
        :op5 (c10-13 / person
                     :name (c10-4 / name
                                  :op1 "nigelelijah"))
        :op6 (c10-5 / person
                    :name (c10-8 / name
                                 :op1 "SG50"))
        :op7 (c10-3 / person
                    :name (c10-9 / name
                                 :op1 "OMGloveAHkong")))

# ::snt wow wow  Now we knows thats nots true OHHH my
# ::tokens ["wow", "wow", " ", "Now", "we", "knows", "that", "s", "nots", "true", "OHHH", "my"]
# ::lemmas ["wow", "wow", " ", "now", "we", "know", "that", "s", "not", "true", "OHHH", "my"]
(c11-5 / multi-sentence
       :snt1 (c11-3 / wow
                    :mode expressive)
       :snt2 (c11-4 / know-01
                    :ARG0 (c11-1 / we)
                    :ARG1 (c11-2 / true-01
                                 :ARG1 (c11-7 / that)
                                 :polarity -)
                    :time (c11-6 / now)
                    :mod (c11-0 / oh-my-god
                                :mode expressive)))

# ::snt That is exactly what Republicans are best at CONSPIRACY THEORIES they do it constantly
# ::tokens ["That", "is", "exactly", "what", "Republicans", "are", "best", "at", "CONSPIRACY", "THEORIES", "they", "do", "it", "constantly"]
# ::lemmas ["that", "be", "exactly", "what", "Republicans", "be", "good", "at", "conspiracy", "theory", "they", "do", "it", "constantly"]
(c12-8 / have-degree-91
       :ARG1 (c12-6 / that)
       :ARG2 (c12-11 / good-03
                     :ARG1 (c12-2 / person
                                  :ARG0-of (c12-4 / have-org-role-91
                                                  :ARG1 (c12-0 / political-party
                                                               :name (c12-9 / name
                                                                            :op1 "Republican"
                                                                            :op2 "Party"))))
                     :ARG2 (c12-3 / conspire-01
                                  :ARG0 c12-2))
       :ARG3 (c12-10 / most)
       :ARG5 (c12-1 / do-02
                    :ARG0 c12-2
                    :ARG1 c12-6
                    :frequency (c12-7 / constant))
       :mod (c12-5 / exact))

# ::snt Its not fair to get my hopes up like that
# ::tokens ["Its", "not", "fair", "to", "get", "my", "hopes", "up", "like", "that"]
# ::lemmas ["its", "not", "fair", "to", "get", "my", "hope", "up", "like", "that"]
(c13-3 / fair-01
       :ARG1 (c13-5 / get-04
                    :ARG1 (c13-4 / hopeful-03
                                 :ARG0 (c13-6 / i))
                    :ARG2 (c13-1 / up-03
                                 :ARG1 c13-4
                                 :ARG1-of (c13-0 / resemble-01
                                                 :ARG2 (c13-2 / that))))
       :polarity -)

# ::snt Not confirmed news
# ::tokens ["Not", "confirmed", "news"]
# ::lemmas ["not", "confirm", "news"]
(c14-0 / confirm-01
       :ARG1 (c14-1 / news)
       :polarity -)

# ::snt Mike Pence lisafrazier361
# ::tokens ["Mike", "Pence", "lisafrazier361"]
# ::lemmas ["Mike", "Pence", "lisafrazier361"]
(c15-0 / person
       :name (c15-1 / name
                    :op1 "Mike"
                    :op2 "Pence")
       :mod (c15-2 / fucking
                   :mode expressive)
       :ARG2-of (c15-3 / sign-01))
