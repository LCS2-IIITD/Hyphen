# ::snt Only 100000 Not good enough
# ::tokens ["Only", "100000", "Not", "good", "enough"]
# ::lemmas ["Only", "100000", "not", "good", "enough"]
(c1-3 / have-degree-91
      :ARG2 (c1-4 / good-02)
      :ARG3 (c1-2 / enough)
      :mod (c1-0 / only)
      :time (c1-1 / date-entity
                  :year 2010)
      :polarity -)

# ::snt Hmmm
# ::tokens ["Hmmm"]
# ::lemmas ["hmmm"]
(c2-0 / hmm
      :mode expressive)

# ::snt I have autoimmune disease I could easily sleep 70 days straight thru They would get their moneys worth with me
# ::tokens ["I", "have", "autoimmune", "disease", "I", "could", "easily", "sleep", "70", "days", "straight", "thru", "They", "would", "get", "their", "moneys", "worth", "with", "me"]
# ::lemmas ["i", "have", "autoimmune", "disease", "i", "could", "easily", "sleep", "70", "days", "straight", "thru", "they", "would", "get", "their", "money", "worth", "with", "me"]
(c3-8 / and
      :op1 (c3-11 / have-03
                  :ARG0 (c3-14 / i)
                  :ARG1 (c3-0 / disease
                              :mod (c3-4 / autoimmune)))
      :op2 (c3-1 / possible-01
                 :ARG1 (c3-10 / sleep-01
                              :ARG0 c3-14
                              :duration (c3-5 / temporal-quantity
                                              :unit (c3-9 / day)
                                              :quant 70)
                              :ARG1-of (c3-7 / straight-04))
                 :ARG1-of (c3-2 / easy-05)
                 :ARG1-of (c3-3 / cause-01
                                :ARG0 (c3-13 / get-01
                                             :ARG0 (c3-15 / they)
                                             :ARG1 (c3-12 / monetary-quantity
                                                          :ARG1-of (c3-6 / worth-01
                                                                         :ARG2 c3-12))
                                             :accompanier c3-14))))

# ::snt I honestly dont think I could do it A 70 day sleep study is pretty intense  I have a hard enough time staying in one place for 15 minutes science nasa space sleepstudy
# ::tokens ["I", "honestly", "do", "nt", "think", "I", "could", "do", "it", "A", "70", "day", "sleep", "study", "is", "pretty", "intense", " ", "I", "have", "a", "hard", "enough", "time", "staying", "in", "one", "place", "for", "15", "minutes", "science", "nasa", "space", "sleepstudy"]
# ::lemmas ["i", "honestly", "do", "not", "think", "i", "could", "do", "it", "a", "70", "day", "sleep", "study", "be", "pretty", "intense", " ", "i", "have", "a", "hard", "enough", "time", "stay", "in", "one", "place", "for", "15", "minutes", "science", "nasa", "space", "sleepstudy"]
(c4-16 / multi-sentence
       :snt1 (c4-14 / think-01
                    :ARG0 (c4-3 / i)
                    :ARG1 (c4-1 / possible-01
                                :ARG1 (c4-21 / do-02
                                             :ARG0 c4-3
                                             :ARG1 (c4-12 / it)))
                    :ARG1-of (c4-9 / honest-01)
                    :polarity -)
       :snt2 (c4-10 / intense-02
                    :ARG1 (c4-25 / study-01
                                 :ARG1 (c4-15 / sleep-01)
                                 :duration (c4-4 / temporal-quantity
                                                 :unit (c4-23 / day)
                                                 :quant 70))
                    :degree (c4-5 / pretty))
       :snt3 (c4-6 / have-03
                   :ARG0 (c4-20 / i)
                   :ARG1 (c4-7 / time
                               :ARG1-of (c4-13 / hard-02
                                               :ARG2-of (c4-11 / have-degree-91
                                                               :ARG1 c4-7
                                                               :ARG3 (c4-2 / enough)))
                               :duration (c4-22 / stay-01
                                                :ARG1 c4-20
                                                :ARG3 (c4-19 / place
                                                             :quant 1)
                                                :duration (c4-27 / temporal-quantity
                                                                 :unit (c4-0 / minute)
                                                                 :quant 15))))
       :snt4 (c4-18 / study-01
                    :ARG0 (c4-8 / science)
                    :ARG1 (c4-24 / space
                                 :mod (c4-26 / Nasa))
                    :ARG1 (c4-17 / sleep-01)))

# ::snt Ill do it
# ::tokens ["Ill", "do", "it"]
# ::lemmas ["Ill", "do", "it"]
(c5-0 / do-02
      :ARG0 (c5-1 / i)
      :ARG1 (c5-2 / it))

# ::snt dude right Aaron said why havent you signed up yet
# ::tokens ["dude", "right", "Aaron", "said", "why", "have", "nt", "you", "signed", "up", "yet"]
# ::lemmas ["dude", "right", "Aaron", "say", "why", "have", "not", "you", "sign", "up", "yet"]
(c6-7 / say-01
      :ARG0 (c6-3 / person
                  :name (c6-8 / name
                              :op1 "Aaron")
                  :mod (c6-2 / dude
                             :ARG2-of (c6-0 / right-06)))
      :ARG1 (c6-6 / amr-unknown
                  :ARG0-of (c6-4 / cause-01
                                 :ARG1 (c6-5 / sign-up-03
                                             :ARG0 (c6-9 / you)
                                             :time (c6-1 / yet)
                                             :polarity -))))

# ::snt Well 12000 for 30 days and I’m in
# ::tokens ["Well", "12000", "for", "30", "days", "and", "I", "\u2019m", "in"]
# ::lemmas ["well", "12000", "for", "30", "days", "and", "i", "be", "in"]
(c7-5 / be-located-at-91
      :ARG1 (c7-4 / i)
      :ARG2 (c7-3 / location
                  :duration (c7-1 / temporal-quantity
                                  :unit (c7-0 / day)
                                  :quant 30)
                  :quant 12000)
      :mod (c7-2 / well))

# ::snt okay whatever smart ass I said apparently
# ::tokens ["okay", "whatever", "smart", "ass", "I", "said", "apparently"]
# ::lemmas ["okay", "whatever", "smart", "ass", "i", "say", "apparently"]
(c8-4 / appear-02
      :ARG1 (c8-0 / okay-04
                  :ARG1 (c8-5 / say-01
                              :ARG0 (c8-6 / i
                                          :mod (c8-1 / ass
                                                     :ARG1-of (c8-3 / smart-06)))
                              :ARG1 (c8-2 / whatever))))

# ::snt no theyre not gaga
# ::tokens ["no", "they", "re", "not", "gaga"]
# ::lemmas ["no", "they", "be", "not", "gaga"]
(c9-0 / gaga
      :domain (c9-1 / they)
      :polarity -)

# ::snt  LOL
# ::tokens [" ", "LOL"]
# ::lemmas [" ", "LOL"]
(c10-2 / laugh-01
       :ARG0 (c10-1 / i)
       :manner (c10-0 / loud)
       :mode expressive)

# ::snt looks easy and appealing but is way too difficult
# ::tokens ["looks", "easy", "and", "appealing", "but", "is", "way", "too", "difficult"]
# ::lemmas ["look", "easy", "and", "appealing", "but", "be", "way", "too", "difficult"]
(c11-1 / contrast-01
       :ARG1 (c11-6 / and
                    :op1 (c11-7 / look-02
                                :ARG1 (c11-2 / easy-05))
                    :op2 (c11-3 / appeal-03
                                :ARG0 c11-7))
       :ARG2 (c11-8 / have-degree-91
                    :ARG1 c11-7
                    :ARG2 (c11-0 / difficult)
                    :ARG3 (c11-4 / too
                                 :mod (c11-5 / way))))

# ::snt drošivien kad 59tajā dienā viss tirps un cilvēks izgāzīsies no gultas no 100k nepaliks ne smakas
# ::tokens ["dro\u0161ivien", "kad", "59taj\u0101", "dien\u0101", "viss", "tirps", "un", "cilv\u0113ks", "izg\u0101z\u012bsies", "no", "gultas", "no", "100k", "nepaliks", "ne", "smakas"]
# ::lemmas ["dro\u0161ivien", "kad", "59taj\u0101", "dien\u0101", "viss", "tirps", "un", "cilv\u0113ks", "izg\u0101z\u012bsie", "no", "gultas", "no", "100k", "nepaliks", "ne", "smakas"]
(c12-3 / and
       :op1 (c12-1 / person
                   :name (c12-4 / name
                                :op1 "drošivien"))
       :op2 (c12-0 / person
                   :name (c12-2 / name
                                :op1 "ad"
                                :op2 " :op3 ")))

# ::snt man nav laika
# ::tokens ["man", "nav", "laika"]
# ::lemmas ["man", "nav", "laika"]
(c13-0 / person
       :name (c13-1 / name
                    :op1 "man"
                    :op2 " nav"
                    :op3 "laika"))

# ::snt Pieteicies jau
# ::tokens ["Pieteicies", "jau"]
# ::lemmas ["pieteicie", "jau"]
(c14-1 / jau
       :mod (c14-0 / politician)
       :mode expressive)

# ::snt 18000  360  6 480 000 The questions now is  how do I get to  NASA bases
# ::tokens ["18000", " ", "360", " ", "6", "480", "000", "The", "questions", "now", "is", " ", "how", "do", "I", "get", "to", " ", "NASA", "bases"]
# ::lemmas ["18000", " ", "360", " ", "6", "480", "000", "the", "question", "now", "be", " ", "how", "do", "i", "get", "to", " ", "NASA", "basis"]
(c15-2 / question-01
       :ARG1 (c15-5 / get-05
                    :ARG1 (c15-6 / i)
                    :ARG2 (c15-7 / base
                                 :poss (c15-0 / research-institute
                                              :name (c15-4 / name
                                                           :op1 "NASA")))
                    :manner (c15-3 / amr-unknown))
       :time (c15-1 / now))

# ::snt types up resignation letter
# ::tokens ["types", "up", "resignation", "letter"]
# ::lemmas ["type", "up", "resignation", "letter"]
(c16-1 / type-up-03
       :ARG1 (c16-2 / letter
                    :mod (c16-0 / resign-01)))

# ::snt 18k for 70 days
# ::tokens ["18k", "for", "70", "days"]
# ::lemmas ["18k", "for", "70", "days"]
(c17-3 / monetary-quantity
       :unit (c17-1 / pound)
       :duration (c17-2 / temporal-quantity
                        :unit (c17-0 / day)
                        :quant 70)
       :quant 18000)

# ::snt do they  I dont know why I didnt know this
# ::tokens ["do", "they", " ", "I", "do", "nt", "know", "why", "I", "did", "nt", "know", "this"]
# ::lemmas ["do", "they", " ", "i", "do", "not", "know", "why", "i", "do", "not", "know", "this"]
(c18-4 / know-01
       :ARG0 (c18-5 / i)
       :ARG1 (c18-1 / thing
                    :ARG0-of (c18-0 / cause-01
                                    :ARG1 (c18-3 / know-01
                                                 :ARG0 c18-5
                                                 :ARG1 (c18-6 / this)
                                                 :polarity -)))
       :polarity (c18-2 / amr-unknown)
       :polarity -)

# ::snt L1LDebbie
# ::tokens ["L1LDebbie"]
# ::lemmas ["L1LDebbie"]
(c19-0 / person
       :name (c19-1 / name
                    :op1 "L1LDebbie"))

# ::snt NASA how do I apply
# ::tokens ["NASA", "how", "do", "I", "apply"]
# ::lemmas ["NASA", "how", "do", "i", "apply"]
(c20-2 / apply-01
       :ARG0 (c20-4 / i)
       :ARG2 (c20-1 / amr-unknown
                    :manner-of (c20-0 / research-institute
                                      :name (c20-3 / name
                                                   :op1 "NASA"))))

# ::snt ClassicPict thats only 10hr
# ::tokens ["ClassicPict", "that", "s", "only", "10hr"]
# ::lemmas ["ClassicPict", "that", "s", "only", "10hr"]
(c21-3 / say-01
       :ARG0 (c21-6 / i)
       :ARG1 (c21-2 / that
                    :duration (c21-7 / temporal-quantity
                                     :unit (c21-4 / hour)
                                     :mod (c21-0 / only)
                                     :quant 10))
       :ARG2 (c21-1 / person
                    :name (c21-5 / name
                                 :op1 "ClassicPict")))

# ::snt ClassicPict is that it Seeing as NASA spent nearly £15 billion in 2016
# ::tokens ["ClassicPict", "is", "that", "it", "Seeing", "as", "NASA", "spent", "nearly", "\u00a3", "15", "billion", "in", "2016"]
# ::lemmas ["ClassicPict", "be", "that", "it", "see", "as", "NASA", "spend", "nearly", "\u00a3", "15", "billion", "in", "2016"]
(c22-7 / see-01
       :ARG0 (c22-3 / publication
                    :name (c22-9 / name
                                 :op1 "ClassicPict"))
       :ARG1 (c22-5 / spend-01
                    :ARG0 (c22-0 / research-institute
                                 :name (c22-4 / name
                                              :op1 "NASA"))
                    :ARG3 (c22-1 / nearly
                                 :op1 (c22-8 / monetary-quantity
                                             :unit (c22-2 / dollar)
                                             :quant 15000000000))
                    :time (c22-6 / date-entity
                                 :year 2016)))

# ::snt mysteriousfact I think a lot of us wouldve wanted to do this during 2016
# ::tokens ["mysteriousfact", "I", "think", "a", "lot", "of", "us", "would", "ve", "wanted", "to", "do", "this", "during", "2016"]
# ::lemmas ["mysteriousfact", "i", "think", "a", "lot", "of", "us", "would", "have", "want", "to", "do", "this", "during", "2016"]
(c23-7 / say-01
       :ARG0 (c23-10 / i)
       :ARG1 (c23-4 / think-01
                    :ARG0 c23-10
                    :ARG1 (c23-5 / want-01
                                 :ARG0 (c23-3 / person
                                              :quant (c23-8 / lot)
                                              :ARG1-of (c23-0 / include-91
                                                              :ARG2 (c23-1 / we)))
                                 :ARG1 (c23-2 / do-02
                                              :ARG0 c23-3
                                              :ARG1 (c23-11 / this)
                                              :time (c23-6 / date-entity
                                                           :year 2016))))
       :ARG1-of (c23-9 / honest-01))

# ::snt ClassicPict advise on how to apply
# ::tokens ["ClassicPict", "advise", "on", "how", "to", "apply"]
# ::lemmas ["ClassicPict", "advise", "on", "how", "to", "apply"]
(c24-3 / advise-01
       :ARG0 (c24-0 / person
                    :name (c24-4 / name
                                 :op1 "ClassicPict"))
       :ARG2 (c24-2 / thing
                    :manner-of (c24-1 / apply-02)))

# ::snt ClassicPict where do I sign up
# ::tokens ["ClassicPict", "where", "do", "I", "sign", "up"]
# ::lemmas ["ClassicPict", "where", "do", "i", "sign", "up"]
(c25-2 / sign-up-03
       :ARG0 (c25-4 / i)
       :ARG3 (c25-0 / person
                    :name (c25-3 / name
                                 :op1 "ClassicPict"))
       :location (c25-1 / amr-unknown))

# ::snt mysteriousfact when do we start
# ::tokens ["mysteriousfact", "when", "do", "we", "start"]
# ::lemmas ["mysteriousfact", "when", "do", "we", "start"]
(c26-4 / start-01
       :ARG0 (c26-0 / we)
       :time (c26-2 / amr-unknown)
       :mod (c26-3 / fact
                   :mod (c26-1 / silly)))

# ::snt ClassicPict bed in baby xxx
# ::tokens ["ClassicPict", "bed", "in", "baby", "xxx"]
# ::lemmas ["ClassicPict", "bed", "in", "baby", "xxx"]
(c27-4 / bed
       :mod (c27-1 / classic)
       :location (c27-0 / baby)
       :ARG1-of (c27-2 / sign-01
                       :ARG2 (c27-3 / name
                                    :op1 "xxx")))

# ::snt ClassicPict how do I apply
# ::tokens ["ClassicPict", "how", "do", "I", "apply"]
# ::lemmas ["ClassicPict", "how", "do", "i", "apply"]
(c28-2 / ask-01
       :ARG0 (c28-4 / i)
       :ARG1 (c28-1 / apply-01
                    :ARG0 c28-4
                    :manner (c28-5 / amr-unknown))
       :ARG2 (c28-0 / person
                    :name (c28-3 / name
                                 :op1 "ClassicPict")))

# ::snt see yall in 70 days
# ::tokens ["see", "y", "all", "in", "70", "days"]
# ::lemmas ["see", "y", "all", "in", "70", "days"]
(c29-4 / see-01
       :ARG0 (c29-6 / you)
       :ARG1 (c29-3 / all)
       :time (c29-1 / after
                    :op1 (c29-5 / now)
                    :quant (c29-2 / temporal-quantity
                                  :unit (c29-0 / day)
                                  :quant 70))
       :mode imperative)

# ::snt I linked the video already just scroll up through the replies
# ::tokens ["I", "linked", "the", "video", "already", "just", "scroll", "up", "through", "the", "replies"]
# ::lemmas ["i", "link", "the", "video", "already", "just", "scroll", "up", "through", "the", "reply"]
(c30-4 / and
       :op1 (c30-6 / link-01
                   :ARG0 (c30-7 / i)
                   :ARG1 (c30-3 / video))
       :op2 (c30-5 / scroll-01
                   :ARG0 c30-7
                   :ARG1 (c30-0 / reply-01)
                   :direction (c30-1 / up)
                   :mod (c30-8 / just)
                   :time (c30-2 / already)))

# ::snt Seriously  Can you link the video please Can you bring your phone Lol
# ::tokens ["Seriously", " ", "Can", "you", "link", "the", "video", "please", "Can", "you", "bring", "your", "phone", "Lol"]
# ::lemmas ["seriously", " ", "can", "you", "link", "the", "video", "please", "can", "you", "bring", "your", "phone", "Lol"]
(c31-2 / possible-01
       :ARG1 (c31-8 / link-01
                    :ARG0 (c31-11 / you)
                    :ARG1 (c31-3 / video))
       :ARG2-of (c31-7 / serious-01)
       :ARG1-of (c31-4 / ask-01
                       :ARG0 (c31-9 / i)
                       :ARG2 (c31-1 / possible-01
                                    :ARG1 (c31-10 / bring-01
                                                  :ARG0 c31-11
                                                  :ARG1 (c31-0 / phone
                                                               :poss c31-11))
                                    :mod (c31-5 / laugh-01
                                                :ARG0 c31-9
                                                :manner (c31-6 / loud)
                                                :mode expressive)))
       :polite +)

# ::snt Girl me too im down for this NASA  hmu
# ::tokens ["Girl", "me", "too", "i", "m", "down", "for", "this", "NASA", " ", "hmu"]
# ::lemmas ["girl", "me", "too", "i", "be", "down", "for", "this", "NASA", " ", "hmu"]
(c32-1 / down-01
       :ARG1 (c32-5 / i)
       :ARG3 (c32-0 / research-institute
                    :name (c32-4 / name
                                 :op1 "NASA")
                    :mod (c32-2 / this))
       :mod (c32-3 / hmu
                   :mode expressive)
       :mod (c32-6 / too))

# ::snt But Ill never do this if Im just going to cause severe damage to my body
# ::tokens ["But", "Ill", "never", "do", "this", "if", "I", "m", "just", "going", "to", "cause", "severe", "damage", "to", "my", "body"]
# ::lemmas ["but", "Ill", "never", "do", "this", "if", "i", "be", "just", "go", "to", "cause", "severe", "damage", "to", "my", "body"]
(c33-1 / contrast-01
       :ARG2 (c33-0 / do-02
                    :ARG0 (c33-7 / i)
                    :ARG1 (c33-4 / this)
                    :time (c33-2 / ever)
                    :condition (c33-5 / damage-01
                                      :ARG0 c33-7
                                      :ARG1 (c33-8 / body
                                                   :poss c33-7)
                                      :degree (c33-6 / severe)
                                      :mod (c33-3 / just))
                    :polarity -))

# ::snt Oh I need money
# ::tokens ["Oh", "I", "need", "money"]
# ::lemmas ["oh", "i", "need", "money"]
(c34-1 / need-01
       :ARG0 (c34-2 / i)
       :ARG1 (c34-3 / money)
       :mod (c34-0 / oh
                   :mode expressive))

# ::snt I’m pretty sure they provide food and water You’re under constant medical supervision as well due to the negative impact it has on your body I’ll link a video to what happens to your body if you never leave your bed
# ::tokens ["I", "\u2019m", "pretty", "sure", "they", "provide", "food", "and", "water", "You", "\u2019re", "under", "constant", "medical", "supervision", "as", "well", "due", "to", "the", "negative", "impact", "it", "has", "on", "your", "body", "I", "\u2019ll", "link", "a", "video", "to", "what", "happens", "to", "your", "body", "if", "you", "never", "leave", "your", "bed"]
# ::lemmas ["i", "be", "pretty", "sure", "they", "provide", "food", "and", "water", "you", "be", "under", "constant", "medical", "supervision", "as", "well", "due", "to", "the", "negative", "impact", "it", "have", "on", "your", "body", "i", "will", "link", "a", "video", "to", "what", "happen", "to", "your", "body", "if", "you", "never", "leave", "your", "bed"]
(c35-14 / multi-sentence
        :snt1 (c35-22 / sure-02
                      :ARG0 (c35-4 / i)
                      :ARG1 (c35-1 / provide-01
                                   :ARG0 (c35-11 / they)
                                   :ARG1 (c35-20 / and
                                                 :op1 (c35-21 / food)
                                                 :op2 (c35-3 / water)))
                      :degree (c35-5 / pretty))
        :snt2 (c35-12 / supervise-01
                      :ARG0 (c35-0 / medicine)
                      :ARG1 (c35-25 / you)
                      :mod (c35-7 / constant)
                      :mod (c35-10 / as-well)
                      :ARG1-of (c35-23 / cause-01
                                       :ARG0 (c35-9 / impact-01
                                                    :ARG0 (c35-8 / it)
                                                    :ARG1 (c35-16 / body
                                                                  :poss c35-25)
                                                    :ARG0-of (c35-24 / negative-02))))
        :snt3 (c35-15 / link-01
                      :ARG0 (c35-17 / i)
                      :ARG1 (c35-19 / video)
                      :ARG2 (c35-18 / body
                                    :poss c35-25)
                      :condition (c35-13 / leave-11
                                         :ARG0 c35-25
                                         :ARG1 (c35-6 / bed
                                                      :poss c35-25)
                                         :time (c35-2 / ever)
                                         :polarity -)))

# ::snt Can you eat
# ::tokens ["Can", "you", "eat"]
# ::lemmas ["can", "you", "eat"]
(c36-1 / possible-01
       :polarity (c36-0 / amr-unknown)
       :ARG1 (c36-2 / eat-01
                    :ARG0 (c36-3 / you)))

# ::snt Houstoned we have a problem
# ::tokens ["Houstoned", "we", "have", "a", "problem"]
# ::lemmas ["houstoned", "we", "have", "a", "problem"]
(c37-3 / have-03
       :ARG0 (c37-2 / we)
       :ARG1 (c37-0 / problem)
       :mod (c37-1 / city
                   :name (c37-4 / name
                                :op1 "Houston")))

# ::snt will they also pay for the physical therapy ill need to get my muscles strength back
# ::tokens ["will", "they", "also", "pay", "for", "the", "physical", "therapy", "ill", "need", "to", "get", "my", "muscles", "strength", "back"]
# ::lemmas ["will", "they", "also", "pay", "for", "the", "physical", "therapy", "ill", "need", "to", "get", "my", "muscle", "strength", "back"]
(c38-1 / pay-01
       :polarity (c38-4 / amr-unknown)
       :ARG0 (c38-3 / they)
       :ARG3 (c38-9 / therapy
                    :mod (c38-0 / physical)
                    :ARG1-of (c38-7 / need-01
                                    :ARG0 (c38-8 / i
                                                 :part (c38-5 / muscle))
                                    :purpose (c38-6 / get-back-09
                                                    :ARG0 c38-5
                                                    :ARG1 c38-5)))
       :mod (c38-2 / also))

# ::snt There goes the 18k if you have to buy your own weed
# ::tokens ["There", "goes", "the", "18k", "if", "you", "have", "to", "buy", "your", "own", "weed"]
# ::lemmas ["there", "go", "the", "18k", "if", "you", "have", "to", "buy", "your", "own", "weed"]
(c39-4 / go-01
       :ARG1 (c39-3 / monetary-quantity
                    :unit (c39-1 / pound)
                    :quant 18000)
       :condition (c39-0 / obligate-01
                         :ARG1 (c39-6 / you)
                         :ARG2 (c39-5 / buy-01
                                      :ARG0 c39-6
                                      :ARG1 (c39-2 / weed
                                                   :poss c39-6))))

# ::snt I thought there was a catch
# ::tokens ["I", "thought", "there", "was", "a", "catch"]
# ::lemmas ["i", "think", "there", "be", "a", "catch"]
(c40-2 / think-01
       :ARG0 (c40-1 / i)
       :ARG1 (c40-0 / catch-03))

# ::snt There is no mention of smoking weed
# ::tokens ["There", "is", "no", "mention", "of", "smoking", "weed"]
# ::lemmas ["there", "be", "no", "mention", "of", "smoking", "weed"]
(c41-1 / mention-01
       :ARG1 (c41-0 / smoke-02
                    :ARG1 (c41-2 / weed))
       :polarity -)

# ::snt I am ready for weed any time
# ::tokens ["I", "am", "ready", "for", "weed", "any", "time"]
# ::lemmas ["i", "be", "ready", "for", "weed", "any", "time"]
(c42-0 / ready-02
       :ARG1 (c42-4 / i)
       :ARG2 (c42-2 / weed)
       :time (c42-1 / time
                    :mod (c42-3 / any)))

# ::snt classicpict  drdrew DrBruceH  What would happen to your body  Bed sores  Muscle atrophy
# ::tokens ["classicpict", " ", "drdrew", "DrBruceH", " ", "What", "would", "happen", "to", "your", "body", " ", "Bed", "sores", " ", "Muscle", "atrophy"]
# ::lemmas ["classicpict", " ", "drdrew", "DrBruceH", " ", "what", "would", "happen", "to", "your", "body", " ", "bed", "sore", " ", "muscle", "atrophy"]
(c43-6 / and
       :op1 (c43-2 / picture
                   :mod (c43-3 / classic))
       :op2 (c43-1 / doctor
                   :name (c43-9 / name
                                :op1 "DrBruceH"))
       :op3 (c43-4 / event
                   :mod (c43-10 / body
                                :poss (c43-12 / you))
                   :domain (c43-5 / amr-unknown))
       :op4 (c43-7 / sore
                   :mod (c43-0 / bed))
       :op5 (c43-11 / atrophy-01
                    :ARG1 (c43-8 / muscle)))

# ::snt ClassicPict I already do that for free where do I sign up
# ::tokens ["ClassicPict", "I", "already", "do", "that", "for", "free", "where", "do", "I", "sign", "up"]
# ::lemmas ["ClassicPict", "i", "already", "do", "that", "for", "free", "where", "do", "i", "sign", "up"]
(c44-6 / say-01
       :ARG0 (c44-8 / i)
       :ARG1 (c44-3 / sign-up-03
                    :ARG0 c44-8
                    :ARG1 (c44-2 / that)
                    :ARG3 (c44-4 / amr-unknown)
                    :time (c44-1 / already)
                    :ARG1-of (c44-5 / free-03))
       :ARG2 (c44-0 / person
                    :name (c44-7 / name
                                 :op1 "ClassicPict")))

# ::snt ClassicPict ellievears
# ::tokens ["ClassicPict", "ellievears"]
# ::lemmas ["ClassicPict", "ellievear"]
(c45-0 / ellievear
       :mod (c45-1 / product
                   :name (c45-2 / name
                                :op1 "ClassicPict")))

# ::snt its so damn easy Ive been doing it after I entered high school
# ::tokens ["its", "so", "damn", "easy", "I", "ve", "been", "doing", "it", "after", "I", "entered", "high", "school"]
# ::lemmas ["its", "so", "damn", "easy", "i", "have", "be", "do", "it", "after", "i", "enter", "high", "school"]
(c46-8 / have-degree-91
       :ARG1 (c46-1 / do-02
                    :ARG0 (c46-9 / i)
                    :ARG1 (c46-0 / it)
                    :time (c46-4 / after
                                 :op1 (c46-2 / enter-01
                                             :ARG0 c46-9
                                             :ARG1 (c46-3 / high-school))))
       :ARG2 (c46-5 / easy-05
                    :ARG1 c46-1)
       :ARG3 (c46-7 / so)
       :mod (c46-6 / damn))

# ::snt ClassicPict  how to apply
# ::tokens ["ClassicPict", " ", "how", "to", "apply"]
# ::lemmas ["ClassicPict", " ", "how", "to", "apply"]
(c47-1 / person
       :name (c47-2 / name
                    :op1 "ClassicPict")
       :ARG0-of (c47-3 / teach-01
                       :ARG1 (c47-0 / apply-02)))

# ::snt mysteriousfact ForeverBreeLynn
# ::tokens ["mysteriousfact", "ForeverBreeLynn"]
# ::lemmas ["mysteriousfact", "ForeverBreeLynn"]
(c48-4 / say-01
       :ARG0 (c48-6 / i)
       :ARG1 (c48-3 / fact
                    :mod (c48-2 / silly))
       :ARG2 (c48-1 / person
                    :name (c48-5 / name
                                 :op1 "BreeLynn"))
       :time (c48-0 / forever))

# ::snt ClassicPict Breaks Down To 1071 An Hour
# ::tokens ["ClassicPict", "Breaks", "Down", "To", "1071", "An", "Hour"]
# ::lemmas ["ClassicPict", "break", "down", "to", "1071", "an", "hour"]
(c49-5 / break-down-11
       :ARG0 (c49-1 / person
                    :name (c49-4 / name
                                 :op1 "ClassicPict"))
       :ARG2 (c49-0 / rate-entity-91
                    :ARG2 (c49-2 / temporal-quantity
                                 :unit (c49-3 / hour)
                                 :quant 1)
                    :ARG1 1071))

# ::snt Ill do it
# ::tokens ["Ill", "do", "it"]
# ::lemmas ["Ill", "do", "it"]
(c50-0 / do-02
       :ARG0 (c50-1 / i)
       :ARG1 (c50-2 / it))
