# ::snt lucky mars
# ::tokens ["lucky", "mars"]
# ::lemmas ["lucky", "mars"]
(c1-0 / person
      :name (c1-1 / name
                  :op1 "Mars")
      :mod (c1-2 / lucky))

# ::snt if he goes at least he will finally help reduce his incredibly big carbon footprint
# ::tokens ["if", "he", "goes", "at", "least", "he", "will", "finally", "help", "reduce", "his", "incredibly", "big", "carbon", "footprint"]
# ::lemmas ["if", "he", "go", "at", "least", "he", "will", "finally", "help", "reduce", "his", "incredibly", "big", "carbon", "footprint"]
(c2-6 / help-01
      :ARG0 (c2-3 / he)
      :ARG1 (c2-0 / reduce-01
                  :ARG0 c2-3
                  :ARG1 (c2-5 / footprint
                              :mod (c2-2 / carbon)
                              :mod (c2-9 / big
                                         :degree (c2-8 / incredible))
                              :poss c2-3))
      :time (c2-1 / final)
      :condition (c2-7 / go-02
                       :ARG0 c2-3
                       :mod (c2-4 / at-least)))

# ::snt All that heat might be dangerous for the shuttle
# ::tokens ["All", "that", "heat", "might", "be", "dangerous", "for", "the", "shuttle"]
# ::lemmas ["all", "that", "heat", "may", "be", "dangerous", "for", "the", "shuttle"]
(c3-0 / possible-01
      :ARG1 (c3-1 / endanger-01
                  :ARG0 (c3-5 / heat
                              :mod (c3-2 / that)
                              :mod (c3-3 / all))
                  :ARG1 (c3-4 / shuttle)))

# ::snt LoJackson94  dont let the door hit you in the ass on the way out    bye douchebag
# ::tokens ["LoJackson94", " ", "do", "nt", "let", "the", "door", "hit", "you", "in", "the", "ass", "on", "the", "way", "out", "   ", "bye", "douchebag"]
# ::lemmas ["LoJackson94", " ", "do", "not", "let", "the", "door", "hit", "you", "in", "the", "ass", "on", "the", "way", "out", "   ", "bye", "douchebag"]
(c4-6 / say-01
      :ARG0 (c4-10 / i)
      :ARG1 (c4-7 / let-01
                  :ARG0 (c4-2 / person
                              :name (c4-9 / name
                                          :op1 "LoJackson94"))
                  :ARG1 (c4-8 / hit-01
                              :ARG0 (c4-1 / door)
                              :ARG1 c4-2
                              :ARG2 (c4-4 / ass)
                              :time (c4-3 / way
                                          :direction (c4-0 / out)))
                  :polarity -
                  :mode imperative)
      :ARG2 (c4-5 / douchebag))

# ::snt And Twix Snickers andGod I bored myself there
# ::tokens ["And", "Twix", "Snickers", "andGod", "I", "bored", "myself", "there"]
# ::lemmas ["and", "Twix", "Snickers", "andgod", "i", "bore", "myself", "there"]
(c5-4 / and
      :op2 (c5-7 / bore-02
                 :ARG0 (c5-6 / i
                             :ARG1-of c5-7)
                 :location (c5-3 / there)
                 :mod (c5-1 / person
                            :name (c5-5 / name
                                        :op1 "Twix"
                                        :op2 "Snickers")
                            :mode expressive)
                 :mod (c5-0 / person
                            :name (c5-2 / name
                                        :op1 "God")
                            :mode expressive)))

# ::snt When do they leave The sooner the better  BIEntertain JustMePammy
# ::tokens ["When", "do", "they", "leave", "The", "sooner", "the", "better", " ", "BIEntertain", "JustMePammy"]
# ::lemmas ["when", "do", "they", "leave", "the", "soon", "the", "well", " ", "bientertain", "JustMePammy"]
(c6-11 / be-temporally-at-91
       :ARG1 (c6-6 / leave-11
                   :ARG0 (c6-4 / they)
                   :time (c6-5 / soon
                               :ARG2-of (c6-7 / have-degree-91
                                              :ARG1 c6-6
                                              :ARG3 (c6-8 / more))))
       :ARG2 (c6-1 / enter-01
                   :ARG0 (c6-2 / person
                               :name (c6-10 / name
                                            :op1 "JustMePammy"))
                   :ARG1-of (c6-3 / have-degree-91
                                  :ARG2 (c6-9 / good-02
                                              :ARG1 c6-1)
                                  :ARG3 (c6-0 / more))))

# ::snt BIEntertain good riddance
# ::tokens ["BIEntertain", "good", "riddance"]
# ::lemmas ["bientertain", "good", "riddance"]
(c7-0 / entertain-01
      :ARG0 (c7-3 / you)
      :ARG1 (c7-2 / riddance
                  :ARG1-of (c7-1 / good-02))
      :mode imperative)

# ::snt NASAWatch elonmusk Mars needs actors
# ::tokens ["NASAWatch", "elonmusk", "Mars", "needs", "actors"]
# ::lemmas ["NASAWatch", "elonmusk", "Mars", "need", "actor"]
(c8-8 / say-01
      :ARG0 (c8-5 / publication
                  :name (c8-9 / name
                              :op1 "NASAWatch"))
      :ARG1 (c8-6 / need-01
                  :ARG0 (c8-2 / planet
                              :name (c8-3 / name
                                          :op1 "Mars"))
                  :ARG1 (c8-1 / person
                              :ARG0-of (c8-7 / act-01)))
      :ARG2 (c8-0 / organization
                  :name (c8-4 / name
                              :op1 "Elonmusk")))

# ::snt NASAWatch elonmusk dont let the hatch hit you on the ass bye
# ::tokens ["NASAWatch", "elonmusk", "do", "nt", "let", "the", "hatch", "hit", "you", "on", "the", "ass", "bye"]
# ::lemmas ["NASAWatch", "elonmusk", "do", "not", "let", "the", "hatch", "hit", "you", "on", "the", "ass", "bye"]
(c9-5 / let-01
      :ARG0 (c9-7 / you
                  :part (c9-2 / ass))
      :ARG1 (c9-4 / hit-01
                  :ARG0 (c9-1 / hatch)
                  :ARG1 c9-7
                  :ARG2 c9-2)
      :ARG1-of (c9-3 / say-01
                     :ARG0 (c9-0 / publication
                                 :name (c9-6 / name
                                             :op1 "NASAWatch")))
      :mode imperative
      :polarity -)

# ::snt Goodbye
# ::tokens ["Goodbye"]
# ::lemmas ["goodbye"]
(c10-0 / goodbye)

# ::snt good riddence to bad CIA rubbish
# ::tokens ["good", "riddence", "to", "bad", "CIA", "rubbish"]
# ::lemmas ["good", "riddence", "to", "bad", "CIA", "rubbish"]
(c11-0 / riddance
       :ARG1-of (c11-4 / good-02)
       :beneficiary (c11-2 / rubbish
                           :source (c11-1 / government-organization
                                          :name (c11-3 / name
                                                       :op1 "CIA"))))

# ::snt Excellent Hope its leaving tomorrow That idiots not going anywhere All talk
# ::tokens ["Excellent", "Hope", "its", "leaving", "tomorrow", "That", "idiots", "not", "going", "anywhere", "All", "talk"]
# ::lemmas ["Excellent", "Hope", "its", "leave", "tomorrow", "that", "idiot", "not", "go", "anywhere", "all", "talk"]
(c12-7 / multi-sentence
       :snt1 (c12-1 / excellent-02
                    :ARG1 (c12-6 / hope-01
                                 :ARG1 (c12-8 / leave-11
                                              :ARG0 (c12-10 / it)
                                              :time (c12-3 / tomorrow))))
       :snt2 (c12-9 / go-02
                    :ARG0 (c12-0 / idiot
                                 :mod (c12-11 / that))
                    :ARG4 (c12-4 / anywhere)
                    :polarity -)
       :snt3 (c12-5 / talk-01
                    :mod (c12-2 / all)))

# ::snt Ahhh hell get me off this planet please
# ::tokens ["Ahhh", "hell", "get", "me", "off", "this", "planet", "please"]
# ::lemmas ["ahhh", "hell", "get", "me", "off", "this", "planet", "please"]
(c13-4 / get-05
       :ARG0 (c13-6 / you)
       :ARG1 (c13-5 / i)
       :ARG2 (c13-0 / off
                    :op1 (c13-1 / planet
                                :mod (c13-2 / this)))
       :mod (c13-3 / hell
                   :mode expressive)
       :mode imperative
       :polite +)

# ::snt inversedotcom Dont blame him Once my kids grow up in about 10 years Im ready to go
# ::tokens ["inversedotcom", "Do", "nt", "blame", "him", "Once", "my", "kids", "grow", "up", "in", "about", "10", "years", "I", "m", "ready", "to", "go"]
# ::lemmas ["inversedotcom", "do", "not", "blame", "him", "once", "my", "kid", "grow", "up", "in", "about", "10", "years", "i", "be", "ready", "to", "go"]
(c14-7 / say-01
       :ARG0 (c14-11 / i)
       :ARG1 (c14-12 / blame-01
                     :ARG0 (c14-14 / you)
                     :ARG1 (c14-8 / he)
                     :time (c14-10 / grow-up-04
                                   :ARG1 (c14-2 / person
                                                :ARG0-of (c14-3 / have-rel-role-91
                                                                :ARG1 c14-11
                                                                :ARG2 (c14-9 / kid)))
                                   :time (c14-6 / after
                                                :quant (c14-4 / about
                                                              :op1 (c14-5 / temporal-quantity
                                                                          :unit (c14-1 / year)
                                                                          :quant 10))
                                                :op1 c14-10))
                     :polarity -
                     :mode imperative)
       :ARG2 (c14-0 / person
                    :name (c14-13 / name
                                  :op1 "inversedotcom")))

# ::snt i would too
# ::tokens ["i", "would", "too"]
# ::lemmas ["i", "would", "too"]
(c15-0 / event
       :mod (c15-1 / i)
       :mod (c15-2 / too))

# ::snt inversedotcom LeoDiCaprio Can you go now
# ::tokens ["inversedotcom", "LeoDiCaprio", "Can", "you", "go", "now"]
# ::lemmas ["inversedotcom", "LeoDiCaprio", "can", "you", "go", "now"]
(c16-4 / ask-01
       :ARG0 (c16-7 / i)
       :ARG1 (c16-2 / possible-01
                    :ARG1 (c16-6 / go-02
                                 :ARG0 (c16-0 / person
                                              :name (c16-5 / name
                                                           :op1 "LeLeoDiCaprio"))
                                 :time (c16-3 / now))
                    :ARG1-of (c16-1 / request-confirmation-91
                                    :ARG0 c16-7
                                    :ARG2 c16-0))
       :ARG2 c16-0)

# ::snt I sign up for it too I strongly believe in elonmusk great world changing ideas
# ::tokens ["I", "sign", "up", "for", "it", "too", "I", "strongly", "believe", "in", "elonmusk", "great", "world", "changing", "ideas"]
# ::lemmas ["i", "sign", "up", "for", "it", "too", "i", "strongly", "believe", "in", "elonmusk", "great", "world", "change", "idea"]
(c17-8 / multi-sentence
       :snt1 (c17-7 / sign-up-03
                    :ARG1 (c17-12 / i)
                    :ARG3 (c17-0 / it)
                    :mod (c17-4 / too))
       :snt2 (c17-13 / believe-01
                     :ARG0 (c17-10 / i)
                     :ARG1 (c17-1 / idea
                                  :mod (c17-11 / great)
                                  :ARG0-of (c17-3 / change-01
                                                  :ARG1 (c17-5 / world))
                                  :poss (c17-2 / religious-group
                                               :name (c17-9 / name
                                                            :op1 "Islam")))
                     :ARG1-of (c17-6 / strong-02)))

# ::snt SpaceFrontier BIEntertain
# ::tokens ["SpaceFrontier", "BIEntertain"]
# ::lemmas ["SpaceFrontier", "BIEntertain"]
(c18-0 / organization
       :name (c18-1 / name
                    :op1 "SpaceFrontier"
                    :op2 "BIEntertain"))

# ::snt Though I do admit to being VERY jealous
# ::tokens ["Though", "I", "do", "admit", "to", "being", "VERY", "jealous"]
# ::lemmas ["though", "i", "do", "admit", "to", "be", "very", "jealous"]
(c19-2 / have-concession-91
       :ARG2 (c19-1 / admit-01
                    :ARG0 (c19-3 / i)
                    :ARG1 (c19-4 / jealous-02
                                 :ARG0 c19-3
                                 :degree (c19-0 / very))))

# ::snt Thats fun He deserves a good adventure
# ::tokens ["That", "s", "fun", "He", "deserves", "a", "good", "adventure"]
# ::lemmas ["that", "s", "fun", "he", "deserve", "a", "good", "adventure"]
(c20-5 / multi-sentence
       :snt1 (c20-3 / fun-01
                    :ARG1 (c20-1 / that))
       :snt2 (c20-0 / deserve-01
                    :ARG0 (c20-4 / he)
                    :ARG1 (c20-2 / adventure
                                 :ARG1-of (c20-6 / good-02))))

# ::snt BIEntertain hell yeah but I would like to tweet the experience
# ::tokens ["BIEntertain", "hell", "yeah", "but", "I", "would", "like", "to", "tweet", "the", "experience"]
# ::lemmas ["BIEntertain", "hell", "yeah", "but", "i", "would", "like", "to", "tweet", "the", "experience"]
(c21-0 / contrast-01
       :ARG1 (c21-1 / entertain-01
                    :mod (c21-4 / hell
                                :mode expressive))
       :ARG2 (c21-5 / like-02
                    :ARG0 (c21-6 / i)
                    :ARG1 (c21-2 / tweet-02
                                 :ARG0 c21-6
                                 :ARG1 (c21-3 / experience-01))))

# ::snt BIEntertain  Will MarsRealEstateOffice be establishedIs it ethical SpaceExplorations to get turned into a trading unit
# ::tokens ["BIEntertain", " ", "Will", "MarsRealEstateOffice", "be", "establishedIs", "it", "ethical", "SpaceExplorations", "to", "get", "turned", "into", "a", "trading", "unit"]
# ::lemmas ["BIEntertain", " ", "will", "marsrealestateoffice", "be", "establishedis", "it", "ethical", "SpaceExplorations", "to", "get", "turn", "into", "a", "trading", "unit"]
(c22-1 / entertain-01
       :ARG0 (c22-11 / you)
       :ARG1 (c22-5 / establish-01
                    :ARG1 (c22-0 / office
                                 :name (c22-8 / name
                                              :op1 "MarsRealEstateOffice"))
                    :polarity (c22-4 / amr-unknown)
                    :purpose (c22-9 / explore-01
                                    :ARG1 (c22-7 / space)
                                    :mod (c22-6 / ethics)
                                    :ARG1-of (c22-3 / turn-02
                                                    :ARG2 (c22-2 / unit
                                                                 :ARG0-of (c22-10 / trade-01))))))

# ::snt wasnt this a one way trip cc lorengrush
# ::tokens ["was", "nt", "this", "a", "one", "way", "trip", "cc", "lorengrush"]
# ::lemmas ["be", "not", "this", "a", "one", "way", "trip", "cc", "lorengrush"]
(c23-4 / say-01
       :ARG0 (c23-6 / i)
       :ARG1 (c23-2 / trip-03
                    :mod (c23-0 / one-way)
                    :domain (c23-7 / this)
                    :polarity (c23-3 / amr-unknown))
       :ARG2 (c23-1 / person
                    :name (c23-5 / name
                                 :op1 "cc"
                                 :op2 "Lorengrush")))

# ::snt BIEntertain would be the trip of a lifetime no matter what happened kudos and hat tip for sure anyone spare a buck
# ::tokens ["BIEntertain", "would", "be", "the", "trip", "of", "a", "lifetime", "no", "matter", "what", "happened", "kudos", "and", "hat", "tip", "for", "sure", "anyone", "spare", "a", "buck"]
# ::lemmas ["BIEntertain", "would", "be", "the", "trip", "of", "a", "lifetime", "no", "matter", "what", "happen", "kudo", "and", "hat", "tip", "for", "sure", "anyone", "spare", "a", "buck"]
(c24-9 / multi-sentence
       :snt1 (c24-4 / trip
                    :domain (c24-2 / enter-01)
                    :mod (c24-10 / lifetime)
                    :ARG1-of (c24-1 / regardless-91
                                    :ARG2 (c24-7 / event)))
       :snt2 (c24-6 / and
                    :op1 (c24-8 / kudos)
                    :op2 (c24-13 / tip
                                 :mod (c24-11 / hat))
                    :ARG1-of (c24-12 / sure-02)
                    :condition (c24-5 / spare-01
                                      :ARG0 (c24-3 / anyone)
                                      :ARG1 (c24-0 / buck))))

# ::snt いつも見てます！最後から2番目のパラグラフにa source close to DiCaprio has told Business Insider that the actor was in fact joking とありますよー。
# ::tokens ["\u3044\u3064\u3082\u898b\u3066\u307e\u3059\uff01\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u30d1\u30e9\u30b0\u30e9\u30d5\u306ba", "source", "close", "to", "DiCaprio", "has", "told", "Business", "Insider", "that", "the", "actor", "was", "in", "fact", "joking", "\u3068\u3042\u308a\u307e\u3059\u3088\u30fc", "\u3002"]
# ::lemmas ["\u3044\u3064\u3082\u898b\u3066\u307e\u3059\uff01\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u30d1\u30e9\u30b0\u30e9\u30d5\u306ba", "source", "close", "to", "DiCaprio", "have", "tell", "Business", "Insider", "that", "the", "actor", "be", "in", "fact", "joking", "\u3068\u3042\u308a\u307e\u3059\u3088\u30fc", "\u3002"]
(c25-6 / tell-01
       :ARG0 (c25-8 / source
                    :ARG1-of (c25-3 / close-10
                                    :ARG2 (c25-2 / person
                                                 :name (c25-9 / name
                                                              :op1 "DiCaprio")
                                                 :ARG0-of (c25-7 / act-01))))
       :ARG1 (c25-11 / joke-01
                     :ARG0 c25-2
                     :ARG2 (c25-4 / thing
                                  :name (c25-5 / name
                                               :op1 " と"
                                               :op2 "あり"
                                               :op3 "ま"
                                               :op4 "す"
                                               :op5 "よー"))
                     :mod (c25-10 / in-fact))
       :ARG2 (c25-0 / publication
                    :name (c25-1 / name
                                 :op1 "Business"
                                 :op2 "Insider")))
