# ::snt Does it
# ::tokens ["Does", "it"]
# ::lemmas ["do", "it"]
(c1-0 / request-confirmation-91)

# ::snt LPontheleft at some point this will make a great episode for you guys
# ::tokens ["LPontheleft", "at", "some", "point", "this", "will", "make", "a", "great", "episode", "for", "you", "guys"]
# ::lemmas ["lpontheleft", "at", "some", "point", "this", "will", "make", "a", "great", "episode", "for", "you", "guy"]
(c2-6 / leave-15
      :ARG0 (c2-8 / i)
      :ARG1 (c2-3 / this
                  :ARG0-of (c2-5 / make-01
                                 :ARG1 (c2-0 / episode
                                             :mod (c2-7 / great))
                                 :beneficiary (c2-1 / guy
                                                    :mod (c2-9 / you))))
      :time (c2-2 / point
                  :mod (c2-4 / some))
      :polarity -)

# ::snt homeless are never missed
# ::tokens ["homeless", "are", "never", "missed"]
# ::lemmas ["homeless", "be", "never", "miss"]
(c3-3 / miss-01
      :ARG1 (c3-0 / person
                  :ARG1-of (c3-2 / homeless-00))
      :time (c3-1 / ever)
      :polarity -)

# ::snt So if you are missing someone in that area
# ::tokens ["So", "if", "you", "are", "missing", "someone", "in", "that", "area"]
# ::lemmas ["so", "if", "you", "be", "miss", "someone", "in", "that", "area"]
(c4-5 / infer-01
      :ARG1 (c4-4 / have-condition-91
                  :ARG2 (c4-3 / miss-02
                              :ARG0 (c4-6 / you)
                              :ARG1 (c4-2 / someone)
                              :location (c4-1 / area
                                              :mod (c4-0 / that)))))

# ::snt I cannot connect to that statment Mathilde httpwwwourseniorhoodcom
# ::tokens ["I", "can", "not", "connect", "to", "that", "statment", "Mathilde", "httpwwwourseniorhoodcom"]
# ::lemmas ["i", "can", "not", "connect", "to", "that", "statment", "Mathilde", "httpwwwourseniorhoodcom"]
(c5-5 / say-01
      :ARG0 (c5-7 / i)
      :ARG1 (c5-1 / possible-01
                  :ARG1 (c5-2 / connect-01
                              :ARG1 c5-7
                              :ARG2 (c5-4 / statment
                                          :mod (c5-3 / that)))
                  :polarity -)
      :ARG2 (c5-0 / person
                  :name (c5-6 / name
                              :op1 "Madsen")))

# ::snt Those 3 look exactly like how Id want crazed cannibals to look
# ::tokens ["Those", "3", "look", "exactly", "like", "how", "I", "d", "want", "crazed", "cannibals", "to", "look"]
# ::lemmas ["those", "3", "look", "exactly", "like", "how", "i", "d", "want", "craze", "cannibal", "to", "look"]
(c6-7 / look-02
      :ARG0 (c6-2 / thing
                  :mod (c6-9 / that)
                  :quant 3)
      :ARG1 (c6-5 / thing
                  :manner-of (c6-4 / look-02
                                   :ARG0 (c6-8 / i)
                                   :ARG1 (c6-0 / cannibal
                                               :ARG1-of (c6-6 / crazy-03))
                                   :ARG1-of (c6-3 / want-01
                                                  :ARG0 c6-8)))
      :manner (c6-1 / exact))

# ::snt Definitely diabetes is not their main concern D
# ::tokens ["Definitely", "diabetes", "is", "not", "their", "main", "concern", "D"]
# ::lemmas ["definitely", "diabetes", "be", "not", "their", "main", "concern", "d"]
(c7-1 / concern-01
      :ARG0 (c7-0 / diabetes
                  :mod (c7-3 / definite))
      :ARG1 (c7-2 / they)
      :mod (c7-4 / main)
      :polarity -)

# ::snt Oh
# ::tokens ["Oh"]
# ::lemmas ["oh"]
(c8-0 / oh
      :mode expressive)

# ::snt Ugh Promise me this wont end up as some funded research idea
# ::tokens ["Ugh", "Promise", "me", "this", "wo", "nt", "end", "up", "as", "some", "funded", "research", "idea"]
# ::lemmas ["ugh", "promise", "me", "this", "will", "not", "end", "up", "as", "some", "fund", "research", "idea"]
(c9-2 / promise-01
      :ARG0 (c9-9 / you)
      :ARG1 (c9-8 / i)
      :ARG2 (c9-3 / end-up-03
                  :ARG1 (c9-5 / this)
                  :ARG2 (c9-0 / idea
                              :ARG1-of (c9-6 / fund-01)
                              :topic (c9-1 / research-01)
                              :mod (c9-7 / some))
                  :polarity -)
      :mod (c9-4 / ugh
                 :mode expressive)
      :mode imperative)

# ::snt Sorry but murder isnt a laughing matter
# ::tokens ["Sorry", "but", "murder", "is", "nt", "a", "laughing", "matter"]
# ::lemmas ["sorry", "but", "murder", "be", "not", "a", "laughing", "matter"]
(c10-1 / contrast-01
       :ARG1 (c10-2 / sorry-01)
       :ARG2 (c10-3 / matter
                    :ARG0-of (c10-4 / laugh-01)
                    :domain (c10-0 / murder-01)
                    :polarity -))

# ::snt They dont actually look that happy so Id take the depression bit with a pinch of salt  and a portion of chips
# ::tokens ["They", "do", "nt", "actually", "look", "that", "happy", "so", "I", "d", "take", "the", "depression", "bit", "with", "a", "pinch", "of", "salt", " ", "and", "a", "portion", "of", "chips"]
# ::lemmas ["they", "do", "not", "actually", "look", "that", "happy", "so", "i", "d", "take", "the", "depression", "bit", "with", "a", "pinch", "of", "salt", " ", "and", "a", "portion", "of", "chip"]
(c11-2 / cause-01
       :ARG0 (c11-10 / look-02
                     :ARG0 (c11-5 / they)
                     :ARG1 (c11-9 / happy-01
                                  :degree (c11-13 / that))
                     :ARG1-of (c11-6 / actual-02)
                     :polarity -)
       :ARG1 (c11-7 / take-01
                    :ARG0 (c11-12 / i)
                    :ARG1 (c11-0 / bit
                                 :mod (c11-1 / depress-01))
                    :instrument (c11-4 / and
                                       :op1 (c11-8 / salt
                                                   :quant (c11-3 / portion))
                                       :op2 (c11-11 / chip
                                                    :quant c11-3))))

# ::snt Cures those who have been eaten surely
# ::tokens ["Cures", "those", "who", "have", "been", "eaten", "surely"]
# ::lemmas ["cure", "those", "who", "have", "be", "eat", "surely"]
(c12-0 / cure-01
       :ARG1 (c12-1 / person
                    :ARG1-of (c12-2 / eat-01))
       :ARG1-of (c12-3 / sure-02))

# ::snt Always very important It is low carb
# ::tokens ["Always", "very", "important", "It", "is", "low", "carb"]
# ::lemmas ["always", "very", "important", "it", "be", "low", "carb"]
(c13-4 / important-01
       :degree (c13-1 / very)
       :time (c13-2 / always)
       :ARG1 (c13-3 / low-04
                    :ARG1 (c13-0 / carb)))

# ::snt Yeah poor story They forgot to specify whether type 1 or type 2
# ::tokens ["Yeah", "poor", "story", "They", "forgot", "to", "specify", "whether", "type", "1", "or", "type", "2"]
# ::lemmas ["yeah", "poor", "story", "they", "forget", "to", "specify", "whether", "type", "1", "or", "type", "2"]
(c14-5 / forget-01
       :ARG0 (c14-2 / they)
       :ARG1 (c14-6 / specify-01
                    :ARG0 c14-2
                    :ARG1 (c14-0 / or
                                 :op1 (c14-7 / type
                                             :mod 1)
                                 :op2 (c14-4 / type
                                             :mod 2)))
       :mod (c14-3 / story
                   :mod (c14-1 / poor)))

# ::snt Thanks Trump
# ::tokens ["Thanks", "Trump"]
# ::lemmas ["thank", "trump"]
(c15-2 / thank-01
       :ARG1 (c15-0 / person
                    :name (c15-1 / name
                                 :op1 "Trump")))

# ::snt Everything you think about Florida is true  MaraLago
# ::tokens ["Everything", "you", "think", "about", "Florida", "is", "true", " ", "MaraLago"]
# ::lemmas ["everything", "you", "think", "about", "Florida", "be", "true", " ", "MaraLago"]
(c16-5 / say-01
       :ARG0 (c16-7 / i)
       :ARG1 (c16-3 / true-01
                    :ARG1 (c16-0 / everything
                                 :ARG1-of (c16-8 / think-01
                                                 :ARG0 (c16-1 / person
                                                              :name (c16-6 / name
                                                                           :op1 "Mara"
                                                                           :op2 "LLago"))
                                                 :topic (c16-4 / state
                                                               :name (c16-2 / name
                                                                            :op1 "Florida")))))
       :ARG2 c16-1)

# ::snt Plz dont Everything is just fine here No worries
# ::tokens ["Plz", "do", "nt", "Everything", "is", "just", "fine", "here", "No", "worries"]
# ::lemmas ["plz", "do", "not", "everything", "be", "just", "fine", "here", "no", "worry"]
(c17-4 / multi-sentence
       :snt1 (c17-0 / cause-01
                    :ARG0 (c17-2 / amr-unknown))
       :snt2 (c17-3 / fine-04
                    :ARG1 (c17-1 / everything)
                    :mod (c17-6 / just)
                    :location (c17-5 / here)))

# ::snt What are you saying  Do we need to get the police over to look in on your basement
# ::tokens ["What", "are", "you", "saying", " ", "Do", "we", "need", "to", "get", "the", "police", "over", "to", "look", "in", "on", "your", "basement"]
# ::lemmas ["what", "be", "you", "say", " ", "do", "we", "need", "to", "get", "the", "police", "over", "to", "look", "in", "on", "your", "basement"]
(c18-5 / say-01
       :ARG0 (c18-9 / you)
       :ARG1 (c18-4 / amr-unknown)
       :ARG3 (c18-0 / obligate-01
                    :ARG1 (c18-3 / we)
                    :ARG2 (c18-7 / get-04
                                 :ARG0 c18-3
                                 :ARG1 (c18-2 / police
                                              :ARG0-of (c18-6 / look-01
                                                              :ARG1 (c18-8 / basement
                                                                           :poss c18-9)))
                                 :ARG2 (c18-1 / over))))

# ::snt Typical friday night for me
# ::tokens ["Typical", "friday", "night", "for", "me"]
# ::lemmas ["typical", "friday", "night", "for", "me"]
(c19-1 / typical-02
       :ARG1 (c19-0 / date-entity
                    :weekday (c19-2 / friday)
                    :dayperiod (c19-3 / night))
       :ARG2 (c19-4 / i))

# ::snt Dear lord  I dont want to believe the things they say about Florida but then theres this
# ::tokens ["Dear", "lord", " ", "I", "do", "nt", "want", "to", "believe", "the", "things", "they", "say", "about", "Florida", "but", "then", "there", "s", "this"]
# ::lemmas ["dear", "lord", " ", "i", "do", "not", "want", "to", "believe", "the", "thing", "they", "say", "about", "Florida", "but", "then", "there", "s", "this"]
(c20-8 / say-01
       :ARG0 (c20-11 / i)
       :ARG1 (c20-1 / contrast-01
                    :ARG1 (c20-4 / want-01
                                 :ARG0 c20-11
                                 :ARG1 (c20-12 / believe-01
                                               :ARG0 c20-11
                                               :ARG1 (c20-3 / thing
                                                            :ARG1-of (c20-5 / say-01
                                                                            :ARG0 (c20-2 / they)
                                                                            :ARG3 (c20-6 / state
                                                                                         :name (c20-10 / name
                                                                                                       :op1 "Florida")))))
                                 :polarity -)
                    :ARG2 (c20-7 / this
                                 :mod (c20-13 / then)))
       :ARG2 (c20-9 / lord
                    :mod (c20-0 / dear)))

# ::snt Mmmmmm people is good eating
# ::tokens ["Mmmmmm", "people", "is", "good", "eating"]
# ::lemmas ["mmmmmm", "people", "be", "good", "eating"]
(c21-1 / good-02
       :ARG1 (c21-0 / eat-01
                    :ARG0 (c21-3 / person))
       :mod (c21-2 / hmm
                   :mode expressive))

# ::snt Somebody dumped too much bath salts or something I mean fuck how many does that make eating people
# ::tokens ["Somebody", "dumped", "too", "much", "bath", "salts", "or", "something", "I", "mean", "fuck", "how", "many", "does", "that", "make", "eating", "people"]
# ::lemmas ["somebody", "dump", "too", "much", "bath", "salt", "or", "something", "i", "mean", "fuck", "how", "many", "do", "that", "make", "eat", "people"]
(c22-12 / mean-01
        :ARG0 (c22-15 / i)
        :ARG1 (c22-0 / or
                     :op1 (c22-2 / dump-01
                                 :ARG0 (c22-11 / somebody)
                                 :ARG1 (c22-8 / salt
                                              :mod (c22-16 / bath)
                                              :ARG1-of (c22-13 / have-quant-91
                                                               :ARG2 (c22-1 / much)
                                                               :ARG3 (c22-6 / too))))
                     :op2 (c22-9 / dump-01
                                 :ARG0 c22-11
                                 :ARG1 (c22-7 / something)))
        :ARG2 (c22-14 / make-02
                      :ARG0 (c22-3 / that)
                      :ARG1 (c22-4 / eat-01
                                   :ARG1 (c22-5 / person))
                      :quant (c22-10 / amr-unknown)))

# ::snt lol its the water
# ::tokens ["lol", "its", "the", "water"]
# ::lemmas ["lol", "its", "the", "water"]
(c23-2 / water
       :ARG2-of (c23-1 / laugh-01
                       :manner (c23-0 / loud)
                       :mode expressive))

# ::snt What the fuck did I tell you Sorry Im really really baked
# ::tokens ["What", "the", "fuck", "did", "I", "tell", "you", "Sorry", "I", "m", "really", "really", "baked"]
# ::lemmas ["what", "the", "fuck", "do", "i", "tell", "you", "sorry", "i", "be", "really", "really", "baked"]
(c24-1 / tell-01
       :ARG0 (c24-5 / i)
       :ARG1 (c24-2 / and
                    :op1 (c24-4 / sorry-01
                                :ARG1 c24-5)
                    :op2 (c24-6 / bake-01
                                :ARG0 c24-5
                                :ARG1-of (c24-0 / real-04)))
       :ARG2 (c24-7 / you)
       :mod (c24-3 / fuck
                   :mode expressive))

# ::snt What the holy hell
# ::tokens ["What", "the", "holy", "hell"]
# ::lemmas ["what", "the", "holy", "hell"]
(c25-1 / hell
       :mod (c25-0 / holy)
       :mode expressive)

# ::snt The part about the diabetes cure is still true
# ::tokens ["The", "part", "about", "the", "diabetes", "cure", "is", "still", "true"]
# ::lemmas ["the", "part", "about", "the", "diabetes", "cure", "be", "still", "true"]
(c26-3 / true-01
       :ARG1 (c26-1 / part
                    :topic (c26-2 / cure-01
                                  :ARG2 (c26-0 / disease
                                               :name (c26-5 / name
                                                            :op1 "diabetes"))))
       :mod (c26-4 / still))

# ::snt Ahhhh Florida you make me chuckle
# ::tokens ["Ahhhh", "Florida", "you", "make", "me", "chuckle"]
# ::lemmas ["Ahhhh", "Florida", "you", "make", "me", "chuckle"]
(c27-3 / make-02
       :ARG0 (c27-2 / state
                    :name (c27-4 / name
                                 :op1 "Florida"))
       :ARG1 (c27-0 / chuckle-01
                    :ARG0 (c27-5 / i))
       :mod (c27-1 / ah
                   :mode expressive))

# ::snt Tastes just like chicken they claim
# ::tokens ["Tastes", "just", "like", "chicken", "they", "claim"]
# ::lemmas ["taste", "just", "like", "chicken", "they", "claim"]
(c28-0 / resemble-01
       :ARG1 (c28-3 / tit)
       :ARG2 (c28-2 / chicken
                    :ARG1-of (c28-4 / claim-01
                                    :ARG0 (c28-5 / they)))
       :mod (c28-1 / just))

# ::snt Ill take my chances with diabetes and depression lolexecute them all
# ::tokens ["Ill", "take", "my", "chances", "with", "diabetes", "and", "depression", "lolexecute", "them", "all"]
# ::lemmas ["Ill", "take", "my", "chance", "with", "diabetes", "and", "depression", "lolexecute", "them", "all"]
(c29-4 / take-01
       :ARG0 (c29-7 / i)
       :ARG1 (c29-1 / chance-02
                    :ARG0 c29-7
                    :ARG1 (c29-5 / and
                                 :op1 (c29-0 / diabetes)
                                 :op2 (c29-6 / depression)
                                 :ARG0-of (c29-2 / eradicate-01
                                                 :ARG1 (c29-8 / they
                                                              :mod (c29-3 / all))))))

# ::snt Have a look at stem cells and adrenachrome  They seems to use it in many places nowadays  But watch out It’s
# ::tokens ["Have", "a", "look", "at", "stem", "cells", "and", "adrenachrome", " ", "They", "seems", "to", "use", "it", "in", "many", "places", "nowadays", " ", "But", "watch", "out", "It", "\u2019s"]
# ::lemmas ["have", "a", "look", "at", "stem", "cell", "and", "adrenachrome", " ", "they", "seem", "to", "use", "it", "in", "many", "place", "nowadays", " ", "but", "watch", "out", "it", "\u2019"]
(c30-12 / multi-sentence
        :snt1 (c30-11 / look-01
                      :ARG0 (c30-16 / you)
                      :ARG1 (c30-9 / and
                                   :op1 (c30-2 / cell
                                               :mod (c30-10 / stem))
                                   :op2 (c30-5 / adrenachrome))
                      :mode imperative)
        :snt2 (c30-8 / seem-01
                     :ARG1 (c30-3 / use-01
                                  :ARG0 (c30-6 / they)
                                  :ARG1 (c30-15 / it)
                                  :location (c30-4 / place
                                                   :quant (c30-1 / many))
                                  :time (c30-14 / nowadays)))
        :snt3 (c30-13 / contrast-01
                      :ARG2 (c30-7 / watch-out-02
                                   :ARG0 (c30-0 / you)
                                   :ARG1 c30-15
                                   :mode imperative)))

# ::snt But it clearly doesnt cure Krayyyzzzee
# ::tokens ["But", "it", "clearly", "does", "nt", "cure", "Krayyyzzzee"]
# ::lemmas ["but", "it", "clearly", "do", "not", "cure", "Krayyyzzzee"]
(c31-1 / contrast-01
       :ARG2 (c31-3 / cure-01
                    :ARG0 (c31-5 / it)
                    :ARG1 (c31-2 / person
                                 :name (c31-4 / name
                                              :op1 "Krayyyzzzee"))
                    :ARG1-of (c31-0 / clear-06)
                    :polarity -))

# ::snt I expect these cures only apply to the victims these guys waved sanity bye bye many years ago
# ::tokens ["I", "expect", "these", "cures", "only", "apply", "to", "the", "victims", "these", "guys", "waved", "sanity", "bye", "bye", "many", "years", "ago"]
# ::lemmas ["i", "expect", "these", "cure", "only", "apply", "to", "the", "victim", "these", "guy", "wave", "sanity", "bye", "bye", "many", "years", "ago"]
(c32-2 / expect-01
       :ARG0 (c32-14 / i)
       :ARG1 (c32-8 / apply-02
                    :ARG1 (c32-3 / cure-01
                                 :mod (c32-5 / this))
                    :ARG2 (c32-6 / victim)
                    :mod (c32-0 / only))
       :ARG1-of (c32-9 / cause-01
                       :ARG0 (c32-7 / wave-01
                                    :ARG0 (c32-13 / guy
                                                  :mod c32-5)
                                    :ARG1 (c32-10 / sanity)
                                    :manner (c32-15 / bye)
                                    :time (c32-1 / before
                                                 :op1 (c32-11 / now)
                                                 :quant (c32-12 / many
                                                                :op1 (c32-4 / temporal-quantity
                                                                            :unit (c32-16 / year)
                                                                            :quant 1))))))

# ::snt Demonstrably no true Does this guy appear either happy or diabetes free to you I rest my case
# ::tokens ["Demonstrably", "no", "true", "Does", "this", "guy", "appear", "either", "happy", "or", "diabetes", "free", "to", "you", "I", "rest", "my", "case"]
# ::lemmas ["demonstrably", "no", "true", "do", "this", "guy", "appear", "either", "happy", "or", "diabetes", "free", "to", "you", "i", "rest", "my", "case"]
(c33-8 / multi-sentence
       :snt1 (c33-4 / true-01
                    :manner (c33-2 / demonstrate-01)
                    :polarity -)
       :snt2 (c33-5 / appear-02
                    :ARG1 (c33-0 / or
                                 :op1 (c33-9 / happy-01
                                             :ARG1 (c33-10 / guy
                                                           :mod (c33-12 / this)))
                                 :op2 (c33-7 / free-04
                                             :ARG1 c33-10
                                             :ARG2 (c33-6 / diabetes)))
                    :ARG2 (c33-13 / you))
       :snt3 (c33-1 / rest-01
                    :ARG0 (c33-11 / i)
                    :ARG1 (c33-3 / case-03
                                 :ARG0 c33-11)))

# ::snt Well it is more cost effective to eat the insured than to treat them So are these Republicans Sounds like a new version of Trumpcare
# ::tokens ["Well", "it", "is", "more", "cost", "effective", "to", "eat", "the", "insured", "than", "to", "treat", "them", "So", "are", "these", "Republicans", "Sounds", "like", "a", "new", "version", "of", "Trumpcare"]
# ::lemmas ["well", "it", "be", "more", "cost", "effective", "to", "eat", "the", "insured", "than", "to", "treat", "them", "so", "be", "these", "Republicans", "sound", "like", "a", "new", "version", "of", "Trumpcare"]
(c34-13 / multi-sentence
        :snt1 (c34-3 / effective-04
                     :ARG0 (c34-11 / eat-01
                                   :ARG1 (c34-4 / person
                                                :ARG1-of (c34-17 / insure-02)))
                     :ARG1 (c34-5 / cost-01)
                     :ARG2-of (c34-14 / have-degree-91
                                      :ARG1 c34-11
                                      :ARG3 (c34-1 / more)
                                      :ARG4 (c34-7 / treat-03
                                                   :ARG1 c34-4))
                     :mod (c34-8 / well))
        :snt2 (c34-12 / sound-01
                      :ARG1 c34-4
                      :mod (c34-0 / political-party
                                  :name (c34-16 / name
                                                :op1 "Republican"))
                      :mod (c34-18 / this))
        :ARG2 (c34-9 / version
                     :ARG1-of (c34-6 / new-01)
                     :mod (c34-15 / law
                                  :name (c34-2 / name
                                               :op1 "Trumpcare")))
        :polarity (c34-10 / amr-unknown))

# ::snt A neighbour a day keeps the doctor away
# ::tokens ["A", "neighbour", "a", "day", "keeps", "the", "doctor", "away"]
# ::lemmas ["a", "neighbour", "a", "day", "keep", "the", "doctor", "away"]
(c35-5 / keep-04
       :ARG0 (c35-6 / neighbor
                    :frequency (c35-0 / rate-entity-91
                                      :ARG3 (c35-2 / temporal-quantity
                                                   :unit (c35-1 / day)
                                                   :quant 1)))
       :ARG1 (c35-3 / doctor)
       :ARG2 (c35-4 / away))

# ::snt its that body and blood of Christ thing taken too literally
# ::tokens ["its", "that", "body", "and", "blood", "of", "Christ", "thing", "taken", "too", "literally"]
# ::lemmas ["its", "that", "body", "and", "blood", "of", "Christ", "thing", "take", "too", "literally"]
(c36-3 / take-04
       :ARG1 (c36-4 / and
                    :op1 (c36-9 / body
                                :poss (c36-1 / person
                                             :name (c36-8 / name
                                                          :op1 "Christ")))
                    :op2 (c36-0 / blood
                                :poss c36-1)
                    :mod (c36-2 / that))
       :ARG2 (c36-6 / literal
                    :ARG2-of (c36-7 / have-degree-91
                                    :ARG1 c36-3
                                    :ARG3 (c36-5 / too))))

# ::snt Ahhh pseudologic at its best If you are what you eat Eat a healthy person to be healthy of course pseudoscience
# ::tokens ["Ahhh", "pseudologic", "at", "its", "best", "If", "you", "are", "what", "you", "eat", "Eat", "a", "healthy", "person", "to", "be", "healthy", "of", "course", "pseudoscience"]
# ::lemmas ["ahhh", "pseudologic", "at", "its", "good", "if", "you", "be", "what", "you", "eat", "eat", "a", "healthy", "person", "to", "be", "healthy", "of", "course", "pseudoscience"]
(c37-11 / multi-sentence
        :snt1 (c37-4 / pseudologic
                     :mod (c37-9 / ah
                                 :mode expressive)
                     :ARG1-of (c37-10 / have-degree-91
                                      :ARG2 (c37-12 / good-02
                                                    :ARG1 (c37-2 / pseudoscience)
                                                    :ARG3 (c37-3 / most)))
                     :snt2 (c37-6 / have-condition-91
                                  :ARG1 (c37-5 / eat-01
                                               :ARG0 (c37-13 / you)
                                               :ARG1 (c37-8 / thing))
                                  :ARG2 c37-2
                                  :domain (c37-1 / person
                                                 :mod (c37-7 / healthy))
                                  :mod (c37-0 / of-course))))

# ::snt knew it was FL soon as I saw cannibals And if someone said pick out the cannibals in your area 3 of these 5 and least 2 of them in top 5
# ::tokens ["knew", "it", "was", "FL", "soon", "as", "I", "saw", "cannibals", "And", "if", "someone", "said", "pick", "out", "the", "cannibals", "in", "your", "area", "3", "of", "these", "5", "and", "least", "2", "of", "them", "in", "top", "5"]
# ::lemmas ["know", "it", "be", "FL", "soon", "as", "i", "see", "cannibal", "and", "if", "someone", "say", "pick", "out", "the", "cannibal", "in", "your", "area", "3", "of", "these", "5", "and", "least", "2", "of", "them", "in", "top", "5"]
(c38-17 / and
        :op1 (c38-12 / know-01
                     :ARG0 (c38-2 / i)
                     :ARG1 (c38-13 / be-located-at-91
                                   :ARG1 (c38-8 / island
                                                :name (c38-20 / name
                                                              :op1 "Florida"))
                                   :ARG2 (c38-9 / area
                                                :poss (c38-21 / you))
                                   :time (c38-14 / as-soon-as
                                                 :op1 (c38-18 / see-01
                                                              :ARG0 c38-2
                                                              :ARG1 (c38-5 / cannibal)))))
        :op2 (c38-1 / pick-out-03
                    :ARG0 c38-21
                    :ARG1 (c38-19 / cannibal
                                  :ARG1-of (c38-7 / include-91
                                                  :ARG2 (c38-0 / cannibal
                                                               :mod (c38-10 / this)
                                                               :quant 5))
                                  :ARG1-of (c38-15 / include-91
                                                   :ARG2 (c38-6 / cannibal
                                                                :mod (c38-3 / top)
                                                                :quant 5)
                                                   :ARG3 (c38-4 / at-least
                                                                :op1 2))
                                  :quant 3)
                    :condition (c38-11 / say-01
                                       :ARG0 (c38-16 / someone)
                                       :ARG1 c38-1)
                    :mode imperative))

# ::snt They were sitting on the floor chanting and eating human flesh It was satanic ritual This is NOT rare many families churches practice
# ::tokens ["They", "were", "sitting", "on", "the", "floor", "chanting", "and", "eating", "human", "flesh", "It", "was", "satanic", "ritual", "This", "is", "NOT", "rare", "many", "families", "churches", "practice"]
# ::lemmas ["they", "be", "sit", "on", "the", "floor", "chant", "and", "eat", "human", "flesh", "it", "be", "satanic", "ritual", "this", "be", "not", "rare", "many", "family", "church", "practice"]
(c39-12 / multi-sentence
        :snt1 (c39-8 / and
                     :op1 (c39-11 / sit-01
                                  :ARG1 (c39-6 / they)
                                  :ARG2 (c39-10 / floor))
                     :op2 (c39-3 / chant-01
                                 :ARG0 c39-6
                                 :ARG1 (c39-1 / flesh
                                              :part-of (c39-13 / human)))
                     :op3 (c39-4 / eat-01
                                 :ARG0 c39-6
                                 :ARG1 c39-1)
                     :domain (c39-0 / ritual
                                    :mod (c39-7 / satanic)))
        :snt2 (c39-9 / rare-02
                     :ARG1 (c39-5 / practice-01
                                  :ARG0 (c39-14 / family
                                                :quant (c39-2 / many)
                                                :ARG1-of (c39-16 / include-91
                                                                 :ARG2 (c39-15 / church))))
                     :polarity -))

# ::snt THESE PEOPLE ARE PSYCHOTIC
# ::tokens ["THESE", "PEOPLE", "ARE", "PSYCHOTIC"]
# ::lemmas ["these", "people", "are", "PSYCHOTIC"]
(c40-2 / sexist
       :domain (c40-0 / person
                      :mod (c40-1 / that)))

# ::snt The most disgusting story of the day
# ::tokens ["The", "most", "disgusting", "story", "of", "the", "day"]
# ::lemmas ["the", "most", "disgusting", "story", "of", "the", "day"]
(c41-2 / story
       :ARG1-of (c41-4 / have-degree-91
                       :ARG2 (c41-0 / disgust-01)
                       :ARG3 (c41-3 / most)
                       :ARG5 (c41-1 / day)))

# ::snt OhK
# ::tokens ["OhK"]
# ::lemmas ["OhK"]
(c42-0 / oh
       :mode expressive)

# ::snt Shhhh Dont tell Big Pharma
# ::tokens ["Shhhh", "Do", "nt", "tell", "Big", "Pharma"]
# ::lemmas ["Shhhh", "do", "not", "tell", "Big", "Pharma"]
(c43-1 / tell-01
       :ARG0 (c43-4 / you)
       :ARG2 (c43-0 / company
                    :name (c43-3 / name
                                 :op1 "Big"
                                 :op2 "Pharma"))
       :mod (c43-2 / shhhh
                   :mode expressive)
       :polarity -
       :mode imperative)

# ::snt Even if you eat a depressed diabetic
# ::tokens ["Even", "if", "you", "eat", "a", "depressed", "diabetic"]
# ::lemmas ["even", "if", "you", "eat", "a", "depressed", "diabetic"]
(c44-6 / have-concession-91
       :ARG2 (c44-1 / even-if
                    :op1 (c44-5 / eat-01
                                :ARG0 (c44-7 / you)
                                :ARG1 (c44-2 / person
                                             :ARG0-of (c44-3 / have-rel-role-91
                                                             :ARG1 c44-7
                                                             :ARG2 (c44-0 / diabetic))
                                             :ARG1-of (c44-4 / depress-01)))))

# ::snt But only on Taco Tuesdays
# ::tokens ["But", "only", "on", "Taco", "Tuesdays"]
# ::lemmas ["but", "only", "on", "Taco", "Tuesdays"]
(c45-2 / contrast-01
       :ARG2 (c45-4 / be-temporally-at-91
                    :ARG2 (c45-1 / date-entity
                                 :weekday (c45-3 / tuesday))
                    :mod (c45-0 / only)))

# ::snt Did they have hot sauce in their bag Swag
# ::tokens ["Did", "they", "have", "hot", "sauce", "in", "their", "bag", "Swag"]
# ::lemmas ["do", "they", "have", "hot", "sauce", "in", "their", "bag", "Swag"]
(c46-5 / say-01
       :ARG0 (c46-8 / i)
       :ARG1 (c46-6 / have-03
                    :ARG0 (c46-2 / they)
                    :ARG1 (c46-3 / sauce
                                 :mod (c46-1 / hot))
                    :location (c46-9 / bag
                                     :poss c46-2)
                    :polarity (c46-4 / amr-unknown))
       :ARG2 (c46-0 / person
                    :name (c46-7 / name
                                 :op1 "Swag")))

# ::snt Worse and worse
# ::tokens ["Worse", "and", "worse"]
# ::lemmas ["bad", "and", "bad"]
(c47-2 / have-degree-91
       :ARG2 (c47-1 / bad-07)
       :ARG3 (c47-0 / more))

# ::snt The worst part is that eating people obviously makes you like Enya Enya should be blamed I might eat through a person to get away too
# ::tokens ["The", "worst", "part", "is", "that", "eating", "people", "obviously", "makes", "you", "like", "Enya", "Enya", "should", "be", "blamed", "I", "might", "eat", "through", "a", "person", "to", "get", "away", "too"]
# ::lemmas ["the", "bad", "part", "be", "that", "eat", "people", "obviously", "make", "you", "like", "Enya", "Enya", "should", "be", "blame", "i", "may", "eat", "through", "a", "person", "to", "get", "away", "too"]
(c48-19 / and
        :op1 (c48-13 / make-02
                     :ARG0 (c48-3 / eat-01
                                  :ARG0 (c48-21 / you)
                                  :ARG1 (c48-4 / person))
                     :ARG1 (c48-14 / like-01
                                   :ARG0 c48-21
                                   :ARG1 (c48-6 / person
                                                :name (c48-8 / name
                                                             :op1 "Enya")))
                     :ARG1-of (c48-0 / obvious-01))
        :op2 (c48-1 / recommend-01
                    :ARG1 (c48-16 / blame-01
                                  :ARG1 c48-21))
        :op3 (c48-17 / possible-01
                     :ARG1 (c48-12 / eat-01
                                   :ARG0 (c48-5 / i)
                                   :path (c48-15 / person)
                                   :purpose (c48-20 / get-05
                                                    :ARG0 c48-5
                                                    :ARG2 (c48-10 / away)
                                                    :mod (c48-11 / too))))
        :domain (c48-9 / part
                       :ARG1-of (c48-18 / bad-07
                                        :ARG2-of (c48-7 / have-degree-91
                                                        :ARG1 c48-9
                                                        :ARG3 (c48-2 / most)))))

# ::snt So nuts
# ::tokens ["So", "nuts"]
# ::lemmas ["so", "nut"]
(c49-0 / nuts
       :degree (c49-1 / so))

# ::snt For me Ill use Beans and Rice long grain of course
# ::tokens ["For", "me", "Ill", "use", "Beans", "and", "Rice", "long", "grain", "of", "course"]
# ::lemmas ["for", "me", "Ill", "use", "Beans", "and", "Rice", "long", "grain", "of", "course"]
(c50-2 / use-01
       :ARG0 (c50-6 / i)
       :ARG1 (c50-3 / and
                    :op1 (c50-7 / bean)
                    :op2 (c50-1 / Rice)
                    :consist-of (c50-5 / grain
                                       :ARG1-of (c50-4 / long-03)))
       :mod (c50-0 / of-course))
