comment,amr
so is this gonna be a thing or nah?,"# ::snt so is this gonna be a thing or nah?
(ii / infer-01
      :ARG1 (a / amr-choice
            :op1 (t / thing
                  :domain (t2 / this))
            :op2 (n / nah)))"
"Actually, they decided to put it in their vault based on feedback.","# ::snt Actually, they decided to put it in their vault based on feedback.
(d / decide-01
      :ARG0 (t / they)
      :ARG1 (p / put-01
            :ARG0 t
            :ARG1 (ii / it)
            :ARG2 (v / vault
                  :poss t))
      :ARG1-of (a / actual-02)
      :ARG1-of (b / base-02
            :ARG2 (f / feedback)))"
perfect! When I'm too lazy to grab a snack and a drink while in the middle of a game I can just grab both at the same time!,"# ::snt perfect! When I'm too lazy to grab a snack and a drink while in the middle of a game I can just grab both at the same time!
(m / multi-sentence
      :snt1 (p / perfect-02
            :mode expressive)
      :snt2 (p2 / possible-01
            :ARG1 (g / grab-01
                  :ARG0 (ii / i)
                  :ARG1 (a / and
                        :op1 (s / snack)
                        :op2 (d / drink))
                  :time (m2 / middle
                        :part-of (g2 / game))
                  :mod (j / just)
                  :time (h / have-degree-91
                        :ARG1 ii
                        :ARG2 (l / lazy)
                        :ARG3 (t / too)
                        :ARG6 (g3 / grab-01
                              :ARG0 ii
                              :ARG1 a
                              :time m2)))))"
,"# ::snt 
(a / amr-empty)"
Way to understand your target audience MT : Pepsi is currently taste-testing Doritos flavored Mountrain Dew. Would you try it?,"# ::snt Way to understand your target audience MT : Pepsi is currently taste-testing Doritos flavored Mountrain Dew. Would you try it?
(m / multi-sentence
      :snt1 (h / have-manner-91
            :ARG1 (u / understand-01
                  :ARG0 (y / you)
                  :ARG1 (a / audience
                        :ARG1-of (t / target-01
                              :ARG0 y)))
            :ARG2 (w / way))
      :snt2 (t2 / test-01
            :ARG0 (c / company
                  :name (n / name
                        :op1 ""Pepsi""))
            :ARG1 (p / product
                  :name (n2 / name
                        :op1 ""Mountain""
                        :op2 ""Dew"")
                  :ARG1-of (f / flavor-01
                        :ARG2 (p2 / product
                              :name (n3 / name
                                    :op1 ""Doritos""))))
            :time (c2 / current)
            :manner (t3 / taste))
      :snt3 (t4 / try-01
            :ARG0 (y2 / you)
            :ARG1 (ii / it)
            :polarity (a2 / amr-unknown)))"
That's what's up!,"# ::snt That's what's up!
(e / event
      :mod (t / that))"
?,"# ::snt ?
(r / request-confirmation-91)"
,"# ::snt 
(a / amr-empty)"
.,"# ::snt .
(a / amr-empty)"
hells yeah I would!!!,"# ::snt hells yeah I would!!!
(d / do-02
      :mode expressive
      :ARG0 (ii / i)
      :mod (y / yeah
            :mode expressive
            :degree (h / hell)))"
that's for certain. A beautiful lunch in SF I must say.,"# ::snt that's for certain. A beautiful lunch in SF I must say.
(m / multi-sentence
      :snt1 (c / certain
            :domain (t / that))
      :snt2 (o / obligate-01
            :ARG1 (ii / i)
            :ARG2 (s / say-01
                  :ARG0 ii
                  :ARG1 (l / lunch-01
                        :ARG1-of (b / beautiful-02)
                        :location (c2 / city
                              :name (n / name
                                    :op1 ""SF""))))))"
friend of mine used to GM there (and RN in Seattle). He's never led me astray and believes in service.,"# ::snt friend of mine used to GM there (and RN in Seattle). He's never led me astray and believes in service.
(m / multi-sentence
      :snt1 (a / and
            :op1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (ii / i)
                        :ARG2 (f / friend))
                  :ARG0-of (h2 / have-org-role-91
                        :ARG1 (c / company
                              :name (n / name
                                    :op1 ""General""
                                    :op2 ""Motors"")))
                  :location (t / there)
                  :time (u / use-03))
            :op2 (p2 / person
                  :ARG0-of (h3 / have-rel-role-91
                        :ARG1 ii
                        :ARG2 (f2 / friend))
                  :ARG0-of (h4 / have-rel-role-91
                        :ARG1 ii
                        :ARG2 (n2 / nurse))
                  :location (c2 / city
                        :name (n3 / name
                              :op1 ""Seattle""))
                  :time u))
      :snt2 (a2 / and
            :op1 (l / lead-01
                  :polarity -
                  :ARG0 (h5 / he)
                  :ARG1 (ii2 / i)
                  :ARG4 (a3 / astray)
                  :time (e / ever))
            :op2 (b / believe-01
                  :ARG0 h5
                  :ARG1 (s / serve-01))))"
"weird, right? I find most SF service to me smug - not awesome - but that place throws me.","# ::snt weird, right? I find most SF service to me smug - not awesome - but that place throws me.
(m / multi-sentence
      :snt1 (w / weird
            :ARG1-of (r / request-confirmation-91))
      :snt2 (c / contrast-01
            :ARG1 (f / find-02
                  :ARG0 (ii / i)
                  :ARG1 (s / smug
                        :domain (s2 / serve-01
                              :ARG2 ii
                              :mod (c2 / city
                                    :name (n / name
                                          :op1 ""SF""))
                              :quant (m2 / most)
                              :ARG0-of (a / awe-01
                                    :polarity -))))
            :ARG2 (t / throw-01
                  :ARG0 (p / place
                        :mod (t2 / that))
                  :ARG1 ii)))"
last time we ordered a started and nada mas and the somm came out about :00:30 later with matching wine. Random.,"# ::snt last time we ordered a started and nada mas and the somm came out about :00:30 later with matching wine. Random.
(m / multi-sentence
      :snt1 (o / order-02
            :ARG0 (w / we)
            :ARG1 (a / and
                  :op1 (w2 / wine
                        :ARG1-of (s / start-01))
                  :op2 (w3 / wine
                        :ARG1-of (m2 / match-01)))
            :time (l / last))
      :snt2 a
      :op1 s
      :op2 (n / nada
            :mod (m3 / mas))
      :snt3 (c / come-out-09
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (s2 / sister)))
            :time (a2 / after
                  :time (a3 / about
                        :op1 (d / date-entity
                              :time ""00:30"")))
            :accompanier (w4 / wine)
            :ARG1-of (r / random-02)))"
did you have he lobster pot pie? IMO the service reigns. Food has moments.,"# ::snt did you have he lobster pot pie? IMO the service reigns. Food has moments.
(m / multi-sentence
      :snt1 (h / have-03
            :polarity (a / amr-unknown)
            :ARG0 (y / you)
            :ARG1 (p / pie
                  :mod (p2 / pot
                        :consist-of (l / lobster))))
      :snt2 (r / reign-01
            :ARG0 (s / service)
            :ARG1-of (o / opine-01
                  :ARG0 (ii / i)))
      :snt3 (h2 / have-03
            :ARG0 (f / food)
            :ARG1 (m2 / moment)))"
in SF? Yeah they are out of control. The vegas spot might be the best service I've had in my life. For real.,"# ::snt in SF? Yeah they are out of control. The vegas spot might be the best service I've had in my life. For real.
(m / multi-sentence
      :snt1 (o / out-06
            :ARG1 (t / they)
            :ARG2 (c / control-01
                  :ARG1 t)
            :polarity (a / amr-unknown)
            :mod (y / yeah))
      :snt2 (p / possible-01
            :ARG1 (h / have-degree-91
                  :ARG1 (s / serve-02
                        :ARG0 (ii / i)
                        :location (c2 / city
                              :name (n / name
                                    :op1 ""Vegas"")))
                  :ARG2 (g / good-02
                        :ARG1 s)
                  :ARG3 (m2 / most))
            :time (l / live-01
                  :ARG0 ii))
      :snt3 (f / for-real-04))"
"also, we need to go to rn74","# ::snt also, we need to go to rn74
(n / need-01
      :ARG0 (w / we)
      :ARG1 (g / go-02
            :ARG0 w
            :ARG4 (u / url-entity
                  :value ""rn74""))
      :mod (a / also))"
okay. Let's plan to catch up should the returns come in as hoped.,"# ::snt okay. Let's plan to catch up should the returns come in as hoped.
(m / multi-sentence
      :snt1 (o / okay-04)
      :snt2 (p / plan-01
            :mode imperative
            :ARG0 (w / we)
            :ARG1 (c / catch-up-04
                  :ARG1 w)
            :condition (c2 / come-01
                  :ARG1 (r / return-01)
                  :manner (h / hope-01))))"
dude do we need to plan for you to LA tomorrow night if the game goes as planned? Asking for .,"# ::snt dude do we need to plan for you to LA tomorrow night if the game goes as planned? Asking for .
(m / multi-sentence
      :snt1 (a / ask-01
            :ARG0 (ii / i)
            :ARG1 (n / need-01
                  :ARG0 (w / we)
                  :ARG1 (p / plan-01
                        :ARG0 w
                        :ARG1 (g / go-02
                              :ARG0 (d / dude)
                              :ARG4 (c / city
                                    :name (n2 / name
                                          :op1 ""LA""))
                              :time (d2 / date-entity
                                    :dayperiod (n3 / night)
                                    :mod (t / tomorrow))
                              :condition (g2 / go-06
                                    :ARG1 (g3 / game)
                                    :ARG1-of (p2 / plan-01))))
                  :polarity (a2 / amr-unknown))
            :snt2 a
            :ARG0 d))"
,"# ::snt 
(a / amr-empty)"
if master chief is on the cover then yes,"# ::snt if master chief is on the cover then yes
(y / yes
      :condition (c / cover-03
            :ARG1 (p / person
                  :name (n / name
                        :op1 ""Master""
                        :op2 ""Chief""))))"
Follow it up with a tall cold glass of put words in a CEO's mouth?,"# ::snt Follow it up with a tall cold glass of put words in a CEO's mouth?
(f / follow-up-03
      :polarity (a / amr-unknown)
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :ARG2 (g / glass
            :ARG1-of (c / cold-01)
            :mod (t / tall)
            :consist-of (w / word)
            :location (m / mouth
                  :part-of (p / person
                        :ARG0-of (h / have-org-role-91
                              :ARG2 (o / officer
                                    :mod (c2 / chief)
                                    :mod (e / executive)))))))"
just like the Mountain Dew flavoured Twisties I had in Japan recently lol,"# ::snt just like the Mountain Dew flavoured Twisties I had in Japan recently lol
(r / resemble-01
      :ARG2 (t / thing
            :name (n / name
                  :op1 ""Twisties"")
            :ARG1-of (f / flavor-01
                  :ARG2 (p / product
                        :name (n2 / name
                              :op1 ""Mountain""
                              :op2 ""Dew"")))
            :ARG1-of (h / have-03
                  :ARG0 (ii / i)
                  :location (c / country
                        :name (n3 / name
                              :op1 ""Japan""))
                  :time (r2 / recent))
            :ARG2-of (l / laugh-01
                  :mode expressive
                  :ARG0 ii
                  :manner (l2 / loud)))
      :mod (j / just))"
Thanks for the slick wallpaper.,"# ::snt Thanks for the slick wallpaper.
(t / thank-01
      :ARG1 (y / you)
      :ARG2 (w / wallpaper
            :mod (s / slick)))"
yes I'd try it,"# ::snt yes I'd try it
(t / try-01
      :ARG0 (ii / i)
      :ARG1 (ii2 / it))"
"Uh, that's disgusting if you ask me...","# ::snt Uh, that's disgusting if you ask me...
(d / disgust-01
      :ARG0 (a / ask-01
            :ARG0 (y / you)
            :ARG2 (ii / i))
      :mod (u / uh
            :mode expressive))"
?,"# ::snt ?
(r / request-confirmation-91)"
I almost did did when I imagined the taste/texture combo...,"# ::snt I almost did did when I imagined the taste/texture combo...
(d / do-02
      :ARG0 (ii / i)
      :mod (a / almost)
      :time (ii2 / imagine-01
            :ARG0 ii
            :ARG1 (c / combo
                  :mod (t / taste)
                  :mod (t2 / texture))))"
"not my pic, but Yea...","# ::snt not my pic, but Yea...
(c / contrast-01
      :ARG1 (p / picture
            :polarity -
            :poss (ii / i))
      :ARG2 (y / yea))"
,"# ::snt 
(a / amr-empty)"
NO,"# ::snt NO
(n / no
      :mode expressive)"
no,"# ::snt no
(n / no)"
shit was gucci,"# ::snt shit was gucci
(g / gucci
      :domain (s / shit))"
SHIT WAS FIRE,"# ::snt SHIT WAS FIRE
(f / fire-04
      :ARG1 (s / shit))"
,"# ::snt 
(a / amr-empty)"
,"# ::snt 
(a / amr-empty)"
nope,"# ::snt nope
(n / nope)"
No RT : Pepsi is currently taste-testing Doritos flavored Mountrain Dew. Would you try it?,"# ::snt No RT : Pepsi is currently taste-testing Doritos flavored Mountrain Dew. Would you try it?
(m / multi-sentence
      :snt1 (p / publication
            :name (n / name
                  :op1 ""No""
                  :op2 ""RT""))
      :snt2 (t / test-01
            :ARG0 (c / company
                  :name (n2 / name
                        :op1 ""Pepsi""))
            :ARG1 (p2 / product
                  :name (n3 / name
                        :op1 ""Doritos"")
                  :ARG1-of (f / flavor-01
                        :ARG2 (p3 / product
                              :name (n4 / name
                                    :op1 ""Mountrain""
                                    :op2 ""Dew""))))
            :time (c2 / current)
            :mod (t2 / taste))
      :snt3 (t3 / try-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :polarity (a / amr-unknown)))"
": Pepsi is currently taste-testing Doritos flavored Mountrain Dew. Would you try it?"" No. Yuck.","# ::snt : Pepsi is currently taste-testing Doritos flavored Mountrain Dew. Would you try it?"" No. Yuck.
(m / multi-sentence
      :snt1 (t / test-01
            :ARG0 (c / company
                  :name (n / name
                        :op1 ""Pepsi""))
            :ARG1 (p / product
                  :name (n2 / name
                        :op1 ""Doritos"")
                  :ARG1-of (f / flavor-01
                        :ARG2 (p2 / product
                              :name (n3 / name
                                    :op1 ""Mountrain""
                                    :op2 ""Dew""))))
            :time (c2 / current)
            :mod (t2 / taste))
      :snt2 (t3 / try-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :polarity (a / amr-unknown))
      :snt3 (y2 / yuck
            :mode expressive))"
