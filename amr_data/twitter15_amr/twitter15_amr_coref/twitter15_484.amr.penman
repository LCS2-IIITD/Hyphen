# ::snt Nope! RT : Good Sweet Lord, Pepsi Is Actually Testing A Doritos-Flavored Mountain Dew
# ::tokens ["Nope", "!", "RT", ":", "Good", "Sweet", "Lord", ",", "Pepsi", "Is", "Actually", "Testing", "A", "Doritos", "-", "Flavored", "Mountain", "Dew"]
# ::lemmas ["nope", "!", "RT", ":", "Good", "Sweet", "Lord", ",", "Pepsi", "be", "actually", "Testing", "A", "Doritos", "-", "flavor", "Mountain", "Dew"]
(c1-4 / multi-sentence
      :snt1 (c1-11 / nope
                   :mode expressive)
      :snt2 (c1-0 / say-01
                  :ARG0 (c1-1 / publication
                              :name (c1-9 / name
                                          :op1 "RT"))
                  :ARG1 (c1-2 / test-01
                              :ARG0 (c1-5 / company
                                          :name (c1-6 / name
                                                      :op1 "Pepsi"))
                              :ARG1 (c1-15 / product
                                           :name (c1-13 / name
                                                        :op1 "Mountain"
                                                        :op2 "Dew")
                                           :ARG1-of (c1-14 / Flavor-01
                                                           :ARG2 c1-5
                                                           :name (c1-8 / name
                                                                       :op1 "Doritos"))))
                  :ARG1-of (c1-3 / actual-02))
      :ARG2 (c1-7 / person
                  :name (c1-10 / name
                               :op1 "Sweet"
                               :op2 "Lord")
                  :ARG1-of (c1-12 / good-02)))

# ::snt haha.. This has to be delicious right
# ::tokens ["haha", "..", "This", "has", "to", "be", "delicious", "right"]
# ::lemmas ["haha", "..", "this", "have", "to", "be", "delicious", "right"]
(c2-0 / obligate-01
      :ARG2 (c2-4 / delicious
                  :domain (c2-1 / this))
      :ARG1-of (c2-3 / right-02)
      :mod (c2-2 / haha
                 :mode expressive))

# ::snt Yuck!
# ::tokens ["Yuck", "!"]
# ::lemmas ["Yuck", "!"]
(c3-0 / yuck
      :mode expressive)

# ::snt not sure how I feel about this
# ::tokens ["not", "sure", "how", "I", "feel", "about", "this"]
# ::lemmas ["not", "sure", "how", "i", "feel", "about", "this"]
(c5-0 / sure-02
      :ARG0 (c5-1 / i)
      :ARG1 (c5-3 / thing
                  :ARG1-of (c5-4 / feel-01
                                 :ARG0 c5-1
                                 :ARG2 (c5-2 / this)))
      :polarity -)

# ::snt : Good Sweet Lord, Pepsi Is Actually Testing A Doritos-Flavored Mountain Dew science has gone too far
# ::tokens [":", "Good", "Sweet", "Lord", ",", "Pepsi", "Is", "Actually", "Testing", "A", "Doritos", "-", "Flavored", "Mountain", "Dew", "science", "has", "gone", "too", "far"]
# ::lemmas [":", "Good", "Sweet", "Lord", ",", "Pepsi", "be", "actually", "Testing", "A", "Doritos", "-", "flavor", "Mountain", "Dew", "science", "have", "go", "too", "far"]
(c6-11 / go-01
       :ARG1 (c6-1 / science
                   :topic (c6-8 / company
                                :name (c6-13 / name
                                             :op1 "Mountain"
                                             :op2 "Dew")
                                :ARG1-of (c6-14 / favor-01
                                                :ARG2 (c6-7 / company
                                                            :name (c6-12 / name
                                                                         :op1 "Pepsi"))))
                   :ARG1-of (c6-5 / actual-02))
       :ARG4 (c6-0 / far
                   :ARG2-of (c6-10 / have-degree-91
                                   :ARG1 c6-1
                                   :ARG3 (c6-4 / too)))
       :ARG1-of (c6-2 / say-01
                      :ARG0 (c6-3 / person
                                  :name (c6-9 / name
                                              :op1 "Sweet"
                                              :op2 "Lord")
                                  :ARG1-of (c6-6 / good-02))))

# ::snt ...
# ::tokens ["..."]
# ::lemmas ["..."]
(c7-0 / amr-empty)

# ::snt : Good Sweet Lord, Pepsi Is Actually Testing A Doritos-Flavored Mountain Dew
# ::tokens [":", "Good", "Sweet", "Lord", ",", "Pepsi", "Is", "Actually", "Testing", "A", "Doritos", "-", "Flavored", "Mountain", "Dew"]
# ::lemmas [":", "Good", "Sweet", "Lord", ",", "Pepsi", "be", "actually", "Testing", "A", "Doritos", "-", "flavor", "Mountain", "Dew"]
(c8-0 / say-01
      :ARG1 (c8-2 / test-01
                  :ARG0 (c8-4 / company
                              :name (c8-8 / name
                                          :op1 "Pepsi"))
                  :ARG1 (c8-1 / product
                              :name (c8-6 / name
                                          :op1 "Mountain"
                                          :op2 "Dew")
                              :ARG1-of (c8-11 / Flavor-01
                                              :ARG2 c8-4
                                              :name (c8-5 / name
                                                          :op1 "Doritos"))))
      :ARG1-of (c8-3 / actual-02)
      :ARG2 (c8-10 / person
                   :name (c8-9 / name
                               :op1 "Sweet"
                               :op2 "Lord")
                   :ARG1-of (c8-7 / good-02)))

# ::snt sounds like something Barry Kripke invented on the
# ::tokens ["sounds", "like", "something", "Barry", "Kripke", "invented", "on", "the"]
# ::lemmas ["sound", "like", "something", "Barry", "Kripke", "invent", "on", "the"]
(c9-0 / sound-01
      :ARG2 (c9-1 / something
                  :ARG1-of (c9-2 / invent-01
                                 :ARG0 (c9-3 / person
                                             :name (c9-5 / name
                                                         :op1 "Barry"
                                                         :op2 "Kripke"))
                                 :medium (c9-4 / thing))))

# ::snt because this is what America needs, liquid diabetes.
# ::tokens ["because", "this", "is", "what", "America", "needs", ",", "liquid", "diabetes", "."]
# ::lemmas ["because", "this", "be", "what", "America", "need", ",", "liquid", "diabetes", "."]
(c10-2 / cause-01
       :ARG0 (c10-4 / need-01
                    :ARG0 (c10-1 / country
                                 :name (c10-3 / name
                                              :op1 "America"))
                    :ARG1 (c10-5 / diabetes
                                 :mod (c10-0 / liquid))))

# ::snt : Good Sweet Lord, Pepsi Is Actually Testing A Doritos-Flavored Mountain Dew gross
# ::tokens [":", "Good", "Sweet", "Lord", ",", "Pepsi", "Is", "Actually", "Testing", "A", "Doritos", "-", "Flavored", "Mountain", "Dew", "gross"]
# ::lemmas [":", "Good", "Sweet", "Lord", ",", "Pepsi", "be", "actually", "Testing", "A", "Doritos", "-", "flavor", "Mountain", "Dew", "gross"]
(c11-0 / say-01
       :ARG1 (c11-2 / test-01
                    :ARG0 (c11-4 / company
                                 :name (c11-8 / name
                                              :op1 "Pepsi"))
                    :ARG1 (c11-1 / product
                                 :name (c11-6 / name
                                              :op1 "Mountain"
                                              :op2 "Dew")
                                 :ARG1-of (c11-11 / Flavor-01
                                                  :ARG2 c11-4
                                                  :name (c11-5 / name
                                                               :op1 "Doritos"))))
       :ARG1-of (c11-3 / actual-02)
       :ARG2 (c11-10 / person
                     :name (c11-9 / name
                                  :op1 "Sweet"
                                  :op2 "Lord")
                     :ARG1-of (c11-7 / good-02)))

# ::snt : Good Sweet Lord, Pepsi Is Actually Testing A Doritos-Flavored Mountain Dew what the hell
# ::tokens [":", "Good", "Sweet", "Lord", ",", "Pepsi", "Is", "Actually", "Testing", "A", "Doritos", "-", "Flavored", "Mountain", "Dew", "what", "the", "hell"]
# ::lemmas [":", "Good", "Sweet", "Lord", ",", "Pepsi", "be", "actually", "Testing", "A", "Doritos", "-", "flavor", "Mountain", "Dew", "what", "the", "hell"]
(c12-0 / say-01
       :ARG1 (c12-2 / test-01
                    :ARG0 (c12-5 / company
                                 :name (c12-10 / name
                                               :op1 "Pepsi"))
                    :ARG1 (c12-1 / product
                                 :name (c12-8 / name
                                              :op1 "Mountain"
                                              :op2 "Dew")
                                 :ARG1-of (c12-13 / Flavor-01
                                                  :ARG2 c12-5
                                                  :name (c12-6 / name
                                                               :op1 "Doritos"))))
       :ARG1-of (c12-3 / actual-02)
       :mod (c12-4 / amr-unknown
                   :mod (c12-7 / hell
                               :mode expressive))
       :ARG2 (c12-12 / person
                     :name (c12-11 / name
                                   :op1 "Sweet"
                                   :op2 "Lord")
                     :ARG1-of (c12-9 / good-02)))

# ::snt Dewitos is how Kripke says Doritos on The Big Bang Theory.
# ::tokens ["Dewitos", "is", "how", "Kripke", "says", "Doritos", "on", "The", "Big", "Bang", "Theory", "."]
# ::lemmas ["dewito", "be", "how", "Kripke", "say", "Doritos", "on", "The", "Big", "Bang", "Theory", "."]
(c13-3 / thing
       :manner-of (c13-0 / say-01
                         :ARG0 (c13-2 / person
                                      :name (c13-6 / name
                                                   :op1 "Kripke"))
                         :ARG1 (c13-7 / product
                                      :name (c13-5 / name
                                                   :op1 "Doritos"))
                         :medium (c13-1 / broadcast-program
                                        :name (c13-4 / name
                                                     :op1 "The"
                                                     :op2 "Big"
                                                     :op3 "Bang"
                                                     :op4 "Theory")))
       :domain c13-7)

# ::snt that is truely horrid. Now, if it was fondue flavour...
# ::tokens ["that", "is", "truely", "horrid", ".", "Now", ",", "if", "it", "was", "fondue", "flavour", "..."]
# ::lemmas ["that", "be", "truely", "horrid", ".", "now", ",", "if", "it", "be", "fondue", "flavour", "..."]
(c14-5 / multi-sentence
       :snt1 (c14-6 / horrid
                    :degree (c14-3 / true-01)
                    :domain (c14-4 / that))
       :snt2 (c14-1 / have-condition-91
                    :ARG2 (c14-8 / flavor
                                 :mod (c14-0 / fondue)
                                 :domain (c14-2 / it))
                    :time (c14-7 / now)))

# ::snt kinjax AMAZING RESULTS SEE BELOWGET YOURS NOW!HURRY WHILE STOCKS LAST
# ::tokens ["kinjax", "AMAZING", "RESULTS", "SEE", "BELOWGET", "YOURS", "NOW!HURRY", "WHILE", "STOCKS", "LAST"]
# ::lemmas ["kinjax", "AMAZING", "RESULTS", "see", "BELOWGET", "yours", "NOW!HURRY", "while", "stock", "last"]
(c16-6 / multi-sentence
       :snt1 (c16-0 / see-01
                    :ARG0 (c16-2 / person
                                 :name (c16-10 / name
                                               :op1 "kinjax"))
                    :ARG1 (c16-4 / result
                                 :ARG0-of (c16-5 / amaze-01))
                    :location (c16-1 / below)
                    :mode expressive)
       :snt2 (c16-11 / get-05
                     :ARG0 (c16-8 / you
                                  :ARG1-of c16-11)
                     :time (c16-9 / now)
                     :time (c16-3 / lock-01
                                  :time (c16-7 / last))
                     :mode imperative))

# ::snt : Pepsi Is Testing A Doritos-Flavored Mountain Dew. Not even sure what to say
# ::tokens [":", "Pepsi", "Is", "Testing", "A", "Doritos", "-", "Flavored", "Mountain", "Dew", ".", "Not", "even", "sure", "what", "to", "say"]
# ::lemmas [":", "Pepsi", "be", "test", "A", "Doritos", "-", "flavor", "Mountain", "Dew", ".", "not", "even", "sure", "what", "to", "say"]
(c17-5 / multi-sentence
       :snt1 (c17-3 / test-01
                    :ARG0 (c17-6 / company
                                 :name (c17-9 / name
                                              :op1 "Pepsi"))
                    :ARG1 (c17-2 / product
                                 :name (c17-8 / name
                                              :op1 "Mountain"
                                              :op2 "Dew")
                                 :ARG1-of (c17-12 / favor-01
                                                  :ARG2 (c17-11 / product
                                                                :name (c17-7 / name
                                                                             :op1 "Doritos")))))
       :snt2 (c17-0 / sure-02
                    :ARG1 (c17-4 / thing
                                 :ARG1-of (c17-1 / say-01))
                    :mod (c17-10 / even)
                    :polarity -))

# ::snt Is this real life? MT : Pepsi Is Actually Testing A Doritos-Flavored Mountain Dew
# ::tokens ["Is", "this", "real", "life", "?", "MT", ":", "Pepsi", "Is", "Actually", "Testing", "A", "Doritos", "-", "Flavored", "Mountain", "Dew"]
# ::lemmas ["be", "this", "real", "life", "?", "MT", ":", "Pepsi", "be", "actually", "Testing", "A", "Doritos", "-", "flavor", "Mountain", "Dew"]
(c18-5 / multi-sentence
       :snt1 (c18-1 / life
                    :polarity (c18-3 / amr-unknown)
                    :ARG1-of (c18-11 / real-04)
                    :domain (c18-2 / this))
       :snt2 (c18-4 / test-01
                    :ARG0 (c18-7 / company
                                 :name (c18-8 / name
                                              :op1 "Pepsi"))
                    :ARG1 (c18-0 / product
                                 :name (c18-10 / name
                                               :op1 "Mountain"
                                               :op2 "Dew")
                                 :ARG1-of (c18-12 / Flavor-00
                                                  :ARG2 c18-7
                                                  :name (c18-9 / name
                                                               :op1 "Doritos"))))
       :ARG1-of (c18-6 / actual-02))

# ::snt aka "the onion" feed bag
# ::tokens ["aka", "\"", "the", "onion", "\"", "feed", "bag"]
# ::lemmas ["aka", "\"", "the", "onion", "\"", "feed", "bag"]
(c19-0 / bag
       :ARG2-of (c19-4 / feed-01
                       :ARG1 (c19-3 / animal
                                    :name (c19-1 / name
                                                 :op1 "ion")))
       :ARG1-of (c19-2 / name-01
                       :ARG2 c19-3))

# ::snt breaking the mold.
# ::tokens ["breaking", "the", "mold", "."]
# ::lemmas ["break", "the", "mold", "."]
(c20-1 / break-01
       :ARG1 (c20-0 / mold))
