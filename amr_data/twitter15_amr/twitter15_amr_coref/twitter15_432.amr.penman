# ::snt poor guy, shame on the person who left him. Lots of Love , .home.for.Kai
# ::tokens ["poor", "guy", ",", "shame", "on", "the", "person", "who", "left", "him", ".", "Lots", "of", "Love", ",", ".home.for", ".", "Kai"]
# ::lemmas ["poor", "guy", ",", "shame", "on", "the", "person", "who", "leave", "he", ".", "lot", "of", "Love", ",", ".home.for", ".", "Kai"]
(c1-3 / multi-sentence
      :snt1 (c1-7 / guy
                  :mod (c1-1 / poor))
      :snt2 (c1-0 / shame-01
                  :ARG1 (c1-8 / person
                              :ARG0-of (c1-2 / leave-15
                                             :ARG1 c1-7)))
      :snt3 (c1-5 / love-01
                  :quant (c1-4 / lot))
      :snt4 (c1-6 / home))

# ::snt ": Dog found abandoned at Scottish train station with suitcase filled with belongings: "
# ::tokens ["\"", ":", "Dog", "found", "abandoned", "at", "Scottish", "train", "station", "with", "suitcase", "filled", "with", "belongings", ":", "\""]
# ::lemmas ["\"", ":", "Dog", "find", "abandon", "at", "Scottish", "train", "station", "with", "suitcase", "fill", "with", "belonging", ":", "\""]
(c2-11 / find-01
       :ARG1 (c2-10 / dog
                    :ARG1-of (c2-9 / abandon-01
                                   :location (c2-1 / station
                                                   :mod (c2-4 / train)
                                                   :mod (c2-6 / country
                                                              :name (c2-7 / name
                                                                          :op1 "Scotland"))))
                    :ARG0-of (c2-8 / have-03
                                   :ARG1 (c2-2 / suitcase
                                               :ARG1-of (c2-0 / fill-01
                                                              :ARG2 (c2-5 / thing
                                                                          :ARG0-of (c2-3 / belong-01
                                                                                         :ARG1 c2-10)))))))

# ::snt MT ". Dog w/ suitcase filled with it's belongings"Heartless humans...
# ::tokens ["MT", "\"", ".", "Dog", "w/", "suitcase", "filled", "with", "it", "'s", "belongings\"Heartless", "humans", "..."]
# ::lemmas ["MT", "\"", ".", "dog", "w/", "suitcase", "fill", "with", "it", "be", "belongings\"heartless", "human", "..."]
(c3-5 / multi-sentence
      :snt1 (c3-3 / person
                  :name (c3-7 / name
                              :op1 "MT"))
      :snt2 (c3-6 / human
                  :mod (c3-1 / heartless)
                  :ARG0-of (c3-9 / fill-01
                                 :ARG1 (c3-0 / suitcase)
                                 :ARG2 (c3-4 / thing
                                             :ARG0-of (c3-2 / belong-01
                                                            :ARG1 (c3-8 / dog))))))

# ::snt lololllolollll! Bad dogs definitely want to be left, somewhere... If that. Lolol
# ::tokens ["lololllolollll", "!", "Bad", "dogs", "definitely", "want", "to", "be", "left", ",", "somewhere", "...", "If", "that", ".", "Lolol"]
# ::lemmas ["lololllolollll", "!", "bad", "dog", "definitely", "want", "to", "be", "leave", ",", "somewhere", "...", "if", "that", ".", "lolol"]
(c4-6 / multi-sentence
      :snt1 (c4-10 / want-01
                   :ARG0 (c4-11 / dog
                                :ARG1-of (c4-3 / bad-07))
                   :ARG1 (c4-4 / leave-12
                               :ARG1 c4-11
                               :ARG2 (c4-0 / somewhere))
                   :mod (c4-1 / definite)
                   :mod (c4-8 / laugh-01
                              :manner (c4-7 / loud)
                              :mode expressive))
      :snt2 (c4-9 / have-condition-91
                  :ARG2 (c4-5 / that)
                  :mod c4-8
                  :manner (c4-2 / loud)
                  :mode expressive))

# ::snt unless he's a bad dog, that bites people. Then, this wouldn't be sad, at all. Lollllll
# ::tokens ["unless", "he", "'s", "a", "bad", "dog", ",", "that", "bites", "people", ".", "Then", ",", "this", "would", "n't", "be", "sad", ",", "at", "all", ".", "Lollllll"]
# ::lemmas ["unless", "he", "be", "a", "bad", "dog", ",", "that", "bite", "people", ".", "then", ",", "this", "would", "not", "be", "sad", ",", "at", "all", ".", "lollllll"]
(c5-6 / multi-sentence
      :snt1 (c5-9 / have-condition-91
                  :ARG1 (c5-0 / sad-02
                              :ARG0 (c5-4 / this)
                              :mod (c5-10 / at-all)
                              :time (c5-5 / then)
                              :polarity -)
                  :ARG2 (c5-11 / dog
                               :ARG1-of (c5-1 / bad-07)
                               :domain (c5-2 / he)
                               :ARG0-of (c5-8 / bite-01
                                              :ARG1 (c5-3 / person
                                                          :snt2-of c5-6))))
      :name (c5-7 / name
                  :op1 "Lollll"))

# ::snt That is sad. All I need now is a horsewhip and the miscreant.
# ::tokens ["That", "is", "sad", ".", "All", "I", "need", "now", "is", "a", "horsewhip", "and", "the", "miscreant", "."]
# ::lemmas ["that", "be", "sad", ".", "all", "i", "need", "now", "be", "a", "horsewhip", "and", "the", "miscreant", "."]
(c6-4 / multi-sentence
      :snt1 (c6-0 / sad-02
                  :ARG0 (c6-2 / that))
      :snt2 (c6-8 / need-01
                  :ARG0 (c6-1 / i)
                  :ARG1 (c6-3 / and
                              :op1 (c6-6 / horsewhip)
                              :op2 (c6-9 / miscreant)
                              :mod (c6-5 / all))
                  :time (c6-7 / now)))

# ::snt DEFINITELY makes me want to cry....
# ::tokens ["DEFINITELY", "makes", "me", "want", "to", "cry", "...."]
# ::lemmas ["DEFINITELY", "make", "i", "want", "to", "cry", "...."]
(c7-1 / make-02
      :ARG1 (c7-3 / want-01
                  :ARG0 (c7-0 / i)
                  :ARG1 (c7-2 / cry-02
                              :ARG0 c7-0))
      :mod (c7-4 / definite))

# ::snt THIS IS SO SAD! He's beautiful!
# ::tokens ["THIS", "IS", "SO", "SAD", "!", "He", "'s", "beautiful", "!"]
# ::lemmas ["this", "be", "SO", "SAD", "!", "he", "be", "beautiful", "!"]
(c8-4 / multi-sentence
      :snt1 (c8-0 / sad-02
                  :ARG1 (c8-3 / this)
                  :degree (c8-1 / so))
      :snt2 (c8-2 / beautiful-02
                  :ARG1 (c8-5 / he)))

# ::snt How to make any laptop a "wifi hotspot"
# ::tokens ["How", "to", "make", "any", "laptop", "a", "\"", "wifi", "hotspot", "\""]
# ::lemmas ["how", "to", "make", "any", "laptop", "a", "\"", "wifi", "hotspot", "\""]
(c9-2 / make-01
      :ARG1 (c9-4 / hotspot
                  :mod (c9-0 / ifi))
      :manner (c9-5 / amr-unknown)
      :ARG2 (c9-1 / laptop
                  :mod (c9-3 / any)))

# ::snt  Dog abandoned at train stn w/suitcase with it's belongings: also w/extra apostrophe
# ::tokens [" ", "Dog", "abandoned", "at", "train", "stn", "w", "/", "suitcase", "with", "it", "'s", "belongings", ":", "also", "w", "/", "extra", "apostrophe"]
# ::lemmas [" ", "Dog", "abandon", "at", "train", "stn", "w", "/", "suitcase", "with", "it", "'s", "belonging", ":", "also", "w", "/", "extra", "apostrophe"]
(c11-8 / and
       :op1 (c11-5 / abandon-01
                   :ARG1 (c11-9 / dog)
                   :location (c11-2 / train))
       :op2 (c11-3 / accompany-01
                   :ARG0 (c11-0 / suitcase)
                   :ARG1 (c11-4 / thing
                                :ARG0-of (c11-1 / belong-01
                                                :ARG1 c11-9)))
       :op3 (c11-7 / apostrophe
                   :mod (c11-10 / extra)
                   :mod (c11-6 / also)))

# ::snt . Reminds me of the classic children's story Bear.
# ::tokens [".", "Reminds", "me", "of", "the", "classic", "children", "'s", "story", "Bear", "."]
# ::lemmas [".", "remind", "i", "of", "the", "classic", "child", "'s", "story", "Bear", "."]
(c12-5 / remind-01
       :ARG1 (c12-0 / story
                    :name (c12-4 / name
                                 :op1 "Bear")
                    :mod (c12-3 / classic)
                    :mod (c12-2 / child))
       :ARG2 (c12-1 / i))

# ::snt Ahhhhh
# ::tokens ["Ahhhhh"]
# ::lemmas ["ahhhhh"]
(c13-0 / ah
       :mode expressive)
