# ::snt AHHHHHHHH TOTES ADORBS
# ::tokens ["AHHHHHHHH", "TOTES", "ADORBS"]
# ::lemmas ["AHHHHHHHH", "TOTES", "adorbs"]
(c1-0 / adora
      :mod (c1-1 / tat
                 :mode expressive)
      :mod (c1-2 / ha
                 :mode expressive))

# ::snt So what's the argument (excuse) for Matt Ryan today?
# ::tokens ["So", "what", "'s", "the", "argument", "(", "excuse", ")", "for", "Matt", "Ryan", "today", "?"]
# ::lemmas ["so", "what", "be", "the", "argument", "(", "excuse", ")", "for", "Matt", "Ryan", "today", "?"]
(c2-5 / argue-01
      :ARG1 (c2-2 / amr-unknown)
      :ARG2 (c2-0 / person
                  :name (c2-3 / name
                              :op1 "Matt"
                              :op2 "Ryan"))
      :time (c2-1 / today)
      :ARG1-of (c2-6 / excuse-02
                     :ARG0 (c2-4 / you)
                     :mode imperative))

# ::snt Even this little guy? I recall someone saying the same with a LAN mouse infestation.
# ::tokens ["Even", "this", "little", "guy", "?", "I", "recall", "someone", "saying", "the", "same", "with", "a", "LAN", "mouse", "infestation", "."]
# ::lemmas ["even", "this", "little", "guy", "?", "i", "recall", "someone", "say", "the", "same", "with", "a", "LAN", "mouse", "infestation", "."]
(c3-7 / multi-sentence
      :snt1 (c3-15 / guy
                   :polarity (c3-12 / amr-unknown)
                   :mod (c3-14 / even)
                   :mod (c3-3 / little)
                   :mod (c3-4 / this))
      :snt2 (c3-5 / recall-02
                  :ARG0 (c3-1 / i)
                  :ARG1 (c3-0 / say-01
                              :ARG0 (c3-2 / someone)
                              :ARG1 (c3-6 / thing
                                          :ARG1-of (c3-8 / same-01))
                              :ARG1-of (c3-9 / cause-01
                                             :ARG0 (c3-11 / infest-01
                                                          :ARG2 (c3-13 / mouse
                                                                       :location (c3-10 / LAN)))))))

# ::snt they can be cute!
# ::tokens ["they", "can", "be", "cute", "!"]
# ::lemmas ["they", "can", "be", "cute", "!"]
(c5-2 / cute
      :domain (c5-0 / they)
      :ARG1-of (c5-1 / possible-01))

# ::snt Beautiful!
# ::tokens ["Beautiful", "!"]
# ::lemmas ["beautiful", "!"]
(c6-0 / beautiful-02
      :mode expressive)

# ::snt So, just so you know what I was swag yolo'ing about
# ::tokens ["So", ",", "just", "so", "you", "know", "what", "I", "was", "swag", "yolo'ing", "about"]
# ::lemmas ["so", ",", "just", "so", "you", "know", "what", "i", "be", "swag", "yolo'e", "about"]
(c7-1 / infer-01
      :ARG1 (c7-6 / know-01
                  :ARG0 (c7-3 / you)
                  :ARG1 (c7-2 / thing
                              :ARG1-of (c7-0 / swag-01
                                             :ARG0 (c7-5 / i)
                                             :topic c7-2)
                              :ARG0 c7-5))
      :mod (c7-4 / just))

# ::snt No.
# ::tokens ["No", "."]
# ::lemmas ["no", "."]
(c8-0 / no)

# ::snt Good. Lord. That looks like a prop from Gilligan's Island.
# ::tokens ["Good", ".", "Lord", ".", "That", "looks", "like", "a", "prop", "from", "Gilligan", "'s", "Island", "."]
# ::lemmas ["good", ".", "Lord", ".", "that", "look", "like", "a", "prop", "from", "Gilligan", "'s", "Island", "."]
(c9-5 / multi-sentence
      :snt1 (c9-8 / good-02)
      :snt2 (c9-0 / say-01
                  :ARG1 (c9-3 / look-02
                              :ARG0 (c9-4 / that)
                              :ARG1 (c9-2 / prop
                                          :source (c9-1 / island
                                                        :name (c9-6 / name
                                                                    :op1 "Gilligan's"
                                                                    :op2 "Island"))))
                  :ARG2 (c9-7 / person
                              :name c9-6
                              :op1 "Lord")))

# ::snt It's a tie, for nightmares....spiders &amp; dentists
# ::tokens ["It", "'s", "a", "tie", ",", "for", "nightmares", "....", "spiders", "&", "amp", ";", "dentists"]
# ::lemmas ["it", "be", "a", "tie", ",", "for", "nightmare", "....", "spiders", "&", "amp", ";", "dentist"]
(c10-3 / tie
       :purpose (c10-8 / nightmare)
       :domain (c10-1 / it)
       :ARG1-of (c10-6 / mean-01
                       :ARG2 (c10-4 / and
                                    :op1 (c10-5 / thing
                                                :ARG0-of (c10-0 / scare-01))
                                    :op2 (c10-2 / thing
                                                :ARG1-of (c10-7 / amp-01))
                                    :op3 (c10-9 / dentist))))

# ::snt : Hello everyone. "Puppy-Sized Spider Surprises Scientist in Rainforest"
# ::tokens [":", "Hello", "everyone", ".", "\"", "Puppy", "-", "Sized", "Spider", "Surprises", "Scientist", "in", "Rainforest", "\""]
# ::lemmas [":", "hello", "everyone", ".", "\"", "puppy", "-", "Sized", "Spider", "Surprises", "Scientist", "in", "Rainforest", "\""]
(c11-6 / multi-sentence
       :snt1 (c11-0 / say-01
                    :ARG1 (c11-8 / hello)
                    :ARG2 (c11-10 / everyone))
       :snt2 (c11-1 / say-01
                    :ARG1 (c11-7 / surprise-01
                                 :ARG0 (c11-3 / thing
                                              :name (c11-9 / name
                                                           :op1 "Spider")
                                              :ARG1-of (c11-11 / size-01
                                                               :ARG2 (c11-2 / puppy)))
                                 :ARG1 (c11-4 / scientist)
                                 :location (c11-5 / rainforest))))

# ::snt Thanks for the nightmare
# ::tokens ["Thanks", "for", "the", "nightmare"]
# ::lemmas ["thank", "for", "the", "nightmare"]
(c12-1 / thank-01
       :ARG1 (c12-2 / you)
       :ARG2 (c12-0 / nightmare))

# ::snt IN need of Spider Cider.The Professor has the formula.
# ::tokens ["IN", "need", "of", "Spider", "Cider", ".", "The", "Professor", "has", "the", "formula", "."]
# ::lemmas ["in", "need", "of", "Spider", "Cider", ".", "the", "Professor", "have", "the", "formula", "."]
(c13-2 / multi-sentence
       :snt1 (c13-5 / need-01
                    :ARG1 (c13-1 / thing
                                 :name (c13-4 / name
                                              :op1 "Spider"
                                              :op2 "Cider")))
       :snt2 (c13-3 / have-03
                    :ARG0 (c13-0 / professor)
                    :ARG1 (c13-6 / formula)))

# ::snt Had a small huntsman in my tent in South Africa, that was more than enough Spider for me....
# ::tokens ["Had", "a", "small", "huntsman", "in", "my", "tent", "in", "South", "Africa", ",", "that", "was", "more", "than", "enough", "Spider", "for", "me", "...."]
# ::lemmas ["have", "a", "small", "huntsman", "in", "my", "tent", "in", "South", "Africa", ",", "that", "be", "more", "than", "enough", "Spider", "for", "i", "...."]
(c16-6 / have-03
       :ARG0 (c16-2 / i)
       :ARG1 (c16-1 / huntsman
                    :mod (c16-0 / small)
                    :location (c16-3 / tent
                                     :poss c16-2
                                     :location (c16-5 / country
                                                      :name (c16-7 / name
                                                                   :op1 "South"
                                                                   :op2 "Africa")))
                    :ARG1-of (c16-9 / have-quant-91
                                    :ARG3 (c16-8 / enough
                                                 :degree (c16-4 / more-than))
                                    :beneficiary c16-2)))

# ::snt So, can we assume you would rather fight the horse-sized duck? Or the duck-sized horses?
# ::tokens ["So", ",", "can", "we", "assume", "you", "would", "rather", "fight", "the", "horse", "-", "sized", "duck", "?", "Or", "the", "duck", "-", "sized", "horses", "?"]
# ::lemmas ["so", ",", "can", "we", "assume", "you", "would", "rather", "fight", "the", "horse", "-", "sized", "duck", "?", "or", "the", "duck", "-", "sized", "horse", "?"]
(c17-9 / multi-sentence
       :snt1 (c17-6 / possible-01
                    :ARG1 (c17-13 / assume-02
                                  :ARG0 (c17-2 / we)
                                  :ARG1 (c17-16 / prefer-01
                                                :ARG0 (c17-11 / you)
                                                :ARG1 (c17-15 / fight-01
                                                              :ARG0 c17-11
                                                              :ARG1 (c17-14 / duck
                                                                            :ARG1-of (c17-1 / size-01
                                                                                            :ARG2 (c17-12 / horse)))))
                                  :polarity (c17-10 / amr-unknown))
                    :snt2 (c17-7 / or
                                 :op2 (c17-0 / fight-01
                                             :ARG0 (c17-4 / horse
                                                          :ARG1-of (c17-5 / size-01
                                                                          :ARG2 (c17-3 / duck)))
                                             :ARG1 (c17-17 / horse))
                                 :polarity (c17-8 / amr-unknown))))

# ::snt No thanks I'm good
# ::tokens ["No", "thanks", "I", "'m", "good"]
# ::lemmas ["no", "thank", "i", "be", "good"]
(c18-1 / have-concession-91
       :ARG1 (c18-3 / good-02
                    :ARG1 (c18-2 / i))
       :ARG2 (c18-0 / no))

# ::snt Is that really a real spider or did you stage it?
# ::tokens ["Is", "that", "really", "a", "real", "spider", "or", "did", "you", "stage", "it", "?"]
# ::lemmas ["be", "that", "really", "a", "real", "spider", "or", "do", "you", "stage", "it", "?"]
(c19-5 / amr-choice
       :op1 (c19-0 / spider
                   :domain (c19-3 / that)
                   :ARG1-of (c19-2 / real-04))
       :op2 (c19-1 / stage-01
                   :ARG0 (c19-4 / you)
                   :ARG1 c19-3))

# ::snt OH man thats a spider.Its time for some spider cider.The professor has the fomula.
# ::tokens ["OH", "man", "that", "s", "a", "spider", ".", "Its", "time", "for", "some", "spider", "cider", ".", "The", "professor", "has", "the", "fomula", "."]
# ::lemmas ["OH", "man", "that", "s", "a", "spider", ".", "its", "time", "for", "some", "spider", "cider", ".", "the", "professor", "have", "the", "fomula", "."]
(c20-7 / multi-sentence
       :snt1 (c20-3 / person
                    :domain (c20-5 / that)
                    :mod (c20-6 / oh
                                :mode expressive))
       :snt2 (c20-4 / time
                    :mod (c20-0 / some)
                    :purpose (c20-8 / cider
                                    :mod (c20-10 / web)))
       :snt3 (c20-9 / have-03
                    :ARG0 (c20-12 / person
                                  :ARG0-of (c20-2 / have-org-role-91
                                                  :ARG2 (c20-11 / professor)))
                    :ARG1 (c20-1 / fomula)))

# ::snt : Hello everyone. "Puppy-Sized Spider Surprises Scientist in Rainforest"
# ::tokens [":", "Hello", "everyone", ".", "\"", "Puppy", "-", "Sized", "Spider", "Surprises", "Scientist", "in", "Rainforest", "\""]
# ::lemmas [":", "hello", "everyone", ".", "\"", "puppy", "-", "Sized", "Spider", "Surprises", "Scientist", "in", "Rainforest", "\""]
(c21-6 / multi-sentence
       :snt1 (c21-0 / say-01
                    :ARG1 (c21-8 / hello)
                    :ARG2 (c21-10 / everyone))
       :snt2 (c21-1 / say-01
                    :ARG1 (c21-7 / surprise-01
                                 :ARG0 (c21-3 / thing
                                              :name (c21-9 / name
                                                           :op1 "Spider")
                                              :ARG1-of (c21-11 / size-01
                                                               :ARG2 (c21-2 / puppy)))
                                 :ARG1 (c21-4 / scientist)
                                 :location (c21-5 / rainforest))))

# ::snt : Hello everyone. "Puppy-Sized Spider Surprises Scientist in Rainforest"
# ::tokens [":", "Hello", "everyone", ".", "\"", "Puppy", "-", "Sized", "Spider", "Surprises", "Scientist", "in", "Rainforest", "\""]
# ::lemmas [":", "hello", "everyone", ".", "\"", "puppy", "-", "Sized", "Spider", "Surprises", "Scientist", "in", "Rainforest", "\""]
(c22-6 / multi-sentence
       :snt1 (c22-0 / say-01
                    :ARG1 (c22-8 / hello)
                    :ARG2 (c22-10 / everyone))
       :snt2 (c22-1 / say-01
                    :ARG1 (c22-7 / surprise-01
                                 :ARG0 (c22-3 / thing
                                              :name (c22-9 / name
                                                           :op1 "Spider")
                                              :ARG1-of (c22-11 / size-01
                                                               :ARG2 (c22-2 / puppy)))
                                 :ARG1 (c22-4 / scientist)
                                 :location (c22-5 / rainforest))))

# ::snt Pop that in your mouth for a burst of flavor!
# ::tokens ["Pop", "that", "in", "your", "mouth", "for", "a", "burst", "of", "flavor", "!"]
# ::lemmas ["pop", "that", "in", "your", "mouth", "for", "a", "burst", "of", "flavor", "!"]
(c24-1 / pop-01
       :ARG0 (c24-4 / you
                    :part (c24-3 / mouth))
       :ARG1 (c24-2 / that)
       :ARG2 c24-3
       :purpose (c24-0 / burst-02
                       :ARG1 (c24-5 / flavor))
       :mode imperative)

# ::snt a Goliath Bird-Eater, Theriphosa Blondie, perfectly harmless, just large.
# ::tokens ["a", "Goliath", "Bird", "-", "Eater", ",", "Theriphosa", "Blondie", ",", "perfectly", "harmless", ",", "just", "large", "."]
# ::lemmas ["a", "Goliath", "Bird", "-", "Eater", ",", "Theriphosa", "Blondie", ",", "perfectly", "harmless", ",", "just", "large", "."]
(c25-9 / and
       :op1 (c25-6 / harmful-02
                   :ARG0 (c25-1 / bird-Eater
                                :mod (c25-0 / species
                                            :name (c25-5 / name
                                                         :op1 "Goliath"))
                                :mod (c25-2 / species
                                            :name (c25-8 / name
                                                         :op1 "Theriphosa"
                                                         :op2 "Blondie")))
                   :ARG1-of (c25-3 / perfect-02)
                   :polarity -)
       :op2 (c25-4 / large
                   :mod (c25-7 / just)
                   :domain c25-1))

# ::snt Runs after emptying magazine into it.
# ::tokens ["Runs", "after", "emptying", "magazine", "into", "it", "."]
# ::lemmas ["run", "after", "empty", "magazine", "into", "it", "."]
(c26-3 / run-13
       :time (c26-1 / after
                    :op1 (c26-4 / empty-01
                                :ARG1 (c26-2 / magazine)
                                :ARG2 (c26-0 / it))))

# ::snt cute &amp; cuddly too
# ::tokens ["cute", "&", "amp", ";", "cuddly", "too"]
# ::lemmas ["cute", "&", "amp", ";", "cuddly", "too"]
(c27-3 / and
       :op1 (c27-2 / cute)
       :op2 (c27-4 / extra)
       :op3 (c27-1 / cuddle-01
                   :mod (c27-0 / too)))

# ::snt No no no no no...
# ::tokens ["No", "no", "no", "no", "no", "..."]
# ::lemmas ["no", "no", "no", "no", "no", "..."]
(c28-0 / no)

# ::snt Nope : Hello everyone. "Puppy-Sized Spider Surprises Scientist in Rainforest"
# ::tokens ["Nope", ":", "Hello", "everyone", ".", "\"", "Puppy", "-", "Sized", "Spider", "Surprises", "Scientist", "in", "Rainforest", "\""]
# ::lemmas ["nope", ":", "hello", "everyone", ".", "\"", "puppy", "-", "Sized", "Spider", "Surprises", "Scientist", "in", "Rainforest", "\""]
(c29-5 / multi-sentence
       :snt1 (c29-8 / nope)
       :snt2 (c29-0 / say-01
                    :ARG1 (c29-7 / hello)
                    :ARG2 (c29-9 / everyone))
       :snt3 (c29-1 / surprise-01
                    :ARG0 (c29-6 / Spider
                                 :ARG1-of (c29-10 / size-01
                                                  :ARG2 (c29-2 / puppy)))
                    :ARG1 (c29-4 / scientist)
                    :location (c29-3 / rainforest)))

# ::snt quel pays
# ::tokens ["quel", "pays"]
# ::lemmas ["quel", "pay"]
(c30-1 / pay-01
       :ARG0 (c30-0 / quel))

# ::snt I don't have any of her, she's never in the mood. Just the snake/spider room.
# ::tokens ["I", "do", "n't", "have", "any", "of", "her", ",", "she", "'s", "never", "in", "the", "mood", ".", "Just", "the", "snake", "/", "spider", "room", "."]
# ::lemmas ["i", "do", "not", "have", "any", "of", "she", ",", "she", "be", "never", "in", "the", "mood", ".", "just", "the", "snake", "/", "spider", "room", "."]
(c31-5 / multi-sentence
       :snt1 (c31-8 / have-03
                    :ARG0 (c31-1 / i)
                    :ARG1 (c31-0 / she
                                 :mod (c31-10 / any))
                    :ARG1-of (c31-7 / cause-01
                                    :ARG0 (c31-11 / mood
                                                  :domain (c31-2 / she)
                                                  :time (c31-12 / ever)
                                                  :polarity -))
                    :polarity -)
       :snt2 (c31-3 / room
                    :mod (c31-6 / slash
                                :op1 (c31-13 / snake)
                                :op2 (c31-4 / spoon))
                    :mod (c31-9 / just)))

# ::snt really loud too. Someone else has it now . Lift the cover of tank with House bricks on
# ::tokens ["really", "loud", "too", ".", "Someone", "else", "has", "it", "now", ".", "Lift", "the", "cover", "of", "tank", "with", "House", "bricks", "on"]
# ::lemmas ["really", "loud", "too", ".", "someone", "else", "have", "it", "now", ".", "lift", "the", "cover", "of", "tank", "with", "House", "brick", "on"]
(c32-7 / multi-sentence
       :snt1 (c32-4 / loud
                    :degree (c32-14 / really)
                    :mod (c32-5 / too)
                    :domain (c32-1 / it))
       :snt2 (c32-11 / have-03
                     :ARG0 (c32-0 / someone
                                  :mod (c32-15 / else))
                     :ARG1 (c32-13 / it)
                     :time (c32-8 / now))
       :snt3 (c32-10 / lift-01
                     :ARG0 (c32-12 / you)
                     :ARG1 (c32-9 / cover
                                  :part-of (c32-6 / tank)
                                  :prep-with (c32-2 / brick
                                                    :mod (c32-3 / house)))
                     :mode imperative))
