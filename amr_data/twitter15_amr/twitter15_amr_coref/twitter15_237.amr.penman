# ::snt Wie konntest du die Jahre nur ohne mich leben?
# ::tokens ["Wie", "konntest", "du", "die", "Jahre", "nur", "ohne", "mich", "leben", "?"]
# ::lemmas ["Wie", "konntest", "du", "die", "Jahre", "nur", "ohne", "mich", "leben", "?"]
(c1-4 / truth-value
      :polarity-of (c1-1 / konntest
                         :domain (c1-7 / du
                                       :op1 (c1-0 / die-01
                                                  :ARG1 (c1-2 / person))
                                       :mod (c1-6 / nur
                                                  :op1 (c1-8 / person
                                                             :name (c1-5 / name
                                                                         :op1 "Jesus")
                                                             :ARG1-of (c1-3 / leben-01))))))

# ::snt was wrde ich nur ohne dich machen :3
# ::tokens ["was", "wrde", "ich", "nur", "ohne", "dich", "machen", ":3"]
# ::lemmas ["be", "wrde", "ich", "nur", "ohne", "dich", "machen", ":3"]
(c2-6 / amr-empty
      :domain (c2-4 / and
                    :op1 (c2-1 / try-01
                               :ARG0 (c2-0 / i)
                               :ARG1 (c2-2 / this))
                    :op2 (c2-3 / ohne
                               :domain (c2-7 / dich
                                             :mod (c2-5 / machen))
                               :mode expressive))
      :mod 3)

# ::snt so bin ich Vanessa wie leibt und lebt xD
# ::tokens ["so", "bin", "ich", "Vanessa", "wie", "leibt", "und", "lebt", "xD"]
# ::lemmas ["so", "bin", "ich", "Vanessa", "wie", "leibt", "und", "lebt", "xd"]
(c3-0 / say-01
      :ARG0 (c3-2 / i)
      :ARG1 (c3-1 / bin-01
                  :ARG0 c3-2
                  :ARG1 (c3-3 / person
                              :name (c3-8 / name
                                          :op1 "Vanessa"))
                  :ARG3 (c3-6 / and
                              :op1 (c3-5 / leibt)
                              :op2 (c3-7 / lebt))
                  :mod (c3-4 / so))
      :ARG2 c3-3
      :mod (c3-9 / emoticon
                 :value "xD"))

# ::snt stimmt ja du hast mich ja so wundertoll aufgemuntert *-*
# ::tokens ["stimmt", "ja", "du", "hast", "mich", "ja", "so", "wundertoll", "aufgemuntert", "*", "-", "*"]
# ::lemmas ["stimmt", "ja", "du", "hast", "mich", "ja", "so", "wundertoll", "aufgemuntert", "*", "-", "*"]
(c4-9 / and
      :op1 (c4-0 / stick-01
                 :ARG1 (c4-7 / you)
                 :ARG2 (c4-4 / amr-unintelligible
                             :value "stimmt ja"))
      :op2 (c4-8 / hasten-01
                 :ARG1 (c4-3 / amr-unintelligible
                             :value "Mich ja"))
      :op3 (c4-1 / wundertoll
                 :mod (c4-6 / auf
                            :op1 (c4-5 / mich
                                       :mode expressive))
                 :mod (c4-2 / so)))

# ::snt Hypersozial sogar
# ::tokens ["Hypersozial", "sogar"]
# ::lemmas ["hypersozial", "sogar"]
(c5-0 / sogar
      :mod (c5-1 / hysteria))

# ::snt hast du heute n sozialen tag?
# ::tokens ["hast", "du", "heute", "n", "sozialen", "tag", "?"]
# ::lemmas ["hast", "du", "heute", "n", "sozialen", "tag", "?"]
(c6-2 / du
      :polarity (c6-0 / amr-unknown)
      :domain (c6-1 / tag
                    :mod (c6-3 / sozialen)))

# ::snt Why would JK make an thBook first off youre fucking dead AND you destroyed Hogwarts where would everyone go
# ::tokens ["Why", "would", "JK", "make", "an", "thBook", "first", "off", "you", "re", "fucking", "dead", "AND", "you", "destroyed", "Hogwarts", "where", "would", "everyone", "go"]
# ::lemmas ["why", "would", "JK", "make", "an", "thbook", "first", "off", "you", "re", "fuck", "dead", "and", "you", "destroy", "hogwart", "where", "would", "everyone", "go"]
(c7-7 / make-01
      :ARG0 (c7-4 / person
                  :name (c7-12 / name
                               :op1 "JK"))
      :ARG1 (c7-3 / book
                  :ord (c7-5 / ordinal-entity
                             :value 1))
      :ARG1-of (c7-9 / cause-01
                     :ARG0 (c7-6 / amr-unknown))
      :ARG0-of (c7-13 / mean-01
                      :ARG1 (c7-8 / and
                                  :op1 (c7-0 / die-01
                                             :ARG1 c7-4
                                             :mod (c7-15 / fucking))
                                  :op2 (c7-1 / destroy-01
                                             :ARG0 c7-4
                                             :ARG1 (c7-2 / school
                                                         :name (c7-10 / name
                                                                      :op1 "Hampshire"))
                                             :location c7-6
                                             :ARG4-of (c7-11 / go-02
                                                             :ARG0 (c7-14 / everyone))))))

# ::snt na gut
# ::tokens ["na", "gut"]
# ::lemmas ["na", "gut"]
(c8-0 / gut
      :mode expressive)

# ::snt ich will nich scheie sein
# ::tokens ["ich", "will", "nich", "scheie", "sein"]
# ::lemmas ["ich", "will", "nich", "scheie", "sein"]
(c9-0 / scheme-01
      :ARG0 (c9-1 / you)
      :ARG1 (c9-2 / sein))

# ::snt Du bist scheie, weit du dass eigentlich? ich hab dir gar nichts getan
# ::tokens ["Du", "bist", "scheie", ",", "weit", "du", "dass", "eigentlich", "?", "ich", "hab", "dir", "gar", "nichts", "getan"]
# ::lemmas ["Du", "bist", "scheie", ",", "weit", "du", "dass", "eigentlich", "?", "ich", "hab", "dir", "gar", "nicht", "getan"]
(c10-5 / multi-sentence
       :snt1 (c10-9 / amr-unintelligible
                    :polarity (c10-4 / amr-unknown)
                    :domain (c10-11 / du
                                    :mod (c10-0 / scheie)))
       :snt2 (c10-3 / amr-unintelligible
                    :polarity (c10-8 / amr-unknown)
                    :domain (c10-1 / du
                                   :mod (c10-6 / ass
                                               :mod (c10-12 / eigentlich))))
       :snt3 (c10-13 / get-05
                     :ARG1 (c10-2 / i)
                     :ARG2 (c10-10 / amr-unintelligible
                                   :mod (c10-7 / gar)
                                   :value "b dir")))

# ::snt Rita Skeeter. Enough said.
# ::tokens ["Rita", "Skeeter", ".", "Enough", "said", "."]
# ::lemmas ["Rita", "Skeeter", ".", "Enough", "say", "."]
(c11-3 / multi-sentence
       :snt1 (c11-1 / person
                    :name (c11-5 / name
                                 :op1 "Rita"
                                 :op2 "Skeeter"))
       :snt2 (c11-0 / say-01
                    :ARG1 (c11-2 / thing
                                 :ARG1-of (c11-4 / have-quant-91
                                                 :ARG3 (c11-6 / enough)))))

# ::snt miss you dark lord
# ::tokens ["miss", "you", "dark", "lord"]
# ::lemmas ["miss", "you", "dark", "lord"]
(c12-0 / say-01
       :ARG1 (c12-3 / miss-01
                    :ARG0 (c12-1 / i)
                    :ARG1 (c12-2 / person
                                 :name (c12-4 / name
                                              :op1 "Dark"
                                              :op2 "Lord")
                                 :ARG2-of c12-0)))

# ::snt Liar !!
# ::tokens ["Liar", "!", "!"]
# ::lemmas ["Liar", "!", "!"]
(c13-1 / person
       :ARG0-of (c13-0 / lie-08))

# ::snt it's an encyclopedia
# ::tokens ["it", "'s", "an", "encyclopedia"]
# ::lemmas ["it", "be", "an", "encyclopedia"]
(c14-1 / encyclopedia
       :domain (c14-0 / it))
