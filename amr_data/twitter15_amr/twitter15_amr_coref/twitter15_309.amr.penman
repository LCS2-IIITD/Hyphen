# ::snt paj fotot e fakte ka sa tdush ee
# ::tokens ["paj", "fotot", "e", "fakte", "ka", "sa", "tdush", "ee"]
# ::lemmas ["paj", "fotot", "e", "fakte", "ka", "sa", "tdush", "ee"]
(c1-4 / ask-01
      :ARG0 (c1-0 / i)
      :ARG1 (c1-2 / truth-value
                  :polarity-of (c1-1 / possible-01
                                     :ARG1 (c1-7 / fakte
                                                 :domain (c1-6 / person
                                                               :name (c1-3 / name
                                                                           :op1 "Paj"
                                                                           :op2 "Fotot")))
                                     :polarity -))
      :ARG2 (c1-5 / person
                  :name c1-3
                  :op1 "Dtdush"
                  :op2 "Ee"))

# ::snt edhe une vallahe a i ki pa fotot qe i kan gjet
# ::tokens ["edhe", "une", "vallahe", "a", "i", "ki", "pa", "fotot", "qe", "i", "kan", "gjet"]
# ::lemmas ["edhe", "une", "vallahe", "a", "i", "ki", "pa", "fotot", "qe", "i", "kan", "gjet"]
(c2-6 / and
      :op1 (c2-3 / have-mod-91
                 :ARG1 (c2-4 / you)
                 :ARG2 (c2-7 / vallahe))
      :op2 (c2-0 / have-mod-91
                 :ARG1 c2-4
                 :ARG2 (c2-8 / fotot))
      :op3 (c2-9 / have-mod-91
                 :ARG1 c2-4
                 :ARG2 (c2-1 / possible-01
                             :ARG1 (c2-2 / have-mod-91
                                         :ARG1 c2-4
                                         :ARG2 (c2-5 / gjet)))))

# ::snt pasha allahin edhe un besoj qe o
# ::tokens ["pasha", "allahin", "edhe", "un", "besoj", "qe", "o"]
# ::lemmas ["pasha", "allahin", "edhe", "un", "besoj", "qe", "o"]
(c3-5 / and
      :op1 (c3-0 / speak-01
                 :ARG0 (c3-2 / person
                             :name (c3-4 / name
                                         :op1 "pasha"))
                 :mod (c3-3 / allahin))
      :op2 (c3-1 / besoj-qe
                 :polarity -))

# ::snt o ahahahahahahaahahahah ja srz hala gjall osht
# ::tokens ["o", "ahahahahahahaahahahah", "ja", "srz", "hala", "gjall", "osht"]
# ::lemmas ["o", "ahahahahahahaahahahah", "ja", "srz", "hala", "gjall", "osht"]
(c4-6 / and
      :op1 (c4-2 / laugh-01
                 :mode expressive)
      :op2 (c4-5 / laugh-01
                 :ARG1 (c4-1 / person
                             :name (c4-3 / name
                                         :op1 "RJB"))
                 :mode expressive)
      :op3 (c4-4 / laugh-01
                 :ARG1 c4-1
                 :name c4-3
                 :mode expressive
                 :op1 "Sht")
      :op4 (c4-0 / laugh-01
                 :ARG1 c4-1
                 :mode expressive))

# ::snt po de tregoju se e kem pa nkomoran
# ::tokens ["po", "de", "tregoju", "se", "e", "kem", "pa", "nkomoran"]
# ::lemmas ["po", "de", "tregoju", "se", "e", "kem", "pa", "nkomoran"]
(c5-2 / po-de-
      :mod (c5-0 / se)
      :mod (c5-4 / kem
                 :mode expressive)
      :ARG1-of (c5-1 / say-01
                     :ARG2 (c5-5 / person
                                 :name (c5-3 / name
                                             :op1 "komoran"))))

# ::snt he's aliveeeeeee
# ::tokens ["he", "'s", "aliveeeeeee"]
# ::lemmas ["he", "be", "aliveeeeeee"]
(c6-0 / live-01
      :ARG0 (c6-1 / he))

# ::snt left eye ain't respond yet either
# ::tokens ["left", "eye", "ai", "n't", "respond", "yet", "either"]
# ::lemmas ["left", "eye", "be", "not", "respond", "yet", "either"]
(c7-3 / respond-01
      :ARG0 (c7-4 / eye
                  :ARG1-of (c7-0 / left-19))
      :time (c7-2 / yet)
      :mod (c7-1 / either)
      :polarity -)

# ::snt we are all waiting
# ::tokens ["we", "are", "all", "waiting"]
# ::lemmas ["we", "be", "all", "wait"]
(c8-0 / wait-01
      :ARG1 (c8-2 / we
                  :mod (c8-1 / all)))
