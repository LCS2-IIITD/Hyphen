# ::snt just why
# ::tokens ["just", "why"]
# ::lemmas ["just", "why"]
(c1-2 / cause-01
      :ARG0 (c1-0 / amr-unknown)
      :mod (c1-1 / just))

# ::snt KKK Wednesday thats when u show up at krispy kreme n the KKK is there. With a....rope swing.
# ::tokens ["KKK", "Wednesday", "that", "s", "when", "u", "show", "up", "at", "krispy", "kreme", "n", "the", "KKK", "is", "there", ".", "With", "a", "....", "rope", "swing", "."]
# ::lemmas ["KKK", "Wednesday", "that", "s", "when", "u", "show", "up", "at", "krispy", "kreme", "n", "the", "KKK", "be", "there", ".", "with", "a", "....", "rope", "swing", "."]
(c2-6 / multi-sentence
      :snt1 (c2-2 / be-temporally-at-91
                  :ARG1 (c2-0 / show-up-02
                              :ARG1 (c2-8 / you)
                              :location (c2-3 / store
                                              :name (c2-10 / name
                                                           :op1 "Krispy"
                                                           :op2 "Kreme")))
                  :ARG2 (c2-11 / date-entity
                               :weekday (c2-1 / wednesday)))
      :snt2 (c2-7 / swing-02
                  :ARG0 (c2-4 / person
                              :name (c2-9 / name
                                          :op1 "KKK"))
                  :mod (c2-5 / rope)))

# ::snt /
# ::tokens ["/"]
# ::lemmas ["/"]
(c3-0 / amr-empty)

# ::snt Tf? Hull is in england, and whats the KKK?
# ::tokens ["Tf", "?", "Hull", "is", "in", "england", ",", "and", "what", "s", "the", "KKK", "?"]
# ::lemmas ["tf", "?", "hull", "be", "in", "england", ",", "and", "what", "s", "the", "KKK", "?"]
(c4-4 / multi-sentence
      :snt1 (c4-1 / person
                  :name (c4-10 / name
                               :op1 "Tf"))
      :snt2 (c4-3 / and
                  :op1 (c4-0 / be-located-at-91
                             :ARG1 (c4-7 / city
                                         :name (c4-9 / name
                                                     :op1 "Hull"))
                             :ARG2 (c4-5 / country
                                         :name (c4-8 / name
                                                     :op1 "England")))
                  :op2 (c4-2 / organization
                             :name (c4-11 / name
                                          :op1 "KKK")
                             :domain (c4-6 / amr-unknown))))

# ::snt The Kicker is that this was advertised to children as Krispy Kreme Klub, teaching racism and poor spelling all in one.
# ::tokens ["The", "Kicker", "is", "that", "this", "was", "advertised", "to", "children", "as", "Krispy", "Kreme", "Klub", ",", "teaching", "racism", "and", "poor", "spelling", "all", "in", "one", "."]
# ::lemmas ["the", "Kicker", "be", "that", "this", "be", "advertise", "to", "child", "as", "Krispy", "Kreme", "Klub", ",", "teach", "racism", "and", "poor", "spelling", "all", "in", "one", "."]
(c5-9 / advertise-01
      :ARG0 (c5-1 / publication
                  :name (c5-7 / name
                              :op1 "The"
                              :op2 "Kicker"))
      :ARG1 (c5-2 / this
                  :ARG0-of (c5-3 / teach-01
                                 :ARG1 (c5-5 / and
                                             :op1 (c5-4 / racism)
                                             :op2 (c5-0 / spell-01
                                                        :manner (c5-10 / poor)))
                                 :manner (c5-6 / one-in-one)))
      :ARG3 (c5-8 / child))

# ::snt I wonder if they use ...
# ::tokens ["I", "wonder", "if", "they", "use", "..."]
# ::lemmas ["i", "wonder", "if", "they", "use", "..."]
(c6-4 / wonder-01
      :ARG0 (c6-0 / i)
      :ARG1 (c6-1 / truth-value
                  :polarity-of (c6-3 / use-01
                                     :ARG0 (c6-2 / they))))

# ::snt Krispy Kreme is headquartered in the American South, (Winston Salem, North Carolina) soooooooo....
# ::tokens ["Krispy", "Kreme", "is", "headquartered", "in", "the", "American", "South", ",", "(", "Winston", "Salem", ",", "North", "Carolina", ")", "soooooooo", "...."]
# ::lemmas ["Krispy", "Kreme", "be", "headquarter", "in", "the", "American", "South", ",", "(", "Winston", "Salem", ",", "North", "Carolina", ")", "soooooooo", "...."]
(c7-1 / be-located-at-91
      :ARG1 (c7-7 / headquarters
                  :poss (c7-4 / company
                              :name (c7-9 / name
                                          :op1 "Krispy"
                                          :op2 "Kreme")))
      :ARG2 (c7-3 / country-region
                  :name (c7-8 / name
                              :op1 "American"
                              :op2 "South")
                  :location (c7-5 / city
                                  :name (c7-6 / name
                                              :op1 "Winston"
                                              :op2 "Salem")
                                  :location (c7-0 / state
                                                  :name (c7-10 / name
                                                               :op1 "North"
                                                               :op2 "Carolina"))))
      :mod (c7-2 / so))

# ::snt 'Nerr' is Hull for 'no'. There's one vowel in Hull: 'er' (eg Coke = 'Cerk', John Lennon's widow = 'Yerker Erner', etc)
# ::tokens ["'", "Nerr", "'", "is", "Hull", "for", "'", "no", "'", ".", "There", "'s", "one", "vowel", "in", "Hull", ":", "'", "er", "'", "(", "eg", "Coke", "=", "'", "Cerk", "'", ",", "John", "Lennon", "'s", "widow", "=", "'", "Yerker", "Erner", "'", ",", "etc", ")"]
# ::lemmas ["'", "Nerr", "'", "be", "hull", "for", "'", "no", "'", ".", "there", "be", "one", "vowel", "in", "hull", ":", "'", "er", "'", "(", "eg", "Coke", "=", "'", "Cerk", "'", ",", "John", "Lennon", "'s", "widow", "=", "'", "Yerker", "Erner", "'", ",", "etc", ")"]
(c8-5 / multi-sentence
      :snt1 (c8-9 / have-purpose-91
                  :ARG1 (c8-7 / city
                              :name (c8-11 / name
                                           :op1 "Hull"))
                  :ARG2 (c8-10 / no))
      :snt2 (c8-13 / vowel
                   :location c8-7
                   :ARG1-of (c8-12 / mean-01
                                   :ARG2 (c8-3 / and
                                               :op1 (c8-0 / string-entity
                                                          :value "er")
                                               :op2 (c8-1 / string-entity
                                                          :ARG1-of (c8-8 / mean-01
                                                                         :ARG2 (c8-6 / string-entity
                                                                                     :value "Cerk"))
                                                          :value "Coke")
                                               :op3 (c8-15 / string-entity
                                                           :ARG1-of (c8-2 / mean-01
                                                                          :ARG2 (c8-4 / string-entity
                                                                                      :value "Erner"))
                                                           :value "Yerker")
                                               :op4 (c8-14 / et-cetera)))
                   :quant 1))

# ::snt seriously, how could someone had been so stupid.
# ::tokens ["seriously", ",", "how", "could", "someone", "had", "been", "so", "stupid", "."]
# ::lemmas ["seriously", ",", "how", "could", "someone", "have", "be", "so", "stupid", "."]
(c9-2 / possible-01
      :ARG1 (c9-0 / stupid
                  :domain (c9-1 / someone)
                  :degree (c9-3 / so))
      :manner (c9-4 / amr-unknown)
      :ARG2-of (c9-5 / serious-01))

# ::snt Nerr
# ::tokens ["Nerr"]
# ::lemmas ["Nerr"]
(c11-1 / person
       :name (c11-0 / name
                    :op1 "Nerr"))

# ::snt you're going to take step to make sure you don't create any more sales events with unbelievably racist names? Okay.
# ::tokens ["you", "'re", "going", "to", "take", "step", "to", "make", "sure", "you", "do", "n't", "create", "any", "more", "sales", "events", "with", "unbelievably", "racist", "names", "?", "Okay", "."]
# ::lemmas ["you", "be", "go", "to", "take", "step", "to", "make", "sure", "you", "do", "not", "create", "any", "more", "sale", "event", "with", "unbelievably", "racist", "name", "?", "okay", "."]
(c13-5 / multi-sentence
       :snt1 (c13-0 / step-01
                    :ARG1 (c13-10 / you)
                    :ARG2 (c13-13 / ensure-01
                                  :ARG0 c13-10
                                  :ARG1 (c13-7 / create-01
                                               :ARG0 c13-10
                                               :ARG1 (c13-2 / event
                                                            :mod (c13-1 / sell-01)
                                                            :mod (c13-11 / any)
                                                            :ARG1-of (c13-8 / name-01
                                                                            :ARG2 (c13-3 / racist
                                                                                         :ARG1-of (c13-9 / utter-02)))
                                                            :mod (c13-12 / more))
                                               :polarity -))
                    :polarity (c13-6 / amr-unknown))
       :snt2 (c13-4 / okay-01))

# ::snt Which is really good. Unfortunately, the mockery will continue until morale improves.
# ::tokens ["Which", "is", "really", "good", ".", "Unfortunately", ",", "the", "mockery", "will", "continue", "until", "morale", "improves", "."]
# ::lemmas ["which", "be", "really", "good", ".", "unfortunately", ",", "the", "mockery", "will", "continue", "until", "morale", "improve", "."]
(c14-2 / multi-sentence
       :snt1 (c14-9 / good-02
                    :ARG1 (c14-1 / thing)
                    :degree (c14-6 / really))
       :snt2 (c14-3 / continue-01
                    :ARG1 (c14-7 / mock-01)
                    :time (c14-5 / until
                                 :op1 (c14-0 / improve-01
                                             :ARG1 (c14-4 / morale)))
                    :ARG2-of (c14-8 / fortunate-01
                                    :polarity -)))

# ::snt Like the article said. It was a poor choice of the play on the word Club (*spelled Klub) Their intentions were good though.
# ::tokens ["Like", "the", "article", "said", ".", "It", "was", "a", "poor", "choice", "of", "the", "play", "on", "the", "word", "Club", "(", "*", "spelled", "Klub", ")", "Their", "intentions", "were", "good", "though", "."]
# ::lemmas ["like", "the", "article", "say", ".", "it", "be", "a", "poor", "choice", "of", "the", "play", "on", "the", "word", "Club", "(", "*", "spell", "Klub", ")", "their", "intention", "be", "good", "though", "."]
(c15-7 / multi-sentence
       :snt1 (c15-13 / resemble-01
                     :ARG2 (c15-0 / say-01
                                  :ARG0 (c15-6 / article)))
       :snt2 (c15-10 / choose-01
                     :ARG1 (c15-4 / play-11
                                  :ARG1 (c15-1 / word
                                               :mod (c15-8 / club)))
                     :mod (c15-15 / poor)
                     :ARG1-of (c15-14 / mean-01
                                      :ARG2 (c15-2 / speak-01
                                                   :ARG1 (c15-9 / string-entity
                                                                :value "Klub"))))
       :snt3 (c15-11 / have-concession-91
                     :ARG1 (c15-12 / good-02
                                   :ARG1 (c15-3 / intend-01
                                                :ARG0 (c15-5 / they)))))

# ::snt Hull, we need to talk...
# ::tokens ["Hull", ",", "we", "need", "to", "talk", "..."]
# ::lemmas ["hull", ",", "we", "need", "to", "talk", "..."]
(c16-0 / say-01
       :ARG1 (c16-5 / need-01
                    :ARG0 (c16-1 / we)
                    :ARG1 (c16-3 / talk-01
                                 :ARG0 c16-1))
       :ARG2 (c16-2 / person
                    :name (c16-4 / name
                                 :op1 "Hull")))

# ::snt Ack!
# ::tokens ["Ack", "!"]
# ::lemmas ["Ack", "!"]
(c17-0 / heck
       :mode expressive)

# ::snt GG Hull, glad to know the city of culture is trying to be inclusive of all groups
# ::tokens ["GG", "Hull", ",", "glad", "to", "know", "the", "city", "of", "culture", "is", "trying", "to", "be", "inclusive", "of", "all", "groups"]
# ::lemmas ["GG", "Hull", ",", "glad", "to", "know", "the", "city", "of", "culture", "be", "try", "to", "be", "inclusive", "of", "all", "group"]
(c18-0 / say-01
       :ARG0 (c18-1 / i)
       :ARG1 (c18-11 / glad-02
                     :ARG0 (c18-10 / know-01
                                   :ARG0 c18-1
                                   :ARG1 (c18-3 / try-01
                                                :ARG0 (c18-6 / city
                                                             :mod (c18-5 / culture))
                                                :ARG1 (c18-8 / include-01
                                                             :ARG1 (c18-4 / group
                                                                          :mod (c18-9 / all)))))
                     :ARG1 (c18-2 / person
                                  :name (c18-7 / name
                                               :op1 "GG"
                                               :op2 "Hull")
                                  :ARG2-of c18-0)))

# ::snt Anybody could make that...
# ::tokens ["Anybody", "could", "make", "that", "..."]
# ::lemmas ["anybody", "could", "make", "that", "..."]
(c19-3 / possible-01
       :ARG1 (c19-2 / make-01
                    :ARG0 (c19-0 / anybody)
                    :ARG1 (c19-1 / that)))

# ::snt What next, sponsorship of Chelsea?
# ::tokens ["What", "next", ",", "sponsorship", "of", "Chelsea", "?"]
# ::lemmas ["what", "next", ",", "sponsorship", "of", "Chelsea", "?"]
(c20-0 / sponsor-01
       :ARG1 (c20-1 / team
                    :name (c20-4 / name
                                 :op1 "Chelsea"))
       :mod (c20-3 / next
                   :mod (c20-2 / amr-unknown)))

# ::snt Hi, we know we got it wrong &amp; wholeheartedly apologise. We're taking steps to make sure it doesn't happen again
# ::tokens ["Hi", ",", "we", "know", "we", "got", "it", "wrong", "&", "amp", ";", "wholeheartedly", "apologise", ".", "We", "'re", "taking", "steps", "to", "make", "sure", "it", "does", "n't", "happen", "again"]
# ::lemmas ["hi", ",", "we", "know", "we", "get", "it", "wrong", "&", "amp", ";", "wholeheartedly", "apologise", ".", "we", "be", "take", "step", "to", "make", "sure", "it", "do", "not", "happen", "again"]
(c21-5 / multi-sentence
       :snt1 (c21-12 / and
                     :op1 (c21-9 / hi)
                     :op2 (c21-13 / know-01
                                  :ARG0 (c21-1 / we)
                                  :ARG1 (c21-15 / get-30
                                                :ARG0 c21-1
                                                :ARG1 (c21-2 / it
                                                             :ARG2-of (c21-7 / wrong-04
                                                                             :ARG1 c21-1))))
                     :op3 (c21-6 / apologize-01
                                 :ARG0 c21-1
                                 :manner (c21-8 / wholehearted)))
       :snt2 (c21-0 / step-01
                    :ARG0 (c21-10 / we)
                    :ARG2 (c21-14 / ensure-01
                                  :ARG0 c21-10
                                  :ARG1 (c21-3 / have-polarity-91
                                               :ARG1 (c21-11 / it)
                                               :mod (c21-4 / again)
                                               :ARG2 -))))

# ::snt sprinkled with WHITE POWDER?
# ::tokens ["sprinkled", "with", "WHITE", "POWDER", "?"]
# ::lemmas ["sprinkle", "with", "WHITE", "POWDER", "?"]
(c22-0 / sprinkle-01
       :polarity (c22-4 / amr-unknown)
       :ARG2 (c22-3 / person
                    :ARG1-of (c22-1 / white-02)
                    :ARG1-of (c22-2 / imprison-01)))

# ::snt Wow! RT : Krispy Kreme hull is advertising KKK Wednesday. I don't know. I do not know.
# ::tokens ["Wow", "!", "RT", ":", "Krispy", "Kreme", "hull", "is", "advertising", "KKK", "Wednesday", ".", "I", "do", "n't", "know", ".", "I", "do", "not", "know", "."]
# ::lemmas ["wow", "!", "RT", ":", "Krispy", "Kreme", "hull", "be", "advertise", "KKK", "Wednesday", ".", "i", "do", "not", "know", ".", "i", "do", "not", "know", "."]
(c23-6 / multi-sentence
       :snt1 (c23-12 / advertise-01
                     :ARG0 (c23-8 / company
                                  :name (c23-7 / name
                                               :op1 "Krispy"
                                               :op2 "Kreme"
                                               :op3 "Hull"))
                     :ARG1 (c23-5 / organization
                                  :name (c23-11 / name
                                                :op1 "KKK"))
                     :time (c23-13 / date-entity
                                   :weekday (c23-0 / wednesday))
                     :mod (c23-9 / wow
                                 :mode expressive)
                     :ARG1-of (c23-4 / publication-91
                                     :ARG4 (c23-14 / publication
                                                   :name (c23-10 / name
                                                                 :op1 "RT"))))
       :snt2 (c23-1 / know-01
                    :ARG0 (c23-2 / i)
                    :polarity -)
       :snt3 (c23-3 / know-01
                    :ARG0 c23-2
                    :polarity -))

# ::snt Is that a real ad ?
# ::tokens ["Is", "that", "a", "real", "ad", "?"]
# ::lemmas ["be", "that", "a", "real", "ad", "?"]
(c24-0 / advertise-01
       :polarity (c24-2 / amr-unknown)
       :ARG1-of (c24-1 / real-04)
       :domain (c24-3 / that))

# ::snt Its a company born in the dirty south,soooooo?
# ::tokens ["Its", "a", "company", "born", "in", "the", "dirty", "south", ",", "soooooo", "?"]
# ::lemmas ["its", "a", "company", "bear", "in", "the", "dirty", "south", ",", "soooooo", "?"]
(c25-1 / bear-02
       :ARG1 (c25-2 / company)
       :location (c25-0 / south
                        :ARG1-of (c25-4 / dirty-02))
       :ARG1-of (c25-3 / request-confirmation-91))

# ::snt : Krispy Kreme hull is advertising KKK Wednesday. I don't know. I do not know.
# ::tokens [":", "Krispy", "Kreme", "hull", "is", "advertising", "KKK", "Wednesday", ".", "I", "do", "n't", "know", ".", "I", "do", "not", "know", "."]
# ::lemmas [":", "Krispy", "Kreme", "hull", "be", "advertise", "KKK", "Wednesday", ".", "i", "do", "not", "know", ".", "i", "do", "not", "know", "."]
(c26-5 / multi-sentence
       :snt1 (c26-9 / advertise-01
                    :ARG0 (c26-7 / company
                                 :name (c26-6 / name
                                              :op1 "Krispy"
                                              :op2 "Kreme"
                                              :op3 "Hull"))
                    :ARG1 (c26-4 / organization
                                 :name (c26-8 / name
                                              :op1 "KKK"))
                    :time (c26-10 / date-entity
                                  :weekday (c26-0 / wednesday)))
       :snt2 (c26-1 / know-01
                    :ARG0 (c26-2 / i)
                    :polarity -)
       :snt3 (c26-3 / know-01
                    :ARG0 c26-2
                    :polarity -))

# ::snt How do you write that down and think "looks good ship it"
# ::tokens ["How", "do", "you", "write", "that", "down", "and", "think", "\"", "looks", "good", "ship", "it", "\""]
# ::lemmas ["how", "do", "you", "write", "that", "down", "and", "think", "\"", "look", "good", "ship", "it", "\""]
(c27-8 / and
       :op1 (c27-1 / write-down-03
                   :ARG0 (c27-7 / you)
                   :ARG1 (c27-3 / that)
                   :manner (c27-6 / amr-unknown))
       :op2 (c27-4 / think-01
                   :ARG0 c27-7
                   :ARG1 (c27-2 / look-02
                                :ARG0 (c27-0 / ship-01
                                             :ARG1 c27-3
                                             :ARG1-of (c27-9 / good-02))
                                :manner (c27-5 / amr-unknown))))

# ::snt Via Burlingame.
# ::tokens ["Via", "Burlingame", "."]
# ::lemmas ["Via", "Burlingame", "."]
(c28-1 / be-from-91
       :ARG2 (c28-2 / publication
                    :name (c28-0 / name
                                 :op1 "Burlingame")))
