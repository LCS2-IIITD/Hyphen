# ::snt Been reminiscing about 'Beverly Hillbillies' all say...Donna Douglas was "Elly May until the day she died"
# ::tokens ["Been", "reminiscing", "about", "'", "Beverly", "Hillbillies", "'", "all", "say", "...", "Donna", "Douglas", "was", "\"", "Elly", "May", "until", "the", "day", "she", "died", "\""]
# ::lemmas ["been", "reminisce", "about", "'", "Beverly", "Hillbillies", "'", "all", "say", "...", "Donna", "Douglas", "be", "\"", "Elly", "May", "until", "the", "day", "she", "die", "\""]
(c1-5 / multi-sentence
      :snt1 (c1-10 / reminisce-01
                   :ARG0 (c1-2 / i)
                   :ARG1 (c1-0 / say-01
                               :ARG0 (c1-4 / all)
                               :ARG1 (c1-3 / person
                                           :name (c1-6 / name
                                                       :op1 "Beverly"
                                                       :op2 "Hillbillies"))
                               :snt2-of c1-5))
      :ARG0 (c1-13 / person
                   :name (c1-9 / name
                               :op1 "Donna"
                               :op2 "Douglas"))
      :ARG1 (c1-12 / person
                   :name (c1-7 / name
                               :op1 "Elly"
                               :op2 "May")
                   :domain c1-13
                   :time (c1-8 / until
                               :op1 (c1-11 / day
                                           :time-of (c1-1 / die-01
                                                          :ARG1 c1-12)))))

# ::snt R.I.P. Elly May! GB
# ::tokens ["R.I.P.", "Elly", "May", "!", "GB"]
# ::lemmas ["R.I.P.", "Elly", "May", "!", "GB"]
(c2-1 / multi-sentence
      :snt1 (c2-0 / person
                  :name (c2-3 / name
                              :op1 "R.I.P."))
      :snt2 (c2-4 / person
                  :name (c2-2 / name
                              :op1 "Elly"
                              :op2 "May")))

# ::snt RIP Elly May.
# ::tokens ["RIP", "Elly", "May."]
# ::lemmas ["RIP", "Elly", "May."]
(c3-3 / wish-01
      :ARG1 (c3-1 / rest-01
                  :ARG1 (c3-0 / person
                              :name (c3-2 / name
                                          :op1 "Elly"
                                          :op2 "May"))
                  :manner (c3-4 / peace)))

# ::snt rest well Ms Elle, you were a real doll.
# ::tokens ["rest", "well", "Ms", "Elle", ",", "you", "were", "a", "real", "doll", "."]
# ::lemmas ["rest", "well", "Ms", "Elle", ",", "you", "be", "a", "real", "doll", "."]
(c4-5 / rest-01
      :ARG0 (c4-4 / you)
      :ARG1 (c4-1 / person
                  :name (c4-3 / name
                              :op1 "Ms"
                              :op2 "Elle"))
      :ARG2 (c4-6 / doll
                  :ARG1-of (c4-2 / real-04)
                  :domain c4-4)
      :mod (c4-0 / well)
      :mode imperative)
