# ::snt Hard to even believe. Yucky to imagine.
# ::tokens ["Hard", "to", "even", "believe", ".", "Yucky", "to", "imagine", "."]
# ::lemmas ["hard", "to", "even", "believe", ".", "yucky", "to", "imagine", "."]
(c1-2 / multi-sentence
      :snt1 (c1-3 / hard-02
                  :ARG1 (c1-0 / believe-01
                              :mod (c1-5 / even)))
      :snt2 (c1-4 / yucky
                  :ARG1-of (c1-1 / imagine-01)))

# ::snt ?
# ::tokens ["?"]
# ::lemmas ["?"]
(c2-0 / request-confirmation-91)

# ::snt lol!
# ::tokens ["lol", "!"]
# ::lemmas ["lol", "!"]
(c3-0 / laugh-01
      :ARG0 (c3-2 / i)
      :manner (c3-1 / loud)
      :mode expressive)

# ::snt What's next??? Beer flavored Milk? Cheetos flavored wine and chocolate flavored Meth??
# ::tokens ["What", "'s", "next", "?", "?", "?", "Beer", "flavored", "Milk", "?", "Cheetos", "flavored", "wine", "and", "chocolate", "flavored", "Meth", "?", "?"]
# ::lemmas ["what", "be", "next", "?", "?", "?", "beer", "flavor", "milk", "?", "cheeto", "flavor", "wine", "and", "chocolate", "flavor", "Meth", "?", "?"]
(c4-6 / multi-sentence
      :snt1 (c4-11 / next
                   :domain (c4-4 / amr-unknown))
      :snt2 (c4-5 / and
                  :op1 (c4-12 / milk
                              :ARG1-of (c4-13 / flavor-01
                                              :ARG2 (c4-2 / beer)))
                  :op2 (c4-1 / wine
                             :ARG1-of (c4-0 / flavor-01
                                            :ARG2 (c4-8 / company
                                                        :name (c4-10 / name
                                                                     :op1 "Cheetos"))))
                  :op3 (c4-9 / methamphetamine
                             :ARG1-of (c4-3 / flavor-01
                                            :ARG2 (c4-7 / chocolate)))))

# ::snt and uses the word "nourish" in their tag line. Food industry needs a reality check.
# ::tokens ["and", "uses", "the", "word", "\"", "nourish", "\"", "in", "their", "tag", "line", ".", "Food", "industry", "needs", "a", "reality", "check", "."]
# ::lemmas ["and", "use", "the", "word", "\"", "nourish", "\"", "in", "their", "tag", "line", ".", "food", "industry", "need", "a", "reality", "check", "."]
(c5-7 / multi-sentence
      :snt1 (c5-11 / and
                   :op2 (c5-10 / use-01
                               :ARG1 (c5-1 / word
                                           :mod (c5-0 / sourish))
                               :ARG2 (c5-3 / line
                                           :mod (c5-4 / tag)
                                           :poss (c5-5 / they))))
      :snt2 (c5-8 / need-01
                  :ARG0 (c5-2 / industry
                              :mod (c5-12 / food))
                  :ARG1 (c5-9 / check-01
                              :ARG1 (c5-6 / reality))))

# ::snt Are "Dewitos" fully digestible or biodegradable? Wall-E may be cleaning them up for centuries.
# ::tokens ["Are", "\"", "Dewitos", "\"", "fully", "digestible", "or", "biodegradable", "?", "Wall", "-", "E", "may", "be", "cleaning", "them", "up", "for", "centuries", "."]
# ::lemmas ["be", "\"", "dewito", "\"", "fully", "digestible", "or", "biodegradable", "?", "wall", "-", "E", "may", "be", "clean", "they", "up", "for", "centuries", "."]
(c6-4 / multi-sentence
      :snt1 (c6-10 / amr-choice
                   :op1 (c6-11 / digest-01
                               :ARG1 (c6-2 / product
                                           :name (c6-6 / name
                                                       :op1 "Dewitos"))
                               :degree (c6-13 / full))
                   :op2 (c6-0 / biodegradable
                              :ARG1-of (c6-12 / possible-01
                                              :snt2-of c6-4)))
      :ARG1 (c6-7 / clean-up-02
                  :ARG0 (c6-5 / company
                              :name (c6-9 / name
                                          :op1 "Wall-E"))
                  :ARG1 c6-2
                  :duration (c6-1 / multiple
                                  :op1 (c6-3 / temporal-quantity
                                             :unit (c6-8 / century)
                                             :quant 1))))

# ::snt This is pure filth!
# ::tokens ["This", "is", "pure", "filth", "!"]
# ::lemmas ["this", "be", "pure", "filth", "!"]
(c7-2 / filth
      :domain (c7-0 / this)
      :ARG1-of (c7-1 / pure-02))

# ::snt "Dewitos" // The Doritos of Elmer Fudd.
# ::tokens ["\"", "Dewitos", "\"", "//", "The", "Doritos", "of", "Elmer", "Fudd", "."]
# ::lemmas ["\"", "dewito", "\"", "//", "The", "Doritos", "of", "Elmer", "Fudd", "."]
(c8-4 / and
      :op1 (c8-0 / product
                 :name (c8-1 / name
                             :op1 "Dewitos"))
      :op2 (c8-6 / product
                 :name (c8-3 / name
                             :op1 "The"
                             :op2 "Doritos")
                 :poss (c8-5 / person
                             :name (c8-2 / name
                                         :op1 "Elmer"
                                         :op2 "Fudd"))))

# ::snt closest thing teens can get to drugs is mtD/dorito combo. Biggest "brain high" food is msg-hfcs-fat-salt combo
# ::tokens ["closest", "thing", "teens", "can", "get", "to", "drugs", "is", "mtD", "/", "dorito", "combo", ".", "Biggest", "\"", "brain", "high", "\"", "food", "is", "msg", "-", "hfcs", "-", "fat", "-", "salt", "combo"]
# ::lemmas ["close", "thing", "teen", "can", "get", "to", "drug", "be", "mtd", "/", "dorito", "combo", ".", "big", "\"", "brain", "high", "\"", "food", "be", "msg", "-", "hfcs", "-", "fat", "-", "salt", "combo"]
(c9-18 / multi-sentence
       :snt1 (c9-26 / get-01
                    :ARG0 (c9-22 / teen)
                    :ARG1 (c9-13 / drug)
                    :ARG1-of (c9-16 / possible-01)
                    :ARG1-of (c9-25 / have-degree-91
                                    :ARG2 (c9-0 / slim-02
                                                :ARG1 c9-26)
                                    :ARG3 (c9-12 / most))
                    :domain (c9-1 / combine-01
                                  :ARG1 (c9-5 / small-molecule
                                              :name (c9-20 / name
                                                           :op1 "mtD"))
                                  :ARG2 (c9-8 / small-molecule
                                              :name (c9-19 / name
                                                           :op1 "Ddorito"))))
       :snt2 (c9-14 / eat-01
                    :ARG1 (c9-15 / food
                                 :ARG1-of (c9-6 / high-02
                                                :ARG2 (c9-7 / brain))
                                 :ARG1-of (c9-3 / have-degree-91
                                                :ARG2 (c9-2 / big)
                                                :ARG3 (c9-9 / most))
                                 :domain (c9-23 / combine-01
                                                :ARG1 (c9-4 / small-molecule
                                                            :name (c9-10 / name
                                                                         :op1 " msg"))
                                                :ARG2 (c9-17 / small-molecule
                                                             :name (c9-21 / name
                                                                          :op1 "fat"))
                                                :ARG3 (c9-24 / small-molecule
                                                             :name (c9-11 / name
                                                                          :op1 "salt"))))))

# ::snt P-O-I-S-O-N
# ::tokens ["P", "-", "O", "-", "I", "-", "S", "-", "O", "-", "N"]
# ::lemmas ["p", "-", "O", "-", "i", "-", "S", "-", "O", "-", "n"]
(c10-0 / amr-empty)

# ::snt they have the "Ew" part right.
# ::tokens ["they", "have", "the", "\"", "Ew", "\"", "part", "right", "."]
# ::lemmas ["they", "have", "the", "\"", "ew", "\"", "part", "right", "."]
(c11-2 / have-03
       :ARG0 (c11-1 / they)
       :ARG1 (c11-0 / part
                    :mod (c11-4 / east))
       :ARG2-of (c11-3 / right-06
                       :ARG1 c11-1))

# ::snt b good if I has weed in it too
# ::tokens ["b", "good", "if", "I", "has", "weed", "in", "it", "too"]
# ::lemmas ["b", "good", "if", "i", "have", "weed", "in", "it", "too"]
(c12-5 / good-02
       :condition (c12-2 / have-03
                         :ARG0 (c12-0 / i)
                         :ARG1 (c12-4 / weed
                                      :location (c12-3 / it))
                         :mod (c12-1 / too)))

# ::snt America is not the whole planet, live somewhere else.
# ::tokens ["America", "is", "not", "the", "whole", "planet", ",", "live", "somewhere", "else", "."]
# ::lemmas ["America", "be", "not", "the", "whole", "planet", ",", "live", "somewhere", "else", "."]
(c13-7 / and
       :op1 (c13-2 / planet
                   :mod (c13-1 / whole)
                   :domain (c13-5 / country
                                  :name (c13-4 / name
                                               :op1 "America"))
                   :polarity -)
       :op2 (c13-3 / live-01
                   :ARG0 (c13-6 / you)
                   :location (c13-0 / somewhere
                                    :mod (c13-8 / else))
                   :mode imperative))

# ::snt Just eww...
# ::tokens ["Just", "eww", "..."]
# ::lemmas ["just", "eww", "..."]
(c14-1 / ewww
       :mod (c14-0 / just)
       :mode expressive)

# ::snt That is one of the most repellent things I've ever seen. And sadly we know it will sell.
# ::tokens ["That", "is", "one", "of", "the", "most", "repellent", "things", "I", "'ve", "ever", "seen", ".", "And", "sadly", "we", "know", "it", "will", "sell", "."]
# ::lemmas ["that", "be", "one", "of", "the", "most", "repellent", "thing", "i", "'ve", "ever", "see", ".", "and", "sadly", "we", "know", "it", "will", "sell", "."]
(c15-8 / multi-sentence
       :snt1 (c15-10 / have-degree-91
                     :ARG1 (c15-5 / that)
                     :ARG2 (c15-12 / repellent)
                     :ARG3 (c15-13 / most)
                     :ARG5 (c15-6 / thing
                                  :ARG1-of (c15-0 / see-01
                                                  :ARG0 (c15-3 / i)
                                                  :time (c15-14 / ever))))
       :snt2 (c15-7 / and
                    :op2 (c15-1 / know-01
                                :ARG0 (c15-2 / we)
                                :ARG1 (c15-4 / sell-01
                                             :ARG1 (c15-11 / it))
                                :ARG0-of (c15-9 / sad-02))))

# ::snt So much for that "pledge" the soda companies announced a few weeks ago
# ::tokens ["So", "much", "for", "that", "\"", "pledge", "\"", "the", "soda", "companies", "announced", "a", "few", "weeks", "ago"]
# ::lemmas ["so", "much", "for", "that", "\"", "pledge", "\"", "the", "soda", "company", "announce", "a", "few", "weeks", "ago"]
(c16-7 / much
       :degree (c16-0 / so)
       :topic (c16-4 / pledge-01
                     :mod (c16-5 / that)
                     :ARG1-of (c16-10 / announce-01
                                      :ARG0 (c16-8 / company
                                                   :mod (c16-2 / soda))
                                      :time (c16-3 / before
                                                   :op1 (c16-9 / now)
                                                   :quant (c16-11 / few
                                                                  :op1 (c16-6 / temporal-quantity
                                                                              :unit (c16-1 / week)
                                                                              :quant 1))))))

# ::snt :'Merica
# ::tokens [":", "'", "Merica"]
# ::lemmas [":", "'", "Merica"]
(c17-1 / person
       :name (c17-0 / name
                    :op1 "Merica"))

# ::snt I think I'm gonna be sick.
# ::tokens ["I", "think", "I", "'m", "gon", "na", "be", "sick", "."]
# ::lemmas ["i", "think", "i", "be", "going", "to", "be", "sick", "."]
(c18-0 / think-01
       :ARG0 (c18-1 / i)
       :ARG1 (c18-2 / sick-05
                    :ARG1 c18-1))

# ::snt SPEECHLESS.
# ::tokens ["SPEECHLESS", "."]
# ::lemmas ["SPEECHLESS", "."]
(c19-0 / brief-01)

# ::snt Wow - Taco Bell and now Mt Dew - Doritos, ya just got no dignity
# ::tokens ["Wow", "-", "Taco", "Bell", "and", "now", "Mt", "Dew", "-", "Doritos", ",", "ya", "just", "got", "no", "dignity"]
# ::lemmas ["wow", "-", "Taco", "Bell", "and", "now", "Mt", "Dew", "-", "Doritos", ",", "ya", "just", "get", "no", "dignity"]
(c20-9 / dignity
       :domain (c20-5 / you)
       :mod (c20-6 / just)
       :ARG1-of (c20-2 / cause-01
                       :ARG0 (c20-8 / and
                                    :op1 (c20-10 / facility
                                                 :name (c20-3 / name
                                                              :op1 "Taco"
                                                              :op2 "Bell"))
                                    :op2 (c20-0 / facility
                                                :name (c20-7 / name
                                                             :op1 "Mt"
                                                             :op2 "Dew")
                                                :time (c20-4 / now))))
       :mod (c20-1 / wow
                   :mode expressive)
       :polarity -)

# ::snt yuck.
# ::tokens ["yuck", "."]
# ::lemmas ["yuck", "."]
(c21-0 / yuck
       :mode expressive)

# ::snt Big !
# ::tokens ["Big", "!"]
# ::lemmas ["big", "!"]
(c22-0 / big
       :mode expressive)

# ::snt Yuck
# ::tokens ["Yuck"]
# ::lemmas ["Yuck"]
(c23-0 / yuck
       :mode expressive)

# ::snt celebrity spokesperson
# ::tokens ["celebrity", "spokesperson"]
# ::lemmas ["celebrity", "spokesperson"]
(c24-2 / person
       :ARG0-of (c24-1 / have-org-role-91
                       :ARG2 (c24-0 / spokesperson
                                    :mod (c24-3 / celebrity))))

# ::snt :just witnessed beat OU in Norman. Count me in I've seen it all.
# ::tokens [":", "just", "witnessed", "beat", "OU", "in", "Norman", ".", "Count", "me", "in", "I", "'ve", "seen", "it", "all", "."]
# ::lemmas [":", "just", "witness", "beat", "ou", "in", "Norman", ".", "count", "i", "in", "i", "'ve", "see", "it", "all", "."]
(c25-6 / multi-sentence
       :snt1 (c25-16 / witness-01
                     :ARG0 (c25-1 / i)
                     :ARG1 (c25-2 / beat-03
                                  :ARG1 (c25-4 / team
                                               :name (c25-9 / name
                                                            :op1 "Oklahoma"))
                                  :location (c25-10 / city
                                                    :name (c25-14 / name
                                                                  :op1 "Norman")))
                     :time (c25-12 / just))
       :snt2 (c25-7 / count-02
                    :ARG0 (c25-13 / you)
                    :ARG1 (c25-15 / i)
                    :ARG1-of (c25-11 / cause-01
                                     :ARG0 (c25-0 / see-01
                                                  :ARG0 (c25-3 / i)
                                                  :ARG1 (c25-8 / it
                                                               :mod (c25-5 / all))))
                    :mode imperative))
