# ::snt : appreciate &amp; will read. Trying to get through this- I'm more bugs&amp;boys101 level so it's a big challenge
# ::tokens [":", "appreciate", "&", "amp", ";", "will", "read", ".", "Trying", "to", "get", "through", "this-", "I", "'m", "more", "bugs&amp;boys101", "level", "so", "it", "'s", "a", "big", "challenge"]
# ::lemmas [":", "appreciate", "&", "amp", ";", "will", "read", ".", "try", "to", "get", "through", "this-", "i", "be", "more", "bugs&amp;boys101", "level", "so", "it", "be", "a", "big", "challenge"]
(c1-7 / multi-sentence
      :snt1 (c1-15 / and
                   :op1 (c1-6 / appreciate-02
                              :ARG0 (c1-0 / i))
                   :op2 (c1-3 / read-01
                              :ARG0 c1-0))
      :snt2 (c1-4 / try-01
                  :ARG0 (c1-14 / i)
                  :ARG1 (c1-17 / get-through-13
                               :ARG0 c1-14
                               :ARG1 (c1-5 / this))
                  :ARG1-of (c1-9 / cause-01
                                 :ARG0 (c1-8 / and
                                             :op1 (c1-1 / bug
                                                        :domain c1-14
                                                        :mod (c1-16 / more))
                                             :op2 (c1-2 / level
                                                        :name (c1-10 / name
                                                                     :op1 "boys101")
                                                        :ARG0-of (c1-11 / cause-01
                                                                        :ARG1 (c1-12 / challenge-01
                                                                                     :ARG1 c1-14
                                                                                     :mod (c1-13 / big))))))))

# ::snt .
# ::tokens ["."]
# ::lemmas ["."]
(c2-0 / amr-empty)

# ::snt Fighting fire with fire. Take this!
# ::tokens ["Fighting", "fire", "with", "fire", ".", "Take", "this", "!"]
# ::lemmas ["fight", "fire", "with", "fire", ".", "take", "this", "!"]
(c3-4 / multi-sentence
      :snt1 (c3-6 / fight-01
                  :ARG1 (c3-0 / fire-03)
                  :instrument (c3-1 / fire-03))
      :snt2 (c3-2 / take-01
                  :ARG0 (c3-5 / you)
                  :ARG1 (c3-3 / this)
                  :mode imperative))

# ::snt Someone say "puppy"?
# ::tokens ["Someone", "say", "\"", "puppy", "\"", "?"]
# ::lemmas ["someone", "say", "\"", "puppy", "\"", "?"]
(c4-1 / say-01
      :polarity (c4-0 / amr-unknown)
      :ARG0 (c4-2 / someone)
      :ARG1 (c4-3 / pussy))

# ::snt HEEEEEEY GURL HEY! IMMA SPIDER, ALL UP IN YOUR BASEMENT! DON'T BE THAT WAY, SPIDERS ARE COOL GUYS, JUST LISTEN TO MY BATMAN VOICE
# ::tokens ["HEEEEEEY", "GURL", "HEY", "!", "IMMA", "SPIDER", ",", "ALL", "UP", "IN", "YOUR", "BASEMENT", "!", "DON'T", "BE", "THAT", "WAY", ",", "SPIDERS", "ARE", "COOL", "GUYS", ",", "JUST", "LISTEN", "TO", "MY", "BATMAN", "VOICE"]
# ::lemmas ["HEEEEEEY", "GURL", "HEY", "!", "IMMA", "SPIDER", ",", "all", "up", "in", "your", "BASEMENT", "!", "don't", "be", "that", "WAY", ",", "spider", "be", "cool", "GUYS", ",", "just", "listen", "to", "my", "BATMAN", "voice"]
(c5-16 / multi-sentence
       :snt1 (c5-0 / say-01
                   :ARG0 (c5-1 / i)
                   :ARG1 (c5-24 / hey
                                :mode expressive)
                   :ARG2 (c5-15 / person
                                :name (c5-19 / name
                                             :op1 "GURL"))
                   :snt2-of c5-16
                   :mode expressive)
       :ARG0 (c5-6 / i)
       :ARG1 (c5-5 / up-03
                   :ARG1 (c5-12 / all)
                   :manner (c5-7 / BASEMENT
                                 :poss (c5-21 / person
                                              :name c5-19
                                              :ARG2-of c5-16
                                              :op1 "ImMA")))
       :snt3 (c5-4 / contrast-01
                   :ARG1 (c5-11 / way
                                :mod (c5-22 / that)
                                :domain (c5-14 / person
                                               :ARG0-of (c5-8 / spy-01))
                                :polarity -)
                   :ARG2 (c5-25 / guy
                                :ARG1-of (c5-23 / cool-04)
                                :domain (c5-9 / person
                                              :ARG0-of (c5-17 / prey-01))))
       :snt4 (c5-2 / listen-01
                   :ARG0 (c5-18 / you)
                   :ARG1 (c5-20 / voice-01
                                :ARG0 (c5-3 / i)
                                :ARG1 (c5-13 / man
                                             :name c5-19
                                             :op1 "Batman"))
                   :mode imperative)
       :mod (c5-10 / just))

# ::snt just wants to hug you
# ::tokens ["just", "wants", "to", "hug", "you"]
# ::lemmas ["just", "want", "to", "hug", "you"]
(c6-0 / want-01
      :ARG1 (c6-1 / hug-01
                  :ARG1 (c6-3 / you))
      :mod (c6-2 / just))

# ::snt Do not want...
# ::tokens ["Do", "not", "want", "..."]
# ::lemmas ["do", "not", "want", "..."]
(c7-0 / want-01
      :polarity -)

# ::snt Well, this is going to envelope my dreams and consume me for days. Thanks! :'(
# ::tokens ["Well", ",", "this", "is", "going", "to", "envelope", "my", "dreams", "and", "consume", "me", "for", "days", ".", "Thanks", "!", ":'("]
# ::lemmas ["well", ",", "this", "be", "go", "to", "envelope", "my", "dream", "and", "consume", "i", "for", "days", ".", "thank", "!", ":'("]
(c8-7 / multi-sentence
      :snt1 (c8-11 / and
                   :op1 (c8-13 / envelope-01
                               :ARG0 (c8-5 / this)
                               :ARG1 (c8-12 / dream-01
                                            :ARG0 (c8-2 / i)))
                   :op2 (c8-8 / consume-01
                              :ARG0 c8-5
                              :ARG1 c8-2
                              :duration (c8-3 / multiple
                                              :op1 (c8-6 / temporal-quantity
                                                         :unit (c8-0 / day)
                                                         :quant 1)))
                   :mod (c8-1 / well))
      :snt2 (c8-4 / thank-01
                  :ARG0 (c8-10 / i)
                  :ARG1 (c8-9 / you)
                  :mode expressive))

# ::snt E think that's bad check out the Camel Spider.
# ::tokens ["E", "think", "that", "'s", "bad", "check", "out", "the", "Camel", "Spider", "."]
# ::lemmas ["e", "think", "that", "be", "bad", "check", "out", "the", "Camel", "Spider", "."]
(c9-3 / check-out-05
      :ARG0 (c9-4 / you)
      :ARG1 (c9-1 / person
                  :name (c9-5 / name
                              :op1 "Camel"
                              :op2 "Spider"))
      :ARG1-of (c9-2 / think-01
                     :ARG0 c9-4
                     :ARG1-of (c9-0 / bad-07))
      :mode imperative)

# ::snt leave Flunky alone!!!
# ::tokens ["leave", "Flunky", "alone", "!", "!", "!"]
# ::lemmas ["leave", "Flunky", "alone", "!", "!", "!"]
(c12-1 / leave-14
       :ARG0 (c12-3 / you)
       :ARG1 (c12-4 / alone
                    :domain (c12-0 / person
                                   :name (c12-2 / name
                                                :op1 "Flunky")))
       :mode imperative)

# ::snt Well I think I just legitimately had a coronary. Ta.
# ::tokens ["Well", "I", "think", "I", "just", "legitimately", "had", "a", "coronary", ".", "Ta", "."]
# ::lemmas ["well", "i", "think", "i", "just", "legitimately", "have", "a", "coronary", ".", "Ta", "."]
(c13-5 / multi-sentence
       :snt1 (c13-4 / think-01
                    :ARG0 (c13-1 / i)
                    :ARG1 (c13-6 / have-03
                                 :ARG0 c13-1
                                 :ARG1 (c13-9 / medical-condition
                                              :name (c13-8 / name
                                                           :op1 "Coronary"))
                                 :ARG1-of (c13-3 / legitimate-02)
                                 :mod (c13-7 / just))
                    :mod (c13-0 / well))
       :snt2 (c13-2 / person
                    :name c13-8
                    :op1 "Ta"))

# ::snt but everyone loves a clown
# ::tokens ["but", "everyone", "loves", "a", "clown"]
# ::lemmas ["but", "everyone", "love", "a", "clown"]
(c14-3 / contrast-01
       :ARG2 (c14-0 / love-01
                    :ARG0 (c14-2 / everyone)
                    :ARG1 (c14-1 / clown)))
