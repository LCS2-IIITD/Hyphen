# ::snt yes he said he would do it again. Between ABC,Crowd sourcing &amp; a imminent book deal the guy is a millionaire.
# ::tokens ["yes", "he", "said", "he", "would", "do", "it", "again", ".", "Between", "ABC", ",", "Crowd", "sourcing", "&", "amp", ";", "a", "imminent", "book", "deal", "the", "guy", "is", "a", "millionaire", "."]
# ::lemmas ["yes", "he", "say", "he", "would", "do", "it", "again", ".", "between", "ABC", ",", "Crowd", "source", "&", "amp", ";", "a", "imminent", "book", "deal", "the", "guy", "be", "a", "millionaire", "."]
(c1-13 / multi-sentence
       :snt1 (c1-0 / say-01
                   :ARG0 (c1-17 / he)
                   :ARG1 (c1-11 / do-02
                                :ARG0 c1-17
                                :ARG1 (c1-2 / it)
                                :mod (c1-9 / again)))
       :snt2 (c1-10 / millionaire
                    :domain (c1-18 / guy)
                    :ARG1-of (c1-4 / cause-01
                                   :ARG0 (c1-3 / and
                                               :op1 (c1-12 / publication
                                                           :name (c1-15 / name
                                                                        :op1 "ABC"))
                                               :op2 (c1-6 / source-02
                                                          :ARG1 (c1-16 / crowd))
                                               :op3 (c1-8 / company
                                                          :name (c1-14 / name
                                                                       :op1 "Camp"))
                                               :op4 (c1-1 / deal-03
                                                          :ARG2 (c1-7 / book)
                                                          :mod (c1-5 / imminent))))))

# ::snt well that much is prima facia obvious.
# ::tokens ["well", "that", "much", "is", "prima", "facia", "obvious", "."]
# ::lemmas ["well", "that", "much", "be", "prima", "facia", "obvious", "."]
(c2-1 / obvious-01
      :ARG1 (c2-2 / that
                  :mod (c2-3 / much))
      :mod (c2-0 / basic)
      :mod (c2-4 / well))

# ::snt I'd do the same thing Officer Wilson did if some guy ...
# ::tokens ["I", "'d", "do", "the", "same", "thing", "Officer", "Wilson", "did", "if", "some", "guy", "..."]
# ::lemmas ["i", "would", "do", "the", "same", "thing", "Officer", "Wilson", "do", "if", "some", "guy", "..."]
(c3-10 / do-02
       :ARG0 (c3-2 / i)
       :ARG1 (c3-6 / thing
                   :ARG1-of (c3-0 / same-01
                                  :ARG2 (c3-5 / thing
                                              :ARG1-of (c3-1 / do-02
                                                             :ARG0 (c3-4 / person
                                                                         :name (c3-9 / name
                                                                                     :op1 "Wilson")
                                                                         :ARG0-of (c3-8 / have-org-role-91
                                                                                        :ARG2 (c3-7 / officer)))))))
       :condition (c3-11 / guy
                         :mod (c3-3 / some)))

# ::snt his race didn't get him killed. Trying to take cops gun and attacking cop did.
# ::tokens ["his", "race", "did", "n't", "get", "him", "killed", ".", "Trying", "to", "take", "cops", "gun", "and", "attacking", "cop", "did", "."]
# ::lemmas ["his", "race", "do", "not", "get", "he", "kill", ".", "try", "to", "take", "cop", "gun", "and", "attack", "cop", "do", "."]
(c4-3 / multi-sentence
      :snt1 (c4-11 / get-04
                   :ARG0 (c4-9 / race
                               :poss (c4-8 / he))
                   :ARG1 (c4-10 / kill-01
                                :ARG1 c4-8)
                   :polarity -)
      :snt2 (c4-1 / and
                  :op1 (c4-0 / try-01
                             :ARG1 (c4-2 / take-01
                                         :ARG1 (c4-4 / gun
                                                     :poss (c4-6 / cop))))
                  :op2 (c4-5 / attack-01
                             :ARG1 (c4-7 / cop))))

# ::snt The fictional Quick E Mart drink from the Simpsons. I'm also old enough to have greater then basic comprehension skills
# ::tokens ["The", "fictional", "Quick", "E", "Mart", "drink", "from", "the", "Simpsons", ".", "I", "'m", "also", "old", "enough", "to", "have", "greater", "then", "basic", "comprehension", "skills"]
# ::lemmas ["the", "fictional", "Quick", "E", "Mart", "drink", "from", "the", "Simpsons", ".", "i", "be", "also", "old", "enough", "to", "have", "great", "then", "basic", "comprehension", "skill"]
(c5-7 / multi-sentence
      :snt1 (c5-14 / drink
                   :name (c5-13 / name
                                :op1 "Quick"
                                :op2 "E"
                                :op3 "Mart")
                   :mod (c5-16 / fictional)
                   :source (c5-1 / broadcast-program
                                 :name (c5-11 / name
                                              :op1 "The"
                                              :op2 "Simpsons")))
      :snt2 (c5-10 / have-degree-91
                   :ARG1 (c5-2 / i)
                   :ARG2 (c5-5 / old)
                   :ARG3 (c5-15 / enough)
                   :ARG6 (c5-3 / have-03
                               :ARG0 c5-2
                               :ARG1 (c5-0 / skill
                                           :topic (c5-8 / comprehend-01
                                                        :mod (c5-9 / basic))
                                           :ARG1-of c5-10
                                           :ARG2 (c5-12 / great)
                                           :ARG3 (c5-4 / more)
                                           :ARG4 c5-0)))
      :mod (c5-6 / also))

# ::snt that's bc when cops cornered him, he complied and didn't resist
# ::tokens ["that", "'s", "bc", "when", "cops", "cornered", "him", ",", "he", "complied", "and", "did", "n't", "resist"]
# ::lemmas ["that", "be", "bc", "when", "cop", "corner", "he", ",", "he", "comply", "and", "do", "not", "resist"]
(c7-3 / cause-01
      :ARG0 (c7-7 / and
                  :op1 (c7-2 / comply-01
                             :ARG0 (c7-5 / he))
                  :op2 (c7-0 / resist-01
                             :ARG0 c7-5
                             :polarity -)
                  :time (c7-4 / corner-01
                              :ARG0 (c7-6 / cop)
                              :ARG1 c7-5))
      :ARG1 (c7-1 / that))

# ::snt it's sad Brown died, but if u attack a cop and try to take gun, u will die!
# ::tokens ["it", "'s", "sad", "Brown", "died", ",", "but", "if", "u", "attack", "a", "cop", "and", "try", "to", "take", "gun", ",", "u", "will", "die", "!"]
# ::lemmas ["it", "be", "sad", "Brown", "die", ",", "but", "if", "u", "attack", "a", "cop", "and", "try", "to", "take", "gun", ",", "u", "will", "die", "!"]
(c8-0 / sad-02
      :ARG1 (c8-10 / die-01
                   :ARG1 (c8-2 / person
                               :name (c8-9 / name
                                           :op1 "Brown")))
      :concession (c8-1 / die-01
                        :ARG1 c8-2
                        :condition (c8-4 / and
                                         :op1 (c8-6 / attack-01
                                                    :ARG0 (c8-8 / you)
                                                    :ARG1 (c8-7 / cop))
                                         :op2 (c8-3 / try-01
                                                    :ARG0 c8-8
                                                    :ARG1 (c8-5 / take-01
                                                                :ARG0 c8-8
                                                                :ARG1 (c8-11 / gun))))))

# ::snt It's been profitable for for years.
# ::tokens ["It", "'s", "been", "profitable", "for", "for", "years", "."]
# ::lemmas ["it", "be", "be", "profitable", "for", "for", "years", "."]
(c9-1 / profitable-02
      :ARG1 (c9-0 / it)
      :duration (c9-3 / multiple
                      :op1 (c9-2 / temporal-quantity
                                 :unit (c9-4 / year)
                                 :quant 1)))
