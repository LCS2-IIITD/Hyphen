# ::snt Eww: CONFIRMED: PepsiCo is making a Doritos-flavored Mountain Dew called "Dewitos"
# ::tokens ["Eww", ":", "CONFIRMED", ":", "PepsiCo", "is", "making", "a", "Doritos", "-", "flavored", "Mountain", "Dew", "called", "\"", "Dewitos", "\""]
# ::lemmas ["Eww", ":", "confirmed", ":", "PepsiCo", "be", "make", "a", "Doritos", "-", "flavor", "Mountain", "Dew", "call", "\"", "dewito", "\""]
(c1-7 / announce-01
      :ARG1 (c1-1 / make-01
                  :ARG0 (c1-4 / company
                              :name (c1-3 / name
                                          :op1 "PepsiCo"))
                  :ARG1 (c1-0 / product
                              :name (c1-6 / name
                                          :op1 "Mountain"
                                          :op2 "Dew")
                              :ARG1-of (c1-10 / flavor-01
                                              :ARG2 (c1-9 / product
                                                          :name (c1-5 / name
                                                                      :op1 "Doritos")))
                              :ARG1-of (c1-2 / call-01
                                             :ARG2 c1-0)))
      :mod (c1-8 / ewww
                 :mode expressive))

# ::snt : CONFIRMED: PepsiCo is making a Doritos-flavored Mountain Dew called "Dewitos"
# ::tokens [":", "CONFIRMED", ":", "PepsiCo", "is", "making", "a", "Doritos", "-", "flavored", "Mountain", "Dew", "called", "\"", "Dewitos", "\""]
# ::lemmas [":", "confirmed", ":", "PepsiCo", "be", "make", "a", "Doritos", "-", "flavor", "Mountain", "Dew", "call", "\"", "dewito", "\""]
(c2-3 / confirm-01
      :ARG1 (c2-1 / make-01
                  :ARG0 (c2-2 / company
                              :name (c2-7 / name
                                          :op1 "PepsiCo"))
                  :ARG1 (c2-0 / product
                              :name (c2-6 / name
                                          :op1 "Mountain"
                                          :op2 "Dew")
                              :ARG1-of (c2-9 / flavor-01
                                             :ARG2 (c2-8 / product
                                                         :name (c2-4 / name
                                                                     :op1 "Dewitos")))
                              :ARG1-of (c2-5 / call-01
                                             :ARG2 c2-0))))

# ::snt : CONFIRMED: PepsiCo is making a Doritos-flavored Mountain Dew called "Dewitos"
# ::tokens [":", "CONFIRMED", ":", "PepsiCo", "is", "making", "a", "Doritos", "-", "flavored", "Mountain", "Dew", "called", "\"", "Dewitos", "\""]
# ::lemmas [":", "confirmed", ":", "PepsiCo", "be", "make", "a", "Doritos", "-", "flavor", "Mountain", "Dew", "call", "\"", "dewito", "\""]
(c3-3 / confirm-01
      :ARG1 (c3-1 / make-01
                  :ARG0 (c3-2 / company
                              :name (c3-7 / name
                                          :op1 "PepsiCo"))
                  :ARG1 (c3-0 / product
                              :name (c3-6 / name
                                          :op1 "Mountain"
                                          :op2 "Dew")
                              :ARG1-of (c3-9 / flavor-01
                                             :ARG2 (c3-8 / product
                                                         :name (c3-4 / name
                                                                     :op1 "Dewitos")))
                              :ARG1-of (c3-5 / call-01
                                             :ARG2 c3-0))))

# ::snt . So glad modern science is benefiting those who deserve luxuries the most- snack-munching teenagers.
# ::tokens [".", "So", "glad", "modern", "science", "is", "benefiting", "those", "who", "deserve", "luxuries", "the", "most-", "snack", "-", "munching", "teenagers", "."]
# ::lemmas [".", "so", "glad", "modern", "science", "be", "benefit", "those", "who", "deserve", "luxury", "the", "most-", "snack", "-", "munch", "teenager", "."]
(c4-14 / glad-02
       :ARG0 (c4-1 / benefit-01
                   :ARG0 (c4-0 / science
                               :ARG1-of (c4-8 / modern-02))
                   :ARG1 (c4-3 / person
                               :mod (c4-6 / that)
                               :ARG0-of (c4-13 / deserve-01
                                               :ARG1 (c4-5 / luxury)
                                               :ARG2 (c4-7 / teenager
                                                           :ARG0-of (c4-2 / munch-01
                                                                          :ARG1 (c4-4 / snack))
                                                           :ARG1-of (c4-11 / have-degree-91
                                                                           :ARG2 (c4-12 / young)
                                                                           :ARG3 (c4-10 / most))))))
       :degree (c4-9 / so))

# ::snt that sounds grim
# ::tokens ["that", "sounds", "grim"]
# ::lemmas ["that", "sound", "grim"]
(c5-0 / sound-01
      :ARG1 (c5-1 / that)
      :ARG2 (c5-2 / grim))

# ::snt I thought so too, and I totally want to try it!
# ::tokens ["I", "thought", "so", "too", ",", "and", "I", "totally", "want", "to", "try", "it", "!"]
# ::lemmas ["i", "think", "so", "too", ",", "and", "i", "totally", "want", "to", "try", "it", "!"]
(c6-8 / and
      :op1 (c6-4 / think-01
                 :ARG0 (c6-2 / i)
                 :ARG1 (c6-0 / so)
                 :mod (c6-5 / too))
      :op2 (c6-1 / want-01
                 :ARG0 c6-2
                 :ARG1 (c6-3 / try-01
                             :ARG0 c6-2
                             :ARG1 (c6-7 / it))
                 :degree (c6-6 / total)))

# ::snt That sounds disgusting. : PepsiCo is making a Doritos-flavored Mountain Dew
# ::tokens ["That", "sounds", "disgusting", ".", ":", "PepsiCo", "is", "making", "a", "Doritos", "-", "flavored", "Mountain", "Dew"]
# ::lemmas ["that", "sound", "disgusting", ".", ":", "PepsiCo", "be", "make", "a", "Doritos", "-", "flavor", "Mountain", "Dew"]
(c7-4 / multi-sentence
      :snt1 (c7-0 / sound-01
                  :ARG1 (c7-3 / that)
                  :ARG2 (c7-9 / disgust-01))
      :snt2 (c7-1 / make-01
                  :ARG0 (c7-5 / company
                              :name (c7-8 / name
                                          :op1 "PepsiCo"))
                  :ARG1 (c7-2 / product
                              :name (c7-7 / name
                                          :op1 "Mountain"
                                          :op2 "Dew")
                              :ARG1-of (c7-10 / flavor-01
                                              :name (c7-6 / name
                                                          :op1 "Doritos")
                                              :ARG2 c7-2))))

# ::snt idiocracy food
# ::tokens ["idiocracy", "food"]
# ::lemmas ["idiocracy", "food"]
(c8-1 / food
      :mod (c8-0 / democracy))

# ::snt THERE IS NO GOD!
# ::tokens ["THERE", "IS", "NO", "GOD", "!"]
# ::lemmas ["there", "be", "no", "GOD", "!"]
(c9-1 / god
      :location (c9-0 / there)
      :polarity -
      :mode expressive)

# ::snt check it
# ::tokens ["check", "it"]
# ::lemmas ["check", "it"]
(c10-2 / check-01
       :ARG0 (c10-0 / you)
       :ARG1 (c10-1 / it)
       :mode imperative)

# ::snt MT : PepsiCo making Doritos-flavored Mountain Dew called "Dewitos" &gt;&gt;No. Just no.
# ::tokens ["MT", ":", "PepsiCo", "making", "Doritos", "-", "flavored", "Mountain", "Dew", "called", "\"", "Dewitos", "\"", "&", "gt;&gt;No", ".", "Just", "no", "."]
# ::lemmas ["MT", ":", "PepsiCo", "make", "Doritos", "-", "flavor", "Mountain", "Dew", "call", "\"", "Dewitos", "\"", "&", "gt;&gt;No", ".", "just", "no", "."]
(c11-2 / multi-sentence
       :snt1 (c11-4 / company
                    :name (c11-8 / name
                                 :op1 "PepsiCo")
                    :ARG0-of (c11-9 / make-01
                                    :ARG1 (c11-0 / product
                                                 :name (c11-7 / name
                                                              :op1 "Mountain"
                                                              :op2 "Dew")
                                                 :ARG1-of (c11-11 / favor-01
                                                                  :ARG2 (c11-10 / product
                                                                                :name (c11-5 / name
                                                                                             :op1 "Doritos")))
                                                 :ARG1-of (c11-3 / call-01
                                                                 :ARG2 c11-0))))
       :snt2 (c11-1 / no
                    :mod (c11-6 / just)))

# ::snt Gross RT : PepsiCo is making a Doritos-flavored Mountain Dew called "Dewitos"
# ::tokens ["Gross", "RT", ":", "PepsiCo", "is", "making", "a", "Doritos", "-", "flavored", "Mountain", "Dew", "called", "\"", "Dewitos", "\""]
# ::lemmas ["gross", "rt", ":", "PepsiCo", "be", "make", "a", "Doritos", "-", "flavor", "Mountain", "Dew", "call", "\"", "dewito", "\""]
(c12-7 / and
       :op1 (c12-0 / publication
                   :name (c12-4 / name
                                :op1 "Gross"
                                :op2 "RT"))
       :op2 (c12-1 / make-01
                   :ARG0 (c12-3 / company
                                :name (c12-6 / name
                                             :op1 "PepsiCo"))
                   :ARG1 (c12-10 / product
                                 :name (c12-5 / name
                                              :op1 "Mountain"
                                              :op2 "Dew")
                                 :ARG1-of (c12-9 / favor-01
                                                 :ARG2 c12-3
                                                 :name (c12-8 / name
                                                              :op1 "Dewitos")))
                   :ARG1-of (c12-2 / call-01
                                   :ARG2 c12-10)))

# ::snt I just threw up in my mouth a little.
# ::tokens ["I", "just", "threw", "up", "in", "my", "mouth", "a", "little", "."]
# ::lemmas ["i", "just", "throw", "up", "in", "my", "mouth", "a", "little", "."]
(c13-2 / throw-up-07
       :ARG0 (c13-0 / i
                    :part (c13-3 / mouth
                                 :location-of c13-2))
       :degree (c13-1 / little)
       :mod (c13-4 / just))

# ::snt PepsiCo making Doritos-flav MtnDewewitos
# ::tokens ["PepsiCo", "making", "Doritos", "-", "flav", "MtnDewewitos"]
# ::lemmas ["PepsiCo", "make", "Doritos", "-", "flav", "MtnDewewitos"]
(c14-1 / make-01
       :ARG0 (c14-2 / company
                    :name (c14-5 / name
                                 :op1 "PepsiCo"))
       :ARG1 (c14-0 / product
                    :name (c14-4 / name
                                 :op1 "Doritos-flav"))
       :location (c14-6 / mountain
                        :name (c14-3 / name
                                     :op1 "Mt"
                                     :op2 "Dewewitos")))

# ::snt Puketastic. : CONFIRMED: Pepsi is making a Doritos-flavored Mountain Dew
# ::tokens ["Puketastic", ".", ":", "CONFIRMED", ":", "Pepsi", "is", "making", "a", "Doritos", "-", "flavored", "Mountain", "Dew"]
# ::lemmas ["Puketastic", ".", ":", "confirmed", ":", "Pepsi", "be", "make", "a", "Doritos", "-", "flavor", "Mountain", "Dew"]
(c15-2 / multi-sentence
       :snt1 (c15-0 / publication
                    :name (c15-7 / name
                                 :op1 "Puketastic"))
       :snt2 (c15-4 / confirm-01
                    :ARG1 (c15-8 / make-01
                                 :ARG0 (c15-3 / company
                                              :name (c15-6 / name
                                                           :op1 "Pepsi"))
                                 :ARG1 (c15-10 / product
                                               :name (c15-5 / name
                                                            :op1 "Mountain"
                                                            :op2 "Dew")
                                               :ARG1-of (c15-9 / favor-01
                                                               :ARG2 c15-3
                                                               :name (c15-1 / name
                                                                            :op1 "Doritos"))))))

# ::snt I dont drink Pepsi...I'm a fan!
# ::tokens ["I", "do", "nt", "drink", "Pepsi", "...", "I'm", "a", "fan", "!"]
# ::lemmas ["i", "do", "not", "drink", "Pepsi", "...", "i'm", "a", "fan", "!"]
(c16-3 / and
       :op1 (c16-4 / drink-01
                   :ARG0 (c16-0 / i)
                   :ARG1 (c16-2 / company
                                :name (c16-1 / name
                                             :op1 "Pepsi"))
                   :polarity -)
       :op2 (c16-5 / fan
                   :domain c16-0))

# ::snt this made me throw up in my mouth... And then PepsiCo sued me for stealing and self-distributing the taste of Dewitos.
# ::tokens ["this", "made", "me", "throw", "up", "in", "my", "mouth", "...", "And", "then", "PepsiCo", "sued", "me", "for", "stealing", "and", "self", "-", "distributing", "the", "taste", "of", "Dewitos", "."]
# ::lemmas ["this", "make", "i", "throw", "up", "in", "my", "mouth", "...", "and", "then", "PepsiCo", "sue", "i", "for", "stealing", "and", "self", "-", "distribute", "the", "taste", "of", "Dewitos", "."]
(c17-8 / multi-sentence
       :snt1 (c17-17 / make-02
                     :ARG0 (c17-6 / this)
                     :ARG1 (c17-7 / throw-up-06
                                  :ARG0 (c17-2 / i
                                               :part (c17-10 / mouth
                                                             :location-of c17-7))))
       :snt2 (c17-16 / and
                     :op2 (c17-1 / sue-02
                                 :ARG0 (c17-11 / company
                                               :name (c17-12 / name
                                                             :op1 "PepsiCo"))
                                 :ARG1 c17-2
                                 :ARG2 (c17-9 / and
                                              :op1 (c17-3 / steal-01
                                                          :ARG0 c17-2
                                                          :ARG1 (c17-5 / thing
                                                                       :ARG2-of (c17-13 / taste-01
                                                                                        :ARG1 (c17-4 / product
                                                                                                     :name (c17-14 / name
                                                                                                                   :op1 "Dewitos")))))
                                              :op2 (c17-0 / distribute-01
                                                          :ARG0 c17-2
                                                          :ARG1 c17-5))
                                 :time (c17-15 / then))))
