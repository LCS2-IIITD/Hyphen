# ::snt Amen get rid of the animal
# ::tokens ["Amen", "get", "rid", "of", "the", "animal"]
# ::lemmas ["amen", "get", "rid", "of", "the", "animal"]
(c1-0 / rid-01
      :ARG0 (c1-2 / man)
      :ARG1 (c1-1 / animal))

# ::snt Media should only show this"ANIMAL" from the shoulders down while he's falling from that story bldg! Go To Allah!
# ::tokens ["Media", "should", "only", "show", "this\"ANIMAL", "\"", "from", "the", "shoulders", "down", "while", "he", "'s", "falling", "from", "that", "story", "bldg", "!", "Go", "To", "Allah", "!"]
# ::lemmas ["medium", "should", "only", "show", "this\"animal", "\"", "from", "the", "shoulder", "down", "while", "he", "be", "fall", "from", "that", "story", "bldg", "!", "go", "to", "Allah", "!"]
(c2-8 / multi-sentence
      :snt1 (c2-13 / recommend-01
                   :ARG1 (c2-1 / show-01
                               :ARG0 (c2-14 / media)
                               :ARG1 (c2-2 / image
                                           :mod (c2-5 / this))
                               :mod (c2-6 / only)
                               :time (c2-15 / fall-01
                                            :ARG1 (c2-11 / he)
                                            :ARG3 (c2-3 / story
                                                        :mod (c2-7 / that)))
                               :manner (c2-0 / down
                                             :op1 (c2-9 / shoulder))))
      :snt2 (c2-12 / go-02
                   :ARG0 (c2-4 / person
                               :name (c2-10 / name
                                            :op1 "Allah"))
                   :mode imperative))

# ::snt He wants a Muslim lawyer? Under Muslim law the killer is to be killed the same way he killed his victim. He asked..
# ::tokens ["He", "wants", "a", "Muslim", "lawyer", "?", "Under", "Muslim", "law", "the", "killer", "is", "to", "be", "killed", "the", "same", "way", "he", "killed", "his", "victim", ".", "He", "asked", ".."]
# ::lemmas ["he", "want", "a", "Muslim", "lawyer", "?", "under", "Muslim", "law", "the", "killer", "be", "to", "be", "kill", "the", "same", "way", "he", "kill", "his", "victim", ".", "he", "ask", ".."]
(c3-8 / multi-sentence
      :snt1 (c3-13 / want-01
                   :polarity (c3-6 / amr-unknown)
                   :ARG0 (c3-12 / he)
                   :ARG1 (c3-4 / lawyer
                               :mod (c3-5 / religious-group
                                          :name (c3-10 / name
                                                       :op1 "Muslim"))))
      :snt2 (c3-14 / kill-01
                   :ARG1 (c3-3 / person
                               :ARG0-of (c3-1 / kill-01))
                   :ARG1-of (c3-0 / same-01
                                  :ARG2 (c3-7 / kill-01
                                              :ARG0 c3-3
                                              :ARG1 (c3-16 / person
                                                           :ARG1-of (c3-15 / victimize-01
                                                                           :ARG0 c3-3))))
                   :prep-under (c3-11 / law
                                      :mod c3-5))
      :snt3 (c3-9 / ask-01
                  :ARG0 (c3-2 / he)))

# ::snt anything less will be an act of terror!
# ::tokens ["anything", "less", "will", "be", "an", "act", "of", "terror", "!"]
# ::lemmas ["anything", "less", "will", "be", "an", "act", "of", "terror", "!"]
(c4-0 / act-02
      :ARG1 (c4-1 / terror-02)
      :domain (c4-2 / anything
                    :mod (c4-3 / less)))

# ::snt The sooner the better. He should not be breathing.
# ::tokens ["The", "sooner", "the", "better", ".", "He", "should", "not", "be", "breathing", "."]
# ::lemmas ["the", "soon", "the", "well", ".", "he", "should", "not", "be", "breathe", "."]
(c5-4 / multi-sentence
      :snt1 (c5-5 / correlate-91
                  :ARG1 (c5-9 / more
                              :ARG3-of (c5-7 / have-degree-91
                                             :ARG2 (c5-0 / soon)
                                             :ARG3 (c5-6 / more)))
                  :ARG2 (c5-3 / more
                              :ARG3-of c5-7
                              :ARG2 (c5-10 / good-02)))
      :snt2 (c5-8 / recommend-01
                  :ARG1 (c5-1 / breathe-01
                              :ARG0 (c5-2 / he)
                              :polarity -)))

# ::snt : D.A. to seek death in , beheading case. a guillotine
# ::tokens [":", "D.A.", "to", "seek", "death", "in", ",", "beheading", "case", ".", "a", "guillotine"]
# ::lemmas [":", "D.A.", "to", "seek", "death", "in", ",", "behead", "case", ".", "a", "guillotine"]
(c6-4 / multi-sentence
      :snt1 (c6-0 / seek-01
                  :ARG0 (c6-3 / person
                              :ARG0-of (c6-6 / have-org-role-91
                                             :ARG2 (c6-7 / attorney
                                                         :mod (c6-8 / district))))
                  :ARG1 (c6-1 / die-01
                              :ARG1 c6-3)
                  :condition (c6-5 / case-03
                                   :ARG1 (c6-2 / behead-01
                                               :ARG1 c6-3)))
      :snt2 (c6-9 / guillotine))

# ::snt : D.A. to seek death in , beheading case.
# ::tokens [":", "D.A.", "to", "seek", "death", "in", ",", "beheading", "case", "."]
# ::lemmas [":", "D.A.", "to", "seek", "death", "in", ",", "behead", "case", "."]
(c7-3 / obligate-01
      :ARG1 (c7-2 / person
                  :ARG0-of (c7-5 / have-org-role-91
                                 :ARG2 (c7-6 / attorney)))
      :ARG2 (c7-0 / seek-01
                  :ARG0 c7-2
                  :ARG1 (c7-7 / die-01
                              :ARG1 c7-2)
                  :ARG2 (c7-4 / case-03
                              :ARG1 (c7-1 / behead-01
                                          :ARG1 c7-2))))

# ::snt should be a beheading for a beheading in my opinion.
# ::tokens ["should", "be", "a", "beheading", "for", "a", "beheading", "in", "my", "opinion", "."]
# ::lemmas ["should", "be", "a", "beheading", "for", "a", "beheading", "in", "my", "opinion", "."]
(c8-5 / recommend-01
      :ARG1 (c8-1 / behead-01
                  :ARG1-of (c8-0 / instead-of-91
                                 :ARG2 (c8-3 / behead-01)))
      :ARG1-of (c8-2 / opine-01
                     :ARG0 (c8-4 / i)))

# ::snt he's lucky to get any attorney.
# ::tokens ["he", "'s", "lucky", "to", "get", "any", "attorney", "."]
# ::lemmas ["he", "be", "lucky", "to", "get", "any", "attorney", "."]
(c9-0 / lucky
      :domain (c9-3 / he)
      :ARG1-of (c9-2 / cause-01
                     :ARG0 (c9-5 / get-01
                                 :ARG0 c9-3
                                 :ARG1 (c9-4 / attorney
                                             :mod (c9-1 / any)))))

# ::snt Thank goodness. The people of Oklahoma don't need to support him for the rest of his miserable life.
# ::tokens ["Thank", "goodness", ".", "The", "people", "of", "Oklahoma", "do", "n't", "need", "to", "support", "him", "for", "the", "rest", "of", "his", "miserable", "life", "."]
# ::lemmas ["thank", "goodness", ".", "the", "people", "of", "Oklahoma", "do", "not", "need", "to", "support", "he", "for", "the", "rest", "of", "his", "miserable", "life", "."]
(c10-6 / multi-sentence
       :snt1 (c10-4 / thank-01
                    :ARG1 (c10-11 / goodness))
       :snt2 (c10-9 / need-01
                    :ARG0 (c10-2 / person
                                 :mod (c10-0 / state
                                             :name (c10-8 / name
                                                          :op1 "Oklahoma")))
                    :ARG1 (c10-1 / support-01
                                 :ARG0 c10-2
                                 :ARG1 (c10-7 / he)
                                 :duration (c10-5 / rest
                                                  :part-of (c10-3 / life
                                                                  :mod (c10-10 / miserable)
                                                                  :poss c10-7)))
                    :polarity -))

# ::snt they need to charge the mosque where he studied this terrorism as accomplices
# ::tokens ["they", "need", "to", "charge", "the", "mosque", "where", "he", "studied", "this", "terrorism", "as", "accomplices"]
# ::lemmas ["they", "need", "to", "charge", "the", "mosque", "where", "he", "study", "this", "terrorism", "as", "accomplice"]
(c11-2 / obligate-01
       :ARG1 (c11-3 / they)
       :ARG2 (c11-6 / charge-05
                    :ARG1 c11-3
                    :ARG2 (c11-5 / mosque
                                 :location-of (c11-0 / study-01
                                                     :ARG0 (c11-7 / he)
                                                     :ARG1 (c11-4 / terrorism
                                                                  :mod (c11-1 / this))
                                                     :prep-as (c11-8 / accomplice)))))

# ::snt : D.A. to seek death in , beheading case. good riddance!
# ::tokens [":", "D.A.", "to", "seek", "death", "in", ",", "beheading", "case", ".", "good", "riddance", "!"]
# ::lemmas [":", "D.A.", "to", "seek", "death", "in", ",", "behead", "case", ".", "good", "riddance", "!"]
(c12-4 / multi-sentence
       :snt1 (c12-0 / seek-01
                    :ARG0 (c12-2 / person
                                 :ARG0-of (c12-6 / have-rel-role-91
                                                 :ARG2 (c12-7 / attorney)))
                    :ARG1 (c12-8 / die-01
                                 :ARG1 c12-2)
                    :ARG2 (c12-5 / case-03
                                 :ARG1 (c12-1 / behead-01
                                              :ARG1 c12-2)))
       :snt2 (c12-3 / riddance
                    :ARG1-of (c12-9 / good-02)))

# ::snt Nolen deserves the death penalty. He should be laid on the chopping block and beheaded.
# ::tokens ["Nolen", "deserves", "the", "death", "penalty", ".", "He", "should", "be", "laid", "on", "the", "chopping", "block", "and", "beheaded", "."]
# ::lemmas ["Nolen", "deserve", "the", "death", "penalty", ".", "he", "should", "be", "lay", "on", "the", "chop", "block", "and", "behead", "."]
(c13-6 / multi-sentence
       :snt1 (c13-11 / deserve-01
                     :ARG0 (c13-2 / person
                                  :name (c13-10 / name
                                                :op1 "Nolen"))
                     :ARG1 (c13-12 / penalize-01
                                   :manner (c13-0 / die-01)))
       :snt2 (c13-4 / recommend-01
                    :ARG1 (c13-5 / and
                                 :op1 (c13-3 / lay-01
                                             :ARG1 (c13-9 / he)
                                             :ARG2 (c13-1 / block
                                                          :mod (c13-7 / chop-01)))
                                 :op2 (c13-8 / behead-01
                                             :ARG1 c13-9))))

# ::snt Good
# ::tokens ["Good"]
# ::lemmas ["good"]
(c14-0 / good-02)

# ::snt couldn't happen to a nicer muslim terrorist
# ::tokens ["could", "n't", "happen", "to", "a", "nicer", "muslim", "terrorist"]
# ::lemmas ["could", "not", "happen", "to", "a", "nice", "muslim", "terrorist"]
(c15-0 / possible-01
       :ARG1 (c15-5 / event
                    :mod (c15-1 / terrorist
                                :mod (c15-4 / religious-group
                                            :name (c15-2 / name
                                                         :op1 "Muslim"))
                                :ARG1-of (c15-3 / nice-01)))
       :polarity -)

# ::snt he deserves the death penalty for what he did
# ::tokens ["he", "deserves", "the", "death", "penalty", "for", "what", "he", "did"]
# ::lemmas ["he", "deserve", "the", "death", "penalty", "for", "what", "he", "do"]
(c16-5 / deserve-01
       :ARG0 (c16-4 / he)
       :ARG1 (c16-2 / penalize-01
                    :ARG1 c16-4
                    :manner (c16-0 / die-01))
       :ARG2 (c16-3 / thing
                    :ARG1-of (c16-1 / do-02
                                    :ARG0 c16-4)))

# ::snt He should get the death penalty. Here's to an expeditious process
# ::tokens ["He", "should", "get", "the", "death", "penalty", ".", "Here", "'s", "to", "an", "expeditious", "process"]
# ::lemmas ["he", "should", "get", "the", "death", "penalty", ".", "here", "be", "to", "an", "expeditious", "process"]
(c17-3 / multi-sentence
       :snt1 (c17-5 / recommend-01
                    :ARG1 (c17-2 / penalize-01
                                 :ARG1 (c17-4 / he)
                                 :manner (c17-6 / die-01)))
       :snt2 (c17-0 / be-located-at-91
                    :ARG1 (c17-8 / process-02
                                 :ARG1-of (c17-7 / expedite-01))
                    :ARG2 (c17-1 / here)))

# ::snt : D.A. to seek death in , beheading case.
# ::tokens [":", "D.A.", "to", "seek", "death", "in", ",", "beheading", "case", "."]
# ::lemmas [":", "D.A.", "to", "seek", "death", "in", ",", "behead", "case", "."]
(c18-3 / obligate-01
       :ARG1 (c18-2 / person
                    :ARG0-of (c18-5 / have-org-role-91
                                    :ARG2 (c18-6 / attorney)))
       :ARG2 (c18-0 / seek-01
                    :ARG0 c18-2
                    :ARG1 (c18-7 / die-01
                                 :ARG1 c18-2)
                    :ARG2 (c18-4 / case-03
                                 :ARG1 (c18-1 / behead-01
                                              :ARG1 c18-2))))

# ::snt : D.A. to seek death in case. choices should be given. regular or extra crispy
# ::tokens [":", "D.A.", "to", "seek", "death", "in", "case", ".", "choices", "should", "be", "given", ".", "regular", "or", "extra", "crispy"]
# ::lemmas [":", "D.A.", "to", "seek", "death", "in", "case", ".", "choice", "should", "be", "give", ".", "regular", "or", "extra", "crispy"]
(c19-5 / multi-sentence
       :snt1 (c19-3 / obligate-01
                    :ARG1 (c19-1 / person
                                 :ARG0-of (c19-9 / have-org-role-91
                                                 :ARG2 (c19-10 / attorney)))
                    :ARG2 (c19-0 / seek-01
                                 :ARG0 c19-1
                                 :ARG1 (c19-11 / die-01
                                               :ARG1 c19-1)
                                 :condition (c19-7 / case-04)))
       :snt2 (c19-4 / recommend-01
                    :ARG1 (c19-14 / give-01
                                  :ARG1 (c19-6 / choose-01)))
       :snt3 (c19-12 / or
                     :op1 (c19-2 / regular-03)
                     :op2 (c19-8 / crispy
                                 :degree (c19-13 / extra))))

# ::snt I would attend!!!!
# ::tokens ["I", "would", "attend", "!", "!", "!", "!"]
# ::lemmas ["i", "would", "attend", "!", "!", "!", "!"]
(c20-0 / attend-01
       :ARG0 (c20-1 / i))

# ::snt needs to be a public hanging!
# ::tokens ["needs", "to", "be", "a", "public", "hanging", "!"]
# ::lemmas ["need", "to", "be", "a", "public", "hanging", "!"]
(c21-0 / obligate-01
       :ARG2 (c21-1 / hanging-07
                    :ARG1-of (c21-2 / public-02)))

# ::snt no, they should behead him too
# ::tokens ["no", ",", "they", "should", "behead", "him", "too"]
# ::lemmas ["no", ",", "they", "should", "behead", "he", "too"]
(c22-5 / recommend-01
       :ARG1 (c22-0 / behead-01
                    :ARG0 (c22-1 / they)
                    :ARG1 (c22-4 / he)
                    :mod (c22-2 / too))
       :mod (c22-3 / no
                   :mode expressive))

# ::snt : D.A. to seek death in , beheading case. Umm, why would U not?
# ::tokens [":", "D.A.", "to", "seek", "death", "in", ",", "beheading", "case", ".", "Umm", ",", "why", "would", "U", "not", "?"]
# ::lemmas [":", "D.A.", "to", "seek", "death", "in", ",", "behead", "case", ".", "Umm", ",", "why", "would", "u", "not", "?"]
(c23-3 / multi-sentence
       :snt1 (c23-0 / seek-01
                    :ARG0 (c23-11 / government-organization
                                  :name (c23-9 / name
                                               :op1 "D.A."))
                    :ARG1 (c23-10 / die-01
                                  :ARG1 c23-11)
                    :ARG2 (c23-5 / case-03
                                 :ARG1 (c23-1 / behead-01
                                              :ARG1 c23-11)))
       :snt2 (c23-2 / amr-unknown
                    :ARG0-of (c23-4 / cause-01
                                    :ARG1 (c23-7 / have-polarity-91
                                                 :ARG1 (c23-8 / you)
                                                 :ARG2 -))
                    :mod (c23-6 / umm
                                :mode expressive)))

# ::snt And I wanna do it in front of Al Sharpton and Jesse.
# ::tokens ["And", "I", "wanna", "do", "it", "in", "front", "of", "Al", "Sharpton", "and", "Jesse", "."]
# ::lemmas ["and", "i", "wanna", "do", "it", "in", "front", "of", "Al", "Sharpton", "and", "Jesse", "."]
(c24-7 / want-01
       :ARG0 (c24-0 / i)
       :ARG1 (c24-8 / do-02
                    :ARG0 c24-0
                    :ARG1 (c24-5 / it)
                    :location (c24-2 / in-front-of
                                     :op1 (c24-3 / and
                                                 :op1 (c24-1 / person
                                                             :name (c24-4 / name
                                                                          :op1 "Al"
                                                                          :op2 "Sharpton"))
                                                 :op2 (c24-9 / person
                                                             :name (c24-6 / name
                                                                          :op1 "Jesse"))))))

# ::snt How many beheadings does it take for it to be Terrorism?
# ::tokens ["How", "many", "beheadings", "does", "it", "take", "for", "it", "to", "be", "Terrorism", "?"]
# ::lemmas ["how", "many", "beheading", "do", "it", "take", "for", "it", "to", "be", "Terrorism", "?"]
(c25-1 / take-10
       :ARG0 (c25-3 / terrorism)
       :ARG1 (c25-2 / behead-01
                    :quant (c25-0 / amr-unknown)))

# ::snt We should waterboard this guy to find out alot of info
# ::tokens ["We", "should", "waterboard", "this", "guy", "to", "find", "out", "alot", "of", "info"]
# ::lemmas ["we", "should", "waterboard", "this", "guy", "to", "find", "out", "alot", "of", "info"]
(c26-5 / recommend-01
       :ARG1 (c26-0 / waterboard-00
                    :ARG0 (c26-4 / we)
                    :ARG1 (c26-7 / guy
                                 :mod (c26-3 / this))
                    :purpose (c26-6 / find-out-03
                                    :ARG0 c26-7
                                    :ARG1 (c26-1 / information
                                                 :quant (c26-2 / lot)))))

# ::snt Let's reinstate torture for this pig. Let's turn this pig into soup. No hits above the head ....we want him to feel it.
# ::tokens ["Let", "'s", "reinstate", "torture", "for", "this", "pig", ".", "Let", "'s", "turn", "this", "pig", "into", "soup", ".", "No", "hits", "above", "the", "head", "....", "we", "want", "him", "to", "feel", "it", "."]
# ::lemmas ["let", "us", "reinstate", "torture", "for", "this", "pig", ".", "let", "us", "turn", "this", "pig", "into", "soup", ".", "no", "hit", "above", "the", "head", "....", "we", "want", "he", "to", "feel", "it", "."]
(c27-8 / multi-sentence
       :snt1 (c27-14 / reinstate-01
                     :ARG0 (c27-1 / we)
                     :ARG1 (c27-5 / torture-01
                                  :ARG1 (c27-3 / pig
                                               :mod (c27-6 / this)))
                     :mode imperative)
       :snt2 (c27-4 / turn-02
                    :ARG0 (c27-9 / we)
                    :ARG1 (c27-16 / pig
                                  :mod (c27-11 / this))
                    :ARG2 (c27-0 / soup)
                    :mode imperative)
       :snt3 (c27-12 / hit-01
                     :location (c27-7 / above
                                      :op1 (c27-2 / head))
                     :polarity -)
       :snt4 (c27-10 / want-01
                     :ARG0 (c27-13 / we)
                     :ARG1 (c27-15 / feel-01
                                   :ARG0 (c27-17 / he)
                                   :ARG1 c27-12)))

# ::snt Muslims Who Kill In The Name Of Their Death Cult, Always Admit To Their Despicable Deeds.-They're Not Democrats After All!
# ::tokens ["Muslims", "Who", "Kill", "In", "The", "Name", "Of", "Their", "Death", "Cult", ",", "Always", "Admit", "To", "Their", "Despicable", "Deeds.-They're", "Not", "Democrats", "After", "All", "!"]
# ::lemmas ["Muslims", "who", "kill", "in", "the", "name", "of", "their", "death", "Cult", ",", "always", "admit", "to", "their", "despicable", "deeds.-they're", "not", "Democrats", "after", "all", "!"]
(c28-8 / multi-sentence
       :snt1 (c28-14 / admit-01
                     :ARG0 (c28-3 / person
                                  :mod (c28-5 / religious-group
                                              :name (c28-10 / name
                                                            :op1 "Muslim"))
                                  :ARG0-of (c28-15 / kill-01
                                                   :prep-in-name-of (c28-11 / cult
                                                                            :mod (c28-0 / die-01)
                                                                            :poss c28-3)))
                     :ARG1 (c28-1 / Deeds
                                  :poss c28-3
                                  :ARG1-of (c28-4 / ridiculous-02))
                     :time (c28-9 / always))
       :snt2 (c28-12 / have-mod-91
                     :ARG1 (c28-6 / they)
                     :ARG2 (c28-17 / person
                                   :ARG0-of (c28-2 / have-org-role-91
                                                   :ARG1 (c28-16 / political-party
                                                                 :name (c28-13 / name
                                                                               :op1 "Democrat"))))
                     :mod (c28-7 / after-all)
                     :polarity -))

# ::snt someone should shank him.
# ::tokens ["someone", "should", "shank", "him", "."]
# ::lemmas ["someone", "should", "shank", "he", "."]
(c29-0 / recommend-01
       :ARG1 (c29-1 / shank-01
                    :ARG0 (c29-3 / someone)
                    :ARG1 (c29-2 / he))
       :ARG2 c29-3)

# ::snt back in the Dark Ages of the Bush Admin, we used to monitor Mosques in America
# ::tokens ["back", "in", "the", "Dark", "Ages", "of", "the", "Bush", "Admin", ",", "we", "used", "to", "monitor", "Mosques", "in", "America"]
# ::lemmas ["back", "in", "the", "Dark", "Ages", "of", "the", "Bush", "Admin", ",", "we", "use", "to", "monitor", "Mosques", "in", "America"]
(c30-4 / monitor-01
       :ARG0 (c30-10 / we)
       :ARG1 (c30-11 / mosque
                     :location (c30-7 / country
                                      :name (c30-6 / name
                                                   :op1 "America")))
       :time (c30-8 / use-03)
       :time (c30-1 / before
                    :op1 (c30-3 / age
                                :mod (c30-0 / dark)
                                :time-of (c30-12 / government-organization
                                                 :ARG0-of (c30-5 / administrate-01)
                                                 :mod (c30-2 / person
                                                             :name (c30-9 / name
                                                                          :op1 "Bush"))))))

# ::snt can we get the death penalty every time our DRONES kill innocent people.theres NO difference, murder is murder
# ::tokens ["can", "we", "get", "the", "death", "penalty", "every", "time", "our", "DRONES", "kill", "innocent", "people.theres", "NO", "difference", ",", "murder", "is", "murder"]
# ::lemmas ["can", "we", "get", "the", "death", "penalty", "every", "time", "our", "drones", "kill", "innocent", "people.there", "no", "difference", ",", "murder", "be", "murder"]
(c31-7 / multi-sentence
       :snt1 (c31-5 / possible-01
                    :ARG1 (c31-11 / penalize-01
                                  :ARG1 (c31-8 / we)
                                  :manner (c31-9 / die-01)
                                  :frequency (c31-6 / rate-entity-91
                                                    :ARG4 (c31-1 / kill-01
                                                                 :ARG0 (c31-0 / doctor
                                                                              :poss c31-8)
                                                                 :ARG1 (c31-10 / person
                                                                               :ARG1-of (c31-3 / innocent-01))))))
       :snt2 (c31-2 / differ-02
                    :ARG1 (c31-4 / murder-01)
                    :polarity -))

# ::snt DOJ to investigate Oklahoma for racial profiling
# ::tokens ["DOJ", "to", "investigate", "Oklahoma", "for", "racial", "profiling"]
# ::lemmas ["DOJ", "to", "investigate", "Oklahoma", "for", "racial", "profiling"]
(c32-1 / investigate-01
       :ARG0 (c32-6 / government-organization
                    :name (c32-5 / name
                                 :op1 "DOJ"))
       :ARG1 (c32-0 / state
                    :name (c32-4 / name
                                 :op1 "Oklahoma"))
       :ARG2 (c32-2 / profile-01
                    :mod (c32-3 / race)))

# ::snt seems fair
# ::tokens ["seems", "fair"]
# ::lemmas ["seem", "fair"]
(c33-0 / seem-01
       :ARG1 (c33-1 / fair-01))

# ::snt doesn't seem fair for him to get a humane death, she didn't get one
# ::tokens ["does", "n't", "seem", "fair", "for", "him", "to", "get", "a", "humane", "death", ",", "she", "did", "n't", "get", "one"]
# ::lemmas ["do", "not", "seem", "fair", "for", "he", "to", "get", "a", "humane", "death", ",", "she", "do", "not", "get", "one"]
(c34-6 / and
       :op1 (c34-0 / seem-01
                   :ARG1 (c34-8 / fair-01
                                :ARG1 (c34-9 / get-01
                                             :ARG0 (c34-5 / he)
                                             :ARG1 (c34-7 / die-01
                                                          :mod (c34-2 / humane))))
                   :polarity -)
       :op2 (c34-4 / get-01
                   :ARG0 (c34-3 / she)
                   :ARG1 (c34-1 / die-01
                                :mod c34-2)
                   :polarity -))

# ::snt Terrorist Charges! Beheading is what Terrorists do! Not a simple work place violence! No one deserves that! Shoot him!
# ::tokens ["Terrorist", "Charges", "!", "Beheading", "is", "what", "Terrorists", "do", "!", "Not", "a", "simple", "work", "place", "violence", "!", "No", "one", "deserves", "that", "!", "Shoot", "him", "!"]
# ::lemmas ["Terrorist", "Charges", "!", "beheading", "be", "what", "Terrorists", "do", "!", "not", "a", "simple", "work", "place", "violence", "!", "no", "one", "deserve", "that", "!", "shoot", "he", "!"]
(c35-8 / multi-sentence
       :snt1 (c35-9 / charge-05
                    :ARG1 (c35-6 / terrorist))
       :snt2 (c35-14 / do-02
                     :ARG0 (c35-7 / terrorist)
                     :ARG1 (c35-2 / behead-01))
       :snt3 (c35-15 / violence
                     :location (c35-4 / place
                                      :location-of (c35-13 / work-01))
                     :ARG1-of (c35-0 / simple-02)
                     :polarity -)
       :snt4 (c35-1 / deserve-01
                    :ARG0 (c35-10 / no-one)
                    :ARG1 (c35-5 / that))
       :snt5 (c35-3 / shoot-02
                    :ARG0 (c35-11 / you)
                    :ARG1 (c35-12 / he)
                    :mode imperative))

# ::snt death is not enough
# ::tokens ["death", "is", "not", "enough"]
# ::lemmas ["death", "be", "not", "enough"]
(c36-1 / have-quant-91
       :ARG1 (c36-0 / die-01)
       :ARG3 (c36-2 / enough
                    :polarity -))

# ::snt Good. Although, it's too bad that the punishment won't emulate the crime.
# ::tokens ["Good", ".", "Although", ",", "it", "'s", "too", "bad", "that", "the", "punishment", "wo", "n't", "emulate", "the", "crime", "."]
# ::lemmas ["good", ".", "although", ",", "it", "be", "too", "bad", "that", "the", "punishment", "will", "not", "emulate", "the", "crime", "."]
(c37-4 / multi-sentence
       :snt1 (c37-8 / good-02)
       :snt2 (c37-6 / have-concession-91
                    :ARG2 (c37-0 / bad-07
                                 :ARG1 (c37-7 / emulate-01
                                              :ARG0 (c37-2 / punish-01)
                                              :ARG1 (c37-5 / crime-02)
                                              :polarity -)
                                 :ARG2-of (c37-1 / have-degree-91
                                                 :ARG1 c37-7
                                                 :ARG3 (c37-3 / too)))))

# ::snt probably a good idea!
# ::tokens ["probably", "a", "good", "idea", "!"]
# ::lemmas ["probably", "a", "good", "idea", "!"]
(c38-2 / probable
       :domain (c38-0 / idea
                      :ARG1-of (c38-1 / good-02)))

# ::snt He should be beheaded like his victim!
# ::tokens ["He", "should", "be", "beheaded", "like", "his", "victim", "!"]
# ::lemmas ["he", "should", "be", "behead", "like", "his", "victim", "!"]
(c39-5 / recommend-01
       :ARG1 (c39-0 / behead-01
                    :ARG1 (c39-4 / he)
                    :ARG1-of (c39-2 / resemble-01
                                    :ARG2 (c39-3 / behead-01
                                                 :ARG1 (c39-1 / person
                                                              :ARG1-of (c39-6 / victimize-01
                                                                              :ARG0 c39-4))))))

# ::snt dont give him a muslim attn or juror
# ::tokens ["do", "nt", "give", "him", "a", "muslim", "attn", "or", "juror"]
# ::lemmas ["do", "not", "give", "he", "a", "muslim", "attn", "or", "juror"]
(c40-10 / give-01
        :ARG0 (c40-5 / you)
        :ARG1 (c40-2 / or
                     :op1 (c40-1 / person
                                 :ARG0-of (c40-6 / have-org-role-91
                                                 :ARG3 (c40-8 / attorney
                                                              :mod (c40-3 / religious-group
                                                                          :name (c40-4 / name
                                                                                       :op1 "Muslim")))))
                     :op2 (c40-9 / person
                                 :ARG0-of c40-6
                                 :ARG3 (c40-7 / juror)))
        :ARG2 (c40-0 / he)
        :polarity -
        :mode imperative)

# ::snt , Can OK execute by beheading? Ya know, since the lethal injection cocktail is hard to come by nowadays?
# ::tokens [",", "Can", "OK", "execute", "by", "beheading", "?", "Ya", "know", ",", "since", "the", "lethal", "injection", "cocktail", "is", "hard", "to", "come", "by", "nowadays", "?"]
# ::lemmas [",", "can", "ok", "execute", "by", "behead", "?", "ya", "know", ",", "since", "the", "lethal", "injection", "cocktail", "be", "hard", "to", "come", "by", "nowaday", "?"]
(c41-5 / multi-sentence
       :snt1 (c41-2 / possible-01
                    :ARG1 (c41-15 / execute-01
                                  :manner (c41-0 / behead-01))
                    :polarity (c41-13 / amr-unknown)
                    :ARG1-of (c41-4 / okay-01))
       :snt2 (c41-14 / know-01
                     :ARG0 (c41-11 / you)
                     :ARG1-of (c41-8 / cause-01
                                     :ARG0 (c41-12 / hard-02
                                                   :ARG1 (c41-6 / come-by-17
                                                                :ARG1 (c41-9 / cocktail
                                                                             :mod (c41-1 / inject-01
                                                                                         :manner (c41-3 / lethal)))
                                                                :time (c41-10 / nowadays))
                                                   :polarity (c41-7 / amr-unknown)))))

# ::snt I'm not a huge supporter of the death penalty but if ever a case cried out for execution, this one does.
# ::tokens ["I", "'m", "not", "a", "huge", "supporter", "of", "the", "death", "penalty", "but", "if", "ever", "a", "case", "cried", "out", "for", "execution", ",", "this", "one", "does", "."]
# ::lemmas ["i", "be", "not", "a", "huge", "supporter", "of", "the", "death", "penalty", "but", "if", "ever", "a", "case", "cry", "out", "for", "execution", ",", "this", "one", "do", "."]
(c42-8 / contrast-01
       :ARG1 (c42-0 / support-01
                    :ARG0 (c42-2 / i)
                    :ARG1 (c42-3 / penalize-01
                                 :manner (c42-11 / die-01))
                    :mod (c42-10 / huge)
                    :polarity -)
       :ARG2 (c42-1 / do-02
                    :ARG0 (c42-4 / one
                                 :mod (c42-5 / this))
                    :ARG1 (c42-12 / execute-01)
                    :condition (c42-7 / cry-out-03
                                      :ARG1 (c42-9 / case-03)
                                      :time (c42-6 / ever))))

# ::snt Ya think??? that should have been a given.
# ::tokens ["Ya", "think", "?", "?", "?", "that", "should", "have", "been", "a", "given", "."]
# ::lemmas ["Ya", "think", "?", "?", "?", "that", "should", "have", "be", "a", "give", "."]
(c43-3 / multi-sentence
       :snt1 (c43-0 / think-01
                    :polarity (c43-5 / amr-unknown)
                    :ARG0 (c43-4 / you))
       :snt2 (c43-1 / recommend-01
                    :ARG1 (c43-6 / give-01
                                 :ARG1 (c43-2 / that))))

# ::snt good
# ::tokens ["good"]
# ::lemmas ["good"]
(c44-0 / good-02)

# ::snt No brainer.
# ::tokens ["No", "brainer", "."]
# ::lemmas ["no", "brainer", "."]
(c45-0 / no-brainer)

# ::snt I would think so!
# ::tokens ["I", "would", "think", "so", "!"]
# ::lemmas ["i", "would", "think", "so", "!"]
(c46-0 / think-01
       :ARG0 (c46-1 / i)
       :ARG1 (c46-2 / so)
       :mode expressive)

# ::snt He deserves nothing less than the death penalty!
# ::tokens ["He", "deserves", "nothing", "less", "than", "the", "death", "penalty", "!"]
# ::lemmas ["he", "deserve", "nothing", "less", "than", "the", "death", "penalty", "!"]
(c47-5 / deserve-01
       :ARG0 (c47-3 / he)
       :ARG1 (c47-4 / nothing
                    :mod (c47-2 / less)
                    :ARG4 (c47-1 / penalize-01
                                 :manner (c47-0 / die-01))))

# ::snt he wants his virgins, it's our job to arrange the meeting.
# ::tokens ["he", "wants", "his", "virgins", ",", "it", "'s", "our", "job", "to", "arrange", "the", "meeting", "."]
# ::lemmas ["he", "want", "his", "virgin", ",", "it", "be", "our", "job", "to", "arrange", "the", "meeting", "."]
(c48-1 / multi-sentence
       :snt1 (c48-5 / want-01
                    :ARG0 (c48-3 / he)
                    :ARG1 (c48-7 / virgin
                                 :poss c48-3))
       :snt2 (c48-4 / job
                    :poss (c48-2 / we)
                    :domain (c48-0 / arrange-01
                                   :ARG0 c48-2
                                   :ARG1 (c48-6 / meet-03
                                                :ARG0 c48-2))))

# ::snt preferably in the same manner which he killed that innocent lady.
# ::tokens ["preferably", "in", "the", "same", "manner", "which", "he", "killed", "that", "innocent", "lady", "."]
# ::lemmas ["preferably", "in", "the", "same", "manner", "which", "he", "kill", "that", "innocent", "lady", "."]
(c49-2 / prefer-01
       :ARG1 (c49-7 / kill-01
                    :ARG0 (c49-6 / he)
                    :ARG1 (c49-3 / lady
                                 :ARG1-of (c49-1 / innocent-01)
                                 :mod (c49-4 / that))
                    :manner (c49-5 / manner
                                   :ARG1-of (c49-0 / same-01))))
