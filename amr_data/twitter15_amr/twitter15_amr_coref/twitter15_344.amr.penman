# ::snt I'm just kidding guys. f dat puta
# ::tokens ["I", "'m", "just", "kidding", "guys", ".", "f", "dat", "puta"]
# ::lemmas ["i", "be", "just", "kid", "guy", ".", "f", "dat", "puta"]
(c1-3 / multi-sentence
      :snt1 (c1-5 / kid-01
                  :ARG0 (c1-0 / i)
                  :ARG1 (c1-6 / guy)
                  :mod (c1-4 / just))
      :snt2 (c1-1 / puta
                  :mod (c1-2 / that)
                  :mode expressive))

# ::snt what! Lame. Was gonna tell you to bring Debbie. HAHAHAHA.
# ::tokens ["what", "!", "Lame", ".", "Was", "gon", "na", "tell", "you", "to", "bring", "Debbie", ".", "HAHAHAHA", "."]
# ::lemmas ["what", "!", "Lame", ".", "be", "going", "to", "tell", "you", "to", "bring", "Debbie", ".", "HAHAHAHA", "."]
(c2-5 / multi-sentence
      :snt1 (c2-3 / lame)
      :snt2 (c2-4 / tell-01
                  :ARG0 (c2-1 / i)
                  :ARG1 (c2-0 / bring-01
                              :ARG0 (c2-6 / you)
                              :ARG1 (c2-2 / person
                                          :name (c2-8 / name
                                                      :op1 "Debbie")))
                  :ARG2 c2-6)
      :snt3 (c2-7 / haha
                  :mode expressive))

# ::snt you know where we stay. Come without her. Hahahahaha
# ::tokens ["you", "know", "where", "we", "stay", ".", "Come", "without", "her", ".", "Hahahahaha"]
# ::lemmas ["you", "know", "where", "we", "stay", ".", "come", "without", "she", ".", "Hahahahaha"]
(c3-4 / multi-sentence
      :snt1 (c3-9 / know-01
                  :ARG0 (c3-6 / you)
                  :ARG1 (c3-2 / thing
                              :location-of (c3-0 / stay-01
                                                 :ARG1 (c3-8 / we))))
      :snt2 (c3-5 / come-01
                  :ARG1 c3-6
                  :mode imperative)
      :manner (c3-3 / accompany-01
                    :ARG0 (c3-1 / she)
                    :ARG1 c3-6
                    :polarity -)
      :snt3 (c3-7 / haha
                  :mode expressive))

# ::snt This one's for you : Starbucks Is Testing A New Latte That Tastes Exactly Like Guinness
# ::tokens ["This", "one", "'s", "for", "you", ":", "Starbucks", "Is", "Testing", "A", "New", "Latte", "That", "Tastes", "Exactly", "Like", "Guinness"]
# ::lemmas ["this", "one", "be", "for", "you", ":", "Starbucks", "be", "test", "a", "New", "Latte", "that", "taste", "exactly", "like", "Guinness"]
(c4-2 / one
      :mod (c4-3 / this)
      :prep-for (c4-10 / you)
      :ARG1-of (c4-5 / mean-01
                     :ARG2 (c4-4 / test-01
                                 :ARG0 (c4-8 / company
                                             :name (c4-12 / name
                                                          :op1 "Starbucks"))
                                 :ARG1 (c4-1 / Latte
                                             :ARG1-of (c4-11 / new-01)
                                             :ARG0-of (c4-0 / taste-02
                                                            :ARG1-of (c4-6 / resemble-01
                                                                           :ARG2 (c4-7 / company
                                                                                       :name (c4-9 / name
                                                                                                   :op1 "Guinness"))
                                                                           :mod (c4-13 / exact)))))))

# ::snt it was good with the raspberry in it! We need to hang out again guys. Stop being gay
# ::tokens ["it", "was", "good", "with", "the", "raspberry", "in", "it", "!", "We", "need", "to", "hang", "out", "again", "guys", ".", "Stop", "being", "gay"]
# ::lemmas ["it", "be", "good", "with", "the", "raspberry", "in", "it", "!", "we", "need", "to", "hang", "out", "again", "guy", ".", "stop", "be", "gay"]
(c5-7 / multi-sentence
      :snt1 (c5-13 / good-02
                   :ARG1 (c5-2 / it)
                   :ARG2 (c5-12 / raspberry
                                :location (c5-11 / it)))
      :snt2 (c5-0 / say-01
                  :ARG1 (c5-4 / obligate-01
                              :ARG1 (c5-1 / we)
                              :ARG2 (c5-9 / hang-out-06
                                          :ARG1 c5-1
                                          :mod (c5-5 / again)))
                  :ARG2 (c5-8 / guy))
      :snt3 (c5-3 / stop-01
                  :ARG0 (c5-10 / you)
                  :ARG1 (c5-6 / gay-01
                              :ARG1 c5-10)
                  :mode imperative))

# ::snt why did it taste like BBQ that one night! Imma try it again.
# ::tokens ["why", "did", "it", "taste", "like", "BBQ", "that", "one", "night", "!", "Imma", "try", "it", "again", "."]
# ::lemmas ["why", "do", "it", "taste", "like", "BBQ", "that", "one", "night", "!", "Imma", "try", "it", "again", "."]
(c6-6 / multi-sentence
      :snt1 (c6-8 / cause-01
                  :ARG0 (c6-11 / amr-unknown)
                  :ARG1 (c6-3 / taste-02
                              :ARG1 (c6-0 / it)
                              :ARG2 (c6-1 / barbecue-01)
                              :time (c6-12 / date-entity
                                           :dayperiod (c6-9 / night)
                                           :mod (c6-4 / one))))
      :snt2 (c6-5 / try-01
                  :ARG0 (c6-10 / i)
                  :ARG1 (c6-2 / it)
                  :mod (c6-7 / again)))

# ::snt Guinness
# ::tokens ["Guinness"]
# ::lemmas ["Guinness"]
(c7-1 / person
      :name (c7-0 / name
                  :op1 "Guinness"))

# ::snt that beer you bought is still sitting in the box tastes like BBQ wth!
# ::tokens ["that", "beer", "you", "bought", "is", "still", "sitting", "in", "the", "box", "tastes", "like", "BBQ", "wth", "!"]
# ::lemmas ["that", "beer", "you", "buy", "be", "still", "sit", "in", "the", "box", "taste", "like", "BBQ", "wth", "!"]
(c8-5 / taste-02
      :ARG1 (c8-2 / beer
                  :ARG1-of (c8-6 / buy-01
                                 :ARG0 (c8-7 / you))
                  :ARG1-of (c8-1 / sit-01
                                 :ARG2 (c8-4 / box)
                                 :mod (c8-3 / still)))
      :ARG2 (c8-0 / barbecue-01)
      :degree (c8-8 / quite)
      :mode expressive)

# ::snt Cc: RT : "Starbucks Is Testing A New Latte That Tastes Exactly Like Guinness
# ::tokens ["Cc", ":", "RT", ":", "\"", "Starbucks", "Is", "Testing", "A", "New", "Latte", "That", "Tastes", "Exactly", "Like", "Guinness"]
# ::lemmas ["cc", ":", "RT", ":", "\"", "Starbucks", "Is", "Testing", "A", "New", "Latte", "That", "Tastes", "Exactly", "Like", "Guinness"]
(c9-0 / say-01
      :ARG0 (c9-2 / person
                  :name (c9-12 / name
                               :op1 "Cc"))
      :ARG1 (c9-15 / publication
                   :name (c9-11 / name
                                :op1 "RT")
                   :ARG0-of (c9-1 / say-01
                                  :ARG1 (c9-4 / test-01
                                              :ARG0 (c9-8 / company
                                                          :name (c9-9 / name
                                                                      :op1 "Starbucks"))
                                              :ARG1 (c9-3 / Latte
                                                          :ARG1-of (c9-13 / new-01)
                                                          :ARG0-of (c9-5 / taste-02
                                                                         :ARG1-of (c9-6 / resemble-01
                                                                                        :ARG2 (c9-7 / company
                                                                                                    :name (c9-10 / name
                                                                                                                 :op1 "Guinness"))
                                                                                        :mod (c9-14 / exact))))))))

# ::snt : Starbucks Is Testing A New Latte That Tastes Exactly Like Guinness
# ::tokens [":", "Starbucks", "Is", "Testing", "A", "New", "Latte", "That", "Tastes", "Exactly", "Like", "Guinness"]
# ::lemmas [":", "Starbucks", "be", "test", "a", "New", "Latte", "that", "taste", "exactly", "like", "Guinness"]
(c10-1 / test-01
       :ARG0 (c10-5 / company
                    :name (c10-8 / name
                                 :op1 "Starbucks"))
       :ARG1 (c10-0 / Latte
                    :ARG1-of (c10-7 / new-01)
                    :ARG0-of (c10-2 / taste-02
                                    :ARG1-of (c10-3 / resemble-01
                                                    :ARG2 (c10-4 / company
                                                                 :name (c10-6 / name
                                                                              :op1 "Guinness"))
                                                    :mod (c10-9 / exact)))))

# ::snt Gross! I hate Guinness : Starbucks Is Testing A New Latte That Tastes Exactly Like Guinness
# ::tokens ["Gross", "!", "I", "hate", "Guinness", ":", "Starbucks", "Is", "Testing", "A", "New", "Latte", "That", "Tastes", "Exactly", "Like", "Guinness"]
# ::lemmas ["Gross", "!", "i", "hate", "Guinness", ":", "Starbucks", "be", "test", "a", "New", "Latte", "that", "taste", "exactly", "like", "Guinness"]
(c11-8 / hate-01
       :ARG0 (c11-0 / i)
       :ARG1 (c11-6 / company
                    :name (c11-10 / name
                                  :op1 "Guinness"))
       :ARG1-of (c11-5 / cause-01
                       :ARG0 (c11-2 / test-01
                                    :ARG0 c11-6
                                    :name (c11-9 / name
                                                 :op1 "Starbucks"))
                       :ARG1 (c11-1 / Latte
                                    :ARG1-of (c11-7 / new-01)
                                    :ARG0-of (c11-3 / taste-02
                                                    :ARG1-of (c11-4 / resemble-01
                                                                    :ARG2 c11-6
                                                                    :mod (c11-11 / exact)))))
       :mod (c11-12 / gross
                    :mode expressive))
