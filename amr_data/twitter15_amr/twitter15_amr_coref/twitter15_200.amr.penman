# ::snt LOL HAD NO IDEA WHAT SOME OF THESE WERE THANKS TO MY KIDS NOW I KNOW TOO FUINNY
# ::tokens ["LOL", "HAD", "NO", "IDEA", "WHAT", "SOME", "OF", "THESE", "WERE", "THANKS", "TO", "MY", "KIDS", "NOW", "I", "KNOW", "TOO", "FUINNY"]
# ::lemmas ["LOL", "have", "no", "idea", "what", "some", "of", "these", "be", "thank", "to", "my", "KIDS", "now", "i", "KNOW", "TOO", "fuinny"]
(c1-13 / and
       :op1 (c1-11 / have-03
                   :ARG0 (c1-2 / i)
                   :ARG1 (c1-12 / idea
                                :topic (c1-5 / thing
                                             :ARG2-of (c1-6 / thank-01
                                                            :ARG0 (c1-14 / kid
                                                                         :poss c1-2)
                                                            :ARG1 (c1-0 / some
                                                                        :ARG1-of (c1-4 / include-91
                                                                                       :ARG2 (c1-3 / this))))))
                   :manner (c1-7 / laugh-01
                                 :ARG0 c1-2
                                 :manner (c1-10 / loud)
                                 :mode expressive)
                   :polarity -)
       :op2 (c1-1 / know-01
                  :ARG0 c1-2
                  :ARG1 (c1-15 / foible
                               :degree (c1-9 / too))
                  :time (c1-8 / now)))

# ::snt : No baes allowed: a Chick-fil-A manager bans hip words
# ::tokens [":", "No", "baes", "allowed", ":", "a", "Chick", "-", "fil", "-", "A", "manager", "bans", "hip", "words"]
# ::lemmas [":", "no", "baes", "allow", ":", "a", "Chick", "-", "fil", "-", "a", "manager", "ban", "hip", "word"]
(c2-7 / allow-01
      :ARG1 (c2-1 / ban-01
                  :ARG0 (c2-2 / person
                              :ARG0-of (c2-3 / manage-01
                                             :ARG1 (c2-4 / company
                                                         :name (c2-5 / name
                                                                     :op1 "Chick-fil-A"))))
                  :ARG1 (c2-0 / word
                              :mod (c2-6 / hip)))
      :polarity -)

# ::snt In other words--no ebonics allowed, but the manager doesn't know all the words in the ebonics dictionary.
# ::tokens ["In", "other", "words", "--", "no", "ebonics", "allowed", ",", "but", "the", "manager", "does", "n't", "know", "all", "the", "words", "in", "the", "ebonics", "dictionary", "."]
# ::lemmas ["in", "other", "word", "--", "no", "ebonic", "allow", ",", "but", "the", "manager", "do", "not", "know", "all", "the", "word", "in", "the", "ebonic", "dictionary", "."]
(c3-9 / word-01
      :ARG1 (c3-7 / contrast-01
                  :ARG1 (c3-3 / allow-01
                              :ARG1 (c3-11 / electronics)
                              :polarity -)
                  :ARG2 (c3-10 / know-01
                               :ARG0 (c3-1 / person
                                           :ARG0-of (c3-5 / manage-01))
                               :ARG1 (c3-8 / word-01
                                           :mod (c3-6 / all)
                                           :location (c3-0 / dictionary
                                                           :mod (c3-2 / ebonics)))
                               :polarity -))
      :mod (c3-4 / other))

# ::snt I imagine the aggrieved Chick-fil-a manager, Eric, looks something like this
# ::tokens ["I", "imagine", "the", "aggrieved", "Chick", "-", "fil", "-", "a", "manager", ",", "Eric", ",", "looks", "something", "like", "this"]
# ::lemmas ["i", "imagine", "the", "aggrieved", "Chick", "-", "fil", "-", "a", "manager", ",", "Eric", ",", "look", "something", "like", "this"]
(c4-1 / imagine-01
      :ARG0 (c4-9 / i)
      :ARG1 (c4-3 / look-02
                  :ARG0 (c4-2 / person
                              :name (c4-11 / name
                                           :op1 "Eric")
                              :ARG0-of (c4-7 / manage-01
                                             :ARG1 (c4-8 / company
                                                         :name (c4-10 / name
                                                                      :op1 "Chick-fil-a")))
                              :ARG1-of (c4-5 / aggrieve-01))
                  :ARG1 (c4-0 / something
                              :ARG1-of (c4-4 / resemble-01
                                             :ARG2 (c4-6 / this)))))

# ::snt  No baes allowed: a Chick-fil-A manager bans hip words
# ::tokens [" ", "No", "baes", "allowed", ":", "a", "Chick", "-", "fil", "-", "A", "manager", "bans", "hip", "words"]
# ::lemmas [" ", "no", "baes", "allow", ":", "a", "Chick", "-", "fil", "-", "a", "manager", "ban", "hip", "word"]
(c6-7 / allow-01
      :ARG1 (c6-1 / ban-01
                  :ARG0 (c6-2 / person
                              :ARG0-of (c6-3 / manage-01
                                             :ARG1 (c6-4 / company
                                                         :name (c6-5 / name
                                                                     :op1 "Chick-fil-A"))))
                  :ARG1 (c6-0 / word
                              :mod (c6-6 / hip)))
      :polarity -)

# ::snt I don't know what "On Fleck" or "P.O.P. Hold it Dine" mean.
# ::tokens ["I", "do", "n't", "know", "what", "\"", "On", "Fleck", "\"", "or", "\"", "P.O.P.", "Hold", "it", "Dine", "\"", "mean", "."]
# ::lemmas ["i", "do", "not", "know", "what", "\"", "on", "Fleck", "\"", "or", "\"", "P.O.P.", "Hold", "it", "Dine", "\"", "mean", "."]
(c7-9 / know-01
      :ARG0 (c7-1 / i)
      :ARG1 (c7-3 / thing
                  :ARG2-of (c7-5 / mean-01
                                 :ARG1 (c7-4 / or
                                             :op1 (c7-10 / fleck-01)
                                             :op2 (c7-2 / person
                                                        :name (c7-8 / name
                                                                    :op1 "P.O.P."))
                                             :op3 (c7-6 / hold-01
                                                        :ARG1 (c7-7 / it)
                                                        :ARG2 (c7-0 / dine)))))
      :polarity -)
