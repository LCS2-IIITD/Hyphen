# ::snt Paye moi..Va mal..
# ::tokens ["Paye", "moi", "..", "Va", "mal", ".."]
# ::lemmas ["paye", "moi", "..", "Va", "mal", ".."]
(c1-0 / multi-sentence
      :snt1 (c1-1 / paye-mei)
      :snt2 (c1-2 / Va-moo))

# ::snt Vous avez t bloqu, vous ne pouvez ni suivre , ni voir les Tweets de En savoir moins?
# ::tokens ["Vous", "avez", "t", "bloqu", ",", "vous", "ne", "pouvez", "ni", "suivre", ",", "ni", "voir", "les", "Tweets", "de", "En", "savoir", "moins", "?"]
# ::lemmas ["Vous", "avez", "t", "bloqu", ",", "vous", "ne", "pouvez", "ni", "suivre", ",", "ni", "voir", "les", "Tweets", "de", "En", "savoir", "moin", "?"]
(c2-8 / and
      :op1 (c2-3 / possible-01
                 :ARG1 (c2-1 / bloqu)
                 :polarity -)
      :op2 (c2-10 / possible-01
                  :ARG1 (c2-9 / pouvez-01)
                  :polarity -)
      :op3 (c2-4 / possible-01
                 :ARG1 (c2-0 / suivre)
                 :polarity -)
      :op4 (c2-7 / voir
                 :ARG3-of (c2-2 / include-91
                                :ARG1 (c2-5 / publication
                                            :name (c2-6 / name
                                                        :op1 "Tweets"
                                                        :op2 "de"
                                                        :op3 "En"
                                                        :op4 "Savoir"
                                                        :op5 "Moins")))
                 :polarity -))

# ::snt Follow pas..rentre pas
# ::tokens ["Follow", "pas", "..", "rentre", "pas"]
# ::lemmas ["follow", "pas", "..", "rentre", "pas"]
(c3-4 / follow-02
      :ARG0 (c3-2 / you)
      :ARG1 (c3-3 / and
                  :op1 (c3-0 / pas)
                  :op2 (c3-5 / pas
                             :mod (c3-1 / rentre)))
      :mode imperative)

# ::snt Comme la centaine de rt plagiat aujourd'hui, etc..Faux tu toute couper, indiquer ?
# ::tokens ["Comme", "la", "centaine", "de", "rt", "plagiat", "aujourd'hui", ",", "etc", "..", "Faux", "tu", "toute", "couper", ",", "indiquer", "?"]
# ::lemmas ["Comme", "la", "centaine", "de", "rt", "plagiat", "aujourd'hui", ",", "etc", "..", "Faux", "tu", "toute", "couper", ",", "indiquer", "?"]
(c4-4 / multi-sentence
      :snt1 (c4-13 / and
                   :op1 (c4-8 / comme
                              :poss (c4-5 / country
                                          :name (c4-7 / name
                                                      :op1 "France")))
                   :op2 (c4-2 / person
                              :name (c4-11 / name
                                           :op1 "Aujourd'hui"))
                   :op3 (c4-14 / et-cetera))
      :snt2 (c4-0 / say-01
                  :ARG0 (c4-1 / i)
                  :ARG1 (c4-15 / faux
                               :op1 (c4-10 / you)
                               :ARG2-of (c4-12 / include-91
                                               :ARG1 (c4-9 / couper)))
                  :ARG2 (c4-3 / indiquer)
                  :polarity (c4-6 / amr-unknown)))

# ::snt Le compte de est protg. Comme tu vois..Moi aussi..Tu vois toute pareille..Fraude
# ::tokens ["Le", "compte", "de", "est", "protg", ".", "Comme", "tu", "vois", "..", "Moi", "aussi", "..", "Tu", "vois", "toute", "pareille", "..", "Fraude"]
# ::lemmas ["Le", "compte", "de", "est", "protg", ".", "Comme", "tu", "vois", "..", "Moi", "aussi", "..", "Tu", "vois", "toute", "pareille", "..", "fraude"]
(c5-2 / multi-sentence
      :snt1 (c5-5 / have-polarity-91
                  :ARG1 (c5-3 / commpte
                              :mod (c5-11 / est))
                  :ARG2 -)
      :snt2 (c5-1 / possible-01
                  :ARG1 (c5-10 / vois
                               :poss (c5-6 / you)))
      :snt3 c5-5
      :ARG1 (c5-9 / moi)
      :snt4 c5-5
      :ARG1 (c5-7 / vois
                  :poss (c5-0 / you))
      :snt5 (c5-12 / pareille)
      :snt6 (c5-4 / person
                  :name (c5-8 / name
                              :op1 "Fraude"))
      :ARG2 -
      :ARG2 -)

# ::snt Une Algrienne Nn mais voil quoi c vrai que bon voil bon aprs c vrai que voil
# ::tokens ["Une", "Algrienne", "Nn", "mais", "voil", "quoi", "c", "vrai", "que", "bon", "voil", "bon", "aprs", "c", "vrai", "que", "voil"]
# ::lemmas ["Une", "Algrienne", "Nn", "mais", "voil", "quoi", "c", "vrai", "que", "bon", "voil", "bon", "aprs", "c", "vrai", "que", "voil"]
(c6-3 / multi-sentence
      :snt1 (c6-0 / person
                  :name (c6-10 / name
                               :op1 "Une"
                               :op2 "Algrienne"))
      :snt2 (c6-6 / cause-01
                  :ARG0 (c6-11 / voil-01
                               :ARG0 (c6-1 / amr-unknown)
                               :ARG1 (c6-8 / voil-01
                                           :ARG0 (c6-4 / amr-unknown)
                                           :ARG1 (c6-2 / amr-unknown)))
                  :ARG1 (c6-9 / voil-01
                              :ARG0 (c6-7 / amr-unknown)
                              :ARG1 (c6-5 / amr-unknown))))

# ::snt dog, cat, fish, brother, mother, another and of course a plagiarism
# ::tokens ["dog", ",", "cat", ",", "fish", ",", "brother", ",", "mother", ",", "another", "and", "of", "course", "a", "plagiarism"]
# ::lemmas ["dog", ",", "cat", ",", "fish", ",", "brother", ",", "mother", ",", "another", "and", "of", "course", "a", "plagiarism"]
(c7-9 / and
      :op1 (c7-10 / dog)
      :op2 (c7-7 / cat)
      :op3 (c7-13 / fish)
      :op4 (c7-2 / person
                 :ARG0-of (c7-8 / have-rel-role-91
                                :ARG2 (c7-0 / brother)))
      :op5 (c7-12 / person
                  :ARG0-of (c7-1 / have-rel-role-91
                                 :ARG2 (c7-4 / mother)))
      :op6 (c7-11 / person
                  :ARG0-of (c7-6 / plagiarize-01)
                  :mod (c7-5 / another))
      :mod (c7-3 / of-course))

# ::snt RT ETredwell He's got the whole world in his hands and your sister,
# ::tokens ["RT", "ETredwell", "He", "'s", "got", "the", "whole", "world", "in", "his", "hands", "and", "your", "sister", ","]
# ::lemmas ["RT", "ETredwell", "he", "be", "get", "the", "whole", "world", "in", "his", "hand", "and", "your", "sister", ","]
(c8-0 / say-01
      :ARG0 (c8-4 / publication
                  :name (c8-10 / name
                               :op1 "RT"))
      :ARG1 (c8-2 / in-ones-hands-07
                  :ARG0 (c8-6 / and
                              :op1 (c8-8 / he)
                              :op2 (c8-12 / person
                                          :ARG0-of (c8-3 / have-rel-role-91
                                                         :ARG1 (c8-9 / you)
                                                         :ARG2 (c8-5 / sister))))
                  :ARG1 (c8-1 / world
                              :mod (c8-7 / whole)))
      :ARG2 (c8-11 / person
                   :name c8-10
                   :op1 "ETredwell"))

# ::snt Paye moi. Terro ..Tann de vous crires...
# ::tokens ["Paye", "moi", ".", "Terro", "..", "Tann", "de", "vous", "crires", "..."]
# ::lemmas ["paye", "moi", ".", "Terro", "..", "Tann", "de", "vous", "crire", "..."]
(c9-2 / multi-sentence
      :snt1 (c9-0 / paye-de-mari)
      :snt2 (c9-1 / terro)
      :snt3 (c9-3 / have-mod-91
                  :ARG1 (c9-5 / person)
                  :ARG2 (c9-4 / vous-crires)))

# ::snt Like You to Hate to Like Me
# ::tokens ["Like", "You", "to", "Hate", "to", "Like", "Me"]
# ::lemmas ["like", "you", "to", "hate", "to", "like", "i"]
(c10-0 / like-01
       :ARG0 (c10-3 / i)
       :ARG1 (c10-1 / like-01
                    :ARG0 (c10-2 / you)
                    :ARG1 c10-3))

# ::snt The math of the Rubik's cube
# ::tokens ["The", "math", "of", "the", "Rubik", "'s", "cube"]
# ::lemmas ["the", "math", "of", "the", "Rubik", "'s", "cube"]
(c11-2 / mathematics
       :topic (c11-3 / cube
                     :mod (c11-1 / thing
                                 :name (c11-0 / name
                                              :op1 "Rubik's"))))

# ::snt "Say No to Drugs":Than Propaganda at Changing Behavior
# ::tokens ["\"", "Say", "No", "to", "Drugs\":Than", "Propaganda", "at", "Changing", "Behavior"]
# ::lemmas ["\"", "say", "no", "to", "drugs\":than", "Propaganda", "at", "Changing", "Behavior"]
(c12-2 / propaganda
       :ARG0-of (c12-3 / change-01
                       :ARG1 (c12-1 / behave-01))
       :domain (c12-0 / say-01
                      :ARG0 (c12-4 / you)
                      :ARG1 (c12-5 / no)
                      :ARG2 (c12-6 / drug)
                      :mode imperative))

# ::snt Secret Has Become Power Companies' Worst Nightmare
# ::tokens ["Secret", "Has", "Become", "Power", "Companies", "'", "Worst", "Nightmare"]
# ::lemmas ["secret", "have", "become", "Power", "Companies", "'", "bad", "Nightmare"]
(c13-1 / become-01
       :ARG1 (c13-0 / secret)
       :ARG2 (c13-7 / nightmare
                    :poss (c13-4 / company
                                 :mod (c13-2 / power))
                    :ARG1-of (c13-6 / have-degree-91
                                    :ARG2 (c13-5 / bad-07
                                                 :ARG1 c13-7)
                                    :ARG3 (c13-3 / most))))

# ::snt Ma famille pas de la vermine comme vous autres.
# ::tokens ["Ma", "famille", "pas", "de", "la", "vermine", "comme", "vous", "autres", "."]
# ::lemmas ["Ma", "famille", "pas", "de", "la", "vermine", "comme", "vous", "autre", "."]
(c17-4 / multi-sentence
       :snt1 (c17-0 / say-01
                    :ARG0 (c17-1 / i)
                    :ARG1 (c17-8 / amr-unknown)
                    :ARG2 (c17-2 / person
                                 :name (c17-6 / name
                                              :op1 "Ma"
                                              :op2 "Famille"))
                    :ARG3 (c17-9 / person
                                 :name c17-6
                                 :op1 "de"
                                 :op2 "la"
                                 :op3 "Vermine"))
       :snt2 (c17-5 / amr-unknown
                    :ARG1-of (c17-7 / cause-01
                                    :ARG0 (c17-3 / autres))
                    :polarity -))

# ::snt Paye moi..Mon compte pas un show plantaire. Paye
# ::tokens ["Paye", "moi", "..", "Mon", "compte", "pas", "un", "show", "plantaire", ".", "Paye"]
# ::lemmas ["paye", "moi", "..", "Mon", "compte", "pas", "un", "show", "plantaire", ".", "paye"]
(c18-2 / multi-sentence
       :snt1 (c18-1 / person
                    :name (c18-7 / name
                                 :op1 "Paye"))
       :snt2 (c18-9 / person
                    :name (c18-6 / name
                                 :op1 "Moi"))
       :snt3 (c18-8 / propose-01
                    :ARG0 (c18-3 / person)
                    :ARG1 (c18-4 / nouve-polarity-91
                                 :ARG1 (c18-0 / show-01
                                              :ARG1 (c18-5 / plantaire))
                                 :ARG2 c18-3)))

# ::snt Ensuite, je veux savoir mon pre toute morceaux de son corps sont la.
# ::tokens ["Ensuite", ",", "je", "veux", "savoir", "mon", "pre", "toute", "morceaux", "de", "son", "corps", "sont", "la", "."]
# ::lemmas ["Ensuite", ",", "je", "veux", "savoir", "mon", "pre", "toute", "morceaux", "de", "son", "corps", "sont", "la", "."]
(c19-0 / say-01
       :ARG0 (c19-1 / i)
       :ARG1 (c19-9 / have-polarity-91
                    :ARG1-of (c19-7 / cause-01
                                    :ARG0 (c19-10 / amr-unknown))
                    :condition (c19-4 / oppose-01
                                      :ARG0 (c19-3 / person
                                                   :name (c19-8 / name
                                                                :op1 "Jean"
                                                                :op2 "Vivux"
                                                                :op3 "Savoir"))
                                      :ARG1 (c19-5 / morceaux
                                                   :mod (c19-2 / son-of-a-bitch)))
                    :ARG2 -)
       :ARG2-of (c19-6 / cite-01
                       :ARG0 c19-1))

# ::snt Demande quoi pour me payer..Meurtre,Menterie,Menace.. Paye moi. terro etc
# ::tokens ["Demande", "quoi", "pour", "me", "payer", "..", "Meurtre", ",", "Menterie", ",", "Menace", "..", "Paye", "moi", ".", "terro", "etc"]
# ::lemmas ["demande", "quoi", "pour", "i", "payer", "..", "Meurtre", ",", "Menterie", ",", "Menace", "..", "Paye", "moi", ".", "terro", "etc"]
(c20-3 / multi-sentence
       :snt1 (c20-2 / pour-01
                    :ARG1 (c20-14 / person
                                  :ARG0-of (c20-12 / pay-01))
                    :ARG2 (c20-1 / i))
       :snt2 (c20-9 / and
                    :op1 (c20-4 / person
                                :name (c20-5 / name
                                             :op1 "Meurtre"))
                    :op2 (c20-6 / person
                                :name (c20-8 / name
                                             :op1 "Menterie"))
                    :op3 (c20-11 / person
                                 :name (c20-7 / name
                                              :op1 "Menace"))
                    :op4 (c20-0 / person
                                :name (c20-10 / name
                                              :op1 "Paye"
                                              :op2 "Moi"))
                    :op5 (c20-13 / et-cetera)))

# ::snt Paye moi
# ::tokens ["Paye", "moi"]
# ::lemmas ["paye", "moi"]
(c21-1 / pay-01
       :ARG2 (c21-0 / moi))

# ::snt Paye moi. Presse
# ::tokens ["Paye", "moi", ".", "Presse"]
# ::lemmas ["paye", "moi", ".", "presse"]
(c22-0 / multi-sentence
       :snt1 (c22-2 / paye-de-mari)
       :snt2 (c22-1 / presse))

# ::snt Main screen turn on! Take off every meme. For great injustice.
# ::tokens ["Main", "screen", "turn", "on", "!", "Take", "off", "every", "meme", ".", "For", "great", "injustice", "."]
# ::lemmas ["main", "screen", "turn", "on", "!", "take", "off", "every", "meme", ".", "for", "great", "injustice", "."]
(c23-3 / multi-sentence
       :snt1 (c23-1 / on-01
                    :ARG1 (c23-0 / screen
                                 :mod (c23-7 / main)))
       :snt2 (c23-2 / take-off-07
                    :ARG0 (c23-5 / you)
                    :ARG1 (c23-4 / meme
                                 :mod (c23-8 / every))
                    :mode imperative)
       :snt3 (c23-6 / justice
                    :degree (c23-9 / great)
                    :polarity -))

# ::snt Timing,perseverance,10 years of trying will eventually make you look like overnight success.
# ::tokens ["Timing", ",", "perseverance,10", "years", "of", "trying", "will", "eventually", "make", "you", "look", "like", "overnight", "success", "."]
# ::lemmas ["timing", ",", "perseverance,10", "year", "of", "try", "will", "eventually", "make", "you", "look", "like", "overnight", "success", "."]
(c24-7 / make-02
       :ARG0 (c24-4 / try-01
                    :ARG0 (c24-8 / you)
                    :duration (c24-5 / temporal-quantity
                                     :unit (c24-0 / year)
                                     :quant 10)
                    :manner (c24-2 / patience))
       :ARG1 (c24-3 / look-02
                    :ARG0 c24-8
                    :ARG1 (c24-1 / succeed-01
                                 :ARG0 c24-8
                                 :time (c24-6 / overnight)))
       :time (c24-9 / eventual))

# ::snt Paye moi. Pas a ton service, pas ton esclave, pas ton chum, pas gratis, en faite rien.Paye
# ::tokens ["Paye", "moi", ".", "Pas", "a", "ton", "service", ",", "pas", "ton", "esclave", ",", "pas", "ton", "chum", ",", "pas", "gratis", ",", "en", "faite", "rien", ".", "Paye"]
# ::lemmas ["paye", "moi", ".", "Pas", "a", "ton", "service", ",", "pas", "ton", "esclave", ",", "pas", "ton", "chum", ",", "pas", "gratis", ",", "en", "faite", "rien", ".", "Paye"]
(c25-4 / multi-sentence
       :snt1 (c25-1 / paye
                    :mod (c25-10 / moi))
       :snt2 (c25-9 / and
                    :op1 (c25-14 / Pas-02
                                 :ARG1 (c25-0 / service
                                              :quant (c25-2 / ton)))
                    :op2 (c25-12 / pas-02
                                 :ARG1 (c25-13 / esclave))
                    :op3 (c25-5 / pas-02
                                :ARG1 (c25-6 / chum))
                    :op4 (c25-7 / pas-02
                                :ARG1 (c25-8 / gratis))
                    :op5 (c25-3 / et-cetera
                                :snt3-of c25-9))
       :snt4 (c25-11 / paye
                     :mod c25-10))

# ::snt moi. Va mettre un autre ligne en . Pas ton serviteur.. Plagiat Terro etc.
# ::tokens ["moi", ".", "Va", "mettre", "un", "autre", "ligne", "en", ".", "Pas", "ton", "serviteur", "..", "Plagiat", "Terro", "etc", "."]
# ::lemmas ["moi", ".", "Va", "mettre", "un", "autre", "ligne", "en", ".", "Pas", "ton", "serviteur", "..", "Plagiat", "Terro", "etc", "."]
(c26-5 / multi-sentence
       :snt1 (c26-1 / person
                    :name (c26-8 / name
                                 :op1 "Moi"))
       :snt2 (c26-4 / and
                    :op1 (c26-9 / mettre
                                :op1 (c26-2 / ligne)
                                :op2 (c26-10 / et-cetera)
                                :polarity -)
                    :op2 (c26-11 / Pas-03
                                 :ARG1 (c26-0 / serve-01
                                              :quant (c26-3 / ton)))
                    :op3 (c26-6 / company
                                :name (c26-7 / name
                                             :op1 "Plagiat"
                                             :op2 "Terro"))
                    :op4 c26-10))

# ::snt .
# ::tokens ["."]
# ::lemmas ["."]
(c28-0 / amr-empty)

# ::snt . terro
# ::tokens [".", "terro"]
# ::lemmas [".", "terro"]
(c30-0 / terro)

# ::snt et des traitres n'est pas victime! il est complice." G. Orwell
# ::tokens ["et", "des", "traitres", "n'est", "pas", "victime", "!", "il", "est", "complice", ".", "\"", "G.", "Orwell"]
# ::lemmas ["et", "des", "traitre", "n'est", "pas", "victime", "!", "il", "est", "complice", ".", "\"", "G.", "Orwell"]
(c31-4 / multi-sentence
       :snt1 (c31-7 / n'est-polarity-of
                    :ARG0 (c31-8 / et-cetera))
       :snt2 (c31-3 / obligate-01
                    :ARG1 (c31-1 / il)
                    :ARG2 (c31-5 / complice))
       :ARG1-of (c31-0 / say-01
                       :ARG0 (c31-2 / person
                                    :name (c31-6 / name
                                                 :op1 "G."
                                                 :op2 "Orwell"))))

# ::snt "Un peuple qui lit des corrompus, des rengats, des imposteurs, des voleurs
# ::tokens ["\"", "Un", "peuple", "qui", "lit", "des", "corrompus", ",", "des", "rengats", ",", "des", "imposteurs", ",", "des", "voleurs"]
# ::lemmas ["\"", "Un", "peuple", "qui", "light", "des", "corrompus", ",", "des", "rengats", ",", "des", "imposteur", ",", "des", "voleur"]
(c32-7 / amr-un-principle
       :name (c32-6 / name
                    :op1 "Un"
                    :op2 "Peuple")
       :ARG0-of (c32-2 / lit-01
                       :ARG1 (c32-4 / and
                                    :op1 (c32-5 / corrompus)
                                    :op2 (c32-3 / rengat)
                                    :op3 (c32-1 / person
                                                :ARG0-of (c32-0 / imposteur-01)
                                                :op4-of c32-4)
                                    :ARG0-of (c32-8 / voleur-01)))
       :polarity -)

# ::snt Why do game developers prefer Windows?
# ::tokens ["Why", "do", "game", "developers", "prefer", "Windows", "?"]
# ::lemmas ["why", "do", "game", "developer", "prefer", "Windows", "?"]
(c33-0 / prefer-01
       :ARG0 (c33-7 / person
                    :ARG0-of (c33-5 / develop-02
                                    :ARG1 (c33-3 / game)))
       :ARG1 (c33-6 / product
                    :name (c33-4 / name
                                 :op1 "Windows"))
       :ARG1-of (c33-2 / cause-01
                       :ARG0 (c33-1 / amr-unknown)))

# ::snt Apple contre Samsung : apprendre mieux plagier
# ::tokens ["Apple", "contre", "Samsung", ":", "apprendre", "mieux", "plagier"]
# ::lemmas ["Apple", "contre", "Samsung", ":", "apprendre", "mieux", "plagier"]
(c34-0 / say-01
       :ARG0 (c34-4 / company
                    :name (c34-6 / name
                                 :op1 "Apple"))
       :ARG1 (c34-2 / apprendre-mieux
                    :op1 (c34-1 / plagier))
       :ARG2 (c34-3 / company
                    :name (c34-5 / name
                                 :op1 "Samsung")))

# ::snt On m'annonce un stream indfendable h
# ::tokens ["On", "m'annonce", "un", "stream", "indfendable", "h"]
# ::lemmas ["on", "m'annonce", "un", "stream", "indfendable", "h"]
(c35-3 / possible-01
       :ARG1 (c35-0 / sustain-01
                    :ARG1 (c35-2 / stream-01))
       :medium (c35-1 / broadcast-program
                      :name (c35-4 / name
                                   :op1 "M'annonce"))
       :polarity -)

# ::snt I once ate a triple salchowThe isu judges whit nachosThe sale and pelletier golden scandal
# ::tokens ["I", "once", "ate", "a", "triple", "salchowThe", "isu", "judges", "whit", "nachosThe", "sale", "and", "pelletier", "golden", "scandal"]
# ::lemmas ["i", "once", "eat", "a", "triple", "salchowThe", "isu", "judge", "whit", "nachosThe", "sale", "and", "pelletier", "golden", "scandal"]
(c36-7 / multi-sentence
       :snt1 (c36-15 / eat-01
                     :ARG0 (c36-1 / i)
                     :ARG1 (c36-0 / salad
                                  :mod (c36-4 / triple))
                     :time (c36-5 / once))
       :snt2 (c36-3 / person
                    :ARG0-of (c36-11 / have-org-role-91
                                     :ARG3 (c36-12 / judge-01))
                    :mod (c36-13 / isu)
                    :ARG0-of (c36-14 / whit-03
                                     :ARG1 (c36-9 / nacho)))
       :snt3 (c36-6 / and
                    :op1 (c36-2 / sell-01)
                    :op2 (c36-8 / scandal
                                :mod (c36-16 / golden)
                                :mod (c36-10 / pelletier))))

# ::snt Paye moi. Terro
# ::tokens ["Paye", "moi", ".", "Terro"]
# ::lemmas ["paye", "moi", ".", "Terro"]
(c37-1 / multi-sentence
       :snt1 (c37-3 / paye-mari)
       :snt2 (c37-2 / person
                    :name (c37-0 / name
                                 :op1 "Terro")))

# ::snt .H Bin
# ::tokens [".H", "Bin"]
# ::lemmas [".h", "Bin"]
(c38-1 / person
       :name (c38-0 / name
                    :op1 "H"
                    :op2 "Bin"))

# ::snt Faite de quoi sont fou raide.
# ::tokens ["Faite", "de", "quoi", "sont", "fou", "raide", "."]
# ::lemmas ["Faite", "de", "quoi", "sont", "fou", "raide", "."]
(c39-2 / foul-01
       :ARG1 (c39-0 / raide)
       :mod (c39-1 / faite-de-qui)
       :polarity -)

# ::snt t organis avec le temps..La, paye moi voleur.. Faut dire quoi..Faire comme eux pour toi
# ::tokens ["t", "organis", "avec", "le", "temps", "..", "La", ",", "paye", "moi", "voleur", "..", "Faut", "dire", "quoi", "..", "Faire", "comme", "eux", "pour", "toi"]
# ::lemmas ["t", "organis", "avec", "le", "temp", "..", "La", ",", "paye", "moi", "voleur", "..", "Faut", "dire", "quoi", "..", "faire", "comme", "eux", "pour", "toi"]
(c40-6 / multi-sentence
       :snt1 (c40-3 / organization
                    :polarity (c40-10 / amr-unknown)
                    :manner (c40-12 / vec
                                    :op1 (c40-4 / temp)))
       :snt2 (c40-2 / pay-01
                    :ARG0 (c40-8 / you)
                    :ARG1 (c40-7 / amr-unknown)
                    :ARG3 (c40-9 / voila)
                    :mode imperative)
       :snt3 (c40-14 / faut-01
                     :ARG0 (c40-1 / you)
                     :ARG1 (c40-11 / dire-qui)
                     :mode imperative)
       :snt4 (c40-13 / pour-03
                     :ARG0 (c40-0 / you)
                     :ARG1 (c40-5 / amr-unknown)
                     :mode imperative))

# ::snt Conseille regarder cas que j'ai rt hier.. Ok, la commence a a faire..t battu, tuer,etc
# ::tokens ["Conseille", "regarder", "cas", "que", "j'ai", "rt", "hier", "..", "Ok", ",", "la", "commence", "a", "a", "faire", "..", "t", "battu", ",", "tuer", ",", "etc"]
# ::lemmas ["Conseille", "regarder", "cas", "que", "j'ai", "rt", "hier", "..", "ok", ",", "la", "commence", "a", "a", "faire", "..", "t", "battu", ",", "tuer", ",", "etc"]
(c41-12 / multi-sentence
        :snt1 (c41-3 / regard-01
                     :ARG0 (c41-11 / person
                                   :name (c41-15 / name
                                                 :op1 "Conseille"))
                     :ARG1 (c41-16 / person
                                   :ARG0-of (c41-19 / have-rel-role-91
                                                    :ARG1 c41-11
                                                    :ARG2 (c41-2 / cas))))
        :snt2 (c41-0 / say-01
                     :ARG1 (c41-7 / and
                                  :op1 (c41-4 / hello)
                                  :op2 (c41-8 / person
                                              :name (c41-14 / name
                                                            :op1 "Hamburg")))
                     :ARG2 c41-16)
        :snt3 (c41-6 / okay-01
                     :ARG1 (c41-18 / commence-01
                                   :ARG0 (c41-13 / you)
                                   :ARG1 (c41-1 / and
                                                :op1 (c41-10 / faire-04)
                                                :op2 (c41-5 / battu)
                                                :op3 (c41-17 / tuer)
                                                :op4 (c41-9 / et-cetera)))))

# ::snt La, terro demain faite ou un autre semaine..Pas toi..Moi
# ::tokens ["La", ",", "terro", "demain", "faite", "ou", "un", "autre", "semaine", "..", "Pas", "toi", "..", "Moi"]
# ::lemmas ["La", ",", "terro", "demain", "faite", "ou", "un", "autre", "semaine", "..", "Pas", "toi", "..", "Moi"]
(c42-5 / multi-sentence
       :snt1 (c42-3 / laugh-01
                    :ARG0 (c42-1 / i)
                    :ARG2 (c42-2 / person
                                 :name (c42-8 / name
                                              :op1 "La"))
                    :mode expressive)
       :snt2 (c42-4 / and
                    :op1 (c42-10 / faite)
                    :op2 (c42-6 / autre
                                :domain (c42-9 / person)
                                :polarity -)
                    :op3 (c42-0 / semaine
                                :mod (c42-7 / un))))

# ::snt Ensuite, terro..Rien de vous autres la dedans.
# ::tokens ["Ensuite", ",", "terro", "..", "Rien", "de", "vous", "autres", "la", "dedans", "."]
# ::lemmas ["Ensuite", ",", "terro", "..", "Rien", "de", "vous", "autre", "la", "dedan", "."]
(c43-2 / multi-sentence
       :snt1 (c43-4 / ensuite)
       :snt2 (c43-1 / terro)
       :snt3 (c43-0 / person
                    :name (c43-3 / name
                                 :op1 "Rien"
                                 :op2 "de"
                                 :op3 "vous autres"
                                 :op4 "la"
                                 :op5 " dedans")))

# ::snt Paye moi.. Pas le bon dieu..Prsentement mots, voleur,corruption,plagiat,fraud,voyeur,etc
# ::tokens ["Paye", "moi", "..", "Pas", "le", "bon", "dieu", "..", "Prsentement", "mots", ",", "voleur", ",", "corruption", ",", "plagiat", ",", "fraud", ",", "voyeur", ",", "etc"]
# ::lemmas ["paye", "moi", "..", "Pas", "le", "bon", "dieu", "..", "prsentement", "mot", ",", "voleur", ",", "corruption", ",", "plagiat", ",", "fraud", ",", "voyeur", ",", "etc"]
(c44-1 / multi-sentence
       :snt1 (c44-3 / paye-de-mari)
       :snt2 (c44-0 / le)
       :snt3 (c44-2 / et-cetera
                    :snt4-of c44-1
                    :op1-of c44-1
                    :op2-of c44-1
                    :op3-of c44-1
                    :op4-of c44-1
                    :op5-of c44-1))

# ::snt Paye moi.. Gage , va rien faire avec rt la.. Heille, fait favoris de hier.
# ::tokens ["Paye", "moi", "..", "Gage", ",", "va", "rien", "faire", "avec", "rt", "la", "..", "Heille", ",", "fait", "favoris", "de", "hier", "."]
# ::lemmas ["paye", "moi", "..", "Gage", ",", "va", "rien", "faire", "avec", "rt", "la", "..", "Heille", ",", "fait", "favoris", "de", "hier", "."]
(c45-5 / multi-sentence
       :snt1 (c45-2 / paye-polite
                    :ARG2 (c45-14 / person
                                  :name (c45-11 / name
                                                :op1 "Paye")))
       :snt2 (c45-1 / say-01
                    :ARG1 (c45-4 / and
                                 :op1 (c45-13 / faire-03
                                              :ARG0 (c45-9 / person
                                                           :name (c45-10 / name
                                                                         :op1 "Gage"))
                                              :ARG1 (c45-6 / person
                                                           :name (c45-7 / name
                                                                        :op1 "Rt"
                                                                        :op2 "la")))
                                 :op2 (c45-0 / fait
                                             :mod (c45-3 / favoris
                                                         :mod (c45-8 / person
                                                                     :name (c45-12 / name
                                                                                   :op1 "Heille")
                                                                     :ARG2-of c45-1))))))

# ::snt Paye moi. Presse
# ::tokens ["Paye", "moi", ".", "Presse"]
# ::lemmas ["paye", "moi", ".", "presse"]
(c46-0 / multi-sentence
       :snt1 (c46-2 / paye-de-mari)
       :snt2 (c46-1 / presse))

# ::snt Harclement sur internet: Londres propose des peines de prison
# ::tokens ["Harclement", "sur", "internet", ":", "Londres", "propose", "des", "peines", "de", "prison"]
# ::lemmas ["Harclement", "sur", "internet", ":", "londre", "propose", "des", "peines", "de", "prison"]
(c47-2 / propose-01
       :ARG0 (c47-7 / person
                    :name (c47-4 / name
                                 :op1 "Londres"))
       :ARG1 (c47-5 / desposs
                    :mod (c47-6 / prison))
       :topic (c47-3 / crime-02
                     :mod (c47-0 / sur
                                 :op1 (c47-1 / internet))))

# ::snt but can't access many of the results - Vox
# ::tokens ["but", "ca", "n't", "access", "many", "of", "the", "results", "-", "Vox"]
# ::lemmas ["but", "can", "not", "access", "many", "of", "the", "result", "-", "vox"]
(c49-0 / say-01
       :ARG0 (c49-1 / publication
                    :name (c49-6 / name
                                 :op1 "Vox"))
       :ARG1 (c49-5 / contrast-01
                    :ARG2 (c49-7 / possible-01
                                 :ARG1 (c49-3 / access-01
                                              :ARG1 (c49-2 / result
                                                           :quant (c49-4 / many)))
                                 :polarity -)))

# ::snt Taxpayers spend $140 billion funding science each year
# ::tokens ["Taxpayers", "spend", "$", "140", "billion", "funding", "science", "each", "year"]
# ::lemmas ["taxpayer", "spend", "$", "140", "billion", "funding", "science", "each", "year"]
(c50-0 / spend-01
       :ARG0 (c50-2 / person
                    :ARG0-of (c50-9 / pay-01
                                    :ARG1 (c50-3 / tax)))
       :ARG1 (c50-10 / fund-01
                     :ARG0 c50-2
                     :ARG1 (c50-1 / science)
                     :ARG3 (c50-5 / monetary-quantity
                                  :unit (c50-8 / dollar)
                                  :quant 1400000000000))
       :frequency (c50-7 / rate-entity-91
                         :ARG2 (c50-4 / temporal-quantity
                                      :unit (c50-6 / year)
                                      :quant 1)))
